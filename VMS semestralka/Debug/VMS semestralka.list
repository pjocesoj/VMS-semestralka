
VMS semestralka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6e8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800b870  0800b870  0001b870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8e8  0800b8e8  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b8e8  0800b8e8  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b8e8  0800b8e8  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8e8  0800b8e8  0001b8e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8ec  0800b8ec  0001b8ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800b8f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002017c  2**0
                  CONTENTS
 10 .bss          00001378  2000017c  2000017c  0002017c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200014f4  200014f4  0002017c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   000158b7  00000000  00000000  000201ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000035ff  00000000  00000000  00035aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001250  00000000  00000000  000390a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000df4  00000000  00000000  0003a2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000210f0  00000000  00000000  0003b0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018a06  00000000  00000000  0005c1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bf92e  00000000  00000000  00074be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004bbc  00000000  00000000  00134510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  001390cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000017c 	.word	0x2000017c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b858 	.word	0x0800b858

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000180 	.word	0x20000180
 80001c4:	0800b858 	.word	0x0800b858

080001c8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	if (htim == &htim17)
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4a0a      	ldr	r2, [pc, #40]	; (80001fc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80001d4:	4293      	cmp	r3, r2
 80001d6:	d104      	bne.n	80001e2 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		HAL_GPIO_TogglePin(LD10_GPIO_Port, LD10_Pin);
 80001d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001dc:	4808      	ldr	r0, [pc, #32]	; (8000200 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80001de:	f002 fc8f 	bl	8002b00 <HAL_GPIO_TogglePin>
	}
	if (htim == &htim16)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	4a07      	ldr	r2, [pc, #28]	; (8000204 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80001e6:	4293      	cmp	r3, r2
 80001e8:	d104      	bne.n	80001f4 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		HAL_GPIO_TogglePin(LD9_GPIO_Port, LD9_Pin);
 80001ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001ee:	4804      	ldr	r0, [pc, #16]	; (8000200 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80001f0:	f002 fc86 	bl	8002b00 <HAL_GPIO_TogglePin>
	}
}
 80001f4:	bf00      	nop
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	200002d0 	.word	0x200002d0
 8000200:	48001000 	.word	0x48001000
 8000204:	20000284 	.word	0x20000284

08000208 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a06      	ldr	r2, [pc, #24]	; (800022c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d104      	bne.n	8000222 <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
	{
		HAL_GPIO_TogglePin(LD8_GPIO_Port, LD8_Pin);
 8000218:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800021c:	4804      	ldr	r0, [pc, #16]	; (8000230 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 800021e:	f002 fc6f 	bl	8002b00 <HAL_GPIO_TogglePin>
	}
}
 8000222:	bf00      	nop
 8000224:	3708      	adds	r7, #8
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	20000238 	.word	0x20000238
 8000230:	48001000 	.word	0x48001000

08000234 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800023a:	f000 fc93 	bl	8000b64 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800023e:	f000 f843 	bl	80002c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000242:	f000 fa57 	bl	80006f4 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000246:	f000 f8a3 	bl	8000390 <MX_ADC1_Init>
	MX_ADC3_Init();
 800024a:	f000 f911 	bl	8000470 <MX_ADC3_Init>
	MX_TIM17_Init();
 800024e:	f000 fa29 	bl	80006a4 <MX_TIM17_Init>
	MX_USB_DEVICE_Init();
 8000252:	f00a fe31 	bl	800aeb8 <MX_USB_DEVICE_Init>
	MX_TIM16_Init();
 8000256:	f000 f9fd 	bl	8000654 <MX_TIM16_Init>
	MX_TIM2_Init();
 800025a:	f000 f979 	bl	8000550 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_2,500);
 800025e:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <main+0x84>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000266:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_4,250);
 8000268:	4b13      	ldr	r3, [pc, #76]	; (80002b8 <main+0x84>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	22fa      	movs	r2, #250	; 0xfa
 800026e:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_Base_Start_IT(&htim17);
 8000270:	4812      	ldr	r0, [pc, #72]	; (80002bc <main+0x88>)
 8000272:	f005 fd65 	bl	8005d40 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim16);
 8000276:	4812      	ldr	r0, [pc, #72]	; (80002c0 <main+0x8c>)
 8000278:	f005 fd62 	bl	8005d40 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 800027c:	2104      	movs	r1, #4
 800027e:	480e      	ldr	r0, [pc, #56]	; (80002b8 <main+0x84>)
 8000280:	f005 fe2a 	bl	8005ed8 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4);
 8000284:	210c      	movs	r1, #12
 8000286:	480c      	ldr	r0, [pc, #48]	; (80002b8 <main+0x84>)
 8000288:	f005 fe26 	bl	8005ed8 <HAL_TIM_PWM_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint8_t adc_hod=0;
 800028c:	2300      	movs	r3, #0
 800028e:	71fb      	strb	r3, [r7, #7]
	while (1)
	{
		//ADC
		HAL_ADC_Start(&hadc1);
 8000290:	480c      	ldr	r0, [pc, #48]	; (80002c4 <main+0x90>)
 8000292:	f000 fecb 	bl	800102c <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK)
 8000296:	2105      	movs	r1, #5
 8000298:	480a      	ldr	r0, [pc, #40]	; (80002c4 <main+0x90>)
 800029a:	f001 f813 	bl	80012c4 <HAL_ADC_PollForConversion>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d104      	bne.n	80002ae <main+0x7a>
		{
			adc_hod = HAL_ADC_GetValue(&hadc1);
 80002a4:	4807      	ldr	r0, [pc, #28]	; (80002c4 <main+0x90>)
 80002a6:	f001 f90f 	bl	80014c8 <HAL_ADC_GetValue>
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
		}
		HAL_ADC_Stop(&hadc1);
 80002ae:	4805      	ldr	r0, [pc, #20]	; (80002c4 <main+0x90>)
 80002b0:	f000 ffd2 	bl	8001258 <HAL_ADC_Stop>
		HAL_ADC_Start(&hadc1);
 80002b4:	e7ec      	b.n	8000290 <main+0x5c>
 80002b6:	bf00      	nop
 80002b8:	20000238 	.word	0x20000238
 80002bc:	200002d0 	.word	0x200002d0
 80002c0:	20000284 	.word	0x20000284
 80002c4:	20000198 	.word	0x20000198

080002c8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b09e      	sub	sp, #120	; 0x78
 80002cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80002ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002d2:	2228      	movs	r2, #40	; 0x28
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f00b fa92 	bl	800b800 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80002dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	609a      	str	r2, [r3, #8]
 80002e8:	60da      	str	r2, [r3, #12]
 80002ea:	611a      	str	r2, [r3, #16]
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
 80002ec:	463b      	mov	r3, r7
 80002ee:	223c      	movs	r2, #60	; 0x3c
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f00b fa84 	bl	800b800 <memset>
	{ 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f8:	2301      	movs	r3, #1
 80002fa:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000300:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000306:	2301      	movs	r3, #1
 8000308:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030a:	2302      	movs	r3, #2
 800030c:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800030e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000312:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000314:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000318:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800031e:	4618      	mov	r0, r3
 8000320:	f004 f8e2 	bl	80044e8 <HAL_RCC_OscConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x66>
	{
		Error_Handler();
 800032a:	f000 fa55 	bl	80007d8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800032e:	230f      	movs	r3, #15
 8000330:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000332:	2302      	movs	r3, #2
 8000334:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800033a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800033e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000344:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000348:	2101      	movs	r1, #1
 800034a:	4618      	mov	r0, r3
 800034c:	f005 f90a 	bl	8005564 <HAL_RCC_ClockConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x92>
	{
		Error_Handler();
 8000356:	f000 fa3f 	bl	80007d8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB | RCC_PERIPHCLK_ADC12
 800035a:	4b0c      	ldr	r3, [pc, #48]	; (800038c <SystemClock_Config+0xc4>)
 800035c:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_ADC34;
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800035e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000362:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000364:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000368:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800036a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800036e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000370:	463b      	mov	r3, r7
 8000372:	4618      	mov	r0, r3
 8000374:	f005 fadc 	bl	8005930 <HAL_RCCEx_PeriphCLKConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0xba>
	{
		Error_Handler();
 800037e:	f000 fa2b 	bl	80007d8 <Error_Handler>
	}
}
 8000382:	bf00      	nop
 8000384:	3778      	adds	r7, #120	; 0x78
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	00020180 	.word	0x00020180

08000390 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b08a      	sub	sp, #40	; 0x28
 8000394:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode =
 8000396:	f107 031c 	add.w	r3, r7, #28
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
	{ 0 };
	ADC_ChannelConfTypeDef sConfig =
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	605a      	str	r2, [r3, #4]
 80003aa:	609a      	str	r2, [r3, #8]
 80003ac:	60da      	str	r2, [r3, #12]
 80003ae:	611a      	str	r2, [r3, #16]
 80003b0:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80003b2:	4b2e      	ldr	r3, [pc, #184]	; (800046c <MX_ADC1_Init+0xdc>)
 80003b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003b8:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003ba:	4b2c      	ldr	r3, [pc, #176]	; (800046c <MX_ADC1_Init+0xdc>)
 80003bc:	2200      	movs	r2, #0
 80003be:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80003c0:	4b2a      	ldr	r3, [pc, #168]	; (800046c <MX_ADC1_Init+0xdc>)
 80003c2:	2210      	movs	r2, #16
 80003c4:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003c6:	4b29      	ldr	r3, [pc, #164]	; (800046c <MX_ADC1_Init+0xdc>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80003cc:	4b27      	ldr	r3, [pc, #156]	; (800046c <MX_ADC1_Init+0xdc>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	765a      	strb	r2, [r3, #25]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003d2:	4b26      	ldr	r3, [pc, #152]	; (800046c <MX_ADC1_Init+0xdc>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003da:	4b24      	ldr	r3, [pc, #144]	; (800046c <MX_ADC1_Init+0xdc>)
 80003dc:	2200      	movs	r2, #0
 80003de:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003e0:	4b22      	ldr	r3, [pc, #136]	; (800046c <MX_ADC1_Init+0xdc>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003e6:	4b21      	ldr	r3, [pc, #132]	; (800046c <MX_ADC1_Init+0xdc>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80003ec:	4b1f      	ldr	r3, [pc, #124]	; (800046c <MX_ADC1_Init+0xdc>)
 80003ee:	2201      	movs	r2, #1
 80003f0:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80003f2:	4b1e      	ldr	r3, [pc, #120]	; (800046c <MX_ADC1_Init+0xdc>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003fa:	4b1c      	ldr	r3, [pc, #112]	; (800046c <MX_ADC1_Init+0xdc>)
 80003fc:	2204      	movs	r2, #4
 80003fe:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000400:	4b1a      	ldr	r3, [pc, #104]	; (800046c <MX_ADC1_Init+0xdc>)
 8000402:	2200      	movs	r2, #0
 8000404:	761a      	strb	r2, [r3, #24]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000406:	4b19      	ldr	r3, [pc, #100]	; (800046c <MX_ADC1_Init+0xdc>)
 8000408:	2200      	movs	r2, #0
 800040a:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800040c:	4817      	ldr	r0, [pc, #92]	; (800046c <MX_ADC1_Init+0xdc>)
 800040e:	f000 fc2d 	bl	8000c6c <HAL_ADC_Init>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_ADC1_Init+0x8c>
	{
		Error_Handler();
 8000418:	f000 f9de 	bl	80007d8 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 800041c:	2300      	movs	r3, #0
 800041e:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000420:	f107 031c 	add.w	r3, r7, #28
 8000424:	4619      	mov	r1, r3
 8000426:	4811      	ldr	r0, [pc, #68]	; (800046c <MX_ADC1_Init+0xdc>)
 8000428:	f001 fe54 	bl	80020d4 <HAL_ADCEx_MultiModeConfigChannel>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_ADC1_Init+0xa6>
	{
		Error_Handler();
 8000432:	f000 f9d1 	bl	80007d8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8000436:	2302      	movs	r3, #2
 8000438:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800043a:	2301      	movs	r3, #1
 800043c:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800043e:	2300      	movs	r3, #0
 8000440:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000442:	2300      	movs	r3, #0
 8000444:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000446:	2300      	movs	r3, #0
 8000448:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	4619      	mov	r1, r3
 8000452:	4806      	ldr	r0, [pc, #24]	; (800046c <MX_ADC1_Init+0xdc>)
 8000454:	f001 fb54 	bl	8001b00 <HAL_ADC_ConfigChannel>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_ADC1_Init+0xd2>
	{
		Error_Handler();
 800045e:	f000 f9bb 	bl	80007d8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000462:	bf00      	nop
 8000464:	3728      	adds	r7, #40	; 0x28
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	20000198 	.word	0x20000198

08000470 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b08a      	sub	sp, #40	; 0x28
 8000474:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_MultiModeTypeDef multimode =
 8000476:	f107 031c 	add.w	r3, r7, #28
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
	{ 0 };
	ADC_ChannelConfTypeDef sConfig =
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	605a      	str	r2, [r3, #4]
 800048a:	609a      	str	r2, [r3, #8]
 800048c:	60da      	str	r2, [r3, #12]
 800048e:	611a      	str	r2, [r3, #16]
 8000490:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC3_Init 1 */

	/** Common config
	 */
	hadc3.Instance = ADC3;
 8000492:	4b2d      	ldr	r3, [pc, #180]	; (8000548 <MX_ADC3_Init+0xd8>)
 8000494:	4a2d      	ldr	r2, [pc, #180]	; (800054c <MX_ADC3_Init+0xdc>)
 8000496:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000498:	4b2b      	ldr	r3, [pc, #172]	; (8000548 <MX_ADC3_Init+0xd8>)
 800049a:	2200      	movs	r2, #0
 800049c:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800049e:	4b2a      	ldr	r3, [pc, #168]	; (8000548 <MX_ADC3_Init+0xd8>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004a4:	4b28      	ldr	r3, [pc, #160]	; (8000548 <MX_ADC3_Init+0xd8>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 80004aa:	4b27      	ldr	r3, [pc, #156]	; (8000548 <MX_ADC3_Init+0xd8>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	765a      	strb	r2, [r3, #25]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 80004b0:	4b25      	ldr	r3, [pc, #148]	; (8000548 <MX_ADC3_Init+0xd8>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004b8:	4b23      	ldr	r3, [pc, #140]	; (8000548 <MX_ADC3_Init+0xd8>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004be:	4b22      	ldr	r3, [pc, #136]	; (8000548 <MX_ADC3_Init+0xd8>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004c4:	4b20      	ldr	r3, [pc, #128]	; (8000548 <MX_ADC3_Init+0xd8>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 80004ca:	4b1f      	ldr	r3, [pc, #124]	; (8000548 <MX_ADC3_Init+0xd8>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 80004d0:	4b1d      	ldr	r3, [pc, #116]	; (8000548 <MX_ADC3_Init+0xd8>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004d8:	4b1b      	ldr	r3, [pc, #108]	; (8000548 <MX_ADC3_Init+0xd8>)
 80004da:	2204      	movs	r2, #4
 80004dc:	615a      	str	r2, [r3, #20]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 80004de:	4b1a      	ldr	r3, [pc, #104]	; (8000548 <MX_ADC3_Init+0xd8>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	761a      	strb	r2, [r3, #24]
	hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004e4:	4b18      	ldr	r3, [pc, #96]	; (8000548 <MX_ADC3_Init+0xd8>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80004ea:	4817      	ldr	r0, [pc, #92]	; (8000548 <MX_ADC3_Init+0xd8>)
 80004ec:	f000 fbbe 	bl	8000c6c <HAL_ADC_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_ADC3_Init+0x8a>
	{
		Error_Handler();
 80004f6:	f000 f96f 	bl	80007d8 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80004fa:	2300      	movs	r3, #0
 80004fc:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80004fe:	f107 031c 	add.w	r3, r7, #28
 8000502:	4619      	mov	r1, r3
 8000504:	4810      	ldr	r0, [pc, #64]	; (8000548 <MX_ADC3_Init+0xd8>)
 8000506:	f001 fde5 	bl	80020d4 <HAL_ADCEx_MultiModeConfigChannel>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_ADC3_Init+0xa4>
	{
		Error_Handler();
 8000510:	f000 f962 	bl	80007d8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000514:	2301      	movs	r3, #1
 8000516:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000518:	2301      	movs	r3, #1
 800051a:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800051c:	2300      	movs	r3, #0
 800051e:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000520:	2300      	movs	r3, #0
 8000522:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000524:	2300      	movs	r3, #0
 8000526:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000528:	2300      	movs	r3, #0
 800052a:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	4619      	mov	r1, r3
 8000530:	4805      	ldr	r0, [pc, #20]	; (8000548 <MX_ADC3_Init+0xd8>)
 8000532:	f001 fae5 	bl	8001b00 <HAL_ADC_ConfigChannel>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_ADC3_Init+0xd0>
	{
		Error_Handler();
 800053c:	f000 f94c 	bl	80007d8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8000540:	bf00      	nop
 8000542:	3728      	adds	r7, #40	; 0x28
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	200001e8 	.word	0x200001e8
 800054c:	50000400 	.word	0x50000400

08000550 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08e      	sub	sp, #56	; 0x38
 8000554:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig =
 8000556:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
	{ 0 };
	TIM_MasterConfigTypeDef sMasterConfig =
 8000564:	f107 031c 	add.w	r3, r7, #28
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
	{ 0 };
	TIM_OC_InitTypeDef sConfigOC =
 8000570:	463b      	mov	r3, r7
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]
 800057e:	615a      	str	r2, [r3, #20]
 8000580:	619a      	str	r2, [r3, #24]
	{ 0 };

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000582:	4b33      	ldr	r3, [pc, #204]	; (8000650 <MX_TIM2_Init+0x100>)
 8000584:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000588:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 48000;
 800058a:	4b31      	ldr	r3, [pc, #196]	; (8000650 <MX_TIM2_Init+0x100>)
 800058c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000590:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000592:	4b2f      	ldr	r3, [pc, #188]	; (8000650 <MX_TIM2_Init+0x100>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000;
 8000598:	4b2d      	ldr	r3, [pc, #180]	; (8000650 <MX_TIM2_Init+0x100>)
 800059a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800059e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005a0:	4b2b      	ldr	r3, [pc, #172]	; (8000650 <MX_TIM2_Init+0x100>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005a6:	4b2a      	ldr	r3, [pc, #168]	; (8000650 <MX_TIM2_Init+0x100>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005ac:	4828      	ldr	r0, [pc, #160]	; (8000650 <MX_TIM2_Init+0x100>)
 80005ae:	f005 fb6f 	bl	8005c90 <HAL_TIM_Base_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_TIM2_Init+0x6c>
	{
		Error_Handler();
 80005b8:	f000 f90e 	bl	80007d8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005c6:	4619      	mov	r1, r3
 80005c8:	4821      	ldr	r0, [pc, #132]	; (8000650 <MX_TIM2_Init+0x100>)
 80005ca:	f006 f805 	bl	80065d8 <HAL_TIM_ConfigClockSource>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_TIM2_Init+0x88>
	{
		Error_Handler();
 80005d4:	f000 f900 	bl	80007d8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005d8:	481d      	ldr	r0, [pc, #116]	; (8000650 <MX_TIM2_Init+0x100>)
 80005da:	f005 fc1b 	bl	8005e14 <HAL_TIM_PWM_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_TIM2_Init+0x98>
	{
		Error_Handler();
 80005e4:	f000 f8f8 	bl	80007d8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ec:	2300      	movs	r3, #0
 80005ee:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005f0:	f107 031c 	add.w	r3, r7, #28
 80005f4:	4619      	mov	r1, r3
 80005f6:	4816      	ldr	r0, [pc, #88]	; (8000650 <MX_TIM2_Init+0x100>)
 80005f8:	f006 fcfc 	bl	8006ff4 <HAL_TIMEx_MasterConfigSynchronization>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_TIM2_Init+0xb6>
	{
		Error_Handler();
 8000602:	f000 f8e9 	bl	80007d8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000606:	2360      	movs	r3, #96	; 0x60
 8000608:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000616:	463b      	mov	r3, r7
 8000618:	2204      	movs	r2, #4
 800061a:	4619      	mov	r1, r3
 800061c:	480c      	ldr	r0, [pc, #48]	; (8000650 <MX_TIM2_Init+0x100>)
 800061e:	f005 fec7 	bl	80063b0 <HAL_TIM_PWM_ConfigChannel>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_TIM2_Init+0xdc>
	{
		Error_Handler();
 8000628:	f000 f8d6 	bl	80007d8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800062c:	463b      	mov	r3, r7
 800062e:	220c      	movs	r2, #12
 8000630:	4619      	mov	r1, r3
 8000632:	4807      	ldr	r0, [pc, #28]	; (8000650 <MX_TIM2_Init+0x100>)
 8000634:	f005 febc 	bl	80063b0 <HAL_TIM_PWM_ConfigChannel>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM2_Init+0xf2>
	{
		Error_Handler();
 800063e:	f000 f8cb 	bl	80007d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000642:	4803      	ldr	r0, [pc, #12]	; (8000650 <MX_TIM2_Init+0x100>)
 8000644:	f000 f9c0 	bl	80009c8 <HAL_TIM_MspPostInit>

}
 8000648:	bf00      	nop
 800064a:	3738      	adds	r7, #56	; 0x38
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000238 	.word	0x20000238

08000654 <MX_TIM16_Init>:
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8000658:	4b10      	ldr	r3, [pc, #64]	; (800069c <MX_TIM16_Init+0x48>)
 800065a:	4a11      	ldr	r2, [pc, #68]	; (80006a0 <MX_TIM16_Init+0x4c>)
 800065c:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 48000;
 800065e:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_TIM16_Init+0x48>)
 8000660:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000664:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000666:	4b0d      	ldr	r3, [pc, #52]	; (800069c <MX_TIM16_Init+0x48>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 1000;
 800066c:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_TIM16_Init+0x48>)
 800066e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000672:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_TIM16_Init+0x48>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_TIM16_Init+0x48>)
 800067c:	2200      	movs	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_TIM16_Init+0x48>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_TIM16_Init+0x48>)
 8000688:	f005 fb02 	bl	8005c90 <HAL_TIM_Base_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM16_Init+0x42>
	{
		Error_Handler();
 8000692:	f000 f8a1 	bl	80007d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000284 	.word	0x20000284
 80006a0:	40014400 	.word	0x40014400

080006a4 <MX_TIM17_Init>:
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	/* USER CODE END TIM17_Init 0 */

	/* USER CODE BEGIN TIM17_Init 1 */

	/* USER CODE END TIM17_Init 1 */
	htim17.Instance = TIM17;
 80006a8:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_TIM17_Init+0x48>)
 80006aa:	4a11      	ldr	r2, [pc, #68]	; (80006f0 <MX_TIM17_Init+0x4c>)
 80006ac:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = 48000;
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_TIM17_Init+0x48>)
 80006b0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80006b4:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <MX_TIM17_Init+0x48>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 1000;
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_TIM17_Init+0x48>)
 80006be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006c2:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_TIM17_Init+0x48>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <MX_TIM17_Init+0x48>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	615a      	str	r2, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_TIM17_Init+0x48>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_TIM17_Init+0x48>)
 80006d8:	f005 fada 	bl	8005c90 <HAL_TIM_Base_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_TIM17_Init+0x42>
	{
		Error_Handler();
 80006e2:	f000 f879 	bl	80007d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM17_Init 2 */

	/* USER CODE END TIM17_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200002d0 	.word	0x200002d0
 80006f0:	40014800 	.word	0x40014800

080006f4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	; 0x28
 80006f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]
	{ 0 };
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800070a:	4b31      	ldr	r3, [pc, #196]	; (80007d0 <MX_GPIO_Init+0xdc>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	4a30      	ldr	r2, [pc, #192]	; (80007d0 <MX_GPIO_Init+0xdc>)
 8000710:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000714:	6153      	str	r3, [r2, #20]
 8000716:	4b2e      	ldr	r3, [pc, #184]	; (80007d0 <MX_GPIO_Init+0xdc>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b2b      	ldr	r3, [pc, #172]	; (80007d0 <MX_GPIO_Init+0xdc>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	4a2a      	ldr	r2, [pc, #168]	; (80007d0 <MX_GPIO_Init+0xdc>)
 8000728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800072c:	6153      	str	r3, [r2, #20]
 800072e:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <MX_GPIO_Init+0xdc>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <MX_GPIO_Init+0xdc>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	4a24      	ldr	r2, [pc, #144]	; (80007d0 <MX_GPIO_Init+0xdc>)
 8000740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000744:	6153      	str	r3, [r2, #20]
 8000746:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <MX_GPIO_Init+0xdc>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <MX_GPIO_Init+0xdc>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	4a1e      	ldr	r2, [pc, #120]	; (80007d0 <MX_GPIO_Init+0xdc>)
 8000758:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800075c:	6153      	str	r3, [r2, #20]
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <MX_GPIO_Init+0xdc>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800076a:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <MX_GPIO_Init+0xdc>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	4a18      	ldr	r2, [pc, #96]	; (80007d0 <MX_GPIO_Init+0xdc>)
 8000770:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000774:	6153      	str	r3, [r2, #20]
 8000776:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <MX_GPIO_Init+0xdc>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000788:	4812      	ldr	r0, [pc, #72]	; (80007d4 <MX_GPIO_Init+0xe0>)
 800078a:	f002 f9a1 	bl	8002ad0 <HAL_GPIO_WritePin>
			LD4_Pin | LD3_Pin | LD5_Pin | LD7_Pin | LD9_Pin | LD10_Pin | LD8_Pin
					| LD6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800078e:	2301      	movs	r3, #1
 8000790:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000792:	2300      	movs	r3, #0
 8000794:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a4:	f002 f81a 	bl	80027dc <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD7_Pin
	 LD9_Pin LD10_Pin LD8_Pin LD6_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD7_Pin | LD9_Pin
 80007a8:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80007ac:	617b      	str	r3, [r7, #20]
			| LD10_Pin | LD8_Pin | LD6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_GPIO_Init+0xe0>)
 80007c2:	f002 f80b 	bl	80027dc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80007c6:	bf00      	nop
 80007c8:	3728      	adds	r7, #40	; 0x28
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000
 80007d4:	48001000 	.word	0x48001000

080007d8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007dc:	b672      	cpsid	i
}
 80007de:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80007e0:	e7fe      	b.n	80007e0 <Error_Handler+0x8>
	...

080007e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <HAL_MspInit+0x44>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <HAL_MspInit+0x44>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6193      	str	r3, [r2, #24]
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <HAL_MspInit+0x44>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <HAL_MspInit+0x44>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	4a08      	ldr	r2, [pc, #32]	; (8000828 <HAL_MspInit+0x44>)
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080c:	61d3      	str	r3, [r2, #28]
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_MspInit+0x44>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800081a:	2007      	movs	r0, #7
 800081c:	f001 ff9c 	bl	8002758 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40021000 	.word	0x40021000

0800082c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800084c:	d125      	bne.n	800089a <HAL_ADC_MspInit+0x6e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800084e:	4b2d      	ldr	r3, [pc, #180]	; (8000904 <HAL_ADC_MspInit+0xd8>)
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	4a2c      	ldr	r2, [pc, #176]	; (8000904 <HAL_ADC_MspInit+0xd8>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000858:	6153      	str	r3, [r2, #20]
 800085a:	4b2a      	ldr	r3, [pc, #168]	; (8000904 <HAL_ADC_MspInit+0xd8>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	61bb      	str	r3, [r7, #24]
 8000864:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b27      	ldr	r3, [pc, #156]	; (8000904 <HAL_ADC_MspInit+0xd8>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	4a26      	ldr	r2, [pc, #152]	; (8000904 <HAL_ADC_MspInit+0xd8>)
 800086c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000870:	6153      	str	r3, [r2, #20]
 8000872:	4b24      	ldr	r3, [pc, #144]	; (8000904 <HAL_ADC_MspInit+0xd8>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800087e:	2302      	movs	r3, #2
 8000880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000882:	2303      	movs	r3, #3
 8000884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000894:	f001 ffa2 	bl	80027dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000898:	e030      	b.n	80008fc <HAL_ADC_MspInit+0xd0>
  else if(hadc->Instance==ADC3)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a1a      	ldr	r2, [pc, #104]	; (8000908 <HAL_ADC_MspInit+0xdc>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d12b      	bne.n	80008fc <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC34_CLK_ENABLE();
 80008a4:	4b17      	ldr	r3, [pc, #92]	; (8000904 <HAL_ADC_MspInit+0xd8>)
 80008a6:	695b      	ldr	r3, [r3, #20]
 80008a8:	4a16      	ldr	r2, [pc, #88]	; (8000904 <HAL_ADC_MspInit+0xd8>)
 80008aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80008ae:	6153      	str	r3, [r2, #20]
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <HAL_ADC_MspInit+0xd8>)
 80008b2:	695b      	ldr	r3, [r3, #20]
 80008b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <HAL_ADC_MspInit+0xd8>)
 80008be:	695b      	ldr	r3, [r3, #20]
 80008c0:	4a10      	ldr	r2, [pc, #64]	; (8000904 <HAL_ADC_MspInit+0xd8>)
 80008c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008c6:	6153      	str	r3, [r2, #20]
 80008c8:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <HAL_ADC_MspInit+0xd8>)
 80008ca:	695b      	ldr	r3, [r3, #20]
 80008cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008d4:	2302      	movs	r3, #2
 80008d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d8:	2303      	movs	r3, #3
 80008da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4809      	ldr	r0, [pc, #36]	; (800090c <HAL_ADC_MspInit+0xe0>)
 80008e8:	f001 ff78 	bl	80027dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2100      	movs	r1, #0
 80008f0:	202f      	movs	r0, #47	; 0x2f
 80008f2:	f001 ff3c 	bl	800276e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80008f6:	202f      	movs	r0, #47	; 0x2f
 80008f8:	f001 ff55 	bl	80027a6 <HAL_NVIC_EnableIRQ>
}
 80008fc:	bf00      	nop
 80008fe:	3730      	adds	r7, #48	; 0x30
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40021000 	.word	0x40021000
 8000908:	50000400 	.word	0x50000400
 800090c:	48000400 	.word	0x48000400

08000910 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000920:	d114      	bne.n	800094c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000922:	4b26      	ldr	r3, [pc, #152]	; (80009bc <HAL_TIM_Base_MspInit+0xac>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	4a25      	ldr	r2, [pc, #148]	; (80009bc <HAL_TIM_Base_MspInit+0xac>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	61d3      	str	r3, [r2, #28]
 800092e:	4b23      	ldr	r3, [pc, #140]	; (80009bc <HAL_TIM_Base_MspInit+0xac>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	201c      	movs	r0, #28
 8000940:	f001 ff15 	bl	800276e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000944:	201c      	movs	r0, #28
 8000946:	f001 ff2e 	bl	80027a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800094a:	e032      	b.n	80009b2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a1b      	ldr	r2, [pc, #108]	; (80009c0 <HAL_TIM_Base_MspInit+0xb0>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d114      	bne.n	8000980 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <HAL_TIM_Base_MspInit+0xac>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	4a18      	ldr	r2, [pc, #96]	; (80009bc <HAL_TIM_Base_MspInit+0xac>)
 800095c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000960:	6193      	str	r3, [r2, #24]
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <HAL_TIM_Base_MspInit+0xac>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	2019      	movs	r0, #25
 8000974:	f001 fefb 	bl	800276e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000978:	2019      	movs	r0, #25
 800097a:	f001 ff14 	bl	80027a6 <HAL_NVIC_EnableIRQ>
}
 800097e:	e018      	b.n	80009b2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM17)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <HAL_TIM_Base_MspInit+0xb4>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d113      	bne.n	80009b2 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <HAL_TIM_Base_MspInit+0xac>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	4a0b      	ldr	r2, [pc, #44]	; (80009bc <HAL_TIM_Base_MspInit+0xac>)
 8000990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000994:	6193      	str	r3, [r2, #24]
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <HAL_TIM_Base_MspInit+0xac>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2100      	movs	r1, #0
 80009a6:	201a      	movs	r0, #26
 80009a8:	f001 fee1 	bl	800276e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80009ac:	201a      	movs	r0, #26
 80009ae:	f001 fefa 	bl	80027a6 <HAL_NVIC_EnableIRQ>
}
 80009b2:	bf00      	nop
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40014400 	.word	0x40014400
 80009c4:	40014800 	.word	0x40014800

080009c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009e8:	d11b      	bne.n	8000a22 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <HAL_TIM_MspPostInit+0x64>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	4a0f      	ldr	r2, [pc, #60]	; (8000a2c <HAL_TIM_MspPostInit+0x64>)
 80009f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009f4:	6153      	str	r3, [r2, #20]
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <HAL_TIM_MspPostInit+0x64>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PD4     ------> TIM2_CH2
    PD6     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000a02:	2350      	movs	r3, #80	; 0x50
 8000a04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000a12:	2302      	movs	r3, #2
 8000a14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a16:	f107 030c 	add.w	r3, r7, #12
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <HAL_TIM_MspPostInit+0x68>)
 8000a1e:	f001 fedd 	bl	80027dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a22:	bf00      	nop
 8000a24:	3720      	adds	r7, #32
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	48000c00 	.word	0x48000c00

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <NMI_Handler+0x4>

08000a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <HardFault_Handler+0x4>

08000a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <MemManage_Handler+0x4>

08000a46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <BusFault_Handler+0x4>

08000a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <UsageFault_Handler+0x4>

08000a52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a80:	f000 f8b6 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000a8e:	f002 f949 	bl	8002d24 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000fe8 	.word	0x20000fe8

08000a9c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000aa2:	f005 fb65 	bl	8006170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000284 	.word	0x20000284

08000ab0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000ab4:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000ab6:	f005 fb5b 	bl	8006170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200002d0 	.word	0x200002d0

08000ac4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ac8:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <TIM2_IRQHandler+0x10>)
 8000aca:	f005 fb51 	bl	8006170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000238 	.word	0x20000238

08000ad8 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <ADC3_IRQHandler+0x10>)
 8000ade:	f000 fd01 	bl	80014e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200001e8 	.word	0x200001e8

08000aec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <SystemInit+0x20>)
 8000af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <SystemInit+0x20>)
 8000af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b48 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b14:	f7ff ffea 	bl	8000aec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b18:	480c      	ldr	r0, [pc, #48]	; (8000b4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b1a:	490d      	ldr	r1, [pc, #52]	; (8000b50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <LoopForever+0xe>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b20:	e002      	b.n	8000b28 <LoopCopyDataInit>

08000b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b26:	3304      	adds	r3, #4

08000b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b2c:	d3f9      	bcc.n	8000b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b30:	4c0a      	ldr	r4, [pc, #40]	; (8000b5c <LoopForever+0x16>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b34:	e001      	b.n	8000b3a <LoopFillZerobss>

08000b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b38:	3204      	adds	r2, #4

08000b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b3c:	d3fb      	bcc.n	8000b36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b3e:	f00a fe67 	bl	800b810 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b42:	f7ff fb77 	bl	8000234 <main>

08000b46 <LoopForever>:

LoopForever:
    b LoopForever
 8000b46:	e7fe      	b.n	8000b46 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b48:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b50:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000b54:	0800b8f0 	.word	0x0800b8f0
  ldr r2, =_sbss
 8000b58:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000b5c:	200014f4 	.word	0x200014f4

08000b60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b60:	e7fe      	b.n	8000b60 <ADC1_2_IRQHandler>
	...

08000b64 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_Init+0x28>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <HAL_Init+0x28>)
 8000b6e:	f043 0310 	orr.w	r3, r3, #16
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f001 fdef 	bl	8002758 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f000 f808 	bl	8000b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b80:	f7ff fe30 	bl	80007e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40022000 	.word	0x40022000

08000b90 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_InitTick+0x54>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_InitTick+0x58>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f001 fe07 	bl	80027c2 <HAL_SYSTICK_Config>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00e      	b.n	8000bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	d80a      	bhi.n	8000bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f001 fdcf 	bl	800276e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd0:	4a06      	ldr	r2, [pc, #24]	; (8000bec <HAL_InitTick+0x5c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000000 	.word	0x20000000
 8000be8:	20000008 	.word	0x20000008
 8000bec:	20000004 	.word	0x20000004

08000bf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_IncTick+0x20>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x24>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_IncTick+0x24>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000008 	.word	0x20000008
 8000c14:	2000031c 	.word	0x2000031c

08000c18 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <HAL_GetTick+0x14>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	2000031c 	.word	0x2000031c

08000c30 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b09a      	sub	sp, #104	; 0x68
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d101      	bne.n	8000c8c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e1c9      	b.n	8001020 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	691b      	ldr	r3, [r3, #16]
 8000c90:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	f003 0310 	and.w	r3, r3, #16
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d176      	bne.n	8000d8c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d152      	bne.n	8000d4c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff fdb3 	bl	800082c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d13b      	bne.n	8000d4c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f001 fb53 	bl	8002380 <ADC_Disable>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce4:	f003 0310 	and.w	r3, r3, #16
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d12f      	bne.n	8000d4c <HAL_ADC_Init+0xe0>
 8000cec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d12b      	bne.n	8000d4c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000cfc:	f023 0302 	bic.w	r3, r3, #2
 8000d00:	f043 0202 	orr.w	r2, r3, #2
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	689a      	ldr	r2, [r3, #8]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000d16:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	689a      	ldr	r2, [r3, #8]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d26:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d28:	4b86      	ldr	r3, [pc, #536]	; (8000f44 <HAL_ADC_Init+0x2d8>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a86      	ldr	r2, [pc, #536]	; (8000f48 <HAL_ADC_Init+0x2dc>)
 8000d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d32:	0c9a      	lsrs	r2, r3, #18
 8000d34:	4613      	mov	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d3e:	e002      	b.n	8000d46 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d1f9      	bne.n	8000d40 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d007      	beq.n	8000d6a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d68:	d110      	bne.n	8000d8c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	f023 0312 	bic.w	r3, r3, #18
 8000d72:	f043 0210 	orr.w	r2, r3, #16
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	f043 0201 	orr.w	r2, r3, #1
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	f003 0310 	and.w	r3, r3, #16
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	f040 8136 	bne.w	8001006 <HAL_ADC_Init+0x39a>
 8000d9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f040 8131 	bne.w	8001006 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f040 8129 	bne.w	8001006 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000dbc:	f043 0202 	orr.w	r2, r3, #2
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dcc:	d004      	beq.n	8000dd8 <HAL_ADC_Init+0x16c>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a5e      	ldr	r2, [pc, #376]	; (8000f4c <HAL_ADC_Init+0x2e0>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d101      	bne.n	8000ddc <HAL_ADC_Init+0x170>
 8000dd8:	4b5d      	ldr	r3, [pc, #372]	; (8000f50 <HAL_ADC_Init+0x2e4>)
 8000dda:	e000      	b.n	8000dde <HAL_ADC_Init+0x172>
 8000ddc:	4b5d      	ldr	r3, [pc, #372]	; (8000f54 <HAL_ADC_Init+0x2e8>)
 8000dde:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000de8:	d102      	bne.n	8000df0 <HAL_ADC_Init+0x184>
 8000dea:	4b58      	ldr	r3, [pc, #352]	; (8000f4c <HAL_ADC_Init+0x2e0>)
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	e01a      	b.n	8000e26 <HAL_ADC_Init+0x1ba>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a55      	ldr	r2, [pc, #340]	; (8000f4c <HAL_ADC_Init+0x2e0>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d103      	bne.n	8000e02 <HAL_ADC_Init+0x196>
 8000dfa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	e011      	b.n	8000e26 <HAL_ADC_Init+0x1ba>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a54      	ldr	r2, [pc, #336]	; (8000f58 <HAL_ADC_Init+0x2ec>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d102      	bne.n	8000e12 <HAL_ADC_Init+0x1a6>
 8000e0c:	4b53      	ldr	r3, [pc, #332]	; (8000f5c <HAL_ADC_Init+0x2f0>)
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	e009      	b.n	8000e26 <HAL_ADC_Init+0x1ba>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a51      	ldr	r2, [pc, #324]	; (8000f5c <HAL_ADC_Init+0x2f0>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d102      	bne.n	8000e22 <HAL_ADC_Init+0x1b6>
 8000e1c:	4b4e      	ldr	r3, [pc, #312]	; (8000f58 <HAL_ADC_Init+0x2ec>)
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	e001      	b.n	8000e26 <HAL_ADC_Init+0x1ba>
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	f003 0303 	and.w	r3, r3, #3
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d108      	bne.n	8000e46 <HAL_ADC_Init+0x1da>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d101      	bne.n	8000e46 <HAL_ADC_Init+0x1da>
 8000e42:	2301      	movs	r3, #1
 8000e44:	e000      	b.n	8000e48 <HAL_ADC_Init+0x1dc>
 8000e46:	2300      	movs	r3, #0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d11c      	bne.n	8000e86 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d010      	beq.n	8000e74 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f003 0303 	and.w	r3, r3, #3
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d107      	bne.n	8000e6e <HAL_ADC_Init+0x202>
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d101      	bne.n	8000e6e <HAL_ADC_Init+0x202>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e000      	b.n	8000e70 <HAL_ADC_Init+0x204>
 8000e6e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d108      	bne.n	8000e86 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	431a      	orrs	r2, r3
 8000e82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e84:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	7e5b      	ldrb	r3, [r3, #25]
 8000e8a:	035b      	lsls	r3, r3, #13
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e90:	2a01      	cmp	r2, #1
 8000e92:	d002      	beq.n	8000e9a <HAL_ADC_Init+0x22e>
 8000e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e98:	e000      	b.n	8000e9c <HAL_ADC_Init+0x230>
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000eac:	4313      	orrs	r3, r2
 8000eae:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d11b      	bne.n	8000ef2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	7e5b      	ldrb	r3, [r3, #25]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d109      	bne.n	8000ed6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	045a      	lsls	r2, r3, #17
 8000eca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed2:	663b      	str	r3, [r7, #96]	; 0x60
 8000ed4:	e00d      	b.n	8000ef2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000ede:	f043 0220 	orr.w	r2, r3, #32
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	f043 0201 	orr.w	r2, r3, #1
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d03a      	beq.n	8000f70 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a16      	ldr	r2, [pc, #88]	; (8000f58 <HAL_ADC_Init+0x2ec>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d004      	beq.n	8000f0e <HAL_ADC_Init+0x2a2>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a14      	ldr	r2, [pc, #80]	; (8000f5c <HAL_ADC_Init+0x2f0>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d128      	bne.n	8000f60 <HAL_ADC_Init+0x2f4>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f12:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000f16:	d012      	beq.n	8000f3e <HAL_ADC_Init+0x2d2>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f20:	d00a      	beq.n	8000f38 <HAL_ADC_Init+0x2cc>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f26:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000f2a:	d002      	beq.n	8000f32 <HAL_ADC_Init+0x2c6>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f30:	e018      	b.n	8000f64 <HAL_ADC_Init+0x2f8>
 8000f32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f36:	e015      	b.n	8000f64 <HAL_ADC_Init+0x2f8>
 8000f38:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000f3c:	e012      	b.n	8000f64 <HAL_ADC_Init+0x2f8>
 8000f3e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000f42:	e00f      	b.n	8000f64 <HAL_ADC_Init+0x2f8>
 8000f44:	20000000 	.word	0x20000000
 8000f48:	431bde83 	.word	0x431bde83
 8000f4c:	50000100 	.word	0x50000100
 8000f50:	50000300 	.word	0x50000300
 8000f54:	50000700 	.word	0x50000700
 8000f58:	50000400 	.word	0x50000400
 8000f5c:	50000500 	.word	0x50000500
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f003 030c 	and.w	r3, r3, #12
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d114      	bne.n	8000fa8 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	6812      	ldr	r2, [r2, #0]
 8000f88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f8c:	f023 0302 	bic.w	r3, r3, #2
 8000f90:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	7e1b      	ldrb	r3, [r3, #24]
 8000f96:	039a      	lsls	r2, r3, #14
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	68da      	ldr	r2, [r3, #12]
 8000fae:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <HAL_ADC_Init+0x3bc>)
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	6812      	ldr	r2, [r2, #0]
 8000fb6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000fb8:	430b      	orrs	r3, r1
 8000fba:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	691b      	ldr	r3, [r3, #16]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d10c      	bne.n	8000fde <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f023 010f 	bic.w	r1, r3, #15
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	1e5a      	subs	r2, r3, #1
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	631a      	str	r2, [r3, #48]	; 0x30
 8000fdc:	e007      	b.n	8000fee <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f022 020f 	bic.w	r2, r2, #15
 8000fec:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	f023 0303 	bic.w	r3, r3, #3
 8000ffc:	f043 0201 	orr.w	r2, r3, #1
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	641a      	str	r2, [r3, #64]	; 0x40
 8001004:	e00a      	b.n	800101c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f023 0312 	bic.w	r3, r3, #18
 800100e:	f043 0210 	orr.w	r2, r3, #16
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001016:	2301      	movs	r3, #1
 8001018:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800101c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001020:	4618      	mov	r0, r3
 8001022:	3768      	adds	r7, #104	; 0x68
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	fff0c007 	.word	0xfff0c007

0800102c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001034:	2300      	movs	r3, #0
 8001036:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	2b00      	cmp	r3, #0
 8001044:	f040 80f9 	bne.w	800123a <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800104e:	2b01      	cmp	r3, #1
 8001050:	d101      	bne.n	8001056 <HAL_ADC_Start+0x2a>
 8001052:	2302      	movs	r3, #2
 8001054:	e0f4      	b.n	8001240 <HAL_ADC_Start+0x214>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f001 f92a 	bl	80022b8 <ADC_Enable>
 8001064:	4603      	mov	r3, r0
 8001066:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	2b00      	cmp	r3, #0
 800106c:	f040 80e0 	bne.w	8001230 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001078:	f023 0301 	bic.w	r3, r3, #1
 800107c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800108c:	d004      	beq.n	8001098 <HAL_ADC_Start+0x6c>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a6d      	ldr	r2, [pc, #436]	; (8001248 <HAL_ADC_Start+0x21c>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d106      	bne.n	80010a6 <HAL_ADC_Start+0x7a>
 8001098:	4b6c      	ldr	r3, [pc, #432]	; (800124c <HAL_ADC_Start+0x220>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f003 031f 	and.w	r3, r3, #31
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d010      	beq.n	80010c6 <HAL_ADC_Start+0x9a>
 80010a4:	e005      	b.n	80010b2 <HAL_ADC_Start+0x86>
 80010a6:	4b6a      	ldr	r3, [pc, #424]	; (8001250 <HAL_ADC_Start+0x224>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 031f 	and.w	r3, r3, #31
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d009      	beq.n	80010c6 <HAL_ADC_Start+0x9a>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010ba:	d004      	beq.n	80010c6 <HAL_ADC_Start+0x9a>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a64      	ldr	r2, [pc, #400]	; (8001254 <HAL_ADC_Start+0x228>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d115      	bne.n	80010f2 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d036      	beq.n	800114e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80010f0:	e02d      	b.n	800114e <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001106:	d004      	beq.n	8001112 <HAL_ADC_Start+0xe6>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a4e      	ldr	r2, [pc, #312]	; (8001248 <HAL_ADC_Start+0x21c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d10a      	bne.n	8001128 <HAL_ADC_Start+0xfc>
 8001112:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800111c:	2b00      	cmp	r3, #0
 800111e:	bf14      	ite	ne
 8001120:	2301      	movne	r3, #1
 8001122:	2300      	moveq	r3, #0
 8001124:	b2db      	uxtb	r3, r3
 8001126:	e008      	b.n	800113a <HAL_ADC_Start+0x10e>
 8001128:	4b4a      	ldr	r3, [pc, #296]	; (8001254 <HAL_ADC_Start+0x228>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001130:	2b00      	cmp	r3, #0
 8001132:	bf14      	ite	ne
 8001134:	2301      	movne	r3, #1
 8001136:	2300      	moveq	r3, #0
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d007      	beq.n	800114e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001146:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800115a:	d106      	bne.n	800116a <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001160:	f023 0206 	bic.w	r2, r3, #6
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	645a      	str	r2, [r3, #68]	; 0x44
 8001168:	e002      	b.n	8001170 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	221c      	movs	r2, #28
 800117e:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001188:	d004      	beq.n	8001194 <HAL_ADC_Start+0x168>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a2e      	ldr	r2, [pc, #184]	; (8001248 <HAL_ADC_Start+0x21c>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d106      	bne.n	80011a2 <HAL_ADC_Start+0x176>
 8001194:	4b2d      	ldr	r3, [pc, #180]	; (800124c <HAL_ADC_Start+0x220>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 031f 	and.w	r3, r3, #31
 800119c:	2b00      	cmp	r3, #0
 800119e:	d03e      	beq.n	800121e <HAL_ADC_Start+0x1f2>
 80011a0:	e005      	b.n	80011ae <HAL_ADC_Start+0x182>
 80011a2:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <HAL_ADC_Start+0x224>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 031f 	and.w	r3, r3, #31
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d037      	beq.n	800121e <HAL_ADC_Start+0x1f2>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011b6:	d004      	beq.n	80011c2 <HAL_ADC_Start+0x196>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a22      	ldr	r2, [pc, #136]	; (8001248 <HAL_ADC_Start+0x21c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d106      	bne.n	80011d0 <HAL_ADC_Start+0x1a4>
 80011c2:	4b22      	ldr	r3, [pc, #136]	; (800124c <HAL_ADC_Start+0x220>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	2b05      	cmp	r3, #5
 80011cc:	d027      	beq.n	800121e <HAL_ADC_Start+0x1f2>
 80011ce:	e005      	b.n	80011dc <HAL_ADC_Start+0x1b0>
 80011d0:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <HAL_ADC_Start+0x224>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 031f 	and.w	r3, r3, #31
 80011d8:	2b05      	cmp	r3, #5
 80011da:	d020      	beq.n	800121e <HAL_ADC_Start+0x1f2>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011e4:	d004      	beq.n	80011f0 <HAL_ADC_Start+0x1c4>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a17      	ldr	r2, [pc, #92]	; (8001248 <HAL_ADC_Start+0x21c>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d106      	bne.n	80011fe <HAL_ADC_Start+0x1d2>
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <HAL_ADC_Start+0x220>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f003 031f 	and.w	r3, r3, #31
 80011f8:	2b09      	cmp	r3, #9
 80011fa:	d010      	beq.n	800121e <HAL_ADC_Start+0x1f2>
 80011fc:	e005      	b.n	800120a <HAL_ADC_Start+0x1de>
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <HAL_ADC_Start+0x224>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 031f 	and.w	r3, r3, #31
 8001206:	2b09      	cmp	r3, #9
 8001208:	d009      	beq.n	800121e <HAL_ADC_Start+0x1f2>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001212:	d004      	beq.n	800121e <HAL_ADC_Start+0x1f2>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <HAL_ADC_Start+0x228>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d10f      	bne.n	800123e <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f042 0204 	orr.w	r2, r2, #4
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	e006      	b.n	800123e <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001238:	e001      	b.n	800123e <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800123a:	2302      	movs	r3, #2
 800123c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	50000100 	.word	0x50000100
 800124c:	50000300 	.word	0x50000300
 8001250:	50000700 	.word	0x50000700
 8001254:	50000400 	.word	0x50000400

08001258 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800126a:	2b01      	cmp	r3, #1
 800126c:	d101      	bne.n	8001272 <HAL_ADC_Stop+0x1a>
 800126e:	2302      	movs	r3, #2
 8001270:	e023      	b.n	80012ba <HAL_ADC_Stop+0x62>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800127a:	216c      	movs	r1, #108	; 0x6c
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f001 f8e5 	bl	800244c <ADC_ConversionStop>
 8001282:	4603      	mov	r3, r0
 8001284:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d111      	bne.n	80012b0 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f001 f877 	bl	8002380 <ADC_Disable>
 8001292:	4603      	mov	r3, r0
 8001294:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d109      	bne.n	80012b0 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012a4:	f023 0301 	bic.w	r3, r3, #1
 80012a8:	f043 0201 	orr.w	r2, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d102      	bne.n	80012e0 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80012da:	2308      	movs	r3, #8
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	e03a      	b.n	8001356 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012e8:	d004      	beq.n	80012f4 <HAL_ADC_PollForConversion+0x30>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a72      	ldr	r2, [pc, #456]	; (80014b8 <HAL_ADC_PollForConversion+0x1f4>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d101      	bne.n	80012f8 <HAL_ADC_PollForConversion+0x34>
 80012f4:	4b71      	ldr	r3, [pc, #452]	; (80014bc <HAL_ADC_PollForConversion+0x1f8>)
 80012f6:	e000      	b.n	80012fa <HAL_ADC_PollForConversion+0x36>
 80012f8:	4b71      	ldr	r3, [pc, #452]	; (80014c0 <HAL_ADC_PollForConversion+0x1fc>)
 80012fa:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 031f 	and.w	r3, r3, #31
 8001304:	2b00      	cmp	r3, #0
 8001306:	d112      	bne.n	800132e <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b01      	cmp	r3, #1
 8001314:	d11d      	bne.n	8001352 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f043 0220 	orr.w	r2, r3, #32
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e0bf      	b.n	80014ae <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00b      	beq.n	8001352 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f043 0220 	orr.w	r2, r3, #32
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e0ad      	b.n	80014ae <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001352:	230c      	movs	r3, #12
 8001354:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800135e:	d004      	beq.n	800136a <HAL_ADC_PollForConversion+0xa6>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a54      	ldr	r2, [pc, #336]	; (80014b8 <HAL_ADC_PollForConversion+0x1f4>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d106      	bne.n	8001378 <HAL_ADC_PollForConversion+0xb4>
 800136a:	4b54      	ldr	r3, [pc, #336]	; (80014bc <HAL_ADC_PollForConversion+0x1f8>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 031f 	and.w	r3, r3, #31
 8001372:	2b00      	cmp	r3, #0
 8001374:	d010      	beq.n	8001398 <HAL_ADC_PollForConversion+0xd4>
 8001376:	e005      	b.n	8001384 <HAL_ADC_PollForConversion+0xc0>
 8001378:	4b51      	ldr	r3, [pc, #324]	; (80014c0 <HAL_ADC_PollForConversion+0x1fc>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 031f 	and.w	r3, r3, #31
 8001380:	2b00      	cmp	r3, #0
 8001382:	d009      	beq.n	8001398 <HAL_ADC_PollForConversion+0xd4>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800138c:	d004      	beq.n	8001398 <HAL_ADC_PollForConversion+0xd4>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a4c      	ldr	r2, [pc, #304]	; (80014c4 <HAL_ADC_PollForConversion+0x200>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d104      	bne.n	80013a2 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	e00f      	b.n	80013c2 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013aa:	d004      	beq.n	80013b6 <HAL_ADC_PollForConversion+0xf2>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a41      	ldr	r2, [pc, #260]	; (80014b8 <HAL_ADC_PollForConversion+0x1f4>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d102      	bne.n	80013bc <HAL_ADC_PollForConversion+0xf8>
 80013b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80013ba:	e000      	b.n	80013be <HAL_ADC_PollForConversion+0xfa>
 80013bc:	4b41      	ldr	r3, [pc, #260]	; (80014c4 <HAL_ADC_PollForConversion+0x200>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80013c2:	f7ff fc29 	bl	8000c18 <HAL_GetTick>
 80013c6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80013c8:	e021      	b.n	800140e <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d0:	d01d      	beq.n	800140e <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d007      	beq.n	80013e8 <HAL_ADC_PollForConversion+0x124>
 80013d8:	f7ff fc1e 	bl	8000c18 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d212      	bcs.n	800140e <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	4013      	ands	r3, r2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10b      	bne.n	800140e <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f043 0204 	orr.w	r2, r3, #4
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e04f      	b.n	80014ae <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	4013      	ands	r3, r2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0d6      	beq.n	80013ca <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001432:	2b00      	cmp	r3, #0
 8001434:	d131      	bne.n	800149a <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800143c:	2b00      	cmp	r3, #0
 800143e:	d12c      	bne.n	800149a <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	2b08      	cmp	r3, #8
 800144c:	d125      	bne.n	800149a <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	2b00      	cmp	r3, #0
 800145a:	d112      	bne.n	8001482 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d112      	bne.n	800149a <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	f043 0201 	orr.w	r2, r3, #1
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	641a      	str	r2, [r3, #64]	; 0x40
 8001480:	e00b      	b.n	800149a <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f043 0220 	orr.w	r2, r3, #32
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f043 0201 	orr.w	r2, r3, #1
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d103      	bne.n	80014ac <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	50000100 	.word	0x50000100
 80014bc:	50000300 	.word	0x50000300
 80014c0:	50000700 	.word	0x50000700
 80014c4:	50000400 	.word	0x50000400

080014c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	2b00      	cmp	r3, #0
 8001510:	d004      	beq.n	800151c <HAL_ADC_IRQHandler+0x38>
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	d10b      	bne.n	8001534 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 80bc 	beq.w	80016a0 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 80b6 	beq.w	80016a0 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	f003 0310 	and.w	r3, r3, #16
 800153c:	2b00      	cmp	r3, #0
 800153e:	d105      	bne.n	800154c <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001554:	d004      	beq.n	8001560 <HAL_ADC_IRQHandler+0x7c>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a90      	ldr	r2, [pc, #576]	; (800179c <HAL_ADC_IRQHandler+0x2b8>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d106      	bne.n	800156e <HAL_ADC_IRQHandler+0x8a>
 8001560:	4b8f      	ldr	r3, [pc, #572]	; (80017a0 <HAL_ADC_IRQHandler+0x2bc>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 031f 	and.w	r3, r3, #31
 8001568:	2b00      	cmp	r3, #0
 800156a:	d03e      	beq.n	80015ea <HAL_ADC_IRQHandler+0x106>
 800156c:	e005      	b.n	800157a <HAL_ADC_IRQHandler+0x96>
 800156e:	4b8d      	ldr	r3, [pc, #564]	; (80017a4 <HAL_ADC_IRQHandler+0x2c0>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 031f 	and.w	r3, r3, #31
 8001576:	2b00      	cmp	r3, #0
 8001578:	d037      	beq.n	80015ea <HAL_ADC_IRQHandler+0x106>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001582:	d004      	beq.n	800158e <HAL_ADC_IRQHandler+0xaa>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a84      	ldr	r2, [pc, #528]	; (800179c <HAL_ADC_IRQHandler+0x2b8>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d106      	bne.n	800159c <HAL_ADC_IRQHandler+0xb8>
 800158e:	4b84      	ldr	r3, [pc, #528]	; (80017a0 <HAL_ADC_IRQHandler+0x2bc>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 031f 	and.w	r3, r3, #31
 8001596:	2b05      	cmp	r3, #5
 8001598:	d027      	beq.n	80015ea <HAL_ADC_IRQHandler+0x106>
 800159a:	e005      	b.n	80015a8 <HAL_ADC_IRQHandler+0xc4>
 800159c:	4b81      	ldr	r3, [pc, #516]	; (80017a4 <HAL_ADC_IRQHandler+0x2c0>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 031f 	and.w	r3, r3, #31
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	d020      	beq.n	80015ea <HAL_ADC_IRQHandler+0x106>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015b0:	d004      	beq.n	80015bc <HAL_ADC_IRQHandler+0xd8>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a79      	ldr	r2, [pc, #484]	; (800179c <HAL_ADC_IRQHandler+0x2b8>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d106      	bne.n	80015ca <HAL_ADC_IRQHandler+0xe6>
 80015bc:	4b78      	ldr	r3, [pc, #480]	; (80017a0 <HAL_ADC_IRQHandler+0x2bc>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 031f 	and.w	r3, r3, #31
 80015c4:	2b09      	cmp	r3, #9
 80015c6:	d010      	beq.n	80015ea <HAL_ADC_IRQHandler+0x106>
 80015c8:	e005      	b.n	80015d6 <HAL_ADC_IRQHandler+0xf2>
 80015ca:	4b76      	ldr	r3, [pc, #472]	; (80017a4 <HAL_ADC_IRQHandler+0x2c0>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 031f 	and.w	r3, r3, #31
 80015d2:	2b09      	cmp	r3, #9
 80015d4:	d009      	beq.n	80015ea <HAL_ADC_IRQHandler+0x106>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015de:	d004      	beq.n	80015ea <HAL_ADC_IRQHandler+0x106>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a70      	ldr	r2, [pc, #448]	; (80017a8 <HAL_ADC_IRQHandler+0x2c4>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d104      	bne.n	80015f4 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	61bb      	str	r3, [r7, #24]
 80015f2:	e00f      	b.n	8001614 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015fc:	d004      	beq.n	8001608 <HAL_ADC_IRQHandler+0x124>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a66      	ldr	r2, [pc, #408]	; (800179c <HAL_ADC_IRQHandler+0x2b8>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d102      	bne.n	800160e <HAL_ADC_IRQHandler+0x12a>
 8001608:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800160c:	e000      	b.n	8001610 <HAL_ADC_IRQHandler+0x12c>
 800160e:	4b66      	ldr	r3, [pc, #408]	; (80017a8 <HAL_ADC_IRQHandler+0x2c4>)
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800161e:	2b00      	cmp	r3, #0
 8001620:	d137      	bne.n	8001692 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001628:	2b00      	cmp	r3, #0
 800162a:	d132      	bne.n	8001692 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	2b00      	cmp	r3, #0
 8001634:	d02d      	beq.n	8001692 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	d11a      	bne.n	800167a <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 020c 	bic.w	r2, r2, #12
 8001652:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d112      	bne.n	8001692 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	f043 0201 	orr.w	r2, r3, #1
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	641a      	str	r2, [r3, #64]	; 0x40
 8001678:	e00b      	b.n	8001692 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f043 0210 	orr.w	r2, r3, #16
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	f043 0201 	orr.w	r2, r3, #1
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff facc 	bl	8000c30 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	220c      	movs	r2, #12
 800169e:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	f003 0320 	and.w	r3, r3, #32
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d004      	beq.n	80016b4 <HAL_ADC_IRQHandler+0x1d0>
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f003 0320 	and.w	r3, r3, #32
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d10b      	bne.n	80016cc <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 8138 	beq.w	8001930 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 8132 	beq.w	8001930 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016e0:	d004      	beq.n	80016ec <HAL_ADC_IRQHandler+0x208>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a2d      	ldr	r2, [pc, #180]	; (800179c <HAL_ADC_IRQHandler+0x2b8>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d106      	bne.n	80016fa <HAL_ADC_IRQHandler+0x216>
 80016ec:	4b2c      	ldr	r3, [pc, #176]	; (80017a0 <HAL_ADC_IRQHandler+0x2bc>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f003 031f 	and.w	r3, r3, #31
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d03e      	beq.n	8001776 <HAL_ADC_IRQHandler+0x292>
 80016f8:	e005      	b.n	8001706 <HAL_ADC_IRQHandler+0x222>
 80016fa:	4b2a      	ldr	r3, [pc, #168]	; (80017a4 <HAL_ADC_IRQHandler+0x2c0>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 031f 	and.w	r3, r3, #31
 8001702:	2b00      	cmp	r3, #0
 8001704:	d037      	beq.n	8001776 <HAL_ADC_IRQHandler+0x292>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800170e:	d004      	beq.n	800171a <HAL_ADC_IRQHandler+0x236>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a21      	ldr	r2, [pc, #132]	; (800179c <HAL_ADC_IRQHandler+0x2b8>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d106      	bne.n	8001728 <HAL_ADC_IRQHandler+0x244>
 800171a:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <HAL_ADC_IRQHandler+0x2bc>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 031f 	and.w	r3, r3, #31
 8001722:	2b05      	cmp	r3, #5
 8001724:	d027      	beq.n	8001776 <HAL_ADC_IRQHandler+0x292>
 8001726:	e005      	b.n	8001734 <HAL_ADC_IRQHandler+0x250>
 8001728:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <HAL_ADC_IRQHandler+0x2c0>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 031f 	and.w	r3, r3, #31
 8001730:	2b05      	cmp	r3, #5
 8001732:	d020      	beq.n	8001776 <HAL_ADC_IRQHandler+0x292>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800173c:	d004      	beq.n	8001748 <HAL_ADC_IRQHandler+0x264>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a16      	ldr	r2, [pc, #88]	; (800179c <HAL_ADC_IRQHandler+0x2b8>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d106      	bne.n	8001756 <HAL_ADC_IRQHandler+0x272>
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <HAL_ADC_IRQHandler+0x2bc>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 031f 	and.w	r3, r3, #31
 8001750:	2b09      	cmp	r3, #9
 8001752:	d010      	beq.n	8001776 <HAL_ADC_IRQHandler+0x292>
 8001754:	e005      	b.n	8001762 <HAL_ADC_IRQHandler+0x27e>
 8001756:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <HAL_ADC_IRQHandler+0x2c0>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 031f 	and.w	r3, r3, #31
 800175e:	2b09      	cmp	r3, #9
 8001760:	d009      	beq.n	8001776 <HAL_ADC_IRQHandler+0x292>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800176a:	d004      	beq.n	8001776 <HAL_ADC_IRQHandler+0x292>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0d      	ldr	r2, [pc, #52]	; (80017a8 <HAL_ADC_IRQHandler+0x2c4>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d104      	bne.n	8001780 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	61bb      	str	r3, [r7, #24]
 800177e:	e018      	b.n	80017b2 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001788:	d004      	beq.n	8001794 <HAL_ADC_IRQHandler+0x2b0>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a03      	ldr	r2, [pc, #12]	; (800179c <HAL_ADC_IRQHandler+0x2b8>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d10b      	bne.n	80017ac <HAL_ADC_IRQHandler+0x2c8>
 8001794:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001798:	e009      	b.n	80017ae <HAL_ADC_IRQHandler+0x2ca>
 800179a:	bf00      	nop
 800179c:	50000100 	.word	0x50000100
 80017a0:	50000300 	.word	0x50000300
 80017a4:	50000700 	.word	0x50000700
 80017a8:	50000400 	.word	0x50000400
 80017ac:	4b92      	ldr	r3, [pc, #584]	; (80019f8 <HAL_ADC_IRQHandler+0x514>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f040 80b0 	bne.w	8001922 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00d      	beq.n	80017e8 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f040 80a3 	bne.w	8001922 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f040 809d 	bne.w	8001922 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 8097 	beq.w	8001922 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017fc:	d004      	beq.n	8001808 <HAL_ADC_IRQHandler+0x324>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a7e      	ldr	r2, [pc, #504]	; (80019fc <HAL_ADC_IRQHandler+0x518>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d106      	bne.n	8001816 <HAL_ADC_IRQHandler+0x332>
 8001808:	4b7d      	ldr	r3, [pc, #500]	; (8001a00 <HAL_ADC_IRQHandler+0x51c>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 031f 	and.w	r3, r3, #31
 8001810:	2b00      	cmp	r3, #0
 8001812:	d03e      	beq.n	8001892 <HAL_ADC_IRQHandler+0x3ae>
 8001814:	e005      	b.n	8001822 <HAL_ADC_IRQHandler+0x33e>
 8001816:	4b7b      	ldr	r3, [pc, #492]	; (8001a04 <HAL_ADC_IRQHandler+0x520>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 031f 	and.w	r3, r3, #31
 800181e:	2b00      	cmp	r3, #0
 8001820:	d037      	beq.n	8001892 <HAL_ADC_IRQHandler+0x3ae>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800182a:	d004      	beq.n	8001836 <HAL_ADC_IRQHandler+0x352>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a72      	ldr	r2, [pc, #456]	; (80019fc <HAL_ADC_IRQHandler+0x518>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d106      	bne.n	8001844 <HAL_ADC_IRQHandler+0x360>
 8001836:	4b72      	ldr	r3, [pc, #456]	; (8001a00 <HAL_ADC_IRQHandler+0x51c>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 031f 	and.w	r3, r3, #31
 800183e:	2b06      	cmp	r3, #6
 8001840:	d027      	beq.n	8001892 <HAL_ADC_IRQHandler+0x3ae>
 8001842:	e005      	b.n	8001850 <HAL_ADC_IRQHandler+0x36c>
 8001844:	4b6f      	ldr	r3, [pc, #444]	; (8001a04 <HAL_ADC_IRQHandler+0x520>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 031f 	and.w	r3, r3, #31
 800184c:	2b06      	cmp	r3, #6
 800184e:	d020      	beq.n	8001892 <HAL_ADC_IRQHandler+0x3ae>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001858:	d004      	beq.n	8001864 <HAL_ADC_IRQHandler+0x380>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a67      	ldr	r2, [pc, #412]	; (80019fc <HAL_ADC_IRQHandler+0x518>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d106      	bne.n	8001872 <HAL_ADC_IRQHandler+0x38e>
 8001864:	4b66      	ldr	r3, [pc, #408]	; (8001a00 <HAL_ADC_IRQHandler+0x51c>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 031f 	and.w	r3, r3, #31
 800186c:	2b07      	cmp	r3, #7
 800186e:	d010      	beq.n	8001892 <HAL_ADC_IRQHandler+0x3ae>
 8001870:	e005      	b.n	800187e <HAL_ADC_IRQHandler+0x39a>
 8001872:	4b64      	ldr	r3, [pc, #400]	; (8001a04 <HAL_ADC_IRQHandler+0x520>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 031f 	and.w	r3, r3, #31
 800187a:	2b07      	cmp	r3, #7
 800187c:	d009      	beq.n	8001892 <HAL_ADC_IRQHandler+0x3ae>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001886:	d004      	beq.n	8001892 <HAL_ADC_IRQHandler+0x3ae>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a5a      	ldr	r2, [pc, #360]	; (80019f8 <HAL_ADC_IRQHandler+0x514>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d104      	bne.n	800189c <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	e00f      	b.n	80018bc <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018a4:	d004      	beq.n	80018b0 <HAL_ADC_IRQHandler+0x3cc>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a54      	ldr	r2, [pc, #336]	; (80019fc <HAL_ADC_IRQHandler+0x518>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d102      	bne.n	80018b6 <HAL_ADC_IRQHandler+0x3d2>
 80018b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018b4:	e000      	b.n	80018b8 <HAL_ADC_IRQHandler+0x3d4>
 80018b6:	4b50      	ldr	r3, [pc, #320]	; (80019f8 <HAL_ADC_IRQHandler+0x514>)
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d12d      	bne.n	8001922 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d11a      	bne.n	800190a <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80018e2:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d112      	bne.n	8001922 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	f043 0201 	orr.w	r2, r3, #1
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	641a      	str	r2, [r3, #64]	; 0x40
 8001908:	e00b      	b.n	8001922 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f043 0210 	orr.w	r2, r3, #16
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f043 0201 	orr.w	r2, r3, #1
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f8c4 	bl	8001ab0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2260      	movs	r2, #96	; 0x60
 800192e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001936:	2b00      	cmp	r3, #0
 8001938:	d011      	beq.n	800195e <HAL_ADC_IRQHandler+0x47a>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00c      	beq.n	800195e <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff f977 	bl	8000c44 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2280      	movs	r2, #128	; 0x80
 800195c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001964:	2b00      	cmp	r3, #0
 8001966:	d012      	beq.n	800198e <HAL_ADC_IRQHandler+0x4aa>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00d      	beq.n	800198e <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f8aa 	bl	8001ad8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f44f 7280 	mov.w	r2, #256	; 0x100
 800198c:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001994:	2b00      	cmp	r3, #0
 8001996:	d012      	beq.n	80019be <HAL_ADC_IRQHandler+0x4da>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00d      	beq.n	80019be <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f89c 	bl	8001aec <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019bc:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	f003 0310 	and.w	r3, r3, #16
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d04f      	beq.n	8001a68 <HAL_ADC_IRQHandler+0x584>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 0310 	and.w	r3, r3, #16
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d04a      	beq.n	8001a68 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d102      	bne.n	80019e0 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 80019da:	2301      	movs	r3, #1
 80019dc:	61fb      	str	r3, [r7, #28]
 80019de:	e02d      	b.n	8001a3c <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019e8:	d004      	beq.n	80019f4 <HAL_ADC_IRQHandler+0x510>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a03      	ldr	r2, [pc, #12]	; (80019fc <HAL_ADC_IRQHandler+0x518>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d109      	bne.n	8001a08 <HAL_ADC_IRQHandler+0x524>
 80019f4:	4b02      	ldr	r3, [pc, #8]	; (8001a00 <HAL_ADC_IRQHandler+0x51c>)
 80019f6:	e008      	b.n	8001a0a <HAL_ADC_IRQHandler+0x526>
 80019f8:	50000400 	.word	0x50000400
 80019fc:	50000100 	.word	0x50000100
 8001a00:	50000300 	.word	0x50000300
 8001a04:	50000700 	.word	0x50000700
 8001a08:	4b28      	ldr	r3, [pc, #160]	; (8001aac <HAL_ADC_IRQHandler+0x5c8>)
 8001a0a:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 031f 	and.w	r3, r3, #31
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d109      	bne.n	8001a2c <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d10a      	bne.n	8001a3c <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001a26:	2301      	movs	r3, #1
 8001a28:	61fb      	str	r3, [r7, #28]
 8001a2a:	e007      	b.n	8001a3c <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001a38:	2301      	movs	r3, #1
 8001a3a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d10e      	bne.n	8001a60 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	f043 0202 	orr.w	r2, r3, #2
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff f8fc 	bl	8000c58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2210      	movs	r2, #16
 8001a66:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d018      	beq.n	8001aa4 <HAL_ADC_IRQHandler+0x5c0>
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d013      	beq.n	8001aa4 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8c:	f043 0208 	orr.w	r2, r3, #8
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a9c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f810 	bl	8001ac4 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001aa4:	bf00      	nop
 8001aa6:	3720      	adds	r7, #32
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	50000700 	.word	0x50000700

08001ab0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b09b      	sub	sp, #108	; 0x6c
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d101      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x22>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e2c8      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x5b4>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f040 82ac 	bne.w	8002092 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d81c      	bhi.n	8001b7c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4413      	add	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	461a      	mov	r2, r3
 8001b56:	231f      	movs	r3, #31
 8001b58:	4093      	lsls	r3, r2
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	4019      	ands	r1, r3
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	6818      	ldr	r0, [r3, #0]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	631a      	str	r2, [r3, #48]	; 0x30
 8001b7a:	e063      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b09      	cmp	r3, #9
 8001b82:	d81e      	bhi.n	8001bc2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	3b1e      	subs	r3, #30
 8001b98:	221f      	movs	r2, #31
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	4019      	ands	r1, r3
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	4613      	mov	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	3b1e      	subs	r3, #30
 8001bb4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	635a      	str	r2, [r3, #52]	; 0x34
 8001bc0:	e040      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b0e      	cmp	r3, #14
 8001bc8:	d81e      	bhi.n	8001c08 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	3b3c      	subs	r3, #60	; 0x3c
 8001bde:	221f      	movs	r2, #31
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	4019      	ands	r1, r3
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	4413      	add	r3, r2
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	3b3c      	subs	r3, #60	; 0x3c
 8001bfa:	fa00 f203 	lsl.w	r2, r0, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	639a      	str	r2, [r3, #56]	; 0x38
 8001c06:	e01d      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	3b5a      	subs	r3, #90	; 0x5a
 8001c1c:	221f      	movs	r2, #31
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	4019      	ands	r1, r3
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	6818      	ldr	r0, [r3, #0]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	3b5a      	subs	r3, #90	; 0x5a
 8001c38:	fa00 f203 	lsl.w	r2, r0, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f040 80e5 	bne.w	8001e1e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b09      	cmp	r3, #9
 8001c5a:	d91c      	bls.n	8001c96 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6999      	ldr	r1, [r3, #24]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	4613      	mov	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3b1e      	subs	r3, #30
 8001c6e:	2207      	movs	r2, #7
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	4019      	ands	r1, r3
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	6898      	ldr	r0, [r3, #8]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4613      	mov	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	3b1e      	subs	r3, #30
 8001c88:	fa00 f203 	lsl.w	r2, r0, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	619a      	str	r2, [r3, #24]
 8001c94:	e019      	b.n	8001cca <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6959      	ldr	r1, [r3, #20]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	2207      	movs	r2, #7
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	4019      	ands	r1, r3
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	6898      	ldr	r0, [r3, #8]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4413      	add	r3, r2
 8001cbe:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	08db      	lsrs	r3, r3, #3
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d84f      	bhi.n	8001d8c <HAL_ADC_ConfigChannel+0x28c>
 8001cec:	a201      	add	r2, pc, #4	; (adr r2, 8001cf4 <HAL_ADC_ConfigChannel+0x1f4>)
 8001cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf2:	bf00      	nop
 8001cf4:	08001d05 	.word	0x08001d05
 8001cf8:	08001d27 	.word	0x08001d27
 8001cfc:	08001d49 	.word	0x08001d49
 8001d00:	08001d6b 	.word	0x08001d6b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d0a:	4b99      	ldr	r3, [pc, #612]	; (8001f70 <HAL_ADC_ConfigChannel+0x470>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	6812      	ldr	r2, [r2, #0]
 8001d12:	0691      	lsls	r1, r2, #26
 8001d14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d16:	430a      	orrs	r2, r1
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d22:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d24:	e07b      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d2c:	4b90      	ldr	r3, [pc, #576]	; (8001f70 <HAL_ADC_ConfigChannel+0x470>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	0691      	lsls	r1, r2, #26
 8001d36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d44:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d46:	e06a      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d4e:	4b88      	ldr	r3, [pc, #544]	; (8001f70 <HAL_ADC_ConfigChannel+0x470>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	0691      	lsls	r1, r2, #26
 8001d58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d66:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d68:	e059      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d70:	4b7f      	ldr	r3, [pc, #508]	; (8001f70 <HAL_ADC_ConfigChannel+0x470>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	0691      	lsls	r1, r2, #26
 8001d7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d88:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d8a:	e048      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	069b      	lsls	r3, r3, #26
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d107      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dae:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001db6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	069b      	lsls	r3, r3, #26
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d107      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dd2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001dda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	069b      	lsls	r3, r3, #26
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d107      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001df6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	069b      	lsls	r3, r3, #26
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d107      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e1a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001e1c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d108      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x33e>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d101      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x33e>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <HAL_ADC_ConfigChannel+0x340>
 8001e3e:	2300      	movs	r3, #0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f040 8131 	bne.w	80020a8 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d00f      	beq.n	8001e6e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43da      	mvns	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	400a      	ands	r2, r1
 8001e68:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001e6c:	e049      	b.n	8001f02 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	409a      	lsls	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b09      	cmp	r3, #9
 8001e8e:	d91c      	bls.n	8001eca <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6999      	ldr	r1, [r3, #24]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3b1b      	subs	r3, #27
 8001ea2:	2207      	movs	r2, #7
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	4019      	ands	r1, r3
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	6898      	ldr	r0, [r3, #8]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4413      	add	r3, r2
 8001eba:	3b1b      	subs	r3, #27
 8001ebc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	619a      	str	r2, [r3, #24]
 8001ec8:	e01b      	b.n	8001f02 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6959      	ldr	r1, [r3, #20]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	1c5a      	adds	r2, r3, #1
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4413      	add	r3, r2
 8001edc:	2207      	movs	r2, #7
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	4019      	ands	r1, r3
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	6898      	ldr	r0, [r3, #8]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	4413      	add	r3, r2
 8001ef6:	fa00 f203 	lsl.w	r2, r0, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f0a:	d004      	beq.n	8001f16 <HAL_ADC_ConfigChannel+0x416>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a18      	ldr	r2, [pc, #96]	; (8001f74 <HAL_ADC_ConfigChannel+0x474>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d101      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x41a>
 8001f16:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <HAL_ADC_ConfigChannel+0x478>)
 8001f18:	e000      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x41c>
 8001f1a:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <HAL_ADC_ConfigChannel+0x47c>)
 8001f1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b10      	cmp	r3, #16
 8001f24:	d105      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d015      	beq.n	8001f5e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001f36:	2b11      	cmp	r3, #17
 8001f38:	d105      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00b      	beq.n	8001f5e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f4a:	2b12      	cmp	r3, #18
 8001f4c:	f040 80ac 	bne.w	80020a8 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001f50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f040 80a5 	bne.w	80020a8 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f66:	d10b      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x480>
 8001f68:	4b02      	ldr	r3, [pc, #8]	; (8001f74 <HAL_ADC_ConfigChannel+0x474>)
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	e023      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x4b6>
 8001f6e:	bf00      	nop
 8001f70:	83fff000 	.word	0x83fff000
 8001f74:	50000100 	.word	0x50000100
 8001f78:	50000300 	.word	0x50000300
 8001f7c:	50000700 	.word	0x50000700
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a4e      	ldr	r2, [pc, #312]	; (80020c0 <HAL_ADC_ConfigChannel+0x5c0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d103      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x492>
 8001f8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	e011      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x4b6>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a4b      	ldr	r2, [pc, #300]	; (80020c4 <HAL_ADC_ConfigChannel+0x5c4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d102      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x4a2>
 8001f9c:	4b4a      	ldr	r3, [pc, #296]	; (80020c8 <HAL_ADC_ConfigChannel+0x5c8>)
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	e009      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x4b6>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a48      	ldr	r2, [pc, #288]	; (80020c8 <HAL_ADC_ConfigChannel+0x5c8>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d102      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x4b2>
 8001fac:	4b45      	ldr	r3, [pc, #276]	; (80020c4 <HAL_ADC_ConfigChannel+0x5c4>)
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	e001      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x4b6>
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d108      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x4d6>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x4d6>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x4d8>
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d150      	bne.n	800207e <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001fdc:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d010      	beq.n	8002004 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d107      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x4fe>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x4fe>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <HAL_ADC_ConfigChannel+0x500>
 8001ffe:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002000:	2b00      	cmp	r3, #0
 8002002:	d13c      	bne.n	800207e <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b10      	cmp	r3, #16
 800200a:	d11d      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x548>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002014:	d118      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800201e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002020:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002022:	4b2a      	ldr	r3, [pc, #168]	; (80020cc <HAL_ADC_ConfigChannel+0x5cc>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a2a      	ldr	r2, [pc, #168]	; (80020d0 <HAL_ADC_ConfigChannel+0x5d0>)
 8002028:	fba2 2303 	umull	r2, r3, r2, r3
 800202c:	0c9a      	lsrs	r2, r3, #18
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002038:	e002      	b.n	8002040 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	3b01      	subs	r3, #1
 800203e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f9      	bne.n	800203a <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002046:	e02e      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b11      	cmp	r3, #17
 800204e:	d10b      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x568>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002058:	d106      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800205a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002064:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002066:	e01e      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b12      	cmp	r3, #18
 800206e:	d11a      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002078:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800207a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800207c:	e013      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f043 0220 	orr.w	r2, r3, #32
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002090:	e00a      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f043 0220 	orr.w	r2, r3, #32
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80020a4:	e000      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020a6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80020b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	376c      	adds	r7, #108	; 0x6c
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	50000100 	.word	0x50000100
 80020c4:	50000400 	.word	0x50000400
 80020c8:	50000500 	.word	0x50000500
 80020cc:	20000000 	.word	0x20000000
 80020d0:	431bde83 	.word	0x431bde83

080020d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b099      	sub	sp, #100	; 0x64
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020ec:	d102      	bne.n	80020f4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80020ee:	4b6d      	ldr	r3, [pc, #436]	; (80022a4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	e01a      	b.n	800212a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a6a      	ldr	r2, [pc, #424]	; (80022a4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d103      	bne.n	8002106 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80020fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	e011      	b.n	800212a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a67      	ldr	r2, [pc, #412]	; (80022a8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d102      	bne.n	8002116 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002110:	4b66      	ldr	r3, [pc, #408]	; (80022ac <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	e009      	b.n	800212a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a64      	ldr	r2, [pc, #400]	; (80022ac <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d102      	bne.n	8002126 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002120:	4b61      	ldr	r3, [pc, #388]	; (80022a8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	e001      	b.n	800212a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002126:	2300      	movs	r3, #0
 8002128:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e0b0      	b.n	8002296 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800213e:	2302      	movs	r3, #2
 8002140:	e0a9      	b.n	8002296 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	f040 808d 	bne.w	8002274 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b00      	cmp	r3, #0
 8002164:	f040 8086 	bne.w	8002274 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002170:	d004      	beq.n	800217c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a4b      	ldr	r2, [pc, #300]	; (80022a4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d101      	bne.n	8002180 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800217c:	4b4c      	ldr	r3, [pc, #304]	; (80022b0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800217e:	e000      	b.n	8002182 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002180:	4b4c      	ldr	r3, [pc, #304]	; (80022b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002182:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d040      	beq.n	800220e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800218c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	6859      	ldr	r1, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800219e:	035b      	lsls	r3, r3, #13
 80021a0:	430b      	orrs	r3, r1
 80021a2:	431a      	orrs	r2, r3
 80021a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021a6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d108      	bne.n	80021c8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80021c8:	2300      	movs	r3, #0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d15c      	bne.n	8002288 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d107      	bne.n	80021ea <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80021ea:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d14b      	bne.n	8002288 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80021f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80021f8:	f023 030f 	bic.w	r3, r3, #15
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	6811      	ldr	r1, [r2, #0]
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	6892      	ldr	r2, [r2, #8]
 8002204:	430a      	orrs	r2, r1
 8002206:	431a      	orrs	r2, r3
 8002208:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800220a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800220c:	e03c      	b.n	8002288 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800220e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002216:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002218:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	2b01      	cmp	r3, #1
 8002226:	d108      	bne.n	800223a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800223a:	2300      	movs	r3, #0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d123      	bne.n	8002288 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b01      	cmp	r3, #1
 800224a:	d107      	bne.n	800225c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b01      	cmp	r3, #1
 8002256:	d101      	bne.n	800225c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800225c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800225e:	2b00      	cmp	r3, #0
 8002260:	d112      	bne.n	8002288 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800226a:	f023 030f 	bic.w	r3, r3, #15
 800226e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002270:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002272:	e009      	b.n	8002288 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	f043 0220 	orr.w	r2, r3, #32
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002286:	e000      	b.n	800228a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002288:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002292:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002296:	4618      	mov	r0, r3
 8002298:	3764      	adds	r7, #100	; 0x64
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	50000100 	.word	0x50000100
 80022a8:	50000400 	.word	0x50000400
 80022ac:	50000500 	.word	0x50000500
 80022b0:	50000300 	.word	0x50000300
 80022b4:	50000700 	.word	0x50000700

080022b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d108      	bne.n	80022e4 <ADC_Enable+0x2c>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <ADC_Enable+0x2c>
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <ADC_Enable+0x2e>
 80022e4:	2300      	movs	r3, #0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d143      	bne.n	8002372 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	4b22      	ldr	r3, [pc, #136]	; (800237c <ADC_Enable+0xc4>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00d      	beq.n	8002314 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	f043 0210 	orr.w	r2, r3, #16
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002308:	f043 0201 	orr.w	r2, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e02f      	b.n	8002374 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002324:	f7fe fc78 	bl	8000c18 <HAL_GetTick>
 8002328:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800232a:	e01b      	b.n	8002364 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800232c:	f7fe fc74 	bl	8000c18 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d914      	bls.n	8002364 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b01      	cmp	r3, #1
 8002346:	d00d      	beq.n	8002364 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	f043 0210 	orr.w	r2, r3, #16
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002358:	f043 0201 	orr.w	r2, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e007      	b.n	8002374 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b01      	cmp	r3, #1
 8002370:	d1dc      	bne.n	800232c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	8000003f 	.word	0x8000003f

08002380 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b01      	cmp	r3, #1
 8002398:	d108      	bne.n	80023ac <ADC_Disable+0x2c>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <ADC_Disable+0x2c>
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <ADC_Disable+0x2e>
 80023ac:	2300      	movs	r3, #0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d047      	beq.n	8002442 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 030d 	and.w	r3, r3, #13
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d10f      	bne.n	80023e0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0202 	orr.w	r2, r2, #2
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2203      	movs	r2, #3
 80023d6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80023d8:	f7fe fc1e 	bl	8000c18 <HAL_GetTick>
 80023dc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80023de:	e029      	b.n	8002434 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	f043 0210 	orr.w	r2, r3, #16
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f0:	f043 0201 	orr.w	r2, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e023      	b.n	8002444 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023fc:	f7fe fc0c 	bl	8000c18 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d914      	bls.n	8002434 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b01      	cmp	r3, #1
 8002416:	d10d      	bne.n	8002434 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	f043 0210 	orr.w	r2, r3, #16
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002428:	f043 0201 	orr.w	r2, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e007      	b.n	8002444 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b01      	cmp	r3, #1
 8002440:	d0dc      	beq.n	80023fc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800245e:	2300      	movs	r3, #0
 8002460:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 030c 	and.w	r3, r3, #12
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 809b 	beq.w	80025a8 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002480:	d12a      	bne.n	80024d8 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002486:	2b01      	cmp	r3, #1
 8002488:	d126      	bne.n	80024d8 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800248e:	2b01      	cmp	r3, #1
 8002490:	d122      	bne.n	80024d8 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8002492:	230c      	movs	r3, #12
 8002494:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002496:	e014      	b.n	80024c2 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4a46      	ldr	r2, [pc, #280]	; (80025b4 <ADC_ConversionStop+0x168>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d90d      	bls.n	80024bc <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	f043 0210 	orr.w	r2, r3, #16
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b0:	f043 0201 	orr.w	r2, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e076      	b.n	80025aa <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	3301      	adds	r3, #1
 80024c0:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024cc:	2b40      	cmp	r3, #64	; 0x40
 80024ce:	d1e3      	bne.n	8002498 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2240      	movs	r2, #64	; 0x40
 80024d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	2b60      	cmp	r3, #96	; 0x60
 80024dc:	d015      	beq.n	800250a <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d10e      	bne.n	800250a <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d107      	bne.n	800250a <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f042 0210 	orr.w	r2, r2, #16
 8002508:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b0c      	cmp	r3, #12
 800250e:	d015      	beq.n	800253c <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b08      	cmp	r3, #8
 800251c:	d10e      	bne.n	800253c <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002528:	2b00      	cmp	r3, #0
 800252a:	d107      	bne.n	800253c <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0220 	orr.w	r2, r2, #32
 800253a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	2b60      	cmp	r3, #96	; 0x60
 8002540:	d005      	beq.n	800254e <ADC_ConversionStop+0x102>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	2b6c      	cmp	r3, #108	; 0x6c
 8002546:	d105      	bne.n	8002554 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002548:	230c      	movs	r3, #12
 800254a:	617b      	str	r3, [r7, #20]
        break;
 800254c:	e005      	b.n	800255a <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800254e:	2308      	movs	r3, #8
 8002550:	617b      	str	r3, [r7, #20]
        break;
 8002552:	e002      	b.n	800255a <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002554:	2304      	movs	r3, #4
 8002556:	617b      	str	r3, [r7, #20]
        break;
 8002558:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800255a:	f7fe fb5d 	bl	8000c18 <HAL_GetTick>
 800255e:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002560:	e01b      	b.n	800259a <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002562:	f7fe fb59 	bl	8000c18 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b0b      	cmp	r3, #11
 800256e:	d914      	bls.n	800259a <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	4013      	ands	r3, r2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00d      	beq.n	800259a <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f043 0210 	orr.w	r2, r3, #16
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	f043 0201 	orr.w	r2, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e007      	b.n	80025aa <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1dc      	bne.n	8002562 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	000993ff 	.word	0x000993ff

080025b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <__NVIC_SetPriorityGrouping+0x44>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025d4:	4013      	ands	r3, r2
 80025d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ea:	4a04      	ldr	r2, [pc, #16]	; (80025fc <__NVIC_SetPriorityGrouping+0x44>)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	60d3      	str	r3, [r2, #12]
}
 80025f0:	bf00      	nop
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002604:	4b04      	ldr	r3, [pc, #16]	; (8002618 <__NVIC_GetPriorityGrouping+0x18>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	0a1b      	lsrs	r3, r3, #8
 800260a:	f003 0307 	and.w	r3, r3, #7
}
 800260e:	4618      	mov	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	2b00      	cmp	r3, #0
 800262c:	db0b      	blt.n	8002646 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	f003 021f 	and.w	r2, r3, #31
 8002634:	4907      	ldr	r1, [pc, #28]	; (8002654 <__NVIC_EnableIRQ+0x38>)
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	2001      	movs	r0, #1
 800263e:	fa00 f202 	lsl.w	r2, r0, r2
 8002642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	e000e100 	.word	0xe000e100

08002658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	6039      	str	r1, [r7, #0]
 8002662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002668:	2b00      	cmp	r3, #0
 800266a:	db0a      	blt.n	8002682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	b2da      	uxtb	r2, r3
 8002670:	490c      	ldr	r1, [pc, #48]	; (80026a4 <__NVIC_SetPriority+0x4c>)
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	0112      	lsls	r2, r2, #4
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	440b      	add	r3, r1
 800267c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002680:	e00a      	b.n	8002698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	b2da      	uxtb	r2, r3
 8002686:	4908      	ldr	r1, [pc, #32]	; (80026a8 <__NVIC_SetPriority+0x50>)
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	3b04      	subs	r3, #4
 8002690:	0112      	lsls	r2, r2, #4
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	440b      	add	r3, r1
 8002696:	761a      	strb	r2, [r3, #24]
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	e000e100 	.word	0xe000e100
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b089      	sub	sp, #36	; 0x24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f1c3 0307 	rsb	r3, r3, #7
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	bf28      	it	cs
 80026ca:	2304      	movcs	r3, #4
 80026cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	3304      	adds	r3, #4
 80026d2:	2b06      	cmp	r3, #6
 80026d4:	d902      	bls.n	80026dc <NVIC_EncodePriority+0x30>
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	3b03      	subs	r3, #3
 80026da:	e000      	b.n	80026de <NVIC_EncodePriority+0x32>
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e0:	f04f 32ff 	mov.w	r2, #4294967295
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43da      	mvns	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	401a      	ands	r2, r3
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f4:	f04f 31ff 	mov.w	r1, #4294967295
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	fa01 f303 	lsl.w	r3, r1, r3
 80026fe:	43d9      	mvns	r1, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002704:	4313      	orrs	r3, r2
         );
}
 8002706:	4618      	mov	r0, r3
 8002708:	3724      	adds	r7, #36	; 0x24
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3b01      	subs	r3, #1
 8002720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002724:	d301      	bcc.n	800272a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002726:	2301      	movs	r3, #1
 8002728:	e00f      	b.n	800274a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800272a:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <SysTick_Config+0x40>)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3b01      	subs	r3, #1
 8002730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002732:	210f      	movs	r1, #15
 8002734:	f04f 30ff 	mov.w	r0, #4294967295
 8002738:	f7ff ff8e 	bl	8002658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <SysTick_Config+0x40>)
 800273e:	2200      	movs	r2, #0
 8002740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002742:	4b04      	ldr	r3, [pc, #16]	; (8002754 <SysTick_Config+0x40>)
 8002744:	2207      	movs	r2, #7
 8002746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	e000e010 	.word	0xe000e010

08002758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff ff29 	bl	80025b8 <__NVIC_SetPriorityGrouping>
}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b086      	sub	sp, #24
 8002772:	af00      	add	r7, sp, #0
 8002774:	4603      	mov	r3, r0
 8002776:	60b9      	str	r1, [r7, #8]
 8002778:	607a      	str	r2, [r7, #4]
 800277a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002780:	f7ff ff3e 	bl	8002600 <__NVIC_GetPriorityGrouping>
 8002784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68b9      	ldr	r1, [r7, #8]
 800278a:	6978      	ldr	r0, [r7, #20]
 800278c:	f7ff ff8e 	bl	80026ac <NVIC_EncodePriority>
 8002790:	4602      	mov	r2, r0
 8002792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002796:	4611      	mov	r1, r2
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ff5d 	bl	8002658 <__NVIC_SetPriority>
}
 800279e:	bf00      	nop
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	4603      	mov	r3, r0
 80027ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ff31 	bl	800261c <__NVIC_EnableIRQ>
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff ffa2 	bl	8002714 <SysTick_Config>
 80027d0:	4603      	mov	r3, r0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ea:	e154      	b.n	8002a96 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	2101      	movs	r1, #1
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	fa01 f303 	lsl.w	r3, r1, r3
 80027f8:	4013      	ands	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 8146 	beq.w	8002a90 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	2b01      	cmp	r3, #1
 800280e:	d005      	beq.n	800281c <HAL_GPIO_Init+0x40>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d130      	bne.n	800287e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	2203      	movs	r2, #3
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4013      	ands	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	68da      	ldr	r2, [r3, #12]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002852:	2201      	movs	r2, #1
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43db      	mvns	r3, r3
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	4013      	ands	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	091b      	lsrs	r3, r3, #4
 8002868:	f003 0201 	and.w	r2, r3, #1
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	2b03      	cmp	r3, #3
 8002888:	d017      	beq.n	80028ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	2203      	movs	r2, #3
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4013      	ands	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d123      	bne.n	800290e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	08da      	lsrs	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3208      	adds	r2, #8
 80028ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	220f      	movs	r2, #15
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43db      	mvns	r3, r3
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4013      	ands	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	691a      	ldr	r2, [r3, #16]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	08da      	lsrs	r2, r3, #3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3208      	adds	r2, #8
 8002908:	6939      	ldr	r1, [r7, #16]
 800290a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	2203      	movs	r2, #3
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4013      	ands	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 0203 	and.w	r2, r3, #3
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 80a0 	beq.w	8002a90 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002950:	4b58      	ldr	r3, [pc, #352]	; (8002ab4 <HAL_GPIO_Init+0x2d8>)
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	4a57      	ldr	r2, [pc, #348]	; (8002ab4 <HAL_GPIO_Init+0x2d8>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	6193      	str	r3, [r2, #24]
 800295c:	4b55      	ldr	r3, [pc, #340]	; (8002ab4 <HAL_GPIO_Init+0x2d8>)
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002968:	4a53      	ldr	r2, [pc, #332]	; (8002ab8 <HAL_GPIO_Init+0x2dc>)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	089b      	lsrs	r3, r3, #2
 800296e:	3302      	adds	r3, #2
 8002970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002974:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	220f      	movs	r2, #15
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002992:	d019      	beq.n	80029c8 <HAL_GPIO_Init+0x1ec>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a49      	ldr	r2, [pc, #292]	; (8002abc <HAL_GPIO_Init+0x2e0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d013      	beq.n	80029c4 <HAL_GPIO_Init+0x1e8>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a48      	ldr	r2, [pc, #288]	; (8002ac0 <HAL_GPIO_Init+0x2e4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d00d      	beq.n	80029c0 <HAL_GPIO_Init+0x1e4>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a47      	ldr	r2, [pc, #284]	; (8002ac4 <HAL_GPIO_Init+0x2e8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d007      	beq.n	80029bc <HAL_GPIO_Init+0x1e0>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a46      	ldr	r2, [pc, #280]	; (8002ac8 <HAL_GPIO_Init+0x2ec>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d101      	bne.n	80029b8 <HAL_GPIO_Init+0x1dc>
 80029b4:	2304      	movs	r3, #4
 80029b6:	e008      	b.n	80029ca <HAL_GPIO_Init+0x1ee>
 80029b8:	2305      	movs	r3, #5
 80029ba:	e006      	b.n	80029ca <HAL_GPIO_Init+0x1ee>
 80029bc:	2303      	movs	r3, #3
 80029be:	e004      	b.n	80029ca <HAL_GPIO_Init+0x1ee>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e002      	b.n	80029ca <HAL_GPIO_Init+0x1ee>
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <HAL_GPIO_Init+0x1ee>
 80029c8:	2300      	movs	r3, #0
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	f002 0203 	and.w	r2, r2, #3
 80029d0:	0092      	lsls	r2, r2, #2
 80029d2:	4093      	lsls	r3, r2
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029da:	4937      	ldr	r1, [pc, #220]	; (8002ab8 <HAL_GPIO_Init+0x2dc>)
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	089b      	lsrs	r3, r3, #2
 80029e0:	3302      	adds	r3, #2
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029e8:	4b38      	ldr	r3, [pc, #224]	; (8002acc <HAL_GPIO_Init+0x2f0>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	43db      	mvns	r3, r3
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4013      	ands	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a0c:	4a2f      	ldr	r2, [pc, #188]	; (8002acc <HAL_GPIO_Init+0x2f0>)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a12:	4b2e      	ldr	r3, [pc, #184]	; (8002acc <HAL_GPIO_Init+0x2f0>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a36:	4a25      	ldr	r2, [pc, #148]	; (8002acc <HAL_GPIO_Init+0x2f0>)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a3c:	4b23      	ldr	r3, [pc, #140]	; (8002acc <HAL_GPIO_Init+0x2f0>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	43db      	mvns	r3, r3
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a60:	4a1a      	ldr	r2, [pc, #104]	; (8002acc <HAL_GPIO_Init+0x2f0>)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a66:	4b19      	ldr	r3, [pc, #100]	; (8002acc <HAL_GPIO_Init+0x2f0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4013      	ands	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a8a:	4a10      	ldr	r2, [pc, #64]	; (8002acc <HAL_GPIO_Init+0x2f0>)
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	3301      	adds	r3, #1
 8002a94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f47f aea3 	bne.w	80027ec <HAL_GPIO_Init+0x10>
  }
}
 8002aa6:	bf00      	nop
 8002aa8:	bf00      	nop
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40010000 	.word	0x40010000
 8002abc:	48000400 	.word	0x48000400
 8002ac0:	48000800 	.word	0x48000800
 8002ac4:	48000c00 	.word	0x48000c00
 8002ac8:	48001000 	.word	0x48001000
 8002acc:	40010400 	.word	0x40010400

08002ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	807b      	strh	r3, [r7, #2]
 8002adc:	4613      	mov	r3, r2
 8002ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ae0:	787b      	ldrb	r3, [r7, #1]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ae6:	887a      	ldrh	r2, [r7, #2]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002aec:	e002      	b.n	8002af4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002aee:	887a      	ldrh	r2, [r7, #2]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b12:	887a      	ldrh	r2, [r7, #2]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4013      	ands	r3, r2
 8002b18:	041a      	lsls	r2, r3, #16
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	43d9      	mvns	r1, r3
 8002b1e:	887b      	ldrh	r3, [r7, #2]
 8002b20:	400b      	ands	r3, r1
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	619a      	str	r2, [r3, #24]
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b36:	b08b      	sub	sp, #44	; 0x2c
 8002b38:	af06      	add	r7, sp, #24
 8002b3a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e0c4      	b.n	8002cd0 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d106      	bne.n	8002b60 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f008 fb7a 	bl	800b254 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2203      	movs	r2, #3
 8002b64:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f004 faf6 	bl	800715e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b72:	2300      	movs	r3, #0
 8002b74:	73fb      	strb	r3, [r7, #15]
 8002b76:	e040      	b.n	8002bfa <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	440b      	add	r3, r1
 8002b88:	3301      	adds	r3, #1
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	440b      	add	r3, r1
 8002b9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ba0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	440b      	add	r3, r1
 8002bb2:	3303      	adds	r3, #3
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bb8:	7bfa      	ldrb	r2, [r7, #15]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	440b      	add	r3, r1
 8002bc6:	3338      	adds	r3, #56	; 0x38
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	440b      	add	r3, r1
 8002bda:	333c      	adds	r3, #60	; 0x3c
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	440b      	add	r3, r1
 8002bee:	3340      	adds	r3, #64	; 0x40
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	73fb      	strb	r3, [r7, #15]
 8002bfa:	7bfa      	ldrb	r2, [r7, #15]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d3b9      	bcc.n	8002b78 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c04:	2300      	movs	r3, #0
 8002c06:	73fb      	strb	r3, [r7, #15]
 8002c08:	e044      	b.n	8002c94 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c0a:	7bfa      	ldrb	r2, [r7, #15]
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	440b      	add	r3, r1
 8002c18:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c20:	7bfa      	ldrb	r2, [r7, #15]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	440b      	add	r3, r1
 8002c2e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c32:	7bfa      	ldrb	r2, [r7, #15]
 8002c34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c36:	7bfa      	ldrb	r2, [r7, #15]
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	440b      	add	r3, r1
 8002c44:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002c48:	2200      	movs	r2, #0
 8002c4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c4c:	7bfa      	ldrb	r2, [r7, #15]
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	440b      	add	r3, r1
 8002c5a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c62:	7bfa      	ldrb	r2, [r7, #15]
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	440b      	add	r3, r1
 8002c70:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c78:	7bfa      	ldrb	r2, [r7, #15]
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	440b      	add	r3, r1
 8002c86:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
 8002c90:	3301      	adds	r3, #1
 8002c92:	73fb      	strb	r3, [r7, #15]
 8002c94:	7bfa      	ldrb	r2, [r7, #15]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d3b5      	bcc.n	8002c0a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	687e      	ldr	r6, [r7, #4]
 8002ca6:	466d      	mov	r5, sp
 8002ca8:	f106 0410 	add.w	r4, r6, #16
 8002cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cb0:	6823      	ldr	r3, [r4, #0]
 8002cb2:	602b      	str	r3, [r5, #0]
 8002cb4:	1d33      	adds	r3, r6, #4
 8002cb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cb8:	6838      	ldr	r0, [r7, #0]
 8002cba:	f004 fa6b 	bl	8007194 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cd8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <HAL_PCD_Start+0x16>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e016      	b.n	8002d1c <HAL_PCD_Start+0x44>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f004 fa18 	bl	8007130 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002d00:	2101      	movs	r1, #1
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f008 fd44 	bl	800b790 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f006 fcd8 	bl	80096c2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f006 fcd1 	bl	80096d8 <USB_ReadInterrupts>
 8002d36:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fab2 	bl	80032ac <PCD_EP_ISR_Handler>

    return;
 8002d48:	e0bd      	b.n	8002ec6 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d013      	beq.n	8002d7c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d66:	b292      	uxth	r2, r2
 8002d68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f008 fb12 	bl	800b396 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002d72:	2100      	movs	r1, #0
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f8a9 	bl	8002ecc <HAL_PCD_SetAddress>

    return;
 8002d7a:	e0a4      	b.n	8002ec6 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00c      	beq.n	8002da0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d98:	b292      	uxth	r2, r2
 8002d9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002d9e:	e092      	b.n	8002ec6 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00c      	beq.n	8002dc4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dbc:	b292      	uxth	r2, r2
 8002dbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002dc2:	e080      	b.n	8002ec6 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d027      	beq.n	8002e1e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0204 	bic.w	r2, r2, #4
 8002de0:	b292      	uxth	r2, r2
 8002de2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0208 	bic.w	r2, r2, #8
 8002df8:	b292      	uxth	r2, r2
 8002dfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f008 fb02 	bl	800b408 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e16:	b292      	uxth	r2, r2
 8002e18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002e1c:	e053      	b.n	8002ec6 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d027      	beq.n	8002e78 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0208 	orr.w	r2, r2, #8
 8002e3a:	b292      	uxth	r2, r2
 8002e3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e52:	b292      	uxth	r2, r2
 8002e54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0204 	orr.w	r2, r2, #4
 8002e6a:	b292      	uxth	r2, r2
 8002e6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f008 faaf 	bl	800b3d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002e76:	e026      	b.n	8002ec6 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00f      	beq.n	8002ea2 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e94:	b292      	uxth	r2, r2
 8002e96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f008 fa6d 	bl	800b37a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002ea0:	e011      	b.n	8002ec6 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00c      	beq.n	8002ec6 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ebe:	b292      	uxth	r2, r2
 8002ec0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002ec4:	bf00      	nop
  }
}
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d101      	bne.n	8002ee6 <HAL_PCD_SetAddress+0x1a>
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	e013      	b.n	8002f0e <HAL_PCD_SetAddress+0x42>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	4611      	mov	r1, r2
 8002efe:	4618      	mov	r0, r3
 8002f00:	f006 fbcb 	bl	800969a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	4608      	mov	r0, r1
 8002f20:	4611      	mov	r1, r2
 8002f22:	461a      	mov	r2, r3
 8002f24:	4603      	mov	r3, r0
 8002f26:	70fb      	strb	r3, [r7, #3]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	803b      	strh	r3, [r7, #0]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	da0e      	bge.n	8002f5a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	4413      	add	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2201      	movs	r2, #1
 8002f56:	705a      	strb	r2, [r3, #1]
 8002f58:	e00e      	b.n	8002f78 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	f003 0207 	and.w	r2, r3, #7
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	4413      	add	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f84:	883a      	ldrh	r2, [r7, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	78ba      	ldrb	r2, [r7, #2]
 8002f8e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f90:	78bb      	ldrb	r3, [r7, #2]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d102      	bne.n	8002f9c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_PCD_EP_Open+0x94>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e00e      	b.n	8002fc8 <HAL_PCD_EP_Open+0xb2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68f9      	ldr	r1, [r7, #12]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f004 f90d 	bl	80071d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002fc6:	7afb      	ldrb	r3, [r7, #11]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	da0e      	bge.n	8003002 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	705a      	strb	r2, [r3, #1]
 8003000:	e00e      	b.n	8003020 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	f003 0207 	and.w	r2, r3, #7
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	4413      	add	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	b2da      	uxtb	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <HAL_PCD_EP_Close+0x6a>
 8003036:	2302      	movs	r3, #2
 8003038:	e00e      	b.n	8003058 <HAL_PCD_EP_Close+0x88>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68f9      	ldr	r1, [r7, #12]
 8003048:	4618      	mov	r0, r3
 800304a:	f004 fc89 	bl	8007960 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	607a      	str	r2, [r7, #4]
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	460b      	mov	r3, r1
 800306e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003070:	7afb      	ldrb	r3, [r7, #11]
 8003072:	f003 0207 	and.w	r2, r3, #7
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	4413      	add	r3, r2
 8003086:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2200      	movs	r2, #0
 8003098:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2200      	movs	r2, #0
 800309e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030a0:	7afb      	ldrb	r3, [r7, #11]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6979      	ldr	r1, [r7, #20]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f004 fe41 	bl	8007d3a <USB_EPStartXfer>

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	460b      	mov	r3, r1
 80030cc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80030ce:	78fb      	ldrb	r3, [r7, #3]
 80030d0:	f003 0207 	and.w	r2, r3, #7
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	440b      	add	r3, r1
 80030e0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80030e4:	681b      	ldr	r3, [r3, #0]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b086      	sub	sp, #24
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	603b      	str	r3, [r7, #0]
 80030fe:	460b      	mov	r3, r1
 8003100:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003102:	7afb      	ldrb	r3, [r7, #11]
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4413      	add	r3, r2
 8003116:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2200      	movs	r2, #0
 8003136:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2201      	movs	r2, #1
 800313c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800313e:	7afb      	ldrb	r3, [r7, #11]
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	b2da      	uxtb	r2, r3
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6979      	ldr	r1, [r7, #20]
 8003150:	4618      	mov	r0, r3
 8003152:	f004 fdf2 	bl	8007d3a <USB_EPStartXfer>

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800316c:	78fb      	ldrb	r3, [r7, #3]
 800316e:	f003 0207 	and.w	r2, r3, #7
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	429a      	cmp	r2, r3
 8003178:	d901      	bls.n	800317e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e03e      	b.n	80031fc <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800317e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003182:	2b00      	cmp	r3, #0
 8003184:	da0e      	bge.n	80031a4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003186:	78fb      	ldrb	r3, [r7, #3]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	4413      	add	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2201      	movs	r2, #1
 80031a0:	705a      	strb	r2, [r3, #1]
 80031a2:	e00c      	b.n	80031be <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	4413      	add	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2201      	movs	r2, #1
 80031c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d101      	bne.n	80031de <HAL_PCD_EP_SetStall+0x7e>
 80031da:	2302      	movs	r3, #2
 80031dc:	e00e      	b.n	80031fc <HAL_PCD_EP_SetStall+0x9c>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68f9      	ldr	r1, [r7, #12]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f006 f955 	bl	800949c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003210:	78fb      	ldrb	r3, [r7, #3]
 8003212:	f003 020f 	and.w	r2, r3, #15
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	429a      	cmp	r2, r3
 800321c:	d901      	bls.n	8003222 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e040      	b.n	80032a4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003222:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003226:	2b00      	cmp	r3, #0
 8003228:	da0e      	bge.n	8003248 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800322a:	78fb      	ldrb	r3, [r7, #3]
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	4413      	add	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2201      	movs	r2, #1
 8003244:	705a      	strb	r2, [r3, #1]
 8003246:	e00e      	b.n	8003266 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	f003 0207 	and.w	r2, r3, #7
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	4413      	add	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	b2da      	uxtb	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_PCD_EP_ClrStall+0x82>
 8003282:	2302      	movs	r3, #2
 8003284:	e00e      	b.n	80032a4 <HAL_PCD_EP_ClrStall+0xa0>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68f9      	ldr	r1, [r7, #12]
 8003294:	4618      	mov	r0, r3
 8003296:	f006 f952 	bl	800953e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b096      	sub	sp, #88	; 0x58
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80032b4:	e3bf      	b.n	8003a36 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80032c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	f003 030f 	and.w	r3, r3, #15
 80032cc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80032d0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f040 8179 	bne.w	80035cc <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80032da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d152      	bne.n	800338c <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80032f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f6:	81fb      	strh	r3, [r7, #14]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	89fb      	ldrh	r3, [r7, #14]
 80032fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003302:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003306:	b29b      	uxth	r3, r3
 8003308:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3328      	adds	r3, #40	; 0x28
 800330e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003318:	b29b      	uxth	r3, r3
 800331a:	461a      	mov	r2, r3
 800331c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	4413      	add	r3, r2
 8003324:	3302      	adds	r3, #2
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	4413      	add	r3, r2
 800332e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003338:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800333a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800333c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800333e:	695a      	ldr	r2, [r3, #20]
 8003340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	441a      	add	r2, r3
 8003346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003348:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800334a:	2100      	movs	r1, #0
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f007 fffa 	bl	800b346 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 836b 	beq.w	8003a36 <PCD_EP_ISR_Handler+0x78a>
 8003360:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	2b00      	cmp	r3, #0
 8003366:	f040 8366 	bne.w	8003a36 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003370:	b2db      	uxtb	r3, r3
 8003372:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003376:	b2da      	uxtb	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	b292      	uxth	r2, r2
 800337e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800338a:	e354      	b.n	8003a36 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003392:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800339e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80033a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d034      	beq.n	8003414 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	4413      	add	r3, r2
 80033be:	3306      	adds	r3, #6
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6812      	ldr	r2, [r2, #0]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033d4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80033e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033e2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80033e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033e6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	f006 f9cb 	bl	8009784 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80033fa:	4013      	ands	r3, r2
 80033fc:	823b      	strh	r3, [r7, #16]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	8a3a      	ldrh	r2, [r7, #16]
 8003404:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003408:	b292      	uxth	r2, r2
 800340a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f007 ff6d 	bl	800b2ec <HAL_PCD_SetupStageCallback>
 8003412:	e310      	b.n	8003a36 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003414:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003418:	2b00      	cmp	r3, #0
 800341a:	f280 830c 	bge.w	8003a36 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	b29a      	uxth	r2, r3
 8003426:	f640 738f 	movw	r3, #3983	; 0xf8f
 800342a:	4013      	ands	r3, r2
 800342c:	83fb      	strh	r3, [r7, #30]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	8bfa      	ldrh	r2, [r7, #30]
 8003434:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003438:	b292      	uxth	r2, r2
 800343a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003444:	b29b      	uxth	r3, r3
 8003446:	461a      	mov	r2, r3
 8003448:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	4413      	add	r3, r2
 8003450:	3306      	adds	r3, #6
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6812      	ldr	r2, [r2, #0]
 8003458:	4413      	add	r3, r2
 800345a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003466:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d019      	beq.n	80034a4 <PCD_EP_ISR_Handler+0x1f8>
 8003470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d015      	beq.n	80034a4 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800347e:	6959      	ldr	r1, [r3, #20]
 8003480:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003482:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003486:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003488:	b29b      	uxth	r3, r3
 800348a:	f006 f97b 	bl	8009784 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800348e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003490:	695a      	ldr	r2, [r3, #20]
 8003492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	441a      	add	r2, r3
 8003498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800349a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800349c:	2100      	movs	r1, #0
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f007 ff36 	bl	800b310 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80034ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80034b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f040 82bd 	bne.w	8003a36 <PCD_EP_ISR_Handler+0x78a>
 80034bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80034c0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80034c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034c8:	f000 82b5 	beq.w	8003a36 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	61bb      	str	r3, [r7, #24]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034da:	b29b      	uxth	r3, r3
 80034dc:	461a      	mov	r2, r3
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	4413      	add	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	801a      	strh	r2, [r3, #0]
 80034fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	2b3e      	cmp	r3, #62	; 0x3e
 8003502:	d91d      	bls.n	8003540 <PCD_EP_ISR_Handler+0x294>
 8003504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	095b      	lsrs	r3, r3, #5
 800350a:	647b      	str	r3, [r7, #68]	; 0x44
 800350c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	f003 031f 	and.w	r3, r3, #31
 8003514:	2b00      	cmp	r3, #0
 8003516:	d102      	bne.n	800351e <PCD_EP_ISR_Handler+0x272>
 8003518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800351a:	3b01      	subs	r3, #1
 800351c:	647b      	str	r3, [r7, #68]	; 0x44
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	b29a      	uxth	r2, r3
 8003524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003526:	b29b      	uxth	r3, r3
 8003528:	029b      	lsls	r3, r3, #10
 800352a:	b29b      	uxth	r3, r3
 800352c:	4313      	orrs	r3, r2
 800352e:	b29b      	uxth	r3, r3
 8003530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003538:	b29a      	uxth	r2, r3
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	801a      	strh	r2, [r3, #0]
 800353e:	e026      	b.n	800358e <PCD_EP_ISR_Handler+0x2e2>
 8003540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10a      	bne.n	800355e <PCD_EP_ISR_Handler+0x2b2>
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	b29b      	uxth	r3, r3
 800354e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003556:	b29a      	uxth	r2, r3
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	801a      	strh	r2, [r3, #0]
 800355c:	e017      	b.n	800358e <PCD_EP_ISR_Handler+0x2e2>
 800355e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	085b      	lsrs	r3, r3, #1
 8003564:	647b      	str	r3, [r7, #68]	; 0x44
 8003566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <PCD_EP_ISR_Handler+0x2cc>
 8003572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003574:	3301      	adds	r3, #1
 8003576:	647b      	str	r3, [r7, #68]	; 0x44
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	b29a      	uxth	r2, r3
 800357e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003580:	b29b      	uxth	r3, r3
 8003582:	029b      	lsls	r3, r3, #10
 8003584:	b29b      	uxth	r3, r3
 8003586:	4313      	orrs	r3, r2
 8003588:	b29a      	uxth	r2, r3
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	b29b      	uxth	r3, r3
 8003596:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800359a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359e:	827b      	strh	r3, [r7, #18]
 80035a0:	8a7b      	ldrh	r3, [r7, #18]
 80035a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80035a6:	827b      	strh	r3, [r7, #18]
 80035a8:	8a7b      	ldrh	r3, [r7, #18]
 80035aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80035ae:	827b      	strh	r3, [r7, #18]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	8a7b      	ldrh	r3, [r7, #18]
 80035b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	8013      	strh	r3, [r2, #0]
 80035ca:	e234      	b.n	8003a36 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	461a      	mov	r2, r3
 80035d2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035e0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f280 80fc 	bge.w	80037e2 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003600:	4013      	ands	r3, r2
 8003602:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	461a      	mov	r2, r3
 800360c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003618:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800361c:	b292      	uxth	r2, r2
 800361e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003620:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003624:	4613      	mov	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	4413      	add	r3, r2
 8003634:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003638:	7b1b      	ldrb	r3, [r3, #12]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d125      	bne.n	800368a <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003646:	b29b      	uxth	r3, r3
 8003648:	461a      	mov	r2, r3
 800364a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4413      	add	r3, r2
 8003652:	3306      	adds	r3, #6
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	4413      	add	r3, r2
 800365c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003666:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800366a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 8092 	beq.w	8003798 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800367a:	6959      	ldr	r1, [r3, #20]
 800367c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800367e:	88da      	ldrh	r2, [r3, #6]
 8003680:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003684:	f006 f87e 	bl	8009784 <USB_ReadPMA>
 8003688:	e086      	b.n	8003798 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800368a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800368c:	78db      	ldrb	r3, [r3, #3]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d10a      	bne.n	80036a8 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003692:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003696:	461a      	mov	r2, r3
 8003698:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f9d9 	bl	8003a52 <HAL_PCD_EP_DB_Receive>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80036a6:	e077      	b.n	8003798 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	461a      	mov	r2, r3
 80036ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	441a      	add	r2, r3
 80036d4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80036d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	461a      	mov	r2, r3
 80036f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d024      	beq.n	8003750 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800370e:	b29b      	uxth	r3, r3
 8003710:	461a      	mov	r2, r3
 8003712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	4413      	add	r3, r2
 800371a:	3302      	adds	r3, #2
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6812      	ldr	r2, [r2, #0]
 8003722:	4413      	add	r3, r2
 8003724:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800372e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003732:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003736:	2b00      	cmp	r3, #0
 8003738:	d02e      	beq.n	8003798 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003740:	6959      	ldr	r1, [r3, #20]
 8003742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003744:	891a      	ldrh	r2, [r3, #8]
 8003746:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800374a:	f006 f81b 	bl	8009784 <USB_ReadPMA>
 800374e:	e023      	b.n	8003798 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003758:	b29b      	uxth	r3, r3
 800375a:	461a      	mov	r2, r3
 800375c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	4413      	add	r3, r2
 8003764:	3306      	adds	r3, #6
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	4413      	add	r3, r2
 800376e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003772:	881b      	ldrh	r3, [r3, #0]
 8003774:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003778:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800377c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003780:	2b00      	cmp	r3, #0
 8003782:	d009      	beq.n	8003798 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6818      	ldr	r0, [r3, #0]
 8003788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800378a:	6959      	ldr	r1, [r3, #20]
 800378c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800378e:	895a      	ldrh	r2, [r3, #10]
 8003790:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003794:	f005 fff6 	bl	8009784 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800379a:	69da      	ldr	r2, [r3, #28]
 800379c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037a0:	441a      	add	r2, r3
 80037a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80037a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a8:	695a      	ldr	r2, [r3, #20]
 80037aa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037ae:	441a      	add	r2, r3
 80037b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037b2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80037b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <PCD_EP_ISR_Handler+0x51c>
 80037bc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80037c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d206      	bcs.n	80037d6 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80037c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	4619      	mov	r1, r3
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f007 fd9e 	bl	800b310 <HAL_PCD_DataOutStageCallback>
 80037d4:	e005      	b.n	80037e2 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037dc:	4618      	mov	r0, r3
 80037de:	f004 faac 	bl	8007d3a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80037e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80037e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 8123 	beq.w	8003a36 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 80037f0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	4613      	mov	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	4413      	add	r3, r2
 8003802:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	461a      	mov	r2, r3
 800380a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	b29b      	uxth	r3, r3
 8003816:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800381a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	441a      	add	r2, r3
 8003830:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800383c:	b29b      	uxth	r3, r3
 800383e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003842:	78db      	ldrb	r3, [r3, #3]
 8003844:	2b01      	cmp	r3, #1
 8003846:	f040 80a2 	bne.w	800398e <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 800384a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800384c:	2200      	movs	r2, #0
 800384e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003852:	7b1b      	ldrb	r3, [r3, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 8093 	beq.w	8003980 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800385a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800385e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003862:	2b00      	cmp	r3, #0
 8003864:	d046      	beq.n	80038f4 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003868:	785b      	ldrb	r3, [r3, #1]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d126      	bne.n	80038bc <PCD_EP_ISR_Handler+0x610>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800387c:	b29b      	uxth	r3, r3
 800387e:	461a      	mov	r2, r3
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	4413      	add	r3, r2
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
 8003886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	011a      	lsls	r2, r3, #4
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	4413      	add	r3, r2
 8003890:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003894:	623b      	str	r3, [r7, #32]
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	b29b      	uxth	r3, r3
 800389c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	801a      	strh	r2, [r3, #0]
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	801a      	strh	r2, [r3, #0]
 80038ba:	e061      	b.n	8003980 <PCD_EP_ISR_Handler+0x6d4>
 80038bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038be:	785b      	ldrb	r3, [r3, #1]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d15d      	bne.n	8003980 <PCD_EP_ISR_Handler+0x6d4>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	461a      	mov	r2, r3
 80038d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d8:	4413      	add	r3, r2
 80038da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	011a      	lsls	r2, r3, #4
 80038e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e4:	4413      	add	r3, r2
 80038e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80038ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ee:	2200      	movs	r2, #0
 80038f0:	801a      	strh	r2, [r3, #0]
 80038f2:	e045      	b.n	8003980 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038fc:	785b      	ldrb	r3, [r3, #1]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d126      	bne.n	8003950 <PCD_EP_ISR_Handler+0x6a4>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	637b      	str	r3, [r7, #52]	; 0x34
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003910:	b29b      	uxth	r3, r3
 8003912:	461a      	mov	r2, r3
 8003914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003916:	4413      	add	r3, r2
 8003918:	637b      	str	r3, [r7, #52]	; 0x34
 800391a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	011a      	lsls	r2, r3, #4
 8003920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003922:	4413      	add	r3, r2
 8003924:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003928:	633b      	str	r3, [r7, #48]	; 0x30
 800392a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392c:	881b      	ldrh	r3, [r3, #0]
 800392e:	b29b      	uxth	r3, r3
 8003930:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003934:	b29a      	uxth	r2, r3
 8003936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003938:	801a      	strh	r2, [r3, #0]
 800393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	b29b      	uxth	r3, r3
 8003940:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003944:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003948:	b29a      	uxth	r2, r3
 800394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394c:	801a      	strh	r2, [r3, #0]
 800394e:	e017      	b.n	8003980 <PCD_EP_ISR_Handler+0x6d4>
 8003950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003952:	785b      	ldrb	r3, [r3, #1]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d113      	bne.n	8003980 <PCD_EP_ISR_Handler+0x6d4>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003960:	b29b      	uxth	r3, r3
 8003962:	461a      	mov	r2, r3
 8003964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003966:	4413      	add	r3, r2
 8003968:	63fb      	str	r3, [r7, #60]	; 0x3c
 800396a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	011a      	lsls	r2, r3, #4
 8003970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003972:	4413      	add	r3, r2
 8003974:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003978:	63bb      	str	r3, [r7, #56]	; 0x38
 800397a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397c:	2200      	movs	r2, #0
 800397e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	4619      	mov	r1, r3
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f007 fcdd 	bl	800b346 <HAL_PCD_DataInStageCallback>
 800398c:	e053      	b.n	8003a36 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800398e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003996:	2b00      	cmp	r3, #0
 8003998:	d146      	bne.n	8003a28 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	461a      	mov	r2, r3
 80039a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	4413      	add	r3, r2
 80039ae:	3302      	adds	r3, #2
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6812      	ldr	r2, [r2, #0]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039bc:	881b      	ldrh	r3, [r3, #0]
 80039be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80039c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d907      	bls.n	80039e2 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80039d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d4:	699a      	ldr	r2, [r3, #24]
 80039d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80039da:	1ad2      	subs	r2, r2, r3
 80039dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039de:	619a      	str	r2, [r3, #24]
 80039e0:	e002      	b.n	80039e8 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80039e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039e4:	2200      	movs	r2, #0
 80039e6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80039e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d106      	bne.n	80039fe <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	4619      	mov	r1, r3
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f007 fca5 	bl	800b346 <HAL_PCD_DataInStageCallback>
 80039fc:	e01b      	b.n	8003a36 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80039fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a00:	695a      	ldr	r2, [r3, #20]
 8003a02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003a06:	441a      	add	r2, r3
 8003a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a0a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a0e:	69da      	ldr	r2, [r3, #28]
 8003a10:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003a14:	441a      	add	r2, r3
 8003a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a18:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a20:	4618      	mov	r0, r3
 8003a22:	f004 f98a 	bl	8007d3a <USB_EPStartXfer>
 8003a26:	e006      	b.n	8003a36 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003a28:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f91b 	bl	8003c6c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	b21b      	sxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f6ff ac37 	blt.w	80032b6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3758      	adds	r7, #88	; 0x58
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b088      	sub	sp, #32
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	60f8      	str	r0, [r7, #12]
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a60:	88fb      	ldrh	r3, [r7, #6]
 8003a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d07e      	beq.n	8003b68 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	461a      	mov	r2, r3
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	4413      	add	r3, r2
 8003a7e:	3302      	adds	r3, #2
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	6812      	ldr	r2, [r2, #0]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a92:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	699a      	ldr	r2, [r3, #24]
 8003a98:	8b7b      	ldrh	r3, [r7, #26]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d306      	bcc.n	8003aac <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	699a      	ldr	r2, [r3, #24]
 8003aa2:	8b7b      	ldrh	r3, [r7, #26]
 8003aa4:	1ad2      	subs	r2, r2, r3
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	619a      	str	r2, [r3, #24]
 8003aaa:	e002      	b.n	8003ab2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d123      	bne.n	8003b02 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad4:	833b      	strh	r3, [r7, #24]
 8003ad6:	8b3b      	ldrh	r3, [r7, #24]
 8003ad8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003adc:	833b      	strh	r3, [r7, #24]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	441a      	add	r2, r3
 8003aec:	8b3b      	ldrh	r3, [r7, #24]
 8003aee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003af2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d01f      	beq.n	8003b4c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	461a      	mov	r2, r3
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b26:	82fb      	strh	r3, [r7, #22]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	441a      	add	r2, r3
 8003b36:	8afb      	ldrh	r3, [r7, #22]
 8003b38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b4c:	8b7b      	ldrh	r3, [r7, #26]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 8087 	beq.w	8003c62 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6818      	ldr	r0, [r3, #0]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	6959      	ldr	r1, [r3, #20]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	891a      	ldrh	r2, [r3, #8]
 8003b60:	8b7b      	ldrh	r3, [r7, #26]
 8003b62:	f005 fe0f 	bl	8009784 <USB_ReadPMA>
 8003b66:	e07c      	b.n	8003c62 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	461a      	mov	r2, r3
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3306      	adds	r3, #6
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	6812      	ldr	r2, [r2, #0]
 8003b84:	4413      	add	r3, r2
 8003b86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b90:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	699a      	ldr	r2, [r3, #24]
 8003b96:	8b7b      	ldrh	r3, [r7, #26]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d306      	bcc.n	8003baa <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	699a      	ldr	r2, [r3, #24]
 8003ba0:	8b7b      	ldrh	r3, [r7, #26]
 8003ba2:	1ad2      	subs	r2, r2, r3
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	619a      	str	r2, [r3, #24]
 8003ba8:	e002      	b.n	8003bb0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2200      	movs	r2, #0
 8003bae:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d123      	bne.n	8003c00 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd2:	83fb      	strh	r3, [r7, #30]
 8003bd4:	8bfb      	ldrh	r3, [r7, #30]
 8003bd6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003bda:	83fb      	strh	r3, [r7, #30]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	441a      	add	r2, r3
 8003bea:	8bfb      	ldrh	r3, [r7, #30]
 8003bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003c00:	88fb      	ldrh	r3, [r7, #6]
 8003c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d11f      	bne.n	8003c4a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c24:	83bb      	strh	r3, [r7, #28]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	441a      	add	r2, r3
 8003c34:	8bbb      	ldrh	r3, [r7, #28]
 8003c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c4a:	8b7b      	ldrh	r3, [r7, #26]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d008      	beq.n	8003c62 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6818      	ldr	r0, [r3, #0]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	6959      	ldr	r1, [r3, #20]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	895a      	ldrh	r2, [r3, #10]
 8003c5c:	8b7b      	ldrh	r3, [r7, #26]
 8003c5e:	f005 fd91 	bl	8009784 <USB_ReadPMA>
    }
  }

  return count;
 8003c62:	8b7b      	ldrh	r3, [r7, #26]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3720      	adds	r7, #32
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b0a4      	sub	sp, #144	; 0x90
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	4613      	mov	r3, r2
 8003c78:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c7a:	88fb      	ldrh	r3, [r7, #6]
 8003c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 81dd 	beq.w	8004040 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	461a      	mov	r2, r3
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	4413      	add	r3, r2
 8003c9a:	3302      	adds	r3, #2
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	6812      	ldr	r2, [r2, #0]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cae:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	699a      	ldr	r2, [r3, #24]
 8003cb6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d907      	bls.n	8003cce <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	699a      	ldr	r2, [r3, #24]
 8003cc2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003cc6:	1ad2      	subs	r2, r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	619a      	str	r2, [r3, #24]
 8003ccc:	e002      	b.n	8003cd4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f040 80b9 	bne.w	8003e50 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	785b      	ldrb	r3, [r3, #1]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d126      	bne.n	8003d34 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfa:	4413      	add	r3, r2
 8003cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	011a      	lsls	r2, r3, #4
 8003d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d06:	4413      	add	r3, r2
 8003d08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1c:	801a      	strh	r2, [r3, #0]
 8003d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d30:	801a      	strh	r2, [r3, #0]
 8003d32:	e01a      	b.n	8003d6a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	785b      	ldrb	r3, [r3, #1]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d116      	bne.n	8003d6a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	637b      	str	r3, [r7, #52]	; 0x34
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d50:	4413      	add	r3, r2
 8003d52:	637b      	str	r3, [r7, #52]	; 0x34
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	011a      	lsls	r2, r3, #4
 8003d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d62:	633b      	str	r3, [r7, #48]	; 0x30
 8003d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d66:	2200      	movs	r2, #0
 8003d68:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	785b      	ldrb	r3, [r3, #1]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d126      	bne.n	8003dc6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	61fb      	str	r3, [r7, #28]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	461a      	mov	r2, r3
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	61fb      	str	r3, [r7, #28]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	011a      	lsls	r2, r3, #4
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d9e:	61bb      	str	r3, [r7, #24]
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	881b      	ldrh	r3, [r3, #0]
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	801a      	strh	r2, [r3, #0]
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	801a      	strh	r2, [r3, #0]
 8003dc4:	e017      	b.n	8003df6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	785b      	ldrb	r3, [r3, #1]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d113      	bne.n	8003df6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	461a      	mov	r2, r3
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	4413      	add	r3, r2
 8003dde:	627b      	str	r3, [r7, #36]	; 0x24
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	011a      	lsls	r2, r3, #4
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	4413      	add	r3, r2
 8003dea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003dee:	623b      	str	r3, [r7, #32]
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	2200      	movs	r2, #0
 8003df4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f007 faa2 	bl	800b346 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e02:	88fb      	ldrh	r3, [r7, #6]
 8003e04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 82fc 	beq.w	8004406 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	461a      	mov	r2, r3
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	881b      	ldrh	r3, [r3, #0]
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e28:	82fb      	strh	r3, [r7, #22]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	441a      	add	r2, r3
 8003e38:	8afb      	ldrh	r3, [r7, #22]
 8003e3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	8013      	strh	r3, [r2, #0]
 8003e4e:	e2da      	b.n	8004406 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e50:	88fb      	ldrh	r3, [r7, #6]
 8003e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d021      	beq.n	8003e9e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e74:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	441a      	add	r2, r3
 8003e86:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	f040 82ae 	bne.w	8004406 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	695a      	ldr	r2, [r3, #20]
 8003eae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003eb2:	441a      	add	r2, r3
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	69da      	ldr	r2, [r3, #28]
 8003ebc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003ec0:	441a      	add	r2, r3
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	6a1a      	ldr	r2, [r3, #32]
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d30b      	bcc.n	8003eea <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	6a1a      	ldr	r2, [r3, #32]
 8003ede:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ee2:	1ad2      	subs	r2, r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	621a      	str	r2, [r3, #32]
 8003ee8:	e017      	b.n	8003f1a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d108      	bne.n	8003f04 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003ef2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003ef6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003f02:	e00a      	b.n	8003f1a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2200      	movs	r2, #0
 8003f18:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	785b      	ldrb	r3, [r3, #1]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d165      	bne.n	8003fee <HAL_PCD_EP_DB_Transmit+0x382>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	461a      	mov	r2, r3
 8003f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f36:	4413      	add	r3, r2
 8003f38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	011a      	lsls	r2, r3, #4
 8003f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f42:	4413      	add	r3, r2
 8003f44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f48:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f58:	801a      	strh	r2, [r3, #0]
 8003f5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f5e:	2b3e      	cmp	r3, #62	; 0x3e
 8003f60:	d91d      	bls.n	8003f9e <HAL_PCD_EP_DB_Transmit+0x332>
 8003f62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f6e:	f003 031f 	and.w	r3, r3, #31
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d102      	bne.n	8003f7c <HAL_PCD_EP_DB_Transmit+0x310>
 8003f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	029b      	lsls	r3, r3, #10
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9a:	801a      	strh	r2, [r3, #0]
 8003f9c:	e044      	b.n	8004028 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10a      	bne.n	8003fbc <HAL_PCD_EP_DB_Transmit+0x350>
 8003fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb8:	801a      	strh	r2, [r3, #0]
 8003fba:	e035      	b.n	8004028 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003fbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fc0:	085b      	lsrs	r3, r3, #1
 8003fc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	029b      	lsls	r3, r3, #10
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fea:	801a      	strh	r2, [r3, #0]
 8003fec:	e01c      	b.n	8004028 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	785b      	ldrb	r3, [r3, #1]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d118      	bne.n	8004028 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	647b      	str	r3, [r7, #68]	; 0x44
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004004:	b29b      	uxth	r3, r3
 8004006:	461a      	mov	r2, r3
 8004008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800400a:	4413      	add	r3, r2
 800400c:	647b      	str	r3, [r7, #68]	; 0x44
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	011a      	lsls	r2, r3, #4
 8004014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004016:	4413      	add	r3, r2
 8004018:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800401c:	643b      	str	r3, [r7, #64]	; 0x40
 800401e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004022:	b29a      	uxth	r2, r3
 8004024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004026:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6818      	ldr	r0, [r3, #0]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	6959      	ldr	r1, [r3, #20]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	891a      	ldrh	r2, [r3, #8]
 8004034:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004038:	b29b      	uxth	r3, r3
 800403a:	f005 fb5d 	bl	80096f8 <USB_WritePMA>
 800403e:	e1e2      	b.n	8004406 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004048:	b29b      	uxth	r3, r3
 800404a:	461a      	mov	r2, r3
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	4413      	add	r3, r2
 8004054:	3306      	adds	r3, #6
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	6812      	ldr	r2, [r2, #0]
 800405c:	4413      	add	r3, r2
 800405e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004068:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	699a      	ldr	r2, [r3, #24]
 8004070:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004074:	429a      	cmp	r2, r3
 8004076:	d307      	bcc.n	8004088 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	699a      	ldr	r2, [r3, #24]
 800407c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004080:	1ad2      	subs	r2, r2, r3
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	619a      	str	r2, [r3, #24]
 8004086:	e002      	b.n	800408e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2200      	movs	r2, #0
 800408c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	2b00      	cmp	r3, #0
 8004094:	f040 80c0 	bne.w	8004218 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	785b      	ldrb	r3, [r3, #1]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d126      	bne.n	80040ee <HAL_PCD_EP_DB_Transmit+0x482>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040b4:	4413      	add	r3, r2
 80040b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	011a      	lsls	r2, r3, #4
 80040be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040c0:	4413      	add	r3, r2
 80040c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80040c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040d6:	801a      	strh	r2, [r3, #0]
 80040d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	b29b      	uxth	r3, r3
 80040de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040ea:	801a      	strh	r2, [r3, #0]
 80040ec:	e01a      	b.n	8004124 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	785b      	ldrb	r3, [r3, #1]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d116      	bne.n	8004124 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	667b      	str	r3, [r7, #100]	; 0x64
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004104:	b29b      	uxth	r3, r3
 8004106:	461a      	mov	r2, r3
 8004108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800410a:	4413      	add	r3, r2
 800410c:	667b      	str	r3, [r7, #100]	; 0x64
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	011a      	lsls	r2, r3, #4
 8004114:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004116:	4413      	add	r3, r2
 8004118:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800411c:	663b      	str	r3, [r7, #96]	; 0x60
 800411e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004120:	2200      	movs	r2, #0
 8004122:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	677b      	str	r3, [r7, #116]	; 0x74
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	785b      	ldrb	r3, [r3, #1]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d12b      	bne.n	800418a <HAL_PCD_EP_DB_Transmit+0x51e>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004140:	b29b      	uxth	r3, r3
 8004142:	461a      	mov	r2, r3
 8004144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004146:	4413      	add	r3, r2
 8004148:	66fb      	str	r3, [r7, #108]	; 0x6c
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	011a      	lsls	r2, r3, #4
 8004150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004152:	4413      	add	r3, r2
 8004154:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004158:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800415c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	b29b      	uxth	r3, r3
 8004164:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004168:	b29a      	uxth	r2, r3
 800416a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800416e:	801a      	strh	r2, [r3, #0]
 8004170:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	b29b      	uxth	r3, r3
 8004178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800417c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004180:	b29a      	uxth	r2, r3
 8004182:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004186:	801a      	strh	r2, [r3, #0]
 8004188:	e017      	b.n	80041ba <HAL_PCD_EP_DB_Transmit+0x54e>
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	785b      	ldrb	r3, [r3, #1]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d113      	bne.n	80041ba <HAL_PCD_EP_DB_Transmit+0x54e>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800419a:	b29b      	uxth	r3, r3
 800419c:	461a      	mov	r2, r3
 800419e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041a0:	4413      	add	r3, r2
 80041a2:	677b      	str	r3, [r7, #116]	; 0x74
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	011a      	lsls	r2, r3, #4
 80041aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ac:	4413      	add	r3, r2
 80041ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041b2:	673b      	str	r3, [r7, #112]	; 0x70
 80041b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041b6:	2200      	movs	r2, #0
 80041b8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	4619      	mov	r1, r3
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f007 f8c0 	bl	800b346 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80041c6:	88fb      	ldrh	r3, [r7, #6]
 80041c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f040 811a 	bne.w	8004406 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ec:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	461a      	mov	r2, r3
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	441a      	add	r2, r3
 80041fe:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800420a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800420e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004212:	b29b      	uxth	r3, r3
 8004214:	8013      	strh	r3, [r2, #0]
 8004216:	e0f6      	b.n	8004406 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004218:	88fb      	ldrh	r3, [r7, #6]
 800421a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d121      	bne.n	8004266 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	b29b      	uxth	r3, r3
 8004234:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	441a      	add	r2, r3
 800424e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004256:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800425a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800425e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004262:	b29b      	uxth	r3, r3
 8004264:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800426c:	2b01      	cmp	r3, #1
 800426e:	f040 80ca 	bne.w	8004406 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	695a      	ldr	r2, [r3, #20]
 8004276:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800427a:	441a      	add	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	69da      	ldr	r2, [r3, #28]
 8004284:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004288:	441a      	add	r2, r3
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	6a1a      	ldr	r2, [r3, #32]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	429a      	cmp	r2, r3
 8004298:	d30b      	bcc.n	80042b2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	6a1a      	ldr	r2, [r3, #32]
 80042a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042aa:	1ad2      	subs	r2, r2, r3
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	621a      	str	r2, [r3, #32]
 80042b0:	e017      	b.n	80042e2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d108      	bne.n	80042cc <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80042ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80042be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80042ca:	e00a      	b.n	80042e2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2200      	movs	r2, #0
 80042d8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	657b      	str	r3, [r7, #84]	; 0x54
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	785b      	ldrb	r3, [r3, #1]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d165      	bne.n	80043bc <HAL_PCD_EP_DB_Transmit+0x750>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042fe:	b29b      	uxth	r3, r3
 8004300:	461a      	mov	r2, r3
 8004302:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004304:	4413      	add	r3, r2
 8004306:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	011a      	lsls	r2, r3, #4
 800430e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004310:	4413      	add	r3, r2
 8004312:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004316:	65bb      	str	r3, [r7, #88]	; 0x58
 8004318:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800431a:	881b      	ldrh	r3, [r3, #0]
 800431c:	b29b      	uxth	r3, r3
 800431e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004322:	b29a      	uxth	r2, r3
 8004324:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004326:	801a      	strh	r2, [r3, #0]
 8004328:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800432c:	2b3e      	cmp	r3, #62	; 0x3e
 800432e:	d91d      	bls.n	800436c <HAL_PCD_EP_DB_Transmit+0x700>
 8004330:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004334:	095b      	lsrs	r3, r3, #5
 8004336:	66bb      	str	r3, [r7, #104]	; 0x68
 8004338:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	2b00      	cmp	r3, #0
 8004342:	d102      	bne.n	800434a <HAL_PCD_EP_DB_Transmit+0x6de>
 8004344:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004346:	3b01      	subs	r3, #1
 8004348:	66bb      	str	r3, [r7, #104]	; 0x68
 800434a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	b29a      	uxth	r2, r3
 8004350:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004352:	b29b      	uxth	r3, r3
 8004354:	029b      	lsls	r3, r3, #10
 8004356:	b29b      	uxth	r3, r3
 8004358:	4313      	orrs	r3, r2
 800435a:	b29b      	uxth	r3, r3
 800435c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004364:	b29a      	uxth	r2, r3
 8004366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004368:	801a      	strh	r2, [r3, #0]
 800436a:	e041      	b.n	80043f0 <HAL_PCD_EP_DB_Transmit+0x784>
 800436c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10a      	bne.n	800438a <HAL_PCD_EP_DB_Transmit+0x71e>
 8004374:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	b29b      	uxth	r3, r3
 800437a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800437e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004382:	b29a      	uxth	r2, r3
 8004384:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004386:	801a      	strh	r2, [r3, #0]
 8004388:	e032      	b.n	80043f0 <HAL_PCD_EP_DB_Transmit+0x784>
 800438a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800438e:	085b      	lsrs	r3, r3, #1
 8004390:	66bb      	str	r3, [r7, #104]	; 0x68
 8004392:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <HAL_PCD_EP_DB_Transmit+0x738>
 800439e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043a0:	3301      	adds	r3, #1
 80043a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80043a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	029b      	lsls	r3, r3, #10
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	4313      	orrs	r3, r2
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043b8:	801a      	strh	r2, [r3, #0]
 80043ba:	e019      	b.n	80043f0 <HAL_PCD_EP_DB_Transmit+0x784>
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	785b      	ldrb	r3, [r3, #1]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d115      	bne.n	80043f0 <HAL_PCD_EP_DB_Transmit+0x784>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	461a      	mov	r2, r3
 80043d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043d2:	4413      	add	r3, r2
 80043d4:	657b      	str	r3, [r7, #84]	; 0x54
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	011a      	lsls	r2, r3, #4
 80043dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043de:	4413      	add	r3, r2
 80043e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043e4:	653b      	str	r3, [r7, #80]	; 0x50
 80043e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043ee:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6818      	ldr	r0, [r3, #0]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	6959      	ldr	r1, [r3, #20]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	895a      	ldrh	r2, [r3, #10]
 80043fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004400:	b29b      	uxth	r3, r3
 8004402:	f005 f979 	bl	80096f8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	461a      	mov	r2, r3
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	b29b      	uxth	r3, r3
 8004418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800441c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004420:	82bb      	strh	r3, [r7, #20]
 8004422:	8abb      	ldrh	r3, [r7, #20]
 8004424:	f083 0310 	eor.w	r3, r3, #16
 8004428:	82bb      	strh	r3, [r7, #20]
 800442a:	8abb      	ldrh	r3, [r7, #20]
 800442c:	f083 0320 	eor.w	r3, r3, #32
 8004430:	82bb      	strh	r3, [r7, #20]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	461a      	mov	r2, r3
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	441a      	add	r2, r3
 8004440:	8abb      	ldrh	r3, [r7, #20]
 8004442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800444a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800444e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004452:	b29b      	uxth	r3, r3
 8004454:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3790      	adds	r7, #144	; 0x90
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	607b      	str	r3, [r7, #4]
 800446a:	460b      	mov	r3, r1
 800446c:	817b      	strh	r3, [r7, #10]
 800446e:	4613      	mov	r3, r2
 8004470:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004472:	897b      	ldrh	r3, [r7, #10]
 8004474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00b      	beq.n	8004496 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800447e:	897b      	ldrh	r3, [r7, #10]
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	4413      	add	r3, r2
 8004492:	617b      	str	r3, [r7, #20]
 8004494:	e009      	b.n	80044aa <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004496:	897a      	ldrh	r2, [r7, #10]
 8004498:	4613      	mov	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4413      	add	r3, r2
 80044a8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80044aa:	893b      	ldrh	r3, [r7, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d107      	bne.n	80044c0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2200      	movs	r2, #0
 80044b4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	80da      	strh	r2, [r3, #6]
 80044be:	e00b      	b.n	80044d8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	2201      	movs	r2, #1
 80044c4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	0c1b      	lsrs	r3, r3, #16
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	371c      	adds	r7, #28
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
	...

080044e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044f8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d102      	bne.n	800450e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	f001 b823 	b.w	8005554 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800450e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004512:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 817d 	beq.w	800481e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004524:	4bbc      	ldr	r3, [pc, #752]	; (8004818 <HAL_RCC_OscConfig+0x330>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f003 030c 	and.w	r3, r3, #12
 800452c:	2b04      	cmp	r3, #4
 800452e:	d00c      	beq.n	800454a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004530:	4bb9      	ldr	r3, [pc, #740]	; (8004818 <HAL_RCC_OscConfig+0x330>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f003 030c 	and.w	r3, r3, #12
 8004538:	2b08      	cmp	r3, #8
 800453a:	d15c      	bne.n	80045f6 <HAL_RCC_OscConfig+0x10e>
 800453c:	4bb6      	ldr	r3, [pc, #728]	; (8004818 <HAL_RCC_OscConfig+0x330>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004548:	d155      	bne.n	80045f6 <HAL_RCC_OscConfig+0x10e>
 800454a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800454e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004552:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004556:	fa93 f3a3 	rbit	r3, r3
 800455a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800455e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004562:	fab3 f383 	clz	r3, r3
 8004566:	b2db      	uxtb	r3, r3
 8004568:	095b      	lsrs	r3, r3, #5
 800456a:	b2db      	uxtb	r3, r3
 800456c:	f043 0301 	orr.w	r3, r3, #1
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b01      	cmp	r3, #1
 8004574:	d102      	bne.n	800457c <HAL_RCC_OscConfig+0x94>
 8004576:	4ba8      	ldr	r3, [pc, #672]	; (8004818 <HAL_RCC_OscConfig+0x330>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	e015      	b.n	80045a8 <HAL_RCC_OscConfig+0xc0>
 800457c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004580:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004584:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004588:	fa93 f3a3 	rbit	r3, r3
 800458c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004590:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004594:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004598:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800459c:	fa93 f3a3 	rbit	r3, r3
 80045a0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80045a4:	4b9c      	ldr	r3, [pc, #624]	; (8004818 <HAL_RCC_OscConfig+0x330>)
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045ac:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80045b0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80045b4:	fa92 f2a2 	rbit	r2, r2
 80045b8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80045bc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80045c0:	fab2 f282 	clz	r2, r2
 80045c4:	b2d2      	uxtb	r2, r2
 80045c6:	f042 0220 	orr.w	r2, r2, #32
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	f002 021f 	and.w	r2, r2, #31
 80045d0:	2101      	movs	r1, #1
 80045d2:	fa01 f202 	lsl.w	r2, r1, r2
 80045d6:	4013      	ands	r3, r2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 811f 	beq.w	800481c <HAL_RCC_OscConfig+0x334>
 80045de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f040 8116 	bne.w	800481c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	f000 bfaf 	b.w	8005554 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004606:	d106      	bne.n	8004616 <HAL_RCC_OscConfig+0x12e>
 8004608:	4b83      	ldr	r3, [pc, #524]	; (8004818 <HAL_RCC_OscConfig+0x330>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a82      	ldr	r2, [pc, #520]	; (8004818 <HAL_RCC_OscConfig+0x330>)
 800460e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	e036      	b.n	8004684 <HAL_RCC_OscConfig+0x19c>
 8004616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800461a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10c      	bne.n	8004640 <HAL_RCC_OscConfig+0x158>
 8004626:	4b7c      	ldr	r3, [pc, #496]	; (8004818 <HAL_RCC_OscConfig+0x330>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a7b      	ldr	r2, [pc, #492]	; (8004818 <HAL_RCC_OscConfig+0x330>)
 800462c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	4b79      	ldr	r3, [pc, #484]	; (8004818 <HAL_RCC_OscConfig+0x330>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a78      	ldr	r2, [pc, #480]	; (8004818 <HAL_RCC_OscConfig+0x330>)
 8004638:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800463c:	6013      	str	r3, [r2, #0]
 800463e:	e021      	b.n	8004684 <HAL_RCC_OscConfig+0x19c>
 8004640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004644:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004650:	d10c      	bne.n	800466c <HAL_RCC_OscConfig+0x184>
 8004652:	4b71      	ldr	r3, [pc, #452]	; (8004818 <HAL_RCC_OscConfig+0x330>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a70      	ldr	r2, [pc, #448]	; (8004818 <HAL_RCC_OscConfig+0x330>)
 8004658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	4b6e      	ldr	r3, [pc, #440]	; (8004818 <HAL_RCC_OscConfig+0x330>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a6d      	ldr	r2, [pc, #436]	; (8004818 <HAL_RCC_OscConfig+0x330>)
 8004664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	e00b      	b.n	8004684 <HAL_RCC_OscConfig+0x19c>
 800466c:	4b6a      	ldr	r3, [pc, #424]	; (8004818 <HAL_RCC_OscConfig+0x330>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a69      	ldr	r2, [pc, #420]	; (8004818 <HAL_RCC_OscConfig+0x330>)
 8004672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	4b67      	ldr	r3, [pc, #412]	; (8004818 <HAL_RCC_OscConfig+0x330>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a66      	ldr	r2, [pc, #408]	; (8004818 <HAL_RCC_OscConfig+0x330>)
 800467e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004682:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004684:	4b64      	ldr	r3, [pc, #400]	; (8004818 <HAL_RCC_OscConfig+0x330>)
 8004686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004688:	f023 020f 	bic.w	r2, r3, #15
 800468c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004690:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	495f      	ldr	r1, [pc, #380]	; (8004818 <HAL_RCC_OscConfig+0x330>)
 800469a:	4313      	orrs	r3, r2
 800469c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800469e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d059      	beq.n	8004762 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ae:	f7fc fab3 	bl	8000c18 <HAL_GetTick>
 80046b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b6:	e00a      	b.n	80046ce <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046b8:	f7fc faae 	bl	8000c18 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b64      	cmp	r3, #100	; 0x64
 80046c6:	d902      	bls.n	80046ce <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	f000 bf43 	b.w	8005554 <HAL_RCC_OscConfig+0x106c>
 80046ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046d2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80046da:	fa93 f3a3 	rbit	r3, r3
 80046de:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80046e2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e6:	fab3 f383 	clz	r3, r3
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	f043 0301 	orr.w	r3, r3, #1
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d102      	bne.n	8004700 <HAL_RCC_OscConfig+0x218>
 80046fa:	4b47      	ldr	r3, [pc, #284]	; (8004818 <HAL_RCC_OscConfig+0x330>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	e015      	b.n	800472c <HAL_RCC_OscConfig+0x244>
 8004700:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004704:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004708:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800470c:	fa93 f3a3 	rbit	r3, r3
 8004710:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004714:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004718:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800471c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004720:	fa93 f3a3 	rbit	r3, r3
 8004724:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004728:	4b3b      	ldr	r3, [pc, #236]	; (8004818 <HAL_RCC_OscConfig+0x330>)
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004730:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004734:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004738:	fa92 f2a2 	rbit	r2, r2
 800473c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004740:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004744:	fab2 f282 	clz	r2, r2
 8004748:	b2d2      	uxtb	r2, r2
 800474a:	f042 0220 	orr.w	r2, r2, #32
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	f002 021f 	and.w	r2, r2, #31
 8004754:	2101      	movs	r1, #1
 8004756:	fa01 f202 	lsl.w	r2, r1, r2
 800475a:	4013      	ands	r3, r2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0ab      	beq.n	80046b8 <HAL_RCC_OscConfig+0x1d0>
 8004760:	e05d      	b.n	800481e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004762:	f7fc fa59 	bl	8000c18 <HAL_GetTick>
 8004766:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800476a:	e00a      	b.n	8004782 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800476c:	f7fc fa54 	bl	8000c18 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b64      	cmp	r3, #100	; 0x64
 800477a:	d902      	bls.n	8004782 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	f000 bee9 	b.w	8005554 <HAL_RCC_OscConfig+0x106c>
 8004782:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004786:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800478e:	fa93 f3a3 	rbit	r3, r3
 8004792:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004796:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800479a:	fab3 f383 	clz	r3, r3
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	095b      	lsrs	r3, r3, #5
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	f043 0301 	orr.w	r3, r3, #1
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d102      	bne.n	80047b4 <HAL_RCC_OscConfig+0x2cc>
 80047ae:	4b1a      	ldr	r3, [pc, #104]	; (8004818 <HAL_RCC_OscConfig+0x330>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	e015      	b.n	80047e0 <HAL_RCC_OscConfig+0x2f8>
 80047b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047b8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047bc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80047c0:	fa93 f3a3 	rbit	r3, r3
 80047c4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80047c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047cc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80047d0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80047d4:	fa93 f3a3 	rbit	r3, r3
 80047d8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80047dc:	4b0e      	ldr	r3, [pc, #56]	; (8004818 <HAL_RCC_OscConfig+0x330>)
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047e4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80047e8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80047ec:	fa92 f2a2 	rbit	r2, r2
 80047f0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80047f4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80047f8:	fab2 f282 	clz	r2, r2
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	f042 0220 	orr.w	r2, r2, #32
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	f002 021f 	and.w	r2, r2, #31
 8004808:	2101      	movs	r1, #1
 800480a:	fa01 f202 	lsl.w	r2, r1, r2
 800480e:	4013      	ands	r3, r2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1ab      	bne.n	800476c <HAL_RCC_OscConfig+0x284>
 8004814:	e003      	b.n	800481e <HAL_RCC_OscConfig+0x336>
 8004816:	bf00      	nop
 8004818:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800481c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800481e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004822:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 817d 	beq.w	8004b2e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004834:	4ba6      	ldr	r3, [pc, #664]	; (8004ad0 <HAL_RCC_OscConfig+0x5e8>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 030c 	and.w	r3, r3, #12
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00b      	beq.n	8004858 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004840:	4ba3      	ldr	r3, [pc, #652]	; (8004ad0 <HAL_RCC_OscConfig+0x5e8>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f003 030c 	and.w	r3, r3, #12
 8004848:	2b08      	cmp	r3, #8
 800484a:	d172      	bne.n	8004932 <HAL_RCC_OscConfig+0x44a>
 800484c:	4ba0      	ldr	r3, [pc, #640]	; (8004ad0 <HAL_RCC_OscConfig+0x5e8>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d16c      	bne.n	8004932 <HAL_RCC_OscConfig+0x44a>
 8004858:	2302      	movs	r3, #2
 800485a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004862:	fa93 f3a3 	rbit	r3, r3
 8004866:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800486a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800486e:	fab3 f383 	clz	r3, r3
 8004872:	b2db      	uxtb	r3, r3
 8004874:	095b      	lsrs	r3, r3, #5
 8004876:	b2db      	uxtb	r3, r3
 8004878:	f043 0301 	orr.w	r3, r3, #1
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b01      	cmp	r3, #1
 8004880:	d102      	bne.n	8004888 <HAL_RCC_OscConfig+0x3a0>
 8004882:	4b93      	ldr	r3, [pc, #588]	; (8004ad0 <HAL_RCC_OscConfig+0x5e8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	e013      	b.n	80048b0 <HAL_RCC_OscConfig+0x3c8>
 8004888:	2302      	movs	r3, #2
 800488a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004892:	fa93 f3a3 	rbit	r3, r3
 8004896:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800489a:	2302      	movs	r3, #2
 800489c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80048a0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80048a4:	fa93 f3a3 	rbit	r3, r3
 80048a8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80048ac:	4b88      	ldr	r3, [pc, #544]	; (8004ad0 <HAL_RCC_OscConfig+0x5e8>)
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	2202      	movs	r2, #2
 80048b2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80048b6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80048ba:	fa92 f2a2 	rbit	r2, r2
 80048be:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80048c2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80048c6:	fab2 f282 	clz	r2, r2
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	f042 0220 	orr.w	r2, r2, #32
 80048d0:	b2d2      	uxtb	r2, r2
 80048d2:	f002 021f 	and.w	r2, r2, #31
 80048d6:	2101      	movs	r1, #1
 80048d8:	fa01 f202 	lsl.w	r2, r1, r2
 80048dc:	4013      	ands	r3, r2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <HAL_RCC_OscConfig+0x410>
 80048e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d002      	beq.n	80048f8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	f000 be2e 	b.w	8005554 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048f8:	4b75      	ldr	r3, [pc, #468]	; (8004ad0 <HAL_RCC_OscConfig+0x5e8>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004904:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	21f8      	movs	r1, #248	; 0xf8
 800490e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004912:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004916:	fa91 f1a1 	rbit	r1, r1
 800491a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800491e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004922:	fab1 f181 	clz	r1, r1
 8004926:	b2c9      	uxtb	r1, r1
 8004928:	408b      	lsls	r3, r1
 800492a:	4969      	ldr	r1, [pc, #420]	; (8004ad0 <HAL_RCC_OscConfig+0x5e8>)
 800492c:	4313      	orrs	r3, r2
 800492e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004930:	e0fd      	b.n	8004b2e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004936:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 8088 	beq.w	8004a54 <HAL_RCC_OscConfig+0x56c>
 8004944:	2301      	movs	r3, #1
 8004946:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800494e:	fa93 f3a3 	rbit	r3, r3
 8004952:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004956:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800495a:	fab3 f383 	clz	r3, r3
 800495e:	b2db      	uxtb	r3, r3
 8004960:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004964:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	461a      	mov	r2, r3
 800496c:	2301      	movs	r3, #1
 800496e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004970:	f7fc f952 	bl	8000c18 <HAL_GetTick>
 8004974:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004978:	e00a      	b.n	8004990 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800497a:	f7fc f94d 	bl	8000c18 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d902      	bls.n	8004990 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	f000 bde2 	b.w	8005554 <HAL_RCC_OscConfig+0x106c>
 8004990:	2302      	movs	r3, #2
 8004992:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004996:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800499a:	fa93 f3a3 	rbit	r3, r3
 800499e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80049a2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a6:	fab3 f383 	clz	r3, r3
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	095b      	lsrs	r3, r3, #5
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	f043 0301 	orr.w	r3, r3, #1
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d102      	bne.n	80049c0 <HAL_RCC_OscConfig+0x4d8>
 80049ba:	4b45      	ldr	r3, [pc, #276]	; (8004ad0 <HAL_RCC_OscConfig+0x5e8>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	e013      	b.n	80049e8 <HAL_RCC_OscConfig+0x500>
 80049c0:	2302      	movs	r3, #2
 80049c2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80049ca:	fa93 f3a3 	rbit	r3, r3
 80049ce:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80049d2:	2302      	movs	r3, #2
 80049d4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80049d8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80049dc:	fa93 f3a3 	rbit	r3, r3
 80049e0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80049e4:	4b3a      	ldr	r3, [pc, #232]	; (8004ad0 <HAL_RCC_OscConfig+0x5e8>)
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	2202      	movs	r2, #2
 80049ea:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80049ee:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80049f2:	fa92 f2a2 	rbit	r2, r2
 80049f6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80049fa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80049fe:	fab2 f282 	clz	r2, r2
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	f042 0220 	orr.w	r2, r2, #32
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	f002 021f 	and.w	r2, r2, #31
 8004a0e:	2101      	movs	r1, #1
 8004a10:	fa01 f202 	lsl.w	r2, r1, r2
 8004a14:	4013      	ands	r3, r2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0af      	beq.n	800497a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a1a:	4b2d      	ldr	r3, [pc, #180]	; (8004ad0 <HAL_RCC_OscConfig+0x5e8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	21f8      	movs	r1, #248	; 0xf8
 8004a30:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a34:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004a38:	fa91 f1a1 	rbit	r1, r1
 8004a3c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004a40:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004a44:	fab1 f181 	clz	r1, r1
 8004a48:	b2c9      	uxtb	r1, r1
 8004a4a:	408b      	lsls	r3, r1
 8004a4c:	4920      	ldr	r1, [pc, #128]	; (8004ad0 <HAL_RCC_OscConfig+0x5e8>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	600b      	str	r3, [r1, #0]
 8004a52:	e06c      	b.n	8004b2e <HAL_RCC_OscConfig+0x646>
 8004a54:	2301      	movs	r3, #1
 8004a56:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004a5e:	fa93 f3a3 	rbit	r3, r3
 8004a62:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004a66:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a6a:	fab3 f383 	clz	r3, r3
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a80:	f7fc f8ca 	bl	8000c18 <HAL_GetTick>
 8004a84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a88:	e00a      	b.n	8004aa0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a8a:	f7fc f8c5 	bl	8000c18 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d902      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	f000 bd5a 	b.w	8005554 <HAL_RCC_OscConfig+0x106c>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004aaa:	fa93 f3a3 	rbit	r3, r3
 8004aae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004ab2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ab6:	fab3 f383 	clz	r3, r3
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	095b      	lsrs	r3, r3, #5
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	f043 0301 	orr.w	r3, r3, #1
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d104      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x5ec>
 8004aca:	4b01      	ldr	r3, [pc, #4]	; (8004ad0 <HAL_RCC_OscConfig+0x5e8>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	e015      	b.n	8004afc <HAL_RCC_OscConfig+0x614>
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ada:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ade:	fa93 f3a3 	rbit	r3, r3
 8004ae2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004aec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004af0:	fa93 f3a3 	rbit	r3, r3
 8004af4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004af8:	4bc8      	ldr	r3, [pc, #800]	; (8004e1c <HAL_RCC_OscConfig+0x934>)
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	2202      	movs	r2, #2
 8004afe:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004b02:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004b06:	fa92 f2a2 	rbit	r2, r2
 8004b0a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004b0e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004b12:	fab2 f282 	clz	r2, r2
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	f042 0220 	orr.w	r2, r2, #32
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	f002 021f 	and.w	r2, r2, #31
 8004b22:	2101      	movs	r1, #1
 8004b24:	fa01 f202 	lsl.w	r2, r1, r2
 8004b28:	4013      	ands	r3, r2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1ad      	bne.n	8004a8a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0308 	and.w	r3, r3, #8
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 8110 	beq.w	8004d64 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d079      	beq.n	8004c48 <HAL_RCC_OscConfig+0x760>
 8004b54:	2301      	movs	r3, #1
 8004b56:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004b5e:	fa93 f3a3 	rbit	r3, r3
 8004b62:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b6a:	fab3 f383 	clz	r3, r3
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	461a      	mov	r2, r3
 8004b72:	4bab      	ldr	r3, [pc, #684]	; (8004e20 <HAL_RCC_OscConfig+0x938>)
 8004b74:	4413      	add	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	461a      	mov	r2, r3
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b7e:	f7fc f84b 	bl	8000c18 <HAL_GetTick>
 8004b82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b86:	e00a      	b.n	8004b9e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b88:	f7fc f846 	bl	8000c18 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d902      	bls.n	8004b9e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	f000 bcdb 	b.w	8005554 <HAL_RCC_OscConfig+0x106c>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ba8:	fa93 f3a3 	rbit	r3, r3
 8004bac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bb4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004bb8:	2202      	movs	r2, #2
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bc0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	fa93 f2a3 	rbit	r2, r3
 8004bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bdc:	2202      	movs	r2, #2
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004be4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	fa93 f2a3 	rbit	r2, r3
 8004bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bf2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004bf6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bf8:	4b88      	ldr	r3, [pc, #544]	; (8004e1c <HAL_RCC_OscConfig+0x934>)
 8004bfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c00:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004c04:	2102      	movs	r1, #2
 8004c06:	6019      	str	r1, [r3, #0]
 8004c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c0c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	fa93 f1a3 	rbit	r1, r3
 8004c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c1a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004c1e:	6019      	str	r1, [r3, #0]
  return result;
 8004c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c24:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	fab3 f383 	clz	r3, r3
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	f003 031f 	and.w	r3, r3, #31
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c40:	4013      	ands	r3, r2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0a0      	beq.n	8004b88 <HAL_RCC_OscConfig+0x6a0>
 8004c46:	e08d      	b.n	8004d64 <HAL_RCC_OscConfig+0x87c>
 8004c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c4c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c50:	2201      	movs	r2, #1
 8004c52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c58:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	fa93 f2a3 	rbit	r2, r3
 8004c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c66:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004c6a:	601a      	str	r2, [r3, #0]
  return result;
 8004c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c70:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004c74:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c76:	fab3 f383 	clz	r3, r3
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	4b68      	ldr	r3, [pc, #416]	; (8004e20 <HAL_RCC_OscConfig+0x938>)
 8004c80:	4413      	add	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	461a      	mov	r2, r3
 8004c86:	2300      	movs	r3, #0
 8004c88:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c8a:	f7fb ffc5 	bl	8000c18 <HAL_GetTick>
 8004c8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c92:	e00a      	b.n	8004caa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c94:	f7fb ffc0 	bl	8000c18 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d902      	bls.n	8004caa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	f000 bc55 	b.w	8005554 <HAL_RCC_OscConfig+0x106c>
 8004caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	fa93 f2a3 	rbit	r2, r3
 8004cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cc8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cd2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cde:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	fa93 f2a3 	rbit	r2, r3
 8004ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	fa93 f2a3 	rbit	r2, r3
 8004d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d10:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004d14:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d16:	4b41      	ldr	r3, [pc, #260]	; (8004e1c <HAL_RCC_OscConfig+0x934>)
 8004d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d1e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004d22:	2102      	movs	r1, #2
 8004d24:	6019      	str	r1, [r3, #0]
 8004d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d2a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	fa93 f1a3 	rbit	r1, r3
 8004d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d38:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004d3c:	6019      	str	r1, [r3, #0]
  return result;
 8004d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d42:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	fab3 f383 	clz	r3, r3
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	f003 031f 	and.w	r3, r3, #31
 8004d58:	2101      	movs	r1, #1
 8004d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5e:	4013      	ands	r3, r2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d197      	bne.n	8004c94 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0304 	and.w	r3, r3, #4
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 81a1 	beq.w	80050bc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d80:	4b26      	ldr	r3, [pc, #152]	; (8004e1c <HAL_RCC_OscConfig+0x934>)
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d116      	bne.n	8004dba <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d8c:	4b23      	ldr	r3, [pc, #140]	; (8004e1c <HAL_RCC_OscConfig+0x934>)
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	4a22      	ldr	r2, [pc, #136]	; (8004e1c <HAL_RCC_OscConfig+0x934>)
 8004d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d96:	61d3      	str	r3, [r2, #28]
 8004d98:	4b20      	ldr	r3, [pc, #128]	; (8004e1c <HAL_RCC_OscConfig+0x934>)
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004da4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dae:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004db2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004db4:	2301      	movs	r3, #1
 8004db6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dba:	4b1a      	ldr	r3, [pc, #104]	; (8004e24 <HAL_RCC_OscConfig+0x93c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d11a      	bne.n	8004dfc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dc6:	4b17      	ldr	r3, [pc, #92]	; (8004e24 <HAL_RCC_OscConfig+0x93c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a16      	ldr	r2, [pc, #88]	; (8004e24 <HAL_RCC_OscConfig+0x93c>)
 8004dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dd0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dd2:	f7fb ff21 	bl	8000c18 <HAL_GetTick>
 8004dd6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dda:	e009      	b.n	8004df0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ddc:	f7fb ff1c 	bl	8000c18 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b64      	cmp	r3, #100	; 0x64
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e3b1      	b.n	8005554 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df0:	4b0c      	ldr	r3, [pc, #48]	; (8004e24 <HAL_RCC_OscConfig+0x93c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0ef      	beq.n	8004ddc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d10d      	bne.n	8004e28 <HAL_RCC_OscConfig+0x940>
 8004e0c:	4b03      	ldr	r3, [pc, #12]	; (8004e1c <HAL_RCC_OscConfig+0x934>)
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	4a02      	ldr	r2, [pc, #8]	; (8004e1c <HAL_RCC_OscConfig+0x934>)
 8004e12:	f043 0301 	orr.w	r3, r3, #1
 8004e16:	6213      	str	r3, [r2, #32]
 8004e18:	e03c      	b.n	8004e94 <HAL_RCC_OscConfig+0x9ac>
 8004e1a:	bf00      	nop
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	10908120 	.word	0x10908120
 8004e24:	40007000 	.word	0x40007000
 8004e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10c      	bne.n	8004e52 <HAL_RCC_OscConfig+0x96a>
 8004e38:	4bc1      	ldr	r3, [pc, #772]	; (8005140 <HAL_RCC_OscConfig+0xc58>)
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	4ac0      	ldr	r2, [pc, #768]	; (8005140 <HAL_RCC_OscConfig+0xc58>)
 8004e3e:	f023 0301 	bic.w	r3, r3, #1
 8004e42:	6213      	str	r3, [r2, #32]
 8004e44:	4bbe      	ldr	r3, [pc, #760]	; (8005140 <HAL_RCC_OscConfig+0xc58>)
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	4abd      	ldr	r2, [pc, #756]	; (8005140 <HAL_RCC_OscConfig+0xc58>)
 8004e4a:	f023 0304 	bic.w	r3, r3, #4
 8004e4e:	6213      	str	r3, [r2, #32]
 8004e50:	e020      	b.n	8004e94 <HAL_RCC_OscConfig+0x9ac>
 8004e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	2b05      	cmp	r3, #5
 8004e60:	d10c      	bne.n	8004e7c <HAL_RCC_OscConfig+0x994>
 8004e62:	4bb7      	ldr	r3, [pc, #732]	; (8005140 <HAL_RCC_OscConfig+0xc58>)
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	4ab6      	ldr	r2, [pc, #728]	; (8005140 <HAL_RCC_OscConfig+0xc58>)
 8004e68:	f043 0304 	orr.w	r3, r3, #4
 8004e6c:	6213      	str	r3, [r2, #32]
 8004e6e:	4bb4      	ldr	r3, [pc, #720]	; (8005140 <HAL_RCC_OscConfig+0xc58>)
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	4ab3      	ldr	r2, [pc, #716]	; (8005140 <HAL_RCC_OscConfig+0xc58>)
 8004e74:	f043 0301 	orr.w	r3, r3, #1
 8004e78:	6213      	str	r3, [r2, #32]
 8004e7a:	e00b      	b.n	8004e94 <HAL_RCC_OscConfig+0x9ac>
 8004e7c:	4bb0      	ldr	r3, [pc, #704]	; (8005140 <HAL_RCC_OscConfig+0xc58>)
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	4aaf      	ldr	r2, [pc, #700]	; (8005140 <HAL_RCC_OscConfig+0xc58>)
 8004e82:	f023 0301 	bic.w	r3, r3, #1
 8004e86:	6213      	str	r3, [r2, #32]
 8004e88:	4bad      	ldr	r3, [pc, #692]	; (8005140 <HAL_RCC_OscConfig+0xc58>)
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	4aac      	ldr	r2, [pc, #688]	; (8005140 <HAL_RCC_OscConfig+0xc58>)
 8004e8e:	f023 0304 	bic.w	r3, r3, #4
 8004e92:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 8081 	beq.w	8004fa8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ea6:	f7fb feb7 	bl	8000c18 <HAL_GetTick>
 8004eaa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eae:	e00b      	b.n	8004ec8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eb0:	f7fb feb2 	bl	8000c18 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e345      	b.n	8005554 <HAL_RCC_OscConfig+0x106c>
 8004ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ecc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ed8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	fa93 f2a3 	rbit	r2, r3
 8004ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ef0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004efc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	fa93 f2a3 	rbit	r2, r3
 8004f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f0a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004f0e:	601a      	str	r2, [r3, #0]
  return result;
 8004f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f14:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004f18:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f1a:	fab3 f383 	clz	r3, r3
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	095b      	lsrs	r3, r3, #5
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	f043 0302 	orr.w	r3, r3, #2
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d102      	bne.n	8004f34 <HAL_RCC_OscConfig+0xa4c>
 8004f2e:	4b84      	ldr	r3, [pc, #528]	; (8005140 <HAL_RCC_OscConfig+0xc58>)
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	e013      	b.n	8004f5c <HAL_RCC_OscConfig+0xa74>
 8004f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f38:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f44:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	fa93 f2a3 	rbit	r2, r3
 8004f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f52:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	4b79      	ldr	r3, [pc, #484]	; (8005140 <HAL_RCC_OscConfig+0xc58>)
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f60:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004f64:	2102      	movs	r1, #2
 8004f66:	6011      	str	r1, [r2, #0]
 8004f68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f6c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004f70:	6812      	ldr	r2, [r2, #0]
 8004f72:	fa92 f1a2 	rbit	r1, r2
 8004f76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f7a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004f7e:	6011      	str	r1, [r2, #0]
  return result;
 8004f80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f84:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004f88:	6812      	ldr	r2, [r2, #0]
 8004f8a:	fab2 f282 	clz	r2, r2
 8004f8e:	b2d2      	uxtb	r2, r2
 8004f90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	f002 021f 	and.w	r2, r2, #31
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d084      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x9c8>
 8004fa6:	e07f      	b.n	80050a8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fa8:	f7fb fe36 	bl	8000c18 <HAL_GetTick>
 8004fac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fb0:	e00b      	b.n	8004fca <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fb2:	f7fb fe31 	bl	8000c18 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e2c4      	b.n	8005554 <HAL_RCC_OscConfig+0x106c>
 8004fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fce:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fda:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	fa93 f2a3 	rbit	r2, r3
 8004fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fe8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ff2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ffe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	fa93 f2a3 	rbit	r2, r3
 8005008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800500c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005010:	601a      	str	r2, [r3, #0]
  return result;
 8005012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005016:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800501a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800501c:	fab3 f383 	clz	r3, r3
 8005020:	b2db      	uxtb	r3, r3
 8005022:	095b      	lsrs	r3, r3, #5
 8005024:	b2db      	uxtb	r3, r3
 8005026:	f043 0302 	orr.w	r3, r3, #2
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d102      	bne.n	8005036 <HAL_RCC_OscConfig+0xb4e>
 8005030:	4b43      	ldr	r3, [pc, #268]	; (8005140 <HAL_RCC_OscConfig+0xc58>)
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	e013      	b.n	800505e <HAL_RCC_OscConfig+0xb76>
 8005036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800503a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800503e:	2202      	movs	r2, #2
 8005040:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005046:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	fa93 f2a3 	rbit	r2, r3
 8005050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005054:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	4b39      	ldr	r3, [pc, #228]	; (8005140 <HAL_RCC_OscConfig+0xc58>)
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005062:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005066:	2102      	movs	r1, #2
 8005068:	6011      	str	r1, [r2, #0]
 800506a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800506e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005072:	6812      	ldr	r2, [r2, #0]
 8005074:	fa92 f1a2 	rbit	r1, r2
 8005078:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800507c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005080:	6011      	str	r1, [r2, #0]
  return result;
 8005082:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005086:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800508a:	6812      	ldr	r2, [r2, #0]
 800508c:	fab2 f282 	clz	r2, r2
 8005090:	b2d2      	uxtb	r2, r2
 8005092:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	f002 021f 	and.w	r2, r2, #31
 800509c:	2101      	movs	r1, #1
 800509e:	fa01 f202 	lsl.w	r2, r1, r2
 80050a2:	4013      	ands	r3, r2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d184      	bne.n	8004fb2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80050a8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d105      	bne.n	80050bc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050b0:	4b23      	ldr	r3, [pc, #140]	; (8005140 <HAL_RCC_OscConfig+0xc58>)
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	4a22      	ldr	r2, [pc, #136]	; (8005140 <HAL_RCC_OscConfig+0xc58>)
 80050b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 8242 	beq.w	8005552 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050ce:	4b1c      	ldr	r3, [pc, #112]	; (8005140 <HAL_RCC_OscConfig+0xc58>)
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f003 030c 	and.w	r3, r3, #12
 80050d6:	2b08      	cmp	r3, #8
 80050d8:	f000 8213 	beq.w	8005502 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	f040 8162 	bne.w	80053b2 <HAL_RCC_OscConfig+0xeca>
 80050ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050f2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80050f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80050fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005100:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	fa93 f2a3 	rbit	r2, r3
 800510a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800510e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005112:	601a      	str	r2, [r3, #0]
  return result;
 8005114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005118:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800511c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800511e:	fab3 f383 	clz	r3, r3
 8005122:	b2db      	uxtb	r3, r3
 8005124:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005128:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	461a      	mov	r2, r3
 8005130:	2300      	movs	r3, #0
 8005132:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005134:	f7fb fd70 	bl	8000c18 <HAL_GetTick>
 8005138:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800513c:	e00c      	b.n	8005158 <HAL_RCC_OscConfig+0xc70>
 800513e:	bf00      	nop
 8005140:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005144:	f7fb fd68 	bl	8000c18 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e1fd      	b.n	8005554 <HAL_RCC_OscConfig+0x106c>
 8005158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800515c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005160:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005164:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800516a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	fa93 f2a3 	rbit	r2, r3
 8005174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005178:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800517c:	601a      	str	r2, [r3, #0]
  return result;
 800517e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005182:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005186:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005188:	fab3 f383 	clz	r3, r3
 800518c:	b2db      	uxtb	r3, r3
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	b2db      	uxtb	r3, r3
 8005192:	f043 0301 	orr.w	r3, r3, #1
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b01      	cmp	r3, #1
 800519a:	d102      	bne.n	80051a2 <HAL_RCC_OscConfig+0xcba>
 800519c:	4bb0      	ldr	r3, [pc, #704]	; (8005460 <HAL_RCC_OscConfig+0xf78>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	e027      	b.n	80051f2 <HAL_RCC_OscConfig+0xd0a>
 80051a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051a6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80051aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051b4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	fa93 f2a3 	rbit	r2, r3
 80051be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051c2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051cc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80051d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051da:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	fa93 f2a3 	rbit	r2, r3
 80051e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051e8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	4b9c      	ldr	r3, [pc, #624]	; (8005460 <HAL_RCC_OscConfig+0xf78>)
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051f6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80051fa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80051fe:	6011      	str	r1, [r2, #0]
 8005200:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005204:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005208:	6812      	ldr	r2, [r2, #0]
 800520a:	fa92 f1a2 	rbit	r1, r2
 800520e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005212:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005216:	6011      	str	r1, [r2, #0]
  return result;
 8005218:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800521c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005220:	6812      	ldr	r2, [r2, #0]
 8005222:	fab2 f282 	clz	r2, r2
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	f042 0220 	orr.w	r2, r2, #32
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	f002 021f 	and.w	r2, r2, #31
 8005232:	2101      	movs	r1, #1
 8005234:	fa01 f202 	lsl.w	r2, r1, r2
 8005238:	4013      	ands	r3, r2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d182      	bne.n	8005144 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800523e:	4b88      	ldr	r3, [pc, #544]	; (8005460 <HAL_RCC_OscConfig+0xf78>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800524a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005256:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	430b      	orrs	r3, r1
 8005260:	497f      	ldr	r1, [pc, #508]	; (8005460 <HAL_RCC_OscConfig+0xf78>)
 8005262:	4313      	orrs	r3, r2
 8005264:	604b      	str	r3, [r1, #4]
 8005266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800526a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800526e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005272:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005278:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	fa93 f2a3 	rbit	r2, r3
 8005282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005286:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800528a:	601a      	str	r2, [r3, #0]
  return result;
 800528c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005290:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005294:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005296:	fab3 f383 	clz	r3, r3
 800529a:	b2db      	uxtb	r3, r3
 800529c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80052a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	461a      	mov	r2, r3
 80052a8:	2301      	movs	r3, #1
 80052aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ac:	f7fb fcb4 	bl	8000c18 <HAL_GetTick>
 80052b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052b4:	e009      	b.n	80052ca <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052b6:	f7fb fcaf 	bl	8000c18 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e144      	b.n	8005554 <HAL_RCC_OscConfig+0x106c>
 80052ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ce:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80052d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052dc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	fa93 f2a3 	rbit	r2, r3
 80052e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ea:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80052ee:	601a      	str	r2, [r3, #0]
  return result;
 80052f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80052f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052fa:	fab3 f383 	clz	r3, r3
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	095b      	lsrs	r3, r3, #5
 8005302:	b2db      	uxtb	r3, r3
 8005304:	f043 0301 	orr.w	r3, r3, #1
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b01      	cmp	r3, #1
 800530c:	d102      	bne.n	8005314 <HAL_RCC_OscConfig+0xe2c>
 800530e:	4b54      	ldr	r3, [pc, #336]	; (8005460 <HAL_RCC_OscConfig+0xf78>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	e027      	b.n	8005364 <HAL_RCC_OscConfig+0xe7c>
 8005314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005318:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800531c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005320:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005326:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	fa93 f2a3 	rbit	r2, r3
 8005330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005334:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800533e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005342:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800534c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	fa93 f2a3 	rbit	r2, r3
 8005356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800535a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	4b3f      	ldr	r3, [pc, #252]	; (8005460 <HAL_RCC_OscConfig+0xf78>)
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005364:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005368:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800536c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005370:	6011      	str	r1, [r2, #0]
 8005372:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005376:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800537a:	6812      	ldr	r2, [r2, #0]
 800537c:	fa92 f1a2 	rbit	r1, r2
 8005380:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005384:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005388:	6011      	str	r1, [r2, #0]
  return result;
 800538a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800538e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005392:	6812      	ldr	r2, [r2, #0]
 8005394:	fab2 f282 	clz	r2, r2
 8005398:	b2d2      	uxtb	r2, r2
 800539a:	f042 0220 	orr.w	r2, r2, #32
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	f002 021f 	and.w	r2, r2, #31
 80053a4:	2101      	movs	r1, #1
 80053a6:	fa01 f202 	lsl.w	r2, r1, r2
 80053aa:	4013      	ands	r3, r2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d082      	beq.n	80052b6 <HAL_RCC_OscConfig+0xdce>
 80053b0:	e0cf      	b.n	8005552 <HAL_RCC_OscConfig+0x106a>
 80053b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053b6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80053ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053c4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	fa93 f2a3 	rbit	r2, r3
 80053ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053d2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80053d6:	601a      	str	r2, [r3, #0]
  return result;
 80053d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053dc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80053e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053e2:	fab3 f383 	clz	r3, r3
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80053ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	461a      	mov	r2, r3
 80053f4:	2300      	movs	r3, #0
 80053f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f8:	f7fb fc0e 	bl	8000c18 <HAL_GetTick>
 80053fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005400:	e009      	b.n	8005416 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005402:	f7fb fc09 	bl	8000c18 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e09e      	b.n	8005554 <HAL_RCC_OscConfig+0x106c>
 8005416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800541a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800541e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005422:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005428:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	fa93 f2a3 	rbit	r2, r3
 8005432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005436:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800543a:	601a      	str	r2, [r3, #0]
  return result;
 800543c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005440:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005444:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005446:	fab3 f383 	clz	r3, r3
 800544a:	b2db      	uxtb	r3, r3
 800544c:	095b      	lsrs	r3, r3, #5
 800544e:	b2db      	uxtb	r3, r3
 8005450:	f043 0301 	orr.w	r3, r3, #1
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b01      	cmp	r3, #1
 8005458:	d104      	bne.n	8005464 <HAL_RCC_OscConfig+0xf7c>
 800545a:	4b01      	ldr	r3, [pc, #4]	; (8005460 <HAL_RCC_OscConfig+0xf78>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	e029      	b.n	80054b4 <HAL_RCC_OscConfig+0xfcc>
 8005460:	40021000 	.word	0x40021000
 8005464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005468:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800546c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005470:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005476:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	fa93 f2a3 	rbit	r2, r3
 8005480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005484:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800548e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005492:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005496:	601a      	str	r2, [r3, #0]
 8005498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800549c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	fa93 f2a3 	rbit	r2, r3
 80054a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054aa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	4b2b      	ldr	r3, [pc, #172]	; (8005560 <HAL_RCC_OscConfig+0x1078>)
 80054b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054b8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80054bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80054c0:	6011      	str	r1, [r2, #0]
 80054c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054c6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80054ca:	6812      	ldr	r2, [r2, #0]
 80054cc:	fa92 f1a2 	rbit	r1, r2
 80054d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054d4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80054d8:	6011      	str	r1, [r2, #0]
  return result;
 80054da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054de:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80054e2:	6812      	ldr	r2, [r2, #0]
 80054e4:	fab2 f282 	clz	r2, r2
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	f042 0220 	orr.w	r2, r2, #32
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	f002 021f 	and.w	r2, r2, #31
 80054f4:	2101      	movs	r1, #1
 80054f6:	fa01 f202 	lsl.w	r2, r1, r2
 80054fa:	4013      	ands	r3, r2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d180      	bne.n	8005402 <HAL_RCC_OscConfig+0xf1a>
 8005500:	e027      	b.n	8005552 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005506:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d101      	bne.n	8005516 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e01e      	b.n	8005554 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005516:	4b12      	ldr	r3, [pc, #72]	; (8005560 <HAL_RCC_OscConfig+0x1078>)
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800551e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005522:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800552a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	429a      	cmp	r2, r3
 8005534:	d10b      	bne.n	800554e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005536:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800553a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800553e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005542:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800554a:	429a      	cmp	r2, r3
 800554c:	d001      	beq.n	8005552 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e000      	b.n	8005554 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	40021000 	.word	0x40021000

08005564 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b09e      	sub	sp, #120	; 0x78
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800556e:	2300      	movs	r3, #0
 8005570:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e162      	b.n	8005842 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800557c:	4b90      	ldr	r3, [pc, #576]	; (80057c0 <HAL_RCC_ClockConfig+0x25c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	d910      	bls.n	80055ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800558a:	4b8d      	ldr	r3, [pc, #564]	; (80057c0 <HAL_RCC_ClockConfig+0x25c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f023 0207 	bic.w	r2, r3, #7
 8005592:	498b      	ldr	r1, [pc, #556]	; (80057c0 <HAL_RCC_ClockConfig+0x25c>)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	4313      	orrs	r3, r2
 8005598:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800559a:	4b89      	ldr	r3, [pc, #548]	; (80057c0 <HAL_RCC_ClockConfig+0x25c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0307 	and.w	r3, r3, #7
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d001      	beq.n	80055ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e14a      	b.n	8005842 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d008      	beq.n	80055ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055b8:	4b82      	ldr	r3, [pc, #520]	; (80057c4 <HAL_RCC_ClockConfig+0x260>)
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	497f      	ldr	r1, [pc, #508]	; (80057c4 <HAL_RCC_ClockConfig+0x260>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f000 80dc 	beq.w	8005790 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d13c      	bne.n	800565a <HAL_RCC_ClockConfig+0xf6>
 80055e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055e8:	fa93 f3a3 	rbit	r3, r3
 80055ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80055ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055f0:	fab3 f383 	clz	r3, r3
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	095b      	lsrs	r3, r3, #5
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	f043 0301 	orr.w	r3, r3, #1
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b01      	cmp	r3, #1
 8005602:	d102      	bne.n	800560a <HAL_RCC_ClockConfig+0xa6>
 8005604:	4b6f      	ldr	r3, [pc, #444]	; (80057c4 <HAL_RCC_ClockConfig+0x260>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	e00f      	b.n	800562a <HAL_RCC_ClockConfig+0xc6>
 800560a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800560e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005610:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005612:	fa93 f3a3 	rbit	r3, r3
 8005616:	667b      	str	r3, [r7, #100]	; 0x64
 8005618:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800561c:	663b      	str	r3, [r7, #96]	; 0x60
 800561e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005620:	fa93 f3a3 	rbit	r3, r3
 8005624:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005626:	4b67      	ldr	r3, [pc, #412]	; (80057c4 <HAL_RCC_ClockConfig+0x260>)
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800562e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005630:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005632:	fa92 f2a2 	rbit	r2, r2
 8005636:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005638:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800563a:	fab2 f282 	clz	r2, r2
 800563e:	b2d2      	uxtb	r2, r2
 8005640:	f042 0220 	orr.w	r2, r2, #32
 8005644:	b2d2      	uxtb	r2, r2
 8005646:	f002 021f 	and.w	r2, r2, #31
 800564a:	2101      	movs	r1, #1
 800564c:	fa01 f202 	lsl.w	r2, r1, r2
 8005650:	4013      	ands	r3, r2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d17b      	bne.n	800574e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e0f3      	b.n	8005842 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	2b02      	cmp	r3, #2
 8005660:	d13c      	bne.n	80056dc <HAL_RCC_ClockConfig+0x178>
 8005662:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005666:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800566a:	fa93 f3a3 	rbit	r3, r3
 800566e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005672:	fab3 f383 	clz	r3, r3
 8005676:	b2db      	uxtb	r3, r3
 8005678:	095b      	lsrs	r3, r3, #5
 800567a:	b2db      	uxtb	r3, r3
 800567c:	f043 0301 	orr.w	r3, r3, #1
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b01      	cmp	r3, #1
 8005684:	d102      	bne.n	800568c <HAL_RCC_ClockConfig+0x128>
 8005686:	4b4f      	ldr	r3, [pc, #316]	; (80057c4 <HAL_RCC_ClockConfig+0x260>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	e00f      	b.n	80056ac <HAL_RCC_ClockConfig+0x148>
 800568c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005690:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005694:	fa93 f3a3 	rbit	r3, r3
 8005698:	647b      	str	r3, [r7, #68]	; 0x44
 800569a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800569e:	643b      	str	r3, [r7, #64]	; 0x40
 80056a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056a2:	fa93 f3a3 	rbit	r3, r3
 80056a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056a8:	4b46      	ldr	r3, [pc, #280]	; (80057c4 <HAL_RCC_ClockConfig+0x260>)
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80056b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056b4:	fa92 f2a2 	rbit	r2, r2
 80056b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80056ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056bc:	fab2 f282 	clz	r2, r2
 80056c0:	b2d2      	uxtb	r2, r2
 80056c2:	f042 0220 	orr.w	r2, r2, #32
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	f002 021f 	and.w	r2, r2, #31
 80056cc:	2101      	movs	r1, #1
 80056ce:	fa01 f202 	lsl.w	r2, r1, r2
 80056d2:	4013      	ands	r3, r2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d13a      	bne.n	800574e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e0b2      	b.n	8005842 <HAL_RCC_ClockConfig+0x2de>
 80056dc:	2302      	movs	r3, #2
 80056de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e2:	fa93 f3a3 	rbit	r3, r3
 80056e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80056e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ea:	fab3 f383 	clz	r3, r3
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	095b      	lsrs	r3, r3, #5
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	f043 0301 	orr.w	r3, r3, #1
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d102      	bne.n	8005704 <HAL_RCC_ClockConfig+0x1a0>
 80056fe:	4b31      	ldr	r3, [pc, #196]	; (80057c4 <HAL_RCC_ClockConfig+0x260>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	e00d      	b.n	8005720 <HAL_RCC_ClockConfig+0x1bc>
 8005704:	2302      	movs	r3, #2
 8005706:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	fa93 f3a3 	rbit	r3, r3
 800570e:	627b      	str	r3, [r7, #36]	; 0x24
 8005710:	2302      	movs	r3, #2
 8005712:	623b      	str	r3, [r7, #32]
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	fa93 f3a3 	rbit	r3, r3
 800571a:	61fb      	str	r3, [r7, #28]
 800571c:	4b29      	ldr	r3, [pc, #164]	; (80057c4 <HAL_RCC_ClockConfig+0x260>)
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	2202      	movs	r2, #2
 8005722:	61ba      	str	r2, [r7, #24]
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	fa92 f2a2 	rbit	r2, r2
 800572a:	617a      	str	r2, [r7, #20]
  return result;
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	fab2 f282 	clz	r2, r2
 8005732:	b2d2      	uxtb	r2, r2
 8005734:	f042 0220 	orr.w	r2, r2, #32
 8005738:	b2d2      	uxtb	r2, r2
 800573a:	f002 021f 	and.w	r2, r2, #31
 800573e:	2101      	movs	r1, #1
 8005740:	fa01 f202 	lsl.w	r2, r1, r2
 8005744:	4013      	ands	r3, r2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e079      	b.n	8005842 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800574e:	4b1d      	ldr	r3, [pc, #116]	; (80057c4 <HAL_RCC_ClockConfig+0x260>)
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f023 0203 	bic.w	r2, r3, #3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	491a      	ldr	r1, [pc, #104]	; (80057c4 <HAL_RCC_ClockConfig+0x260>)
 800575c:	4313      	orrs	r3, r2
 800575e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005760:	f7fb fa5a 	bl	8000c18 <HAL_GetTick>
 8005764:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005766:	e00a      	b.n	800577e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005768:	f7fb fa56 	bl	8000c18 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	f241 3288 	movw	r2, #5000	; 0x1388
 8005776:	4293      	cmp	r3, r2
 8005778:	d901      	bls.n	800577e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e061      	b.n	8005842 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800577e:	4b11      	ldr	r3, [pc, #68]	; (80057c4 <HAL_RCC_ClockConfig+0x260>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f003 020c 	and.w	r2, r3, #12
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	429a      	cmp	r2, r3
 800578e:	d1eb      	bne.n	8005768 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005790:	4b0b      	ldr	r3, [pc, #44]	; (80057c0 <HAL_RCC_ClockConfig+0x25c>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0307 	and.w	r3, r3, #7
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	429a      	cmp	r2, r3
 800579c:	d214      	bcs.n	80057c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800579e:	4b08      	ldr	r3, [pc, #32]	; (80057c0 <HAL_RCC_ClockConfig+0x25c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f023 0207 	bic.w	r2, r3, #7
 80057a6:	4906      	ldr	r1, [pc, #24]	; (80057c0 <HAL_RCC_ClockConfig+0x25c>)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ae:	4b04      	ldr	r3, [pc, #16]	; (80057c0 <HAL_RCC_ClockConfig+0x25c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0307 	and.w	r3, r3, #7
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d005      	beq.n	80057c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e040      	b.n	8005842 <HAL_RCC_ClockConfig+0x2de>
 80057c0:	40022000 	.word	0x40022000
 80057c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d008      	beq.n	80057e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057d4:	4b1d      	ldr	r3, [pc, #116]	; (800584c <HAL_RCC_ClockConfig+0x2e8>)
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	491a      	ldr	r1, [pc, #104]	; (800584c <HAL_RCC_ClockConfig+0x2e8>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0308 	and.w	r3, r3, #8
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d009      	beq.n	8005806 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057f2:	4b16      	ldr	r3, [pc, #88]	; (800584c <HAL_RCC_ClockConfig+0x2e8>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	4912      	ldr	r1, [pc, #72]	; (800584c <HAL_RCC_ClockConfig+0x2e8>)
 8005802:	4313      	orrs	r3, r2
 8005804:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005806:	f000 f829 	bl	800585c <HAL_RCC_GetSysClockFreq>
 800580a:	4601      	mov	r1, r0
 800580c:	4b0f      	ldr	r3, [pc, #60]	; (800584c <HAL_RCC_ClockConfig+0x2e8>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005814:	22f0      	movs	r2, #240	; 0xf0
 8005816:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	fa92 f2a2 	rbit	r2, r2
 800581e:	60fa      	str	r2, [r7, #12]
  return result;
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	fab2 f282 	clz	r2, r2
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	40d3      	lsrs	r3, r2
 800582a:	4a09      	ldr	r2, [pc, #36]	; (8005850 <HAL_RCC_ClockConfig+0x2ec>)
 800582c:	5cd3      	ldrb	r3, [r2, r3]
 800582e:	fa21 f303 	lsr.w	r3, r1, r3
 8005832:	4a08      	ldr	r2, [pc, #32]	; (8005854 <HAL_RCC_ClockConfig+0x2f0>)
 8005834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005836:	4b08      	ldr	r3, [pc, #32]	; (8005858 <HAL_RCC_ClockConfig+0x2f4>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4618      	mov	r0, r3
 800583c:	f7fb f9a8 	bl	8000b90 <HAL_InitTick>
  
  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3778      	adds	r7, #120	; 0x78
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	40021000 	.word	0x40021000
 8005850:	0800b8b8 	.word	0x0800b8b8
 8005854:	20000000 	.word	0x20000000
 8005858:	20000004 	.word	0x20000004

0800585c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800585c:	b480      	push	{r7}
 800585e:	b08b      	sub	sp, #44	; 0x2c
 8005860:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005862:	2300      	movs	r3, #0
 8005864:	61fb      	str	r3, [r7, #28]
 8005866:	2300      	movs	r3, #0
 8005868:	61bb      	str	r3, [r7, #24]
 800586a:	2300      	movs	r3, #0
 800586c:	627b      	str	r3, [r7, #36]	; 0x24
 800586e:	2300      	movs	r3, #0
 8005870:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005872:	2300      	movs	r3, #0
 8005874:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005876:	4b29      	ldr	r3, [pc, #164]	; (800591c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	f003 030c 	and.w	r3, r3, #12
 8005882:	2b04      	cmp	r3, #4
 8005884:	d002      	beq.n	800588c <HAL_RCC_GetSysClockFreq+0x30>
 8005886:	2b08      	cmp	r3, #8
 8005888:	d003      	beq.n	8005892 <HAL_RCC_GetSysClockFreq+0x36>
 800588a:	e03c      	b.n	8005906 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800588c:	4b24      	ldr	r3, [pc, #144]	; (8005920 <HAL_RCC_GetSysClockFreq+0xc4>)
 800588e:	623b      	str	r3, [r7, #32]
      break;
 8005890:	e03c      	b.n	800590c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005898:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800589c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	fa92 f2a2 	rbit	r2, r2
 80058a4:	607a      	str	r2, [r7, #4]
  return result;
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	fab2 f282 	clz	r2, r2
 80058ac:	b2d2      	uxtb	r2, r2
 80058ae:	40d3      	lsrs	r3, r2
 80058b0:	4a1c      	ldr	r2, [pc, #112]	; (8005924 <HAL_RCC_GetSysClockFreq+0xc8>)
 80058b2:	5cd3      	ldrb	r3, [r2, r3]
 80058b4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80058b6:	4b19      	ldr	r3, [pc, #100]	; (800591c <HAL_RCC_GetSysClockFreq+0xc0>)
 80058b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ba:	f003 030f 	and.w	r3, r3, #15
 80058be:	220f      	movs	r2, #15
 80058c0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	fa92 f2a2 	rbit	r2, r2
 80058c8:	60fa      	str	r2, [r7, #12]
  return result;
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	fab2 f282 	clz	r2, r2
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	40d3      	lsrs	r3, r2
 80058d4:	4a14      	ldr	r2, [pc, #80]	; (8005928 <HAL_RCC_GetSysClockFreq+0xcc>)
 80058d6:	5cd3      	ldrb	r3, [r2, r3]
 80058d8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d008      	beq.n	80058f6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80058e4:	4a0e      	ldr	r2, [pc, #56]	; (8005920 <HAL_RCC_GetSysClockFreq+0xc4>)
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	fb02 f303 	mul.w	r3, r2, r3
 80058f2:	627b      	str	r3, [r7, #36]	; 0x24
 80058f4:	e004      	b.n	8005900 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	4a0c      	ldr	r2, [pc, #48]	; (800592c <HAL_RCC_GetSysClockFreq+0xd0>)
 80058fa:	fb02 f303 	mul.w	r3, r2, r3
 80058fe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	623b      	str	r3, [r7, #32]
      break;
 8005904:	e002      	b.n	800590c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005906:	4b06      	ldr	r3, [pc, #24]	; (8005920 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005908:	623b      	str	r3, [r7, #32]
      break;
 800590a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800590c:	6a3b      	ldr	r3, [r7, #32]
}
 800590e:	4618      	mov	r0, r3
 8005910:	372c      	adds	r7, #44	; 0x2c
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40021000 	.word	0x40021000
 8005920:	007a1200 	.word	0x007a1200
 8005924:	0800b8c8 	.word	0x0800b8c8
 8005928:	0800b8d8 	.word	0x0800b8d8
 800592c:	003d0900 	.word	0x003d0900

08005930 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b092      	sub	sp, #72	; 0x48
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005940:	2300      	movs	r3, #0
 8005942:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 80d4 	beq.w	8005afc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005954:	4b4e      	ldr	r3, [pc, #312]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005956:	69db      	ldr	r3, [r3, #28]
 8005958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10e      	bne.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005960:	4b4b      	ldr	r3, [pc, #300]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	4a4a      	ldr	r2, [pc, #296]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800596a:	61d3      	str	r3, [r2, #28]
 800596c:	4b48      	ldr	r3, [pc, #288]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800596e:	69db      	ldr	r3, [r3, #28]
 8005970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005974:	60bb      	str	r3, [r7, #8]
 8005976:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005978:	2301      	movs	r3, #1
 800597a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800597e:	4b45      	ldr	r3, [pc, #276]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005986:	2b00      	cmp	r3, #0
 8005988:	d118      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800598a:	4b42      	ldr	r3, [pc, #264]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a41      	ldr	r2, [pc, #260]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005994:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005996:	f7fb f93f 	bl	8000c18 <HAL_GetTick>
 800599a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800599c:	e008      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800599e:	f7fb f93b 	bl	8000c18 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	2b64      	cmp	r3, #100	; 0x64
 80059aa:	d901      	bls.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e169      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059b0:	4b38      	ldr	r3, [pc, #224]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d0f0      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059bc:	4b34      	ldr	r3, [pc, #208]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 8084 	beq.w	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059d8:	429a      	cmp	r2, r3
 80059da:	d07c      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059dc:	4b2c      	ldr	r3, [pc, #176]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	fa93 f3a3 	rbit	r3, r3
 80059f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80059f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059f6:	fab3 f383 	clz	r3, r3
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	461a      	mov	r2, r3
 80059fe:	4b26      	ldr	r3, [pc, #152]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005a00:	4413      	add	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	461a      	mov	r2, r3
 8005a06:	2301      	movs	r3, #1
 8005a08:	6013      	str	r3, [r2, #0]
 8005a0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a12:	fa93 f3a3 	rbit	r3, r3
 8005a16:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a1a:	fab3 f383 	clz	r3, r3
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	461a      	mov	r2, r3
 8005a22:	4b1d      	ldr	r3, [pc, #116]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005a24:	4413      	add	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	461a      	mov	r2, r3
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005a2e:	4a18      	ldr	r2, [pc, #96]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a32:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d04b      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a3e:	f7fb f8eb 	bl	8000c18 <HAL_GetTick>
 8005a42:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a44:	e00a      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a46:	f7fb f8e7 	bl	8000c18 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d901      	bls.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e113      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a62:	fa93 f3a3 	rbit	r3, r3
 8005a66:	627b      	str	r3, [r7, #36]	; 0x24
 8005a68:	2302      	movs	r3, #2
 8005a6a:	623b      	str	r3, [r7, #32]
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	fa93 f3a3 	rbit	r3, r3
 8005a72:	61fb      	str	r3, [r7, #28]
  return result;
 8005a74:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a76:	fab3 f383 	clz	r3, r3
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	095b      	lsrs	r3, r3, #5
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	f043 0302 	orr.w	r3, r3, #2
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d108      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005a8a:	4b01      	ldr	r3, [pc, #4]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	e00d      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005a90:	40021000 	.word	0x40021000
 8005a94:	40007000 	.word	0x40007000
 8005a98:	10908100 	.word	0x10908100
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	fa93 f3a3 	rbit	r3, r3
 8005aa6:	617b      	str	r3, [r7, #20]
 8005aa8:	4b78      	ldr	r3, [pc, #480]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	2202      	movs	r2, #2
 8005aae:	613a      	str	r2, [r7, #16]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	fa92 f2a2 	rbit	r2, r2
 8005ab6:	60fa      	str	r2, [r7, #12]
  return result;
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	fab2 f282 	clz	r2, r2
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ac4:	b2d2      	uxtb	r2, r2
 8005ac6:	f002 021f 	and.w	r2, r2, #31
 8005aca:	2101      	movs	r1, #1
 8005acc:	fa01 f202 	lsl.w	r2, r1, r2
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d0b7      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005ad6:	4b6d      	ldr	r3, [pc, #436]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	496a      	ldr	r1, [pc, #424]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005ae8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d105      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005af0:	4b66      	ldr	r3, [pc, #408]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	4a65      	ldr	r2, [pc, #404]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005afa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d008      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b08:	4b60      	ldr	r3, [pc, #384]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0c:	f023 0203 	bic.w	r2, r3, #3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	495d      	ldr	r1, [pc, #372]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d008      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b26:	4b59      	ldr	r3, [pc, #356]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	4956      	ldr	r1, [pc, #344]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d008      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b44:	4b51      	ldr	r3, [pc, #324]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	494e      	ldr	r1, [pc, #312]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0320 	and.w	r3, r3, #32
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d008      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b62:	4b4a      	ldr	r3, [pc, #296]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b66:	f023 0210 	bic.w	r2, r3, #16
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	4947      	ldr	r1, [pc, #284]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d008      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005b80:	4b42      	ldr	r3, [pc, #264]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8c:	493f      	ldr	r1, [pc, #252]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d008      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b9e:	4b3b      	ldr	r3, [pc, #236]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba2:	f023 0220 	bic.w	r2, r3, #32
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	4938      	ldr	r1, [pc, #224]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0308 	and.w	r3, r3, #8
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d008      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005bbc:	4b33      	ldr	r3, [pc, #204]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	4930      	ldr	r1, [pc, #192]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0310 	and.w	r3, r3, #16
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d008      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005bda:	4b2c      	ldr	r3, [pc, #176]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bde:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	4929      	ldr	r1, [pc, #164]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d008      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005bf8:	4b24      	ldr	r3, [pc, #144]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c04:	4921      	ldr	r1, [pc, #132]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d008      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005c16:	4b1d      	ldr	r3, [pc, #116]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	491a      	ldr	r1, [pc, #104]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d008      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005c34:	4b15      	ldr	r3, [pc, #84]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c38:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c40:	4912      	ldr	r1, [pc, #72]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d008      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005c52:	4b0e      	ldr	r3, [pc, #56]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5e:	490b      	ldr	r1, [pc, #44]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d008      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005c70:	4b06      	ldr	r3, [pc, #24]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c7c:	4903      	ldr	r1, [pc, #12]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3748      	adds	r7, #72	; 0x48
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	40021000 	.word	0x40021000

08005c90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e049      	b.n	8005d36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d106      	bne.n	8005cbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7fa fe2a 	bl	8000910 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	3304      	adds	r3, #4
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4610      	mov	r0, r2
 8005cd0:	f000 fd6a 	bl	80067a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
	...

08005d40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d001      	beq.n	8005d58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e04a      	b.n	8005dee <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68da      	ldr	r2, [r3, #12]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0201 	orr.w	r2, r2, #1
 8005d6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a21      	ldr	r2, [pc, #132]	; (8005dfc <HAL_TIM_Base_Start_IT+0xbc>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d018      	beq.n	8005dac <HAL_TIM_Base_Start_IT+0x6c>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d82:	d013      	beq.n	8005dac <HAL_TIM_Base_Start_IT+0x6c>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a1d      	ldr	r2, [pc, #116]	; (8005e00 <HAL_TIM_Base_Start_IT+0xc0>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d00e      	beq.n	8005dac <HAL_TIM_Base_Start_IT+0x6c>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a1c      	ldr	r2, [pc, #112]	; (8005e04 <HAL_TIM_Base_Start_IT+0xc4>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d009      	beq.n	8005dac <HAL_TIM_Base_Start_IT+0x6c>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a1a      	ldr	r2, [pc, #104]	; (8005e08 <HAL_TIM_Base_Start_IT+0xc8>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d004      	beq.n	8005dac <HAL_TIM_Base_Start_IT+0x6c>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a19      	ldr	r2, [pc, #100]	; (8005e0c <HAL_TIM_Base_Start_IT+0xcc>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d115      	bne.n	8005dd8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689a      	ldr	r2, [r3, #8]
 8005db2:	4b17      	ldr	r3, [pc, #92]	; (8005e10 <HAL_TIM_Base_Start_IT+0xd0>)
 8005db4:	4013      	ands	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2b06      	cmp	r3, #6
 8005dbc:	d015      	beq.n	8005dea <HAL_TIM_Base_Start_IT+0xaa>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dc4:	d011      	beq.n	8005dea <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f042 0201 	orr.w	r2, r2, #1
 8005dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd6:	e008      	b.n	8005dea <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f042 0201 	orr.w	r2, r2, #1
 8005de6:	601a      	str	r2, [r3, #0]
 8005de8:	e000      	b.n	8005dec <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	40012c00 	.word	0x40012c00
 8005e00:	40000400 	.word	0x40000400
 8005e04:	40000800 	.word	0x40000800
 8005e08:	40013400 	.word	0x40013400
 8005e0c:	40014000 	.word	0x40014000
 8005e10:	00010007 	.word	0x00010007

08005e14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e049      	b.n	8005eba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d106      	bne.n	8005e40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f841 	bl	8005ec2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3304      	adds	r3, #4
 8005e50:	4619      	mov	r1, r3
 8005e52:	4610      	mov	r0, r2
 8005e54:	f000 fca8 	bl	80067a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b083      	sub	sp, #12
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005eca:	bf00      	nop
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
	...

08005ed8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d109      	bne.n	8005f00 <HAL_TIM_PWM_Start_IT+0x28>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	bf14      	ite	ne
 8005ef8:	2301      	movne	r3, #1
 8005efa:	2300      	moveq	r3, #0
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	e03c      	b.n	8005f7a <HAL_TIM_PWM_Start_IT+0xa2>
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	2b04      	cmp	r3, #4
 8005f04:	d109      	bne.n	8005f1a <HAL_TIM_PWM_Start_IT+0x42>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	bf14      	ite	ne
 8005f12:	2301      	movne	r3, #1
 8005f14:	2300      	moveq	r3, #0
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	e02f      	b.n	8005f7a <HAL_TIM_PWM_Start_IT+0xa2>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b08      	cmp	r3, #8
 8005f1e:	d109      	bne.n	8005f34 <HAL_TIM_PWM_Start_IT+0x5c>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	bf14      	ite	ne
 8005f2c:	2301      	movne	r3, #1
 8005f2e:	2300      	moveq	r3, #0
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	e022      	b.n	8005f7a <HAL_TIM_PWM_Start_IT+0xa2>
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	2b0c      	cmp	r3, #12
 8005f38:	d109      	bne.n	8005f4e <HAL_TIM_PWM_Start_IT+0x76>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	bf14      	ite	ne
 8005f46:	2301      	movne	r3, #1
 8005f48:	2300      	moveq	r3, #0
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	e015      	b.n	8005f7a <HAL_TIM_PWM_Start_IT+0xa2>
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b10      	cmp	r3, #16
 8005f52:	d109      	bne.n	8005f68 <HAL_TIM_PWM_Start_IT+0x90>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	bf14      	ite	ne
 8005f60:	2301      	movne	r3, #1
 8005f62:	2300      	moveq	r3, #0
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	e008      	b.n	8005f7a <HAL_TIM_PWM_Start_IT+0xa2>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	bf14      	ite	ne
 8005f74:	2301      	movne	r3, #1
 8005f76:	2300      	moveq	r3, #0
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e0e2      	b.n	8006148 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d104      	bne.n	8005f92 <HAL_TIM_PWM_Start_IT+0xba>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f90:	e023      	b.n	8005fda <HAL_TIM_PWM_Start_IT+0x102>
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	d104      	bne.n	8005fa2 <HAL_TIM_PWM_Start_IT+0xca>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fa0:	e01b      	b.n	8005fda <HAL_TIM_PWM_Start_IT+0x102>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b08      	cmp	r3, #8
 8005fa6:	d104      	bne.n	8005fb2 <HAL_TIM_PWM_Start_IT+0xda>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fb0:	e013      	b.n	8005fda <HAL_TIM_PWM_Start_IT+0x102>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b0c      	cmp	r3, #12
 8005fb6:	d104      	bne.n	8005fc2 <HAL_TIM_PWM_Start_IT+0xea>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fc0:	e00b      	b.n	8005fda <HAL_TIM_PWM_Start_IT+0x102>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b10      	cmp	r3, #16
 8005fc6:	d104      	bne.n	8005fd2 <HAL_TIM_PWM_Start_IT+0xfa>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fd0:	e003      	b.n	8005fda <HAL_TIM_PWM_Start_IT+0x102>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2202      	movs	r2, #2
 8005fd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b0c      	cmp	r3, #12
 8005fde:	d841      	bhi.n	8006064 <HAL_TIM_PWM_Start_IT+0x18c>
 8005fe0:	a201      	add	r2, pc, #4	; (adr r2, 8005fe8 <HAL_TIM_PWM_Start_IT+0x110>)
 8005fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe6:	bf00      	nop
 8005fe8:	0800601d 	.word	0x0800601d
 8005fec:	08006065 	.word	0x08006065
 8005ff0:	08006065 	.word	0x08006065
 8005ff4:	08006065 	.word	0x08006065
 8005ff8:	0800602f 	.word	0x0800602f
 8005ffc:	08006065 	.word	0x08006065
 8006000:	08006065 	.word	0x08006065
 8006004:	08006065 	.word	0x08006065
 8006008:	08006041 	.word	0x08006041
 800600c:	08006065 	.word	0x08006065
 8006010:	08006065 	.word	0x08006065
 8006014:	08006065 	.word	0x08006065
 8006018:	08006053 	.word	0x08006053
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68da      	ldr	r2, [r3, #12]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0202 	orr.w	r2, r2, #2
 800602a:	60da      	str	r2, [r3, #12]
      break;
 800602c:	e01d      	b.n	800606a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68da      	ldr	r2, [r3, #12]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f042 0204 	orr.w	r2, r2, #4
 800603c:	60da      	str	r2, [r3, #12]
      break;
 800603e:	e014      	b.n	800606a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68da      	ldr	r2, [r3, #12]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f042 0208 	orr.w	r2, r2, #8
 800604e:	60da      	str	r2, [r3, #12]
      break;
 8006050:	e00b      	b.n	800606a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68da      	ldr	r2, [r3, #12]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f042 0210 	orr.w	r2, r2, #16
 8006060:	60da      	str	r2, [r3, #12]
      break;
 8006062:	e002      	b.n	800606a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	73fb      	strb	r3, [r7, #15]
      break;
 8006068:	bf00      	nop
  }

  if (status == HAL_OK)
 800606a:	7bfb      	ldrb	r3, [r7, #15]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d16a      	bne.n	8006146 <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2201      	movs	r2, #1
 8006076:	6839      	ldr	r1, [r7, #0]
 8006078:	4618      	mov	r0, r3
 800607a:	f000 ff95 	bl	8006fa8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a33      	ldr	r2, [pc, #204]	; (8006150 <HAL_TIM_PWM_Start_IT+0x278>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d013      	beq.n	80060b0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a31      	ldr	r2, [pc, #196]	; (8006154 <HAL_TIM_PWM_Start_IT+0x27c>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d00e      	beq.n	80060b0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a30      	ldr	r2, [pc, #192]	; (8006158 <HAL_TIM_PWM_Start_IT+0x280>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d009      	beq.n	80060b0 <HAL_TIM_PWM_Start_IT+0x1d8>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a2e      	ldr	r2, [pc, #184]	; (800615c <HAL_TIM_PWM_Start_IT+0x284>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d004      	beq.n	80060b0 <HAL_TIM_PWM_Start_IT+0x1d8>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a2d      	ldr	r2, [pc, #180]	; (8006160 <HAL_TIM_PWM_Start_IT+0x288>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d101      	bne.n	80060b4 <HAL_TIM_PWM_Start_IT+0x1dc>
 80060b0:	2301      	movs	r3, #1
 80060b2:	e000      	b.n	80060b6 <HAL_TIM_PWM_Start_IT+0x1de>
 80060b4:	2300      	movs	r3, #0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d007      	beq.n	80060ca <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a20      	ldr	r2, [pc, #128]	; (8006150 <HAL_TIM_PWM_Start_IT+0x278>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d018      	beq.n	8006106 <HAL_TIM_PWM_Start_IT+0x22e>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060dc:	d013      	beq.n	8006106 <HAL_TIM_PWM_Start_IT+0x22e>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a20      	ldr	r2, [pc, #128]	; (8006164 <HAL_TIM_PWM_Start_IT+0x28c>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d00e      	beq.n	8006106 <HAL_TIM_PWM_Start_IT+0x22e>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a1e      	ldr	r2, [pc, #120]	; (8006168 <HAL_TIM_PWM_Start_IT+0x290>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d009      	beq.n	8006106 <HAL_TIM_PWM_Start_IT+0x22e>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a17      	ldr	r2, [pc, #92]	; (8006154 <HAL_TIM_PWM_Start_IT+0x27c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d004      	beq.n	8006106 <HAL_TIM_PWM_Start_IT+0x22e>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a15      	ldr	r2, [pc, #84]	; (8006158 <HAL_TIM_PWM_Start_IT+0x280>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d115      	bne.n	8006132 <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	4b17      	ldr	r3, [pc, #92]	; (800616c <HAL_TIM_PWM_Start_IT+0x294>)
 800610e:	4013      	ands	r3, r2
 8006110:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	2b06      	cmp	r3, #6
 8006116:	d015      	beq.n	8006144 <HAL_TIM_PWM_Start_IT+0x26c>
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800611e:	d011      	beq.n	8006144 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f042 0201 	orr.w	r2, r2, #1
 800612e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006130:	e008      	b.n	8006144 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f042 0201 	orr.w	r2, r2, #1
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	e000      	b.n	8006146 <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006144:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006146:	7bfb      	ldrb	r3, [r7, #15]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	40012c00 	.word	0x40012c00
 8006154:	40013400 	.word	0x40013400
 8006158:	40014000 	.word	0x40014000
 800615c:	40014400 	.word	0x40014400
 8006160:	40014800 	.word	0x40014800
 8006164:	40000400 	.word	0x40000400
 8006168:	40000800 	.word	0x40000800
 800616c:	00010007 	.word	0x00010007

08006170 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b02      	cmp	r3, #2
 8006184:	d122      	bne.n	80061cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	2b02      	cmp	r3, #2
 8006192:	d11b      	bne.n	80061cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f06f 0202 	mvn.w	r2, #2
 800619c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d003      	beq.n	80061ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fae3 	bl	800677e <HAL_TIM_IC_CaptureCallback>
 80061b8:	e005      	b.n	80061c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 fad5 	bl	800676a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7fa f821 	bl	8000208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	f003 0304 	and.w	r3, r3, #4
 80061d6:	2b04      	cmp	r3, #4
 80061d8:	d122      	bne.n	8006220 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	f003 0304 	and.w	r3, r3, #4
 80061e4:	2b04      	cmp	r3, #4
 80061e6:	d11b      	bne.n	8006220 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f06f 0204 	mvn.w	r2, #4
 80061f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2202      	movs	r2, #2
 80061f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fab9 	bl	800677e <HAL_TIM_IC_CaptureCallback>
 800620c:	e005      	b.n	800621a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 faab 	bl	800676a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7f9 fff7 	bl	8000208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f003 0308 	and.w	r3, r3, #8
 800622a:	2b08      	cmp	r3, #8
 800622c:	d122      	bne.n	8006274 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f003 0308 	and.w	r3, r3, #8
 8006238:	2b08      	cmp	r3, #8
 800623a:	d11b      	bne.n	8006274 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f06f 0208 	mvn.w	r2, #8
 8006244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2204      	movs	r2, #4
 800624a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	f003 0303 	and.w	r3, r3, #3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fa8f 	bl	800677e <HAL_TIM_IC_CaptureCallback>
 8006260:	e005      	b.n	800626e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fa81 	bl	800676a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f7f9 ffcd 	bl	8000208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	f003 0310 	and.w	r3, r3, #16
 800627e:	2b10      	cmp	r3, #16
 8006280:	d122      	bne.n	80062c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f003 0310 	and.w	r3, r3, #16
 800628c:	2b10      	cmp	r3, #16
 800628e:	d11b      	bne.n	80062c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f06f 0210 	mvn.w	r2, #16
 8006298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2208      	movs	r2, #8
 800629e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fa65 	bl	800677e <HAL_TIM_IC_CaptureCallback>
 80062b4:	e005      	b.n	80062c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fa57 	bl	800676a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7f9 ffa3 	bl	8000208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d10e      	bne.n	80062f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d107      	bne.n	80062f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f06f 0201 	mvn.w	r2, #1
 80062ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7f9 ff6a 	bl	80001c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062fe:	2b80      	cmp	r3, #128	; 0x80
 8006300:	d10e      	bne.n	8006320 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630c:	2b80      	cmp	r3, #128	; 0x80
 800630e:	d107      	bne.n	8006320 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fef4 	bl	8007108 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800632a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800632e:	d10e      	bne.n	800634e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633a:	2b80      	cmp	r3, #128	; 0x80
 800633c:	d107      	bne.n	800634e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fee7 	bl	800711c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006358:	2b40      	cmp	r3, #64	; 0x40
 800635a:	d10e      	bne.n	800637a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006366:	2b40      	cmp	r3, #64	; 0x40
 8006368:	d107      	bne.n	800637a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 fa0c 	bl	8006792 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	f003 0320 	and.w	r3, r3, #32
 8006384:	2b20      	cmp	r3, #32
 8006386:	d10e      	bne.n	80063a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	f003 0320 	and.w	r3, r3, #32
 8006392:	2b20      	cmp	r3, #32
 8006394:	d107      	bne.n	80063a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f06f 0220 	mvn.w	r2, #32
 800639e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fea7 	bl	80070f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063a6:	bf00      	nop
 80063a8:	3708      	adds	r7, #8
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
	...

080063b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063bc:	2300      	movs	r3, #0
 80063be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d101      	bne.n	80063ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063ca:	2302      	movs	r3, #2
 80063cc:	e0ff      	b.n	80065ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b14      	cmp	r3, #20
 80063da:	f200 80f0 	bhi.w	80065be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80063de:	a201      	add	r2, pc, #4	; (adr r2, 80063e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e4:	08006439 	.word	0x08006439
 80063e8:	080065bf 	.word	0x080065bf
 80063ec:	080065bf 	.word	0x080065bf
 80063f0:	080065bf 	.word	0x080065bf
 80063f4:	08006479 	.word	0x08006479
 80063f8:	080065bf 	.word	0x080065bf
 80063fc:	080065bf 	.word	0x080065bf
 8006400:	080065bf 	.word	0x080065bf
 8006404:	080064bb 	.word	0x080064bb
 8006408:	080065bf 	.word	0x080065bf
 800640c:	080065bf 	.word	0x080065bf
 8006410:	080065bf 	.word	0x080065bf
 8006414:	080064fb 	.word	0x080064fb
 8006418:	080065bf 	.word	0x080065bf
 800641c:	080065bf 	.word	0x080065bf
 8006420:	080065bf 	.word	0x080065bf
 8006424:	0800653d 	.word	0x0800653d
 8006428:	080065bf 	.word	0x080065bf
 800642c:	080065bf 	.word	0x080065bf
 8006430:	080065bf 	.word	0x080065bf
 8006434:	0800657d 	.word	0x0800657d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68b9      	ldr	r1, [r7, #8]
 800643e:	4618      	mov	r0, r3
 8006440:	f000 fa42 	bl	80068c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	699a      	ldr	r2, [r3, #24]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f042 0208 	orr.w	r2, r2, #8
 8006452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	699a      	ldr	r2, [r3, #24]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 0204 	bic.w	r2, r2, #4
 8006462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6999      	ldr	r1, [r3, #24]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	691a      	ldr	r2, [r3, #16]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	619a      	str	r2, [r3, #24]
      break;
 8006476:	e0a5      	b.n	80065c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68b9      	ldr	r1, [r7, #8]
 800647e:	4618      	mov	r0, r3
 8006480:	f000 fab2 	bl	80069e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	699a      	ldr	r2, [r3, #24]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699a      	ldr	r2, [r3, #24]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6999      	ldr	r1, [r3, #24]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	021a      	lsls	r2, r3, #8
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	430a      	orrs	r2, r1
 80064b6:	619a      	str	r2, [r3, #24]
      break;
 80064b8:	e084      	b.n	80065c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68b9      	ldr	r1, [r7, #8]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 fb1b 	bl	8006afc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	69da      	ldr	r2, [r3, #28]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f042 0208 	orr.w	r2, r2, #8
 80064d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	69da      	ldr	r2, [r3, #28]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 0204 	bic.w	r2, r2, #4
 80064e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69d9      	ldr	r1, [r3, #28]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	691a      	ldr	r2, [r3, #16]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	61da      	str	r2, [r3, #28]
      break;
 80064f8:	e064      	b.n	80065c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68b9      	ldr	r1, [r7, #8]
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fb83 	bl	8006c0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69da      	ldr	r2, [r3, #28]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69da      	ldr	r2, [r3, #28]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	69d9      	ldr	r1, [r3, #28]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	021a      	lsls	r2, r3, #8
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	61da      	str	r2, [r3, #28]
      break;
 800653a:	e043      	b.n	80065c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68b9      	ldr	r1, [r7, #8]
 8006542:	4618      	mov	r0, r3
 8006544:	f000 fbcc 	bl	8006ce0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f042 0208 	orr.w	r2, r2, #8
 8006556:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0204 	bic.w	r2, r2, #4
 8006566:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	691a      	ldr	r2, [r3, #16]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800657a:	e023      	b.n	80065c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68b9      	ldr	r1, [r7, #8]
 8006582:	4618      	mov	r0, r3
 8006584:	f000 fc10 	bl	8006da8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006596:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	021a      	lsls	r2, r3, #8
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	430a      	orrs	r2, r1
 80065ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80065bc:	e002      	b.n	80065c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	75fb      	strb	r3, [r7, #23]
      break;
 80065c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3718      	adds	r7, #24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop

080065d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d101      	bne.n	80065f4 <HAL_TIM_ConfigClockSource+0x1c>
 80065f0:	2302      	movs	r3, #2
 80065f2:	e0b6      	b.n	8006762 <HAL_TIM_ConfigClockSource+0x18a>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2202      	movs	r2, #2
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006612:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800661e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006630:	d03e      	beq.n	80066b0 <HAL_TIM_ConfigClockSource+0xd8>
 8006632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006636:	f200 8087 	bhi.w	8006748 <HAL_TIM_ConfigClockSource+0x170>
 800663a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800663e:	f000 8086 	beq.w	800674e <HAL_TIM_ConfigClockSource+0x176>
 8006642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006646:	d87f      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x170>
 8006648:	2b70      	cmp	r3, #112	; 0x70
 800664a:	d01a      	beq.n	8006682 <HAL_TIM_ConfigClockSource+0xaa>
 800664c:	2b70      	cmp	r3, #112	; 0x70
 800664e:	d87b      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x170>
 8006650:	2b60      	cmp	r3, #96	; 0x60
 8006652:	d050      	beq.n	80066f6 <HAL_TIM_ConfigClockSource+0x11e>
 8006654:	2b60      	cmp	r3, #96	; 0x60
 8006656:	d877      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x170>
 8006658:	2b50      	cmp	r3, #80	; 0x50
 800665a:	d03c      	beq.n	80066d6 <HAL_TIM_ConfigClockSource+0xfe>
 800665c:	2b50      	cmp	r3, #80	; 0x50
 800665e:	d873      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x170>
 8006660:	2b40      	cmp	r3, #64	; 0x40
 8006662:	d058      	beq.n	8006716 <HAL_TIM_ConfigClockSource+0x13e>
 8006664:	2b40      	cmp	r3, #64	; 0x40
 8006666:	d86f      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x170>
 8006668:	2b30      	cmp	r3, #48	; 0x30
 800666a:	d064      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15e>
 800666c:	2b30      	cmp	r3, #48	; 0x30
 800666e:	d86b      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x170>
 8006670:	2b20      	cmp	r3, #32
 8006672:	d060      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15e>
 8006674:	2b20      	cmp	r3, #32
 8006676:	d867      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x170>
 8006678:	2b00      	cmp	r3, #0
 800667a:	d05c      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15e>
 800667c:	2b10      	cmp	r3, #16
 800667e:	d05a      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15e>
 8006680:	e062      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006692:	f000 fc69 	bl	8006f68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	609a      	str	r2, [r3, #8]
      break;
 80066ae:	e04f      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066c0:	f000 fc52 	bl	8006f68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066d2:	609a      	str	r2, [r3, #8]
      break;
 80066d4:	e03c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066e2:	461a      	mov	r2, r3
 80066e4:	f000 fbc6 	bl	8006e74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2150      	movs	r1, #80	; 0x50
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 fc1f 	bl	8006f32 <TIM_ITRx_SetConfig>
      break;
 80066f4:	e02c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006702:	461a      	mov	r2, r3
 8006704:	f000 fbe5 	bl	8006ed2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2160      	movs	r1, #96	; 0x60
 800670e:	4618      	mov	r0, r3
 8006710:	f000 fc0f 	bl	8006f32 <TIM_ITRx_SetConfig>
      break;
 8006714:	e01c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006722:	461a      	mov	r2, r3
 8006724:	f000 fba6 	bl	8006e74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2140      	movs	r1, #64	; 0x40
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fbff 	bl	8006f32 <TIM_ITRx_SetConfig>
      break;
 8006734:	e00c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4619      	mov	r1, r3
 8006740:	4610      	mov	r0, r2
 8006742:	f000 fbf6 	bl	8006f32 <TIM_ITRx_SetConfig>
      break;
 8006746:	e003      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	73fb      	strb	r3, [r7, #15]
      break;
 800674c:	e000      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800674e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006760:	7bfb      	ldrb	r3, [r7, #15]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800676a:	b480      	push	{r7}
 800676c:	b083      	sub	sp, #12
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006772:	bf00      	nop
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006786:	bf00      	nop
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006792:	b480      	push	{r7}
 8006794:	b083      	sub	sp, #12
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800679a:	bf00      	nop
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
	...

080067a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a3c      	ldr	r2, [pc, #240]	; (80068ac <TIM_Base_SetConfig+0x104>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d00f      	beq.n	80067e0 <TIM_Base_SetConfig+0x38>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c6:	d00b      	beq.n	80067e0 <TIM_Base_SetConfig+0x38>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a39      	ldr	r2, [pc, #228]	; (80068b0 <TIM_Base_SetConfig+0x108>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d007      	beq.n	80067e0 <TIM_Base_SetConfig+0x38>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a38      	ldr	r2, [pc, #224]	; (80068b4 <TIM_Base_SetConfig+0x10c>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d003      	beq.n	80067e0 <TIM_Base_SetConfig+0x38>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a37      	ldr	r2, [pc, #220]	; (80068b8 <TIM_Base_SetConfig+0x110>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d108      	bne.n	80067f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a2d      	ldr	r2, [pc, #180]	; (80068ac <TIM_Base_SetConfig+0x104>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d01b      	beq.n	8006832 <TIM_Base_SetConfig+0x8a>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006800:	d017      	beq.n	8006832 <TIM_Base_SetConfig+0x8a>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a2a      	ldr	r2, [pc, #168]	; (80068b0 <TIM_Base_SetConfig+0x108>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d013      	beq.n	8006832 <TIM_Base_SetConfig+0x8a>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a29      	ldr	r2, [pc, #164]	; (80068b4 <TIM_Base_SetConfig+0x10c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d00f      	beq.n	8006832 <TIM_Base_SetConfig+0x8a>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a28      	ldr	r2, [pc, #160]	; (80068b8 <TIM_Base_SetConfig+0x110>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d00b      	beq.n	8006832 <TIM_Base_SetConfig+0x8a>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a27      	ldr	r2, [pc, #156]	; (80068bc <TIM_Base_SetConfig+0x114>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d007      	beq.n	8006832 <TIM_Base_SetConfig+0x8a>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a26      	ldr	r2, [pc, #152]	; (80068c0 <TIM_Base_SetConfig+0x118>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d003      	beq.n	8006832 <TIM_Base_SetConfig+0x8a>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a25      	ldr	r2, [pc, #148]	; (80068c4 <TIM_Base_SetConfig+0x11c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d108      	bne.n	8006844 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	4313      	orrs	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	4313      	orrs	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a10      	ldr	r2, [pc, #64]	; (80068ac <TIM_Base_SetConfig+0x104>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d00f      	beq.n	8006890 <TIM_Base_SetConfig+0xe8>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a11      	ldr	r2, [pc, #68]	; (80068b8 <TIM_Base_SetConfig+0x110>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d00b      	beq.n	8006890 <TIM_Base_SetConfig+0xe8>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a10      	ldr	r2, [pc, #64]	; (80068bc <TIM_Base_SetConfig+0x114>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d007      	beq.n	8006890 <TIM_Base_SetConfig+0xe8>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a0f      	ldr	r2, [pc, #60]	; (80068c0 <TIM_Base_SetConfig+0x118>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d003      	beq.n	8006890 <TIM_Base_SetConfig+0xe8>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a0e      	ldr	r2, [pc, #56]	; (80068c4 <TIM_Base_SetConfig+0x11c>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d103      	bne.n	8006898 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	691a      	ldr	r2, [r3, #16]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	615a      	str	r2, [r3, #20]
}
 800689e:	bf00      	nop
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	40012c00 	.word	0x40012c00
 80068b0:	40000400 	.word	0x40000400
 80068b4:	40000800 	.word	0x40000800
 80068b8:	40013400 	.word	0x40013400
 80068bc:	40014000 	.word	0x40014000
 80068c0:	40014400 	.word	0x40014400
 80068c4:	40014800 	.word	0x40014800

080068c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b087      	sub	sp, #28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	f023 0201 	bic.w	r2, r3, #1
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f023 0303 	bic.w	r3, r3, #3
 8006902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	4313      	orrs	r3, r2
 800690c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f023 0302 	bic.w	r3, r3, #2
 8006914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	4313      	orrs	r3, r2
 800691e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a2c      	ldr	r2, [pc, #176]	; (80069d4 <TIM_OC1_SetConfig+0x10c>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00f      	beq.n	8006948 <TIM_OC1_SetConfig+0x80>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a2b      	ldr	r2, [pc, #172]	; (80069d8 <TIM_OC1_SetConfig+0x110>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d00b      	beq.n	8006948 <TIM_OC1_SetConfig+0x80>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a2a      	ldr	r2, [pc, #168]	; (80069dc <TIM_OC1_SetConfig+0x114>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d007      	beq.n	8006948 <TIM_OC1_SetConfig+0x80>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a29      	ldr	r2, [pc, #164]	; (80069e0 <TIM_OC1_SetConfig+0x118>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d003      	beq.n	8006948 <TIM_OC1_SetConfig+0x80>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a28      	ldr	r2, [pc, #160]	; (80069e4 <TIM_OC1_SetConfig+0x11c>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d10c      	bne.n	8006962 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	f023 0308 	bic.w	r3, r3, #8
 800694e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	4313      	orrs	r3, r2
 8006958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f023 0304 	bic.w	r3, r3, #4
 8006960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a1b      	ldr	r2, [pc, #108]	; (80069d4 <TIM_OC1_SetConfig+0x10c>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00f      	beq.n	800698a <TIM_OC1_SetConfig+0xc2>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a1a      	ldr	r2, [pc, #104]	; (80069d8 <TIM_OC1_SetConfig+0x110>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d00b      	beq.n	800698a <TIM_OC1_SetConfig+0xc2>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a19      	ldr	r2, [pc, #100]	; (80069dc <TIM_OC1_SetConfig+0x114>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d007      	beq.n	800698a <TIM_OC1_SetConfig+0xc2>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a18      	ldr	r2, [pc, #96]	; (80069e0 <TIM_OC1_SetConfig+0x118>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d003      	beq.n	800698a <TIM_OC1_SetConfig+0xc2>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a17      	ldr	r2, [pc, #92]	; (80069e4 <TIM_OC1_SetConfig+0x11c>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d111      	bne.n	80069ae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006990:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006998:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	621a      	str	r2, [r3, #32]
}
 80069c8:	bf00      	nop
 80069ca:	371c      	adds	r7, #28
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	40012c00 	.word	0x40012c00
 80069d8:	40013400 	.word	0x40013400
 80069dc:	40014000 	.word	0x40014000
 80069e0:	40014400 	.word	0x40014400
 80069e4:	40014800 	.word	0x40014800

080069e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	f023 0210 	bic.w	r2, r3, #16
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	021b      	lsls	r3, r3, #8
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f023 0320 	bic.w	r3, r3, #32
 8006a36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	011b      	lsls	r3, r3, #4
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a28      	ldr	r2, [pc, #160]	; (8006ae8 <TIM_OC2_SetConfig+0x100>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d003      	beq.n	8006a54 <TIM_OC2_SetConfig+0x6c>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a27      	ldr	r2, [pc, #156]	; (8006aec <TIM_OC2_SetConfig+0x104>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d10d      	bne.n	8006a70 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	011b      	lsls	r3, r3, #4
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a1d      	ldr	r2, [pc, #116]	; (8006ae8 <TIM_OC2_SetConfig+0x100>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d00f      	beq.n	8006a98 <TIM_OC2_SetConfig+0xb0>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a1c      	ldr	r2, [pc, #112]	; (8006aec <TIM_OC2_SetConfig+0x104>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d00b      	beq.n	8006a98 <TIM_OC2_SetConfig+0xb0>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a1b      	ldr	r2, [pc, #108]	; (8006af0 <TIM_OC2_SetConfig+0x108>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d007      	beq.n	8006a98 <TIM_OC2_SetConfig+0xb0>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a1a      	ldr	r2, [pc, #104]	; (8006af4 <TIM_OC2_SetConfig+0x10c>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d003      	beq.n	8006a98 <TIM_OC2_SetConfig+0xb0>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a19      	ldr	r2, [pc, #100]	; (8006af8 <TIM_OC2_SetConfig+0x110>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d113      	bne.n	8006ac0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a9e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006aa6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	621a      	str	r2, [r3, #32]
}
 8006ada:	bf00      	nop
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40012c00 	.word	0x40012c00
 8006aec:	40013400 	.word	0x40013400
 8006af0:	40014000 	.word	0x40014000
 8006af4:	40014400 	.word	0x40014400
 8006af8:	40014800 	.word	0x40014800

08006afc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f023 0303 	bic.w	r3, r3, #3
 8006b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	021b      	lsls	r3, r3, #8
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a27      	ldr	r2, [pc, #156]	; (8006bf8 <TIM_OC3_SetConfig+0xfc>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d003      	beq.n	8006b66 <TIM_OC3_SetConfig+0x6a>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a26      	ldr	r2, [pc, #152]	; (8006bfc <TIM_OC3_SetConfig+0x100>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d10d      	bne.n	8006b82 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	021b      	lsls	r3, r3, #8
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b80:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a1c      	ldr	r2, [pc, #112]	; (8006bf8 <TIM_OC3_SetConfig+0xfc>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d00f      	beq.n	8006baa <TIM_OC3_SetConfig+0xae>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a1b      	ldr	r2, [pc, #108]	; (8006bfc <TIM_OC3_SetConfig+0x100>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d00b      	beq.n	8006baa <TIM_OC3_SetConfig+0xae>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a1a      	ldr	r2, [pc, #104]	; (8006c00 <TIM_OC3_SetConfig+0x104>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d007      	beq.n	8006baa <TIM_OC3_SetConfig+0xae>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a19      	ldr	r2, [pc, #100]	; (8006c04 <TIM_OC3_SetConfig+0x108>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d003      	beq.n	8006baa <TIM_OC3_SetConfig+0xae>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a18      	ldr	r2, [pc, #96]	; (8006c08 <TIM_OC3_SetConfig+0x10c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d113      	bne.n	8006bd2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	011b      	lsls	r3, r3, #4
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	011b      	lsls	r3, r3, #4
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	621a      	str	r2, [r3, #32]
}
 8006bec:	bf00      	nop
 8006bee:	371c      	adds	r7, #28
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr
 8006bf8:	40012c00 	.word	0x40012c00
 8006bfc:	40013400 	.word	0x40013400
 8006c00:	40014000 	.word	0x40014000
 8006c04:	40014400 	.word	0x40014400
 8006c08:	40014800 	.word	0x40014800

08006c0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	021b      	lsls	r3, r3, #8
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	031b      	lsls	r3, r3, #12
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a18      	ldr	r2, [pc, #96]	; (8006ccc <TIM_OC4_SetConfig+0xc0>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d00f      	beq.n	8006c90 <TIM_OC4_SetConfig+0x84>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a17      	ldr	r2, [pc, #92]	; (8006cd0 <TIM_OC4_SetConfig+0xc4>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d00b      	beq.n	8006c90 <TIM_OC4_SetConfig+0x84>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a16      	ldr	r2, [pc, #88]	; (8006cd4 <TIM_OC4_SetConfig+0xc8>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d007      	beq.n	8006c90 <TIM_OC4_SetConfig+0x84>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a15      	ldr	r2, [pc, #84]	; (8006cd8 <TIM_OC4_SetConfig+0xcc>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d003      	beq.n	8006c90 <TIM_OC4_SetConfig+0x84>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a14      	ldr	r2, [pc, #80]	; (8006cdc <TIM_OC4_SetConfig+0xd0>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d109      	bne.n	8006ca4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	695b      	ldr	r3, [r3, #20]
 8006c9c:	019b      	lsls	r3, r3, #6
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	621a      	str	r2, [r3, #32]
}
 8006cbe:	bf00      	nop
 8006cc0:	371c      	adds	r7, #28
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	40012c00 	.word	0x40012c00
 8006cd0:	40013400 	.word	0x40013400
 8006cd4:	40014000 	.word	0x40014000
 8006cd8:	40014400 	.word	0x40014400
 8006cdc:	40014800 	.word	0x40014800

08006ce0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	041b      	lsls	r3, r3, #16
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a17      	ldr	r2, [pc, #92]	; (8006d94 <TIM_OC5_SetConfig+0xb4>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d00f      	beq.n	8006d5a <TIM_OC5_SetConfig+0x7a>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a16      	ldr	r2, [pc, #88]	; (8006d98 <TIM_OC5_SetConfig+0xb8>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d00b      	beq.n	8006d5a <TIM_OC5_SetConfig+0x7a>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a15      	ldr	r2, [pc, #84]	; (8006d9c <TIM_OC5_SetConfig+0xbc>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d007      	beq.n	8006d5a <TIM_OC5_SetConfig+0x7a>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a14      	ldr	r2, [pc, #80]	; (8006da0 <TIM_OC5_SetConfig+0xc0>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d003      	beq.n	8006d5a <TIM_OC5_SetConfig+0x7a>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a13      	ldr	r2, [pc, #76]	; (8006da4 <TIM_OC5_SetConfig+0xc4>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d109      	bne.n	8006d6e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	021b      	lsls	r3, r3, #8
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	621a      	str	r2, [r3, #32]
}
 8006d88:	bf00      	nop
 8006d8a:	371c      	adds	r7, #28
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	40012c00 	.word	0x40012c00
 8006d98:	40013400 	.word	0x40013400
 8006d9c:	40014000 	.word	0x40014000
 8006da0:	40014400 	.word	0x40014400
 8006da4:	40014800 	.word	0x40014800

08006da8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b087      	sub	sp, #28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	021b      	lsls	r3, r3, #8
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006dee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	051b      	lsls	r3, r3, #20
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a18      	ldr	r2, [pc, #96]	; (8006e60 <TIM_OC6_SetConfig+0xb8>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d00f      	beq.n	8006e24 <TIM_OC6_SetConfig+0x7c>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a17      	ldr	r2, [pc, #92]	; (8006e64 <TIM_OC6_SetConfig+0xbc>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00b      	beq.n	8006e24 <TIM_OC6_SetConfig+0x7c>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a16      	ldr	r2, [pc, #88]	; (8006e68 <TIM_OC6_SetConfig+0xc0>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d007      	beq.n	8006e24 <TIM_OC6_SetConfig+0x7c>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a15      	ldr	r2, [pc, #84]	; (8006e6c <TIM_OC6_SetConfig+0xc4>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d003      	beq.n	8006e24 <TIM_OC6_SetConfig+0x7c>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a14      	ldr	r2, [pc, #80]	; (8006e70 <TIM_OC6_SetConfig+0xc8>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d109      	bne.n	8006e38 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	029b      	lsls	r3, r3, #10
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	621a      	str	r2, [r3, #32]
}
 8006e52:	bf00      	nop
 8006e54:	371c      	adds	r7, #28
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	40012c00 	.word	0x40012c00
 8006e64:	40013400 	.word	0x40013400
 8006e68:	40014000 	.word	0x40014000
 8006e6c:	40014400 	.word	0x40014400
 8006e70:	40014800 	.word	0x40014800

08006e74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b087      	sub	sp, #28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	f023 0201 	bic.w	r2, r3, #1
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	011b      	lsls	r3, r3, #4
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f023 030a 	bic.w	r3, r3, #10
 8006eb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	621a      	str	r2, [r3, #32]
}
 8006ec6:	bf00      	nop
 8006ec8:	371c      	adds	r7, #28
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b087      	sub	sp, #28
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	60f8      	str	r0, [r7, #12]
 8006eda:	60b9      	str	r1, [r7, #8]
 8006edc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	f023 0210 	bic.w	r2, r3, #16
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6a1b      	ldr	r3, [r3, #32]
 8006ef4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006efc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	031b      	lsls	r3, r3, #12
 8006f02:	697a      	ldr	r2, [r7, #20]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	011b      	lsls	r3, r3, #4
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	697a      	ldr	r2, [r7, #20]
 8006f1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	693a      	ldr	r2, [r7, #16]
 8006f24:	621a      	str	r2, [r3, #32]
}
 8006f26:	bf00      	nop
 8006f28:	371c      	adds	r7, #28
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b085      	sub	sp, #20
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f4a:	683a      	ldr	r2, [r7, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	f043 0307 	orr.w	r3, r3, #7
 8006f54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	609a      	str	r2, [r3, #8]
}
 8006f5c:	bf00      	nop
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b087      	sub	sp, #28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
 8006f74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	021a      	lsls	r2, r3, #8
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	609a      	str	r2, [r3, #8]
}
 8006f9c:	bf00      	nop
 8006f9e:	371c      	adds	r7, #28
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b087      	sub	sp, #28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f003 031f 	and.w	r3, r3, #31
 8006fba:	2201      	movs	r2, #1
 8006fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6a1a      	ldr	r2, [r3, #32]
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	43db      	mvns	r3, r3
 8006fca:	401a      	ands	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6a1a      	ldr	r2, [r3, #32]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	f003 031f 	and.w	r3, r3, #31
 8006fda:	6879      	ldr	r1, [r7, #4]
 8006fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8006fe0:	431a      	orrs	r2, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	621a      	str	r2, [r3, #32]
}
 8006fe6:	bf00      	nop
 8006fe8:	371c      	adds	r7, #28
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
	...

08006ff4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007004:	2b01      	cmp	r3, #1
 8007006:	d101      	bne.n	800700c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007008:	2302      	movs	r3, #2
 800700a:	e063      	b.n	80070d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2202      	movs	r2, #2
 8007018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a2b      	ldr	r2, [pc, #172]	; (80070e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d004      	beq.n	8007040 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a2a      	ldr	r2, [pc, #168]	; (80070e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d108      	bne.n	8007052 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007046:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	4313      	orrs	r3, r2
 8007050:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007058:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	4313      	orrs	r3, r2
 8007062:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a1b      	ldr	r2, [pc, #108]	; (80070e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d018      	beq.n	80070a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800707e:	d013      	beq.n	80070a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a18      	ldr	r2, [pc, #96]	; (80070e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d00e      	beq.n	80070a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a17      	ldr	r2, [pc, #92]	; (80070ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d009      	beq.n	80070a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a12      	ldr	r2, [pc, #72]	; (80070e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d004      	beq.n	80070a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a13      	ldr	r2, [pc, #76]	; (80070f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d10c      	bne.n	80070c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	40012c00 	.word	0x40012c00
 80070e4:	40013400 	.word	0x40013400
 80070e8:	40000400 	.word	0x40000400
 80070ec:	40000800 	.word	0x40000800
 80070f0:	40014000 	.word	0x40014000

080070f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007140:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007144:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	b29a      	uxth	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800715e:	b480      	push	{r7}
 8007160:	b085      	sub	sp, #20
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007166:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800716a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007172:	b29a      	uxth	r2, r3
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	b29b      	uxth	r3, r3
 8007178:	43db      	mvns	r3, r3
 800717a:	b29b      	uxth	r3, r3
 800717c:	4013      	ands	r3, r2
 800717e:	b29a      	uxth	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007194:	b084      	sub	sp, #16
 8007196:	b480      	push	{r7}
 8007198:	b083      	sub	sp, #12
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	f107 0014 	add.w	r0, r7, #20
 80071a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	b004      	add	sp, #16
 80071d4:	4770      	bx	lr
	...

080071d8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80071d8:	b480      	push	{r7}
 80071da:	b09d      	sub	sp, #116	; 0x74
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4413      	add	r3, r2
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80071fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071fe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	78db      	ldrb	r3, [r3, #3]
 8007206:	2b03      	cmp	r3, #3
 8007208:	d81f      	bhi.n	800724a <USB_ActivateEndpoint+0x72>
 800720a:	a201      	add	r2, pc, #4	; (adr r2, 8007210 <USB_ActivateEndpoint+0x38>)
 800720c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007210:	08007221 	.word	0x08007221
 8007214:	0800723d 	.word	0x0800723d
 8007218:	08007253 	.word	0x08007253
 800721c:	0800722f 	.word	0x0800722f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007220:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007224:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007228:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800722c:	e012      	b.n	8007254 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800722e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007232:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007236:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800723a:	e00b      	b.n	8007254 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800723c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007240:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007244:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007248:	e004      	b.n	8007254 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007250:	e000      	b.n	8007254 <USB_ActivateEndpoint+0x7c>
      break;
 8007252:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	441a      	add	r2, r3
 800725e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800726a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800726e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007272:	b29b      	uxth	r3, r3
 8007274:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	4413      	add	r3, r2
 8007280:	881b      	ldrh	r3, [r3, #0]
 8007282:	b29b      	uxth	r3, r3
 8007284:	b21b      	sxth	r3, r3
 8007286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800728a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800728e:	b21a      	sxth	r2, r3
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	b21b      	sxth	r3, r3
 8007296:	4313      	orrs	r3, r2
 8007298:	b21b      	sxth	r3, r3
 800729a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	441a      	add	r2, r3
 80072a8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80072ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072bc:	b29b      	uxth	r3, r3
 80072be:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	7b1b      	ldrb	r3, [r3, #12]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f040 8178 	bne.w	80075ba <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	785b      	ldrb	r3, [r3, #1]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f000 8084 	beq.w	80073dc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	61bb      	str	r3, [r7, #24]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072de:	b29b      	uxth	r3, r3
 80072e0:	461a      	mov	r2, r3
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	4413      	add	r3, r2
 80072e6:	61bb      	str	r3, [r7, #24]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	011a      	lsls	r2, r3, #4
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072f6:	617b      	str	r3, [r7, #20]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	88db      	ldrh	r3, [r3, #6]
 80072fc:	085b      	lsrs	r3, r3, #1
 80072fe:	b29b      	uxth	r3, r3
 8007300:	005b      	lsls	r3, r3, #1
 8007302:	b29a      	uxth	r2, r3
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	4413      	add	r3, r2
 8007312:	881b      	ldrh	r3, [r3, #0]
 8007314:	827b      	strh	r3, [r7, #18]
 8007316:	8a7b      	ldrh	r3, [r7, #18]
 8007318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731c:	2b00      	cmp	r3, #0
 800731e:	d01b      	beq.n	8007358 <USB_ActivateEndpoint+0x180>
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	881b      	ldrh	r3, [r3, #0]
 800732c:	b29b      	uxth	r3, r3
 800732e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007336:	823b      	strh	r3, [r7, #16]
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	441a      	add	r2, r3
 8007342:	8a3b      	ldrh	r3, [r7, #16]
 8007344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800734c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007350:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007354:	b29b      	uxth	r3, r3
 8007356:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	78db      	ldrb	r3, [r3, #3]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d020      	beq.n	80073a2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	881b      	ldrh	r3, [r3, #0]
 800736c:	b29b      	uxth	r3, r3
 800736e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007376:	81bb      	strh	r3, [r7, #12]
 8007378:	89bb      	ldrh	r3, [r7, #12]
 800737a:	f083 0320 	eor.w	r3, r3, #32
 800737e:	81bb      	strh	r3, [r7, #12]
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	441a      	add	r2, r3
 800738a:	89bb      	ldrh	r3, [r7, #12]
 800738c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800739c:	b29b      	uxth	r3, r3
 800739e:	8013      	strh	r3, [r2, #0]
 80073a0:	e2d5      	b.n	800794e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4413      	add	r3, r2
 80073ac:	881b      	ldrh	r3, [r3, #0]
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073b8:	81fb      	strh	r3, [r7, #14]
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	441a      	add	r2, r3
 80073c4:	89fb      	ldrh	r3, [r7, #14]
 80073c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	8013      	strh	r3, [r2, #0]
 80073da:	e2b8      	b.n	800794e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	633b      	str	r3, [r7, #48]	; 0x30
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	461a      	mov	r2, r3
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	4413      	add	r3, r2
 80073ee:	633b      	str	r3, [r7, #48]	; 0x30
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	011a      	lsls	r2, r3, #4
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	4413      	add	r3, r2
 80073fa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80073fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	88db      	ldrh	r3, [r3, #6]
 8007404:	085b      	lsrs	r3, r3, #1
 8007406:	b29b      	uxth	r3, r3
 8007408:	005b      	lsls	r3, r3, #1
 800740a:	b29a      	uxth	r2, r3
 800740c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	62bb      	str	r3, [r7, #40]	; 0x28
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800741a:	b29b      	uxth	r3, r3
 800741c:	461a      	mov	r2, r3
 800741e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007420:	4413      	add	r3, r2
 8007422:	62bb      	str	r3, [r7, #40]	; 0x28
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	011a      	lsls	r2, r3, #4
 800742a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742c:	4413      	add	r3, r2
 800742e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007432:	627b      	str	r3, [r7, #36]	; 0x24
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	881b      	ldrh	r3, [r3, #0]
 8007438:	b29b      	uxth	r3, r3
 800743a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800743e:	b29a      	uxth	r2, r3
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	801a      	strh	r2, [r3, #0]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	2b3e      	cmp	r3, #62	; 0x3e
 800744a:	d91d      	bls.n	8007488 <USB_ActivateEndpoint+0x2b0>
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	095b      	lsrs	r3, r3, #5
 8007452:	66bb      	str	r3, [r7, #104]	; 0x68
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	f003 031f 	and.w	r3, r3, #31
 800745c:	2b00      	cmp	r3, #0
 800745e:	d102      	bne.n	8007466 <USB_ActivateEndpoint+0x28e>
 8007460:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007462:	3b01      	subs	r3, #1
 8007464:	66bb      	str	r3, [r7, #104]	; 0x68
 8007466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007468:	881b      	ldrh	r3, [r3, #0]
 800746a:	b29a      	uxth	r2, r3
 800746c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800746e:	b29b      	uxth	r3, r3
 8007470:	029b      	lsls	r3, r3, #10
 8007472:	b29b      	uxth	r3, r3
 8007474:	4313      	orrs	r3, r2
 8007476:	b29b      	uxth	r3, r3
 8007478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800747c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007480:	b29a      	uxth	r2, r3
 8007482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007484:	801a      	strh	r2, [r3, #0]
 8007486:	e026      	b.n	80074d6 <USB_ActivateEndpoint+0x2fe>
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d10a      	bne.n	80074a6 <USB_ActivateEndpoint+0x2ce>
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	b29b      	uxth	r3, r3
 8007496:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800749a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800749e:	b29a      	uxth	r2, r3
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	801a      	strh	r2, [r3, #0]
 80074a4:	e017      	b.n	80074d6 <USB_ActivateEndpoint+0x2fe>
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	085b      	lsrs	r3, r3, #1
 80074ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d002      	beq.n	80074c0 <USB_ActivateEndpoint+0x2e8>
 80074ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074bc:	3301      	adds	r3, #1
 80074be:	66bb      	str	r3, [r7, #104]	; 0x68
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	881b      	ldrh	r3, [r3, #0]
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	029b      	lsls	r3, r3, #10
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	4313      	orrs	r3, r2
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	881b      	ldrh	r3, [r3, #0]
 80074e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80074e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80074e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d01b      	beq.n	8007526 <USB_ActivateEndpoint+0x34e>
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4413      	add	r3, r2
 80074f8:	881b      	ldrh	r3, [r3, #0]
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007504:	843b      	strh	r3, [r7, #32]
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	441a      	add	r2, r3
 8007510:	8c3b      	ldrh	r3, [r7, #32]
 8007512:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007516:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800751a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800751e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007522:	b29b      	uxth	r3, r3
 8007524:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d124      	bne.n	8007578 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	4413      	add	r3, r2
 8007538:	881b      	ldrh	r3, [r3, #0]
 800753a:	b29b      	uxth	r3, r3
 800753c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007544:	83bb      	strh	r3, [r7, #28]
 8007546:	8bbb      	ldrh	r3, [r7, #28]
 8007548:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800754c:	83bb      	strh	r3, [r7, #28]
 800754e:	8bbb      	ldrh	r3, [r7, #28]
 8007550:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007554:	83bb      	strh	r3, [r7, #28]
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	441a      	add	r2, r3
 8007560:	8bbb      	ldrh	r3, [r7, #28]
 8007562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800756a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800756e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007572:	b29b      	uxth	r3, r3
 8007574:	8013      	strh	r3, [r2, #0]
 8007576:	e1ea      	b.n	800794e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	4413      	add	r3, r2
 8007582:	881b      	ldrh	r3, [r3, #0]
 8007584:	b29b      	uxth	r3, r3
 8007586:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800758a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800758e:	83fb      	strh	r3, [r7, #30]
 8007590:	8bfb      	ldrh	r3, [r7, #30]
 8007592:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007596:	83fb      	strh	r3, [r7, #30]
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	441a      	add	r2, r3
 80075a2:	8bfb      	ldrh	r3, [r7, #30]
 80075a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	8013      	strh	r3, [r2, #0]
 80075b8:	e1c9      	b.n	800794e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	78db      	ldrb	r3, [r3, #3]
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d11e      	bne.n	8007600 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4413      	add	r3, r2
 80075cc:	881b      	ldrh	r3, [r3, #0]
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075d8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	441a      	add	r2, r3
 80075e6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80075ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075f2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80075f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	8013      	strh	r3, [r2, #0]
 80075fe:	e01d      	b.n	800763c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	4413      	add	r3, r2
 800760a:	881b      	ldrh	r3, [r3, #0]
 800760c:	b29b      	uxth	r3, r3
 800760e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007616:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	441a      	add	r2, r3
 8007624:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007628:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800762c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007630:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007638:	b29b      	uxth	r3, r3
 800763a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007646:	b29b      	uxth	r3, r3
 8007648:	461a      	mov	r2, r3
 800764a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800764c:	4413      	add	r3, r2
 800764e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	011a      	lsls	r2, r3, #4
 8007656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007658:	4413      	add	r3, r2
 800765a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800765e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	891b      	ldrh	r3, [r3, #8]
 8007664:	085b      	lsrs	r3, r3, #1
 8007666:	b29b      	uxth	r3, r3
 8007668:	005b      	lsls	r3, r3, #1
 800766a:	b29a      	uxth	r2, r3
 800766c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800766e:	801a      	strh	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	657b      	str	r3, [r7, #84]	; 0x54
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800767a:	b29b      	uxth	r3, r3
 800767c:	461a      	mov	r2, r3
 800767e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007680:	4413      	add	r3, r2
 8007682:	657b      	str	r3, [r7, #84]	; 0x54
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	011a      	lsls	r2, r3, #4
 800768a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800768c:	4413      	add	r3, r2
 800768e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007692:	653b      	str	r3, [r7, #80]	; 0x50
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	895b      	ldrh	r3, [r3, #10]
 8007698:	085b      	lsrs	r3, r3, #1
 800769a:	b29b      	uxth	r3, r3
 800769c:	005b      	lsls	r3, r3, #1
 800769e:	b29a      	uxth	r2, r3
 80076a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076a2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	785b      	ldrb	r3, [r3, #1]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f040 8093 	bne.w	80077d4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4413      	add	r3, r2
 80076b8:	881b      	ldrh	r3, [r3, #0]
 80076ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80076be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80076c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d01b      	beq.n	8007702 <USB_ActivateEndpoint+0x52a>
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	4413      	add	r3, r2
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	441a      	add	r2, r3
 80076ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80076ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076fe:	b29b      	uxth	r3, r3
 8007700:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	881b      	ldrh	r3, [r3, #0]
 800770e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007710:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007716:	2b00      	cmp	r3, #0
 8007718:	d01b      	beq.n	8007752 <USB_ActivateEndpoint+0x57a>
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	881b      	ldrh	r3, [r3, #0]
 8007726:	b29b      	uxth	r3, r3
 8007728:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800772c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007730:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	441a      	add	r2, r3
 800773c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800773e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800774a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800774e:	b29b      	uxth	r3, r3
 8007750:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	b29b      	uxth	r3, r3
 8007760:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007768:	873b      	strh	r3, [r7, #56]	; 0x38
 800776a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800776c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007770:	873b      	strh	r3, [r7, #56]	; 0x38
 8007772:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007774:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007778:	873b      	strh	r3, [r7, #56]	; 0x38
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	441a      	add	r2, r3
 8007784:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007786:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800778a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800778e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007796:	b29b      	uxth	r3, r3
 8007798:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4413      	add	r3, r2
 80077a4:	881b      	ldrh	r3, [r3, #0]
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077b0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	441a      	add	r2, r3
 80077bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80077be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	8013      	strh	r3, [r2, #0]
 80077d2:	e0bc      	b.n	800794e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4413      	add	r3, r2
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80077e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80077e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d01d      	beq.n	800782c <USB_ActivateEndpoint+0x654>
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	4413      	add	r3, r2
 80077fa:	881b      	ldrh	r3, [r3, #0]
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007806:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	441a      	add	r2, r3
 8007814:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800781c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007820:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007828:	b29b      	uxth	r3, r3
 800782a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	4413      	add	r3, r2
 8007836:	881b      	ldrh	r3, [r3, #0]
 8007838:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800783c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007844:	2b00      	cmp	r3, #0
 8007846:	d01d      	beq.n	8007884 <USB_ActivateEndpoint+0x6ac>
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4413      	add	r3, r2
 8007852:	881b      	ldrh	r3, [r3, #0]
 8007854:	b29b      	uxth	r3, r3
 8007856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800785a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800785e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	441a      	add	r2, r3
 800786c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007870:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007874:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800787c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007880:	b29b      	uxth	r3, r3
 8007882:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	78db      	ldrb	r3, [r3, #3]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d024      	beq.n	80078d6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4413      	add	r3, r2
 8007896:	881b      	ldrh	r3, [r3, #0]
 8007898:	b29b      	uxth	r3, r3
 800789a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800789e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80078a6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80078aa:	f083 0320 	eor.w	r3, r3, #32
 80078ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	441a      	add	r2, r3
 80078bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80078c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	8013      	strh	r3, [r2, #0]
 80078d4:	e01d      	b.n	8007912 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ec:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	441a      	add	r2, r3
 80078fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80078fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800790a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800790e:	b29b      	uxth	r3, r3
 8007910:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	881b      	ldrh	r3, [r3, #0]
 800791e:	b29b      	uxth	r3, r3
 8007920:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007928:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	441a      	add	r2, r3
 8007936:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800793a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800793e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800794a:	b29b      	uxth	r3, r3
 800794c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800794e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007952:	4618      	mov	r0, r3
 8007954:	3774      	adds	r7, #116	; 0x74
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop

08007960 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007960:	b480      	push	{r7}
 8007962:	b08d      	sub	sp, #52	; 0x34
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	7b1b      	ldrb	r3, [r3, #12]
 800796e:	2b00      	cmp	r3, #0
 8007970:	f040 808e 	bne.w	8007a90 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	785b      	ldrb	r3, [r3, #1]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d044      	beq.n	8007a06 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	4413      	add	r3, r2
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	81bb      	strh	r3, [r7, #12]
 800798a:	89bb      	ldrh	r3, [r7, #12]
 800798c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007990:	2b00      	cmp	r3, #0
 8007992:	d01b      	beq.n	80079cc <USB_DeactivateEndpoint+0x6c>
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4413      	add	r3, r2
 800799e:	881b      	ldrh	r3, [r3, #0]
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079aa:	817b      	strh	r3, [r7, #10]
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	441a      	add	r2, r3
 80079b6:	897b      	ldrh	r3, [r7, #10]
 80079b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4413      	add	r3, r2
 80079d6:	881b      	ldrh	r3, [r3, #0]
 80079d8:	b29b      	uxth	r3, r3
 80079da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079e2:	813b      	strh	r3, [r7, #8]
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	441a      	add	r2, r3
 80079ee:	893b      	ldrh	r3, [r7, #8]
 80079f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	8013      	strh	r3, [r2, #0]
 8007a04:	e192      	b.n	8007d2c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	4413      	add	r3, r2
 8007a10:	881b      	ldrh	r3, [r3, #0]
 8007a12:	827b      	strh	r3, [r7, #18]
 8007a14:	8a7b      	ldrh	r3, [r7, #18]
 8007a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d01b      	beq.n	8007a56 <USB_DeactivateEndpoint+0xf6>
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	4413      	add	r3, r2
 8007a28:	881b      	ldrh	r3, [r3, #0]
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a34:	823b      	strh	r3, [r7, #16]
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	441a      	add	r2, r3
 8007a40:	8a3b      	ldrh	r3, [r7, #16]
 8007a42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	881b      	ldrh	r3, [r3, #0]
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a6c:	81fb      	strh	r3, [r7, #14]
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	441a      	add	r2, r3
 8007a78:	89fb      	ldrh	r3, [r7, #14]
 8007a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	8013      	strh	r3, [r2, #0]
 8007a8e:	e14d      	b.n	8007d2c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	785b      	ldrb	r3, [r3, #1]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f040 80a5 	bne.w	8007be4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4413      	add	r3, r2
 8007aa4:	881b      	ldrh	r3, [r3, #0]
 8007aa6:	843b      	strh	r3, [r7, #32]
 8007aa8:	8c3b      	ldrh	r3, [r7, #32]
 8007aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d01b      	beq.n	8007aea <USB_DeactivateEndpoint+0x18a>
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	4413      	add	r3, r2
 8007abc:	881b      	ldrh	r3, [r3, #0]
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac8:	83fb      	strh	r3, [r7, #30]
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	441a      	add	r2, r3
 8007ad4:	8bfb      	ldrh	r3, [r7, #30]
 8007ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ade:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	4413      	add	r3, r2
 8007af4:	881b      	ldrh	r3, [r3, #0]
 8007af6:	83bb      	strh	r3, [r7, #28]
 8007af8:	8bbb      	ldrh	r3, [r7, #28]
 8007afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d01b      	beq.n	8007b3a <USB_DeactivateEndpoint+0x1da>
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	881b      	ldrh	r3, [r3, #0]
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b18:	837b      	strh	r3, [r7, #26]
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	441a      	add	r2, r3
 8007b24:	8b7b      	ldrh	r3, [r7, #26]
 8007b26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4413      	add	r3, r2
 8007b44:	881b      	ldrh	r3, [r3, #0]
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b50:	833b      	strh	r3, [r7, #24]
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	441a      	add	r2, r3
 8007b5c:	8b3b      	ldrh	r3, [r7, #24]
 8007b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	4413      	add	r3, r2
 8007b7c:	881b      	ldrh	r3, [r3, #0]
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b88:	82fb      	strh	r3, [r7, #22]
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	441a      	add	r2, r3
 8007b94:	8afb      	ldrh	r3, [r7, #22]
 8007b96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	881b      	ldrh	r3, [r3, #0]
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bc0:	82bb      	strh	r3, [r7, #20]
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	441a      	add	r2, r3
 8007bcc:	8abb      	ldrh	r3, [r7, #20]
 8007bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	8013      	strh	r3, [r2, #0]
 8007be2:	e0a3      	b.n	8007d2c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	881b      	ldrh	r3, [r3, #0]
 8007bf0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007bf2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d01b      	beq.n	8007c34 <USB_DeactivateEndpoint+0x2d4>
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	881b      	ldrh	r3, [r3, #0]
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c12:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	441a      	add	r2, r3
 8007c1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	881b      	ldrh	r3, [r3, #0]
 8007c40:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007c42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d01b      	beq.n	8007c84 <USB_DeactivateEndpoint+0x324>
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	4413      	add	r3, r2
 8007c56:	881b      	ldrh	r3, [r3, #0]
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c62:	853b      	strh	r3, [r7, #40]	; 0x28
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	441a      	add	r2, r3
 8007c6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007c70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4413      	add	r3, r2
 8007c8e:	881b      	ldrh	r3, [r3, #0]
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c9a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	441a      	add	r2, r3
 8007ca6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	881b      	ldrh	r3, [r3, #0]
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cd2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	441a      	add	r2, r3
 8007cde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ce0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ce4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ce8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4413      	add	r3, r2
 8007cfe:	881b      	ldrh	r3, [r3, #0]
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d0a:	847b      	strh	r3, [r7, #34]	; 0x22
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	441a      	add	r2, r3
 8007d16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007d18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3734      	adds	r7, #52	; 0x34
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b0c2      	sub	sp, #264	; 0x108
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d48:	6018      	str	r0, [r3, #0]
 8007d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d52:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	785b      	ldrb	r3, [r3, #1]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	f040 86b7 	bne.w	8008ad4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	699a      	ldr	r2, [r3, #24]
 8007d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d908      	bls.n	8007d94 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007d92:	e007      	b.n	8007da4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	7b1b      	ldrb	r3, [r3, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d13a      	bne.n	8007e2a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	6959      	ldr	r1, [r3, #20]
 8007dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	88da      	ldrh	r2, [r3, #6]
 8007dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007dd6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007dda:	6800      	ldr	r0, [r0, #0]
 8007ddc:	f001 fc8c 	bl	80096f8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007de0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007de4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	613b      	str	r3, [r7, #16]
 8007dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007df0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	4413      	add	r3, r2
 8007e02:	613b      	str	r3, [r7, #16]
 8007e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	011a      	lsls	r2, r3, #4
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	4413      	add	r3, r2
 8007e16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	801a      	strh	r2, [r3, #0]
 8007e26:	f000 be1f 	b.w	8008a68 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007e2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	78db      	ldrb	r3, [r3, #3]
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	f040 8462 	bne.w	8008700 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	6a1a      	ldr	r2, [r3, #32]
 8007e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	f240 83df 	bls.w	8008618 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4413      	add	r3, r2
 8007e74:	881b      	ldrh	r3, [r3, #0]
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e80:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	441a      	add	r2, r3
 8007e9e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eaa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6a1a      	ldr	r2, [r3, #32]
 8007ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ec6:	1ad2      	subs	r2, r2, r3
 8007ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ecc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ed8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	4413      	add	r3, r2
 8007eee:	881b      	ldrh	r3, [r3, #0]
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f000 81c7 	beq.w	800828a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	633b      	str	r3, [r7, #48]	; 0x30
 8007f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	785b      	ldrb	r3, [r3, #1]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d177      	bne.n	8008008 <USB_EPStartXfer+0x2ce>
 8007f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	461a      	mov	r2, r3
 8007f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f38:	4413      	add	r3, r2
 8007f3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	011a      	lsls	r2, r3, #4
 8007f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4c:	4413      	add	r3, r2
 8007f4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f52:	627b      	str	r3, [r7, #36]	; 0x24
 8007f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f56:	881b      	ldrh	r3, [r3, #0]
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f62:	801a      	strh	r2, [r3, #0]
 8007f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f68:	2b3e      	cmp	r3, #62	; 0x3e
 8007f6a:	d921      	bls.n	8007fb0 <USB_EPStartXfer+0x276>
 8007f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f70:	095b      	lsrs	r3, r3, #5
 8007f72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f7a:	f003 031f 	and.w	r3, r3, #31
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d104      	bne.n	8007f8c <USB_EPStartXfer+0x252>
 8007f82:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007f86:	3b01      	subs	r3, #1
 8007f88:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8e:	881b      	ldrh	r3, [r3, #0]
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	029b      	lsls	r3, r3, #10
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fac:	801a      	strh	r2, [r3, #0]
 8007fae:	e050      	b.n	8008052 <USB_EPStartXfer+0x318>
 8007fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10a      	bne.n	8007fce <USB_EPStartXfer+0x294>
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fba:	881b      	ldrh	r3, [r3, #0]
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fca:	801a      	strh	r2, [r3, #0]
 8007fcc:	e041      	b.n	8008052 <USB_EPStartXfer+0x318>
 8007fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fd2:	085b      	lsrs	r3, r3, #1
 8007fd4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d004      	beq.n	8007fee <USB_EPStartXfer+0x2b4>
 8007fe4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007fe8:	3301      	adds	r3, #1
 8007fea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff0:	881b      	ldrh	r3, [r3, #0]
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	029b      	lsls	r3, r3, #10
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	4313      	orrs	r3, r2
 8008000:	b29a      	uxth	r2, r3
 8008002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008004:	801a      	strh	r2, [r3, #0]
 8008006:	e024      	b.n	8008052 <USB_EPStartXfer+0x318>
 8008008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800800c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	785b      	ldrb	r3, [r3, #1]
 8008014:	2b01      	cmp	r3, #1
 8008016:	d11c      	bne.n	8008052 <USB_EPStartXfer+0x318>
 8008018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800801c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008026:	b29b      	uxth	r3, r3
 8008028:	461a      	mov	r2, r3
 800802a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802c:	4413      	add	r3, r2
 800802e:	633b      	str	r3, [r7, #48]	; 0x30
 8008030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	011a      	lsls	r2, r3, #4
 800803e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008040:	4413      	add	r3, r2
 8008042:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008046:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800804c:	b29a      	uxth	r2, r3
 800804e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008050:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	895b      	ldrh	r3, [r3, #10]
 800805e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6959      	ldr	r1, [r3, #20]
 800806e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008072:	b29b      	uxth	r3, r3
 8008074:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008078:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800807c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008080:	6800      	ldr	r0, [r0, #0]
 8008082:	f001 fb39 	bl	80096f8 <USB_WritePMA>
            ep->xfer_buff += len;
 8008086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800808a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	695a      	ldr	r2, [r3, #20]
 8008092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008096:	441a      	add	r2, r3
 8008098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800809c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80080a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	6a1a      	ldr	r2, [r3, #32]
 80080b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d90f      	bls.n	80080e0 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80080c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	6a1a      	ldr	r2, [r3, #32]
 80080cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080d0:	1ad2      	subs	r2, r2, r3
 80080d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	621a      	str	r2, [r3, #32]
 80080de:	e00e      	b.n	80080fe <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80080e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	6a1b      	ldr	r3, [r3, #32]
 80080ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80080f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2200      	movs	r2, #0
 80080fc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80080fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	785b      	ldrb	r3, [r3, #1]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d177      	bne.n	80081fe <USB_EPStartXfer+0x4c4>
 800810e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008112:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	61bb      	str	r3, [r7, #24]
 800811a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800811e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008128:	b29b      	uxth	r3, r3
 800812a:	461a      	mov	r2, r3
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	4413      	add	r3, r2
 8008130:	61bb      	str	r3, [r7, #24]
 8008132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	011a      	lsls	r2, r3, #4
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	4413      	add	r3, r2
 8008144:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008148:	617b      	str	r3, [r7, #20]
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	881b      	ldrh	r3, [r3, #0]
 800814e:	b29b      	uxth	r3, r3
 8008150:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008154:	b29a      	uxth	r2, r3
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	801a      	strh	r2, [r3, #0]
 800815a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800815e:	2b3e      	cmp	r3, #62	; 0x3e
 8008160:	d921      	bls.n	80081a6 <USB_EPStartXfer+0x46c>
 8008162:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008166:	095b      	lsrs	r3, r3, #5
 8008168:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800816c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008170:	f003 031f 	and.w	r3, r3, #31
 8008174:	2b00      	cmp	r3, #0
 8008176:	d104      	bne.n	8008182 <USB_EPStartXfer+0x448>
 8008178:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800817c:	3b01      	subs	r3, #1
 800817e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	881b      	ldrh	r3, [r3, #0]
 8008186:	b29a      	uxth	r2, r3
 8008188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800818c:	b29b      	uxth	r3, r3
 800818e:	029b      	lsls	r3, r3, #10
 8008190:	b29b      	uxth	r3, r3
 8008192:	4313      	orrs	r3, r2
 8008194:	b29b      	uxth	r3, r3
 8008196:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800819a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800819e:	b29a      	uxth	r2, r3
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	801a      	strh	r2, [r3, #0]
 80081a4:	e056      	b.n	8008254 <USB_EPStartXfer+0x51a>
 80081a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10a      	bne.n	80081c4 <USB_EPStartXfer+0x48a>
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	881b      	ldrh	r3, [r3, #0]
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081bc:	b29a      	uxth	r2, r3
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	801a      	strh	r2, [r3, #0]
 80081c2:	e047      	b.n	8008254 <USB_EPStartXfer+0x51a>
 80081c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081c8:	085b      	lsrs	r3, r3, #1
 80081ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80081ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d004      	beq.n	80081e4 <USB_EPStartXfer+0x4aa>
 80081da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081de:	3301      	adds	r3, #1
 80081e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	881b      	ldrh	r3, [r3, #0]
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	029b      	lsls	r3, r3, #10
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	4313      	orrs	r3, r2
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	801a      	strh	r2, [r3, #0]
 80081fc:	e02a      	b.n	8008254 <USB_EPStartXfer+0x51a>
 80081fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008202:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	785b      	ldrb	r3, [r3, #1]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d122      	bne.n	8008254 <USB_EPStartXfer+0x51a>
 800820e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008212:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	623b      	str	r3, [r7, #32]
 800821a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800821e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008228:	b29b      	uxth	r3, r3
 800822a:	461a      	mov	r2, r3
 800822c:	6a3b      	ldr	r3, [r7, #32]
 800822e:	4413      	add	r3, r2
 8008230:	623b      	str	r3, [r7, #32]
 8008232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	011a      	lsls	r2, r3, #4
 8008240:	6a3b      	ldr	r3, [r7, #32]
 8008242:	4413      	add	r3, r2
 8008244:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008248:	61fb      	str	r3, [r7, #28]
 800824a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800824e:	b29a      	uxth	r2, r3
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008258:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	891b      	ldrh	r3, [r3, #8]
 8008260:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	6959      	ldr	r1, [r3, #20]
 8008270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008274:	b29b      	uxth	r3, r3
 8008276:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800827a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800827e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008282:	6800      	ldr	r0, [r0, #0]
 8008284:	f001 fa38 	bl	80096f8 <USB_WritePMA>
 8008288:	e3ee      	b.n	8008a68 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800828a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800828e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	785b      	ldrb	r3, [r3, #1]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d177      	bne.n	800838a <USB_EPStartXfer+0x650>
 800829a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800829e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80082a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	461a      	mov	r2, r3
 80082b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082ba:	4413      	add	r3, r2
 80082bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80082be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	011a      	lsls	r2, r3, #4
 80082cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082ce:	4413      	add	r3, r2
 80082d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80082d4:	647b      	str	r3, [r7, #68]	; 0x44
 80082d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082d8:	881b      	ldrh	r3, [r3, #0]
 80082da:	b29b      	uxth	r3, r3
 80082dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082e4:	801a      	strh	r2, [r3, #0]
 80082e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ea:	2b3e      	cmp	r3, #62	; 0x3e
 80082ec:	d921      	bls.n	8008332 <USB_EPStartXfer+0x5f8>
 80082ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082f2:	095b      	lsrs	r3, r3, #5
 80082f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80082f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082fc:	f003 031f 	and.w	r3, r3, #31
 8008300:	2b00      	cmp	r3, #0
 8008302:	d104      	bne.n	800830e <USB_EPStartXfer+0x5d4>
 8008304:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008308:	3b01      	subs	r3, #1
 800830a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800830e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008310:	881b      	ldrh	r3, [r3, #0]
 8008312:	b29a      	uxth	r2, r3
 8008314:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008318:	b29b      	uxth	r3, r3
 800831a:	029b      	lsls	r3, r3, #10
 800831c:	b29b      	uxth	r3, r3
 800831e:	4313      	orrs	r3, r2
 8008320:	b29b      	uxth	r3, r3
 8008322:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800832a:	b29a      	uxth	r2, r3
 800832c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800832e:	801a      	strh	r2, [r3, #0]
 8008330:	e056      	b.n	80083e0 <USB_EPStartXfer+0x6a6>
 8008332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008336:	2b00      	cmp	r3, #0
 8008338:	d10a      	bne.n	8008350 <USB_EPStartXfer+0x616>
 800833a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800833c:	881b      	ldrh	r3, [r3, #0]
 800833e:	b29b      	uxth	r3, r3
 8008340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008348:	b29a      	uxth	r2, r3
 800834a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800834c:	801a      	strh	r2, [r3, #0]
 800834e:	e047      	b.n	80083e0 <USB_EPStartXfer+0x6a6>
 8008350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008354:	085b      	lsrs	r3, r3, #1
 8008356:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800835a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800835e:	f003 0301 	and.w	r3, r3, #1
 8008362:	2b00      	cmp	r3, #0
 8008364:	d004      	beq.n	8008370 <USB_EPStartXfer+0x636>
 8008366:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800836a:	3301      	adds	r3, #1
 800836c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008372:	881b      	ldrh	r3, [r3, #0]
 8008374:	b29a      	uxth	r2, r3
 8008376:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800837a:	b29b      	uxth	r3, r3
 800837c:	029b      	lsls	r3, r3, #10
 800837e:	b29b      	uxth	r3, r3
 8008380:	4313      	orrs	r3, r2
 8008382:	b29a      	uxth	r2, r3
 8008384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008386:	801a      	strh	r2, [r3, #0]
 8008388:	e02a      	b.n	80083e0 <USB_EPStartXfer+0x6a6>
 800838a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800838e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	785b      	ldrb	r3, [r3, #1]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d122      	bne.n	80083e0 <USB_EPStartXfer+0x6a6>
 800839a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800839e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	653b      	str	r3, [r7, #80]	; 0x50
 80083a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	461a      	mov	r2, r3
 80083b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083ba:	4413      	add	r3, r2
 80083bc:	653b      	str	r3, [r7, #80]	; 0x50
 80083be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	011a      	lsls	r2, r3, #4
 80083cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083ce:	4413      	add	r3, r2
 80083d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80083d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083da:	b29a      	uxth	r2, r3
 80083dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80083e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	891b      	ldrh	r3, [r3, #8]
 80083ec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80083f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	6959      	ldr	r1, [r3, #20]
 80083fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008400:	b29b      	uxth	r3, r3
 8008402:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008406:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800840a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800840e:	6800      	ldr	r0, [r0, #0]
 8008410:	f001 f972 	bl	80096f8 <USB_WritePMA>
            ep->xfer_buff += len;
 8008414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	695a      	ldr	r2, [r3, #20]
 8008420:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008424:	441a      	add	r2, r3
 8008426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800842a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	6a1a      	ldr	r2, [r3, #32]
 800843e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	429a      	cmp	r2, r3
 800844c:	d90f      	bls.n	800846e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800844e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	6a1a      	ldr	r2, [r3, #32]
 800845a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800845e:	1ad2      	subs	r2, r2, r3
 8008460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	621a      	str	r2, [r3, #32]
 800846c:	e00e      	b.n	800848c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800846e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	6a1b      	ldr	r3, [r3, #32]
 800847a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800847e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2200      	movs	r2, #0
 800848a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800848c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008490:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	643b      	str	r3, [r7, #64]	; 0x40
 8008498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800849c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	785b      	ldrb	r3, [r3, #1]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d177      	bne.n	8008598 <USB_EPStartXfer+0x85e>
 80084a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80084b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	461a      	mov	r2, r3
 80084c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c8:	4413      	add	r3, r2
 80084ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80084cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	011a      	lsls	r2, r3, #4
 80084da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084dc:	4413      	add	r3, r2
 80084de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80084e2:	637b      	str	r3, [r7, #52]	; 0x34
 80084e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e6:	881b      	ldrh	r3, [r3, #0]
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f2:	801a      	strh	r2, [r3, #0]
 80084f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084f8:	2b3e      	cmp	r3, #62	; 0x3e
 80084fa:	d921      	bls.n	8008540 <USB_EPStartXfer+0x806>
 80084fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008500:	095b      	lsrs	r3, r3, #5
 8008502:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800850a:	f003 031f 	and.w	r3, r3, #31
 800850e:	2b00      	cmp	r3, #0
 8008510:	d104      	bne.n	800851c <USB_EPStartXfer+0x7e2>
 8008512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008516:	3b01      	subs	r3, #1
 8008518:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800851c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800851e:	881b      	ldrh	r3, [r3, #0]
 8008520:	b29a      	uxth	r2, r3
 8008522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008526:	b29b      	uxth	r3, r3
 8008528:	029b      	lsls	r3, r3, #10
 800852a:	b29b      	uxth	r3, r3
 800852c:	4313      	orrs	r3, r2
 800852e:	b29b      	uxth	r3, r3
 8008530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008538:	b29a      	uxth	r2, r3
 800853a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800853c:	801a      	strh	r2, [r3, #0]
 800853e:	e050      	b.n	80085e2 <USB_EPStartXfer+0x8a8>
 8008540:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10a      	bne.n	800855e <USB_EPStartXfer+0x824>
 8008548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	b29b      	uxth	r3, r3
 800854e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008556:	b29a      	uxth	r2, r3
 8008558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800855a:	801a      	strh	r2, [r3, #0]
 800855c:	e041      	b.n	80085e2 <USB_EPStartXfer+0x8a8>
 800855e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008562:	085b      	lsrs	r3, r3, #1
 8008564:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800856c:	f003 0301 	and.w	r3, r3, #1
 8008570:	2b00      	cmp	r3, #0
 8008572:	d004      	beq.n	800857e <USB_EPStartXfer+0x844>
 8008574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008578:	3301      	adds	r3, #1
 800857a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800857e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008580:	881b      	ldrh	r3, [r3, #0]
 8008582:	b29a      	uxth	r2, r3
 8008584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008588:	b29b      	uxth	r3, r3
 800858a:	029b      	lsls	r3, r3, #10
 800858c:	b29b      	uxth	r3, r3
 800858e:	4313      	orrs	r3, r2
 8008590:	b29a      	uxth	r2, r3
 8008592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008594:	801a      	strh	r2, [r3, #0]
 8008596:	e024      	b.n	80085e2 <USB_EPStartXfer+0x8a8>
 8008598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800859c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	785b      	ldrb	r3, [r3, #1]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d11c      	bne.n	80085e2 <USB_EPStartXfer+0x8a8>
 80085a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	461a      	mov	r2, r3
 80085ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085bc:	4413      	add	r3, r2
 80085be:	643b      	str	r3, [r7, #64]	; 0x40
 80085c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	011a      	lsls	r2, r3, #4
 80085ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085d0:	4413      	add	r3, r2
 80085d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80085d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085dc:	b29a      	uxth	r2, r3
 80085de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80085e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	895b      	ldrh	r3, [r3, #10]
 80085ee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	6959      	ldr	r1, [r3, #20]
 80085fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008602:	b29b      	uxth	r3, r3
 8008604:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008608:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800860c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008610:	6800      	ldr	r0, [r0, #0]
 8008612:	f001 f871 	bl	80096f8 <USB_WritePMA>
 8008616:	e227      	b.n	8008a68 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800861c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	6a1b      	ldr	r3, [r3, #32]
 8008624:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800862c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008636:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4413      	add	r3, r2
 8008642:	881b      	ldrh	r3, [r3, #0]
 8008644:	b29b      	uxth	r3, r3
 8008646:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800864a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800864e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008656:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008660:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	441a      	add	r2, r3
 800866c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008670:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008674:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800867c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008680:	b29b      	uxth	r3, r3
 8008682:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008688:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008694:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800869e:	b29b      	uxth	r3, r3
 80086a0:	461a      	mov	r2, r3
 80086a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086a4:	4413      	add	r3, r2
 80086a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	011a      	lsls	r2, r3, #4
 80086b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086b8:	4413      	add	r3, r2
 80086ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80086be:	65bb      	str	r3, [r7, #88]	; 0x58
 80086c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086c4:	b29a      	uxth	r2, r3
 80086c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086c8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80086ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	891b      	ldrh	r3, [r3, #8]
 80086d6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	6959      	ldr	r1, [r3, #20]
 80086e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80086f0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80086f4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80086f8:	6800      	ldr	r0, [r0, #0]
 80086fa:	f000 fffd 	bl	80096f8 <USB_WritePMA>
 80086fe:	e1b3      	b.n	8008a68 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	6a1a      	ldr	r2, [r3, #32]
 800870c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008710:	1ad2      	subs	r2, r2, r3
 8008712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800871e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008722:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800872c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	4413      	add	r3, r2
 8008738:	881b      	ldrh	r3, [r3, #0]
 800873a:	b29b      	uxth	r3, r3
 800873c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008740:	2b00      	cmp	r3, #0
 8008742:	f000 80c6 	beq.w	80088d2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800874a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	673b      	str	r3, [r7, #112]	; 0x70
 8008752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	785b      	ldrb	r3, [r3, #1]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d177      	bne.n	8008852 <USB_EPStartXfer+0xb18>
 8008762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008766:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	66bb      	str	r3, [r7, #104]	; 0x68
 800876e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008772:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800877c:	b29b      	uxth	r3, r3
 800877e:	461a      	mov	r2, r3
 8008780:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008782:	4413      	add	r3, r2
 8008784:	66bb      	str	r3, [r7, #104]	; 0x68
 8008786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800878a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	011a      	lsls	r2, r3, #4
 8008794:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008796:	4413      	add	r3, r2
 8008798:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800879c:	667b      	str	r3, [r7, #100]	; 0x64
 800879e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087a0:	881b      	ldrh	r3, [r3, #0]
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087a8:	b29a      	uxth	r2, r3
 80087aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087ac:	801a      	strh	r2, [r3, #0]
 80087ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087b2:	2b3e      	cmp	r3, #62	; 0x3e
 80087b4:	d921      	bls.n	80087fa <USB_EPStartXfer+0xac0>
 80087b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087ba:	095b      	lsrs	r3, r3, #5
 80087bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80087c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087c4:	f003 031f 	and.w	r3, r3, #31
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d104      	bne.n	80087d6 <USB_EPStartXfer+0xa9c>
 80087cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80087d0:	3b01      	subs	r3, #1
 80087d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80087d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	b29a      	uxth	r2, r3
 80087dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	029b      	lsls	r3, r3, #10
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	4313      	orrs	r3, r2
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087f6:	801a      	strh	r2, [r3, #0]
 80087f8:	e050      	b.n	800889c <USB_EPStartXfer+0xb62>
 80087fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d10a      	bne.n	8008818 <USB_EPStartXfer+0xade>
 8008802:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008804:	881b      	ldrh	r3, [r3, #0]
 8008806:	b29b      	uxth	r3, r3
 8008808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800880c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008810:	b29a      	uxth	r2, r3
 8008812:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008814:	801a      	strh	r2, [r3, #0]
 8008816:	e041      	b.n	800889c <USB_EPStartXfer+0xb62>
 8008818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800881c:	085b      	lsrs	r3, r3, #1
 800881e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	2b00      	cmp	r3, #0
 800882c:	d004      	beq.n	8008838 <USB_EPStartXfer+0xafe>
 800882e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008832:	3301      	adds	r3, #1
 8008834:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800883a:	881b      	ldrh	r3, [r3, #0]
 800883c:	b29a      	uxth	r2, r3
 800883e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008842:	b29b      	uxth	r3, r3
 8008844:	029b      	lsls	r3, r3, #10
 8008846:	b29b      	uxth	r3, r3
 8008848:	4313      	orrs	r3, r2
 800884a:	b29a      	uxth	r2, r3
 800884c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800884e:	801a      	strh	r2, [r3, #0]
 8008850:	e024      	b.n	800889c <USB_EPStartXfer+0xb62>
 8008852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	785b      	ldrb	r3, [r3, #1]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d11c      	bne.n	800889c <USB_EPStartXfer+0xb62>
 8008862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008866:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008870:	b29b      	uxth	r3, r3
 8008872:	461a      	mov	r2, r3
 8008874:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008876:	4413      	add	r3, r2
 8008878:	673b      	str	r3, [r7, #112]	; 0x70
 800887a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800887e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	011a      	lsls	r2, r3, #4
 8008888:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800888a:	4413      	add	r3, r2
 800888c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008890:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008896:	b29a      	uxth	r2, r3
 8008898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800889a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800889c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	895b      	ldrh	r3, [r3, #10]
 80088a8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	6959      	ldr	r1, [r3, #20]
 80088b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088bc:	b29b      	uxth	r3, r3
 80088be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80088c2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80088c6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80088ca:	6800      	ldr	r0, [r0, #0]
 80088cc:	f000 ff14 	bl	80096f8 <USB_WritePMA>
 80088d0:	e0ca      	b.n	8008a68 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80088d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	785b      	ldrb	r3, [r3, #1]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d177      	bne.n	80089d2 <USB_EPStartXfer+0xc98>
 80088e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80088ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	461a      	mov	r2, r3
 8008900:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008902:	4413      	add	r3, r2
 8008904:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800890a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	011a      	lsls	r2, r3, #4
 8008914:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008916:	4413      	add	r3, r2
 8008918:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800891c:	67bb      	str	r3, [r7, #120]	; 0x78
 800891e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	b29b      	uxth	r3, r3
 8008924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008928:	b29a      	uxth	r2, r3
 800892a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800892c:	801a      	strh	r2, [r3, #0]
 800892e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008932:	2b3e      	cmp	r3, #62	; 0x3e
 8008934:	d921      	bls.n	800897a <USB_EPStartXfer+0xc40>
 8008936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800893a:	095b      	lsrs	r3, r3, #5
 800893c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008944:	f003 031f 	and.w	r3, r3, #31
 8008948:	2b00      	cmp	r3, #0
 800894a:	d104      	bne.n	8008956 <USB_EPStartXfer+0xc1c>
 800894c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008950:	3b01      	subs	r3, #1
 8008952:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008956:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008958:	881b      	ldrh	r3, [r3, #0]
 800895a:	b29a      	uxth	r2, r3
 800895c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008960:	b29b      	uxth	r3, r3
 8008962:	029b      	lsls	r3, r3, #10
 8008964:	b29b      	uxth	r3, r3
 8008966:	4313      	orrs	r3, r2
 8008968:	b29b      	uxth	r3, r3
 800896a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800896e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008972:	b29a      	uxth	r2, r3
 8008974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008976:	801a      	strh	r2, [r3, #0]
 8008978:	e05c      	b.n	8008a34 <USB_EPStartXfer+0xcfa>
 800897a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800897e:	2b00      	cmp	r3, #0
 8008980:	d10a      	bne.n	8008998 <USB_EPStartXfer+0xc5e>
 8008982:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008984:	881b      	ldrh	r3, [r3, #0]
 8008986:	b29b      	uxth	r3, r3
 8008988:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800898c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008990:	b29a      	uxth	r2, r3
 8008992:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008994:	801a      	strh	r2, [r3, #0]
 8008996:	e04d      	b.n	8008a34 <USB_EPStartXfer+0xcfa>
 8008998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800899c:	085b      	lsrs	r3, r3, #1
 800899e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80089a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d004      	beq.n	80089b8 <USB_EPStartXfer+0xc7e>
 80089ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80089b2:	3301      	adds	r3, #1
 80089b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80089b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089ba:	881b      	ldrh	r3, [r3, #0]
 80089bc:	b29a      	uxth	r2, r3
 80089be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	029b      	lsls	r3, r3, #10
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	4313      	orrs	r3, r2
 80089ca:	b29a      	uxth	r2, r3
 80089cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089ce:	801a      	strh	r2, [r3, #0]
 80089d0:	e030      	b.n	8008a34 <USB_EPStartXfer+0xcfa>
 80089d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	785b      	ldrb	r3, [r3, #1]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d128      	bne.n	8008a34 <USB_EPStartXfer+0xcfa>
 80089e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80089f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	461a      	mov	r2, r3
 8008a02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a06:	4413      	add	r3, r2
 8008a08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	011a      	lsls	r2, r3, #4
 8008a1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a1e:	4413      	add	r3, r2
 8008a20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a32:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	891b      	ldrh	r3, [r3, #8]
 8008a40:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	6959      	ldr	r1, [r3, #20]
 8008a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008a5a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008a5e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008a62:	6800      	ldr	r0, [r0, #0]
 8008a64:	f000 fe48 	bl	80096f8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	4413      	add	r3, r2
 8008a82:	881b      	ldrh	r3, [r3, #0]
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a8e:	817b      	strh	r3, [r7, #10]
 8008a90:	897b      	ldrh	r3, [r7, #10]
 8008a92:	f083 0310 	eor.w	r3, r3, #16
 8008a96:	817b      	strh	r3, [r7, #10]
 8008a98:	897b      	ldrh	r3, [r7, #10]
 8008a9a:	f083 0320 	eor.w	r3, r3, #32
 8008a9e:	817b      	strh	r3, [r7, #10]
 8008aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	441a      	add	r2, r3
 8008aba:	897b      	ldrh	r3, [r7, #10]
 8008abc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ac0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	8013      	strh	r3, [r2, #0]
 8008ad0:	f000 bcde 	b.w	8009490 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	7b1b      	ldrb	r3, [r3, #12]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f040 80bb 	bne.w	8008c5c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	699a      	ldr	r2, [r3, #24]
 8008af2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008af6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d917      	bls.n	8008b32 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	699a      	ldr	r2, [r3, #24]
 8008b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b22:	1ad2      	subs	r2, r2, r3
 8008b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	619a      	str	r2, [r3, #24]
 8008b30:	e00e      	b.n	8008b50 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	699b      	ldr	r3, [r3, #24]
 8008b3e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	461a      	mov	r2, r3
 8008b70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b74:	4413      	add	r3, r2
 8008b76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	011a      	lsls	r2, r3, #4
 8008b88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b8c:	4413      	add	r3, r2
 8008b8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008b96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b9a:	881b      	ldrh	r3, [r3, #0]
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ba8:	801a      	strh	r2, [r3, #0]
 8008baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bae:	2b3e      	cmp	r3, #62	; 0x3e
 8008bb0:	d924      	bls.n	8008bfc <USB_EPStartXfer+0xec2>
 8008bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bb6:	095b      	lsrs	r3, r3, #5
 8008bb8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bc0:	f003 031f 	and.w	r3, r3, #31
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d104      	bne.n	8008bd2 <USB_EPStartXfer+0xe98>
 8008bc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008bd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bd6:	881b      	ldrh	r3, [r3, #0]
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	029b      	lsls	r3, r3, #10
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	4313      	orrs	r3, r2
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bf6:	801a      	strh	r2, [r3, #0]
 8008bf8:	f000 bc10 	b.w	800941c <USB_EPStartXfer+0x16e2>
 8008bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d10c      	bne.n	8008c1e <USB_EPStartXfer+0xee4>
 8008c04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c08:	881b      	ldrh	r3, [r3, #0]
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c1a:	801a      	strh	r2, [r3, #0]
 8008c1c:	e3fe      	b.n	800941c <USB_EPStartXfer+0x16e2>
 8008c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c22:	085b      	lsrs	r3, r3, #1
 8008c24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c2c:	f003 0301 	and.w	r3, r3, #1
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d004      	beq.n	8008c3e <USB_EPStartXfer+0xf04>
 8008c34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008c38:	3301      	adds	r3, #1
 8008c3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c42:	881b      	ldrh	r3, [r3, #0]
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	029b      	lsls	r3, r3, #10
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	4313      	orrs	r3, r2
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c58:	801a      	strh	r2, [r3, #0]
 8008c5a:	e3df      	b.n	800941c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	78db      	ldrb	r3, [r3, #3]
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	f040 8218 	bne.w	800909e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	785b      	ldrb	r3, [r3, #1]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f040 809d 	bne.w	8008dba <USB_EPStartXfer+0x1080>
 8008c80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ca4:	4413      	add	r3, r2
 8008ca6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	011a      	lsls	r2, r3, #4
 8008cb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008cbc:	4413      	add	r3, r2
 8008cbe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008cc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008cc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008cca:	881b      	ldrh	r3, [r3, #0]
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008cd8:	801a      	strh	r2, [r3, #0]
 8008cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	2b3e      	cmp	r3, #62	; 0x3e
 8008ce8:	d92b      	bls.n	8008d42 <USB_EPStartXfer+0x1008>
 8008cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	095b      	lsrs	r3, r3, #5
 8008cf8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	f003 031f 	and.w	r3, r3, #31
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d104      	bne.n	8008d1a <USB_EPStartXfer+0xfe0>
 8008d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d14:	3b01      	subs	r3, #1
 8008d16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d1e:	881b      	ldrh	r3, [r3, #0]
 8008d20:	b29a      	uxth	r2, r3
 8008d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	029b      	lsls	r3, r3, #10
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d3e:	801a      	strh	r2, [r3, #0]
 8008d40:	e070      	b.n	8008e24 <USB_EPStartXfer+0x10ea>
 8008d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10c      	bne.n	8008d6c <USB_EPStartXfer+0x1032>
 8008d52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d56:	881b      	ldrh	r3, [r3, #0]
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d68:	801a      	strh	r2, [r3, #0]
 8008d6a:	e05b      	b.n	8008e24 <USB_EPStartXfer+0x10ea>
 8008d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	085b      	lsrs	r3, r3, #1
 8008d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	691b      	ldr	r3, [r3, #16]
 8008d8a:	f003 0301 	and.w	r3, r3, #1
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d004      	beq.n	8008d9c <USB_EPStartXfer+0x1062>
 8008d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d96:	3301      	adds	r3, #1
 8008d98:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008da0:	881b      	ldrh	r3, [r3, #0]
 8008da2:	b29a      	uxth	r2, r3
 8008da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	029b      	lsls	r3, r3, #10
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	4313      	orrs	r3, r2
 8008db0:	b29a      	uxth	r2, r3
 8008db2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008db6:	801a      	strh	r2, [r3, #0]
 8008db8:	e034      	b.n	8008e24 <USB_EPStartXfer+0x10ea>
 8008dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	785b      	ldrb	r3, [r3, #1]
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d12c      	bne.n	8008e24 <USB_EPStartXfer+0x10ea>
 8008dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008dd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ddc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	461a      	mov	r2, r3
 8008dea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008dee:	4413      	add	r3, r2
 8008df0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008df8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	011a      	lsls	r2, r3, #4
 8008e02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e06:	4413      	add	r3, r2
 8008e08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008e22:	801a      	strh	r2, [r3, #0]
 8008e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	785b      	ldrb	r3, [r3, #1]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f040 809d 	bne.w	8008f7e <USB_EPStartXfer+0x1244>
 8008e44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	461a      	mov	r2, r3
 8008e64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e68:	4413      	add	r3, r2
 8008e6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	011a      	lsls	r2, r3, #4
 8008e7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e80:	4413      	add	r3, r2
 8008e82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008e86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008e8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e8e:	881b      	ldrh	r3, [r3, #0]
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e9c:	801a      	strh	r2, [r3, #0]
 8008e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	2b3e      	cmp	r3, #62	; 0x3e
 8008eac:	d92b      	bls.n	8008f06 <USB_EPStartXfer+0x11cc>
 8008eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	691b      	ldr	r3, [r3, #16]
 8008eba:	095b      	lsrs	r3, r3, #5
 8008ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	f003 031f 	and.w	r3, r3, #31
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d104      	bne.n	8008ede <USB_EPStartXfer+0x11a4>
 8008ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ede:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ee2:	881b      	ldrh	r3, [r3, #0]
 8008ee4:	b29a      	uxth	r2, r3
 8008ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	029b      	lsls	r3, r3, #10
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ef8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008efc:	b29a      	uxth	r2, r3
 8008efe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f02:	801a      	strh	r2, [r3, #0]
 8008f04:	e069      	b.n	8008fda <USB_EPStartXfer+0x12a0>
 8008f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d10c      	bne.n	8008f30 <USB_EPStartXfer+0x11f6>
 8008f16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f1a:	881b      	ldrh	r3, [r3, #0]
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f2c:	801a      	strh	r2, [r3, #0]
 8008f2e:	e054      	b.n	8008fda <USB_EPStartXfer+0x12a0>
 8008f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	085b      	lsrs	r3, r3, #1
 8008f3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	f003 0301 	and.w	r3, r3, #1
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d004      	beq.n	8008f60 <USB_EPStartXfer+0x1226>
 8008f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f64:	881b      	ldrh	r3, [r3, #0]
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	029b      	lsls	r3, r3, #10
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	4313      	orrs	r3, r2
 8008f74:	b29a      	uxth	r2, r3
 8008f76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f7a:	801a      	strh	r2, [r3, #0]
 8008f7c:	e02d      	b.n	8008fda <USB_EPStartXfer+0x12a0>
 8008f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	785b      	ldrb	r3, [r3, #1]
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d125      	bne.n	8008fda <USB_EPStartXfer+0x12a0>
 8008f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008fa4:	4413      	add	r3, r2
 8008fa6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	011a      	lsls	r2, r3, #4
 8008fb8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008fbc:	4413      	add	r3, r2
 8008fbe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	b29a      	uxth	r2, r3
 8008fd4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008fd8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	69db      	ldr	r3, [r3, #28]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f000 8218 	beq.w	800941c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ff0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ffa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	4413      	add	r3, r2
 8009006:	881b      	ldrh	r3, [r3, #0]
 8009008:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800900c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009014:	2b00      	cmp	r3, #0
 8009016:	d005      	beq.n	8009024 <USB_EPStartXfer+0x12ea>
 8009018:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800901c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10d      	bne.n	8009040 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009024:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800902c:	2b00      	cmp	r3, #0
 800902e:	f040 81f5 	bne.w	800941c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009032:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800903a:	2b00      	cmp	r3, #0
 800903c:	f040 81ee 	bne.w	800941c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009044:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800904e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	4413      	add	r3, r2
 800905a:	881b      	ldrh	r3, [r3, #0]
 800905c:	b29b      	uxth	r3, r3
 800905e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009066:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800906a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800906e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	441a      	add	r2, r3
 8009084:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009088:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800908c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009094:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009098:	b29b      	uxth	r3, r3
 800909a:	8013      	strh	r3, [r2, #0]
 800909c:	e1be      	b.n	800941c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800909e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	78db      	ldrb	r3, [r3, #3]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	f040 81b4 	bne.w	8009418 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80090b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	699a      	ldr	r2, [r3, #24]
 80090bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d917      	bls.n	80090fc <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80090cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	691b      	ldr	r3, [r3, #16]
 80090d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80090dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	699a      	ldr	r2, [r3, #24]
 80090e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090ec:	1ad2      	subs	r2, r2, r3
 80090ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	619a      	str	r2, [r3, #24]
 80090fa:	e00e      	b.n	800911a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80090fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009100:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	699b      	ldr	r3, [r3, #24]
 8009108:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800910c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2200      	movs	r2, #0
 8009118:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800911a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800911e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	785b      	ldrb	r3, [r3, #1]
 8009126:	2b00      	cmp	r3, #0
 8009128:	f040 8085 	bne.w	8009236 <USB_EPStartXfer+0x14fc>
 800912c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009130:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800913a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800913e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009148:	b29b      	uxth	r3, r3
 800914a:	461a      	mov	r2, r3
 800914c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009150:	4413      	add	r3, r2
 8009152:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800915a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	011a      	lsls	r2, r3, #4
 8009164:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009168:	4413      	add	r3, r2
 800916a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800916e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009172:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009176:	881b      	ldrh	r3, [r3, #0]
 8009178:	b29b      	uxth	r3, r3
 800917a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800917e:	b29a      	uxth	r2, r3
 8009180:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009184:	801a      	strh	r2, [r3, #0]
 8009186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800918a:	2b3e      	cmp	r3, #62	; 0x3e
 800918c:	d923      	bls.n	80091d6 <USB_EPStartXfer+0x149c>
 800918e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009192:	095b      	lsrs	r3, r3, #5
 8009194:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800919c:	f003 031f 	and.w	r3, r3, #31
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d104      	bne.n	80091ae <USB_EPStartXfer+0x1474>
 80091a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091a8:	3b01      	subs	r3, #1
 80091aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80091ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091b2:	881b      	ldrh	r3, [r3, #0]
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	029b      	lsls	r3, r3, #10
 80091be:	b29b      	uxth	r3, r3
 80091c0:	4313      	orrs	r3, r2
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091cc:	b29a      	uxth	r2, r3
 80091ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091d2:	801a      	strh	r2, [r3, #0]
 80091d4:	e060      	b.n	8009298 <USB_EPStartXfer+0x155e>
 80091d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d10c      	bne.n	80091f8 <USB_EPStartXfer+0x14be>
 80091de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091e2:	881b      	ldrh	r3, [r3, #0]
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091f4:	801a      	strh	r2, [r3, #0]
 80091f6:	e04f      	b.n	8009298 <USB_EPStartXfer+0x155e>
 80091f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091fc:	085b      	lsrs	r3, r3, #1
 80091fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009206:	f003 0301 	and.w	r3, r3, #1
 800920a:	2b00      	cmp	r3, #0
 800920c:	d004      	beq.n	8009218 <USB_EPStartXfer+0x14de>
 800920e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009212:	3301      	adds	r3, #1
 8009214:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009218:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800921c:	881b      	ldrh	r3, [r3, #0]
 800921e:	b29a      	uxth	r2, r3
 8009220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009224:	b29b      	uxth	r3, r3
 8009226:	029b      	lsls	r3, r3, #10
 8009228:	b29b      	uxth	r3, r3
 800922a:	4313      	orrs	r3, r2
 800922c:	b29a      	uxth	r2, r3
 800922e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009232:	801a      	strh	r2, [r3, #0]
 8009234:	e030      	b.n	8009298 <USB_EPStartXfer+0x155e>
 8009236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800923a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	785b      	ldrb	r3, [r3, #1]
 8009242:	2b01      	cmp	r3, #1
 8009244:	d128      	bne.n	8009298 <USB_EPStartXfer+0x155e>
 8009246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800924a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009258:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009262:	b29b      	uxth	r3, r3
 8009264:	461a      	mov	r2, r3
 8009266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800926a:	4413      	add	r3, r2
 800926c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	011a      	lsls	r2, r3, #4
 800927e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009282:	4413      	add	r3, r2
 8009284:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009288:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800928c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009290:	b29a      	uxth	r2, r3
 8009292:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009296:	801a      	strh	r2, [r3, #0]
 8009298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800929c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80092a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	785b      	ldrb	r3, [r3, #1]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	f040 8085 	bne.w	80093c2 <USB_EPStartXfer+0x1688>
 80092b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80092c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	461a      	mov	r2, r3
 80092d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80092dc:	4413      	add	r3, r2
 80092de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80092e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	011a      	lsls	r2, r3, #4
 80092f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80092f4:	4413      	add	r3, r2
 80092f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80092fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80092fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009302:	881b      	ldrh	r3, [r3, #0]
 8009304:	b29b      	uxth	r3, r3
 8009306:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800930a:	b29a      	uxth	r2, r3
 800930c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009310:	801a      	strh	r2, [r3, #0]
 8009312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009316:	2b3e      	cmp	r3, #62	; 0x3e
 8009318:	d923      	bls.n	8009362 <USB_EPStartXfer+0x1628>
 800931a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800931e:	095b      	lsrs	r3, r3, #5
 8009320:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009328:	f003 031f 	and.w	r3, r3, #31
 800932c:	2b00      	cmp	r3, #0
 800932e:	d104      	bne.n	800933a <USB_EPStartXfer+0x1600>
 8009330:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009334:	3b01      	subs	r3, #1
 8009336:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800933a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800933e:	881b      	ldrh	r3, [r3, #0]
 8009340:	b29a      	uxth	r2, r3
 8009342:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009346:	b29b      	uxth	r3, r3
 8009348:	029b      	lsls	r3, r3, #10
 800934a:	b29b      	uxth	r3, r3
 800934c:	4313      	orrs	r3, r2
 800934e:	b29b      	uxth	r3, r3
 8009350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009358:	b29a      	uxth	r2, r3
 800935a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800935e:	801a      	strh	r2, [r3, #0]
 8009360:	e05c      	b.n	800941c <USB_EPStartXfer+0x16e2>
 8009362:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10c      	bne.n	8009384 <USB_EPStartXfer+0x164a>
 800936a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800936e:	881b      	ldrh	r3, [r3, #0]
 8009370:	b29b      	uxth	r3, r3
 8009372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800937a:	b29a      	uxth	r2, r3
 800937c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009380:	801a      	strh	r2, [r3, #0]
 8009382:	e04b      	b.n	800941c <USB_EPStartXfer+0x16e2>
 8009384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009388:	085b      	lsrs	r3, r3, #1
 800938a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800938e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009392:	f003 0301 	and.w	r3, r3, #1
 8009396:	2b00      	cmp	r3, #0
 8009398:	d004      	beq.n	80093a4 <USB_EPStartXfer+0x166a>
 800939a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800939e:	3301      	adds	r3, #1
 80093a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80093a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80093a8:	881b      	ldrh	r3, [r3, #0]
 80093aa:	b29a      	uxth	r2, r3
 80093ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	029b      	lsls	r3, r3, #10
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	4313      	orrs	r3, r2
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80093be:	801a      	strh	r2, [r3, #0]
 80093c0:	e02c      	b.n	800941c <USB_EPStartXfer+0x16e2>
 80093c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	785b      	ldrb	r3, [r3, #1]
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d124      	bne.n	800941c <USB_EPStartXfer+0x16e2>
 80093d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	461a      	mov	r2, r3
 80093e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80093e8:	4413      	add	r3, r2
 80093ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80093ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	011a      	lsls	r2, r3, #4
 80093fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009400:	4413      	add	r3, r2
 8009402:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009406:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800940a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800940e:	b29a      	uxth	r2, r3
 8009410:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009414:	801a      	strh	r2, [r3, #0]
 8009416:	e001      	b.n	800941c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009418:	2301      	movs	r3, #1
 800941a:	e03a      	b.n	8009492 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800941c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009420:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800942a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	4413      	add	r3, r2
 8009436:	881b      	ldrh	r3, [r3, #0]
 8009438:	b29b      	uxth	r3, r3
 800943a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800943e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009442:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009446:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800944a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800944e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009452:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009456:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800945a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800945e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009462:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800946c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	441a      	add	r2, r3
 8009478:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800947c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800948c:	b29b      	uxth	r3, r3
 800948e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800949c:	b480      	push	{r7}
 800949e:	b085      	sub	sp, #20
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	785b      	ldrb	r3, [r3, #1]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d020      	beq.n	80094f0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	4413      	add	r3, r2
 80094b8:	881b      	ldrh	r3, [r3, #0]
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094c4:	81bb      	strh	r3, [r7, #12]
 80094c6:	89bb      	ldrh	r3, [r7, #12]
 80094c8:	f083 0310 	eor.w	r3, r3, #16
 80094cc:	81bb      	strh	r3, [r7, #12]
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	441a      	add	r2, r3
 80094d8:	89bb      	ldrh	r3, [r7, #12]
 80094da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	8013      	strh	r3, [r2, #0]
 80094ee:	e01f      	b.n	8009530 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4413      	add	r3, r2
 80094fa:	881b      	ldrh	r3, [r3, #0]
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009506:	81fb      	strh	r3, [r7, #14]
 8009508:	89fb      	ldrh	r3, [r7, #14]
 800950a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800950e:	81fb      	strh	r3, [r7, #14]
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	441a      	add	r2, r3
 800951a:	89fb      	ldrh	r3, [r7, #14]
 800951c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800952c:	b29b      	uxth	r3, r3
 800952e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	3714      	adds	r7, #20
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr

0800953e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800953e:	b480      	push	{r7}
 8009540:	b087      	sub	sp, #28
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
 8009546:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	7b1b      	ldrb	r3, [r3, #12]
 800954c:	2b00      	cmp	r3, #0
 800954e:	f040 809d 	bne.w	800968c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	785b      	ldrb	r3, [r3, #1]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d04c      	beq.n	80095f4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800955a:	687a      	ldr	r2, [r7, #4]
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	4413      	add	r3, r2
 8009564:	881b      	ldrh	r3, [r3, #0]
 8009566:	823b      	strh	r3, [r7, #16]
 8009568:	8a3b      	ldrh	r3, [r7, #16]
 800956a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800956e:	2b00      	cmp	r3, #0
 8009570:	d01b      	beq.n	80095aa <USB_EPClearStall+0x6c>
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	4413      	add	r3, r2
 800957c:	881b      	ldrh	r3, [r3, #0]
 800957e:	b29b      	uxth	r3, r3
 8009580:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009588:	81fb      	strh	r3, [r7, #14]
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	441a      	add	r2, r3
 8009594:	89fb      	ldrh	r3, [r7, #14]
 8009596:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800959a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800959e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	78db      	ldrb	r3, [r3, #3]
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d06c      	beq.n	800968c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4413      	add	r3, r2
 80095bc:	881b      	ldrh	r3, [r3, #0]
 80095be:	b29b      	uxth	r3, r3
 80095c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095c8:	81bb      	strh	r3, [r7, #12]
 80095ca:	89bb      	ldrh	r3, [r7, #12]
 80095cc:	f083 0320 	eor.w	r3, r3, #32
 80095d0:	81bb      	strh	r3, [r7, #12]
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	441a      	add	r2, r3
 80095dc:	89bb      	ldrh	r3, [r7, #12]
 80095de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	8013      	strh	r3, [r2, #0]
 80095f2:	e04b      	b.n	800968c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	4413      	add	r3, r2
 80095fe:	881b      	ldrh	r3, [r3, #0]
 8009600:	82fb      	strh	r3, [r7, #22]
 8009602:	8afb      	ldrh	r3, [r7, #22]
 8009604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009608:	2b00      	cmp	r3, #0
 800960a:	d01b      	beq.n	8009644 <USB_EPClearStall+0x106>
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	4413      	add	r3, r2
 8009616:	881b      	ldrh	r3, [r3, #0]
 8009618:	b29b      	uxth	r3, r3
 800961a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800961e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009622:	82bb      	strh	r3, [r7, #20]
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	441a      	add	r2, r3
 800962e:	8abb      	ldrh	r3, [r7, #20]
 8009630:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009634:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009638:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800963c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009640:	b29b      	uxth	r3, r3
 8009642:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	4413      	add	r3, r2
 800964e:	881b      	ldrh	r3, [r3, #0]
 8009650:	b29b      	uxth	r3, r3
 8009652:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800965a:	827b      	strh	r3, [r7, #18]
 800965c:	8a7b      	ldrh	r3, [r7, #18]
 800965e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009662:	827b      	strh	r3, [r7, #18]
 8009664:	8a7b      	ldrh	r3, [r7, #18]
 8009666:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800966a:	827b      	strh	r3, [r7, #18]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	441a      	add	r2, r3
 8009676:	8a7b      	ldrh	r3, [r7, #18]
 8009678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800967c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009688:	b29b      	uxth	r3, r3
 800968a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	371c      	adds	r7, #28
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr

0800969a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800969a:	b480      	push	{r7}
 800969c:	b083      	sub	sp, #12
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
 80096a2:	460b      	mov	r3, r1
 80096a4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80096a6:	78fb      	ldrb	r3, [r7, #3]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d103      	bne.n	80096b4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2280      	movs	r2, #128	; 0x80
 80096b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	370c      	adds	r7, #12
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr

080096c2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80096c2:	b480      	push	{r7}
 80096c4:	b083      	sub	sp, #12
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80096ea:	68fb      	ldr	r3, [r7, #12]
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3714      	adds	r7, #20
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b08b      	sub	sp, #44	; 0x2c
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	4611      	mov	r1, r2
 8009704:	461a      	mov	r2, r3
 8009706:	460b      	mov	r3, r1
 8009708:	80fb      	strh	r3, [r7, #6]
 800970a:	4613      	mov	r3, r2
 800970c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800970e:	88bb      	ldrh	r3, [r7, #4]
 8009710:	3301      	adds	r3, #1
 8009712:	085b      	lsrs	r3, r3, #1
 8009714:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800971e:	88fb      	ldrh	r3, [r7, #6]
 8009720:	005a      	lsls	r2, r3, #1
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	4413      	add	r3, r2
 8009726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800972a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	627b      	str	r3, [r7, #36]	; 0x24
 8009730:	e01e      	b.n	8009770 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	3301      	adds	r3, #1
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	021b      	lsls	r3, r3, #8
 8009740:	b21a      	sxth	r2, r3
 8009742:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009746:	4313      	orrs	r3, r2
 8009748:	b21b      	sxth	r3, r3
 800974a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800974c:	6a3b      	ldr	r3, [r7, #32]
 800974e:	8a7a      	ldrh	r2, [r7, #18]
 8009750:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009752:	6a3b      	ldr	r3, [r7, #32]
 8009754:	3302      	adds	r3, #2
 8009756:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009758:	6a3b      	ldr	r3, [r7, #32]
 800975a:	3302      	adds	r3, #2
 800975c:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800975e:	69fb      	ldr	r3, [r7, #28]
 8009760:	3301      	adds	r3, #1
 8009762:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	3301      	adds	r3, #1
 8009768:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800976a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976c:	3b01      	subs	r3, #1
 800976e:	627b      	str	r3, [r7, #36]	; 0x24
 8009770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009772:	2b00      	cmp	r3, #0
 8009774:	d1dd      	bne.n	8009732 <USB_WritePMA+0x3a>
  }
}
 8009776:	bf00      	nop
 8009778:	bf00      	nop
 800977a:	372c      	adds	r7, #44	; 0x2c
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009784:	b480      	push	{r7}
 8009786:	b08b      	sub	sp, #44	; 0x2c
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	4611      	mov	r1, r2
 8009790:	461a      	mov	r2, r3
 8009792:	460b      	mov	r3, r1
 8009794:	80fb      	strh	r3, [r7, #6]
 8009796:	4613      	mov	r3, r2
 8009798:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800979a:	88bb      	ldrh	r3, [r7, #4]
 800979c:	085b      	lsrs	r3, r3, #1
 800979e:	b29b      	uxth	r3, r3
 80097a0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80097aa:	88fb      	ldrh	r3, [r7, #6]
 80097ac:	005a      	lsls	r2, r3, #1
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	4413      	add	r3, r2
 80097b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097b6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	627b      	str	r3, [r7, #36]	; 0x24
 80097bc:	e01b      	b.n	80097f6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80097be:	6a3b      	ldr	r3, [r7, #32]
 80097c0:	881b      	ldrh	r3, [r3, #0]
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80097c6:	6a3b      	ldr	r3, [r7, #32]
 80097c8:	3302      	adds	r3, #2
 80097ca:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	b2da      	uxtb	r2, r3
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	3301      	adds	r3, #1
 80097d8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	0a1b      	lsrs	r3, r3, #8
 80097de:	b2da      	uxtb	r2, r3
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	3301      	adds	r3, #1
 80097e8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80097ea:	6a3b      	ldr	r3, [r7, #32]
 80097ec:	3302      	adds	r3, #2
 80097ee:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f2:	3b01      	subs	r3, #1
 80097f4:	627b      	str	r3, [r7, #36]	; 0x24
 80097f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d1e0      	bne.n	80097be <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80097fc:	88bb      	ldrh	r3, [r7, #4]
 80097fe:	f003 0301 	and.w	r3, r3, #1
 8009802:	b29b      	uxth	r3, r3
 8009804:	2b00      	cmp	r3, #0
 8009806:	d007      	beq.n	8009818 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8009808:	6a3b      	ldr	r3, [r7, #32]
 800980a:	881b      	ldrh	r3, [r3, #0]
 800980c:	b29b      	uxth	r3, r3
 800980e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	b2da      	uxtb	r2, r3
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	701a      	strb	r2, [r3, #0]
  }
}
 8009818:	bf00      	nop
 800981a:	372c      	adds	r7, #44	; 0x2c
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	460b      	mov	r3, r1
 800982e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009830:	2300      	movs	r3, #0
 8009832:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	7c1b      	ldrb	r3, [r3, #16]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d115      	bne.n	8009868 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800983c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009840:	2202      	movs	r2, #2
 8009842:	2181      	movs	r1, #129	; 0x81
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f001 fe62 	bl	800b50e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2201      	movs	r2, #1
 800984e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009850:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009854:	2202      	movs	r2, #2
 8009856:	2101      	movs	r1, #1
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f001 fe58 	bl	800b50e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2201      	movs	r2, #1
 8009862:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009866:	e012      	b.n	800988e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009868:	2340      	movs	r3, #64	; 0x40
 800986a:	2202      	movs	r2, #2
 800986c:	2181      	movs	r1, #129	; 0x81
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f001 fe4d 	bl	800b50e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800987a:	2340      	movs	r3, #64	; 0x40
 800987c:	2202      	movs	r2, #2
 800987e:	2101      	movs	r1, #1
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f001 fe44 	bl	800b50e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2201      	movs	r2, #1
 800988a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800988e:	2308      	movs	r3, #8
 8009890:	2203      	movs	r2, #3
 8009892:	2182      	movs	r1, #130	; 0x82
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f001 fe3a 	bl	800b50e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2201      	movs	r2, #1
 800989e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80098a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80098a4:	f001 ff5c 	bl	800b760 <USBD_static_malloc>
 80098a8:	4602      	mov	r2, r0
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d102      	bne.n	80098c0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80098ba:	2301      	movs	r3, #1
 80098bc:	73fb      	strb	r3, [r7, #15]
 80098be:	e026      	b.n	800990e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098c6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	2200      	movs	r2, #0
 80098d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	2200      	movs	r2, #0
 80098de:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	7c1b      	ldrb	r3, [r3, #16]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d109      	bne.n	80098fe <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80098f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098f4:	2101      	movs	r1, #1
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f001 fefb 	bl	800b6f2 <USBD_LL_PrepareReceive>
 80098fc:	e007      	b.n	800990e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009904:	2340      	movs	r3, #64	; 0x40
 8009906:	2101      	movs	r1, #1
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f001 fef2 	bl	800b6f2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800990e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009910:	4618      	mov	r0, r3
 8009912:	3710      	adds	r7, #16
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	460b      	mov	r3, r1
 8009922:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009924:	2300      	movs	r3, #0
 8009926:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009928:	2181      	movs	r1, #129	; 0x81
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f001 fe15 	bl	800b55a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009936:	2101      	movs	r1, #1
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f001 fe0e 	bl	800b55a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009946:	2182      	movs	r1, #130	; 0x82
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f001 fe06 	bl	800b55a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800995a:	2b00      	cmp	r3, #0
 800995c:	d00e      	beq.n	800997c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800996e:	4618      	mov	r0, r3
 8009970:	f001 ff04 	bl	800b77c <USBD_static_free>
    pdev->pClassData = NULL;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800997c:	7bfb      	ldrb	r3, [r7, #15]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b086      	sub	sp, #24
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
 800998e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009996:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009998:	2300      	movs	r3, #0
 800999a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800999c:	2300      	movs	r3, #0
 800999e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80099a0:	2300      	movs	r3, #0
 80099a2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d039      	beq.n	8009a24 <USBD_CDC_Setup+0x9e>
 80099b0:	2b20      	cmp	r3, #32
 80099b2:	d17f      	bne.n	8009ab4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	88db      	ldrh	r3, [r3, #6]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d029      	beq.n	8009a10 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	b25b      	sxtb	r3, r3
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	da11      	bge.n	80099ea <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	683a      	ldr	r2, [r7, #0]
 80099d0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80099d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80099d4:	683a      	ldr	r2, [r7, #0]
 80099d6:	88d2      	ldrh	r2, [r2, #6]
 80099d8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80099da:	6939      	ldr	r1, [r7, #16]
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	88db      	ldrh	r3, [r3, #6]
 80099e0:	461a      	mov	r2, r3
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f001 f9e3 	bl	800adae <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80099e8:	e06b      	b.n	8009ac2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	785a      	ldrb	r2, [r3, #1]
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	88db      	ldrh	r3, [r3, #6]
 80099f8:	b2da      	uxtb	r2, r3
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009a00:	6939      	ldr	r1, [r7, #16]
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	88db      	ldrh	r3, [r3, #6]
 8009a06:	461a      	mov	r2, r3
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f001 f9fe 	bl	800ae0a <USBD_CtlPrepareRx>
      break;
 8009a0e:	e058      	b.n	8009ac2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	683a      	ldr	r2, [r7, #0]
 8009a1a:	7850      	ldrb	r0, [r2, #1]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	6839      	ldr	r1, [r7, #0]
 8009a20:	4798      	blx	r3
      break;
 8009a22:	e04e      	b.n	8009ac2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	785b      	ldrb	r3, [r3, #1]
 8009a28:	2b0b      	cmp	r3, #11
 8009a2a:	d02e      	beq.n	8009a8a <USBD_CDC_Setup+0x104>
 8009a2c:	2b0b      	cmp	r3, #11
 8009a2e:	dc38      	bgt.n	8009aa2 <USBD_CDC_Setup+0x11c>
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d002      	beq.n	8009a3a <USBD_CDC_Setup+0xb4>
 8009a34:	2b0a      	cmp	r3, #10
 8009a36:	d014      	beq.n	8009a62 <USBD_CDC_Setup+0xdc>
 8009a38:	e033      	b.n	8009aa2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a40:	2b03      	cmp	r3, #3
 8009a42:	d107      	bne.n	8009a54 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009a44:	f107 030c 	add.w	r3, r7, #12
 8009a48:	2202      	movs	r2, #2
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f001 f9ae 	bl	800adae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a52:	e02e      	b.n	8009ab2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009a54:	6839      	ldr	r1, [r7, #0]
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f001 f93e 	bl	800acd8 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a5c:	2302      	movs	r3, #2
 8009a5e:	75fb      	strb	r3, [r7, #23]
          break;
 8009a60:	e027      	b.n	8009ab2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a68:	2b03      	cmp	r3, #3
 8009a6a:	d107      	bne.n	8009a7c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009a6c:	f107 030f 	add.w	r3, r7, #15
 8009a70:	2201      	movs	r2, #1
 8009a72:	4619      	mov	r1, r3
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f001 f99a 	bl	800adae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a7a:	e01a      	b.n	8009ab2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009a7c:	6839      	ldr	r1, [r7, #0]
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f001 f92a 	bl	800acd8 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a84:	2302      	movs	r3, #2
 8009a86:	75fb      	strb	r3, [r7, #23]
          break;
 8009a88:	e013      	b.n	8009ab2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a90:	2b03      	cmp	r3, #3
 8009a92:	d00d      	beq.n	8009ab0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009a94:	6839      	ldr	r1, [r7, #0]
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f001 f91e 	bl	800acd8 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a9c:	2302      	movs	r3, #2
 8009a9e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009aa0:	e006      	b.n	8009ab0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009aa2:	6839      	ldr	r1, [r7, #0]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f001 f917 	bl	800acd8 <USBD_CtlError>
          ret = USBD_FAIL;
 8009aaa:	2302      	movs	r3, #2
 8009aac:	75fb      	strb	r3, [r7, #23]
          break;
 8009aae:	e000      	b.n	8009ab2 <USBD_CDC_Setup+0x12c>
          break;
 8009ab0:	bf00      	nop
      }
      break;
 8009ab2:	e006      	b.n	8009ac2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009ab4:	6839      	ldr	r1, [r7, #0]
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f001 f90e 	bl	800acd8 <USBD_CtlError>
      ret = USBD_FAIL;
 8009abc:	2302      	movs	r3, #2
 8009abe:	75fb      	strb	r3, [r7, #23]
      break;
 8009ac0:	bf00      	nop
  }

  return ret;
 8009ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3718      	adds	r7, #24
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ade:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ae6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d03a      	beq.n	8009b68 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009af2:	78fa      	ldrb	r2, [r7, #3]
 8009af4:	6879      	ldr	r1, [r7, #4]
 8009af6:	4613      	mov	r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4413      	add	r3, r2
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	440b      	add	r3, r1
 8009b00:	331c      	adds	r3, #28
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d029      	beq.n	8009b5c <USBD_CDC_DataIn+0x90>
 8009b08:	78fa      	ldrb	r2, [r7, #3]
 8009b0a:	6879      	ldr	r1, [r7, #4]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	4413      	add	r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	440b      	add	r3, r1
 8009b16:	331c      	adds	r3, #28
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	78f9      	ldrb	r1, [r7, #3]
 8009b1c:	68b8      	ldr	r0, [r7, #8]
 8009b1e:	460b      	mov	r3, r1
 8009b20:	009b      	lsls	r3, r3, #2
 8009b22:	440b      	add	r3, r1
 8009b24:	00db      	lsls	r3, r3, #3
 8009b26:	4403      	add	r3, r0
 8009b28:	3338      	adds	r3, #56	; 0x38
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009b30:	fb01 f303 	mul.w	r3, r1, r3
 8009b34:	1ad3      	subs	r3, r2, r3
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d110      	bne.n	8009b5c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009b3a:	78fa      	ldrb	r2, [r7, #3]
 8009b3c:	6879      	ldr	r1, [r7, #4]
 8009b3e:	4613      	mov	r3, r2
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	4413      	add	r3, r2
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	440b      	add	r3, r1
 8009b48:	331c      	adds	r3, #28
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009b4e:	78f9      	ldrb	r1, [r7, #3]
 8009b50:	2300      	movs	r3, #0
 8009b52:	2200      	movs	r2, #0
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f001 fda9 	bl	800b6ac <USBD_LL_Transmit>
 8009b5a:	e003      	b.n	8009b64 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009b64:	2300      	movs	r3, #0
 8009b66:	e000      	b.n	8009b6a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009b68:	2302      	movs	r3, #2
  }
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b084      	sub	sp, #16
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b84:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009b86:	78fb      	ldrb	r3, [r7, #3]
 8009b88:	4619      	mov	r1, r3
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f001 fdd4 	bl	800b738 <USBD_LL_GetRxDataSize>
 8009b90:	4602      	mov	r2, r0
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00d      	beq.n	8009bbe <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	68fa      	ldr	r2, [r7, #12]
 8009bac:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009bb0:	68fa      	ldr	r2, [r7, #12]
 8009bb2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009bb6:	4611      	mov	r1, r2
 8009bb8:	4798      	blx	r3

    return USBD_OK;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	e000      	b.n	8009bc0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009bbe:	2302      	movs	r3, #2
  }
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bd6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d015      	beq.n	8009c0e <USBD_CDC_EP0_RxReady+0x46>
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009be8:	2bff      	cmp	r3, #255	; 0xff
 8009bea:	d010      	beq.n	8009c0e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	68fa      	ldr	r2, [r7, #12]
 8009bf6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009bfa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009c02:	b292      	uxth	r2, r2
 8009c04:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	22ff      	movs	r2, #255	; 0xff
 8009c0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009c0e:	2300      	movs	r3, #0
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3710      	adds	r7, #16
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2243      	movs	r2, #67	; 0x43
 8009c24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009c26:	4b03      	ldr	r3, [pc, #12]	; (8009c34 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr
 8009c34:	20000094 	.word	0x20000094

08009c38 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2243      	movs	r2, #67	; 0x43
 8009c44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009c46:	4b03      	ldr	r3, [pc, #12]	; (8009c54 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr
 8009c54:	20000050 	.word	0x20000050

08009c58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2243      	movs	r2, #67	; 0x43
 8009c64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009c66:	4b03      	ldr	r3, [pc, #12]	; (8009c74 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr
 8009c74:	200000d8 	.word	0x200000d8

08009c78 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	220a      	movs	r2, #10
 8009c84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009c86:	4b03      	ldr	r3, [pc, #12]	; (8009c94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	370c      	adds	r7, #12
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr
 8009c94:	2000000c 	.word	0x2000000c

08009c98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009ca2:	2302      	movs	r3, #2
 8009ca4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d005      	beq.n	8009cb8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	683a      	ldr	r2, [r7, #0]
 8009cb0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3714      	adds	r7, #20
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr

08009cc6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009cc6:	b480      	push	{r7}
 8009cc8:	b087      	sub	sp, #28
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	60f8      	str	r0, [r7, #12]
 8009cce:	60b9      	str	r1, [r7, #8]
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cda:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009ce4:	88fa      	ldrh	r2, [r7, #6]
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	371c      	adds	r7, #28
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr

08009cfa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009cfa:	b480      	push	{r7}
 8009cfc:	b085      	sub	sp, #20
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
 8009d02:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d0a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	683a      	ldr	r2, [r7, #0]
 8009d10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3714      	adds	r7, #20
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr

08009d22 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b084      	sub	sp, #16
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d30:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d017      	beq.n	8009d6c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	7c1b      	ldrb	r3, [r3, #16]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d109      	bne.n	8009d58 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d4e:	2101      	movs	r1, #1
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f001 fcce 	bl	800b6f2 <USBD_LL_PrepareReceive>
 8009d56:	e007      	b.n	8009d68 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d5e:	2340      	movs	r3, #64	; 0x40
 8009d60:	2101      	movs	r1, #1
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f001 fcc5 	bl	800b6f2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	e000      	b.n	8009d6e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009d6c:	2302      	movs	r3, #2
  }
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3710      	adds	r7, #16
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b084      	sub	sp, #16
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	60f8      	str	r0, [r7, #12]
 8009d7e:	60b9      	str	r1, [r7, #8]
 8009d80:	4613      	mov	r3, r2
 8009d82:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d101      	bne.n	8009d8e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009d8a:	2302      	movs	r3, #2
 8009d8c:	e01a      	b.n	8009dc4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d003      	beq.n	8009da0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d003      	beq.n	8009dae <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	68ba      	ldr	r2, [r7, #8]
 8009daa:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2201      	movs	r2, #1
 8009db2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	79fa      	ldrb	r2, [r7, #7]
 8009dba:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009dbc:	68f8      	ldr	r0, [r7, #12]
 8009dbe:	f001 fb31 	bl	800b424 <USBD_LL_Init>

  return USBD_OK;
 8009dc2:	2300      	movs	r3, #0
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3710      	adds	r7, #16
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b085      	sub	sp, #20
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d006      	beq.n	8009dee <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	683a      	ldr	r2, [r7, #0]
 8009de4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009de8:	2300      	movs	r3, #0
 8009dea:	73fb      	strb	r3, [r7, #15]
 8009dec:	e001      	b.n	8009df2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009dee:	2302      	movs	r3, #2
 8009df0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3714      	adds	r7, #20
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f001 fb65 	bl	800b4d8 <USBD_LL_Start>

  return USBD_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009e20:	2300      	movs	r3, #0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	370c      	adds	r7, #12
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr

08009e2e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b084      	sub	sp, #16
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
 8009e36:	460b      	mov	r3, r1
 8009e38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009e3a:	2302      	movs	r3, #2
 8009e3c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d00c      	beq.n	8009e62 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	78fa      	ldrb	r2, [r7, #3]
 8009e52:	4611      	mov	r1, r2
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	4798      	blx	r3
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d101      	bne.n	8009e62 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3710      	adds	r7, #16
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	460b      	mov	r3, r1
 8009e76:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	78fa      	ldrb	r2, [r7, #3]
 8009e82:	4611      	mov	r1, r2
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	4798      	blx	r3

  return USBD_OK;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3708      	adds	r7, #8
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b082      	sub	sp, #8
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
 8009e9a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009ea2:	6839      	ldr	r1, [r7, #0]
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f000 feda 	bl	800ac5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2201      	movs	r2, #1
 8009eae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009eb8:	461a      	mov	r2, r3
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009ec6:	f003 031f 	and.w	r3, r3, #31
 8009eca:	2b02      	cmp	r3, #2
 8009ecc:	d016      	beq.n	8009efc <USBD_LL_SetupStage+0x6a>
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	d81c      	bhi.n	8009f0c <USBD_LL_SetupStage+0x7a>
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d002      	beq.n	8009edc <USBD_LL_SetupStage+0x4a>
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d008      	beq.n	8009eec <USBD_LL_SetupStage+0x5a>
 8009eda:	e017      	b.n	8009f0c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 f9cd 	bl	800a284 <USBD_StdDevReq>
      break;
 8009eea:	e01a      	b.n	8009f22 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 fa2f 	bl	800a358 <USBD_StdItfReq>
      break;
 8009efa:	e012      	b.n	8009f22 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009f02:	4619      	mov	r1, r3
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 fa6f 	bl	800a3e8 <USBD_StdEPReq>
      break;
 8009f0a:	e00a      	b.n	8009f22 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009f12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	4619      	mov	r1, r3
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f001 fb3c 	bl	800b598 <USBD_LL_StallEP>
      break;
 8009f20:	bf00      	nop
  }

  return USBD_OK;
 8009f22:	2300      	movs	r3, #0
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3708      	adds	r7, #8
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b086      	sub	sp, #24
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	460b      	mov	r3, r1
 8009f36:	607a      	str	r2, [r7, #4]
 8009f38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009f3a:	7afb      	ldrb	r3, [r7, #11]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d14b      	bne.n	8009fd8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009f46:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f4e:	2b03      	cmp	r3, #3
 8009f50:	d134      	bne.n	8009fbc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	68da      	ldr	r2, [r3, #12]
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	691b      	ldr	r3, [r3, #16]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d919      	bls.n	8009f92 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	68da      	ldr	r2, [r3, #12]
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	691b      	ldr	r3, [r3, #16]
 8009f66:	1ad2      	subs	r2, r2, r3
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	68da      	ldr	r2, [r3, #12]
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d203      	bcs.n	8009f80 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	e002      	b.n	8009f86 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	461a      	mov	r2, r3
 8009f88:	6879      	ldr	r1, [r7, #4]
 8009f8a:	68f8      	ldr	r0, [r7, #12]
 8009f8c:	f000 ff5b 	bl	800ae46 <USBD_CtlContinueRx>
 8009f90:	e038      	b.n	800a004 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f98:	691b      	ldr	r3, [r3, #16]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00a      	beq.n	8009fb4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009fa4:	2b03      	cmp	r3, #3
 8009fa6:	d105      	bne.n	8009fb4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fae:	691b      	ldr	r3, [r3, #16]
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f000 ff58 	bl	800ae6a <USBD_CtlSendStatus>
 8009fba:	e023      	b.n	800a004 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009fc2:	2b05      	cmp	r3, #5
 8009fc4:	d11e      	bne.n	800a004 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009fce:	2100      	movs	r1, #0
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f001 fae1 	bl	800b598 <USBD_LL_StallEP>
 8009fd6:	e015      	b.n	800a004 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fde:	699b      	ldr	r3, [r3, #24]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d00d      	beq.n	800a000 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009fea:	2b03      	cmp	r3, #3
 8009fec:	d108      	bne.n	800a000 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ff4:	699b      	ldr	r3, [r3, #24]
 8009ff6:	7afa      	ldrb	r2, [r7, #11]
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	4798      	blx	r3
 8009ffe:	e001      	b.n	800a004 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a000:	2302      	movs	r3, #2
 800a002:	e000      	b.n	800a006 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3718      	adds	r7, #24
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	b086      	sub	sp, #24
 800a012:	af00      	add	r7, sp, #0
 800a014:	60f8      	str	r0, [r7, #12]
 800a016:	460b      	mov	r3, r1
 800a018:	607a      	str	r2, [r7, #4]
 800a01a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a01c:	7afb      	ldrb	r3, [r7, #11]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d17f      	bne.n	800a122 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	3314      	adds	r3, #20
 800a026:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a02e:	2b02      	cmp	r3, #2
 800a030:	d15c      	bne.n	800a0ec <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	68da      	ldr	r2, [r3, #12]
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d915      	bls.n	800a06a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	68da      	ldr	r2, [r3, #12]
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	691b      	ldr	r3, [r3, #16]
 800a046:	1ad2      	subs	r2, r2, r3
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	68db      	ldr	r3, [r3, #12]
 800a050:	b29b      	uxth	r3, r3
 800a052:	461a      	mov	r2, r3
 800a054:	6879      	ldr	r1, [r7, #4]
 800a056:	68f8      	ldr	r0, [r7, #12]
 800a058:	f000 fec5 	bl	800ade6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a05c:	2300      	movs	r3, #0
 800a05e:	2200      	movs	r2, #0
 800a060:	2100      	movs	r1, #0
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f001 fb45 	bl	800b6f2 <USBD_LL_PrepareReceive>
 800a068:	e04e      	b.n	800a108 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	697a      	ldr	r2, [r7, #20]
 800a070:	6912      	ldr	r2, [r2, #16]
 800a072:	fbb3 f1f2 	udiv	r1, r3, r2
 800a076:	fb01 f202 	mul.w	r2, r1, r2
 800a07a:	1a9b      	subs	r3, r3, r2
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d11c      	bne.n	800a0ba <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	689a      	ldr	r2, [r3, #8]
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a088:	429a      	cmp	r2, r3
 800a08a:	d316      	bcc.n	800a0ba <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	689a      	ldr	r2, [r3, #8]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a096:	429a      	cmp	r2, r3
 800a098:	d20f      	bcs.n	800a0ba <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a09a:	2200      	movs	r2, #0
 800a09c:	2100      	movs	r1, #0
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	f000 fea1 	bl	800ade6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	68f8      	ldr	r0, [r7, #12]
 800a0b4:	f001 fb1d 	bl	800b6f2 <USBD_LL_PrepareReceive>
 800a0b8:	e026      	b.n	800a108 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0c0:	68db      	ldr	r3, [r3, #12]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d00a      	beq.n	800a0dc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a0cc:	2b03      	cmp	r3, #3
 800a0ce:	d105      	bne.n	800a0dc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a0dc:	2180      	movs	r1, #128	; 0x80
 800a0de:	68f8      	ldr	r0, [r7, #12]
 800a0e0:	f001 fa5a 	bl	800b598 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a0e4:	68f8      	ldr	r0, [r7, #12]
 800a0e6:	f000 fed3 	bl	800ae90 <USBD_CtlReceiveStatus>
 800a0ea:	e00d      	b.n	800a108 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a0f2:	2b04      	cmp	r3, #4
 800a0f4:	d004      	beq.n	800a100 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d103      	bne.n	800a108 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a100:	2180      	movs	r1, #128	; 0x80
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f001 fa48 	bl	800b598 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d11d      	bne.n	800a14e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a112:	68f8      	ldr	r0, [r7, #12]
 800a114:	f7ff fe80 	bl	8009e18 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a120:	e015      	b.n	800a14e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a128:	695b      	ldr	r3, [r3, #20]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00d      	beq.n	800a14a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a134:	2b03      	cmp	r3, #3
 800a136:	d108      	bne.n	800a14a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a13e:	695b      	ldr	r3, [r3, #20]
 800a140:	7afa      	ldrb	r2, [r7, #11]
 800a142:	4611      	mov	r1, r2
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	4798      	blx	r3
 800a148:	e001      	b.n	800a14e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a14a:	2302      	movs	r3, #2
 800a14c:	e000      	b.n	800a150 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	3718      	adds	r7, #24
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a160:	2340      	movs	r3, #64	; 0x40
 800a162:	2200      	movs	r2, #0
 800a164:	2100      	movs	r1, #0
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f001 f9d1 	bl	800b50e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2240      	movs	r2, #64	; 0x40
 800a178:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a17c:	2340      	movs	r3, #64	; 0x40
 800a17e:	2200      	movs	r2, #0
 800a180:	2180      	movs	r1, #128	; 0x80
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f001 f9c3 	bl	800b50e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2201      	movs	r2, #1
 800a18c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2240      	movs	r2, #64	; 0x40
 800a192:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2201      	movs	r2, #1
 800a198:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d009      	beq.n	800a1d0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	6852      	ldr	r2, [r2, #4]
 800a1c8:	b2d2      	uxtb	r2, r2
 800a1ca:	4611      	mov	r1, r2
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	4798      	blx	r3
  }

  return USBD_OK;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a1da:	b480      	push	{r7}
 800a1dc:	b083      	sub	sp, #12
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	78fa      	ldrb	r2, [r7, #3]
 800a1ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a1ec:	2300      	movs	r3, #0
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	370c      	adds	r7, #12
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr

0800a1fa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a1fa:	b480      	push	{r7}
 800a1fc:	b083      	sub	sp, #12
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2204      	movs	r2, #4
 800a212:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a232:	2b04      	cmp	r3, #4
 800a234:	d105      	bne.n	800a242 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	370c      	adds	r7, #12
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a25e:	2b03      	cmp	r3, #3
 800a260:	d10b      	bne.n	800a27a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a268:	69db      	ldr	r3, [r3, #28]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d005      	beq.n	800a27a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a274:	69db      	ldr	r3, [r3, #28]
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a27a:	2300      	movs	r3, #0
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3708      	adds	r7, #8
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a28e:	2300      	movs	r3, #0
 800a290:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a29a:	2b40      	cmp	r3, #64	; 0x40
 800a29c:	d005      	beq.n	800a2aa <USBD_StdDevReq+0x26>
 800a29e:	2b40      	cmp	r3, #64	; 0x40
 800a2a0:	d84f      	bhi.n	800a342 <USBD_StdDevReq+0xbe>
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d009      	beq.n	800a2ba <USBD_StdDevReq+0x36>
 800a2a6:	2b20      	cmp	r3, #32
 800a2a8:	d14b      	bne.n	800a342 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	6839      	ldr	r1, [r7, #0]
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	4798      	blx	r3
      break;
 800a2b8:	e048      	b.n	800a34c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	785b      	ldrb	r3, [r3, #1]
 800a2be:	2b09      	cmp	r3, #9
 800a2c0:	d839      	bhi.n	800a336 <USBD_StdDevReq+0xb2>
 800a2c2:	a201      	add	r2, pc, #4	; (adr r2, 800a2c8 <USBD_StdDevReq+0x44>)
 800a2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c8:	0800a319 	.word	0x0800a319
 800a2cc:	0800a32d 	.word	0x0800a32d
 800a2d0:	0800a337 	.word	0x0800a337
 800a2d4:	0800a323 	.word	0x0800a323
 800a2d8:	0800a337 	.word	0x0800a337
 800a2dc:	0800a2fb 	.word	0x0800a2fb
 800a2e0:	0800a2f1 	.word	0x0800a2f1
 800a2e4:	0800a337 	.word	0x0800a337
 800a2e8:	0800a30f 	.word	0x0800a30f
 800a2ec:	0800a305 	.word	0x0800a305
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a2f0:	6839      	ldr	r1, [r7, #0]
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 f9dc 	bl	800a6b0 <USBD_GetDescriptor>
          break;
 800a2f8:	e022      	b.n	800a340 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a2fa:	6839      	ldr	r1, [r7, #0]
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 fb3f 	bl	800a980 <USBD_SetAddress>
          break;
 800a302:	e01d      	b.n	800a340 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a304:	6839      	ldr	r1, [r7, #0]
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 fb7e 	bl	800aa08 <USBD_SetConfig>
          break;
 800a30c:	e018      	b.n	800a340 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a30e:	6839      	ldr	r1, [r7, #0]
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 fc07 	bl	800ab24 <USBD_GetConfig>
          break;
 800a316:	e013      	b.n	800a340 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a318:	6839      	ldr	r1, [r7, #0]
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 fc37 	bl	800ab8e <USBD_GetStatus>
          break;
 800a320:	e00e      	b.n	800a340 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a322:	6839      	ldr	r1, [r7, #0]
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 fc65 	bl	800abf4 <USBD_SetFeature>
          break;
 800a32a:	e009      	b.n	800a340 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a32c:	6839      	ldr	r1, [r7, #0]
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 fc74 	bl	800ac1c <USBD_ClrFeature>
          break;
 800a334:	e004      	b.n	800a340 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a336:	6839      	ldr	r1, [r7, #0]
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 fccd 	bl	800acd8 <USBD_CtlError>
          break;
 800a33e:	bf00      	nop
      }
      break;
 800a340:	e004      	b.n	800a34c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a342:	6839      	ldr	r1, [r7, #0]
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 fcc7 	bl	800acd8 <USBD_CtlError>
      break;
 800a34a:	bf00      	nop
  }

  return ret;
 800a34c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop

0800a358 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b084      	sub	sp, #16
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a362:	2300      	movs	r3, #0
 800a364:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a36e:	2b40      	cmp	r3, #64	; 0x40
 800a370:	d005      	beq.n	800a37e <USBD_StdItfReq+0x26>
 800a372:	2b40      	cmp	r3, #64	; 0x40
 800a374:	d82e      	bhi.n	800a3d4 <USBD_StdItfReq+0x7c>
 800a376:	2b00      	cmp	r3, #0
 800a378:	d001      	beq.n	800a37e <USBD_StdItfReq+0x26>
 800a37a:	2b20      	cmp	r3, #32
 800a37c:	d12a      	bne.n	800a3d4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a384:	3b01      	subs	r3, #1
 800a386:	2b02      	cmp	r3, #2
 800a388:	d81d      	bhi.n	800a3c6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	889b      	ldrh	r3, [r3, #4]
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	2b01      	cmp	r3, #1
 800a392:	d813      	bhi.n	800a3bc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a39a:	689b      	ldr	r3, [r3, #8]
 800a39c:	6839      	ldr	r1, [r7, #0]
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	4798      	blx	r3
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	88db      	ldrh	r3, [r3, #6]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d110      	bne.n	800a3d0 <USBD_StdItfReq+0x78>
 800a3ae:	7bfb      	ldrb	r3, [r7, #15]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d10d      	bne.n	800a3d0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 fd58 	bl	800ae6a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a3ba:	e009      	b.n	800a3d0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a3bc:	6839      	ldr	r1, [r7, #0]
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 fc8a 	bl	800acd8 <USBD_CtlError>
          break;
 800a3c4:	e004      	b.n	800a3d0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a3c6:	6839      	ldr	r1, [r7, #0]
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 fc85 	bl	800acd8 <USBD_CtlError>
          break;
 800a3ce:	e000      	b.n	800a3d2 <USBD_StdItfReq+0x7a>
          break;
 800a3d0:	bf00      	nop
      }
      break;
 800a3d2:	e004      	b.n	800a3de <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a3d4:	6839      	ldr	r1, [r7, #0]
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 fc7e 	bl	800acd8 <USBD_CtlError>
      break;
 800a3dc:	bf00      	nop
  }

  return USBD_OK;
 800a3de:	2300      	movs	r3, #0
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3710      	adds	r7, #16
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	889b      	ldrh	r3, [r3, #4]
 800a3fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a404:	2b40      	cmp	r3, #64	; 0x40
 800a406:	d007      	beq.n	800a418 <USBD_StdEPReq+0x30>
 800a408:	2b40      	cmp	r3, #64	; 0x40
 800a40a:	f200 8146 	bhi.w	800a69a <USBD_StdEPReq+0x2b2>
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d00a      	beq.n	800a428 <USBD_StdEPReq+0x40>
 800a412:	2b20      	cmp	r3, #32
 800a414:	f040 8141 	bne.w	800a69a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	6839      	ldr	r1, [r7, #0]
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	4798      	blx	r3
      break;
 800a426:	e13d      	b.n	800a6a4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a430:	2b20      	cmp	r3, #32
 800a432:	d10a      	bne.n	800a44a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	6839      	ldr	r1, [r7, #0]
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	4798      	blx	r3
 800a442:	4603      	mov	r3, r0
 800a444:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a446:	7bfb      	ldrb	r3, [r7, #15]
 800a448:	e12d      	b.n	800a6a6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	785b      	ldrb	r3, [r3, #1]
 800a44e:	2b03      	cmp	r3, #3
 800a450:	d007      	beq.n	800a462 <USBD_StdEPReq+0x7a>
 800a452:	2b03      	cmp	r3, #3
 800a454:	f300 811b 	bgt.w	800a68e <USBD_StdEPReq+0x2a6>
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d072      	beq.n	800a542 <USBD_StdEPReq+0x15a>
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d03a      	beq.n	800a4d6 <USBD_StdEPReq+0xee>
 800a460:	e115      	b.n	800a68e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a468:	2b02      	cmp	r3, #2
 800a46a:	d002      	beq.n	800a472 <USBD_StdEPReq+0x8a>
 800a46c:	2b03      	cmp	r3, #3
 800a46e:	d015      	beq.n	800a49c <USBD_StdEPReq+0xb4>
 800a470:	e02b      	b.n	800a4ca <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a472:	7bbb      	ldrb	r3, [r7, #14]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d00c      	beq.n	800a492 <USBD_StdEPReq+0xaa>
 800a478:	7bbb      	ldrb	r3, [r7, #14]
 800a47a:	2b80      	cmp	r3, #128	; 0x80
 800a47c:	d009      	beq.n	800a492 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a47e:	7bbb      	ldrb	r3, [r7, #14]
 800a480:	4619      	mov	r1, r3
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f001 f888 	bl	800b598 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a488:	2180      	movs	r1, #128	; 0x80
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f001 f884 	bl	800b598 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a490:	e020      	b.n	800a4d4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a492:	6839      	ldr	r1, [r7, #0]
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 fc1f 	bl	800acd8 <USBD_CtlError>
              break;
 800a49a:	e01b      	b.n	800a4d4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	885b      	ldrh	r3, [r3, #2]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d10e      	bne.n	800a4c2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a4a4:	7bbb      	ldrb	r3, [r7, #14]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d00b      	beq.n	800a4c2 <USBD_StdEPReq+0xda>
 800a4aa:	7bbb      	ldrb	r3, [r7, #14]
 800a4ac:	2b80      	cmp	r3, #128	; 0x80
 800a4ae:	d008      	beq.n	800a4c2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	88db      	ldrh	r3, [r3, #6]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d104      	bne.n	800a4c2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a4b8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f001 f86b 	bl	800b598 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 fcd1 	bl	800ae6a <USBD_CtlSendStatus>

              break;
 800a4c8:	e004      	b.n	800a4d4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a4ca:	6839      	ldr	r1, [r7, #0]
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 fc03 	bl	800acd8 <USBD_CtlError>
              break;
 800a4d2:	bf00      	nop
          }
          break;
 800a4d4:	e0e0      	b.n	800a698 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4dc:	2b02      	cmp	r3, #2
 800a4de:	d002      	beq.n	800a4e6 <USBD_StdEPReq+0xfe>
 800a4e0:	2b03      	cmp	r3, #3
 800a4e2:	d015      	beq.n	800a510 <USBD_StdEPReq+0x128>
 800a4e4:	e026      	b.n	800a534 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4e6:	7bbb      	ldrb	r3, [r7, #14]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00c      	beq.n	800a506 <USBD_StdEPReq+0x11e>
 800a4ec:	7bbb      	ldrb	r3, [r7, #14]
 800a4ee:	2b80      	cmp	r3, #128	; 0x80
 800a4f0:	d009      	beq.n	800a506 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a4f2:	7bbb      	ldrb	r3, [r7, #14]
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f001 f84e 	bl	800b598 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a4fc:	2180      	movs	r1, #128	; 0x80
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f001 f84a 	bl	800b598 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a504:	e01c      	b.n	800a540 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a506:	6839      	ldr	r1, [r7, #0]
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 fbe5 	bl	800acd8 <USBD_CtlError>
              break;
 800a50e:	e017      	b.n	800a540 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	885b      	ldrh	r3, [r3, #2]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d112      	bne.n	800a53e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a518:	7bbb      	ldrb	r3, [r7, #14]
 800a51a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d004      	beq.n	800a52c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a522:	7bbb      	ldrb	r3, [r7, #14]
 800a524:	4619      	mov	r1, r3
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f001 f855 	bl	800b5d6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 fc9c 	bl	800ae6a <USBD_CtlSendStatus>
              }
              break;
 800a532:	e004      	b.n	800a53e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a534:	6839      	ldr	r1, [r7, #0]
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 fbce 	bl	800acd8 <USBD_CtlError>
              break;
 800a53c:	e000      	b.n	800a540 <USBD_StdEPReq+0x158>
              break;
 800a53e:	bf00      	nop
          }
          break;
 800a540:	e0aa      	b.n	800a698 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a548:	2b02      	cmp	r3, #2
 800a54a:	d002      	beq.n	800a552 <USBD_StdEPReq+0x16a>
 800a54c:	2b03      	cmp	r3, #3
 800a54e:	d032      	beq.n	800a5b6 <USBD_StdEPReq+0x1ce>
 800a550:	e097      	b.n	800a682 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a552:	7bbb      	ldrb	r3, [r7, #14]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d007      	beq.n	800a568 <USBD_StdEPReq+0x180>
 800a558:	7bbb      	ldrb	r3, [r7, #14]
 800a55a:	2b80      	cmp	r3, #128	; 0x80
 800a55c:	d004      	beq.n	800a568 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a55e:	6839      	ldr	r1, [r7, #0]
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 fbb9 	bl	800acd8 <USBD_CtlError>
                break;
 800a566:	e091      	b.n	800a68c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a568:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	da0b      	bge.n	800a588 <USBD_StdEPReq+0x1a0>
 800a570:	7bbb      	ldrb	r3, [r7, #14]
 800a572:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a576:	4613      	mov	r3, r2
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	4413      	add	r3, r2
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	3310      	adds	r3, #16
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	4413      	add	r3, r2
 800a584:	3304      	adds	r3, #4
 800a586:	e00b      	b.n	800a5a0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a588:	7bbb      	ldrb	r3, [r7, #14]
 800a58a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a58e:	4613      	mov	r3, r2
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	4413      	add	r3, r2
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	4413      	add	r3, r2
 800a59e:	3304      	adds	r3, #4
 800a5a0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	2202      	movs	r2, #2
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 fbfd 	bl	800adae <USBD_CtlSendData>
              break;
 800a5b4:	e06a      	b.n	800a68c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a5b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	da11      	bge.n	800a5e2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a5be:	7bbb      	ldrb	r3, [r7, #14]
 800a5c0:	f003 020f 	and.w	r2, r3, #15
 800a5c4:	6879      	ldr	r1, [r7, #4]
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	009b      	lsls	r3, r3, #2
 800a5ca:	4413      	add	r3, r2
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	440b      	add	r3, r1
 800a5d0:	3318      	adds	r3, #24
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d117      	bne.n	800a608 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a5d8:	6839      	ldr	r1, [r7, #0]
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f000 fb7c 	bl	800acd8 <USBD_CtlError>
                  break;
 800a5e0:	e054      	b.n	800a68c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a5e2:	7bbb      	ldrb	r3, [r7, #14]
 800a5e4:	f003 020f 	and.w	r2, r3, #15
 800a5e8:	6879      	ldr	r1, [r7, #4]
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	4413      	add	r3, r2
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	440b      	add	r3, r1
 800a5f4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d104      	bne.n	800a608 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a5fe:	6839      	ldr	r1, [r7, #0]
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 fb69 	bl	800acd8 <USBD_CtlError>
                  break;
 800a606:	e041      	b.n	800a68c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a608:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	da0b      	bge.n	800a628 <USBD_StdEPReq+0x240>
 800a610:	7bbb      	ldrb	r3, [r7, #14]
 800a612:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a616:	4613      	mov	r3, r2
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	4413      	add	r3, r2
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	3310      	adds	r3, #16
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	4413      	add	r3, r2
 800a624:	3304      	adds	r3, #4
 800a626:	e00b      	b.n	800a640 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a628:	7bbb      	ldrb	r3, [r7, #14]
 800a62a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a62e:	4613      	mov	r3, r2
 800a630:	009b      	lsls	r3, r3, #2
 800a632:	4413      	add	r3, r2
 800a634:	009b      	lsls	r3, r3, #2
 800a636:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	4413      	add	r3, r2
 800a63e:	3304      	adds	r3, #4
 800a640:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a642:	7bbb      	ldrb	r3, [r7, #14]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d002      	beq.n	800a64e <USBD_StdEPReq+0x266>
 800a648:	7bbb      	ldrb	r3, [r7, #14]
 800a64a:	2b80      	cmp	r3, #128	; 0x80
 800a64c:	d103      	bne.n	800a656 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	2200      	movs	r2, #0
 800a652:	601a      	str	r2, [r3, #0]
 800a654:	e00e      	b.n	800a674 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a656:	7bbb      	ldrb	r3, [r7, #14]
 800a658:	4619      	mov	r1, r3
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 ffda 	bl	800b614 <USBD_LL_IsStallEP>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d003      	beq.n	800a66e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	2201      	movs	r2, #1
 800a66a:	601a      	str	r2, [r3, #0]
 800a66c:	e002      	b.n	800a674 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	2200      	movs	r2, #0
 800a672:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	2202      	movs	r2, #2
 800a678:	4619      	mov	r1, r3
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 fb97 	bl	800adae <USBD_CtlSendData>
              break;
 800a680:	e004      	b.n	800a68c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a682:	6839      	ldr	r1, [r7, #0]
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 fb27 	bl	800acd8 <USBD_CtlError>
              break;
 800a68a:	bf00      	nop
          }
          break;
 800a68c:	e004      	b.n	800a698 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a68e:	6839      	ldr	r1, [r7, #0]
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 fb21 	bl	800acd8 <USBD_CtlError>
          break;
 800a696:	bf00      	nop
      }
      break;
 800a698:	e004      	b.n	800a6a4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a69a:	6839      	ldr	r1, [r7, #0]
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 fb1b 	bl	800acd8 <USBD_CtlError>
      break;
 800a6a2:	bf00      	nop
  }

  return ret;
 800a6a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3710      	adds	r7, #16
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
	...

0800a6b0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	885b      	ldrh	r3, [r3, #2]
 800a6ca:	0a1b      	lsrs	r3, r3, #8
 800a6cc:	b29b      	uxth	r3, r3
 800a6ce:	3b01      	subs	r3, #1
 800a6d0:	2b06      	cmp	r3, #6
 800a6d2:	f200 8128 	bhi.w	800a926 <USBD_GetDescriptor+0x276>
 800a6d6:	a201      	add	r2, pc, #4	; (adr r2, 800a6dc <USBD_GetDescriptor+0x2c>)
 800a6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6dc:	0800a6f9 	.word	0x0800a6f9
 800a6e0:	0800a711 	.word	0x0800a711
 800a6e4:	0800a751 	.word	0x0800a751
 800a6e8:	0800a927 	.word	0x0800a927
 800a6ec:	0800a927 	.word	0x0800a927
 800a6f0:	0800a8c7 	.word	0x0800a8c7
 800a6f4:	0800a8f3 	.word	0x0800a8f3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	7c12      	ldrb	r2, [r2, #16]
 800a704:	f107 0108 	add.w	r1, r7, #8
 800a708:	4610      	mov	r0, r2
 800a70a:	4798      	blx	r3
 800a70c:	60f8      	str	r0, [r7, #12]
      break;
 800a70e:	e112      	b.n	800a936 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	7c1b      	ldrb	r3, [r3, #16]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d10d      	bne.n	800a734 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a71e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a720:	f107 0208 	add.w	r2, r7, #8
 800a724:	4610      	mov	r0, r2
 800a726:	4798      	blx	r3
 800a728:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	3301      	adds	r3, #1
 800a72e:	2202      	movs	r2, #2
 800a730:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a732:	e100      	b.n	800a936 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73c:	f107 0208 	add.w	r2, r7, #8
 800a740:	4610      	mov	r0, r2
 800a742:	4798      	blx	r3
 800a744:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	3301      	adds	r3, #1
 800a74a:	2202      	movs	r2, #2
 800a74c:	701a      	strb	r2, [r3, #0]
      break;
 800a74e:	e0f2      	b.n	800a936 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	885b      	ldrh	r3, [r3, #2]
 800a754:	b2db      	uxtb	r3, r3
 800a756:	2b05      	cmp	r3, #5
 800a758:	f200 80ac 	bhi.w	800a8b4 <USBD_GetDescriptor+0x204>
 800a75c:	a201      	add	r2, pc, #4	; (adr r2, 800a764 <USBD_GetDescriptor+0xb4>)
 800a75e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a762:	bf00      	nop
 800a764:	0800a77d 	.word	0x0800a77d
 800a768:	0800a7b1 	.word	0x0800a7b1
 800a76c:	0800a7e5 	.word	0x0800a7e5
 800a770:	0800a819 	.word	0x0800a819
 800a774:	0800a84d 	.word	0x0800a84d
 800a778:	0800a881 	.word	0x0800a881
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d00b      	beq.n	800a7a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	7c12      	ldrb	r2, [r2, #16]
 800a794:	f107 0108 	add.w	r1, r7, #8
 800a798:	4610      	mov	r0, r2
 800a79a:	4798      	blx	r3
 800a79c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a79e:	e091      	b.n	800a8c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7a0:	6839      	ldr	r1, [r7, #0]
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 fa98 	bl	800acd8 <USBD_CtlError>
            err++;
 800a7a8:	7afb      	ldrb	r3, [r7, #11]
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	72fb      	strb	r3, [r7, #11]
          break;
 800a7ae:	e089      	b.n	800a8c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d00b      	beq.n	800a7d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	7c12      	ldrb	r2, [r2, #16]
 800a7c8:	f107 0108 	add.w	r1, r7, #8
 800a7cc:	4610      	mov	r0, r2
 800a7ce:	4798      	blx	r3
 800a7d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7d2:	e077      	b.n	800a8c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7d4:	6839      	ldr	r1, [r7, #0]
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 fa7e 	bl	800acd8 <USBD_CtlError>
            err++;
 800a7dc:	7afb      	ldrb	r3, [r7, #11]
 800a7de:	3301      	adds	r3, #1
 800a7e0:	72fb      	strb	r3, [r7, #11]
          break;
 800a7e2:	e06f      	b.n	800a8c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d00b      	beq.n	800a808 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	7c12      	ldrb	r2, [r2, #16]
 800a7fc:	f107 0108 	add.w	r1, r7, #8
 800a800:	4610      	mov	r0, r2
 800a802:	4798      	blx	r3
 800a804:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a806:	e05d      	b.n	800a8c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a808:	6839      	ldr	r1, [r7, #0]
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 fa64 	bl	800acd8 <USBD_CtlError>
            err++;
 800a810:	7afb      	ldrb	r3, [r7, #11]
 800a812:	3301      	adds	r3, #1
 800a814:	72fb      	strb	r3, [r7, #11]
          break;
 800a816:	e055      	b.n	800a8c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a81e:	691b      	ldr	r3, [r3, #16]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d00b      	beq.n	800a83c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a82a:	691b      	ldr	r3, [r3, #16]
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	7c12      	ldrb	r2, [r2, #16]
 800a830:	f107 0108 	add.w	r1, r7, #8
 800a834:	4610      	mov	r0, r2
 800a836:	4798      	blx	r3
 800a838:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a83a:	e043      	b.n	800a8c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a83c:	6839      	ldr	r1, [r7, #0]
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 fa4a 	bl	800acd8 <USBD_CtlError>
            err++;
 800a844:	7afb      	ldrb	r3, [r7, #11]
 800a846:	3301      	adds	r3, #1
 800a848:	72fb      	strb	r3, [r7, #11]
          break;
 800a84a:	e03b      	b.n	800a8c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a852:	695b      	ldr	r3, [r3, #20]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d00b      	beq.n	800a870 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a85e:	695b      	ldr	r3, [r3, #20]
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	7c12      	ldrb	r2, [r2, #16]
 800a864:	f107 0108 	add.w	r1, r7, #8
 800a868:	4610      	mov	r0, r2
 800a86a:	4798      	blx	r3
 800a86c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a86e:	e029      	b.n	800a8c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a870:	6839      	ldr	r1, [r7, #0]
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 fa30 	bl	800acd8 <USBD_CtlError>
            err++;
 800a878:	7afb      	ldrb	r3, [r7, #11]
 800a87a:	3301      	adds	r3, #1
 800a87c:	72fb      	strb	r3, [r7, #11]
          break;
 800a87e:	e021      	b.n	800a8c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a886:	699b      	ldr	r3, [r3, #24]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00b      	beq.n	800a8a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a892:	699b      	ldr	r3, [r3, #24]
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	7c12      	ldrb	r2, [r2, #16]
 800a898:	f107 0108 	add.w	r1, r7, #8
 800a89c:	4610      	mov	r0, r2
 800a89e:	4798      	blx	r3
 800a8a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8a2:	e00f      	b.n	800a8c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8a4:	6839      	ldr	r1, [r7, #0]
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 fa16 	bl	800acd8 <USBD_CtlError>
            err++;
 800a8ac:	7afb      	ldrb	r3, [r7, #11]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	72fb      	strb	r3, [r7, #11]
          break;
 800a8b2:	e007      	b.n	800a8c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a8b4:	6839      	ldr	r1, [r7, #0]
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 fa0e 	bl	800acd8 <USBD_CtlError>
          err++;
 800a8bc:	7afb      	ldrb	r3, [r7, #11]
 800a8be:	3301      	adds	r3, #1
 800a8c0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a8c2:	e038      	b.n	800a936 <USBD_GetDescriptor+0x286>
 800a8c4:	e037      	b.n	800a936 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	7c1b      	ldrb	r3, [r3, #16]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d109      	bne.n	800a8e2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8d6:	f107 0208 	add.w	r2, r7, #8
 800a8da:	4610      	mov	r0, r2
 800a8dc:	4798      	blx	r3
 800a8de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a8e0:	e029      	b.n	800a936 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a8e2:	6839      	ldr	r1, [r7, #0]
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 f9f7 	bl	800acd8 <USBD_CtlError>
        err++;
 800a8ea:	7afb      	ldrb	r3, [r7, #11]
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	72fb      	strb	r3, [r7, #11]
      break;
 800a8f0:	e021      	b.n	800a936 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	7c1b      	ldrb	r3, [r3, #16]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d10d      	bne.n	800a916 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a902:	f107 0208 	add.w	r2, r7, #8
 800a906:	4610      	mov	r0, r2
 800a908:	4798      	blx	r3
 800a90a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	3301      	adds	r3, #1
 800a910:	2207      	movs	r2, #7
 800a912:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a914:	e00f      	b.n	800a936 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a916:	6839      	ldr	r1, [r7, #0]
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 f9dd 	bl	800acd8 <USBD_CtlError>
        err++;
 800a91e:	7afb      	ldrb	r3, [r7, #11]
 800a920:	3301      	adds	r3, #1
 800a922:	72fb      	strb	r3, [r7, #11]
      break;
 800a924:	e007      	b.n	800a936 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a926:	6839      	ldr	r1, [r7, #0]
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 f9d5 	bl	800acd8 <USBD_CtlError>
      err++;
 800a92e:	7afb      	ldrb	r3, [r7, #11]
 800a930:	3301      	adds	r3, #1
 800a932:	72fb      	strb	r3, [r7, #11]
      break;
 800a934:	bf00      	nop
  }

  if (err != 0U)
 800a936:	7afb      	ldrb	r3, [r7, #11]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d11c      	bne.n	800a976 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a93c:	893b      	ldrh	r3, [r7, #8]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d011      	beq.n	800a966 <USBD_GetDescriptor+0x2b6>
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	88db      	ldrh	r3, [r3, #6]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d00d      	beq.n	800a966 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	88da      	ldrh	r2, [r3, #6]
 800a94e:	893b      	ldrh	r3, [r7, #8]
 800a950:	4293      	cmp	r3, r2
 800a952:	bf28      	it	cs
 800a954:	4613      	movcs	r3, r2
 800a956:	b29b      	uxth	r3, r3
 800a958:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a95a:	893b      	ldrh	r3, [r7, #8]
 800a95c:	461a      	mov	r2, r3
 800a95e:	68f9      	ldr	r1, [r7, #12]
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 fa24 	bl	800adae <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	88db      	ldrh	r3, [r3, #6]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d104      	bne.n	800a978 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 fa7b 	bl	800ae6a <USBD_CtlSendStatus>
 800a974:	e000      	b.n	800a978 <USBD_GetDescriptor+0x2c8>
    return;
 800a976:	bf00      	nop
    }
  }
}
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop

0800a980 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	889b      	ldrh	r3, [r3, #4]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d130      	bne.n	800a9f4 <USBD_SetAddress+0x74>
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	88db      	ldrh	r3, [r3, #6]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d12c      	bne.n	800a9f4 <USBD_SetAddress+0x74>
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	885b      	ldrh	r3, [r3, #2]
 800a99e:	2b7f      	cmp	r3, #127	; 0x7f
 800a9a0:	d828      	bhi.n	800a9f4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	885b      	ldrh	r3, [r3, #2]
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9b4:	2b03      	cmp	r3, #3
 800a9b6:	d104      	bne.n	800a9c2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a9b8:	6839      	ldr	r1, [r7, #0]
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 f98c 	bl	800acd8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9c0:	e01d      	b.n	800a9fe <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	7bfa      	ldrb	r2, [r7, #15]
 800a9c6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a9ca:	7bfb      	ldrb	r3, [r7, #15]
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 fe4d 	bl	800b66e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 fa48 	bl	800ae6a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a9da:	7bfb      	ldrb	r3, [r7, #15]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d004      	beq.n	800a9ea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2202      	movs	r2, #2
 800a9e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9e8:	e009      	b.n	800a9fe <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9f2:	e004      	b.n	800a9fe <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a9f4:	6839      	ldr	r1, [r7, #0]
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 f96e 	bl	800acd8 <USBD_CtlError>
  }
}
 800a9fc:	bf00      	nop
 800a9fe:	bf00      	nop
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
	...

0800aa08 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	885b      	ldrh	r3, [r3, #2]
 800aa16:	b2da      	uxtb	r2, r3
 800aa18:	4b41      	ldr	r3, [pc, #260]	; (800ab20 <USBD_SetConfig+0x118>)
 800aa1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aa1c:	4b40      	ldr	r3, [pc, #256]	; (800ab20 <USBD_SetConfig+0x118>)
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d904      	bls.n	800aa2e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800aa24:	6839      	ldr	r1, [r7, #0]
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 f956 	bl	800acd8 <USBD_CtlError>
 800aa2c:	e075      	b.n	800ab1a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa34:	2b02      	cmp	r3, #2
 800aa36:	d002      	beq.n	800aa3e <USBD_SetConfig+0x36>
 800aa38:	2b03      	cmp	r3, #3
 800aa3a:	d023      	beq.n	800aa84 <USBD_SetConfig+0x7c>
 800aa3c:	e062      	b.n	800ab04 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800aa3e:	4b38      	ldr	r3, [pc, #224]	; (800ab20 <USBD_SetConfig+0x118>)
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d01a      	beq.n	800aa7c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800aa46:	4b36      	ldr	r3, [pc, #216]	; (800ab20 <USBD_SetConfig+0x118>)
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2203      	movs	r2, #3
 800aa54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aa58:	4b31      	ldr	r3, [pc, #196]	; (800ab20 <USBD_SetConfig+0x118>)
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f7ff f9e5 	bl	8009e2e <USBD_SetClassConfig>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b02      	cmp	r3, #2
 800aa68:	d104      	bne.n	800aa74 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800aa6a:	6839      	ldr	r1, [r7, #0]
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 f933 	bl	800acd8 <USBD_CtlError>
            return;
 800aa72:	e052      	b.n	800ab1a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 f9f8 	bl	800ae6a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800aa7a:	e04e      	b.n	800ab1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 f9f4 	bl	800ae6a <USBD_CtlSendStatus>
        break;
 800aa82:	e04a      	b.n	800ab1a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800aa84:	4b26      	ldr	r3, [pc, #152]	; (800ab20 <USBD_SetConfig+0x118>)
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d112      	bne.n	800aab2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2202      	movs	r2, #2
 800aa90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800aa94:	4b22      	ldr	r3, [pc, #136]	; (800ab20 <USBD_SetConfig+0x118>)
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	461a      	mov	r2, r3
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800aa9e:	4b20      	ldr	r3, [pc, #128]	; (800ab20 <USBD_SetConfig+0x118>)
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f7ff f9e1 	bl	8009e6c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f000 f9dd 	bl	800ae6a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800aab0:	e033      	b.n	800ab1a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800aab2:	4b1b      	ldr	r3, [pc, #108]	; (800ab20 <USBD_SetConfig+0x118>)
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	461a      	mov	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d01d      	beq.n	800aafc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	4619      	mov	r1, r3
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f7ff f9cf 	bl	8009e6c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800aace:	4b14      	ldr	r3, [pc, #80]	; (800ab20 <USBD_SetConfig+0x118>)
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	461a      	mov	r2, r3
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aad8:	4b11      	ldr	r3, [pc, #68]	; (800ab20 <USBD_SetConfig+0x118>)
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	4619      	mov	r1, r3
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f7ff f9a5 	bl	8009e2e <USBD_SetClassConfig>
 800aae4:	4603      	mov	r3, r0
 800aae6:	2b02      	cmp	r3, #2
 800aae8:	d104      	bne.n	800aaf4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800aaea:	6839      	ldr	r1, [r7, #0]
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 f8f3 	bl	800acd8 <USBD_CtlError>
            return;
 800aaf2:	e012      	b.n	800ab1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 f9b8 	bl	800ae6a <USBD_CtlSendStatus>
        break;
 800aafa:	e00e      	b.n	800ab1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 f9b4 	bl	800ae6a <USBD_CtlSendStatus>
        break;
 800ab02:	e00a      	b.n	800ab1a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800ab04:	6839      	ldr	r1, [r7, #0]
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 f8e6 	bl	800acd8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800ab0c:	4b04      	ldr	r3, [pc, #16]	; (800ab20 <USBD_SetConfig+0x118>)
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	4619      	mov	r1, r3
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f7ff f9aa 	bl	8009e6c <USBD_ClrClassConfig>
        break;
 800ab18:	bf00      	nop
    }
  }
}
 800ab1a:	3708      	adds	r7, #8
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}
 800ab20:	20000320 	.word	0x20000320

0800ab24 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	88db      	ldrh	r3, [r3, #6]
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d004      	beq.n	800ab40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ab36:	6839      	ldr	r1, [r7, #0]
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 f8cd 	bl	800acd8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ab3e:	e022      	b.n	800ab86 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	dc02      	bgt.n	800ab50 <USBD_GetConfig+0x2c>
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	dc03      	bgt.n	800ab56 <USBD_GetConfig+0x32>
 800ab4e:	e015      	b.n	800ab7c <USBD_GetConfig+0x58>
 800ab50:	2b03      	cmp	r3, #3
 800ab52:	d00b      	beq.n	800ab6c <USBD_GetConfig+0x48>
 800ab54:	e012      	b.n	800ab7c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	3308      	adds	r3, #8
 800ab60:	2201      	movs	r2, #1
 800ab62:	4619      	mov	r1, r3
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 f922 	bl	800adae <USBD_CtlSendData>
        break;
 800ab6a:	e00c      	b.n	800ab86 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	3304      	adds	r3, #4
 800ab70:	2201      	movs	r2, #1
 800ab72:	4619      	mov	r1, r3
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 f91a 	bl	800adae <USBD_CtlSendData>
        break;
 800ab7a:	e004      	b.n	800ab86 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800ab7c:	6839      	ldr	r1, [r7, #0]
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 f8aa 	bl	800acd8 <USBD_CtlError>
        break;
 800ab84:	bf00      	nop
}
 800ab86:	bf00      	nop
 800ab88:	3708      	adds	r7, #8
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}

0800ab8e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab8e:	b580      	push	{r7, lr}
 800ab90:	b082      	sub	sp, #8
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
 800ab96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab9e:	3b01      	subs	r3, #1
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	d81e      	bhi.n	800abe2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	88db      	ldrh	r3, [r3, #6]
 800aba8:	2b02      	cmp	r3, #2
 800abaa:	d004      	beq.n	800abb6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800abac:	6839      	ldr	r1, [r7, #0]
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 f892 	bl	800acd8 <USBD_CtlError>
        break;
 800abb4:	e01a      	b.n	800abec <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2201      	movs	r2, #1
 800abba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d005      	beq.n	800abd2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	f043 0202 	orr.w	r2, r3, #2
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	330c      	adds	r3, #12
 800abd6:	2202      	movs	r2, #2
 800abd8:	4619      	mov	r1, r3
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 f8e7 	bl	800adae <USBD_CtlSendData>
      break;
 800abe0:	e004      	b.n	800abec <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800abe2:	6839      	ldr	r1, [r7, #0]
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 f877 	bl	800acd8 <USBD_CtlError>
      break;
 800abea:	bf00      	nop
  }
}
 800abec:	bf00      	nop
 800abee:	3708      	adds	r7, #8
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	885b      	ldrh	r3, [r3, #2]
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d106      	bne.n	800ac14 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 f92b 	bl	800ae6a <USBD_CtlSendStatus>
  }
}
 800ac14:	bf00      	nop
 800ac16:	3708      	adds	r7, #8
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b082      	sub	sp, #8
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac2c:	3b01      	subs	r3, #1
 800ac2e:	2b02      	cmp	r3, #2
 800ac30:	d80b      	bhi.n	800ac4a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	885b      	ldrh	r3, [r3, #2]
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d10c      	bne.n	800ac54 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 f911 	bl	800ae6a <USBD_CtlSendStatus>
      }
      break;
 800ac48:	e004      	b.n	800ac54 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ac4a:	6839      	ldr	r1, [r7, #0]
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f000 f843 	bl	800acd8 <USBD_CtlError>
      break;
 800ac52:	e000      	b.n	800ac56 <USBD_ClrFeature+0x3a>
      break;
 800ac54:	bf00      	nop
  }
}
 800ac56:	bf00      	nop
 800ac58:	3708      	adds	r7, #8
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ac5e:	b480      	push	{r7}
 800ac60:	b083      	sub	sp, #12
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
 800ac66:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	781a      	ldrb	r2, [r3, #0]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	785a      	ldrb	r2, [r3, #1]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	3302      	adds	r3, #2
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	b29a      	uxth	r2, r3
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	3303      	adds	r3, #3
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	021b      	lsls	r3, r3, #8
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	4413      	add	r3, r2
 800ac8e:	b29a      	uxth	r2, r3
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	3304      	adds	r3, #4
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	b29a      	uxth	r2, r3
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	3305      	adds	r3, #5
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	b29b      	uxth	r3, r3
 800aca4:	021b      	lsls	r3, r3, #8
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	4413      	add	r3, r2
 800acaa:	b29a      	uxth	r2, r3
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	3306      	adds	r3, #6
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	b29a      	uxth	r2, r3
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	3307      	adds	r3, #7
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	021b      	lsls	r3, r3, #8
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	4413      	add	r3, r2
 800acc6:	b29a      	uxth	r2, r3
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	80da      	strh	r2, [r3, #6]

}
 800accc:	bf00      	nop
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ace2:	2180      	movs	r1, #128	; 0x80
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 fc57 	bl	800b598 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800acea:	2100      	movs	r1, #0
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 fc53 	bl	800b598 <USBD_LL_StallEP>
}
 800acf2:	bf00      	nop
 800acf4:	3708      	adds	r7, #8
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}

0800acfa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b086      	sub	sp, #24
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	60f8      	str	r0, [r7, #12]
 800ad02:	60b9      	str	r1, [r7, #8]
 800ad04:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ad06:	2300      	movs	r3, #0
 800ad08:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d032      	beq.n	800ad76 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ad10:	68f8      	ldr	r0, [r7, #12]
 800ad12:	f000 f834 	bl	800ad7e <USBD_GetLen>
 800ad16:	4603      	mov	r3, r0
 800ad18:	3301      	adds	r3, #1
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	005b      	lsls	r3, r3, #1
 800ad1e:	b29a      	uxth	r2, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ad24:	7dfb      	ldrb	r3, [r7, #23]
 800ad26:	1c5a      	adds	r2, r3, #1
 800ad28:	75fa      	strb	r2, [r7, #23]
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	4413      	add	r3, r2
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	7812      	ldrb	r2, [r2, #0]
 800ad34:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ad36:	7dfb      	ldrb	r3, [r7, #23]
 800ad38:	1c5a      	adds	r2, r3, #1
 800ad3a:	75fa      	strb	r2, [r7, #23]
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	4413      	add	r3, r2
 800ad42:	2203      	movs	r2, #3
 800ad44:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ad46:	e012      	b.n	800ad6e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	1c5a      	adds	r2, r3, #1
 800ad4c:	60fa      	str	r2, [r7, #12]
 800ad4e:	7dfa      	ldrb	r2, [r7, #23]
 800ad50:	1c51      	adds	r1, r2, #1
 800ad52:	75f9      	strb	r1, [r7, #23]
 800ad54:	4611      	mov	r1, r2
 800ad56:	68ba      	ldr	r2, [r7, #8]
 800ad58:	440a      	add	r2, r1
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ad5e:	7dfb      	ldrb	r3, [r7, #23]
 800ad60:	1c5a      	adds	r2, r3, #1
 800ad62:	75fa      	strb	r2, [r7, #23]
 800ad64:	461a      	mov	r2, r3
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	4413      	add	r3, r2
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d1e8      	bne.n	800ad48 <USBD_GetString+0x4e>
    }
  }
}
 800ad76:	bf00      	nop
 800ad78:	3718      	adds	r7, #24
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ad7e:	b480      	push	{r7}
 800ad80:	b085      	sub	sp, #20
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ad86:	2300      	movs	r3, #0
 800ad88:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800ad8a:	e005      	b.n	800ad98 <USBD_GetLen+0x1a>
  {
    len++;
 800ad8c:	7bfb      	ldrb	r3, [r7, #15]
 800ad8e:	3301      	adds	r3, #1
 800ad90:	73fb      	strb	r3, [r7, #15]
    buf++;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	3301      	adds	r3, #1
 800ad96:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1f5      	bne.n	800ad8c <USBD_GetLen+0xe>
  }

  return len;
 800ada0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3714      	adds	r7, #20
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr

0800adae <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b084      	sub	sp, #16
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	60f8      	str	r0, [r7, #12]
 800adb6:	60b9      	str	r1, [r7, #8]
 800adb8:	4613      	mov	r3, r2
 800adba:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2202      	movs	r2, #2
 800adc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800adc4:	88fa      	ldrh	r2, [r7, #6]
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800adca:	88fa      	ldrh	r2, [r7, #6]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800add0:	88fb      	ldrh	r3, [r7, #6]
 800add2:	68ba      	ldr	r2, [r7, #8]
 800add4:	2100      	movs	r1, #0
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	f000 fc68 	bl	800b6ac <USBD_LL_Transmit>

  return USBD_OK;
 800addc:	2300      	movs	r3, #0
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b084      	sub	sp, #16
 800adea:	af00      	add	r7, sp, #0
 800adec:	60f8      	str	r0, [r7, #12]
 800adee:	60b9      	str	r1, [r7, #8]
 800adf0:	4613      	mov	r3, r2
 800adf2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800adf4:	88fb      	ldrh	r3, [r7, #6]
 800adf6:	68ba      	ldr	r2, [r7, #8]
 800adf8:	2100      	movs	r1, #0
 800adfa:	68f8      	ldr	r0, [r7, #12]
 800adfc:	f000 fc56 	bl	800b6ac <USBD_LL_Transmit>

  return USBD_OK;
 800ae00:	2300      	movs	r3, #0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3710      	adds	r7, #16
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b084      	sub	sp, #16
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	60f8      	str	r0, [r7, #12]
 800ae12:	60b9      	str	r1, [r7, #8]
 800ae14:	4613      	mov	r3, r2
 800ae16:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2203      	movs	r2, #3
 800ae1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ae20:	88fa      	ldrh	r2, [r7, #6]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800ae28:	88fa      	ldrh	r2, [r7, #6]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae30:	88fb      	ldrh	r3, [r7, #6]
 800ae32:	68ba      	ldr	r2, [r7, #8]
 800ae34:	2100      	movs	r1, #0
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	f000 fc5b 	bl	800b6f2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3710      	adds	r7, #16
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}

0800ae46 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800ae46:	b580      	push	{r7, lr}
 800ae48:	b084      	sub	sp, #16
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	60f8      	str	r0, [r7, #12]
 800ae4e:	60b9      	str	r1, [r7, #8]
 800ae50:	4613      	mov	r3, r2
 800ae52:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae54:	88fb      	ldrh	r3, [r7, #6]
 800ae56:	68ba      	ldr	r2, [r7, #8]
 800ae58:	2100      	movs	r1, #0
 800ae5a:	68f8      	ldr	r0, [r7, #12]
 800ae5c:	f000 fc49 	bl	800b6f2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3710      	adds	r7, #16
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ae6a:	b580      	push	{r7, lr}
 800ae6c:	b082      	sub	sp, #8
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2204      	movs	r2, #4
 800ae76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	2100      	movs	r1, #0
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 fc13 	bl	800b6ac <USBD_LL_Transmit>

  return USBD_OK;
 800ae86:	2300      	movs	r3, #0
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3708      	adds	r7, #8
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2205      	movs	r2, #5
 800ae9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aea0:	2300      	movs	r3, #0
 800aea2:	2200      	movs	r2, #0
 800aea4:	2100      	movs	r1, #0
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 fc23 	bl	800b6f2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aeac:	2300      	movs	r3, #0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3708      	adds	r7, #8
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
	...

0800aeb8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800aebc:	2200      	movs	r2, #0
 800aebe:	4912      	ldr	r1, [pc, #72]	; (800af08 <MX_USB_DEVICE_Init+0x50>)
 800aec0:	4812      	ldr	r0, [pc, #72]	; (800af0c <MX_USB_DEVICE_Init+0x54>)
 800aec2:	f7fe ff58 	bl	8009d76 <USBD_Init>
 800aec6:	4603      	mov	r3, r0
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d001      	beq.n	800aed0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800aecc:	f7f5 fc84 	bl	80007d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800aed0:	490f      	ldr	r1, [pc, #60]	; (800af10 <MX_USB_DEVICE_Init+0x58>)
 800aed2:	480e      	ldr	r0, [pc, #56]	; (800af0c <MX_USB_DEVICE_Init+0x54>)
 800aed4:	f7fe ff7a 	bl	8009dcc <USBD_RegisterClass>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d001      	beq.n	800aee2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800aede:	f7f5 fc7b 	bl	80007d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800aee2:	490c      	ldr	r1, [pc, #48]	; (800af14 <MX_USB_DEVICE_Init+0x5c>)
 800aee4:	4809      	ldr	r0, [pc, #36]	; (800af0c <MX_USB_DEVICE_Init+0x54>)
 800aee6:	f7fe fed7 	bl	8009c98 <USBD_CDC_RegisterInterface>
 800aeea:	4603      	mov	r3, r0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d001      	beq.n	800aef4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800aef0:	f7f5 fc72 	bl	80007d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800aef4:	4805      	ldr	r0, [pc, #20]	; (800af0c <MX_USB_DEVICE_Init+0x54>)
 800aef6:	f7fe ff83 	bl	8009e00 <USBD_Start>
 800aefa:	4603      	mov	r3, r0
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d001      	beq.n	800af04 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800af00:	f7f5 fc6a 	bl	80007d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800af04:	bf00      	nop
 800af06:	bd80      	pop	{r7, pc}
 800af08:	2000012c 	.word	0x2000012c
 800af0c:	20000324 	.word	0x20000324
 800af10:	20000018 	.word	0x20000018
 800af14:	2000011c 	.word	0x2000011c

0800af18 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800af1c:	2200      	movs	r2, #0
 800af1e:	4905      	ldr	r1, [pc, #20]	; (800af34 <CDC_Init_FS+0x1c>)
 800af20:	4805      	ldr	r0, [pc, #20]	; (800af38 <CDC_Init_FS+0x20>)
 800af22:	f7fe fed0 	bl	8009cc6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800af26:	4905      	ldr	r1, [pc, #20]	; (800af3c <CDC_Init_FS+0x24>)
 800af28:	4803      	ldr	r0, [pc, #12]	; (800af38 <CDC_Init_FS+0x20>)
 800af2a:	f7fe fee6 	bl	8009cfa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800af2e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800af30:	4618      	mov	r0, r3
 800af32:	bd80      	pop	{r7, pc}
 800af34:	200009e8 	.word	0x200009e8
 800af38:	20000324 	.word	0x20000324
 800af3c:	200005e8 	.word	0x200005e8

0800af40 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800af40:	b480      	push	{r7}
 800af42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800af44:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800af46:	4618      	mov	r0, r3
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800af50:	b480      	push	{r7}
 800af52:	b083      	sub	sp, #12
 800af54:	af00      	add	r7, sp, #0
 800af56:	4603      	mov	r3, r0
 800af58:	6039      	str	r1, [r7, #0]
 800af5a:	71fb      	strb	r3, [r7, #7]
 800af5c:	4613      	mov	r3, r2
 800af5e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800af60:	79fb      	ldrb	r3, [r7, #7]
 800af62:	2b23      	cmp	r3, #35	; 0x23
 800af64:	d84a      	bhi.n	800affc <CDC_Control_FS+0xac>
 800af66:	a201      	add	r2, pc, #4	; (adr r2, 800af6c <CDC_Control_FS+0x1c>)
 800af68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af6c:	0800affd 	.word	0x0800affd
 800af70:	0800affd 	.word	0x0800affd
 800af74:	0800affd 	.word	0x0800affd
 800af78:	0800affd 	.word	0x0800affd
 800af7c:	0800affd 	.word	0x0800affd
 800af80:	0800affd 	.word	0x0800affd
 800af84:	0800affd 	.word	0x0800affd
 800af88:	0800affd 	.word	0x0800affd
 800af8c:	0800affd 	.word	0x0800affd
 800af90:	0800affd 	.word	0x0800affd
 800af94:	0800affd 	.word	0x0800affd
 800af98:	0800affd 	.word	0x0800affd
 800af9c:	0800affd 	.word	0x0800affd
 800afa0:	0800affd 	.word	0x0800affd
 800afa4:	0800affd 	.word	0x0800affd
 800afa8:	0800affd 	.word	0x0800affd
 800afac:	0800affd 	.word	0x0800affd
 800afb0:	0800affd 	.word	0x0800affd
 800afb4:	0800affd 	.word	0x0800affd
 800afb8:	0800affd 	.word	0x0800affd
 800afbc:	0800affd 	.word	0x0800affd
 800afc0:	0800affd 	.word	0x0800affd
 800afc4:	0800affd 	.word	0x0800affd
 800afc8:	0800affd 	.word	0x0800affd
 800afcc:	0800affd 	.word	0x0800affd
 800afd0:	0800affd 	.word	0x0800affd
 800afd4:	0800affd 	.word	0x0800affd
 800afd8:	0800affd 	.word	0x0800affd
 800afdc:	0800affd 	.word	0x0800affd
 800afe0:	0800affd 	.word	0x0800affd
 800afe4:	0800affd 	.word	0x0800affd
 800afe8:	0800affd 	.word	0x0800affd
 800afec:	0800affd 	.word	0x0800affd
 800aff0:	0800affd 	.word	0x0800affd
 800aff4:	0800affd 	.word	0x0800affd
 800aff8:	0800affd 	.word	0x0800affd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800affc:	bf00      	nop
  }

  return (USBD_OK);
 800affe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b000:	4618      	mov	r0, r3
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b016:	6879      	ldr	r1, [r7, #4]
 800b018:	4805      	ldr	r0, [pc, #20]	; (800b030 <CDC_Receive_FS+0x24>)
 800b01a:	f7fe fe6e 	bl	8009cfa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b01e:	4804      	ldr	r0, [pc, #16]	; (800b030 <CDC_Receive_FS+0x24>)
 800b020:	f7fe fe7f 	bl	8009d22 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b024:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b026:	4618      	mov	r0, r3
 800b028:	3708      	adds	r7, #8
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	20000324 	.word	0x20000324

0800b034 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
 800b03a:	4603      	mov	r3, r0
 800b03c:	6039      	str	r1, [r7, #0]
 800b03e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	2212      	movs	r2, #18
 800b044:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b046:	4b03      	ldr	r3, [pc, #12]	; (800b054 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b048:	4618      	mov	r0, r3
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr
 800b054:	20000148 	.word	0x20000148

0800b058 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	4603      	mov	r3, r0
 800b060:	6039      	str	r1, [r7, #0]
 800b062:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	2204      	movs	r2, #4
 800b068:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b06a:	4b03      	ldr	r3, [pc, #12]	; (800b078 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr
 800b078:	2000015c 	.word	0x2000015c

0800b07c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
 800b082:	4603      	mov	r3, r0
 800b084:	6039      	str	r1, [r7, #0]
 800b086:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b088:	79fb      	ldrb	r3, [r7, #7]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d105      	bne.n	800b09a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b08e:	683a      	ldr	r2, [r7, #0]
 800b090:	4907      	ldr	r1, [pc, #28]	; (800b0b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b092:	4808      	ldr	r0, [pc, #32]	; (800b0b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b094:	f7ff fe31 	bl	800acfa <USBD_GetString>
 800b098:	e004      	b.n	800b0a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b09a:	683a      	ldr	r2, [r7, #0]
 800b09c:	4904      	ldr	r1, [pc, #16]	; (800b0b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b09e:	4805      	ldr	r0, [pc, #20]	; (800b0b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b0a0:	f7ff fe2b 	bl	800acfa <USBD_GetString>
  }
  return USBD_StrDesc;
 800b0a4:	4b02      	ldr	r3, [pc, #8]	; (800b0b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3708      	adds	r7, #8
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	20000de8 	.word	0x20000de8
 800b0b4:	0800b870 	.word	0x0800b870

0800b0b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	4603      	mov	r3, r0
 800b0c0:	6039      	str	r1, [r7, #0]
 800b0c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b0c4:	683a      	ldr	r2, [r7, #0]
 800b0c6:	4904      	ldr	r1, [pc, #16]	; (800b0d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b0c8:	4804      	ldr	r0, [pc, #16]	; (800b0dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b0ca:	f7ff fe16 	bl	800acfa <USBD_GetString>
  return USBD_StrDesc;
 800b0ce:	4b02      	ldr	r3, [pc, #8]	; (800b0d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3708      	adds	r7, #8
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	20000de8 	.word	0x20000de8
 800b0dc:	0800b888 	.word	0x0800b888

0800b0e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	6039      	str	r1, [r7, #0]
 800b0ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	221a      	movs	r2, #26
 800b0f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b0f2:	f000 f843 	bl	800b17c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b0f6:	4b02      	ldr	r3, [pc, #8]	; (800b100 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3708      	adds	r7, #8
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	20000160 	.word	0x20000160

0800b104 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b082      	sub	sp, #8
 800b108:	af00      	add	r7, sp, #0
 800b10a:	4603      	mov	r3, r0
 800b10c:	6039      	str	r1, [r7, #0]
 800b10e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b110:	79fb      	ldrb	r3, [r7, #7]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d105      	bne.n	800b122 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b116:	683a      	ldr	r2, [r7, #0]
 800b118:	4907      	ldr	r1, [pc, #28]	; (800b138 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b11a:	4808      	ldr	r0, [pc, #32]	; (800b13c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b11c:	f7ff fded 	bl	800acfa <USBD_GetString>
 800b120:	e004      	b.n	800b12c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b122:	683a      	ldr	r2, [r7, #0]
 800b124:	4904      	ldr	r1, [pc, #16]	; (800b138 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b126:	4805      	ldr	r0, [pc, #20]	; (800b13c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b128:	f7ff fde7 	bl	800acfa <USBD_GetString>
  }
  return USBD_StrDesc;
 800b12c:	4b02      	ldr	r3, [pc, #8]	; (800b138 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3708      	adds	r7, #8
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	20000de8 	.word	0x20000de8
 800b13c:	0800b89c 	.word	0x0800b89c

0800b140 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	4603      	mov	r3, r0
 800b148:	6039      	str	r1, [r7, #0]
 800b14a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b14c:	79fb      	ldrb	r3, [r7, #7]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d105      	bne.n	800b15e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b152:	683a      	ldr	r2, [r7, #0]
 800b154:	4907      	ldr	r1, [pc, #28]	; (800b174 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b156:	4808      	ldr	r0, [pc, #32]	; (800b178 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b158:	f7ff fdcf 	bl	800acfa <USBD_GetString>
 800b15c:	e004      	b.n	800b168 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b15e:	683a      	ldr	r2, [r7, #0]
 800b160:	4904      	ldr	r1, [pc, #16]	; (800b174 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b162:	4805      	ldr	r0, [pc, #20]	; (800b178 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b164:	f7ff fdc9 	bl	800acfa <USBD_GetString>
  }
  return USBD_StrDesc;
 800b168:	4b02      	ldr	r3, [pc, #8]	; (800b174 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3708      	adds	r7, #8
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	20000de8 	.word	0x20000de8
 800b178:	0800b8a8 	.word	0x0800b8a8

0800b17c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b182:	4b0f      	ldr	r3, [pc, #60]	; (800b1c0 <Get_SerialNum+0x44>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b188:	4b0e      	ldr	r3, [pc, #56]	; (800b1c4 <Get_SerialNum+0x48>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b18e:	4b0e      	ldr	r3, [pc, #56]	; (800b1c8 <Get_SerialNum+0x4c>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b194:	68fa      	ldr	r2, [r7, #12]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4413      	add	r3, r2
 800b19a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d009      	beq.n	800b1b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b1a2:	2208      	movs	r2, #8
 800b1a4:	4909      	ldr	r1, [pc, #36]	; (800b1cc <Get_SerialNum+0x50>)
 800b1a6:	68f8      	ldr	r0, [r7, #12]
 800b1a8:	f000 f814 	bl	800b1d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b1ac:	2204      	movs	r2, #4
 800b1ae:	4908      	ldr	r1, [pc, #32]	; (800b1d0 <Get_SerialNum+0x54>)
 800b1b0:	68b8      	ldr	r0, [r7, #8]
 800b1b2:	f000 f80f 	bl	800b1d4 <IntToUnicode>
  }
}
 800b1b6:	bf00      	nop
 800b1b8:	3710      	adds	r7, #16
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	1ffff7ac 	.word	0x1ffff7ac
 800b1c4:	1ffff7b0 	.word	0x1ffff7b0
 800b1c8:	1ffff7b4 	.word	0x1ffff7b4
 800b1cc:	20000162 	.word	0x20000162
 800b1d0:	20000172 	.word	0x20000172

0800b1d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b087      	sub	sp, #28
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	60f8      	str	r0, [r7, #12]
 800b1dc:	60b9      	str	r1, [r7, #8]
 800b1de:	4613      	mov	r3, r2
 800b1e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	75fb      	strb	r3, [r7, #23]
 800b1ea:	e027      	b.n	800b23c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	0f1b      	lsrs	r3, r3, #28
 800b1f0:	2b09      	cmp	r3, #9
 800b1f2:	d80b      	bhi.n	800b20c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	0f1b      	lsrs	r3, r3, #28
 800b1f8:	b2da      	uxtb	r2, r3
 800b1fa:	7dfb      	ldrb	r3, [r7, #23]
 800b1fc:	005b      	lsls	r3, r3, #1
 800b1fe:	4619      	mov	r1, r3
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	440b      	add	r3, r1
 800b204:	3230      	adds	r2, #48	; 0x30
 800b206:	b2d2      	uxtb	r2, r2
 800b208:	701a      	strb	r2, [r3, #0]
 800b20a:	e00a      	b.n	800b222 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	0f1b      	lsrs	r3, r3, #28
 800b210:	b2da      	uxtb	r2, r3
 800b212:	7dfb      	ldrb	r3, [r7, #23]
 800b214:	005b      	lsls	r3, r3, #1
 800b216:	4619      	mov	r1, r3
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	440b      	add	r3, r1
 800b21c:	3237      	adds	r2, #55	; 0x37
 800b21e:	b2d2      	uxtb	r2, r2
 800b220:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	011b      	lsls	r3, r3, #4
 800b226:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b228:	7dfb      	ldrb	r3, [r7, #23]
 800b22a:	005b      	lsls	r3, r3, #1
 800b22c:	3301      	adds	r3, #1
 800b22e:	68ba      	ldr	r2, [r7, #8]
 800b230:	4413      	add	r3, r2
 800b232:	2200      	movs	r2, #0
 800b234:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b236:	7dfb      	ldrb	r3, [r7, #23]
 800b238:	3301      	adds	r3, #1
 800b23a:	75fb      	strb	r3, [r7, #23]
 800b23c:	7dfa      	ldrb	r2, [r7, #23]
 800b23e:	79fb      	ldrb	r3, [r7, #7]
 800b240:	429a      	cmp	r2, r3
 800b242:	d3d3      	bcc.n	800b1ec <IntToUnicode+0x18>
  }
}
 800b244:	bf00      	nop
 800b246:	bf00      	nop
 800b248:	371c      	adds	r7, #28
 800b24a:	46bd      	mov	sp, r7
 800b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b250:	4770      	bx	lr
	...

0800b254 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b08a      	sub	sp, #40	; 0x28
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b25c:	f107 0314 	add.w	r3, r7, #20
 800b260:	2200      	movs	r2, #0
 800b262:	601a      	str	r2, [r3, #0]
 800b264:	605a      	str	r2, [r3, #4]
 800b266:	609a      	str	r2, [r3, #8]
 800b268:	60da      	str	r2, [r3, #12]
 800b26a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4a1c      	ldr	r2, [pc, #112]	; (800b2e4 <HAL_PCD_MspInit+0x90>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d131      	bne.n	800b2da <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b276:	4b1c      	ldr	r3, [pc, #112]	; (800b2e8 <HAL_PCD_MspInit+0x94>)
 800b278:	695b      	ldr	r3, [r3, #20]
 800b27a:	4a1b      	ldr	r2, [pc, #108]	; (800b2e8 <HAL_PCD_MspInit+0x94>)
 800b27c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b280:	6153      	str	r3, [r2, #20]
 800b282:	4b19      	ldr	r3, [pc, #100]	; (800b2e8 <HAL_PCD_MspInit+0x94>)
 800b284:	695b      	ldr	r3, [r3, #20]
 800b286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b28a:	613b      	str	r3, [r7, #16]
 800b28c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800b28e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b294:	2302      	movs	r3, #2
 800b296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b298:	2300      	movs	r3, #0
 800b29a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b29c:	2303      	movs	r3, #3
 800b29e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800b2a0:	230e      	movs	r3, #14
 800b2a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b2a4:	f107 0314 	add.w	r3, r7, #20
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b2ae:	f7f7 fa95 	bl	80027dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b2b2:	4b0d      	ldr	r3, [pc, #52]	; (800b2e8 <HAL_PCD_MspInit+0x94>)
 800b2b4:	69db      	ldr	r3, [r3, #28]
 800b2b6:	4a0c      	ldr	r2, [pc, #48]	; (800b2e8 <HAL_PCD_MspInit+0x94>)
 800b2b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b2bc:	61d3      	str	r3, [r2, #28]
 800b2be:	4b0a      	ldr	r3, [pc, #40]	; (800b2e8 <HAL_PCD_MspInit+0x94>)
 800b2c0:	69db      	ldr	r3, [r3, #28]
 800b2c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2c6:	60fb      	str	r3, [r7, #12]
 800b2c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	2100      	movs	r1, #0
 800b2ce:	2014      	movs	r0, #20
 800b2d0:	f7f7 fa4d 	bl	800276e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800b2d4:	2014      	movs	r0, #20
 800b2d6:	f7f7 fa66 	bl	80027a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b2da:	bf00      	nop
 800b2dc:	3728      	adds	r7, #40	; 0x28
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	40005c00 	.word	0x40005c00
 800b2e8:	40021000 	.word	0x40021000

0800b2ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b300:	4619      	mov	r1, r3
 800b302:	4610      	mov	r0, r2
 800b304:	f7fe fdc5 	bl	8009e92 <USBD_LL_SetupStage>
}
 800b308:	bf00      	nop
 800b30a:	3708      	adds	r7, #8
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	460b      	mov	r3, r1
 800b31a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b322:	78fa      	ldrb	r2, [r7, #3]
 800b324:	6879      	ldr	r1, [r7, #4]
 800b326:	4613      	mov	r3, r2
 800b328:	009b      	lsls	r3, r3, #2
 800b32a:	4413      	add	r3, r2
 800b32c:	00db      	lsls	r3, r3, #3
 800b32e:	440b      	add	r3, r1
 800b330:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	78fb      	ldrb	r3, [r7, #3]
 800b338:	4619      	mov	r1, r3
 800b33a:	f7fe fdf7 	bl	8009f2c <USBD_LL_DataOutStage>
}
 800b33e:	bf00      	nop
 800b340:	3708      	adds	r7, #8
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b346:	b580      	push	{r7, lr}
 800b348:	b082      	sub	sp, #8
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
 800b34e:	460b      	mov	r3, r1
 800b350:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b358:	78fa      	ldrb	r2, [r7, #3]
 800b35a:	6879      	ldr	r1, [r7, #4]
 800b35c:	4613      	mov	r3, r2
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	4413      	add	r3, r2
 800b362:	00db      	lsls	r3, r3, #3
 800b364:	440b      	add	r3, r1
 800b366:	333c      	adds	r3, #60	; 0x3c
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	78fb      	ldrb	r3, [r7, #3]
 800b36c:	4619      	mov	r1, r3
 800b36e:	f7fe fe4e 	bl	800a00e <USBD_LL_DataInStage>
}
 800b372:	bf00      	nop
 800b374:	3708      	adds	r7, #8
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b082      	sub	sp, #8
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b388:	4618      	mov	r0, r3
 800b38a:	f7fe ff61 	bl	800a250 <USBD_LL_SOF>
}
 800b38e:	bf00      	nop
 800b390:	3708      	adds	r7, #8
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b084      	sub	sp, #16
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	2b02      	cmp	r3, #2
 800b3a8:	d001      	beq.n	800b3ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b3aa:	f7f5 fa15 	bl	80007d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b3b4:	7bfa      	ldrb	r2, [r7, #15]
 800b3b6:	4611      	mov	r1, r2
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f7fe ff0e 	bl	800a1da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f7fe fec7 	bl	800a158 <USBD_LL_Reset>
}
 800b3ca:	bf00      	nop
 800b3cc:	3710      	adds	r7, #16
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
	...

0800b3d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7fe ff09 	bl	800a1fa <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	699b      	ldr	r3, [r3, #24]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d005      	beq.n	800b3fc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b3f0:	4b04      	ldr	r3, [pc, #16]	; (800b404 <HAL_PCD_SuspendCallback+0x30>)
 800b3f2:	691b      	ldr	r3, [r3, #16]
 800b3f4:	4a03      	ldr	r2, [pc, #12]	; (800b404 <HAL_PCD_SuspendCallback+0x30>)
 800b3f6:	f043 0306 	orr.w	r3, r3, #6
 800b3fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b3fc:	bf00      	nop
 800b3fe:	3708      	adds	r7, #8
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}
 800b404:	e000ed00 	.word	0xe000ed00

0800b408 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b416:	4618      	mov	r0, r3
 800b418:	f7fe ff04 	bl	800a224 <USBD_LL_Resume>
}
 800b41c:	bf00      	nop
 800b41e:	3708      	adds	r7, #8
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b082      	sub	sp, #8
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b42c:	4a28      	ldr	r2, [pc, #160]	; (800b4d0 <USBD_LL_Init+0xac>)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	4a26      	ldr	r2, [pc, #152]	; (800b4d0 <USBD_LL_Init+0xac>)
 800b438:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b43c:	4b24      	ldr	r3, [pc, #144]	; (800b4d0 <USBD_LL_Init+0xac>)
 800b43e:	4a25      	ldr	r2, [pc, #148]	; (800b4d4 <USBD_LL_Init+0xb0>)
 800b440:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b442:	4b23      	ldr	r3, [pc, #140]	; (800b4d0 <USBD_LL_Init+0xac>)
 800b444:	2208      	movs	r2, #8
 800b446:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b448:	4b21      	ldr	r3, [pc, #132]	; (800b4d0 <USBD_LL_Init+0xac>)
 800b44a:	2202      	movs	r2, #2
 800b44c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b44e:	4b20      	ldr	r3, [pc, #128]	; (800b4d0 <USBD_LL_Init+0xac>)
 800b450:	2202      	movs	r2, #2
 800b452:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b454:	4b1e      	ldr	r3, [pc, #120]	; (800b4d0 <USBD_LL_Init+0xac>)
 800b456:	2200      	movs	r2, #0
 800b458:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b45a:	4b1d      	ldr	r3, [pc, #116]	; (800b4d0 <USBD_LL_Init+0xac>)
 800b45c:	2200      	movs	r2, #0
 800b45e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b460:	481b      	ldr	r0, [pc, #108]	; (800b4d0 <USBD_LL_Init+0xac>)
 800b462:	f7f7 fb67 	bl	8002b34 <HAL_PCD_Init>
 800b466:	4603      	mov	r3, r0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d001      	beq.n	800b470 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b46c:	f7f5 f9b4 	bl	80007d8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b476:	2318      	movs	r3, #24
 800b478:	2200      	movs	r2, #0
 800b47a:	2100      	movs	r1, #0
 800b47c:	f7f8 fff0 	bl	8004460 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b486:	2358      	movs	r3, #88	; 0x58
 800b488:	2200      	movs	r2, #0
 800b48a:	2180      	movs	r1, #128	; 0x80
 800b48c:	f7f8 ffe8 	bl	8004460 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b496:	23c0      	movs	r3, #192	; 0xc0
 800b498:	2200      	movs	r2, #0
 800b49a:	2181      	movs	r1, #129	; 0x81
 800b49c:	f7f8 ffe0 	bl	8004460 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b4a6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	2101      	movs	r1, #1
 800b4ae:	f7f8 ffd7 	bl	8004460 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b4b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4bc:	2200      	movs	r2, #0
 800b4be:	2182      	movs	r1, #130	; 0x82
 800b4c0:	f7f8 ffce 	bl	8004460 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3708      	adds	r7, #8
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	20000fe8 	.word	0x20000fe8
 800b4d4:	40005c00 	.word	0x40005c00

0800b4d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f7f7 fbf2 	bl	8002cd8 <HAL_PCD_Start>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4f8:	7bfb      	ldrb	r3, [r7, #15]
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f000 f954 	bl	800b7a8 <USBD_Get_USB_Status>
 800b500:	4603      	mov	r3, r0
 800b502:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b504:	7bbb      	ldrb	r3, [r7, #14]
}
 800b506:	4618      	mov	r0, r3
 800b508:	3710      	adds	r7, #16
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}

0800b50e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b50e:	b580      	push	{r7, lr}
 800b510:	b084      	sub	sp, #16
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
 800b516:	4608      	mov	r0, r1
 800b518:	4611      	mov	r1, r2
 800b51a:	461a      	mov	r2, r3
 800b51c:	4603      	mov	r3, r0
 800b51e:	70fb      	strb	r3, [r7, #3]
 800b520:	460b      	mov	r3, r1
 800b522:	70bb      	strb	r3, [r7, #2]
 800b524:	4613      	mov	r3, r2
 800b526:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b528:	2300      	movs	r3, #0
 800b52a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b52c:	2300      	movs	r3, #0
 800b52e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b536:	78bb      	ldrb	r3, [r7, #2]
 800b538:	883a      	ldrh	r2, [r7, #0]
 800b53a:	78f9      	ldrb	r1, [r7, #3]
 800b53c:	f7f7 fceb 	bl	8002f16 <HAL_PCD_EP_Open>
 800b540:	4603      	mov	r3, r0
 800b542:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b544:	7bfb      	ldrb	r3, [r7, #15]
 800b546:	4618      	mov	r0, r3
 800b548:	f000 f92e 	bl	800b7a8 <USBD_Get_USB_Status>
 800b54c:	4603      	mov	r3, r0
 800b54e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b550:	7bbb      	ldrb	r3, [r7, #14]
}
 800b552:	4618      	mov	r0, r3
 800b554:	3710      	adds	r7, #16
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}

0800b55a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b55a:	b580      	push	{r7, lr}
 800b55c:	b084      	sub	sp, #16
 800b55e:	af00      	add	r7, sp, #0
 800b560:	6078      	str	r0, [r7, #4]
 800b562:	460b      	mov	r3, r1
 800b564:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b566:	2300      	movs	r3, #0
 800b568:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b56a:	2300      	movs	r3, #0
 800b56c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b574:	78fa      	ldrb	r2, [r7, #3]
 800b576:	4611      	mov	r1, r2
 800b578:	4618      	mov	r0, r3
 800b57a:	f7f7 fd29 	bl	8002fd0 <HAL_PCD_EP_Close>
 800b57e:	4603      	mov	r3, r0
 800b580:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b582:	7bfb      	ldrb	r3, [r7, #15]
 800b584:	4618      	mov	r0, r3
 800b586:	f000 f90f 	bl	800b7a8 <USBD_Get_USB_Status>
 800b58a:	4603      	mov	r3, r0
 800b58c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b58e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b590:	4618      	mov	r0, r3
 800b592:	3710      	adds	r7, #16
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5b2:	78fa      	ldrb	r2, [r7, #3]
 800b5b4:	4611      	mov	r1, r2
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f7f7 fdd2 	bl	8003160 <HAL_PCD_EP_SetStall>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5c0:	7bfb      	ldrb	r3, [r7, #15]
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f000 f8f0 	bl	800b7a8 <USBD_Get_USB_Status>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3710      	adds	r7, #16
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}

0800b5d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5d6:	b580      	push	{r7, lr}
 800b5d8:	b084      	sub	sp, #16
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
 800b5de:	460b      	mov	r3, r1
 800b5e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5f0:	78fa      	ldrb	r2, [r7, #3]
 800b5f2:	4611      	mov	r1, r2
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f7f7 fe05 	bl	8003204 <HAL_PCD_EP_ClrStall>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5fe:	7bfb      	ldrb	r3, [r7, #15]
 800b600:	4618      	mov	r0, r3
 800b602:	f000 f8d1 	bl	800b7a8 <USBD_Get_USB_Status>
 800b606:	4603      	mov	r3, r0
 800b608:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b60a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3710      	adds	r7, #16
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b614:	b480      	push	{r7}
 800b616:	b085      	sub	sp, #20
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	460b      	mov	r3, r1
 800b61e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b626:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b628:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	da0c      	bge.n	800b64a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b630:	78fb      	ldrb	r3, [r7, #3]
 800b632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b636:	68f9      	ldr	r1, [r7, #12]
 800b638:	1c5a      	adds	r2, r3, #1
 800b63a:	4613      	mov	r3, r2
 800b63c:	009b      	lsls	r3, r3, #2
 800b63e:	4413      	add	r3, r2
 800b640:	00db      	lsls	r3, r3, #3
 800b642:	440b      	add	r3, r1
 800b644:	3302      	adds	r3, #2
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	e00b      	b.n	800b662 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b64a:	78fb      	ldrb	r3, [r7, #3]
 800b64c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b650:	68f9      	ldr	r1, [r7, #12]
 800b652:	4613      	mov	r3, r2
 800b654:	009b      	lsls	r3, r3, #2
 800b656:	4413      	add	r3, r2
 800b658:	00db      	lsls	r3, r3, #3
 800b65a:	440b      	add	r3, r1
 800b65c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b660:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b662:	4618      	mov	r0, r3
 800b664:	3714      	adds	r7, #20
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr

0800b66e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b66e:	b580      	push	{r7, lr}
 800b670:	b084      	sub	sp, #16
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
 800b676:	460b      	mov	r3, r1
 800b678:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b67a:	2300      	movs	r3, #0
 800b67c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b67e:	2300      	movs	r3, #0
 800b680:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b688:	78fa      	ldrb	r2, [r7, #3]
 800b68a:	4611      	mov	r1, r2
 800b68c:	4618      	mov	r0, r3
 800b68e:	f7f7 fc1d 	bl	8002ecc <HAL_PCD_SetAddress>
 800b692:	4603      	mov	r3, r0
 800b694:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b696:	7bfb      	ldrb	r3, [r7, #15]
 800b698:	4618      	mov	r0, r3
 800b69a:	f000 f885 	bl	800b7a8 <USBD_Get_USB_Status>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3710      	adds	r7, #16
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b086      	sub	sp, #24
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	60f8      	str	r0, [r7, #12]
 800b6b4:	607a      	str	r2, [r7, #4]
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	72fb      	strb	r3, [r7, #11]
 800b6bc:	4613      	mov	r3, r2
 800b6be:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b6ce:	893b      	ldrh	r3, [r7, #8]
 800b6d0:	7af9      	ldrb	r1, [r7, #11]
 800b6d2:	687a      	ldr	r2, [r7, #4]
 800b6d4:	f7f7 fd0d 	bl	80030f2 <HAL_PCD_EP_Transmit>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6dc:	7dfb      	ldrb	r3, [r7, #23]
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f000 f862 	bl	800b7a8 <USBD_Get_USB_Status>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b6e8:	7dbb      	ldrb	r3, [r7, #22]
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3718      	adds	r7, #24
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}

0800b6f2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b6f2:	b580      	push	{r7, lr}
 800b6f4:	b086      	sub	sp, #24
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	60f8      	str	r0, [r7, #12]
 800b6fa:	607a      	str	r2, [r7, #4]
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	460b      	mov	r3, r1
 800b700:	72fb      	strb	r3, [r7, #11]
 800b702:	4613      	mov	r3, r2
 800b704:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b706:	2300      	movs	r3, #0
 800b708:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b70a:	2300      	movs	r3, #0
 800b70c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b714:	893b      	ldrh	r3, [r7, #8]
 800b716:	7af9      	ldrb	r1, [r7, #11]
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	f7f7 fca1 	bl	8003060 <HAL_PCD_EP_Receive>
 800b71e:	4603      	mov	r3, r0
 800b720:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b722:	7dfb      	ldrb	r3, [r7, #23]
 800b724:	4618      	mov	r0, r3
 800b726:	f000 f83f 	bl	800b7a8 <USBD_Get_USB_Status>
 800b72a:	4603      	mov	r3, r0
 800b72c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b72e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b730:	4618      	mov	r0, r3
 800b732:	3718      	adds	r7, #24
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	460b      	mov	r3, r1
 800b742:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b74a:	78fa      	ldrb	r2, [r7, #3]
 800b74c:	4611      	mov	r1, r2
 800b74e:	4618      	mov	r0, r3
 800b750:	f7f7 fcb7 	bl	80030c2 <HAL_PCD_EP_GetRxCount>
 800b754:	4603      	mov	r3, r0
}
 800b756:	4618      	mov	r0, r3
 800b758:	3708      	adds	r7, #8
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
	...

0800b760 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b768:	4b03      	ldr	r3, [pc, #12]	; (800b778 <USBD_static_malloc+0x18>)
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	370c      	adds	r7, #12
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop
 800b778:	200012d4 	.word	0x200012d4

0800b77c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b083      	sub	sp, #12
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]

}
 800b784:	bf00      	nop
 800b786:	370c      	adds	r7, #12
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr

0800b790 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b790:	b480      	push	{r7}
 800b792:	b083      	sub	sp, #12
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	460b      	mov	r3, r1
 800b79a:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b79c:	bf00      	nop
 800b79e:	370c      	adds	r7, #12
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b085      	sub	sp, #20
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b7b6:	79fb      	ldrb	r3, [r7, #7]
 800b7b8:	2b03      	cmp	r3, #3
 800b7ba:	d817      	bhi.n	800b7ec <USBD_Get_USB_Status+0x44>
 800b7bc:	a201      	add	r2, pc, #4	; (adr r2, 800b7c4 <USBD_Get_USB_Status+0x1c>)
 800b7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7c2:	bf00      	nop
 800b7c4:	0800b7d5 	.word	0x0800b7d5
 800b7c8:	0800b7db 	.word	0x0800b7db
 800b7cc:	0800b7e1 	.word	0x0800b7e1
 800b7d0:	0800b7e7 	.word	0x0800b7e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	73fb      	strb	r3, [r7, #15]
    break;
 800b7d8:	e00b      	b.n	800b7f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b7da:	2302      	movs	r3, #2
 800b7dc:	73fb      	strb	r3, [r7, #15]
    break;
 800b7de:	e008      	b.n	800b7f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	73fb      	strb	r3, [r7, #15]
    break;
 800b7e4:	e005      	b.n	800b7f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b7e6:	2302      	movs	r3, #2
 800b7e8:	73fb      	strb	r3, [r7, #15]
    break;
 800b7ea:	e002      	b.n	800b7f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b7ec:	2302      	movs	r3, #2
 800b7ee:	73fb      	strb	r3, [r7, #15]
    break;
 800b7f0:	bf00      	nop
  }
  return usb_status;
 800b7f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3714      	adds	r7, #20
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr

0800b800 <memset>:
 800b800:	4402      	add	r2, r0
 800b802:	4603      	mov	r3, r0
 800b804:	4293      	cmp	r3, r2
 800b806:	d100      	bne.n	800b80a <memset+0xa>
 800b808:	4770      	bx	lr
 800b80a:	f803 1b01 	strb.w	r1, [r3], #1
 800b80e:	e7f9      	b.n	800b804 <memset+0x4>

0800b810 <__libc_init_array>:
 800b810:	b570      	push	{r4, r5, r6, lr}
 800b812:	4d0d      	ldr	r5, [pc, #52]	; (800b848 <__libc_init_array+0x38>)
 800b814:	4c0d      	ldr	r4, [pc, #52]	; (800b84c <__libc_init_array+0x3c>)
 800b816:	1b64      	subs	r4, r4, r5
 800b818:	10a4      	asrs	r4, r4, #2
 800b81a:	2600      	movs	r6, #0
 800b81c:	42a6      	cmp	r6, r4
 800b81e:	d109      	bne.n	800b834 <__libc_init_array+0x24>
 800b820:	4d0b      	ldr	r5, [pc, #44]	; (800b850 <__libc_init_array+0x40>)
 800b822:	4c0c      	ldr	r4, [pc, #48]	; (800b854 <__libc_init_array+0x44>)
 800b824:	f000 f818 	bl	800b858 <_init>
 800b828:	1b64      	subs	r4, r4, r5
 800b82a:	10a4      	asrs	r4, r4, #2
 800b82c:	2600      	movs	r6, #0
 800b82e:	42a6      	cmp	r6, r4
 800b830:	d105      	bne.n	800b83e <__libc_init_array+0x2e>
 800b832:	bd70      	pop	{r4, r5, r6, pc}
 800b834:	f855 3b04 	ldr.w	r3, [r5], #4
 800b838:	4798      	blx	r3
 800b83a:	3601      	adds	r6, #1
 800b83c:	e7ee      	b.n	800b81c <__libc_init_array+0xc>
 800b83e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b842:	4798      	blx	r3
 800b844:	3601      	adds	r6, #1
 800b846:	e7f2      	b.n	800b82e <__libc_init_array+0x1e>
 800b848:	0800b8e8 	.word	0x0800b8e8
 800b84c:	0800b8e8 	.word	0x0800b8e8
 800b850:	0800b8e8 	.word	0x0800b8e8
 800b854:	0800b8ec 	.word	0x0800b8ec

0800b858 <_init>:
 800b858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b85a:	bf00      	nop
 800b85c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b85e:	bc08      	pop	{r3}
 800b860:	469e      	mov	lr, r3
 800b862:	4770      	bx	lr

0800b864 <_fini>:
 800b864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b866:	bf00      	nop
 800b868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b86a:	bc08      	pop	{r3}
 800b86c:	469e      	mov	lr, r3
 800b86e:	4770      	bx	lr
