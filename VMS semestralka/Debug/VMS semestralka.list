
VMS semestralka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e28  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08009fb0  08009fb0  00019fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a028  0800a028  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a028  0800a028  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a028  0800a028  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a028  0800a028  0001a028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a02c  0800a02c  0001a02c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800a030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002017c  2**0
                  CONTENTS
 10 .bss          000012e0  2000017c  2000017c  0002017c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000145c  2000145c  0002017c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014001  00000000  00000000  000201ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000033d0  00000000  00000000  000341f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001148  00000000  00000000  000375c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d31  00000000  00000000  00038708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020eef  00000000  00000000  00039439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017f12  00000000  00000000  0005a328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bf884  00000000  00000000  0007223a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004750  00000000  00000000  00131ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00136210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000017c 	.word	0x2000017c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009f98 	.word	0x08009f98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000180 	.word	0x20000180
 80001c4:	08009f98 	.word	0x08009f98

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fba2 	bl	8000914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f822 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f9de 	bl	8000594 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001d8:	f000 f882 	bl	80002e0 <MX_ADC1_Init>
  MX_ADC3_Init();
 80001dc:	f000 f8f0 	bl	80003c0 <MX_ADC3_Init>
  MX_TIM17_Init();
 80001e0:	f000 f95e 	bl	80004a0 <MX_TIM17_Init>
  MX_USB_DEVICE_Init();
 80001e4:	f009 fa08 	bl	80095f8 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, 1);
 80001e8:	2201      	movs	r2, #1
 80001ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ee:	4809      	ldr	r0, [pc, #36]	; (8000214 <main+0x4c>)
 80001f0:	f001 fcc8 	bl	8001b84 <HAL_GPIO_WritePin>
HAL_Delay(500);
 80001f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001f8:	f000 fbf2 	bl	80009e0 <HAL_Delay>
HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, 0);
 80001fc:	2200      	movs	r2, #0
 80001fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000202:	4804      	ldr	r0, [pc, #16]	; (8000214 <main+0x4c>)
 8000204:	f001 fcbe 	bl	8001b84 <HAL_GPIO_WritePin>
HAL_Delay(500);
 8000208:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800020c:	f000 fbe8 	bl	80009e0 <HAL_Delay>
HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, 1);
 8000210:	e7ea      	b.n	80001e8 <main+0x20>
 8000212:	bf00      	nop
 8000214:	48001000 	.word	0x48001000

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b09e      	sub	sp, #120	; 0x78
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000222:	2228      	movs	r2, #40	; 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f009 fe8a 	bl	8009f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]
 8000238:	60da      	str	r2, [r3, #12]
 800023a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800023c:	463b      	mov	r3, r7
 800023e:	223c      	movs	r2, #60	; 0x3c
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f009 fe7c 	bl	8009f40 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000248:	2301      	movs	r3, #1
 800024a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800024c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000250:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000256:	2301      	movs	r3, #1
 8000258:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025a:	2302      	movs	r3, #2
 800025c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800025e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000262:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000264:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000268:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800026e:	4618      	mov	r0, r3
 8000270:	f003 f97a 	bl	8003568 <HAL_RCC_OscConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800027a:	f000 f9f1 	bl	8000660 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027e:	230f      	movs	r3, #15
 8000280:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000282:	2302      	movs	r3, #2
 8000284:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800028e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000294:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000298:	2101      	movs	r1, #1
 800029a:	4618      	mov	r0, r3
 800029c:	f004 f9a2 	bl	80045e4 <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002a6:	f000 f9db 	bl	8000660 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC12
 80002aa:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <SystemClock_Config+0xc4>)
 80002ac:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80002b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002b8:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80002ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c0:	463b      	mov	r3, r7
 80002c2:	4618      	mov	r0, r3
 80002c4:	f004 fb74 	bl	80049b0 <HAL_RCCEx_PeriphCLKConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80002ce:	f000 f9c7 	bl	8000660 <Error_Handler>
  }
}
 80002d2:	bf00      	nop
 80002d4:	3778      	adds	r7, #120	; 0x78
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	00020180 	.word	0x00020180

080002e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b08a      	sub	sp, #40	; 0x28
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002e6:	f107 031c 	add.w	r3, r7, #28
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	609a      	str	r2, [r3, #8]
 80002fc:	60da      	str	r2, [r3, #12]
 80002fe:	611a      	str	r2, [r3, #16]
 8000300:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000302:	4b2e      	ldr	r3, [pc, #184]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000304:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000308:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800030a:	4b2c      	ldr	r3, [pc, #176]	; (80003bc <MX_ADC1_Init+0xdc>)
 800030c:	2200      	movs	r2, #0
 800030e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000310:	4b2a      	ldr	r3, [pc, #168]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000312:	2200      	movs	r2, #0
 8000314:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000316:	4b29      	ldr	r3, [pc, #164]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800031c:	4b27      	ldr	r3, [pc, #156]	; (80003bc <MX_ADC1_Init+0xdc>)
 800031e:	2200      	movs	r2, #0
 8000320:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000322:	4b26      	ldr	r3, [pc, #152]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000324:	2200      	movs	r2, #0
 8000326:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800032a:	4b24      	ldr	r3, [pc, #144]	; (80003bc <MX_ADC1_Init+0xdc>)
 800032c:	2200      	movs	r2, #0
 800032e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000330:	4b22      	ldr	r3, [pc, #136]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000332:	2201      	movs	r2, #1
 8000334:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000336:	4b21      	ldr	r3, [pc, #132]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000338:	2200      	movs	r2, #0
 800033a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800033c:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <MX_ADC1_Init+0xdc>)
 800033e:	2201      	movs	r2, #1
 8000340:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000342:	4b1e      	ldr	r3, [pc, #120]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000344:	2200      	movs	r2, #0
 8000346:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800034a:	4b1c      	ldr	r3, [pc, #112]	; (80003bc <MX_ADC1_Init+0xdc>)
 800034c:	2204      	movs	r2, #4
 800034e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000350:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000352:	2200      	movs	r2, #0
 8000354:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000356:	4b19      	ldr	r3, [pc, #100]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000358:	2200      	movs	r2, #0
 800035a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800035c:	4817      	ldr	r0, [pc, #92]	; (80003bc <MX_ADC1_Init+0xdc>)
 800035e:	f000 fb63 	bl	8000a28 <HAL_ADC_Init>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000368:	f000 f97a 	bl	8000660 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800036c:	2300      	movs	r3, #0
 800036e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000370:	f107 031c 	add.w	r3, r7, #28
 8000374:	4619      	mov	r1, r3
 8000376:	4811      	ldr	r0, [pc, #68]	; (80003bc <MX_ADC1_Init+0xdc>)
 8000378:	f001 f820 	bl	80013bc <HAL_ADCEx_MultiModeConfigChannel>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000382:	f000 f96d 	bl	8000660 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000386:	2302      	movs	r3, #2
 8000388:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800038a:	2301      	movs	r3, #1
 800038c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800038e:	2300      	movs	r3, #0
 8000390:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000392:	2300      	movs	r3, #0
 8000394:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800039a:	2300      	movs	r3, #0
 800039c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	4619      	mov	r1, r3
 80003a2:	4806      	ldr	r0, [pc, #24]	; (80003bc <MX_ADC1_Init+0xdc>)
 80003a4:	f000 fd20 	bl	8000de8 <HAL_ADC_ConfigChannel>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80003ae:	f000 f957 	bl	8000660 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	3728      	adds	r7, #40	; 0x28
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000198 	.word	0x20000198

080003c0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b08a      	sub	sp, #40	; 0x28
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003c6:	f107 031c 	add.w	r3, r7, #28
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]
 80003dc:	60da      	str	r2, [r3, #12]
 80003de:	611a      	str	r2, [r3, #16]
 80003e0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80003e2:	4b2d      	ldr	r3, [pc, #180]	; (8000498 <MX_ADC3_Init+0xd8>)
 80003e4:	4a2d      	ldr	r2, [pc, #180]	; (800049c <MX_ADC3_Init+0xdc>)
 80003e6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003e8:	4b2b      	ldr	r3, [pc, #172]	; (8000498 <MX_ADC3_Init+0xd8>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80003ee:	4b2a      	ldr	r3, [pc, #168]	; (8000498 <MX_ADC3_Init+0xd8>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003f4:	4b28      	ldr	r3, [pc, #160]	; (8000498 <MX_ADC3_Init+0xd8>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80003fa:	4b27      	ldr	r3, [pc, #156]	; (8000498 <MX_ADC3_Init+0xd8>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000400:	4b25      	ldr	r3, [pc, #148]	; (8000498 <MX_ADC3_Init+0xd8>)
 8000402:	2200      	movs	r2, #0
 8000404:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000408:	4b23      	ldr	r3, [pc, #140]	; (8000498 <MX_ADC3_Init+0xd8>)
 800040a:	2200      	movs	r2, #0
 800040c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800040e:	4b22      	ldr	r3, [pc, #136]	; (8000498 <MX_ADC3_Init+0xd8>)
 8000410:	2201      	movs	r2, #1
 8000412:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000414:	4b20      	ldr	r3, [pc, #128]	; (8000498 <MX_ADC3_Init+0xd8>)
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800041a:	4b1f      	ldr	r3, [pc, #124]	; (8000498 <MX_ADC3_Init+0xd8>)
 800041c:	2201      	movs	r2, #1
 800041e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000420:	4b1d      	ldr	r3, [pc, #116]	; (8000498 <MX_ADC3_Init+0xd8>)
 8000422:	2200      	movs	r2, #0
 8000424:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000428:	4b1b      	ldr	r3, [pc, #108]	; (8000498 <MX_ADC3_Init+0xd8>)
 800042a:	2204      	movs	r2, #4
 800042c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800042e:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <MX_ADC3_Init+0xd8>)
 8000430:	2200      	movs	r2, #0
 8000432:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000434:	4b18      	ldr	r3, [pc, #96]	; (8000498 <MX_ADC3_Init+0xd8>)
 8000436:	2200      	movs	r2, #0
 8000438:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800043a:	4817      	ldr	r0, [pc, #92]	; (8000498 <MX_ADC3_Init+0xd8>)
 800043c:	f000 faf4 	bl	8000a28 <HAL_ADC_Init>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8000446:	f000 f90b 	bl	8000660 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800044a:	2300      	movs	r3, #0
 800044c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800044e:	f107 031c 	add.w	r3, r7, #28
 8000452:	4619      	mov	r1, r3
 8000454:	4810      	ldr	r0, [pc, #64]	; (8000498 <MX_ADC3_Init+0xd8>)
 8000456:	f000 ffb1 	bl	80013bc <HAL_ADCEx_MultiModeConfigChannel>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8000460:	f000 f8fe 	bl	8000660 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000464:	2301      	movs	r3, #1
 8000466:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000468:	2301      	movs	r3, #1
 800046a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800046c:	2300      	movs	r3, #0
 800046e:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000470:	2300      	movs	r3, #0
 8000472:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	4619      	mov	r1, r3
 8000480:	4805      	ldr	r0, [pc, #20]	; (8000498 <MX_ADC3_Init+0xd8>)
 8000482:	f000 fcb1 	bl	8000de8 <HAL_ADC_ConfigChannel>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 800048c:	f000 f8e8 	bl	8000660 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000490:	bf00      	nop
 8000492:	3728      	adds	r7, #40	; 0x28
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	200001e8 	.word	0x200001e8
 800049c:	50000400 	.word	0x50000400

080004a0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b092      	sub	sp, #72	; 0x48
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80004a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
 80004b4:	611a      	str	r2, [r3, #16]
 80004b6:	615a      	str	r2, [r3, #20]
 80004b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004ba:	463b      	mov	r3, r7
 80004bc:	222c      	movs	r2, #44	; 0x2c
 80004be:	2100      	movs	r1, #0
 80004c0:	4618      	mov	r0, r3
 80004c2:	f009 fd3d 	bl	8009f40 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80004c6:	4b31      	ldr	r3, [pc, #196]	; (800058c <MX_TIM17_Init+0xec>)
 80004c8:	4a31      	ldr	r2, [pc, #196]	; (8000590 <MX_TIM17_Init+0xf0>)
 80004ca:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1000;
 80004cc:	4b2f      	ldr	r3, [pc, #188]	; (800058c <MX_TIM17_Init+0xec>)
 80004ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004d2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d4:	4b2d      	ldr	r3, [pc, #180]	; (800058c <MX_TIM17_Init+0xec>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 48;
 80004da:	4b2c      	ldr	r3, [pc, #176]	; (800058c <MX_TIM17_Init+0xec>)
 80004dc:	2230      	movs	r2, #48	; 0x30
 80004de:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004e0:	4b2a      	ldr	r3, [pc, #168]	; (800058c <MX_TIM17_Init+0xec>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80004e6:	4b29      	ldr	r3, [pc, #164]	; (800058c <MX_TIM17_Init+0xec>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ec:	4b27      	ldr	r3, [pc, #156]	; (800058c <MX_TIM17_Init+0xec>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80004f2:	4826      	ldr	r0, [pc, #152]	; (800058c <MX_TIM17_Init+0xec>)
 80004f4:	f004 fc0c 	bl	8004d10 <HAL_TIM_Base_Init>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80004fe:	f000 f8af 	bl	8000660 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000502:	4822      	ldr	r0, [pc, #136]	; (800058c <MX_TIM17_Init+0xec>)
 8000504:	f004 fc5b 	bl	8004dbe <HAL_TIM_PWM_Init>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 800050e:	f000 f8a7 	bl	8000660 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000512:	2360      	movs	r3, #96	; 0x60
 8000514:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800051a:	2300      	movs	r3, #0
 800051c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800051e:	2300      	movs	r3, #0
 8000520:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000522:	2300      	movs	r3, #0
 8000524:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000526:	2300      	movs	r3, #0
 8000528:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800052a:	2300      	movs	r3, #0
 800052c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800052e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000532:	2200      	movs	r2, #0
 8000534:	4619      	mov	r1, r3
 8000536:	4815      	ldr	r0, [pc, #84]	; (800058c <MX_TIM17_Init+0xec>)
 8000538:	f004 fca2 	bl	8004e80 <HAL_TIM_PWM_ConfigChannel>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000542:	f000 f88d 	bl	8000660 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000546:	2300      	movs	r3, #0
 8000548:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800054a:	2300      	movs	r3, #0
 800054c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000556:	2300      	movs	r3, #0
 8000558:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800055a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800055e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000564:	2300      	movs	r3, #0
 8000566:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000568:	463b      	mov	r3, r7
 800056a:	4619      	mov	r1, r3
 800056c:	4807      	ldr	r0, [pc, #28]	; (800058c <MX_TIM17_Init+0xec>)
 800056e:	f005 f901 	bl	8005774 <HAL_TIMEx_ConfigBreakDeadTime>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000578:	f000 f872 	bl	8000660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800057c:	4803      	ldr	r0, [pc, #12]	; (800058c <MX_TIM17_Init+0xec>)
 800057e:	f000 f923 	bl	80007c8 <HAL_TIM_MspPostInit>

}
 8000582:	bf00      	nop
 8000584:	3748      	adds	r7, #72	; 0x48
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000238 	.word	0x20000238
 8000590:	40014800 	.word	0x40014800

08000594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005aa:	4b2b      	ldr	r3, [pc, #172]	; (8000658 <MX_GPIO_Init+0xc4>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a2a      	ldr	r2, [pc, #168]	; (8000658 <MX_GPIO_Init+0xc4>)
 80005b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005b4:	6153      	str	r3, [r2, #20]
 80005b6:	4b28      	ldr	r3, [pc, #160]	; (8000658 <MX_GPIO_Init+0xc4>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	4b25      	ldr	r3, [pc, #148]	; (8000658 <MX_GPIO_Init+0xc4>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a24      	ldr	r2, [pc, #144]	; (8000658 <MX_GPIO_Init+0xc4>)
 80005c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005cc:	6153      	str	r3, [r2, #20]
 80005ce:	4b22      	ldr	r3, [pc, #136]	; (8000658 <MX_GPIO_Init+0xc4>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005da:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <MX_GPIO_Init+0xc4>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a1e      	ldr	r2, [pc, #120]	; (8000658 <MX_GPIO_Init+0xc4>)
 80005e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005e4:	6153      	str	r3, [r2, #20]
 80005e6:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MX_GPIO_Init+0xc4>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005f2:	4b19      	ldr	r3, [pc, #100]	; (8000658 <MX_GPIO_Init+0xc4>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	4a18      	ldr	r2, [pc, #96]	; (8000658 <MX_GPIO_Init+0xc4>)
 80005f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005fc:	6153      	str	r3, [r2, #20]
 80005fe:	4b16      	ldr	r3, [pc, #88]	; (8000658 <MX_GPIO_Init+0xc4>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000610:	4812      	ldr	r0, [pc, #72]	; (800065c <MX_GPIO_Init+0xc8>)
 8000612:	f001 fab7 	bl	8001b84 <HAL_GPIO_WritePin>
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000616:	2301      	movs	r3, #1
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062c:	f001 f930 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD7_Pin
                           LD9_Pin LD10_Pin LD8_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 8000630:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000634:	617b      	str	r3, [r7, #20]
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000636:	2301      	movs	r3, #1
 8000638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	2300      	movs	r3, #0
 8000640:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4619      	mov	r1, r3
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <MX_GPIO_Init+0xc8>)
 800064a:	f001 f921 	bl	8001890 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800064e:	bf00      	nop
 8000650:	3728      	adds	r7, #40	; 0x28
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000
 800065c:	48001000 	.word	0x48001000

08000660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000664:	b672      	cpsid	i
}
 8000666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000668:	e7fe      	b.n	8000668 <Error_Handler+0x8>
	...

0800066c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <HAL_MspInit+0x44>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <HAL_MspInit+0x44>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6193      	str	r3, [r2, #24]
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <HAL_MspInit+0x44>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <HAL_MspInit+0x44>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	4a08      	ldr	r2, [pc, #32]	; (80006b0 <HAL_MspInit+0x44>)
 8000690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000694:	61d3      	str	r3, [r2, #28]
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <HAL_MspInit+0x44>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006a2:	2007      	movs	r0, #7
 80006a4:	f001 f8b2 	bl	800180c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000

080006b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08c      	sub	sp, #48	; 0x30
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 031c 	add.w	r3, r7, #28
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006d4:	d125      	bne.n	8000722 <HAL_ADC_MspInit+0x6e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006d6:	4b29      	ldr	r3, [pc, #164]	; (800077c <HAL_ADC_MspInit+0xc8>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a28      	ldr	r2, [pc, #160]	; (800077c <HAL_ADC_MspInit+0xc8>)
 80006dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e0:	6153      	str	r3, [r2, #20]
 80006e2:	4b26      	ldr	r3, [pc, #152]	; (800077c <HAL_ADC_MspInit+0xc8>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ea:	61bb      	str	r3, [r7, #24]
 80006ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4b23      	ldr	r3, [pc, #140]	; (800077c <HAL_ADC_MspInit+0xc8>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	4a22      	ldr	r2, [pc, #136]	; (800077c <HAL_ADC_MspInit+0xc8>)
 80006f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f8:	6153      	str	r3, [r2, #20]
 80006fa:	4b20      	ldr	r3, [pc, #128]	; (800077c <HAL_ADC_MspInit+0xc8>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000706:	2302      	movs	r3, #2
 8000708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800070a:	2303      	movs	r3, #3
 800070c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	4619      	mov	r1, r3
 8000718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071c:	f001 f8b8 	bl	8001890 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000720:	e028      	b.n	8000774 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a16      	ldr	r2, [pc, #88]	; (8000780 <HAL_ADC_MspInit+0xcc>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d123      	bne.n	8000774 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC34_CLK_ENABLE();
 800072c:	4b13      	ldr	r3, [pc, #76]	; (800077c <HAL_ADC_MspInit+0xc8>)
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	4a12      	ldr	r2, [pc, #72]	; (800077c <HAL_ADC_MspInit+0xc8>)
 8000732:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000736:	6153      	str	r3, [r2, #20]
 8000738:	4b10      	ldr	r3, [pc, #64]	; (800077c <HAL_ADC_MspInit+0xc8>)
 800073a:	695b      	ldr	r3, [r3, #20]
 800073c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000744:	4b0d      	ldr	r3, [pc, #52]	; (800077c <HAL_ADC_MspInit+0xc8>)
 8000746:	695b      	ldr	r3, [r3, #20]
 8000748:	4a0c      	ldr	r2, [pc, #48]	; (800077c <HAL_ADC_MspInit+0xc8>)
 800074a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800074e:	6153      	str	r3, [r2, #20]
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <HAL_ADC_MspInit+0xc8>)
 8000752:	695b      	ldr	r3, [r3, #20]
 8000754:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800075c:	2302      	movs	r3, #2
 800075e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000760:	2303      	movs	r3, #3
 8000762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	4619      	mov	r1, r3
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <HAL_ADC_MspInit+0xd0>)
 8000770:	f001 f88e 	bl	8001890 <HAL_GPIO_Init>
}
 8000774:	bf00      	nop
 8000776:	3730      	adds	r7, #48	; 0x30
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40021000 	.word	0x40021000
 8000780:	50000400 	.word	0x50000400
 8000784:	48000400 	.word	0x48000400

08000788 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <HAL_TIM_Base_MspInit+0x38>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d10b      	bne.n	80007b2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <HAL_TIM_Base_MspInit+0x3c>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <HAL_TIM_Base_MspInit+0x3c>)
 80007a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007a4:	6193      	str	r3, [r2, #24]
 80007a6:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <HAL_TIM_Base_MspInit+0x3c>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80007b2:	bf00      	nop
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40014800 	.word	0x40014800
 80007c4:	40021000 	.word	0x40021000

080007c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a11      	ldr	r2, [pc, #68]	; (800082c <HAL_TIM_MspPostInit+0x64>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d11c      	bne.n	8000824 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <HAL_TIM_MspPostInit+0x68>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	4a10      	ldr	r2, [pc, #64]	; (8000830 <HAL_TIM_MspPostInit+0x68>)
 80007f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f4:	6153      	str	r3, [r2, #20]
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <HAL_TIM_MspPostInit+0x68>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000802:	2380      	movs	r3, #128	; 0x80
 8000804:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8000812:	2301      	movs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	4619      	mov	r1, r3
 800081c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000820:	f001 f836 	bl	8001890 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000824:	bf00      	nop
 8000826:	3720      	adds	r7, #32
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40014800 	.word	0x40014800
 8000830:	40021000 	.word	0x40021000

08000834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <NMI_Handler+0x4>

0800083a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <HardFault_Handler+0x4>

08000840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <MemManage_Handler+0x4>

08000846 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <BusFault_Handler+0x4>

0800084c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <UsageFault_Handler+0x4>

08000852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000880:	f000 f88e 	bl	80009a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}

08000888 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800088c:	4802      	ldr	r0, [pc, #8]	; (8000898 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800088e:	f001 fa89 	bl	8001da4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000f50 	.word	0x20000f50

0800089c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <SystemInit+0x20>)
 80008a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008a6:	4a05      	ldr	r2, [pc, #20]	; (80008bc <SystemInit+0x20>)
 80008a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008f8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008c4:	f7ff ffea 	bl	800089c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c8:	480c      	ldr	r0, [pc, #48]	; (80008fc <LoopForever+0x6>)
  ldr r1, =_edata
 80008ca:	490d      	ldr	r1, [pc, #52]	; (8000900 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008cc:	4a0d      	ldr	r2, [pc, #52]	; (8000904 <LoopForever+0xe>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d0:	e002      	b.n	80008d8 <LoopCopyDataInit>

080008d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d6:	3304      	adds	r3, #4

080008d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008dc:	d3f9      	bcc.n	80008d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008de:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e0:	4c0a      	ldr	r4, [pc, #40]	; (800090c <LoopForever+0x16>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e4:	e001      	b.n	80008ea <LoopFillZerobss>

080008e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e8:	3204      	adds	r2, #4

080008ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ec:	d3fb      	bcc.n	80008e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ee:	f009 fb2f 	bl	8009f50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008f2:	f7ff fc69 	bl	80001c8 <main>

080008f6 <LoopForever>:

LoopForever:
    b LoopForever
 80008f6:	e7fe      	b.n	80008f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008f8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80008fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000900:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000904:	0800a030 	.word	0x0800a030
  ldr r2, =_sbss
 8000908:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 800090c:	2000145c 	.word	0x2000145c

08000910 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000910:	e7fe      	b.n	8000910 <ADC1_2_IRQHandler>
	...

08000914 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <HAL_Init+0x28>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a07      	ldr	r2, [pc, #28]	; (800093c <HAL_Init+0x28>)
 800091e:	f043 0310 	orr.w	r3, r3, #16
 8000922:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000924:	2003      	movs	r0, #3
 8000926:	f000 ff71 	bl	800180c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800092a:	2000      	movs	r0, #0
 800092c:	f000 f808 	bl	8000940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000930:	f7ff fe9c 	bl	800066c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40022000 	.word	0x40022000

08000940 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_InitTick+0x54>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <HAL_InitTick+0x58>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4619      	mov	r1, r3
 8000952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000956:	fbb3 f3f1 	udiv	r3, r3, r1
 800095a:	fbb2 f3f3 	udiv	r3, r2, r3
 800095e:	4618      	mov	r0, r3
 8000960:	f000 ff89 	bl	8001876 <HAL_SYSTICK_Config>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	e00e      	b.n	800098c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b0f      	cmp	r3, #15
 8000972:	d80a      	bhi.n	800098a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000974:	2200      	movs	r2, #0
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	f000 ff51 	bl	8001822 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000980:	4a06      	ldr	r2, [pc, #24]	; (800099c <HAL_InitTick+0x5c>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000986:	2300      	movs	r3, #0
 8000988:	e000      	b.n	800098c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
}
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000000 	.word	0x20000000
 8000998:	20000008 	.word	0x20000008
 800099c:	20000004 	.word	0x20000004

080009a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_IncTick+0x20>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_IncTick+0x24>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4413      	add	r3, r2
 80009b0:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <HAL_IncTick+0x24>)
 80009b2:	6013      	str	r3, [r2, #0]
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000284 	.word	0x20000284

080009c8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return uwTick;  
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <HAL_GetTick+0x14>)
 80009ce:	681b      	ldr	r3, [r3, #0]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20000284 	.word	0x20000284

080009e0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e8:	f7ff ffee 	bl	80009c8 <HAL_GetTick>
 80009ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009f8:	d005      	beq.n	8000a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_Delay+0x44>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4413      	add	r3, r2
 8000a04:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a06:	bf00      	nop
 8000a08:	f7ff ffde 	bl	80009c8 <HAL_GetTick>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d8f7      	bhi.n	8000a08 <HAL_Delay+0x28>
  {
  }
}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000008 	.word	0x20000008

08000a28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b09a      	sub	sp, #104	; 0x68
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a30:	2300      	movs	r3, #0
 8000a32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000a36:	2300      	movs	r3, #0
 8000a38:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d101      	bne.n	8000a48 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000a44:	2301      	movs	r3, #1
 8000a46:	e1c9      	b.n	8000ddc <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	691b      	ldr	r3, [r3, #16]
 8000a4c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	f003 0310 	and.w	r3, r3, #16
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d176      	bne.n	8000b48 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d152      	bne.n	8000b08 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2200      	movs	r2, #0
 8000a66:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2200      	movs	r2, #0
 8000a72:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2200      	movs	r2, #0
 8000a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff fe19 	bl	80006b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d13b      	bne.n	8000b08 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f000 fd85 	bl	80015a0 <ADC_Disable>
 8000a96:	4603      	mov	r3, r0
 8000a98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	f003 0310 	and.w	r3, r3, #16
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d12f      	bne.n	8000b08 <HAL_ADC_Init+0xe0>
 8000aa8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d12b      	bne.n	8000b08 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ab8:	f023 0302 	bic.w	r3, r3, #2
 8000abc:	f043 0202 	orr.w	r2, r3, #2
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	689a      	ldr	r2, [r3, #8]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ad2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	689a      	ldr	r2, [r3, #8]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ae2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ae4:	4b86      	ldr	r3, [pc, #536]	; (8000d00 <HAL_ADC_Init+0x2d8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a86      	ldr	r2, [pc, #536]	; (8000d04 <HAL_ADC_Init+0x2dc>)
 8000aea:	fba2 2303 	umull	r2, r3, r2, r3
 8000aee:	0c9a      	lsrs	r2, r3, #18
 8000af0:	4613      	mov	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	4413      	add	r3, r2
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000afa:	e002      	b.n	8000b02 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d1f9      	bne.n	8000afc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d007      	beq.n	8000b26 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b24:	d110      	bne.n	8000b48 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	f023 0312 	bic.w	r3, r3, #18
 8000b2e:	f043 0210 	orr.w	r2, r3, #16
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	f043 0201 	orr.w	r2, r3, #1
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	f003 0310 	and.w	r3, r3, #16
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	f040 8136 	bne.w	8000dc2 <HAL_ADC_Init+0x39a>
 8000b56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f040 8131 	bne.w	8000dc2 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f040 8129 	bne.w	8000dc2 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000b78:	f043 0202 	orr.w	r2, r3, #2
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b88:	d004      	beq.n	8000b94 <HAL_ADC_Init+0x16c>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a5e      	ldr	r2, [pc, #376]	; (8000d08 <HAL_ADC_Init+0x2e0>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d101      	bne.n	8000b98 <HAL_ADC_Init+0x170>
 8000b94:	4b5d      	ldr	r3, [pc, #372]	; (8000d0c <HAL_ADC_Init+0x2e4>)
 8000b96:	e000      	b.n	8000b9a <HAL_ADC_Init+0x172>
 8000b98:	4b5d      	ldr	r3, [pc, #372]	; (8000d10 <HAL_ADC_Init+0x2e8>)
 8000b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ba4:	d102      	bne.n	8000bac <HAL_ADC_Init+0x184>
 8000ba6:	4b58      	ldr	r3, [pc, #352]	; (8000d08 <HAL_ADC_Init+0x2e0>)
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	e01a      	b.n	8000be2 <HAL_ADC_Init+0x1ba>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a55      	ldr	r2, [pc, #340]	; (8000d08 <HAL_ADC_Init+0x2e0>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d103      	bne.n	8000bbe <HAL_ADC_Init+0x196>
 8000bb6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	e011      	b.n	8000be2 <HAL_ADC_Init+0x1ba>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a54      	ldr	r2, [pc, #336]	; (8000d14 <HAL_ADC_Init+0x2ec>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d102      	bne.n	8000bce <HAL_ADC_Init+0x1a6>
 8000bc8:	4b53      	ldr	r3, [pc, #332]	; (8000d18 <HAL_ADC_Init+0x2f0>)
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	e009      	b.n	8000be2 <HAL_ADC_Init+0x1ba>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a51      	ldr	r2, [pc, #324]	; (8000d18 <HAL_ADC_Init+0x2f0>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d102      	bne.n	8000bde <HAL_ADC_Init+0x1b6>
 8000bd8:	4b4e      	ldr	r3, [pc, #312]	; (8000d14 <HAL_ADC_Init+0x2ec>)
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	e001      	b.n	8000be2 <HAL_ADC_Init+0x1ba>
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	f003 0303 	and.w	r3, r3, #3
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d108      	bne.n	8000c02 <HAL_ADC_Init+0x1da>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d101      	bne.n	8000c02 <HAL_ADC_Init+0x1da>
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e000      	b.n	8000c04 <HAL_ADC_Init+0x1dc>
 8000c02:	2300      	movs	r3, #0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d11c      	bne.n	8000c42 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000c08:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d010      	beq.n	8000c30 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	f003 0303 	and.w	r3, r3, #3
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d107      	bne.n	8000c2a <HAL_ADC_Init+0x202>
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d101      	bne.n	8000c2a <HAL_ADC_Init+0x202>
 8000c26:	2301      	movs	r3, #1
 8000c28:	e000      	b.n	8000c2c <HAL_ADC_Init+0x204>
 8000c2a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d108      	bne.n	8000c42 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c40:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	7e5b      	ldrb	r3, [r3, #25]
 8000c46:	035b      	lsls	r3, r3, #13
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c4c:	2a01      	cmp	r2, #1
 8000c4e:	d002      	beq.n	8000c56 <HAL_ADC_Init+0x22e>
 8000c50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c54:	e000      	b.n	8000c58 <HAL_ADC_Init+0x230>
 8000c56:	2200      	movs	r2, #0
 8000c58:	431a      	orrs	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	431a      	orrs	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d11b      	bne.n	8000cae <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	7e5b      	ldrb	r3, [r3, #25]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d109      	bne.n	8000c92 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c82:	3b01      	subs	r3, #1
 8000c84:	045a      	lsls	r2, r3, #17
 8000c86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c8e:	663b      	str	r3, [r7, #96]	; 0x60
 8000c90:	e00d      	b.n	8000cae <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000c9a:	f043 0220 	orr.w	r2, r3, #32
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	f043 0201 	orr.w	r2, r3, #1
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d03a      	beq.n	8000d2c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a16      	ldr	r2, [pc, #88]	; (8000d14 <HAL_ADC_Init+0x2ec>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d004      	beq.n	8000cca <HAL_ADC_Init+0x2a2>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a14      	ldr	r2, [pc, #80]	; (8000d18 <HAL_ADC_Init+0x2f0>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d128      	bne.n	8000d1c <HAL_ADC_Init+0x2f4>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cce:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000cd2:	d012      	beq.n	8000cfa <HAL_ADC_Init+0x2d2>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cdc:	d00a      	beq.n	8000cf4 <HAL_ADC_Init+0x2cc>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000ce6:	d002      	beq.n	8000cee <HAL_ADC_Init+0x2c6>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cec:	e018      	b.n	8000d20 <HAL_ADC_Init+0x2f8>
 8000cee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf2:	e015      	b.n	8000d20 <HAL_ADC_Init+0x2f8>
 8000cf4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000cf8:	e012      	b.n	8000d20 <HAL_ADC_Init+0x2f8>
 8000cfa:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000cfe:	e00f      	b.n	8000d20 <HAL_ADC_Init+0x2f8>
 8000d00:	20000000 	.word	0x20000000
 8000d04:	431bde83 	.word	0x431bde83
 8000d08:	50000100 	.word	0x50000100
 8000d0c:	50000300 	.word	0x50000300
 8000d10:	50000700 	.word	0x50000700
 8000d14:	50000400 	.word	0x50000400
 8000d18:	50000500 	.word	0x50000500
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000d24:	4313      	orrs	r3, r2
 8000d26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	f003 030c 	and.w	r3, r3, #12
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d114      	bne.n	8000d64 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	6812      	ldr	r2, [r2, #0]
 8000d44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d48:	f023 0302 	bic.w	r3, r3, #2
 8000d4c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	7e1b      	ldrb	r3, [r3, #24]
 8000d52:	039a      	lsls	r2, r3, #14
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d60:	4313      	orrs	r3, r2
 8000d62:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	68da      	ldr	r2, [r3, #12]
 8000d6a:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <HAL_ADC_Init+0x3bc>)
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	6812      	ldr	r2, [r2, #0]
 8000d72:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000d74:	430b      	orrs	r3, r1
 8000d76:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	691b      	ldr	r3, [r3, #16]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d10c      	bne.n	8000d9a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f023 010f 	bic.w	r1, r3, #15
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	1e5a      	subs	r2, r3, #1
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	430a      	orrs	r2, r1
 8000d96:	631a      	str	r2, [r3, #48]	; 0x30
 8000d98:	e007      	b.n	8000daa <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f022 020f 	bic.w	r2, r2, #15
 8000da8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	f023 0303 	bic.w	r3, r3, #3
 8000db8:	f043 0201 	orr.w	r2, r3, #1
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	641a      	str	r2, [r3, #64]	; 0x40
 8000dc0:	e00a      	b.n	8000dd8 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f023 0312 	bic.w	r3, r3, #18
 8000dca:	f043 0210 	orr.w	r2, r3, #16
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000dd8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3768      	adds	r7, #104	; 0x68
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	fff0c007 	.word	0xfff0c007

08000de8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b09b      	sub	sp, #108	; 0x6c
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d101      	bne.n	8000e0a <HAL_ADC_ConfigChannel+0x22>
 8000e06:	2302      	movs	r3, #2
 8000e08:	e2c8      	b.n	800139c <HAL_ADC_ConfigChannel+0x5b4>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	f003 0304 	and.w	r3, r3, #4
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f040 82ac 	bne.w	800137a <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	d81c      	bhi.n	8000e64 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	4613      	mov	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4413      	add	r3, r2
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	231f      	movs	r3, #31
 8000e40:	4093      	lsls	r3, r2
 8000e42:	43db      	mvns	r3, r3
 8000e44:	4019      	ands	r1, r3
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	6818      	ldr	r0, [r3, #0]
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	4413      	add	r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	fa00 f203 	lsl.w	r2, r0, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	631a      	str	r2, [r3, #48]	; 0x30
 8000e62:	e063      	b.n	8000f2c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b09      	cmp	r3, #9
 8000e6a:	d81e      	bhi.n	8000eaa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	4613      	mov	r3, r2
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	3b1e      	subs	r3, #30
 8000e80:	221f      	movs	r2, #31
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	4019      	ands	r1, r3
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	6818      	ldr	r0, [r3, #0]
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685a      	ldr	r2, [r3, #4]
 8000e92:	4613      	mov	r3, r2
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	4413      	add	r3, r2
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	3b1e      	subs	r3, #30
 8000e9c:	fa00 f203 	lsl.w	r2, r0, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ea8:	e040      	b.n	8000f2c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b0e      	cmp	r3, #14
 8000eb0:	d81e      	bhi.n	8000ef0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4413      	add	r3, r2
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	3b3c      	subs	r3, #60	; 0x3c
 8000ec6:	221f      	movs	r2, #31
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	4019      	ands	r1, r3
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	6818      	ldr	r0, [r3, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	4413      	add	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	3b3c      	subs	r3, #60	; 0x3c
 8000ee2:	fa00 f203 	lsl.w	r2, r0, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	430a      	orrs	r2, r1
 8000eec:	639a      	str	r2, [r3, #56]	; 0x38
 8000eee:	e01d      	b.n	8000f2c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685a      	ldr	r2, [r3, #4]
 8000efa:	4613      	mov	r3, r2
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	4413      	add	r3, r2
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	3b5a      	subs	r3, #90	; 0x5a
 8000f04:	221f      	movs	r2, #31
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	4019      	ands	r1, r3
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	6818      	ldr	r0, [r3, #0]
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	4613      	mov	r3, r2
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	4413      	add	r3, r2
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	3b5a      	subs	r3, #90	; 0x5a
 8000f20:	fa00 f203 	lsl.w	r2, r0, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	f003 030c 	and.w	r3, r3, #12
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f040 80e5 	bne.w	8001106 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b09      	cmp	r3, #9
 8000f42:	d91c      	bls.n	8000f7e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6999      	ldr	r1, [r3, #24]
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	4413      	add	r3, r2
 8000f54:	3b1e      	subs	r3, #30
 8000f56:	2207      	movs	r2, #7
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	4019      	ands	r1, r3
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	6898      	ldr	r0, [r3, #8]
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	4413      	add	r3, r2
 8000f6e:	3b1e      	subs	r3, #30
 8000f70:	fa00 f203 	lsl.w	r2, r0, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	619a      	str	r2, [r3, #24]
 8000f7c:	e019      	b.n	8000fb2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	6959      	ldr	r1, [r3, #20]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	2207      	movs	r2, #7
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	4019      	ands	r1, r3
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	6898      	ldr	r0, [r3, #8]
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	4413      	add	r3, r2
 8000fa6:	fa00 f203 	lsl.w	r2, r0, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	695a      	ldr	r2, [r3, #20]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	08db      	lsrs	r3, r3, #3
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	691b      	ldr	r3, [r3, #16]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	d84f      	bhi.n	8001074 <HAL_ADC_ConfigChannel+0x28c>
 8000fd4:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <HAL_ADC_ConfigChannel+0x1f4>)
 8000fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fda:	bf00      	nop
 8000fdc:	08000fed 	.word	0x08000fed
 8000fe0:	0800100f 	.word	0x0800100f
 8000fe4:	08001031 	.word	0x08001031
 8000fe8:	08001053 	.word	0x08001053
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ff2:	4b99      	ldr	r3, [pc, #612]	; (8001258 <HAL_ADC_ConfigChannel+0x470>)
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	683a      	ldr	r2, [r7, #0]
 8000ff8:	6812      	ldr	r2, [r2, #0]
 8000ffa:	0691      	lsls	r1, r2, #26
 8000ffc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ffe:	430a      	orrs	r2, r1
 8001000:	431a      	orrs	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800100a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800100c:	e07b      	b.n	8001106 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001014:	4b90      	ldr	r3, [pc, #576]	; (8001258 <HAL_ADC_ConfigChannel+0x470>)
 8001016:	4013      	ands	r3, r2
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	6812      	ldr	r2, [r2, #0]
 800101c:	0691      	lsls	r1, r2, #26
 800101e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001020:	430a      	orrs	r2, r1
 8001022:	431a      	orrs	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800102c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800102e:	e06a      	b.n	8001106 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001036:	4b88      	ldr	r3, [pc, #544]	; (8001258 <HAL_ADC_ConfigChannel+0x470>)
 8001038:	4013      	ands	r3, r2
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	6812      	ldr	r2, [r2, #0]
 800103e:	0691      	lsls	r1, r2, #26
 8001040:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001042:	430a      	orrs	r2, r1
 8001044:	431a      	orrs	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800104e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001050:	e059      	b.n	8001106 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001058:	4b7f      	ldr	r3, [pc, #508]	; (8001258 <HAL_ADC_ConfigChannel+0x470>)
 800105a:	4013      	ands	r3, r2
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	6812      	ldr	r2, [r2, #0]
 8001060:	0691      	lsls	r1, r2, #26
 8001062:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001064:	430a      	orrs	r2, r1
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001070:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001072:	e048      	b.n	8001106 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	069b      	lsls	r3, r3, #26
 8001084:	429a      	cmp	r2, r3
 8001086:	d107      	bne.n	8001098 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001096:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800109e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	069b      	lsls	r3, r3, #26
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d107      	bne.n	80010bc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80010ba:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80010c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	069b      	lsls	r3, r3, #26
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d107      	bne.n	80010e0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80010de:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80010e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	069b      	lsls	r3, r3, #26
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d107      	bne.n	8001104 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001102:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001104:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	2b01      	cmp	r3, #1
 8001112:	d108      	bne.n	8001126 <HAL_ADC_ConfigChannel+0x33e>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b01      	cmp	r3, #1
 8001120:	d101      	bne.n	8001126 <HAL_ADC_ConfigChannel+0x33e>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <HAL_ADC_ConfigChannel+0x340>
 8001126:	2300      	movs	r3, #0
 8001128:	2b00      	cmp	r3, #0
 800112a:	f040 8131 	bne.w	8001390 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d00f      	beq.n	8001156 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2201      	movs	r2, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43da      	mvns	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	400a      	ands	r2, r1
 8001150:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001154:	e049      	b.n	80011ea <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2201      	movs	r2, #1
 8001164:	409a      	lsls	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	430a      	orrs	r2, r1
 800116c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b09      	cmp	r3, #9
 8001176:	d91c      	bls.n	80011b2 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6999      	ldr	r1, [r3, #24]
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	4613      	mov	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	4413      	add	r3, r2
 8001188:	3b1b      	subs	r3, #27
 800118a:	2207      	movs	r2, #7
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	4019      	ands	r1, r3
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	6898      	ldr	r0, [r3, #8]
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4613      	mov	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4413      	add	r3, r2
 80011a2:	3b1b      	subs	r3, #27
 80011a4:	fa00 f203 	lsl.w	r2, r0, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	430a      	orrs	r2, r1
 80011ae:	619a      	str	r2, [r3, #24]
 80011b0:	e01b      	b.n	80011ea <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6959      	ldr	r1, [r3, #20]
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	1c5a      	adds	r2, r3, #1
 80011be:	4613      	mov	r3, r2
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4413      	add	r3, r2
 80011c4:	2207      	movs	r2, #7
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	4019      	ands	r1, r3
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	6898      	ldr	r0, [r3, #8]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	1c5a      	adds	r2, r3, #1
 80011d8:	4613      	mov	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	fa00 f203 	lsl.w	r2, r0, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	430a      	orrs	r2, r1
 80011e8:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011f2:	d004      	beq.n	80011fe <HAL_ADC_ConfigChannel+0x416>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a18      	ldr	r2, [pc, #96]	; (800125c <HAL_ADC_ConfigChannel+0x474>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d101      	bne.n	8001202 <HAL_ADC_ConfigChannel+0x41a>
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <HAL_ADC_ConfigChannel+0x478>)
 8001200:	e000      	b.n	8001204 <HAL_ADC_ConfigChannel+0x41c>
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <HAL_ADC_ConfigChannel+0x47c>)
 8001204:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b10      	cmp	r3, #16
 800120c:	d105      	bne.n	800121a <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800120e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001216:	2b00      	cmp	r3, #0
 8001218:	d015      	beq.n	8001246 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800121e:	2b11      	cmp	r3, #17
 8001220:	d105      	bne.n	800122e <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00b      	beq.n	8001246 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001232:	2b12      	cmp	r3, #18
 8001234:	f040 80ac 	bne.w	8001390 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001240:	2b00      	cmp	r3, #0
 8001242:	f040 80a5 	bne.w	8001390 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800124e:	d10b      	bne.n	8001268 <HAL_ADC_ConfigChannel+0x480>
 8001250:	4b02      	ldr	r3, [pc, #8]	; (800125c <HAL_ADC_ConfigChannel+0x474>)
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	e023      	b.n	800129e <HAL_ADC_ConfigChannel+0x4b6>
 8001256:	bf00      	nop
 8001258:	83fff000 	.word	0x83fff000
 800125c:	50000100 	.word	0x50000100
 8001260:	50000300 	.word	0x50000300
 8001264:	50000700 	.word	0x50000700
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a4e      	ldr	r2, [pc, #312]	; (80013a8 <HAL_ADC_ConfigChannel+0x5c0>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d103      	bne.n	800127a <HAL_ADC_ConfigChannel+0x492>
 8001272:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	e011      	b.n	800129e <HAL_ADC_ConfigChannel+0x4b6>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a4b      	ldr	r2, [pc, #300]	; (80013ac <HAL_ADC_ConfigChannel+0x5c4>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d102      	bne.n	800128a <HAL_ADC_ConfigChannel+0x4a2>
 8001284:	4b4a      	ldr	r3, [pc, #296]	; (80013b0 <HAL_ADC_ConfigChannel+0x5c8>)
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	e009      	b.n	800129e <HAL_ADC_ConfigChannel+0x4b6>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a48      	ldr	r2, [pc, #288]	; (80013b0 <HAL_ADC_ConfigChannel+0x5c8>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d102      	bne.n	800129a <HAL_ADC_ConfigChannel+0x4b2>
 8001294:	4b45      	ldr	r3, [pc, #276]	; (80013ac <HAL_ADC_ConfigChannel+0x5c4>)
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	e001      	b.n	800129e <HAL_ADC_ConfigChannel+0x4b6>
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d108      	bne.n	80012be <HAL_ADC_ConfigChannel+0x4d6>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d101      	bne.n	80012be <HAL_ADC_ConfigChannel+0x4d6>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <HAL_ADC_ConfigChannel+0x4d8>
 80012be:	2300      	movs	r3, #0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d150      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012c4:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d010      	beq.n	80012ec <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d107      	bne.n	80012e6 <HAL_ADC_ConfigChannel+0x4fe>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d101      	bne.n	80012e6 <HAL_ADC_ConfigChannel+0x4fe>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <HAL_ADC_ConfigChannel+0x500>
 80012e6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d13c      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b10      	cmp	r3, #16
 80012f2:	d11d      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x548>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012fc:	d118      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80012fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001308:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800130a:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <HAL_ADC_ConfigChannel+0x5cc>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a2a      	ldr	r2, [pc, #168]	; (80013b8 <HAL_ADC_ConfigChannel+0x5d0>)
 8001310:	fba2 2303 	umull	r2, r3, r2, r3
 8001314:	0c9a      	lsrs	r2, r3, #18
 8001316:	4613      	mov	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001320:	e002      	b.n	8001328 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	3b01      	subs	r3, #1
 8001326:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f9      	bne.n	8001322 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800132e:	e02e      	b.n	800138e <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b11      	cmp	r3, #17
 8001336:	d10b      	bne.n	8001350 <HAL_ADC_ConfigChannel+0x568>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001340:	d106      	bne.n	8001350 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800134a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800134c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800134e:	e01e      	b.n	800138e <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b12      	cmp	r3, #18
 8001356:	d11a      	bne.n	800138e <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001362:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001364:	e013      	b.n	800138e <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f043 0220 	orr.w	r2, r3, #32
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001378:	e00a      	b.n	8001390 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f043 0220 	orr.w	r2, r3, #32
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800138c:	e000      	b.n	8001390 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800138e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001398:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800139c:	4618      	mov	r0, r3
 800139e:	376c      	adds	r7, #108	; 0x6c
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	50000100 	.word	0x50000100
 80013ac:	50000400 	.word	0x50000400
 80013b0:	50000500 	.word	0x50000500
 80013b4:	20000000 	.word	0x20000000
 80013b8:	431bde83 	.word	0x431bde83

080013bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80013bc:	b480      	push	{r7}
 80013be:	b099      	sub	sp, #100	; 0x64
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013d4:	d102      	bne.n	80013dc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80013d6:	4b6d      	ldr	r3, [pc, #436]	; (800158c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	e01a      	b.n	8001412 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a6a      	ldr	r2, [pc, #424]	; (800158c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d103      	bne.n	80013ee <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80013e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	e011      	b.n	8001412 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a67      	ldr	r2, [pc, #412]	; (8001590 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d102      	bne.n	80013fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80013f8:	4b66      	ldr	r3, [pc, #408]	; (8001594 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	e009      	b.n	8001412 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a64      	ldr	r2, [pc, #400]	; (8001594 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d102      	bne.n	800140e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001408:	4b61      	ldr	r3, [pc, #388]	; (8001590 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	e001      	b.n	8001412 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e0b0      	b.n	800157e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001422:	2b01      	cmp	r3, #1
 8001424:	d101      	bne.n	800142a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001426:	2302      	movs	r3, #2
 8001428:	e0a9      	b.n	800157e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	2b00      	cmp	r3, #0
 800143e:	f040 808d 	bne.w	800155c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	2b00      	cmp	r3, #0
 800144c:	f040 8086 	bne.w	800155c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001458:	d004      	beq.n	8001464 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a4b      	ldr	r2, [pc, #300]	; (800158c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d101      	bne.n	8001468 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001464:	4b4c      	ldr	r3, [pc, #304]	; (8001598 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001466:	e000      	b.n	800146a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001468:	4b4c      	ldr	r3, [pc, #304]	; (800159c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800146a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d040      	beq.n	80014f6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001474:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	6859      	ldr	r1, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001486:	035b      	lsls	r3, r3, #13
 8001488:	430b      	orrs	r3, r1
 800148a:	431a      	orrs	r2, r3
 800148c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800148e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	2b01      	cmp	r3, #1
 800149c:	d108      	bne.n	80014b0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d101      	bne.n	80014b0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80014ac:	2301      	movs	r3, #1
 80014ae:	e000      	b.n	80014b2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80014b0:	2300      	movs	r3, #0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d15c      	bne.n	8001570 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d107      	bne.n	80014d2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d101      	bne.n	80014d2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80014d2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d14b      	bne.n	8001570 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80014d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80014e0:	f023 030f 	bic.w	r3, r3, #15
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	6811      	ldr	r1, [r2, #0]
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	6892      	ldr	r2, [r2, #8]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	431a      	orrs	r2, r3
 80014f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014f2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80014f4:	e03c      	b.n	8001570 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80014f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001500:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	2b01      	cmp	r3, #1
 800150e:	d108      	bne.n	8001522 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b01      	cmp	r3, #1
 800151c:	d101      	bne.n	8001522 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001522:	2300      	movs	r3, #0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d123      	bne.n	8001570 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	2b01      	cmp	r3, #1
 8001532:	d107      	bne.n	8001544 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b01      	cmp	r3, #1
 800153e:	d101      	bne.n	8001544 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001544:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001546:	2b00      	cmp	r3, #0
 8001548:	d112      	bne.n	8001570 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800154a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001552:	f023 030f 	bic.w	r3, r3, #15
 8001556:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001558:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800155a:	e009      	b.n	8001570 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	f043 0220 	orr.w	r2, r3, #32
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800156e:	e000      	b.n	8001572 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001570:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800157a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800157e:	4618      	mov	r0, r3
 8001580:	3764      	adds	r7, #100	; 0x64
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	50000100 	.word	0x50000100
 8001590:	50000400 	.word	0x50000400
 8001594:	50000500 	.word	0x50000500
 8001598:	50000300 	.word	0x50000300
 800159c:	50000700 	.word	0x50000700

080015a0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 0303 	and.w	r3, r3, #3
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d108      	bne.n	80015cc <ADC_Disable+0x2c>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d101      	bne.n	80015cc <ADC_Disable+0x2c>
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <ADC_Disable+0x2e>
 80015cc:	2300      	movs	r3, #0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d047      	beq.n	8001662 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 030d 	and.w	r3, r3, #13
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d10f      	bne.n	8001600 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689a      	ldr	r2, [r3, #8]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 0202 	orr.w	r2, r2, #2
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2203      	movs	r2, #3
 80015f6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80015f8:	f7ff f9e6 	bl	80009c8 <HAL_GetTick>
 80015fc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80015fe:	e029      	b.n	8001654 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	f043 0210 	orr.w	r2, r3, #16
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001610:	f043 0201 	orr.w	r2, r3, #1
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e023      	b.n	8001664 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800161c:	f7ff f9d4 	bl	80009c8 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d914      	bls.n	8001654 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	2b01      	cmp	r3, #1
 8001636:	d10d      	bne.n	8001654 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	f043 0210 	orr.w	r2, r3, #16
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001648:	f043 0201 	orr.w	r2, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e007      	b.n	8001664 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b01      	cmp	r3, #1
 8001660:	d0dc      	beq.n	800161c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001688:	4013      	ands	r3, r2
 800168a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800169c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169e:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	60d3      	str	r3, [r2, #12]
}
 80016a4:	bf00      	nop
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <__NVIC_GetPriorityGrouping+0x18>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	f003 0307 	and.w	r3, r3, #7
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	db0b      	blt.n	80016fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	f003 021f 	and.w	r2, r3, #31
 80016e8:	4907      	ldr	r1, [pc, #28]	; (8001708 <__NVIC_EnableIRQ+0x38>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	2001      	movs	r0, #1
 80016f2:	fa00 f202 	lsl.w	r2, r0, r2
 80016f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000e100 	.word	0xe000e100

0800170c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	2b00      	cmp	r3, #0
 800171e:	db0a      	blt.n	8001736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	b2da      	uxtb	r2, r3
 8001724:	490c      	ldr	r1, [pc, #48]	; (8001758 <__NVIC_SetPriority+0x4c>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	0112      	lsls	r2, r2, #4
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	440b      	add	r3, r1
 8001730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001734:	e00a      	b.n	800174c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4908      	ldr	r1, [pc, #32]	; (800175c <__NVIC_SetPriority+0x50>)
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	3b04      	subs	r3, #4
 8001744:	0112      	lsls	r2, r2, #4
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	440b      	add	r3, r1
 800174a:	761a      	strb	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000e100 	.word	0xe000e100
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001760:	b480      	push	{r7}
 8001762:	b089      	sub	sp, #36	; 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f1c3 0307 	rsb	r3, r3, #7
 800177a:	2b04      	cmp	r3, #4
 800177c:	bf28      	it	cs
 800177e:	2304      	movcs	r3, #4
 8001780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3304      	adds	r3, #4
 8001786:	2b06      	cmp	r3, #6
 8001788:	d902      	bls.n	8001790 <NVIC_EncodePriority+0x30>
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3b03      	subs	r3, #3
 800178e:	e000      	b.n	8001792 <NVIC_EncodePriority+0x32>
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	f04f 32ff 	mov.w	r2, #4294967295
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43da      	mvns	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	401a      	ands	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa01 f303 	lsl.w	r3, r1, r3
 80017b2:	43d9      	mvns	r1, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b8:	4313      	orrs	r3, r2
         );
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3724      	adds	r7, #36	; 0x24
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d8:	d301      	bcc.n	80017de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017da:	2301      	movs	r3, #1
 80017dc:	e00f      	b.n	80017fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017de:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <SysTick_Config+0x40>)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e6:	210f      	movs	r1, #15
 80017e8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ec:	f7ff ff8e 	bl	800170c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <SysTick_Config+0x40>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f6:	4b04      	ldr	r3, [pc, #16]	; (8001808 <SysTick_Config+0x40>)
 80017f8:	2207      	movs	r2, #7
 80017fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	e000e010 	.word	0xe000e010

0800180c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ff29 	bl	800166c <__NVIC_SetPriorityGrouping>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b086      	sub	sp, #24
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
 800182e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001834:	f7ff ff3e 	bl	80016b4 <__NVIC_GetPriorityGrouping>
 8001838:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	6978      	ldr	r0, [r7, #20]
 8001840:	f7ff ff8e 	bl	8001760 <NVIC_EncodePriority>
 8001844:	4602      	mov	r2, r0
 8001846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff5d 	bl	800170c <__NVIC_SetPriority>
}
 8001852:	bf00      	nop
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff31 	bl	80016d0 <__NVIC_EnableIRQ>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff ffa2 	bl	80017c8 <SysTick_Config>
 8001884:	4603      	mov	r3, r0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001890:	b480      	push	{r7}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189e:	e154      	b.n	8001b4a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	2101      	movs	r1, #1
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ac:	4013      	ands	r3, r2
 80018ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 8146 	beq.w	8001b44 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d005      	beq.n	80018d0 <HAL_GPIO_Init+0x40>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d130      	bne.n	8001932 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	2203      	movs	r2, #3
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001906:	2201      	movs	r2, #1
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	091b      	lsrs	r3, r3, #4
 800191c:	f003 0201 	and.w	r2, r3, #1
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	2b03      	cmp	r3, #3
 800193c:	d017      	beq.n	800196e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	2203      	movs	r2, #3
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4013      	ands	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d123      	bne.n	80019c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	08da      	lsrs	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3208      	adds	r2, #8
 8001982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001986:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	220f      	movs	r2, #15
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	691a      	ldr	r2, [r3, #16]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	08da      	lsrs	r2, r3, #3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3208      	adds	r2, #8
 80019bc:	6939      	ldr	r1, [r7, #16]
 80019be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	2203      	movs	r2, #3
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 0203 	and.w	r2, r3, #3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 80a0 	beq.w	8001b44 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a04:	4b58      	ldr	r3, [pc, #352]	; (8001b68 <HAL_GPIO_Init+0x2d8>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	4a57      	ldr	r2, [pc, #348]	; (8001b68 <HAL_GPIO_Init+0x2d8>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6193      	str	r3, [r2, #24]
 8001a10:	4b55      	ldr	r3, [pc, #340]	; (8001b68 <HAL_GPIO_Init+0x2d8>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a1c:	4a53      	ldr	r2, [pc, #332]	; (8001b6c <HAL_GPIO_Init+0x2dc>)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	089b      	lsrs	r3, r3, #2
 8001a22:	3302      	adds	r3, #2
 8001a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	220f      	movs	r2, #15
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a46:	d019      	beq.n	8001a7c <HAL_GPIO_Init+0x1ec>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a49      	ldr	r2, [pc, #292]	; (8001b70 <HAL_GPIO_Init+0x2e0>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d013      	beq.n	8001a78 <HAL_GPIO_Init+0x1e8>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a48      	ldr	r2, [pc, #288]	; (8001b74 <HAL_GPIO_Init+0x2e4>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d00d      	beq.n	8001a74 <HAL_GPIO_Init+0x1e4>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a47      	ldr	r2, [pc, #284]	; (8001b78 <HAL_GPIO_Init+0x2e8>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d007      	beq.n	8001a70 <HAL_GPIO_Init+0x1e0>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a46      	ldr	r2, [pc, #280]	; (8001b7c <HAL_GPIO_Init+0x2ec>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d101      	bne.n	8001a6c <HAL_GPIO_Init+0x1dc>
 8001a68:	2304      	movs	r3, #4
 8001a6a:	e008      	b.n	8001a7e <HAL_GPIO_Init+0x1ee>
 8001a6c:	2305      	movs	r3, #5
 8001a6e:	e006      	b.n	8001a7e <HAL_GPIO_Init+0x1ee>
 8001a70:	2303      	movs	r3, #3
 8001a72:	e004      	b.n	8001a7e <HAL_GPIO_Init+0x1ee>
 8001a74:	2302      	movs	r3, #2
 8001a76:	e002      	b.n	8001a7e <HAL_GPIO_Init+0x1ee>
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e000      	b.n	8001a7e <HAL_GPIO_Init+0x1ee>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	f002 0203 	and.w	r2, r2, #3
 8001a84:	0092      	lsls	r2, r2, #2
 8001a86:	4093      	lsls	r3, r2
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a8e:	4937      	ldr	r1, [pc, #220]	; (8001b6c <HAL_GPIO_Init+0x2dc>)
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	089b      	lsrs	r3, r3, #2
 8001a94:	3302      	adds	r3, #2
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a9c:	4b38      	ldr	r3, [pc, #224]	; (8001b80 <HAL_GPIO_Init+0x2f0>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ac0:	4a2f      	ldr	r2, [pc, #188]	; (8001b80 <HAL_GPIO_Init+0x2f0>)
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ac6:	4b2e      	ldr	r3, [pc, #184]	; (8001b80 <HAL_GPIO_Init+0x2f0>)
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001aea:	4a25      	ldr	r2, [pc, #148]	; (8001b80 <HAL_GPIO_Init+0x2f0>)
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001af0:	4b23      	ldr	r3, [pc, #140]	; (8001b80 <HAL_GPIO_Init+0x2f0>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b14:	4a1a      	ldr	r2, [pc, #104]	; (8001b80 <HAL_GPIO_Init+0x2f0>)
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b1a:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <HAL_GPIO_Init+0x2f0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	43db      	mvns	r3, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b3e:	4a10      	ldr	r2, [pc, #64]	; (8001b80 <HAL_GPIO_Init+0x2f0>)
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	3301      	adds	r3, #1
 8001b48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	fa22 f303 	lsr.w	r3, r2, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f47f aea3 	bne.w	80018a0 <HAL_GPIO_Init+0x10>
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	bf00      	nop
 8001b5e:	371c      	adds	r7, #28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40010000 	.word	0x40010000
 8001b70:	48000400 	.word	0x48000400
 8001b74:	48000800 	.word	0x48000800
 8001b78:	48000c00 	.word	0x48000c00
 8001b7c:	48001000 	.word	0x48001000
 8001b80:	40010400 	.word	0x40010400

08001b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	807b      	strh	r3, [r7, #2]
 8001b90:	4613      	mov	r3, r2
 8001b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b94:	787b      	ldrb	r3, [r7, #1]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b9a:	887a      	ldrh	r2, [r7, #2]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ba0:	e002      	b.n	8001ba8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ba2:	887a      	ldrh	r2, [r7, #2]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bb6:	b08b      	sub	sp, #44	; 0x2c
 8001bb8:	af06      	add	r7, sp, #24
 8001bba:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e0c4      	b.n	8001d50 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d106      	bne.n	8001be0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f007 feda 	bl	8009994 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2203      	movs	r2, #3
 8001be4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f003 fe56 	bl	800589e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	73fb      	strb	r3, [r7, #15]
 8001bf6:	e040      	b.n	8001c7a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	440b      	add	r3, r1
 8001c08:	3301      	adds	r3, #1
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	440b      	add	r3, r1
 8001c1e:	7bfa      	ldrb	r2, [r7, #15]
 8001c20:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	440b      	add	r3, r1
 8001c32:	3303      	adds	r3, #3
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c38:	7bfa      	ldrb	r2, [r7, #15]
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	440b      	add	r3, r1
 8001c46:	3338      	adds	r3, #56	; 0x38
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c4c:	7bfa      	ldrb	r2, [r7, #15]
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	440b      	add	r3, r1
 8001c5a:	333c      	adds	r3, #60	; 0x3c
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c60:	7bfa      	ldrb	r2, [r7, #15]
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	440b      	add	r3, r1
 8001c6e:	3340      	adds	r3, #64	; 0x40
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	3301      	adds	r3, #1
 8001c78:	73fb      	strb	r3, [r7, #15]
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d3b9      	bcc.n	8001bf8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c84:	2300      	movs	r3, #0
 8001c86:	73fb      	strb	r3, [r7, #15]
 8001c88:	e044      	b.n	8001d14 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c8a:	7bfa      	ldrb	r2, [r7, #15]
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	440b      	add	r3, r1
 8001c98:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ca0:	7bfa      	ldrb	r2, [r7, #15]
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	440b      	add	r3, r1
 8001cae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cb6:	7bfa      	ldrb	r2, [r7, #15]
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	440b      	add	r3, r1
 8001cc4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001cc8:	2200      	movs	r2, #0
 8001cca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ccc:	7bfa      	ldrb	r2, [r7, #15]
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	440b      	add	r3, r1
 8001cda:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ce2:	7bfa      	ldrb	r2, [r7, #15]
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	440b      	add	r3, r1
 8001cf0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cf8:	7bfa      	ldrb	r2, [r7, #15]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	440b      	add	r3, r1
 8001d06:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
 8001d10:	3301      	adds	r3, #1
 8001d12:	73fb      	strb	r3, [r7, #15]
 8001d14:	7bfa      	ldrb	r2, [r7, #15]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d3b5      	bcc.n	8001c8a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	687e      	ldr	r6, [r7, #4]
 8001d26:	466d      	mov	r5, sp
 8001d28:	f106 0410 	add.w	r4, r6, #16
 8001d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d30:	6823      	ldr	r3, [r4, #0]
 8001d32:	602b      	str	r3, [r5, #0]
 8001d34:	1d33      	adds	r3, r6, #4
 8001d36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d38:	6838      	ldr	r0, [r7, #0]
 8001d3a:	f003 fdcb 	bl	80058d4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d58 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d101      	bne.n	8001d6e <HAL_PCD_Start+0x16>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e016      	b.n	8001d9c <HAL_PCD_Start+0x44>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f003 fd78 	bl	8005870 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001d80:	2101      	movs	r1, #1
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f008 f8a4 	bl	8009ed0 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f006 f838 	bl	8007e02 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f006 f831 	bl	8007e18 <USB_ReadInterrupts>
 8001db6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 fab2 	bl	800232c <PCD_EP_ISR_Handler>

    return;
 8001dc8:	e0bd      	b.n	8001f46 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d013      	beq.n	8001dfc <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001de6:	b292      	uxth	r2, r2
 8001de8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f007 fe72 	bl	8009ad6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001df2:	2100      	movs	r1, #0
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f8a9 	bl	8001f4c <HAL_PCD_SetAddress>

    return;
 8001dfa:	e0a4      	b.n	8001f46 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00c      	beq.n	8001e20 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e18:	b292      	uxth	r2, r2
 8001e1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e1e:	e092      	b.n	8001f46 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00c      	beq.n	8001e44 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e3c:	b292      	uxth	r2, r2
 8001e3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e42:	e080      	b.n	8001f46 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d027      	beq.n	8001e9e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 0204 	bic.w	r2, r2, #4
 8001e60:	b292      	uxth	r2, r2
 8001e62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0208 	bic.w	r2, r2, #8
 8001e78:	b292      	uxth	r2, r2
 8001e7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f007 fe62 	bl	8009b48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e96:	b292      	uxth	r2, r2
 8001e98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e9c:	e053      	b.n	8001f46 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d027      	beq.n	8001ef8 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0208 	orr.w	r2, r2, #8
 8001eba:	b292      	uxth	r2, r2
 8001ebc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ed2:	b292      	uxth	r2, r2
 8001ed4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0204 	orr.w	r2, r2, #4
 8001eea:	b292      	uxth	r2, r2
 8001eec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f007 fe0f 	bl	8009b14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001ef6:	e026      	b.n	8001f46 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00f      	beq.n	8001f22 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f14:	b292      	uxth	r2, r2
 8001f16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f007 fdcd 	bl	8009aba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001f20:	e011      	b.n	8001f46 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00c      	beq.n	8001f46 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f3e:	b292      	uxth	r2, r2
 8001f40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f44:	bf00      	nop
  }
}
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_PCD_SetAddress+0x1a>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e013      	b.n	8001f8e <HAL_PCD_SetAddress+0x42>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	78fa      	ldrb	r2, [r7, #3]
 8001f72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	78fa      	ldrb	r2, [r7, #3]
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f005 ff2b 	bl	8007dda <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b084      	sub	sp, #16
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	4608      	mov	r0, r1
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	70fb      	strb	r3, [r7, #3]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	803b      	strh	r3, [r7, #0]
 8001fac:	4613      	mov	r3, r2
 8001fae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	da0e      	bge.n	8001fda <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	1c5a      	adds	r2, r3, #1
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	4413      	add	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	705a      	strb	r2, [r3, #1]
 8001fd8:	e00e      	b.n	8001ff8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	f003 0207 	and.w	r2, r3, #7
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	4413      	add	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002004:	883a      	ldrh	r2, [r7, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	78ba      	ldrb	r2, [r7, #2]
 800200e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002010:	78bb      	ldrb	r3, [r7, #2]
 8002012:	2b02      	cmp	r3, #2
 8002014:	d102      	bne.n	800201c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_PCD_EP_Open+0x94>
 8002026:	2302      	movs	r3, #2
 8002028:	e00e      	b.n	8002048 <HAL_PCD_EP_Open+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68f9      	ldr	r1, [r7, #12]
 8002038:	4618      	mov	r0, r3
 800203a:	f003 fc6d 	bl	8005918 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002046:	7afb      	ldrb	r3, [r7, #11]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800205c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002060:	2b00      	cmp	r3, #0
 8002062:	da0e      	bge.n	8002082 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	4413      	add	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2201      	movs	r2, #1
 800207e:	705a      	strb	r2, [r3, #1]
 8002080:	e00e      	b.n	80020a0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002082:	78fb      	ldrb	r3, [r7, #3]
 8002084:	f003 0207 	and.w	r2, r3, #7
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	4413      	add	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <HAL_PCD_EP_Close+0x6a>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e00e      	b.n	80020d8 <HAL_PCD_EP_Close+0x88>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68f9      	ldr	r1, [r7, #12]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f003 ffe9 	bl	80060a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	607a      	str	r2, [r7, #4]
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	460b      	mov	r3, r1
 80020ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020f0:	7afb      	ldrb	r3, [r7, #11]
 80020f2:	f003 0207 	and.w	r2, r3, #7
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4413      	add	r3, r2
 8002106:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2200      	movs	r2, #0
 8002118:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	2200      	movs	r2, #0
 800211e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002120:	7afb      	ldrb	r3, [r7, #11]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	b2da      	uxtb	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6979      	ldr	r1, [r7, #20]
 8002132:	4618      	mov	r0, r3
 8002134:	f004 f9a1 	bl	800647a <USB_EPStartXfer>

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	460b      	mov	r3, r1
 800214c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	f003 0207 	and.w	r2, r3, #7
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	440b      	add	r3, r1
 8002160:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002164:	681b      	ldr	r3, [r3, #0]
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b086      	sub	sp, #24
 8002176:	af00      	add	r7, sp, #0
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	603b      	str	r3, [r7, #0]
 800217e:	460b      	mov	r3, r1
 8002180:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002182:	7afb      	ldrb	r3, [r7, #11]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	1c5a      	adds	r2, r3, #1
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4413      	add	r3, r2
 8002196:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2200      	movs	r2, #0
 80021b6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	2201      	movs	r2, #1
 80021bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021be:	7afb      	ldrb	r3, [r7, #11]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6979      	ldr	r1, [r7, #20]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f004 f952 	bl	800647a <USB_EPStartXfer>

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	f003 0207 	and.w	r2, r3, #7
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d901      	bls.n	80021fe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e03e      	b.n	800227c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002202:	2b00      	cmp	r3, #0
 8002204:	da0e      	bge.n	8002224 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002206:	78fb      	ldrb	r3, [r7, #3]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2201      	movs	r2, #1
 8002220:	705a      	strb	r2, [r3, #1]
 8002222:	e00c      	b.n	800223e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002224:	78fa      	ldrb	r2, [r7, #3]
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2201      	movs	r2, #1
 8002242:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	b2da      	uxtb	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002256:	2b01      	cmp	r3, #1
 8002258:	d101      	bne.n	800225e <HAL_PCD_EP_SetStall+0x7e>
 800225a:	2302      	movs	r3, #2
 800225c:	e00e      	b.n	800227c <HAL_PCD_EP_SetStall+0x9c>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68f9      	ldr	r1, [r7, #12]
 800226c:	4618      	mov	r0, r3
 800226e:	f005 fcb5 	bl	8007bdc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002290:	78fb      	ldrb	r3, [r7, #3]
 8002292:	f003 020f 	and.w	r2, r3, #15
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	429a      	cmp	r2, r3
 800229c:	d901      	bls.n	80022a2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e040      	b.n	8002324 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	da0e      	bge.n	80022c8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	1c5a      	adds	r2, r3, #1
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2201      	movs	r2, #1
 80022c4:	705a      	strb	r2, [r3, #1]
 80022c6:	e00e      	b.n	80022e6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	f003 0207 	and.w	r2, r3, #7
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	4413      	add	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_PCD_EP_ClrStall+0x82>
 8002302:	2302      	movs	r3, #2
 8002304:	e00e      	b.n	8002324 <HAL_PCD_EP_ClrStall+0xa0>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68f9      	ldr	r1, [r7, #12]
 8002314:	4618      	mov	r0, r3
 8002316:	f005 fcb2 	bl	8007c7e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b096      	sub	sp, #88	; 0x58
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002334:	e3bf      	b.n	8002ab6 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800233e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002342:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002350:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002354:	2b00      	cmp	r3, #0
 8002356:	f040 8179 	bne.w	800264c <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800235a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800235e:	f003 0310 	and.w	r3, r3, #16
 8002362:	2b00      	cmp	r3, #0
 8002364:	d152      	bne.n	800240c <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	b29b      	uxth	r3, r3
 800236e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002376:	81fb      	strh	r3, [r7, #14]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	89fb      	ldrh	r3, [r7, #14]
 800237e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002386:	b29b      	uxth	r3, r3
 8002388:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3328      	adds	r3, #40	; 0x28
 800238e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002398:	b29b      	uxth	r3, r3
 800239a:	461a      	mov	r2, r3
 800239c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4413      	add	r3, r2
 80023a4:	3302      	adds	r3, #2
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80023bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023be:	695a      	ldr	r2, [r3, #20]
 80023c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	441a      	add	r2, r3
 80023c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023c8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80023ca:	2100      	movs	r1, #0
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f007 fb5a 	bl	8009a86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 836b 	beq.w	8002ab6 <PCD_EP_ISR_Handler+0x78a>
 80023e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f040 8366 	bne.w	8002ab6 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	b292      	uxth	r2, r2
 80023fe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800240a:	e354      	b.n	8002ab6 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002412:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800241e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002426:	2b00      	cmp	r3, #0
 8002428:	d034      	beq.n	8002494 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002432:	b29b      	uxth	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	4413      	add	r3, r2
 800243e:	3306      	adds	r3, #6
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	4413      	add	r3, r2
 8002448:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002454:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002462:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002466:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002468:	b29b      	uxth	r3, r3
 800246a:	f005 fd2b 	bl	8007ec4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	b29a      	uxth	r2, r3
 8002476:	f640 738f 	movw	r3, #3983	; 0xf8f
 800247a:	4013      	ands	r3, r2
 800247c:	823b      	strh	r3, [r7, #16]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	8a3a      	ldrh	r2, [r7, #16]
 8002484:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002488:	b292      	uxth	r2, r2
 800248a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f007 facd 	bl	8009a2c <HAL_PCD_SetupStageCallback>
 8002492:	e310      	b.n	8002ab6 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002494:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002498:	2b00      	cmp	r3, #0
 800249a:	f280 830c 	bge.w	8002ab6 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024aa:	4013      	ands	r3, r2
 80024ac:	83fb      	strh	r3, [r7, #30]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	8bfa      	ldrh	r2, [r7, #30]
 80024b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024b8:	b292      	uxth	r2, r2
 80024ba:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	461a      	mov	r2, r3
 80024c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4413      	add	r3, r2
 80024d0:	3306      	adds	r3, #6
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6812      	ldr	r2, [r2, #0]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80024e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d019      	beq.n	8002524 <PCD_EP_ISR_Handler+0x1f8>
 80024f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d015      	beq.n	8002524 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024fe:	6959      	ldr	r1, [r3, #20]
 8002500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002502:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002506:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002508:	b29b      	uxth	r3, r3
 800250a:	f005 fcdb 	bl	8007ec4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800250e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002510:	695a      	ldr	r2, [r3, #20]
 8002512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	441a      	add	r2, r3
 8002518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800251a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800251c:	2100      	movs	r1, #0
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f007 fa96 	bl	8009a50 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800252e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002536:	2b00      	cmp	r3, #0
 8002538:	f040 82bd 	bne.w	8002ab6 <PCD_EP_ISR_Handler+0x78a>
 800253c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002540:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002544:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002548:	f000 82b5 	beq.w	8002ab6 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800255a:	b29b      	uxth	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	4413      	add	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800256a:	617b      	str	r3, [r7, #20]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	b29b      	uxth	r3, r3
 8002572:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002576:	b29a      	uxth	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	801a      	strh	r2, [r3, #0]
 800257c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	2b3e      	cmp	r3, #62	; 0x3e
 8002582:	d91d      	bls.n	80025c0 <PCD_EP_ISR_Handler+0x294>
 8002584:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	095b      	lsrs	r3, r3, #5
 800258a:	647b      	str	r3, [r7, #68]	; 0x44
 800258c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	f003 031f 	and.w	r3, r3, #31
 8002594:	2b00      	cmp	r3, #0
 8002596:	d102      	bne.n	800259e <PCD_EP_ISR_Handler+0x272>
 8002598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800259a:	3b01      	subs	r3, #1
 800259c:	647b      	str	r3, [r7, #68]	; 0x44
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	029b      	lsls	r3, r3, #10
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	4313      	orrs	r3, r2
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	801a      	strh	r2, [r3, #0]
 80025be:	e026      	b.n	800260e <PCD_EP_ISR_Handler+0x2e2>
 80025c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10a      	bne.n	80025de <PCD_EP_ISR_Handler+0x2b2>
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	801a      	strh	r2, [r3, #0]
 80025dc:	e017      	b.n	800260e <PCD_EP_ISR_Handler+0x2e2>
 80025de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	085b      	lsrs	r3, r3, #1
 80025e4:	647b      	str	r3, [r7, #68]	; 0x44
 80025e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <PCD_EP_ISR_Handler+0x2cc>
 80025f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025f4:	3301      	adds	r3, #1
 80025f6:	647b      	str	r3, [r7, #68]	; 0x44
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002600:	b29b      	uxth	r3, r3
 8002602:	029b      	lsls	r3, r3, #10
 8002604:	b29b      	uxth	r3, r3
 8002606:	4313      	orrs	r3, r2
 8002608:	b29a      	uxth	r2, r3
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	b29b      	uxth	r3, r3
 8002616:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800261a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800261e:	827b      	strh	r3, [r7, #18]
 8002620:	8a7b      	ldrh	r3, [r7, #18]
 8002622:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002626:	827b      	strh	r3, [r7, #18]
 8002628:	8a7b      	ldrh	r3, [r7, #18]
 800262a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800262e:	827b      	strh	r3, [r7, #18]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	8a7b      	ldrh	r3, [r7, #18]
 8002636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800263a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800263e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002646:	b29b      	uxth	r3, r3
 8002648:	8013      	strh	r3, [r2, #0]
 800264a:	e234      	b.n	8002ab6 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	461a      	mov	r2, r3
 8002652:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002660:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002664:	2b00      	cmp	r3, #0
 8002666:	f280 80fc 	bge.w	8002862 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	b29a      	uxth	r2, r3
 800267c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002680:	4013      	ands	r3, r2
 8002682:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002698:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800269c:	b292      	uxth	r2, r2
 800269e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80026a0:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	4413      	add	r3, r2
 80026b4:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80026b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b8:	7b1b      	ldrb	r3, [r3, #12]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d125      	bne.n	800270a <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4413      	add	r3, r2
 80026d2:	3306      	adds	r3, #6
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6812      	ldr	r2, [r2, #0]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026e6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80026ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 8092 	beq.w	8002818 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026fa:	6959      	ldr	r1, [r3, #20]
 80026fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026fe:	88da      	ldrh	r2, [r3, #6]
 8002700:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002704:	f005 fbde 	bl	8007ec4 <USB_ReadPMA>
 8002708:	e086      	b.n	8002818 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800270a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800270c:	78db      	ldrb	r3, [r3, #3]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d10a      	bne.n	8002728 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002712:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002716:	461a      	mov	r2, r3
 8002718:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f9d9 	bl	8002ad2 <HAL_PCD_EP_DB_Receive>
 8002720:	4603      	mov	r3, r0
 8002722:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002726:	e077      	b.n	8002818 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	461a      	mov	r2, r3
 800272e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	b29b      	uxth	r3, r3
 800273a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800273e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002742:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	441a      	add	r2, r3
 8002754:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002758:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800275c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002764:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002768:	b29b      	uxth	r3, r3
 800276a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	b29b      	uxth	r3, r3
 800277e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d024      	beq.n	80027d0 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800278e:	b29b      	uxth	r3, r3
 8002790:	461a      	mov	r2, r3
 8002792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	4413      	add	r3, r2
 800279a:	3302      	adds	r3, #2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6812      	ldr	r2, [r2, #0]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027ae:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80027b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d02e      	beq.n	8002818 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c0:	6959      	ldr	r1, [r3, #20]
 80027c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c4:	891a      	ldrh	r2, [r3, #8]
 80027c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027ca:	f005 fb7b 	bl	8007ec4 <USB_ReadPMA>
 80027ce:	e023      	b.n	8002818 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027d8:	b29b      	uxth	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	4413      	add	r3, r2
 80027e4:	3306      	adds	r3, #6
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027f8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80027fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002800:	2b00      	cmp	r3, #0
 8002802:	d009      	beq.n	8002818 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6818      	ldr	r0, [r3, #0]
 8002808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800280a:	6959      	ldr	r1, [r3, #20]
 800280c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800280e:	895a      	ldrh	r2, [r3, #10]
 8002810:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002814:	f005 fb56 	bl	8007ec4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800281a:	69da      	ldr	r2, [r3, #28]
 800281c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002820:	441a      	add	r2, r3
 8002822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002824:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002828:	695a      	ldr	r2, [r3, #20]
 800282a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800282e:	441a      	add	r2, r3
 8002830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002832:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <PCD_EP_ISR_Handler+0x51c>
 800283c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	429a      	cmp	r2, r3
 8002846:	d206      	bcs.n	8002856 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	4619      	mov	r1, r3
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f007 f8fe 	bl	8009a50 <HAL_PCD_DataOutStageCallback>
 8002854:	e005      	b.n	8002862 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800285c:	4618      	mov	r0, r3
 800285e:	f003 fe0c 	bl	800647a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002862:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 8123 	beq.w	8002ab6 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8002870:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	4413      	add	r3, r2
 8002882:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	461a      	mov	r2, r3
 800288a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	b29b      	uxth	r3, r3
 8002896:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800289a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	441a      	add	r2, r3
 80028b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80028b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028bc:	b29b      	uxth	r3, r3
 80028be:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80028c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c2:	78db      	ldrb	r3, [r3, #3]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	f040 80a2 	bne.w	8002a0e <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80028ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028cc:	2200      	movs	r2, #0
 80028ce:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80028d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d2:	7b1b      	ldrb	r3, [r3, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 8093 	beq.w	8002a00 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80028de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d046      	beq.n	8002974 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e8:	785b      	ldrb	r3, [r3, #1]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d126      	bne.n	800293c <PCD_EP_ISR_Handler+0x610>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	461a      	mov	r2, r3
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	4413      	add	r3, r2
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
 8002906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	011a      	lsls	r2, r3, #4
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	4413      	add	r3, r2
 8002910:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002914:	623b      	str	r3, [r7, #32]
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	b29b      	uxth	r3, r3
 800291c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002920:	b29a      	uxth	r2, r3
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	801a      	strh	r2, [r3, #0]
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	b29b      	uxth	r3, r3
 800292c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002930:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002934:	b29a      	uxth	r2, r3
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	801a      	strh	r2, [r3, #0]
 800293a:	e061      	b.n	8002a00 <PCD_EP_ISR_Handler+0x6d4>
 800293c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800293e:	785b      	ldrb	r3, [r3, #1]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d15d      	bne.n	8002a00 <PCD_EP_ISR_Handler+0x6d4>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002952:	b29b      	uxth	r3, r3
 8002954:	461a      	mov	r2, r3
 8002956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002958:	4413      	add	r3, r2
 800295a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800295c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	011a      	lsls	r2, r3, #4
 8002962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002964:	4413      	add	r3, r2
 8002966:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800296a:	62bb      	str	r3, [r7, #40]	; 0x28
 800296c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296e:	2200      	movs	r2, #0
 8002970:	801a      	strh	r2, [r3, #0]
 8002972:	e045      	b.n	8002a00 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	63fb      	str	r3, [r7, #60]	; 0x3c
 800297a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800297c:	785b      	ldrb	r3, [r3, #1]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d126      	bne.n	80029d0 <PCD_EP_ISR_Handler+0x6a4>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	637b      	str	r3, [r7, #52]	; 0x34
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002990:	b29b      	uxth	r3, r3
 8002992:	461a      	mov	r2, r3
 8002994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002996:	4413      	add	r3, r2
 8002998:	637b      	str	r3, [r7, #52]	; 0x34
 800299a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	011a      	lsls	r2, r3, #4
 80029a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a2:	4413      	add	r3, r2
 80029a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029a8:	633b      	str	r3, [r7, #48]	; 0x30
 80029aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b8:	801a      	strh	r2, [r3, #0]
 80029ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029bc:	881b      	ldrh	r3, [r3, #0]
 80029be:	b29b      	uxth	r3, r3
 80029c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029cc:	801a      	strh	r2, [r3, #0]
 80029ce:	e017      	b.n	8002a00 <PCD_EP_ISR_Handler+0x6d4>
 80029d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d2:	785b      	ldrb	r3, [r3, #1]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d113      	bne.n	8002a00 <PCD_EP_ISR_Handler+0x6d4>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e6:	4413      	add	r3, r2
 80029e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	011a      	lsls	r2, r3, #4
 80029f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029f2:	4413      	add	r3, r2
 80029f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80029fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fc:	2200      	movs	r2, #0
 80029fe:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	4619      	mov	r1, r3
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f007 f83d 	bl	8009a86 <HAL_PCD_DataInStageCallback>
 8002a0c:	e053      	b.n	8002ab6 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002a0e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d146      	bne.n	8002aa8 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	461a      	mov	r2, r3
 8002a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3302      	adds	r3, #2
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a48:	699a      	ldr	r2, [r3, #24]
 8002a4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d907      	bls.n	8002a62 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8002a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a54:	699a      	ldr	r2, [r3, #24]
 8002a56:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a5a:	1ad2      	subs	r2, r2, r3
 8002a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a5e:	619a      	str	r2, [r3, #24]
 8002a60:	e002      	b.n	8002a68 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8002a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a64:	2200      	movs	r2, #0
 8002a66:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d106      	bne.n	8002a7e <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	4619      	mov	r1, r3
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f007 f805 	bl	8009a86 <HAL_PCD_DataInStageCallback>
 8002a7c:	e01b      	b.n	8002ab6 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a80:	695a      	ldr	r2, [r3, #20]
 8002a82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a86:	441a      	add	r2, r3
 8002a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a8a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a8e:	69da      	ldr	r2, [r3, #28]
 8002a90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a94:	441a      	add	r2, r3
 8002a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a98:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f003 fcea 	bl	800647a <USB_EPStartXfer>
 8002aa6:	e006      	b.n	8002ab6 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002aa8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002aac:	461a      	mov	r2, r3
 8002aae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f91b 	bl	8002cec <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	b21b      	sxth	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f6ff ac37 	blt.w	8002336 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3758      	adds	r7, #88	; 0x58
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b088      	sub	sp, #32
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	4613      	mov	r3, r2
 8002ade:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d07e      	beq.n	8002be8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	4413      	add	r3, r2
 8002afe:	3302      	adds	r3, #2
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b12:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	699a      	ldr	r2, [r3, #24]
 8002b18:	8b7b      	ldrh	r3, [r7, #26]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d306      	bcc.n	8002b2c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	699a      	ldr	r2, [r3, #24]
 8002b22:	8b7b      	ldrh	r3, [r7, #26]
 8002b24:	1ad2      	subs	r2, r2, r3
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	619a      	str	r2, [r3, #24]
 8002b2a:	e002      	b.n	8002b32 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d123      	bne.n	8002b82 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b54:	833b      	strh	r3, [r7, #24]
 8002b56:	8b3b      	ldrh	r3, [r7, #24]
 8002b58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b5c:	833b      	strh	r3, [r7, #24]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	441a      	add	r2, r3
 8002b6c:	8b3b      	ldrh	r3, [r7, #24]
 8002b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d01f      	beq.n	8002bcc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba6:	82fb      	strh	r3, [r7, #22]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	441a      	add	r2, r3
 8002bb6:	8afb      	ldrh	r3, [r7, #22]
 8002bb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002bcc:	8b7b      	ldrh	r3, [r7, #26]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 8087 	beq.w	8002ce2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6818      	ldr	r0, [r3, #0]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	6959      	ldr	r1, [r3, #20]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	891a      	ldrh	r2, [r3, #8]
 8002be0:	8b7b      	ldrh	r3, [r7, #26]
 8002be2:	f005 f96f 	bl	8007ec4 <USB_ReadPMA>
 8002be6:	e07c      	b.n	8002ce2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3306      	adds	r3, #6
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c10:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	8b7b      	ldrh	r3, [r7, #26]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d306      	bcc.n	8002c2a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	699a      	ldr	r2, [r3, #24]
 8002c20:	8b7b      	ldrh	r3, [r7, #26]
 8002c22:	1ad2      	subs	r2, r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	619a      	str	r2, [r3, #24]
 8002c28:	e002      	b.n	8002c30 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d123      	bne.n	8002c80 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c52:	83fb      	strh	r3, [r7, #30]
 8002c54:	8bfb      	ldrh	r3, [r7, #30]
 8002c56:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c5a:	83fb      	strh	r3, [r7, #30]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	461a      	mov	r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	441a      	add	r2, r3
 8002c6a:	8bfb      	ldrh	r3, [r7, #30]
 8002c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002c80:	88fb      	ldrh	r3, [r7, #6]
 8002c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d11f      	bne.n	8002cca <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca4:	83bb      	strh	r3, [r7, #28]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	441a      	add	r2, r3
 8002cb4:	8bbb      	ldrh	r3, [r7, #28]
 8002cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002cca:	8b7b      	ldrh	r3, [r7, #26]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	6959      	ldr	r1, [r3, #20]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	895a      	ldrh	r2, [r3, #10]
 8002cdc:	8b7b      	ldrh	r3, [r7, #26]
 8002cde:	f005 f8f1 	bl	8007ec4 <USB_ReadPMA>
    }
  }

  return count;
 8002ce2:	8b7b      	ldrh	r3, [r7, #26]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3720      	adds	r7, #32
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b0a4      	sub	sp, #144	; 0x90
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002cfa:	88fb      	ldrh	r3, [r7, #6]
 8002cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 81dd 	beq.w	80030c0 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	461a      	mov	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	4413      	add	r3, r2
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	6812      	ldr	r2, [r2, #0]
 8002d22:	4413      	add	r3, r2
 8002d24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d28:	881b      	ldrh	r3, [r3, #0]
 8002d2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d2e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	699a      	ldr	r2, [r3, #24]
 8002d36:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d907      	bls.n	8002d4e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	699a      	ldr	r2, [r3, #24]
 8002d42:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d46:	1ad2      	subs	r2, r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	619a      	str	r2, [r3, #24]
 8002d4c:	e002      	b.n	8002d54 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2200      	movs	r2, #0
 8002d52:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f040 80b9 	bne.w	8002ed0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	785b      	ldrb	r3, [r3, #1]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d126      	bne.n	8002db4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7a:	4413      	add	r3, r2
 8002d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	011a      	lsls	r2, r3, #4
 8002d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d86:	4413      	add	r3, r2
 8002d88:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9c:	801a      	strh	r2, [r3, #0]
 8002d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db0:	801a      	strh	r2, [r3, #0]
 8002db2:	e01a      	b.n	8002dea <HAL_PCD_EP_DB_Transmit+0xfe>
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	785b      	ldrb	r3, [r3, #1]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d116      	bne.n	8002dea <HAL_PCD_EP_DB_Transmit+0xfe>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	461a      	mov	r2, r3
 8002dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd0:	4413      	add	r3, r2
 8002dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	011a      	lsls	r2, r3, #4
 8002dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ddc:	4413      	add	r3, r2
 8002dde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002de2:	633b      	str	r3, [r7, #48]	; 0x30
 8002de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de6:	2200      	movs	r2, #0
 8002de8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	785b      	ldrb	r3, [r3, #1]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d126      	bne.n	8002e46 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	61fb      	str	r3, [r7, #28]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	61fb      	str	r3, [r7, #28]
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	011a      	lsls	r2, r3, #4
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e1e:	61bb      	str	r3, [r7, #24]
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	801a      	strh	r2, [r3, #0]
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	801a      	strh	r2, [r3, #0]
 8002e44:	e017      	b.n	8002e76 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	785b      	ldrb	r3, [r3, #1]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d113      	bne.n	8002e76 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	461a      	mov	r2, r3
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	4413      	add	r3, r2
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	011a      	lsls	r2, r3, #4
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	4413      	add	r3, r2
 8002e6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e6e:	623b      	str	r3, [r7, #32]
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	2200      	movs	r2, #0
 8002e74:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f006 fe02 	bl	8009a86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e82:	88fb      	ldrh	r3, [r7, #6]
 8002e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 82fc 	beq.w	8003486 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	461a      	mov	r2, r3
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea8:	82fb      	strh	r3, [r7, #22]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	441a      	add	r2, r3
 8002eb8:	8afb      	ldrh	r3, [r7, #22]
 8002eba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ebe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ec2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	8013      	strh	r3, [r2, #0]
 8002ece:	e2da      	b.n	8003486 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ed0:	88fb      	ldrh	r3, [r7, #6]
 8002ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d021      	beq.n	8002f1e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	441a      	add	r2, r3
 8002f06:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002f0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	f040 82ae 	bne.w	8003486 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f32:	441a      	add	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	69da      	ldr	r2, [r3, #28]
 8002f3c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f40:	441a      	add	r2, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	6a1a      	ldr	r2, [r3, #32]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d30b      	bcc.n	8002f6a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	6a1a      	ldr	r2, [r3, #32]
 8002f5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f62:	1ad2      	subs	r2, r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	621a      	str	r2, [r3, #32]
 8002f68:	e017      	b.n	8002f9a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d108      	bne.n	8002f84 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002f72:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f82:	e00a      	b.n	8002f9a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2200      	movs	r2, #0
 8002f98:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	785b      	ldrb	r3, [r3, #1]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d165      	bne.n	800306e <HAL_PCD_EP_DB_Transmit+0x382>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb6:	4413      	add	r3, r2
 8002fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	011a      	lsls	r2, r3, #4
 8002fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002fc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd8:	801a      	strh	r2, [r3, #0]
 8002fda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fde:	2b3e      	cmp	r3, #62	; 0x3e
 8002fe0:	d91d      	bls.n	800301e <HAL_PCD_EP_DB_Transmit+0x332>
 8002fe2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fe6:	095b      	lsrs	r3, r3, #5
 8002fe8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fee:	f003 031f 	and.w	r3, r3, #31
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d102      	bne.n	8002ffc <HAL_PCD_EP_DB_Transmit+0x310>
 8002ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	b29a      	uxth	r2, r3
 8003002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003004:	b29b      	uxth	r3, r3
 8003006:	029b      	lsls	r3, r3, #10
 8003008:	b29b      	uxth	r3, r3
 800300a:	4313      	orrs	r3, r2
 800300c:	b29b      	uxth	r3, r3
 800300e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003012:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003016:	b29a      	uxth	r2, r3
 8003018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301a:	801a      	strh	r2, [r3, #0]
 800301c:	e044      	b.n	80030a8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800301e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10a      	bne.n	800303c <HAL_PCD_EP_DB_Transmit+0x350>
 8003026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	b29b      	uxth	r3, r3
 800302c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003034:	b29a      	uxth	r2, r3
 8003036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003038:	801a      	strh	r2, [r3, #0]
 800303a:	e035      	b.n	80030a8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800303c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003040:	085b      	lsrs	r3, r3, #1
 8003042:	64bb      	str	r3, [r7, #72]	; 0x48
 8003044:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003052:	3301      	adds	r3, #1
 8003054:	64bb      	str	r3, [r7, #72]	; 0x48
 8003056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003058:	881b      	ldrh	r3, [r3, #0]
 800305a:	b29a      	uxth	r2, r3
 800305c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800305e:	b29b      	uxth	r3, r3
 8003060:	029b      	lsls	r3, r3, #10
 8003062:	b29b      	uxth	r3, r3
 8003064:	4313      	orrs	r3, r2
 8003066:	b29a      	uxth	r2, r3
 8003068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306a:	801a      	strh	r2, [r3, #0]
 800306c:	e01c      	b.n	80030a8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	785b      	ldrb	r3, [r3, #1]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d118      	bne.n	80030a8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	647b      	str	r3, [r7, #68]	; 0x44
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003084:	b29b      	uxth	r3, r3
 8003086:	461a      	mov	r2, r3
 8003088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800308a:	4413      	add	r3, r2
 800308c:	647b      	str	r3, [r7, #68]	; 0x44
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	011a      	lsls	r2, r3, #4
 8003094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003096:	4413      	add	r3, r2
 8003098:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800309c:	643b      	str	r3, [r7, #64]	; 0x40
 800309e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	6959      	ldr	r1, [r3, #20]
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	891a      	ldrh	r2, [r3, #8]
 80030b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	f004 febd 	bl	8007e38 <USB_WritePMA>
 80030be:	e1e2      	b.n	8003486 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	3306      	adds	r3, #6
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030e8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	699a      	ldr	r2, [r3, #24]
 80030f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d307      	bcc.n	8003108 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	699a      	ldr	r2, [r3, #24]
 80030fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003100:	1ad2      	subs	r2, r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	619a      	str	r2, [r3, #24]
 8003106:	e002      	b.n	800310e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2200      	movs	r2, #0
 800310c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	2b00      	cmp	r3, #0
 8003114:	f040 80c0 	bne.w	8003298 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	785b      	ldrb	r3, [r3, #1]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d126      	bne.n	800316e <HAL_PCD_EP_DB_Transmit+0x482>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800312e:	b29b      	uxth	r3, r3
 8003130:	461a      	mov	r2, r3
 8003132:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003134:	4413      	add	r3, r2
 8003136:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	011a      	lsls	r2, r3, #4
 800313e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003140:	4413      	add	r3, r2
 8003142:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003146:	67bb      	str	r3, [r7, #120]	; 0x78
 8003148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	b29b      	uxth	r3, r3
 800314e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003152:	b29a      	uxth	r2, r3
 8003154:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003156:	801a      	strh	r2, [r3, #0]
 8003158:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	b29b      	uxth	r3, r3
 800315e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003166:	b29a      	uxth	r2, r3
 8003168:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800316a:	801a      	strh	r2, [r3, #0]
 800316c:	e01a      	b.n	80031a4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	785b      	ldrb	r3, [r3, #1]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d116      	bne.n	80031a4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	667b      	str	r3, [r7, #100]	; 0x64
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003184:	b29b      	uxth	r3, r3
 8003186:	461a      	mov	r2, r3
 8003188:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800318a:	4413      	add	r3, r2
 800318c:	667b      	str	r3, [r7, #100]	; 0x64
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	011a      	lsls	r2, r3, #4
 8003194:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003196:	4413      	add	r3, r2
 8003198:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800319c:	663b      	str	r3, [r7, #96]	; 0x60
 800319e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031a0:	2200      	movs	r2, #0
 80031a2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	677b      	str	r3, [r7, #116]	; 0x74
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	785b      	ldrb	r3, [r3, #1]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d12b      	bne.n	800320a <HAL_PCD_EP_DB_Transmit+0x51e>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	461a      	mov	r2, r3
 80031c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c6:	4413      	add	r3, r2
 80031c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	011a      	lsls	r2, r3, #4
 80031d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d2:	4413      	add	r3, r2
 80031d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031ee:	801a      	strh	r2, [r3, #0]
 80031f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003200:	b29a      	uxth	r2, r3
 8003202:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003206:	801a      	strh	r2, [r3, #0]
 8003208:	e017      	b.n	800323a <HAL_PCD_EP_DB_Transmit+0x54e>
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	785b      	ldrb	r3, [r3, #1]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d113      	bne.n	800323a <HAL_PCD_EP_DB_Transmit+0x54e>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800321a:	b29b      	uxth	r3, r3
 800321c:	461a      	mov	r2, r3
 800321e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003220:	4413      	add	r3, r2
 8003222:	677b      	str	r3, [r7, #116]	; 0x74
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	011a      	lsls	r2, r3, #4
 800322a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800322c:	4413      	add	r3, r2
 800322e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003232:	673b      	str	r3, [r7, #112]	; 0x70
 8003234:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003236:	2200      	movs	r2, #0
 8003238:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	4619      	mov	r1, r3
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f006 fc20 	bl	8009a86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003246:	88fb      	ldrh	r3, [r7, #6]
 8003248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800324c:	2b00      	cmp	r3, #0
 800324e:	f040 811a 	bne.w	8003486 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	461a      	mov	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	b29b      	uxth	r3, r3
 8003264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	441a      	add	r2, r3
 800327e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003282:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003286:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800328a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800328e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003292:	b29b      	uxth	r3, r3
 8003294:	8013      	strh	r3, [r2, #0]
 8003296:	e0f6      	b.n	8003486 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003298:	88fb      	ldrh	r3, [r7, #6]
 800329a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d121      	bne.n	80032e6 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	441a      	add	r2, r3
 80032ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	f040 80ca 	bne.w	8003486 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	695a      	ldr	r2, [r3, #20]
 80032f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032fa:	441a      	add	r2, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	69da      	ldr	r2, [r3, #28]
 8003304:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003308:	441a      	add	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	6a1a      	ldr	r2, [r3, #32]
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	429a      	cmp	r2, r3
 8003318:	d30b      	bcc.n	8003332 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	6a1a      	ldr	r2, [r3, #32]
 8003326:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800332a:	1ad2      	subs	r2, r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	621a      	str	r2, [r3, #32]
 8003330:	e017      	b.n	8003362 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d108      	bne.n	800334c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800333a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800333e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800334a:	e00a      	b.n	8003362 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2200      	movs	r2, #0
 8003358:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	657b      	str	r3, [r7, #84]	; 0x54
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	785b      	ldrb	r3, [r3, #1]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d165      	bne.n	800343c <HAL_PCD_EP_DB_Transmit+0x750>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800337e:	b29b      	uxth	r3, r3
 8003380:	461a      	mov	r2, r3
 8003382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003384:	4413      	add	r3, r2
 8003386:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	011a      	lsls	r2, r3, #4
 800338e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003390:	4413      	add	r3, r2
 8003392:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003396:	65bb      	str	r3, [r7, #88]	; 0x58
 8003398:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	b29b      	uxth	r3, r3
 800339e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033a6:	801a      	strh	r2, [r3, #0]
 80033a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033ac:	2b3e      	cmp	r3, #62	; 0x3e
 80033ae:	d91d      	bls.n	80033ec <HAL_PCD_EP_DB_Transmit+0x700>
 80033b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033b4:	095b      	lsrs	r3, r3, #5
 80033b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80033b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033bc:	f003 031f 	and.w	r3, r3, #31
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d102      	bne.n	80033ca <HAL_PCD_EP_DB_Transmit+0x6de>
 80033c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033c6:	3b01      	subs	r3, #1
 80033c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80033ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	029b      	lsls	r3, r3, #10
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	4313      	orrs	r3, r2
 80033da:	b29b      	uxth	r3, r3
 80033dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033e8:	801a      	strh	r2, [r3, #0]
 80033ea:	e041      	b.n	8003470 <HAL_PCD_EP_DB_Transmit+0x784>
 80033ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10a      	bne.n	800340a <HAL_PCD_EP_DB_Transmit+0x71e>
 80033f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003402:	b29a      	uxth	r2, r3
 8003404:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003406:	801a      	strh	r2, [r3, #0]
 8003408:	e032      	b.n	8003470 <HAL_PCD_EP_DB_Transmit+0x784>
 800340a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800340e:	085b      	lsrs	r3, r3, #1
 8003410:	66bb      	str	r3, [r7, #104]	; 0x68
 8003412:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <HAL_PCD_EP_DB_Transmit+0x738>
 800341e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003420:	3301      	adds	r3, #1
 8003422:	66bb      	str	r3, [r7, #104]	; 0x68
 8003424:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	b29a      	uxth	r2, r3
 800342a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800342c:	b29b      	uxth	r3, r3
 800342e:	029b      	lsls	r3, r3, #10
 8003430:	b29b      	uxth	r3, r3
 8003432:	4313      	orrs	r3, r2
 8003434:	b29a      	uxth	r2, r3
 8003436:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003438:	801a      	strh	r2, [r3, #0]
 800343a:	e019      	b.n	8003470 <HAL_PCD_EP_DB_Transmit+0x784>
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	785b      	ldrb	r3, [r3, #1]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d115      	bne.n	8003470 <HAL_PCD_EP_DB_Transmit+0x784>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800344c:	b29b      	uxth	r3, r3
 800344e:	461a      	mov	r2, r3
 8003450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003452:	4413      	add	r3, r2
 8003454:	657b      	str	r3, [r7, #84]	; 0x54
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	011a      	lsls	r2, r3, #4
 800345c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800345e:	4413      	add	r3, r2
 8003460:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003464:	653b      	str	r3, [r7, #80]	; 0x50
 8003466:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800346a:	b29a      	uxth	r2, r3
 800346c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800346e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6818      	ldr	r0, [r3, #0]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	6959      	ldr	r1, [r3, #20]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	895a      	ldrh	r2, [r3, #10]
 800347c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003480:	b29b      	uxth	r3, r3
 8003482:	f004 fcd9 	bl	8007e38 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	b29b      	uxth	r3, r3
 8003498:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800349c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034a0:	82bb      	strh	r3, [r7, #20]
 80034a2:	8abb      	ldrh	r3, [r7, #20]
 80034a4:	f083 0310 	eor.w	r3, r3, #16
 80034a8:	82bb      	strh	r3, [r7, #20]
 80034aa:	8abb      	ldrh	r3, [r7, #20]
 80034ac:	f083 0320 	eor.w	r3, r3, #32
 80034b0:	82bb      	strh	r3, [r7, #20]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	461a      	mov	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	441a      	add	r2, r3
 80034c0:	8abb      	ldrh	r3, [r7, #20]
 80034c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3790      	adds	r7, #144	; 0x90
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b087      	sub	sp, #28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	607b      	str	r3, [r7, #4]
 80034ea:	460b      	mov	r3, r1
 80034ec:	817b      	strh	r3, [r7, #10]
 80034ee:	4613      	mov	r3, r2
 80034f0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80034f2:	897b      	ldrh	r3, [r7, #10]
 80034f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00b      	beq.n	8003516 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034fe:	897b      	ldrh	r3, [r7, #10]
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	4413      	add	r3, r2
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	e009      	b.n	800352a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003516:	897a      	ldrh	r2, [r7, #10]
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	4413      	add	r3, r2
 8003528:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800352a:	893b      	ldrh	r3, [r7, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d107      	bne.n	8003540 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	2200      	movs	r2, #0
 8003534:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	b29a      	uxth	r2, r3
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	80da      	strh	r2, [r3, #6]
 800353e:	e00b      	b.n	8003558 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2201      	movs	r2, #1
 8003544:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	b29a      	uxth	r2, r3
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	0c1b      	lsrs	r3, r3, #16
 8003552:	b29a      	uxth	r2, r3
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	371c      	adds	r7, #28
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
	...

08003568 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800356e:	af00      	add	r7, sp, #0
 8003570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003574:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003578:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800357a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d102      	bne.n	800358e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	f001 b823 	b.w	80045d4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800358e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003592:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 817d 	beq.w	800389e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80035a4:	4bbc      	ldr	r3, [pc, #752]	; (8003898 <HAL_RCC_OscConfig+0x330>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 030c 	and.w	r3, r3, #12
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d00c      	beq.n	80035ca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035b0:	4bb9      	ldr	r3, [pc, #740]	; (8003898 <HAL_RCC_OscConfig+0x330>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f003 030c 	and.w	r3, r3, #12
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d15c      	bne.n	8003676 <HAL_RCC_OscConfig+0x10e>
 80035bc:	4bb6      	ldr	r3, [pc, #728]	; (8003898 <HAL_RCC_OscConfig+0x330>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c8:	d155      	bne.n	8003676 <HAL_RCC_OscConfig+0x10e>
 80035ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035ce:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80035d6:	fa93 f3a3 	rbit	r3, r3
 80035da:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035de:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e2:	fab3 f383 	clz	r3, r3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d102      	bne.n	80035fc <HAL_RCC_OscConfig+0x94>
 80035f6:	4ba8      	ldr	r3, [pc, #672]	; (8003898 <HAL_RCC_OscConfig+0x330>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	e015      	b.n	8003628 <HAL_RCC_OscConfig+0xc0>
 80035fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003600:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003604:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003608:	fa93 f3a3 	rbit	r3, r3
 800360c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003610:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003614:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003618:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800361c:	fa93 f3a3 	rbit	r3, r3
 8003620:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003624:	4b9c      	ldr	r3, [pc, #624]	; (8003898 <HAL_RCC_OscConfig+0x330>)
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800362c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003630:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003634:	fa92 f2a2 	rbit	r2, r2
 8003638:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800363c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003640:	fab2 f282 	clz	r2, r2
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	f042 0220 	orr.w	r2, r2, #32
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	f002 021f 	and.w	r2, r2, #31
 8003650:	2101      	movs	r1, #1
 8003652:	fa01 f202 	lsl.w	r2, r1, r2
 8003656:	4013      	ands	r3, r2
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 811f 	beq.w	800389c <HAL_RCC_OscConfig+0x334>
 800365e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003662:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	f040 8116 	bne.w	800389c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	f000 bfaf 	b.w	80045d4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003686:	d106      	bne.n	8003696 <HAL_RCC_OscConfig+0x12e>
 8003688:	4b83      	ldr	r3, [pc, #524]	; (8003898 <HAL_RCC_OscConfig+0x330>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a82      	ldr	r2, [pc, #520]	; (8003898 <HAL_RCC_OscConfig+0x330>)
 800368e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	e036      	b.n	8003704 <HAL_RCC_OscConfig+0x19c>
 8003696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10c      	bne.n	80036c0 <HAL_RCC_OscConfig+0x158>
 80036a6:	4b7c      	ldr	r3, [pc, #496]	; (8003898 <HAL_RCC_OscConfig+0x330>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a7b      	ldr	r2, [pc, #492]	; (8003898 <HAL_RCC_OscConfig+0x330>)
 80036ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	4b79      	ldr	r3, [pc, #484]	; (8003898 <HAL_RCC_OscConfig+0x330>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a78      	ldr	r2, [pc, #480]	; (8003898 <HAL_RCC_OscConfig+0x330>)
 80036b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	e021      	b.n	8003704 <HAL_RCC_OscConfig+0x19c>
 80036c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036d0:	d10c      	bne.n	80036ec <HAL_RCC_OscConfig+0x184>
 80036d2:	4b71      	ldr	r3, [pc, #452]	; (8003898 <HAL_RCC_OscConfig+0x330>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a70      	ldr	r2, [pc, #448]	; (8003898 <HAL_RCC_OscConfig+0x330>)
 80036d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	4b6e      	ldr	r3, [pc, #440]	; (8003898 <HAL_RCC_OscConfig+0x330>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a6d      	ldr	r2, [pc, #436]	; (8003898 <HAL_RCC_OscConfig+0x330>)
 80036e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	e00b      	b.n	8003704 <HAL_RCC_OscConfig+0x19c>
 80036ec:	4b6a      	ldr	r3, [pc, #424]	; (8003898 <HAL_RCC_OscConfig+0x330>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a69      	ldr	r2, [pc, #420]	; (8003898 <HAL_RCC_OscConfig+0x330>)
 80036f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	4b67      	ldr	r3, [pc, #412]	; (8003898 <HAL_RCC_OscConfig+0x330>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a66      	ldr	r2, [pc, #408]	; (8003898 <HAL_RCC_OscConfig+0x330>)
 80036fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003702:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003704:	4b64      	ldr	r3, [pc, #400]	; (8003898 <HAL_RCC_OscConfig+0x330>)
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	f023 020f 	bic.w	r2, r3, #15
 800370c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003710:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	495f      	ldr	r1, [pc, #380]	; (8003898 <HAL_RCC_OscConfig+0x330>)
 800371a:	4313      	orrs	r3, r2
 800371c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800371e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003722:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d059      	beq.n	80037e2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372e:	f7fd f94b 	bl	80009c8 <HAL_GetTick>
 8003732:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003736:	e00a      	b.n	800374e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003738:	f7fd f946 	bl	80009c8 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b64      	cmp	r3, #100	; 0x64
 8003746:	d902      	bls.n	800374e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	f000 bf43 	b.w	80045d4 <HAL_RCC_OscConfig+0x106c>
 800374e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003752:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800375a:	fa93 f3a3 	rbit	r3, r3
 800375e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003762:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003766:	fab3 f383 	clz	r3, r3
 800376a:	b2db      	uxtb	r3, r3
 800376c:	095b      	lsrs	r3, r3, #5
 800376e:	b2db      	uxtb	r3, r3
 8003770:	f043 0301 	orr.w	r3, r3, #1
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b01      	cmp	r3, #1
 8003778:	d102      	bne.n	8003780 <HAL_RCC_OscConfig+0x218>
 800377a:	4b47      	ldr	r3, [pc, #284]	; (8003898 <HAL_RCC_OscConfig+0x330>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	e015      	b.n	80037ac <HAL_RCC_OscConfig+0x244>
 8003780:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003784:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003788:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800378c:	fa93 f3a3 	rbit	r3, r3
 8003790:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003794:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003798:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800379c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80037a0:	fa93 f3a3 	rbit	r3, r3
 80037a4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80037a8:	4b3b      	ldr	r3, [pc, #236]	; (8003898 <HAL_RCC_OscConfig+0x330>)
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037b0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80037b4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80037b8:	fa92 f2a2 	rbit	r2, r2
 80037bc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80037c0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80037c4:	fab2 f282 	clz	r2, r2
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	f042 0220 	orr.w	r2, r2, #32
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	f002 021f 	and.w	r2, r2, #31
 80037d4:	2101      	movs	r1, #1
 80037d6:	fa01 f202 	lsl.w	r2, r1, r2
 80037da:	4013      	ands	r3, r2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0ab      	beq.n	8003738 <HAL_RCC_OscConfig+0x1d0>
 80037e0:	e05d      	b.n	800389e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e2:	f7fd f8f1 	bl	80009c8 <HAL_GetTick>
 80037e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ea:	e00a      	b.n	8003802 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ec:	f7fd f8ec 	bl	80009c8 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b64      	cmp	r3, #100	; 0x64
 80037fa:	d902      	bls.n	8003802 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	f000 bee9 	b.w	80045d4 <HAL_RCC_OscConfig+0x106c>
 8003802:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003806:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800380e:	fa93 f3a3 	rbit	r3, r3
 8003812:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003816:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800381a:	fab3 f383 	clz	r3, r3
 800381e:	b2db      	uxtb	r3, r3
 8003820:	095b      	lsrs	r3, r3, #5
 8003822:	b2db      	uxtb	r3, r3
 8003824:	f043 0301 	orr.w	r3, r3, #1
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b01      	cmp	r3, #1
 800382c:	d102      	bne.n	8003834 <HAL_RCC_OscConfig+0x2cc>
 800382e:	4b1a      	ldr	r3, [pc, #104]	; (8003898 <HAL_RCC_OscConfig+0x330>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	e015      	b.n	8003860 <HAL_RCC_OscConfig+0x2f8>
 8003834:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003838:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003840:	fa93 f3a3 	rbit	r3, r3
 8003844:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003848:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800384c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003850:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003854:	fa93 f3a3 	rbit	r3, r3
 8003858:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800385c:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <HAL_RCC_OscConfig+0x330>)
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003864:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003868:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800386c:	fa92 f2a2 	rbit	r2, r2
 8003870:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003874:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003878:	fab2 f282 	clz	r2, r2
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	f042 0220 	orr.w	r2, r2, #32
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	f002 021f 	and.w	r2, r2, #31
 8003888:	2101      	movs	r1, #1
 800388a:	fa01 f202 	lsl.w	r2, r1, r2
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1ab      	bne.n	80037ec <HAL_RCC_OscConfig+0x284>
 8003894:	e003      	b.n	800389e <HAL_RCC_OscConfig+0x336>
 8003896:	bf00      	nop
 8003898:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800389c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800389e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 817d 	beq.w	8003bae <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80038b4:	4ba6      	ldr	r3, [pc, #664]	; (8003b50 <HAL_RCC_OscConfig+0x5e8>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 030c 	and.w	r3, r3, #12
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00b      	beq.n	80038d8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80038c0:	4ba3      	ldr	r3, [pc, #652]	; (8003b50 <HAL_RCC_OscConfig+0x5e8>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 030c 	and.w	r3, r3, #12
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d172      	bne.n	80039b2 <HAL_RCC_OscConfig+0x44a>
 80038cc:	4ba0      	ldr	r3, [pc, #640]	; (8003b50 <HAL_RCC_OscConfig+0x5e8>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d16c      	bne.n	80039b2 <HAL_RCC_OscConfig+0x44a>
 80038d8:	2302      	movs	r3, #2
 80038da:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038de:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80038e2:	fa93 f3a3 	rbit	r3, r3
 80038e6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80038ea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ee:	fab3 f383 	clz	r3, r3
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	095b      	lsrs	r3, r3, #5
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d102      	bne.n	8003908 <HAL_RCC_OscConfig+0x3a0>
 8003902:	4b93      	ldr	r3, [pc, #588]	; (8003b50 <HAL_RCC_OscConfig+0x5e8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	e013      	b.n	8003930 <HAL_RCC_OscConfig+0x3c8>
 8003908:	2302      	movs	r3, #2
 800390a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003912:	fa93 f3a3 	rbit	r3, r3
 8003916:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800391a:	2302      	movs	r3, #2
 800391c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003920:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003924:	fa93 f3a3 	rbit	r3, r3
 8003928:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800392c:	4b88      	ldr	r3, [pc, #544]	; (8003b50 <HAL_RCC_OscConfig+0x5e8>)
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	2202      	movs	r2, #2
 8003932:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003936:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800393a:	fa92 f2a2 	rbit	r2, r2
 800393e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003942:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003946:	fab2 f282 	clz	r2, r2
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	f042 0220 	orr.w	r2, r2, #32
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	f002 021f 	and.w	r2, r2, #31
 8003956:	2101      	movs	r1, #1
 8003958:	fa01 f202 	lsl.w	r2, r1, r2
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <HAL_RCC_OscConfig+0x410>
 8003962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003966:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d002      	beq.n	8003978 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	f000 be2e 	b.w	80045d4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003978:	4b75      	ldr	r3, [pc, #468]	; (8003b50 <HAL_RCC_OscConfig+0x5e8>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003984:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	21f8      	movs	r1, #248	; 0xf8
 800398e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003992:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003996:	fa91 f1a1 	rbit	r1, r1
 800399a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800399e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80039a2:	fab1 f181 	clz	r1, r1
 80039a6:	b2c9      	uxtb	r1, r1
 80039a8:	408b      	lsls	r3, r1
 80039aa:	4969      	ldr	r1, [pc, #420]	; (8003b50 <HAL_RCC_OscConfig+0x5e8>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039b0:	e0fd      	b.n	8003bae <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 8088 	beq.w	8003ad4 <HAL_RCC_OscConfig+0x56c>
 80039c4:	2301      	movs	r3, #1
 80039c6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80039ce:	fa93 f3a3 	rbit	r3, r3
 80039d2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80039d6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039da:	fab3 f383 	clz	r3, r3
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	461a      	mov	r2, r3
 80039ec:	2301      	movs	r3, #1
 80039ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f0:	f7fc ffea 	bl	80009c8 <HAL_GetTick>
 80039f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f8:	e00a      	b.n	8003a10 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039fa:	f7fc ffe5 	bl	80009c8 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d902      	bls.n	8003a10 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	f000 bde2 	b.w	80045d4 <HAL_RCC_OscConfig+0x106c>
 8003a10:	2302      	movs	r3, #2
 8003a12:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a16:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003a1a:	fa93 f3a3 	rbit	r3, r3
 8003a1e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003a22:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a26:	fab3 f383 	clz	r3, r3
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	095b      	lsrs	r3, r3, #5
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d102      	bne.n	8003a40 <HAL_RCC_OscConfig+0x4d8>
 8003a3a:	4b45      	ldr	r3, [pc, #276]	; (8003b50 <HAL_RCC_OscConfig+0x5e8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	e013      	b.n	8003a68 <HAL_RCC_OscConfig+0x500>
 8003a40:	2302      	movs	r3, #2
 8003a42:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a46:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003a4a:	fa93 f3a3 	rbit	r3, r3
 8003a4e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003a52:	2302      	movs	r3, #2
 8003a54:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003a58:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003a5c:	fa93 f3a3 	rbit	r3, r3
 8003a60:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003a64:	4b3a      	ldr	r3, [pc, #232]	; (8003b50 <HAL_RCC_OscConfig+0x5e8>)
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	2202      	movs	r2, #2
 8003a6a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003a6e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003a72:	fa92 f2a2 	rbit	r2, r2
 8003a76:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003a7a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003a7e:	fab2 f282 	clz	r2, r2
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	f042 0220 	orr.w	r2, r2, #32
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	f002 021f 	and.w	r2, r2, #31
 8003a8e:	2101      	movs	r1, #1
 8003a90:	fa01 f202 	lsl.w	r2, r1, r2
 8003a94:	4013      	ands	r3, r2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0af      	beq.n	80039fa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a9a:	4b2d      	ldr	r3, [pc, #180]	; (8003b50 <HAL_RCC_OscConfig+0x5e8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	21f8      	movs	r1, #248	; 0xf8
 8003ab0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003ab8:	fa91 f1a1 	rbit	r1, r1
 8003abc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003ac0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003ac4:	fab1 f181 	clz	r1, r1
 8003ac8:	b2c9      	uxtb	r1, r1
 8003aca:	408b      	lsls	r3, r1
 8003acc:	4920      	ldr	r1, [pc, #128]	; (8003b50 <HAL_RCC_OscConfig+0x5e8>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	600b      	str	r3, [r1, #0]
 8003ad2:	e06c      	b.n	8003bae <HAL_RCC_OscConfig+0x646>
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ada:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003ade:	fa93 f3a3 	rbit	r3, r3
 8003ae2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003ae6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aea:	fab3 f383 	clz	r3, r3
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003af4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	461a      	mov	r2, r3
 8003afc:	2300      	movs	r3, #0
 8003afe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b00:	f7fc ff62 	bl	80009c8 <HAL_GetTick>
 8003b04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b08:	e00a      	b.n	8003b20 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b0a:	f7fc ff5d 	bl	80009c8 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d902      	bls.n	8003b20 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	f000 bd5a 	b.w	80045d4 <HAL_RCC_OscConfig+0x106c>
 8003b20:	2302      	movs	r3, #2
 8003b22:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b26:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003b2a:	fa93 f3a3 	rbit	r3, r3
 8003b2e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b36:	fab3 f383 	clz	r3, r3
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	095b      	lsrs	r3, r3, #5
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f043 0301 	orr.w	r3, r3, #1
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d104      	bne.n	8003b54 <HAL_RCC_OscConfig+0x5ec>
 8003b4a:	4b01      	ldr	r3, [pc, #4]	; (8003b50 <HAL_RCC_OscConfig+0x5e8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	e015      	b.n	8003b7c <HAL_RCC_OscConfig+0x614>
 8003b50:	40021000 	.word	0x40021000
 8003b54:	2302      	movs	r3, #2
 8003b56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b5e:	fa93 f3a3 	rbit	r3, r3
 8003b62:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003b66:	2302      	movs	r3, #2
 8003b68:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003b6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003b70:	fa93 f3a3 	rbit	r3, r3
 8003b74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003b78:	4bc8      	ldr	r3, [pc, #800]	; (8003e9c <HAL_RCC_OscConfig+0x934>)
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003b82:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003b86:	fa92 f2a2 	rbit	r2, r2
 8003b8a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003b8e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003b92:	fab2 f282 	clz	r2, r2
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	f042 0220 	orr.w	r2, r2, #32
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	f002 021f 	and.w	r2, r2, #31
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1ad      	bne.n	8003b0a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 8110 	beq.w	8003de4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d079      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x760>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bda:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003bde:	fa93 f3a3 	rbit	r3, r3
 8003be2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003be6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bea:	fab3 f383 	clz	r3, r3
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4bab      	ldr	r3, [pc, #684]	; (8003ea0 <HAL_RCC_OscConfig+0x938>)
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bfe:	f7fc fee3 	bl	80009c8 <HAL_GetTick>
 8003c02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c06:	e00a      	b.n	8003c1e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c08:	f7fc fede 	bl	80009c8 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d902      	bls.n	8003c1e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	f000 bcdb 	b.w	80045d4 <HAL_RCC_OscConfig+0x106c>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003c28:	fa93 f3a3 	rbit	r3, r3
 8003c2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c34:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003c38:	2202      	movs	r2, #2
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c40:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	fa93 f2a3 	rbit	r2, r3
 8003c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c5c:	2202      	movs	r2, #2
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	fa93 f2a3 	rbit	r2, r3
 8003c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c72:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003c76:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c78:	4b88      	ldr	r3, [pc, #544]	; (8003e9c <HAL_RCC_OscConfig+0x934>)
 8003c7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c80:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003c84:	2102      	movs	r1, #2
 8003c86:	6019      	str	r1, [r3, #0]
 8003c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c8c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	fa93 f1a3 	rbit	r1, r3
 8003c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c9a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003c9e:	6019      	str	r1, [r3, #0]
  return result;
 8003ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	fab3 f383 	clz	r3, r3
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	f003 031f 	and.w	r3, r3, #31
 8003cba:	2101      	movs	r1, #1
 8003cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0a0      	beq.n	8003c08 <HAL_RCC_OscConfig+0x6a0>
 8003cc6:	e08d      	b.n	8003de4 <HAL_RCC_OscConfig+0x87c>
 8003cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ccc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	fa93 f2a3 	rbit	r2, r3
 8003ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003cea:	601a      	str	r2, [r3, #0]
  return result;
 8003cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003cf4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cf6:	fab3 f383 	clz	r3, r3
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4b68      	ldr	r3, [pc, #416]	; (8003ea0 <HAL_RCC_OscConfig+0x938>)
 8003d00:	4413      	add	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	461a      	mov	r2, r3
 8003d06:	2300      	movs	r3, #0
 8003d08:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d0a:	f7fc fe5d 	bl	80009c8 <HAL_GetTick>
 8003d0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d12:	e00a      	b.n	8003d2a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d14:	f7fc fe58 	bl	80009c8 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d902      	bls.n	8003d2a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	f000 bc55 	b.w	80045d4 <HAL_RCC_OscConfig+0x106c>
 8003d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d2e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003d32:	2202      	movs	r2, #2
 8003d34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d3a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	fa93 f2a3 	rbit	r2, r3
 8003d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d48:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d52:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003d56:	2202      	movs	r2, #2
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d5e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	fa93 f2a3 	rbit	r2, r3
 8003d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	fa93 f2a3 	rbit	r2, r3
 8003d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d90:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003d94:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d96:	4b41      	ldr	r3, [pc, #260]	; (8003e9c <HAL_RCC_OscConfig+0x934>)
 8003d98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d9e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003da2:	2102      	movs	r1, #2
 8003da4:	6019      	str	r1, [r3, #0]
 8003da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003daa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	fa93 f1a3 	rbit	r1, r3
 8003db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003dbc:	6019      	str	r1, [r3, #0]
  return result;
 8003dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	fab3 f383 	clz	r3, r3
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	f003 031f 	and.w	r3, r3, #31
 8003dd8:	2101      	movs	r1, #1
 8003dda:	fa01 f303 	lsl.w	r3, r1, r3
 8003dde:	4013      	ands	r3, r2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d197      	bne.n	8003d14 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 81a1 	beq.w	800413c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e00:	4b26      	ldr	r3, [pc, #152]	; (8003e9c <HAL_RCC_OscConfig+0x934>)
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d116      	bne.n	8003e3a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0c:	4b23      	ldr	r3, [pc, #140]	; (8003e9c <HAL_RCC_OscConfig+0x934>)
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	4a22      	ldr	r2, [pc, #136]	; (8003e9c <HAL_RCC_OscConfig+0x934>)
 8003e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e16:	61d3      	str	r3, [r2, #28]
 8003e18:	4b20      	ldr	r3, [pc, #128]	; (8003e9c <HAL_RCC_OscConfig+0x934>)
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e24:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e2e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003e32:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003e34:	2301      	movs	r3, #1
 8003e36:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ea4 <HAL_RCC_OscConfig+0x93c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d11a      	bne.n	8003e7c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e46:	4b17      	ldr	r3, [pc, #92]	; (8003ea4 <HAL_RCC_OscConfig+0x93c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a16      	ldr	r2, [pc, #88]	; (8003ea4 <HAL_RCC_OscConfig+0x93c>)
 8003e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e50:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e52:	f7fc fdb9 	bl	80009c8 <HAL_GetTick>
 8003e56:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5a:	e009      	b.n	8003e70 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e5c:	f7fc fdb4 	bl	80009c8 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b64      	cmp	r3, #100	; 0x64
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e3b1      	b.n	80045d4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e70:	4b0c      	ldr	r3, [pc, #48]	; (8003ea4 <HAL_RCC_OscConfig+0x93c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0ef      	beq.n	8003e5c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d10d      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x940>
 8003e8c:	4b03      	ldr	r3, [pc, #12]	; (8003e9c <HAL_RCC_OscConfig+0x934>)
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	4a02      	ldr	r2, [pc, #8]	; (8003e9c <HAL_RCC_OscConfig+0x934>)
 8003e92:	f043 0301 	orr.w	r3, r3, #1
 8003e96:	6213      	str	r3, [r2, #32]
 8003e98:	e03c      	b.n	8003f14 <HAL_RCC_OscConfig+0x9ac>
 8003e9a:	bf00      	nop
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	10908120 	.word	0x10908120
 8003ea4:	40007000 	.word	0x40007000
 8003ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10c      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x96a>
 8003eb8:	4bc1      	ldr	r3, [pc, #772]	; (80041c0 <HAL_RCC_OscConfig+0xc58>)
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	4ac0      	ldr	r2, [pc, #768]	; (80041c0 <HAL_RCC_OscConfig+0xc58>)
 8003ebe:	f023 0301 	bic.w	r3, r3, #1
 8003ec2:	6213      	str	r3, [r2, #32]
 8003ec4:	4bbe      	ldr	r3, [pc, #760]	; (80041c0 <HAL_RCC_OscConfig+0xc58>)
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	4abd      	ldr	r2, [pc, #756]	; (80041c0 <HAL_RCC_OscConfig+0xc58>)
 8003eca:	f023 0304 	bic.w	r3, r3, #4
 8003ece:	6213      	str	r3, [r2, #32]
 8003ed0:	e020      	b.n	8003f14 <HAL_RCC_OscConfig+0x9ac>
 8003ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	2b05      	cmp	r3, #5
 8003ee0:	d10c      	bne.n	8003efc <HAL_RCC_OscConfig+0x994>
 8003ee2:	4bb7      	ldr	r3, [pc, #732]	; (80041c0 <HAL_RCC_OscConfig+0xc58>)
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	4ab6      	ldr	r2, [pc, #728]	; (80041c0 <HAL_RCC_OscConfig+0xc58>)
 8003ee8:	f043 0304 	orr.w	r3, r3, #4
 8003eec:	6213      	str	r3, [r2, #32]
 8003eee:	4bb4      	ldr	r3, [pc, #720]	; (80041c0 <HAL_RCC_OscConfig+0xc58>)
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	4ab3      	ldr	r2, [pc, #716]	; (80041c0 <HAL_RCC_OscConfig+0xc58>)
 8003ef4:	f043 0301 	orr.w	r3, r3, #1
 8003ef8:	6213      	str	r3, [r2, #32]
 8003efa:	e00b      	b.n	8003f14 <HAL_RCC_OscConfig+0x9ac>
 8003efc:	4bb0      	ldr	r3, [pc, #704]	; (80041c0 <HAL_RCC_OscConfig+0xc58>)
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	4aaf      	ldr	r2, [pc, #700]	; (80041c0 <HAL_RCC_OscConfig+0xc58>)
 8003f02:	f023 0301 	bic.w	r3, r3, #1
 8003f06:	6213      	str	r3, [r2, #32]
 8003f08:	4bad      	ldr	r3, [pc, #692]	; (80041c0 <HAL_RCC_OscConfig+0xc58>)
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	4aac      	ldr	r2, [pc, #688]	; (80041c0 <HAL_RCC_OscConfig+0xc58>)
 8003f0e:	f023 0304 	bic.w	r3, r3, #4
 8003f12:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 8081 	beq.w	8004028 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f26:	f7fc fd4f 	bl	80009c8 <HAL_GetTick>
 8003f2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f2e:	e00b      	b.n	8003f48 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f30:	f7fc fd4a 	bl	80009c8 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e345      	b.n	80045d4 <HAL_RCC_OscConfig+0x106c>
 8003f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f4c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003f50:	2202      	movs	r2, #2
 8003f52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f58:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	fa93 f2a3 	rbit	r2, r3
 8003f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f66:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f70:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003f74:	2202      	movs	r2, #2
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f7c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	fa93 f2a3 	rbit	r2, r3
 8003f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f8a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003f8e:	601a      	str	r2, [r3, #0]
  return result;
 8003f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f94:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003f98:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f9a:	fab3 f383 	clz	r3, r3
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	095b      	lsrs	r3, r3, #5
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	f043 0302 	orr.w	r3, r3, #2
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d102      	bne.n	8003fb4 <HAL_RCC_OscConfig+0xa4c>
 8003fae:	4b84      	ldr	r3, [pc, #528]	; (80041c0 <HAL_RCC_OscConfig+0xc58>)
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	e013      	b.n	8003fdc <HAL_RCC_OscConfig+0xa74>
 8003fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	fa93 f2a3 	rbit	r2, r3
 8003fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	4b79      	ldr	r3, [pc, #484]	; (80041c0 <HAL_RCC_OscConfig+0xc58>)
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fe0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003fe4:	2102      	movs	r1, #2
 8003fe6:	6011      	str	r1, [r2, #0]
 8003fe8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fec:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003ff0:	6812      	ldr	r2, [r2, #0]
 8003ff2:	fa92 f1a2 	rbit	r1, r2
 8003ff6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ffa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003ffe:	6011      	str	r1, [r2, #0]
  return result;
 8004000:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004004:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004008:	6812      	ldr	r2, [r2, #0]
 800400a:	fab2 f282 	clz	r2, r2
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	f002 021f 	and.w	r2, r2, #31
 800401a:	2101      	movs	r1, #1
 800401c:	fa01 f202 	lsl.w	r2, r1, r2
 8004020:	4013      	ands	r3, r2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d084      	beq.n	8003f30 <HAL_RCC_OscConfig+0x9c8>
 8004026:	e07f      	b.n	8004128 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004028:	f7fc fcce 	bl	80009c8 <HAL_GetTick>
 800402c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004030:	e00b      	b.n	800404a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004032:	f7fc fcc9 	bl	80009c8 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004042:	4293      	cmp	r3, r2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e2c4      	b.n	80045d4 <HAL_RCC_OscConfig+0x106c>
 800404a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800404e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004052:	2202      	movs	r2, #2
 8004054:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	fa93 f2a3 	rbit	r2, r3
 8004064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004068:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004072:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004076:	2202      	movs	r2, #2
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800407e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	fa93 f2a3 	rbit	r2, r3
 8004088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800408c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004090:	601a      	str	r2, [r3, #0]
  return result;
 8004092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004096:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800409a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800409c:	fab3 f383 	clz	r3, r3
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	f043 0302 	orr.w	r3, r3, #2
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d102      	bne.n	80040b6 <HAL_RCC_OscConfig+0xb4e>
 80040b0:	4b43      	ldr	r3, [pc, #268]	; (80041c0 <HAL_RCC_OscConfig+0xc58>)
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	e013      	b.n	80040de <HAL_RCC_OscConfig+0xb76>
 80040b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ba:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80040be:	2202      	movs	r2, #2
 80040c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	fa93 f2a3 	rbit	r2, r3
 80040d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	4b39      	ldr	r3, [pc, #228]	; (80041c0 <HAL_RCC_OscConfig+0xc58>)
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040e2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80040e6:	2102      	movs	r1, #2
 80040e8:	6011      	str	r1, [r2, #0]
 80040ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040ee:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	fa92 f1a2 	rbit	r1, r2
 80040f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040fc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004100:	6011      	str	r1, [r2, #0]
  return result;
 8004102:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004106:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	fab2 f282 	clz	r2, r2
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	f002 021f 	and.w	r2, r2, #31
 800411c:	2101      	movs	r1, #1
 800411e:	fa01 f202 	lsl.w	r2, r1, r2
 8004122:	4013      	ands	r3, r2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d184      	bne.n	8004032 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004128:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800412c:	2b01      	cmp	r3, #1
 800412e:	d105      	bne.n	800413c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004130:	4b23      	ldr	r3, [pc, #140]	; (80041c0 <HAL_RCC_OscConfig+0xc58>)
 8004132:	69db      	ldr	r3, [r3, #28]
 8004134:	4a22      	ldr	r2, [pc, #136]	; (80041c0 <HAL_RCC_OscConfig+0xc58>)
 8004136:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800413a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800413c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004140:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 8242 	beq.w	80045d2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800414e:	4b1c      	ldr	r3, [pc, #112]	; (80041c0 <HAL_RCC_OscConfig+0xc58>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f003 030c 	and.w	r3, r3, #12
 8004156:	2b08      	cmp	r3, #8
 8004158:	f000 8213 	beq.w	8004582 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800415c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004160:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	2b02      	cmp	r3, #2
 800416a:	f040 8162 	bne.w	8004432 <HAL_RCC_OscConfig+0xeca>
 800416e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004172:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004176:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800417a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004180:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	fa93 f2a3 	rbit	r2, r3
 800418a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800418e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004192:	601a      	str	r2, [r3, #0]
  return result;
 8004194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004198:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800419c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800419e:	fab3 f383 	clz	r3, r3
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	461a      	mov	r2, r3
 80041b0:	2300      	movs	r3, #0
 80041b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b4:	f7fc fc08 	bl	80009c8 <HAL_GetTick>
 80041b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041bc:	e00c      	b.n	80041d8 <HAL_RCC_OscConfig+0xc70>
 80041be:	bf00      	nop
 80041c0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041c4:	f7fc fc00 	bl	80009c8 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e1fd      	b.n	80045d4 <HAL_RCC_OscConfig+0x106c>
 80041d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041dc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80041e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ea:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	fa93 f2a3 	rbit	r2, r3
 80041f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80041fc:	601a      	str	r2, [r3, #0]
  return result;
 80041fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004202:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004206:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004208:	fab3 f383 	clz	r3, r3
 800420c:	b2db      	uxtb	r3, r3
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	b2db      	uxtb	r3, r3
 8004212:	f043 0301 	orr.w	r3, r3, #1
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b01      	cmp	r3, #1
 800421a:	d102      	bne.n	8004222 <HAL_RCC_OscConfig+0xcba>
 800421c:	4bb0      	ldr	r3, [pc, #704]	; (80044e0 <HAL_RCC_OscConfig+0xf78>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	e027      	b.n	8004272 <HAL_RCC_OscConfig+0xd0a>
 8004222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004226:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800422a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800422e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004234:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	fa93 f2a3 	rbit	r2, r3
 800423e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004242:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800424c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004250:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800425a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	fa93 f2a3 	rbit	r2, r3
 8004264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004268:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	4b9c      	ldr	r3, [pc, #624]	; (80044e0 <HAL_RCC_OscConfig+0xf78>)
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004276:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800427a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800427e:	6011      	str	r1, [r2, #0]
 8004280:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004284:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004288:	6812      	ldr	r2, [r2, #0]
 800428a:	fa92 f1a2 	rbit	r1, r2
 800428e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004292:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004296:	6011      	str	r1, [r2, #0]
  return result;
 8004298:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800429c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80042a0:	6812      	ldr	r2, [r2, #0]
 80042a2:	fab2 f282 	clz	r2, r2
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	f042 0220 	orr.w	r2, r2, #32
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	f002 021f 	and.w	r2, r2, #31
 80042b2:	2101      	movs	r1, #1
 80042b4:	fa01 f202 	lsl.w	r2, r1, r2
 80042b8:	4013      	ands	r3, r2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d182      	bne.n	80041c4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042be:	4b88      	ldr	r3, [pc, #544]	; (80044e0 <HAL_RCC_OscConfig+0xf78>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80042c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80042d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	430b      	orrs	r3, r1
 80042e0:	497f      	ldr	r1, [pc, #508]	; (80044e0 <HAL_RCC_OscConfig+0xf78>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	604b      	str	r3, [r1, #4]
 80042e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ea:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80042ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	fa93 f2a3 	rbit	r2, r3
 8004302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004306:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800430a:	601a      	str	r2, [r3, #0]
  return result;
 800430c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004310:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004314:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004316:	fab3 f383 	clz	r3, r3
 800431a:	b2db      	uxtb	r3, r3
 800431c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004320:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	461a      	mov	r2, r3
 8004328:	2301      	movs	r3, #1
 800432a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432c:	f7fc fb4c 	bl	80009c8 <HAL_GetTick>
 8004330:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004334:	e009      	b.n	800434a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004336:	f7fc fb47 	bl	80009c8 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e144      	b.n	80045d4 <HAL_RCC_OscConfig+0x106c>
 800434a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800434e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004352:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004356:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800435c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	fa93 f2a3 	rbit	r2, r3
 8004366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800436a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800436e:	601a      	str	r2, [r3, #0]
  return result;
 8004370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004374:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004378:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800437a:	fab3 f383 	clz	r3, r3
 800437e:	b2db      	uxtb	r3, r3
 8004380:	095b      	lsrs	r3, r3, #5
 8004382:	b2db      	uxtb	r3, r3
 8004384:	f043 0301 	orr.w	r3, r3, #1
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b01      	cmp	r3, #1
 800438c:	d102      	bne.n	8004394 <HAL_RCC_OscConfig+0xe2c>
 800438e:	4b54      	ldr	r3, [pc, #336]	; (80044e0 <HAL_RCC_OscConfig+0xf78>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	e027      	b.n	80043e4 <HAL_RCC_OscConfig+0xe7c>
 8004394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004398:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800439c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	fa93 f2a3 	rbit	r2, r3
 80043b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043be:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80043c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043cc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	fa93 f2a3 	rbit	r2, r3
 80043d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043da:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	4b3f      	ldr	r3, [pc, #252]	; (80044e0 <HAL_RCC_OscConfig+0xf78>)
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043e8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80043ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80043f0:	6011      	str	r1, [r2, #0]
 80043f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043f6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80043fa:	6812      	ldr	r2, [r2, #0]
 80043fc:	fa92 f1a2 	rbit	r1, r2
 8004400:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004404:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004408:	6011      	str	r1, [r2, #0]
  return result;
 800440a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800440e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	fab2 f282 	clz	r2, r2
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	f042 0220 	orr.w	r2, r2, #32
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	f002 021f 	and.w	r2, r2, #31
 8004424:	2101      	movs	r1, #1
 8004426:	fa01 f202 	lsl.w	r2, r1, r2
 800442a:	4013      	ands	r3, r2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d082      	beq.n	8004336 <HAL_RCC_OscConfig+0xdce>
 8004430:	e0cf      	b.n	80045d2 <HAL_RCC_OscConfig+0x106a>
 8004432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004436:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800443a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800443e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004444:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	fa93 f2a3 	rbit	r2, r3
 800444e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004452:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004456:	601a      	str	r2, [r3, #0]
  return result;
 8004458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800445c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004460:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004462:	fab3 f383 	clz	r3, r3
 8004466:	b2db      	uxtb	r3, r3
 8004468:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800446c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	461a      	mov	r2, r3
 8004474:	2300      	movs	r3, #0
 8004476:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004478:	f7fc faa6 	bl	80009c8 <HAL_GetTick>
 800447c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004480:	e009      	b.n	8004496 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004482:	f7fc faa1 	bl	80009c8 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e09e      	b.n	80045d4 <HAL_RCC_OscConfig+0x106c>
 8004496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800449a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800449e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044a8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	fa93 f2a3 	rbit	r2, r3
 80044b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80044ba:	601a      	str	r2, [r3, #0]
  return result;
 80044bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044c0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80044c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044c6:	fab3 f383 	clz	r3, r3
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	095b      	lsrs	r3, r3, #5
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	f043 0301 	orr.w	r3, r3, #1
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d104      	bne.n	80044e4 <HAL_RCC_OscConfig+0xf7c>
 80044da:	4b01      	ldr	r3, [pc, #4]	; (80044e0 <HAL_RCC_OscConfig+0xf78>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	e029      	b.n	8004534 <HAL_RCC_OscConfig+0xfcc>
 80044e0:	40021000 	.word	0x40021000
 80044e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80044ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044f6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	fa93 f2a3 	rbit	r2, r3
 8004500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004504:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800450e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004512:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800451c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	fa93 f2a3 	rbit	r2, r3
 8004526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800452a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	4b2b      	ldr	r3, [pc, #172]	; (80045e0 <HAL_RCC_OscConfig+0x1078>)
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004538:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800453c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004540:	6011      	str	r1, [r2, #0]
 8004542:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004546:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800454a:	6812      	ldr	r2, [r2, #0]
 800454c:	fa92 f1a2 	rbit	r1, r2
 8004550:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004554:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004558:	6011      	str	r1, [r2, #0]
  return result;
 800455a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800455e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	fab2 f282 	clz	r2, r2
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	f042 0220 	orr.w	r2, r2, #32
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	f002 021f 	and.w	r2, r2, #31
 8004574:	2101      	movs	r1, #1
 8004576:	fa01 f202 	lsl.w	r2, r1, r2
 800457a:	4013      	ands	r3, r2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d180      	bne.n	8004482 <HAL_RCC_OscConfig+0xf1a>
 8004580:	e027      	b.n	80045d2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004586:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e01e      	b.n	80045d4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004596:	4b12      	ldr	r3, [pc, #72]	; (80045e0 <HAL_RCC_OscConfig+0x1078>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800459e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80045a2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80045a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d10b      	bne.n	80045ce <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80045b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80045ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80045be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d001      	beq.n	80045d2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	40021000 	.word	0x40021000

080045e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b09e      	sub	sp, #120	; 0x78
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e162      	b.n	80048c2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045fc:	4b90      	ldr	r3, [pc, #576]	; (8004840 <HAL_RCC_ClockConfig+0x25c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d910      	bls.n	800462c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800460a:	4b8d      	ldr	r3, [pc, #564]	; (8004840 <HAL_RCC_ClockConfig+0x25c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f023 0207 	bic.w	r2, r3, #7
 8004612:	498b      	ldr	r1, [pc, #556]	; (8004840 <HAL_RCC_ClockConfig+0x25c>)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	4313      	orrs	r3, r2
 8004618:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800461a:	4b89      	ldr	r3, [pc, #548]	; (8004840 <HAL_RCC_ClockConfig+0x25c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d001      	beq.n	800462c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e14a      	b.n	80048c2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d008      	beq.n	800464a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004638:	4b82      	ldr	r3, [pc, #520]	; (8004844 <HAL_RCC_ClockConfig+0x260>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	497f      	ldr	r1, [pc, #508]	; (8004844 <HAL_RCC_ClockConfig+0x260>)
 8004646:	4313      	orrs	r3, r2
 8004648:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 80dc 	beq.w	8004810 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d13c      	bne.n	80046da <HAL_RCC_ClockConfig+0xf6>
 8004660:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004664:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004666:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004668:	fa93 f3a3 	rbit	r3, r3
 800466c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800466e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004670:	fab3 f383 	clz	r3, r3
 8004674:	b2db      	uxtb	r3, r3
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	b2db      	uxtb	r3, r3
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b01      	cmp	r3, #1
 8004682:	d102      	bne.n	800468a <HAL_RCC_ClockConfig+0xa6>
 8004684:	4b6f      	ldr	r3, [pc, #444]	; (8004844 <HAL_RCC_ClockConfig+0x260>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	e00f      	b.n	80046aa <HAL_RCC_ClockConfig+0xc6>
 800468a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800468e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004690:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004692:	fa93 f3a3 	rbit	r3, r3
 8004696:	667b      	str	r3, [r7, #100]	; 0x64
 8004698:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800469c:	663b      	str	r3, [r7, #96]	; 0x60
 800469e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046a0:	fa93 f3a3 	rbit	r3, r3
 80046a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046a6:	4b67      	ldr	r3, [pc, #412]	; (8004844 <HAL_RCC_ClockConfig+0x260>)
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80046b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046b2:	fa92 f2a2 	rbit	r2, r2
 80046b6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80046b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80046ba:	fab2 f282 	clz	r2, r2
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	f042 0220 	orr.w	r2, r2, #32
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	f002 021f 	and.w	r2, r2, #31
 80046ca:	2101      	movs	r1, #1
 80046cc:	fa01 f202 	lsl.w	r2, r1, r2
 80046d0:	4013      	ands	r3, r2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d17b      	bne.n	80047ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e0f3      	b.n	80048c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d13c      	bne.n	800475c <HAL_RCC_ClockConfig+0x178>
 80046e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ea:	fa93 f3a3 	rbit	r3, r3
 80046ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80046f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f2:	fab3 f383 	clz	r3, r3
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	095b      	lsrs	r3, r3, #5
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	f043 0301 	orr.w	r3, r3, #1
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b01      	cmp	r3, #1
 8004704:	d102      	bne.n	800470c <HAL_RCC_ClockConfig+0x128>
 8004706:	4b4f      	ldr	r3, [pc, #316]	; (8004844 <HAL_RCC_ClockConfig+0x260>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	e00f      	b.n	800472c <HAL_RCC_ClockConfig+0x148>
 800470c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004710:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004714:	fa93 f3a3 	rbit	r3, r3
 8004718:	647b      	str	r3, [r7, #68]	; 0x44
 800471a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800471e:	643b      	str	r3, [r7, #64]	; 0x40
 8004720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004722:	fa93 f3a3 	rbit	r3, r3
 8004726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004728:	4b46      	ldr	r3, [pc, #280]	; (8004844 <HAL_RCC_ClockConfig+0x260>)
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004730:	63ba      	str	r2, [r7, #56]	; 0x38
 8004732:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004734:	fa92 f2a2 	rbit	r2, r2
 8004738:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800473a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800473c:	fab2 f282 	clz	r2, r2
 8004740:	b2d2      	uxtb	r2, r2
 8004742:	f042 0220 	orr.w	r2, r2, #32
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	f002 021f 	and.w	r2, r2, #31
 800474c:	2101      	movs	r1, #1
 800474e:	fa01 f202 	lsl.w	r2, r1, r2
 8004752:	4013      	ands	r3, r2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d13a      	bne.n	80047ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0b2      	b.n	80048c2 <HAL_RCC_ClockConfig+0x2de>
 800475c:	2302      	movs	r3, #2
 800475e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004762:	fa93 f3a3 	rbit	r3, r3
 8004766:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800476a:	fab3 f383 	clz	r3, r3
 800476e:	b2db      	uxtb	r3, r3
 8004770:	095b      	lsrs	r3, r3, #5
 8004772:	b2db      	uxtb	r3, r3
 8004774:	f043 0301 	orr.w	r3, r3, #1
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b01      	cmp	r3, #1
 800477c:	d102      	bne.n	8004784 <HAL_RCC_ClockConfig+0x1a0>
 800477e:	4b31      	ldr	r3, [pc, #196]	; (8004844 <HAL_RCC_ClockConfig+0x260>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	e00d      	b.n	80047a0 <HAL_RCC_ClockConfig+0x1bc>
 8004784:	2302      	movs	r3, #2
 8004786:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478a:	fa93 f3a3 	rbit	r3, r3
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
 8004790:	2302      	movs	r3, #2
 8004792:	623b      	str	r3, [r7, #32]
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	fa93 f3a3 	rbit	r3, r3
 800479a:	61fb      	str	r3, [r7, #28]
 800479c:	4b29      	ldr	r3, [pc, #164]	; (8004844 <HAL_RCC_ClockConfig+0x260>)
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	2202      	movs	r2, #2
 80047a2:	61ba      	str	r2, [r7, #24]
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	fa92 f2a2 	rbit	r2, r2
 80047aa:	617a      	str	r2, [r7, #20]
  return result;
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	fab2 f282 	clz	r2, r2
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	f042 0220 	orr.w	r2, r2, #32
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	f002 021f 	and.w	r2, r2, #31
 80047be:	2101      	movs	r1, #1
 80047c0:	fa01 f202 	lsl.w	r2, r1, r2
 80047c4:	4013      	ands	r3, r2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e079      	b.n	80048c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ce:	4b1d      	ldr	r3, [pc, #116]	; (8004844 <HAL_RCC_ClockConfig+0x260>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f023 0203 	bic.w	r2, r3, #3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	491a      	ldr	r1, [pc, #104]	; (8004844 <HAL_RCC_ClockConfig+0x260>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047e0:	f7fc f8f2 	bl	80009c8 <HAL_GetTick>
 80047e4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e6:	e00a      	b.n	80047fe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e8:	f7fc f8ee 	bl	80009c8 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e061      	b.n	80048c2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fe:	4b11      	ldr	r3, [pc, #68]	; (8004844 <HAL_RCC_ClockConfig+0x260>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f003 020c 	and.w	r2, r3, #12
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	429a      	cmp	r2, r3
 800480e:	d1eb      	bne.n	80047e8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004810:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <HAL_RCC_ClockConfig+0x25c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d214      	bcs.n	8004848 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481e:	4b08      	ldr	r3, [pc, #32]	; (8004840 <HAL_RCC_ClockConfig+0x25c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f023 0207 	bic.w	r2, r3, #7
 8004826:	4906      	ldr	r1, [pc, #24]	; (8004840 <HAL_RCC_ClockConfig+0x25c>)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	4313      	orrs	r3, r2
 800482c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800482e:	4b04      	ldr	r3, [pc, #16]	; (8004840 <HAL_RCC_ClockConfig+0x25c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d005      	beq.n	8004848 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e040      	b.n	80048c2 <HAL_RCC_ClockConfig+0x2de>
 8004840:	40022000 	.word	0x40022000
 8004844:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d008      	beq.n	8004866 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004854:	4b1d      	ldr	r3, [pc, #116]	; (80048cc <HAL_RCC_ClockConfig+0x2e8>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	491a      	ldr	r1, [pc, #104]	; (80048cc <HAL_RCC_ClockConfig+0x2e8>)
 8004862:	4313      	orrs	r3, r2
 8004864:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0308 	and.w	r3, r3, #8
 800486e:	2b00      	cmp	r3, #0
 8004870:	d009      	beq.n	8004886 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004872:	4b16      	ldr	r3, [pc, #88]	; (80048cc <HAL_RCC_ClockConfig+0x2e8>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	4912      	ldr	r1, [pc, #72]	; (80048cc <HAL_RCC_ClockConfig+0x2e8>)
 8004882:	4313      	orrs	r3, r2
 8004884:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004886:	f000 f829 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 800488a:	4601      	mov	r1, r0
 800488c:	4b0f      	ldr	r3, [pc, #60]	; (80048cc <HAL_RCC_ClockConfig+0x2e8>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004894:	22f0      	movs	r2, #240	; 0xf0
 8004896:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	fa92 f2a2 	rbit	r2, r2
 800489e:	60fa      	str	r2, [r7, #12]
  return result;
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	fab2 f282 	clz	r2, r2
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	40d3      	lsrs	r3, r2
 80048aa:	4a09      	ldr	r2, [pc, #36]	; (80048d0 <HAL_RCC_ClockConfig+0x2ec>)
 80048ac:	5cd3      	ldrb	r3, [r2, r3]
 80048ae:	fa21 f303 	lsr.w	r3, r1, r3
 80048b2:	4a08      	ldr	r2, [pc, #32]	; (80048d4 <HAL_RCC_ClockConfig+0x2f0>)
 80048b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80048b6:	4b08      	ldr	r3, [pc, #32]	; (80048d8 <HAL_RCC_ClockConfig+0x2f4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fc f840 	bl	8000940 <HAL_InitTick>
  
  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3778      	adds	r7, #120	; 0x78
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40021000 	.word	0x40021000
 80048d0:	08009ff8 	.word	0x08009ff8
 80048d4:	20000000 	.word	0x20000000
 80048d8:	20000004 	.word	0x20000004

080048dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	b08b      	sub	sp, #44	; 0x2c
 80048e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	61fb      	str	r3, [r7, #28]
 80048e6:	2300      	movs	r3, #0
 80048e8:	61bb      	str	r3, [r7, #24]
 80048ea:	2300      	movs	r3, #0
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
 80048ee:	2300      	movs	r3, #0
 80048f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80048f6:	4b29      	ldr	r3, [pc, #164]	; (800499c <HAL_RCC_GetSysClockFreq+0xc0>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f003 030c 	and.w	r3, r3, #12
 8004902:	2b04      	cmp	r3, #4
 8004904:	d002      	beq.n	800490c <HAL_RCC_GetSysClockFreq+0x30>
 8004906:	2b08      	cmp	r3, #8
 8004908:	d003      	beq.n	8004912 <HAL_RCC_GetSysClockFreq+0x36>
 800490a:	e03c      	b.n	8004986 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800490c:	4b24      	ldr	r3, [pc, #144]	; (80049a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800490e:	623b      	str	r3, [r7, #32]
      break;
 8004910:	e03c      	b.n	800498c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004918:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800491c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	fa92 f2a2 	rbit	r2, r2
 8004924:	607a      	str	r2, [r7, #4]
  return result;
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	fab2 f282 	clz	r2, r2
 800492c:	b2d2      	uxtb	r2, r2
 800492e:	40d3      	lsrs	r3, r2
 8004930:	4a1c      	ldr	r2, [pc, #112]	; (80049a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004932:	5cd3      	ldrb	r3, [r2, r3]
 8004934:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004936:	4b19      	ldr	r3, [pc, #100]	; (800499c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	220f      	movs	r2, #15
 8004940:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	fa92 f2a2 	rbit	r2, r2
 8004948:	60fa      	str	r2, [r7, #12]
  return result;
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	fab2 f282 	clz	r2, r2
 8004950:	b2d2      	uxtb	r2, r2
 8004952:	40d3      	lsrs	r3, r2
 8004954:	4a14      	ldr	r2, [pc, #80]	; (80049a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004956:	5cd3      	ldrb	r3, [r2, r3]
 8004958:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d008      	beq.n	8004976 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004964:	4a0e      	ldr	r2, [pc, #56]	; (80049a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	fbb2 f2f3 	udiv	r2, r2, r3
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	fb02 f303 	mul.w	r3, r2, r3
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
 8004974:	e004      	b.n	8004980 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	4a0c      	ldr	r2, [pc, #48]	; (80049ac <HAL_RCC_GetSysClockFreq+0xd0>)
 800497a:	fb02 f303 	mul.w	r3, r2, r3
 800497e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	623b      	str	r3, [r7, #32]
      break;
 8004984:	e002      	b.n	800498c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004986:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004988:	623b      	str	r3, [r7, #32]
      break;
 800498a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800498c:	6a3b      	ldr	r3, [r7, #32]
}
 800498e:	4618      	mov	r0, r3
 8004990:	372c      	adds	r7, #44	; 0x2c
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40021000 	.word	0x40021000
 80049a0:	007a1200 	.word	0x007a1200
 80049a4:	0800a008 	.word	0x0800a008
 80049a8:	0800a018 	.word	0x0800a018
 80049ac:	003d0900 	.word	0x003d0900

080049b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b092      	sub	sp, #72	; 0x48
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80049c0:	2300      	movs	r3, #0
 80049c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 80d4 	beq.w	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049d4:	4b4e      	ldr	r3, [pc, #312]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049d6:	69db      	ldr	r3, [r3, #28]
 80049d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10e      	bne.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049e0:	4b4b      	ldr	r3, [pc, #300]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	4a4a      	ldr	r2, [pc, #296]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ea:	61d3      	str	r3, [r2, #28]
 80049ec:	4b48      	ldr	r3, [pc, #288]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f4:	60bb      	str	r3, [r7, #8]
 80049f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049f8:	2301      	movs	r3, #1
 80049fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049fe:	4b45      	ldr	r3, [pc, #276]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d118      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a0a:	4b42      	ldr	r3, [pc, #264]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a41      	ldr	r2, [pc, #260]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a14:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a16:	f7fb ffd7 	bl	80009c8 <HAL_GetTick>
 8004a1a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a1c:	e008      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a1e:	f7fb ffd3 	bl	80009c8 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b64      	cmp	r3, #100	; 0x64
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e169      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a30:	4b38      	ldr	r3, [pc, #224]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0f0      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a3c:	4b34      	ldr	r3, [pc, #208]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a44:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 8084 	beq.w	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d07c      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a5c:	4b2c      	ldr	r3, [pc, #176]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6e:	fa93 f3a3 	rbit	r3, r3
 8004a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a76:	fab3 f383 	clz	r3, r3
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4b26      	ldr	r3, [pc, #152]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a80:	4413      	add	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	461a      	mov	r2, r3
 8004a86:	2301      	movs	r3, #1
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a92:	fa93 f3a3 	rbit	r3, r3
 8004a96:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a9a:	fab3 f383 	clz	r3, r3
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	4b1d      	ldr	r3, [pc, #116]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004aa4:	4413      	add	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	2300      	movs	r3, #0
 8004aac:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004aae:	4a18      	ldr	r2, [pc, #96]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d04b      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004abe:	f7fb ff83 	bl	80009c8 <HAL_GetTick>
 8004ac2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac4:	e00a      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ac6:	f7fb ff7f 	bl	80009c8 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e113      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004adc:	2302      	movs	r3, #2
 8004ade:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae2:	fa93 f3a3 	rbit	r3, r3
 8004ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae8:	2302      	movs	r3, #2
 8004aea:	623b      	str	r3, [r7, #32]
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	fa93 f3a3 	rbit	r3, r3
 8004af2:	61fb      	str	r3, [r7, #28]
  return result;
 8004af4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004af6:	fab3 f383 	clz	r3, r3
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	095b      	lsrs	r3, r3, #5
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	f043 0302 	orr.w	r3, r3, #2
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d108      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004b0a:	4b01      	ldr	r3, [pc, #4]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	e00d      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004b10:	40021000 	.word	0x40021000
 8004b14:	40007000 	.word	0x40007000
 8004b18:	10908100 	.word	0x10908100
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	fa93 f3a3 	rbit	r3, r3
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	4b78      	ldr	r3, [pc, #480]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	613a      	str	r2, [r7, #16]
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	fa92 f2a2 	rbit	r2, r2
 8004b36:	60fa      	str	r2, [r7, #12]
  return result;
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	fab2 f282 	clz	r2, r2
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b44:	b2d2      	uxtb	r2, r2
 8004b46:	f002 021f 	and.w	r2, r2, #31
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b50:	4013      	ands	r3, r2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0b7      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004b56:	4b6d      	ldr	r3, [pc, #436]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	496a      	ldr	r1, [pc, #424]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d105      	bne.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b70:	4b66      	ldr	r3, [pc, #408]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	4a65      	ldr	r2, [pc, #404]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d008      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b88:	4b60      	ldr	r3, [pc, #384]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	f023 0203 	bic.w	r2, r3, #3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	495d      	ldr	r1, [pc, #372]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d008      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ba6:	4b59      	ldr	r3, [pc, #356]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	4956      	ldr	r1, [pc, #344]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0304 	and.w	r3, r3, #4
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d008      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bc4:	4b51      	ldr	r3, [pc, #324]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	494e      	ldr	r1, [pc, #312]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0320 	and.w	r3, r3, #32
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d008      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004be2:	4b4a      	ldr	r3, [pc, #296]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be6:	f023 0210 	bic.w	r2, r3, #16
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	4947      	ldr	r1, [pc, #284]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d008      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004c00:	4b42      	ldr	r3, [pc, #264]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0c:	493f      	ldr	r1, [pc, #252]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d008      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c1e:	4b3b      	ldr	r3, [pc, #236]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c22:	f023 0220 	bic.w	r2, r3, #32
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	4938      	ldr	r1, [pc, #224]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0308 	and.w	r3, r3, #8
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d008      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c3c:	4b33      	ldr	r3, [pc, #204]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	4930      	ldr	r1, [pc, #192]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0310 	and.w	r3, r3, #16
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d008      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c5a:	4b2c      	ldr	r3, [pc, #176]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	4929      	ldr	r1, [pc, #164]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d008      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c78:	4b24      	ldr	r3, [pc, #144]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	4921      	ldr	r1, [pc, #132]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d008      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c96:	4b1d      	ldr	r3, [pc, #116]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	491a      	ldr	r1, [pc, #104]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d008      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004cb4:	4b15      	ldr	r3, [pc, #84]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	4912      	ldr	r1, [pc, #72]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d008      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004cd2:	4b0e      	ldr	r3, [pc, #56]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	490b      	ldr	r1, [pc, #44]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d008      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004cf0:	4b06      	ldr	r3, [pc, #24]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfc:	4903      	ldr	r1, [pc, #12]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3748      	adds	r7, #72	; 0x48
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40021000 	.word	0x40021000

08004d10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e049      	b.n	8004db6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d106      	bne.n	8004d3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7fb fd26 	bl	8000788 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4610      	mov	r0, r2
 8004d50:	f000 f9aa 	bl	80050a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b082      	sub	sp, #8
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e049      	b.n	8004e64 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d106      	bne.n	8004dea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f841 	bl	8004e6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2202      	movs	r2, #2
 8004dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	3304      	adds	r3, #4
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	f000 f953 	bl	80050a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d101      	bne.n	8004e9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e0ff      	b.n	800509e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b14      	cmp	r3, #20
 8004eaa:	f200 80f0 	bhi.w	800508e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004eae:	a201      	add	r2, pc, #4	; (adr r2, 8004eb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb4:	08004f09 	.word	0x08004f09
 8004eb8:	0800508f 	.word	0x0800508f
 8004ebc:	0800508f 	.word	0x0800508f
 8004ec0:	0800508f 	.word	0x0800508f
 8004ec4:	08004f49 	.word	0x08004f49
 8004ec8:	0800508f 	.word	0x0800508f
 8004ecc:	0800508f 	.word	0x0800508f
 8004ed0:	0800508f 	.word	0x0800508f
 8004ed4:	08004f8b 	.word	0x08004f8b
 8004ed8:	0800508f 	.word	0x0800508f
 8004edc:	0800508f 	.word	0x0800508f
 8004ee0:	0800508f 	.word	0x0800508f
 8004ee4:	08004fcb 	.word	0x08004fcb
 8004ee8:	0800508f 	.word	0x0800508f
 8004eec:	0800508f 	.word	0x0800508f
 8004ef0:	0800508f 	.word	0x0800508f
 8004ef4:	0800500d 	.word	0x0800500d
 8004ef8:	0800508f 	.word	0x0800508f
 8004efc:	0800508f 	.word	0x0800508f
 8004f00:	0800508f 	.word	0x0800508f
 8004f04:	0800504d 	.word	0x0800504d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68b9      	ldr	r1, [r7, #8]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 f95a 	bl	80051c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699a      	ldr	r2, [r3, #24]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0208 	orr.w	r2, r2, #8
 8004f22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699a      	ldr	r2, [r3, #24]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0204 	bic.w	r2, r2, #4
 8004f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6999      	ldr	r1, [r3, #24]
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	691a      	ldr	r2, [r3, #16]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	619a      	str	r2, [r3, #24]
      break;
 8004f46:	e0a5      	b.n	8005094 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68b9      	ldr	r1, [r7, #8]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 f9ca 	bl	80052e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	699a      	ldr	r2, [r3, #24]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699a      	ldr	r2, [r3, #24]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6999      	ldr	r1, [r3, #24]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	021a      	lsls	r2, r3, #8
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	619a      	str	r2, [r3, #24]
      break;
 8004f88:	e084      	b.n	8005094 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68b9      	ldr	r1, [r7, #8]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 fa33 	bl	80053fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f042 0208 	orr.w	r2, r2, #8
 8004fa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69da      	ldr	r2, [r3, #28]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0204 	bic.w	r2, r2, #4
 8004fb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69d9      	ldr	r1, [r3, #28]
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	691a      	ldr	r2, [r3, #16]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	61da      	str	r2, [r3, #28]
      break;
 8004fc8:	e064      	b.n	8005094 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68b9      	ldr	r1, [r7, #8]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 fa9b 	bl	800550c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69da      	ldr	r2, [r3, #28]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fe4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69da      	ldr	r2, [r3, #28]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69d9      	ldr	r1, [r3, #28]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	021a      	lsls	r2, r3, #8
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	61da      	str	r2, [r3, #28]
      break;
 800500a:	e043      	b.n	8005094 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68b9      	ldr	r1, [r7, #8]
 8005012:	4618      	mov	r0, r3
 8005014:	f000 fae4 	bl	80055e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0208 	orr.w	r2, r2, #8
 8005026:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 0204 	bic.w	r2, r2, #4
 8005036:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	691a      	ldr	r2, [r3, #16]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800504a:	e023      	b.n	8005094 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68b9      	ldr	r1, [r7, #8]
 8005052:	4618      	mov	r0, r3
 8005054:	f000 fb28 	bl	80056a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005066:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005076:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	021a      	lsls	r2, r3, #8
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800508c:	e002      	b.n	8005094 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	75fb      	strb	r3, [r7, #23]
      break;
 8005092:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800509c:	7dfb      	ldrb	r3, [r7, #23]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop

080050a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a3c      	ldr	r2, [pc, #240]	; (80051ac <TIM_Base_SetConfig+0x104>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00f      	beq.n	80050e0 <TIM_Base_SetConfig+0x38>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c6:	d00b      	beq.n	80050e0 <TIM_Base_SetConfig+0x38>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a39      	ldr	r2, [pc, #228]	; (80051b0 <TIM_Base_SetConfig+0x108>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d007      	beq.n	80050e0 <TIM_Base_SetConfig+0x38>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a38      	ldr	r2, [pc, #224]	; (80051b4 <TIM_Base_SetConfig+0x10c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d003      	beq.n	80050e0 <TIM_Base_SetConfig+0x38>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a37      	ldr	r2, [pc, #220]	; (80051b8 <TIM_Base_SetConfig+0x110>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d108      	bne.n	80050f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a2d      	ldr	r2, [pc, #180]	; (80051ac <TIM_Base_SetConfig+0x104>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d01b      	beq.n	8005132 <TIM_Base_SetConfig+0x8a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005100:	d017      	beq.n	8005132 <TIM_Base_SetConfig+0x8a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a2a      	ldr	r2, [pc, #168]	; (80051b0 <TIM_Base_SetConfig+0x108>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d013      	beq.n	8005132 <TIM_Base_SetConfig+0x8a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a29      	ldr	r2, [pc, #164]	; (80051b4 <TIM_Base_SetConfig+0x10c>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00f      	beq.n	8005132 <TIM_Base_SetConfig+0x8a>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a28      	ldr	r2, [pc, #160]	; (80051b8 <TIM_Base_SetConfig+0x110>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d00b      	beq.n	8005132 <TIM_Base_SetConfig+0x8a>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a27      	ldr	r2, [pc, #156]	; (80051bc <TIM_Base_SetConfig+0x114>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d007      	beq.n	8005132 <TIM_Base_SetConfig+0x8a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a26      	ldr	r2, [pc, #152]	; (80051c0 <TIM_Base_SetConfig+0x118>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d003      	beq.n	8005132 <TIM_Base_SetConfig+0x8a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a25      	ldr	r2, [pc, #148]	; (80051c4 <TIM_Base_SetConfig+0x11c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d108      	bne.n	8005144 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005138:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	4313      	orrs	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	4313      	orrs	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a10      	ldr	r2, [pc, #64]	; (80051ac <TIM_Base_SetConfig+0x104>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d00f      	beq.n	8005190 <TIM_Base_SetConfig+0xe8>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a11      	ldr	r2, [pc, #68]	; (80051b8 <TIM_Base_SetConfig+0x110>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d00b      	beq.n	8005190 <TIM_Base_SetConfig+0xe8>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a10      	ldr	r2, [pc, #64]	; (80051bc <TIM_Base_SetConfig+0x114>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d007      	beq.n	8005190 <TIM_Base_SetConfig+0xe8>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a0f      	ldr	r2, [pc, #60]	; (80051c0 <TIM_Base_SetConfig+0x118>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d003      	beq.n	8005190 <TIM_Base_SetConfig+0xe8>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a0e      	ldr	r2, [pc, #56]	; (80051c4 <TIM_Base_SetConfig+0x11c>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d103      	bne.n	8005198 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	691a      	ldr	r2, [r3, #16]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	615a      	str	r2, [r3, #20]
}
 800519e:	bf00      	nop
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40012c00 	.word	0x40012c00
 80051b0:	40000400 	.word	0x40000400
 80051b4:	40000800 	.word	0x40000800
 80051b8:	40013400 	.word	0x40013400
 80051bc:	40014000 	.word	0x40014000
 80051c0:	40014400 	.word	0x40014400
 80051c4:	40014800 	.word	0x40014800

080051c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	f023 0201 	bic.w	r2, r3, #1
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0303 	bic.w	r3, r3, #3
 8005202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f023 0302 	bic.w	r3, r3, #2
 8005214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	4313      	orrs	r3, r2
 800521e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a2c      	ldr	r2, [pc, #176]	; (80052d4 <TIM_OC1_SetConfig+0x10c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00f      	beq.n	8005248 <TIM_OC1_SetConfig+0x80>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a2b      	ldr	r2, [pc, #172]	; (80052d8 <TIM_OC1_SetConfig+0x110>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d00b      	beq.n	8005248 <TIM_OC1_SetConfig+0x80>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a2a      	ldr	r2, [pc, #168]	; (80052dc <TIM_OC1_SetConfig+0x114>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d007      	beq.n	8005248 <TIM_OC1_SetConfig+0x80>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a29      	ldr	r2, [pc, #164]	; (80052e0 <TIM_OC1_SetConfig+0x118>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d003      	beq.n	8005248 <TIM_OC1_SetConfig+0x80>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a28      	ldr	r2, [pc, #160]	; (80052e4 <TIM_OC1_SetConfig+0x11c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d10c      	bne.n	8005262 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f023 0308 	bic.w	r3, r3, #8
 800524e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	4313      	orrs	r3, r2
 8005258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f023 0304 	bic.w	r3, r3, #4
 8005260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a1b      	ldr	r2, [pc, #108]	; (80052d4 <TIM_OC1_SetConfig+0x10c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00f      	beq.n	800528a <TIM_OC1_SetConfig+0xc2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a1a      	ldr	r2, [pc, #104]	; (80052d8 <TIM_OC1_SetConfig+0x110>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00b      	beq.n	800528a <TIM_OC1_SetConfig+0xc2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a19      	ldr	r2, [pc, #100]	; (80052dc <TIM_OC1_SetConfig+0x114>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d007      	beq.n	800528a <TIM_OC1_SetConfig+0xc2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a18      	ldr	r2, [pc, #96]	; (80052e0 <TIM_OC1_SetConfig+0x118>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d003      	beq.n	800528a <TIM_OC1_SetConfig+0xc2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a17      	ldr	r2, [pc, #92]	; (80052e4 <TIM_OC1_SetConfig+0x11c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d111      	bne.n	80052ae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	621a      	str	r2, [r3, #32]
}
 80052c8:	bf00      	nop
 80052ca:	371c      	adds	r7, #28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	40012c00 	.word	0x40012c00
 80052d8:	40013400 	.word	0x40013400
 80052dc:	40014000 	.word	0x40014000
 80052e0:	40014400 	.word	0x40014400
 80052e4:	40014800 	.word	0x40014800

080052e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	f023 0210 	bic.w	r2, r3, #16
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800531a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	021b      	lsls	r3, r3, #8
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4313      	orrs	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f023 0320 	bic.w	r3, r3, #32
 8005336:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	4313      	orrs	r3, r2
 8005342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a28      	ldr	r2, [pc, #160]	; (80053e8 <TIM_OC2_SetConfig+0x100>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d003      	beq.n	8005354 <TIM_OC2_SetConfig+0x6c>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a27      	ldr	r2, [pc, #156]	; (80053ec <TIM_OC2_SetConfig+0x104>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d10d      	bne.n	8005370 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800535a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	011b      	lsls	r3, r3, #4
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	4313      	orrs	r3, r2
 8005366:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800536e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a1d      	ldr	r2, [pc, #116]	; (80053e8 <TIM_OC2_SetConfig+0x100>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d00f      	beq.n	8005398 <TIM_OC2_SetConfig+0xb0>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a1c      	ldr	r2, [pc, #112]	; (80053ec <TIM_OC2_SetConfig+0x104>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d00b      	beq.n	8005398 <TIM_OC2_SetConfig+0xb0>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a1b      	ldr	r2, [pc, #108]	; (80053f0 <TIM_OC2_SetConfig+0x108>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d007      	beq.n	8005398 <TIM_OC2_SetConfig+0xb0>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a1a      	ldr	r2, [pc, #104]	; (80053f4 <TIM_OC2_SetConfig+0x10c>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d003      	beq.n	8005398 <TIM_OC2_SetConfig+0xb0>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a19      	ldr	r2, [pc, #100]	; (80053f8 <TIM_OC2_SetConfig+0x110>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d113      	bne.n	80053c0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800539e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053a6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	4313      	orrs	r3, r2
 80053be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	621a      	str	r2, [r3, #32]
}
 80053da:	bf00      	nop
 80053dc:	371c      	adds	r7, #28
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	40012c00 	.word	0x40012c00
 80053ec:	40013400 	.word	0x40013400
 80053f0:	40014000 	.word	0x40014000
 80053f4:	40014400 	.word	0x40014400
 80053f8:	40014800 	.word	0x40014800

080053fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800542a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0303 	bic.w	r3, r3, #3
 8005436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005448:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	021b      	lsls	r3, r3, #8
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	4313      	orrs	r3, r2
 8005454:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a27      	ldr	r2, [pc, #156]	; (80054f8 <TIM_OC3_SetConfig+0xfc>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d003      	beq.n	8005466 <TIM_OC3_SetConfig+0x6a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a26      	ldr	r2, [pc, #152]	; (80054fc <TIM_OC3_SetConfig+0x100>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d10d      	bne.n	8005482 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800546c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	021b      	lsls	r3, r3, #8
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	4313      	orrs	r3, r2
 8005478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005480:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a1c      	ldr	r2, [pc, #112]	; (80054f8 <TIM_OC3_SetConfig+0xfc>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d00f      	beq.n	80054aa <TIM_OC3_SetConfig+0xae>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a1b      	ldr	r2, [pc, #108]	; (80054fc <TIM_OC3_SetConfig+0x100>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00b      	beq.n	80054aa <TIM_OC3_SetConfig+0xae>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a1a      	ldr	r2, [pc, #104]	; (8005500 <TIM_OC3_SetConfig+0x104>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d007      	beq.n	80054aa <TIM_OC3_SetConfig+0xae>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a19      	ldr	r2, [pc, #100]	; (8005504 <TIM_OC3_SetConfig+0x108>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d003      	beq.n	80054aa <TIM_OC3_SetConfig+0xae>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a18      	ldr	r2, [pc, #96]	; (8005508 <TIM_OC3_SetConfig+0x10c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d113      	bne.n	80054d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	011b      	lsls	r3, r3, #4
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	621a      	str	r2, [r3, #32]
}
 80054ec:	bf00      	nop
 80054ee:	371c      	adds	r7, #28
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	40012c00 	.word	0x40012c00
 80054fc:	40013400 	.word	0x40013400
 8005500:	40014000 	.word	0x40014000
 8005504:	40014400 	.word	0x40014400
 8005508:	40014800 	.word	0x40014800

0800550c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800553a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800553e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	021b      	lsls	r3, r3, #8
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4313      	orrs	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800555a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	031b      	lsls	r3, r3, #12
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4313      	orrs	r3, r2
 8005566:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a18      	ldr	r2, [pc, #96]	; (80055cc <TIM_OC4_SetConfig+0xc0>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00f      	beq.n	8005590 <TIM_OC4_SetConfig+0x84>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a17      	ldr	r2, [pc, #92]	; (80055d0 <TIM_OC4_SetConfig+0xc4>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d00b      	beq.n	8005590 <TIM_OC4_SetConfig+0x84>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a16      	ldr	r2, [pc, #88]	; (80055d4 <TIM_OC4_SetConfig+0xc8>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d007      	beq.n	8005590 <TIM_OC4_SetConfig+0x84>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a15      	ldr	r2, [pc, #84]	; (80055d8 <TIM_OC4_SetConfig+0xcc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d003      	beq.n	8005590 <TIM_OC4_SetConfig+0x84>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a14      	ldr	r2, [pc, #80]	; (80055dc <TIM_OC4_SetConfig+0xd0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d109      	bne.n	80055a4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005596:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	019b      	lsls	r3, r3, #6
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	621a      	str	r2, [r3, #32]
}
 80055be:	bf00      	nop
 80055c0:	371c      	adds	r7, #28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	40012c00 	.word	0x40012c00
 80055d0:	40013400 	.word	0x40013400
 80055d4:	40014000 	.word	0x40014000
 80055d8:	40014400 	.word	0x40014400
 80055dc:	40014800 	.word	0x40014800

080055e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800560e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005624:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	041b      	lsls	r3, r3, #16
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	4313      	orrs	r3, r2
 8005630:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a17      	ldr	r2, [pc, #92]	; (8005694 <TIM_OC5_SetConfig+0xb4>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d00f      	beq.n	800565a <TIM_OC5_SetConfig+0x7a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a16      	ldr	r2, [pc, #88]	; (8005698 <TIM_OC5_SetConfig+0xb8>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d00b      	beq.n	800565a <TIM_OC5_SetConfig+0x7a>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a15      	ldr	r2, [pc, #84]	; (800569c <TIM_OC5_SetConfig+0xbc>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d007      	beq.n	800565a <TIM_OC5_SetConfig+0x7a>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a14      	ldr	r2, [pc, #80]	; (80056a0 <TIM_OC5_SetConfig+0xc0>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d003      	beq.n	800565a <TIM_OC5_SetConfig+0x7a>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a13      	ldr	r2, [pc, #76]	; (80056a4 <TIM_OC5_SetConfig+0xc4>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d109      	bne.n	800566e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005660:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	021b      	lsls	r3, r3, #8
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	4313      	orrs	r3, r2
 800566c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	621a      	str	r2, [r3, #32]
}
 8005688:	bf00      	nop
 800568a:	371c      	adds	r7, #28
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr
 8005694:	40012c00 	.word	0x40012c00
 8005698:	40013400 	.word	0x40013400
 800569c:	40014000 	.word	0x40014000
 80056a0:	40014400 	.word	0x40014400
 80056a4:	40014800 	.word	0x40014800

080056a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	021b      	lsls	r3, r3, #8
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	051b      	lsls	r3, r3, #20
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a18      	ldr	r2, [pc, #96]	; (8005760 <TIM_OC6_SetConfig+0xb8>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00f      	beq.n	8005724 <TIM_OC6_SetConfig+0x7c>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a17      	ldr	r2, [pc, #92]	; (8005764 <TIM_OC6_SetConfig+0xbc>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d00b      	beq.n	8005724 <TIM_OC6_SetConfig+0x7c>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a16      	ldr	r2, [pc, #88]	; (8005768 <TIM_OC6_SetConfig+0xc0>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d007      	beq.n	8005724 <TIM_OC6_SetConfig+0x7c>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a15      	ldr	r2, [pc, #84]	; (800576c <TIM_OC6_SetConfig+0xc4>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d003      	beq.n	8005724 <TIM_OC6_SetConfig+0x7c>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a14      	ldr	r2, [pc, #80]	; (8005770 <TIM_OC6_SetConfig+0xc8>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d109      	bne.n	8005738 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800572a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	029b      	lsls	r3, r3, #10
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	621a      	str	r2, [r3, #32]
}
 8005752:	bf00      	nop
 8005754:	371c      	adds	r7, #28
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	40012c00 	.word	0x40012c00
 8005764:	40013400 	.word	0x40013400
 8005768:	40014000 	.word	0x40014000
 800576c:	40014400 	.word	0x40014400
 8005770:	40014800 	.word	0x40014800

08005774 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005788:	2b01      	cmp	r3, #1
 800578a:	d101      	bne.n	8005790 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800578c:	2302      	movs	r3, #2
 800578e:	e065      	b.n	800585c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	4313      	orrs	r3, r2
 80057dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	041b      	lsls	r3, r3, #16
 8005806:	4313      	orrs	r3, r2
 8005808:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a16      	ldr	r2, [pc, #88]	; (8005868 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d004      	beq.n	800581e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a14      	ldr	r2, [pc, #80]	; (800586c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d115      	bne.n	800584a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	051b      	lsls	r3, r3, #20
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	69db      	ldr	r3, [r3, #28]
 8005838:	4313      	orrs	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	40012c00 	.word	0x40012c00
 800586c:	40013400 	.word	0x40013400

08005870 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005880:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005884:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	b29a      	uxth	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800589e:	b480      	push	{r7}
 80058a0:	b085      	sub	sp, #20
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80058a6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80058aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	43db      	mvns	r3, r3
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	4013      	ands	r3, r2
 80058be:	b29a      	uxth	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80058d4:	b084      	sub	sp, #16
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	f107 0014 	add.w	r0, r7, #20
 80058e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	b004      	add	sp, #16
 8005914:	4770      	bx	lr
	...

08005918 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005918:	b480      	push	{r7}
 800591a:	b09d      	sub	sp, #116	; 0x74
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005922:	2300      	movs	r3, #0
 8005924:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	881b      	ldrh	r3, [r3, #0]
 8005934:	b29b      	uxth	r3, r3
 8005936:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800593a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	78db      	ldrb	r3, [r3, #3]
 8005946:	2b03      	cmp	r3, #3
 8005948:	d81f      	bhi.n	800598a <USB_ActivateEndpoint+0x72>
 800594a:	a201      	add	r2, pc, #4	; (adr r2, 8005950 <USB_ActivateEndpoint+0x38>)
 800594c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005950:	08005961 	.word	0x08005961
 8005954:	0800597d 	.word	0x0800597d
 8005958:	08005993 	.word	0x08005993
 800595c:	0800596f 	.word	0x0800596f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005960:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005964:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005968:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800596c:	e012      	b.n	8005994 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800596e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005972:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005976:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800597a:	e00b      	b.n	8005994 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800597c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005980:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005984:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005988:	e004      	b.n	8005994 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005990:	e000      	b.n	8005994 <USB_ActivateEndpoint+0x7c>
      break;
 8005992:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	441a      	add	r2, r3
 800599e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80059a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	b21b      	sxth	r3, r3
 80059c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ce:	b21a      	sxth	r2, r3
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	b21b      	sxth	r3, r3
 80059d6:	4313      	orrs	r3, r2
 80059d8:	b21b      	sxth	r3, r3
 80059da:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	441a      	add	r2, r3
 80059e8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80059ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	7b1b      	ldrb	r3, [r3, #12]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f040 8178 	bne.w	8005cfa <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	785b      	ldrb	r3, [r3, #1]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 8084 	beq.w	8005b1c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	61bb      	str	r3, [r7, #24]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	461a      	mov	r2, r3
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	4413      	add	r3, r2
 8005a26:	61bb      	str	r3, [r7, #24]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	011a      	lsls	r2, r3, #4
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	4413      	add	r3, r2
 8005a32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a36:	617b      	str	r3, [r7, #20]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	88db      	ldrh	r3, [r3, #6]
 8005a3c:	085b      	lsrs	r3, r3, #1
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4413      	add	r3, r2
 8005a52:	881b      	ldrh	r3, [r3, #0]
 8005a54:	827b      	strh	r3, [r7, #18]
 8005a56:	8a7b      	ldrh	r3, [r7, #18]
 8005a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d01b      	beq.n	8005a98 <USB_ActivateEndpoint+0x180>
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	881b      	ldrh	r3, [r3, #0]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a76:	823b      	strh	r3, [r7, #16]
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	441a      	add	r2, r3
 8005a82:	8a3b      	ldrh	r3, [r7, #16]
 8005a84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	78db      	ldrb	r3, [r3, #3]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d020      	beq.n	8005ae2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ab6:	81bb      	strh	r3, [r7, #12]
 8005ab8:	89bb      	ldrh	r3, [r7, #12]
 8005aba:	f083 0320 	eor.w	r3, r3, #32
 8005abe:	81bb      	strh	r3, [r7, #12]
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	441a      	add	r2, r3
 8005aca:	89bb      	ldrh	r3, [r7, #12]
 8005acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	8013      	strh	r3, [r2, #0]
 8005ae0:	e2d5      	b.n	800608e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005af8:	81fb      	strh	r3, [r7, #14]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	441a      	add	r2, r3
 8005b04:	89fb      	ldrh	r3, [r7, #14]
 8005b06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	8013      	strh	r3, [r2, #0]
 8005b1a:	e2b8      	b.n	800608e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	633b      	str	r3, [r7, #48]	; 0x30
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	461a      	mov	r2, r3
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2c:	4413      	add	r3, r2
 8005b2e:	633b      	str	r3, [r7, #48]	; 0x30
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	011a      	lsls	r2, r3, #4
 8005b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	88db      	ldrh	r3, [r3, #6]
 8005b44:	085b      	lsrs	r3, r3, #1
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b60:	4413      	add	r3, r2
 8005b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	011a      	lsls	r2, r3, #4
 8005b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b72:	627b      	str	r3, [r7, #36]	; 0x24
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	801a      	strh	r2, [r3, #0]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	2b3e      	cmp	r3, #62	; 0x3e
 8005b8a:	d91d      	bls.n	8005bc8 <USB_ActivateEndpoint+0x2b0>
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	095b      	lsrs	r3, r3, #5
 8005b92:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	f003 031f 	and.w	r3, r3, #31
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d102      	bne.n	8005ba6 <USB_ActivateEndpoint+0x28e>
 8005ba0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	029b      	lsls	r3, r3, #10
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	801a      	strh	r2, [r3, #0]
 8005bc6:	e026      	b.n	8005c16 <USB_ActivateEndpoint+0x2fe>
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10a      	bne.n	8005be6 <USB_ActivateEndpoint+0x2ce>
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	881b      	ldrh	r3, [r3, #0]
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	801a      	strh	r2, [r3, #0]
 8005be4:	e017      	b.n	8005c16 <USB_ActivateEndpoint+0x2fe>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	085b      	lsrs	r3, r3, #1
 8005bec:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <USB_ActivateEndpoint+0x2e8>
 8005bfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	029b      	lsls	r3, r3, #10
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c14:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	847b      	strh	r3, [r7, #34]	; 0x22
 8005c24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d01b      	beq.n	8005c66 <USB_ActivateEndpoint+0x34e>
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c44:	843b      	strh	r3, [r7, #32]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	441a      	add	r2, r3
 8005c50:	8c3b      	ldrh	r3, [r7, #32]
 8005c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d124      	bne.n	8005cb8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c84:	83bb      	strh	r3, [r7, #28]
 8005c86:	8bbb      	ldrh	r3, [r7, #28]
 8005c88:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c8c:	83bb      	strh	r3, [r7, #28]
 8005c8e:	8bbb      	ldrh	r3, [r7, #28]
 8005c90:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c94:	83bb      	strh	r3, [r7, #28]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	441a      	add	r2, r3
 8005ca0:	8bbb      	ldrh	r3, [r7, #28]
 8005ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	8013      	strh	r3, [r2, #0]
 8005cb6:	e1ea      	b.n	800608e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	881b      	ldrh	r3, [r3, #0]
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cce:	83fb      	strh	r3, [r7, #30]
 8005cd0:	8bfb      	ldrh	r3, [r7, #30]
 8005cd2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005cd6:	83fb      	strh	r3, [r7, #30]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	441a      	add	r2, r3
 8005ce2:	8bfb      	ldrh	r3, [r7, #30]
 8005ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	8013      	strh	r3, [r2, #0]
 8005cf8:	e1c9      	b.n	800608e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	78db      	ldrb	r3, [r3, #3]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d11e      	bne.n	8005d40 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d18:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	441a      	add	r2, r3
 8005d26:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d32:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	8013      	strh	r3, [r2, #0]
 8005d3e:	e01d      	b.n	8005d7c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d56:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	441a      	add	r2, r3
 8005d64:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005d68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	461a      	mov	r2, r3
 8005d8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d8c:	4413      	add	r3, r2
 8005d8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	011a      	lsls	r2, r3, #4
 8005d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	891b      	ldrh	r3, [r3, #8]
 8005da4:	085b      	lsrs	r3, r3, #1
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	005b      	lsls	r3, r3, #1
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dae:	801a      	strh	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	657b      	str	r3, [r7, #84]	; 0x54
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dc0:	4413      	add	r3, r2
 8005dc2:	657b      	str	r3, [r7, #84]	; 0x54
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	011a      	lsls	r2, r3, #4
 8005dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005dd2:	653b      	str	r3, [r7, #80]	; 0x50
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	895b      	ldrh	r3, [r3, #10]
 8005dd8:	085b      	lsrs	r3, r3, #1
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005de2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	785b      	ldrb	r3, [r3, #1]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f040 8093 	bne.w	8005f14 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005dfe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d01b      	beq.n	8005e42 <USB_ActivateEndpoint+0x52a>
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e20:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	441a      	add	r2, r3
 8005e2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005e50:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d01b      	beq.n	8005e92 <USB_ActivateEndpoint+0x57a>
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	881b      	ldrh	r3, [r3, #0]
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e70:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	441a      	add	r2, r3
 8005e7c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	881b      	ldrh	r3, [r3, #0]
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea8:	873b      	strh	r3, [r7, #56]	; 0x38
 8005eaa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005eac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005eb0:	873b      	strh	r3, [r7, #56]	; 0x38
 8005eb2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005eb4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005eb8:	873b      	strh	r3, [r7, #56]	; 0x38
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	441a      	add	r2, r3
 8005ec4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	4413      	add	r3, r2
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ef0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	441a      	add	r2, r3
 8005efc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005efe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	8013      	strh	r3, [r2, #0]
 8005f12:	e0bc      	b.n	800608e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005f24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d01d      	beq.n	8005f6c <USB_ActivateEndpoint+0x654>
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4413      	add	r3, r2
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f46:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	441a      	add	r2, r3
 8005f54:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005f7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d01d      	beq.n	8005fc4 <USB_ActivateEndpoint+0x6ac>
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	881b      	ldrh	r3, [r3, #0]
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f9e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	441a      	add	r2, r3
 8005fac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005fb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	78db      	ldrb	r3, [r3, #3]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d024      	beq.n	8006016 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4413      	add	r3, r2
 8005fd6:	881b      	ldrh	r3, [r3, #0]
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fe2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005fe6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005fea:	f083 0320 	eor.w	r3, r3, #32
 8005fee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	441a      	add	r2, r3
 8005ffc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006000:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006004:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800600c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006010:	b29b      	uxth	r3, r3
 8006012:	8013      	strh	r3, [r2, #0]
 8006014:	e01d      	b.n	8006052 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4413      	add	r3, r2
 8006020:	881b      	ldrh	r3, [r3, #0]
 8006022:	b29b      	uxth	r3, r3
 8006024:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800602c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	441a      	add	r2, r3
 800603a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800603e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006042:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800604a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800604e:	b29b      	uxth	r3, r3
 8006050:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	4413      	add	r3, r2
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	b29b      	uxth	r3, r3
 8006060:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006068:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	441a      	add	r2, r3
 8006076:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800607a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800607e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800608a:	b29b      	uxth	r3, r3
 800608c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800608e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006092:	4618      	mov	r0, r3
 8006094:	3774      	adds	r7, #116	; 0x74
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop

080060a0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b08d      	sub	sp, #52	; 0x34
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	7b1b      	ldrb	r3, [r3, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f040 808e 	bne.w	80061d0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	785b      	ldrb	r3, [r3, #1]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d044      	beq.n	8006146 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	81bb      	strh	r3, [r7, #12]
 80060ca:	89bb      	ldrh	r3, [r7, #12]
 80060cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d01b      	beq.n	800610c <USB_DeactivateEndpoint+0x6c>
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	881b      	ldrh	r3, [r3, #0]
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ea:	817b      	strh	r3, [r7, #10]
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	441a      	add	r2, r3
 80060f6:	897b      	ldrh	r3, [r7, #10]
 80060f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006100:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006104:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006108:	b29b      	uxth	r3, r3
 800610a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	881b      	ldrh	r3, [r3, #0]
 8006118:	b29b      	uxth	r3, r3
 800611a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800611e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006122:	813b      	strh	r3, [r7, #8]
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	441a      	add	r2, r3
 800612e:	893b      	ldrh	r3, [r7, #8]
 8006130:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006134:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800613c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006140:	b29b      	uxth	r3, r3
 8006142:	8013      	strh	r3, [r2, #0]
 8006144:	e192      	b.n	800646c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	881b      	ldrh	r3, [r3, #0]
 8006152:	827b      	strh	r3, [r7, #18]
 8006154:	8a7b      	ldrh	r3, [r7, #18]
 8006156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d01b      	beq.n	8006196 <USB_DeactivateEndpoint+0xf6>
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	b29b      	uxth	r3, r3
 800616c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006174:	823b      	strh	r3, [r7, #16]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	441a      	add	r2, r3
 8006180:	8a3b      	ldrh	r3, [r7, #16]
 8006182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800618a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800618e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006192:	b29b      	uxth	r3, r3
 8006194:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4413      	add	r3, r2
 80061a0:	881b      	ldrh	r3, [r3, #0]
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ac:	81fb      	strh	r3, [r7, #14]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	441a      	add	r2, r3
 80061b8:	89fb      	ldrh	r3, [r7, #14]
 80061ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	8013      	strh	r3, [r2, #0]
 80061ce:	e14d      	b.n	800646c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	785b      	ldrb	r3, [r3, #1]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f040 80a5 	bne.w	8006324 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	843b      	strh	r3, [r7, #32]
 80061e8:	8c3b      	ldrh	r3, [r7, #32]
 80061ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d01b      	beq.n	800622a <USB_DeactivateEndpoint+0x18a>
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	b29b      	uxth	r3, r3
 8006200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006208:	83fb      	strh	r3, [r7, #30]
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	441a      	add	r2, r3
 8006214:	8bfb      	ldrh	r3, [r7, #30]
 8006216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800621a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800621e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006226:	b29b      	uxth	r3, r3
 8006228:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	83bb      	strh	r3, [r7, #28]
 8006238:	8bbb      	ldrh	r3, [r7, #28]
 800623a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623e:	2b00      	cmp	r3, #0
 8006240:	d01b      	beq.n	800627a <USB_DeactivateEndpoint+0x1da>
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	b29b      	uxth	r3, r3
 8006250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006258:	837b      	strh	r3, [r7, #26]
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	441a      	add	r2, r3
 8006264:	8b7b      	ldrh	r3, [r7, #26]
 8006266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800626a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800626e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006272:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006276:	b29b      	uxth	r3, r3
 8006278:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	b29b      	uxth	r3, r3
 8006288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800628c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006290:	833b      	strh	r3, [r7, #24]
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	441a      	add	r2, r3
 800629c:	8b3b      	ldrh	r3, [r7, #24]
 800629e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	b29b      	uxth	r3, r3
 80062c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c8:	82fb      	strh	r3, [r7, #22]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	441a      	add	r2, r3
 80062d4:	8afb      	ldrh	r3, [r7, #22]
 80062d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006300:	82bb      	strh	r3, [r7, #20]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	441a      	add	r2, r3
 800630c:	8abb      	ldrh	r3, [r7, #20]
 800630e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006312:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800631a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800631e:	b29b      	uxth	r3, r3
 8006320:	8013      	strh	r3, [r2, #0]
 8006322:	e0a3      	b.n	800646c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006332:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d01b      	beq.n	8006374 <USB_DeactivateEndpoint+0x2d4>
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	b29b      	uxth	r3, r3
 800634a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800634e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006352:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	441a      	add	r2, r3
 800635e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006368:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800636c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006370:	b29b      	uxth	r3, r3
 8006372:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	881b      	ldrh	r3, [r3, #0]
 8006380:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006382:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006388:	2b00      	cmp	r3, #0
 800638a:	d01b      	beq.n	80063c4 <USB_DeactivateEndpoint+0x324>
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	881b      	ldrh	r3, [r3, #0]
 8006398:	b29b      	uxth	r3, r3
 800639a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800639e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a2:	853b      	strh	r3, [r7, #40]	; 0x28
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	441a      	add	r2, r3
 80063ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80063b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	4413      	add	r3, r2
 80063ce:	881b      	ldrh	r3, [r3, #0]
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063da:	84fb      	strh	r3, [r7, #38]	; 0x26
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	441a      	add	r2, r3
 80063e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	881b      	ldrh	r3, [r3, #0]
 8006408:	b29b      	uxth	r3, r3
 800640a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800640e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006412:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	441a      	add	r2, r3
 800641e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800642c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006430:	b29b      	uxth	r3, r3
 8006432:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4413      	add	r3, r2
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	b29b      	uxth	r3, r3
 8006442:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800644a:	847b      	strh	r3, [r7, #34]	; 0x22
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	441a      	add	r2, r3
 8006456:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006458:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800645c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006468:	b29b      	uxth	r3, r3
 800646a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3734      	adds	r7, #52	; 0x34
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b0c2      	sub	sp, #264	; 0x108
 800647e:	af00      	add	r7, sp, #0
 8006480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006484:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006488:	6018      	str	r0, [r3, #0]
 800648a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800648e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006492:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	785b      	ldrb	r3, [r3, #1]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	f040 86b7 	bne.w	8007214 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80064a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	699a      	ldr	r2, [r3, #24]
 80064b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d908      	bls.n	80064d4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80064c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064d2:	e007      	b.n	80064e4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80064d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80064e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	7b1b      	ldrb	r3, [r3, #12]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d13a      	bne.n	800656a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80064f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	6959      	ldr	r1, [r3, #20]
 8006500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	88da      	ldrh	r2, [r3, #6]
 800650c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006510:	b29b      	uxth	r3, r3
 8006512:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006516:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800651a:	6800      	ldr	r0, [r0, #0]
 800651c:	f001 fc8c 	bl	8007e38 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006524:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	613b      	str	r3, [r7, #16]
 800652c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006530:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800653a:	b29b      	uxth	r3, r3
 800653c:	461a      	mov	r2, r3
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	4413      	add	r3, r2
 8006542:	613b      	str	r3, [r7, #16]
 8006544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	011a      	lsls	r2, r3, #4
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	4413      	add	r3, r2
 8006556:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800655a:	60fb      	str	r3, [r7, #12]
 800655c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006560:	b29a      	uxth	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	801a      	strh	r2, [r3, #0]
 8006566:	f000 be1f 	b.w	80071a8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800656a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800656e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	78db      	ldrb	r3, [r3, #3]
 8006576:	2b02      	cmp	r3, #2
 8006578:	f040 8462 	bne.w	8006e40 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800657c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6a1a      	ldr	r2, [r3, #32]
 8006588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800658c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	429a      	cmp	r2, r3
 8006596:	f240 83df 	bls.w	8006d58 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800659a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800659e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	881b      	ldrh	r3, [r3, #0]
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80065c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	441a      	add	r2, r3
 80065de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80065e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ea:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80065ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80065f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6a1a      	ldr	r2, [r3, #32]
 8006602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006606:	1ad2      	subs	r2, r2, r3
 8006608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800660c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006618:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	b29b      	uxth	r3, r3
 8006632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006636:	2b00      	cmp	r3, #0
 8006638:	f000 81c7 	beq.w	80069ca <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800663c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006640:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	633b      	str	r3, [r7, #48]	; 0x30
 8006648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800664c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	785b      	ldrb	r3, [r3, #1]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d177      	bne.n	8006748 <USB_EPStartXfer+0x2ce>
 8006658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800665c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	62bb      	str	r3, [r7, #40]	; 0x28
 8006664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006668:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006672:	b29b      	uxth	r3, r3
 8006674:	461a      	mov	r2, r3
 8006676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006678:	4413      	add	r3, r2
 800667a:	62bb      	str	r3, [r7, #40]	; 0x28
 800667c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	011a      	lsls	r2, r3, #4
 800668a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668c:	4413      	add	r3, r2
 800668e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006692:	627b      	str	r3, [r7, #36]	; 0x24
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	881b      	ldrh	r3, [r3, #0]
 8006698:	b29b      	uxth	r3, r3
 800669a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800669e:	b29a      	uxth	r2, r3
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	801a      	strh	r2, [r3, #0]
 80066a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a8:	2b3e      	cmp	r3, #62	; 0x3e
 80066aa:	d921      	bls.n	80066f0 <USB_EPStartXfer+0x276>
 80066ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066b0:	095b      	lsrs	r3, r3, #5
 80066b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80066b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ba:	f003 031f 	and.w	r3, r3, #31
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d104      	bne.n	80066cc <USB_EPStartXfer+0x252>
 80066c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80066c6:	3b01      	subs	r3, #1
 80066c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	881b      	ldrh	r3, [r3, #0]
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	029b      	lsls	r3, r3, #10
 80066da:	b29b      	uxth	r3, r3
 80066dc:	4313      	orrs	r3, r2
 80066de:	b29b      	uxth	r3, r3
 80066e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	801a      	strh	r2, [r3, #0]
 80066ee:	e050      	b.n	8006792 <USB_EPStartXfer+0x318>
 80066f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10a      	bne.n	800670e <USB_EPStartXfer+0x294>
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006706:	b29a      	uxth	r2, r3
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	801a      	strh	r2, [r3, #0]
 800670c:	e041      	b.n	8006792 <USB_EPStartXfer+0x318>
 800670e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006712:	085b      	lsrs	r3, r3, #1
 8006714:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d004      	beq.n	800672e <USB_EPStartXfer+0x2b4>
 8006724:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006728:	3301      	adds	r3, #1
 800672a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	b29a      	uxth	r2, r3
 8006734:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006738:	b29b      	uxth	r3, r3
 800673a:	029b      	lsls	r3, r3, #10
 800673c:	b29b      	uxth	r3, r3
 800673e:	4313      	orrs	r3, r2
 8006740:	b29a      	uxth	r2, r3
 8006742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006744:	801a      	strh	r2, [r3, #0]
 8006746:	e024      	b.n	8006792 <USB_EPStartXfer+0x318>
 8006748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800674c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	785b      	ldrb	r3, [r3, #1]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d11c      	bne.n	8006792 <USB_EPStartXfer+0x318>
 8006758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006766:	b29b      	uxth	r3, r3
 8006768:	461a      	mov	r2, r3
 800676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676c:	4413      	add	r3, r2
 800676e:	633b      	str	r3, [r7, #48]	; 0x30
 8006770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006774:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	011a      	lsls	r2, r3, #4
 800677e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006780:	4413      	add	r3, r2
 8006782:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800678c:	b29a      	uxth	r2, r3
 800678e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006790:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	895b      	ldrh	r3, [r3, #10]
 800679e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6959      	ldr	r1, [r3, #20]
 80067ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80067b8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80067bc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80067c0:	6800      	ldr	r0, [r0, #0]
 80067c2:	f001 fb39 	bl	8007e38 <USB_WritePMA>
            ep->xfer_buff += len;
 80067c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	695a      	ldr	r2, [r3, #20]
 80067d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067d6:	441a      	add	r2, r3
 80067d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80067e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	6a1a      	ldr	r2, [r3, #32]
 80067f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d90f      	bls.n	8006820 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6a1a      	ldr	r2, [r3, #32]
 800680c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006810:	1ad2      	subs	r2, r2, r3
 8006812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	621a      	str	r2, [r3, #32]
 800681e:	e00e      	b.n	800683e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2200      	movs	r2, #0
 800683c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800683e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	785b      	ldrb	r3, [r3, #1]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d177      	bne.n	800693e <USB_EPStartXfer+0x4c4>
 800684e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006852:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	61bb      	str	r3, [r7, #24]
 800685a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006868:	b29b      	uxth	r3, r3
 800686a:	461a      	mov	r2, r3
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	4413      	add	r3, r2
 8006870:	61bb      	str	r3, [r7, #24]
 8006872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	011a      	lsls	r2, r3, #4
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	4413      	add	r3, r2
 8006884:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006888:	617b      	str	r3, [r7, #20]
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	b29b      	uxth	r3, r3
 8006890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006894:	b29a      	uxth	r2, r3
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	801a      	strh	r2, [r3, #0]
 800689a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800689e:	2b3e      	cmp	r3, #62	; 0x3e
 80068a0:	d921      	bls.n	80068e6 <USB_EPStartXfer+0x46c>
 80068a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068a6:	095b      	lsrs	r3, r3, #5
 80068a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80068ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068b0:	f003 031f 	and.w	r3, r3, #31
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d104      	bne.n	80068c2 <USB_EPStartXfer+0x448>
 80068b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068bc:	3b01      	subs	r3, #1
 80068be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	881b      	ldrh	r3, [r3, #0]
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	029b      	lsls	r3, r3, #10
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	4313      	orrs	r3, r2
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068de:	b29a      	uxth	r2, r3
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	801a      	strh	r2, [r3, #0]
 80068e4:	e056      	b.n	8006994 <USB_EPStartXfer+0x51a>
 80068e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10a      	bne.n	8006904 <USB_EPStartXfer+0x48a>
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	881b      	ldrh	r3, [r3, #0]
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	801a      	strh	r2, [r3, #0]
 8006902:	e047      	b.n	8006994 <USB_EPStartXfer+0x51a>
 8006904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006908:	085b      	lsrs	r3, r3, #1
 800690a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800690e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d004      	beq.n	8006924 <USB_EPStartXfer+0x4aa>
 800691a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800691e:	3301      	adds	r3, #1
 8006920:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	b29a      	uxth	r2, r3
 800692a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800692e:	b29b      	uxth	r3, r3
 8006930:	029b      	lsls	r3, r3, #10
 8006932:	b29b      	uxth	r3, r3
 8006934:	4313      	orrs	r3, r2
 8006936:	b29a      	uxth	r2, r3
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	801a      	strh	r2, [r3, #0]
 800693c:	e02a      	b.n	8006994 <USB_EPStartXfer+0x51a>
 800693e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	785b      	ldrb	r3, [r3, #1]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d122      	bne.n	8006994 <USB_EPStartXfer+0x51a>
 800694e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006952:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	623b      	str	r3, [r7, #32]
 800695a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800695e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006968:	b29b      	uxth	r3, r3
 800696a:	461a      	mov	r2, r3
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	4413      	add	r3, r2
 8006970:	623b      	str	r3, [r7, #32]
 8006972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	011a      	lsls	r2, r3, #4
 8006980:	6a3b      	ldr	r3, [r7, #32]
 8006982:	4413      	add	r3, r2
 8006984:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006988:	61fb      	str	r3, [r7, #28]
 800698a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800698e:	b29a      	uxth	r2, r3
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	891b      	ldrh	r3, [r3, #8]
 80069a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6959      	ldr	r1, [r3, #20]
 80069b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80069ba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80069be:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80069c2:	6800      	ldr	r0, [r0, #0]
 80069c4:	f001 fa38 	bl	8007e38 <USB_WritePMA>
 80069c8:	e3ee      	b.n	80071a8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	785b      	ldrb	r3, [r3, #1]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d177      	bne.n	8006aca <USB_EPStartXfer+0x650>
 80069da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80069e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	461a      	mov	r2, r3
 80069f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069fa:	4413      	add	r3, r2
 80069fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80069fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	011a      	lsls	r2, r3, #4
 8006a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a0e:	4413      	add	r3, r2
 8006a10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a14:	647b      	str	r3, [r7, #68]	; 0x44
 8006a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a24:	801a      	strh	r2, [r3, #0]
 8006a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a2a:	2b3e      	cmp	r3, #62	; 0x3e
 8006a2c:	d921      	bls.n	8006a72 <USB_EPStartXfer+0x5f8>
 8006a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a32:	095b      	lsrs	r3, r3, #5
 8006a34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a3c:	f003 031f 	and.w	r3, r3, #31
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d104      	bne.n	8006a4e <USB_EPStartXfer+0x5d4>
 8006a44:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	029b      	lsls	r3, r3, #10
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a6e:	801a      	strh	r2, [r3, #0]
 8006a70:	e056      	b.n	8006b20 <USB_EPStartXfer+0x6a6>
 8006a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10a      	bne.n	8006a90 <USB_EPStartXfer+0x616>
 8006a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a8c:	801a      	strh	r2, [r3, #0]
 8006a8e:	e047      	b.n	8006b20 <USB_EPStartXfer+0x6a6>
 8006a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a94:	085b      	lsrs	r3, r3, #1
 8006a96:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d004      	beq.n	8006ab0 <USB_EPStartXfer+0x636>
 8006aa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006aaa:	3301      	adds	r3, #1
 8006aac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	029b      	lsls	r3, r3, #10
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ac6:	801a      	strh	r2, [r3, #0]
 8006ac8:	e02a      	b.n	8006b20 <USB_EPStartXfer+0x6a6>
 8006aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ace:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	785b      	ldrb	r3, [r3, #1]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d122      	bne.n	8006b20 <USB_EPStartXfer+0x6a6>
 8006ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ade:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	653b      	str	r3, [r7, #80]	; 0x50
 8006ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	461a      	mov	r2, r3
 8006af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006afa:	4413      	add	r3, r2
 8006afc:	653b      	str	r3, [r7, #80]	; 0x50
 8006afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	011a      	lsls	r2, r3, #4
 8006b0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b0e:	4413      	add	r3, r2
 8006b10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b1e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	891b      	ldrh	r3, [r3, #8]
 8006b2c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6959      	ldr	r1, [r3, #20]
 8006b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006b46:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006b4a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006b4e:	6800      	ldr	r0, [r0, #0]
 8006b50:	f001 f972 	bl	8007e38 <USB_WritePMA>
            ep->xfer_buff += len;
 8006b54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	695a      	ldr	r2, [r3, #20]
 8006b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b64:	441a      	add	r2, r3
 8006b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	6a1a      	ldr	r2, [r3, #32]
 8006b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d90f      	bls.n	8006bae <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6a1a      	ldr	r2, [r3, #32]
 8006b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b9e:	1ad2      	subs	r2, r2, r3
 8006ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	621a      	str	r2, [r3, #32]
 8006bac:	e00e      	b.n	8006bcc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	643b      	str	r3, [r7, #64]	; 0x40
 8006bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	785b      	ldrb	r3, [r3, #1]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d177      	bne.n	8006cd8 <USB_EPStartXfer+0x85e>
 8006be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	461a      	mov	r2, r3
 8006c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c08:	4413      	add	r3, r2
 8006c0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	011a      	lsls	r2, r3, #4
 8006c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c22:	637b      	str	r3, [r7, #52]	; 0x34
 8006c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c26:	881b      	ldrh	r3, [r3, #0]
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c32:	801a      	strh	r2, [r3, #0]
 8006c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c38:	2b3e      	cmp	r3, #62	; 0x3e
 8006c3a:	d921      	bls.n	8006c80 <USB_EPStartXfer+0x806>
 8006c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c40:	095b      	lsrs	r3, r3, #5
 8006c42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c4a:	f003 031f 	and.w	r3, r3, #31
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d104      	bne.n	8006c5c <USB_EPStartXfer+0x7e2>
 8006c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c56:	3b01      	subs	r3, #1
 8006c58:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c5e:	881b      	ldrh	r3, [r3, #0]
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	029b      	lsls	r3, r3, #10
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c7c:	801a      	strh	r2, [r3, #0]
 8006c7e:	e050      	b.n	8006d22 <USB_EPStartXfer+0x8a8>
 8006c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10a      	bne.n	8006c9e <USB_EPStartXfer+0x824>
 8006c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c9a:	801a      	strh	r2, [r3, #0]
 8006c9c:	e041      	b.n	8006d22 <USB_EPStartXfer+0x8a8>
 8006c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca2:	085b      	lsrs	r3, r3, #1
 8006ca4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d004      	beq.n	8006cbe <USB_EPStartXfer+0x844>
 8006cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb8:	3301      	adds	r3, #1
 8006cba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	029b      	lsls	r3, r3, #10
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd4:	801a      	strh	r2, [r3, #0]
 8006cd6:	e024      	b.n	8006d22 <USB_EPStartXfer+0x8a8>
 8006cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	785b      	ldrb	r3, [r3, #1]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d11c      	bne.n	8006d22 <USB_EPStartXfer+0x8a8>
 8006ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cfc:	4413      	add	r3, r2
 8006cfe:	643b      	str	r3, [r7, #64]	; 0x40
 8006d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	011a      	lsls	r2, r3, #4
 8006d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d10:	4413      	add	r3, r2
 8006d12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	895b      	ldrh	r3, [r3, #10]
 8006d2e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6959      	ldr	r1, [r3, #20]
 8006d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006d48:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006d4c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006d50:	6800      	ldr	r0, [r0, #0]
 8006d52:	f001 f871 	bl	8007e38 <USB_WritePMA>
 8006d56:	e227      	b.n	80071a8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d8e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	441a      	add	r2, r3
 8006dac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006db0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006db4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006db8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	461a      	mov	r2, r3
 8006de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006de4:	4413      	add	r3, r2
 8006de6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	011a      	lsls	r2, r3, #4
 8006df6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006df8:	4413      	add	r3, r2
 8006dfa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006dfe:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e08:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	891b      	ldrh	r3, [r3, #8]
 8006e16:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6959      	ldr	r1, [r3, #20]
 8006e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e30:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006e34:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006e38:	6800      	ldr	r0, [r0, #0]
 8006e3a:	f000 fffd 	bl	8007e38 <USB_WritePMA>
 8006e3e:	e1b3      	b.n	80071a8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	6a1a      	ldr	r2, [r3, #32]
 8006e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e50:	1ad2      	subs	r2, r2, r3
 8006e52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4413      	add	r3, r2
 8006e78:	881b      	ldrh	r3, [r3, #0]
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f000 80c6 	beq.w	8007012 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	673b      	str	r3, [r7, #112]	; 0x70
 8006e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	785b      	ldrb	r3, [r3, #1]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d177      	bne.n	8006f92 <USB_EPStartXfer+0xb18>
 8006ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	66bb      	str	r3, [r7, #104]	; 0x68
 8006eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ec2:	4413      	add	r3, r2
 8006ec4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	011a      	lsls	r2, r3, #4
 8006ed4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006edc:	667b      	str	r3, [r7, #100]	; 0x64
 8006ede:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006eec:	801a      	strh	r2, [r3, #0]
 8006eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef2:	2b3e      	cmp	r3, #62	; 0x3e
 8006ef4:	d921      	bls.n	8006f3a <USB_EPStartXfer+0xac0>
 8006ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006efa:	095b      	lsrs	r3, r3, #5
 8006efc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f04:	f003 031f 	and.w	r3, r3, #31
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d104      	bne.n	8006f16 <USB_EPStartXfer+0xa9c>
 8006f0c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f10:	3b01      	subs	r3, #1
 8006f12:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f18:	881b      	ldrh	r3, [r3, #0]
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	029b      	lsls	r3, r3, #10
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	4313      	orrs	r3, r2
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f36:	801a      	strh	r2, [r3, #0]
 8006f38:	e050      	b.n	8006fdc <USB_EPStartXfer+0xb62>
 8006f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10a      	bne.n	8006f58 <USB_EPStartXfer+0xade>
 8006f42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f54:	801a      	strh	r2, [r3, #0]
 8006f56:	e041      	b.n	8006fdc <USB_EPStartXfer+0xb62>
 8006f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f5c:	085b      	lsrs	r3, r3, #1
 8006f5e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d004      	beq.n	8006f78 <USB_EPStartXfer+0xafe>
 8006f6e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f72:	3301      	adds	r3, #1
 8006f74:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f7a:	881b      	ldrh	r3, [r3, #0]
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	029b      	lsls	r3, r3, #10
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f8e:	801a      	strh	r2, [r3, #0]
 8006f90:	e024      	b.n	8006fdc <USB_EPStartXfer+0xb62>
 8006f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	785b      	ldrb	r3, [r3, #1]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d11c      	bne.n	8006fdc <USB_EPStartXfer+0xb62>
 8006fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fb6:	4413      	add	r3, r2
 8006fb8:	673b      	str	r3, [r7, #112]	; 0x70
 8006fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	011a      	lsls	r2, r3, #4
 8006fc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fca:	4413      	add	r3, r2
 8006fcc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006fd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fda:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	895b      	ldrh	r3, [r3, #10]
 8006fe8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	6959      	ldr	r1, [r3, #20]
 8006ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007002:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007006:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800700a:	6800      	ldr	r0, [r0, #0]
 800700c:	f000 ff14 	bl	8007e38 <USB_WritePMA>
 8007010:	e0ca      	b.n	80071a8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007016:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	785b      	ldrb	r3, [r3, #1]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d177      	bne.n	8007112 <USB_EPStartXfer+0xc98>
 8007022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007026:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800702e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007032:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800703c:	b29b      	uxth	r3, r3
 800703e:	461a      	mov	r2, r3
 8007040:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007042:	4413      	add	r3, r2
 8007044:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800704a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	011a      	lsls	r2, r3, #4
 8007054:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007056:	4413      	add	r3, r2
 8007058:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800705c:	67bb      	str	r3, [r7, #120]	; 0x78
 800705e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	b29b      	uxth	r3, r3
 8007064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007068:	b29a      	uxth	r2, r3
 800706a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800706c:	801a      	strh	r2, [r3, #0]
 800706e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007072:	2b3e      	cmp	r3, #62	; 0x3e
 8007074:	d921      	bls.n	80070ba <USB_EPStartXfer+0xc40>
 8007076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800707a:	095b      	lsrs	r3, r3, #5
 800707c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007084:	f003 031f 	and.w	r3, r3, #31
 8007088:	2b00      	cmp	r3, #0
 800708a:	d104      	bne.n	8007096 <USB_EPStartXfer+0xc1c>
 800708c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007090:	3b01      	subs	r3, #1
 8007092:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007096:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007098:	881b      	ldrh	r3, [r3, #0]
 800709a:	b29a      	uxth	r2, r3
 800709c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	029b      	lsls	r3, r3, #10
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	4313      	orrs	r3, r2
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070b6:	801a      	strh	r2, [r3, #0]
 80070b8:	e05c      	b.n	8007174 <USB_EPStartXfer+0xcfa>
 80070ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10a      	bne.n	80070d8 <USB_EPStartXfer+0xc5e>
 80070c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070d4:	801a      	strh	r2, [r3, #0]
 80070d6:	e04d      	b.n	8007174 <USB_EPStartXfer+0xcfa>
 80070d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070dc:	085b      	lsrs	r3, r3, #1
 80070de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80070e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d004      	beq.n	80070f8 <USB_EPStartXfer+0xc7e>
 80070ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80070f2:	3301      	adds	r3, #1
 80070f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80070f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070fa:	881b      	ldrh	r3, [r3, #0]
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007102:	b29b      	uxth	r3, r3
 8007104:	029b      	lsls	r3, r3, #10
 8007106:	b29b      	uxth	r3, r3
 8007108:	4313      	orrs	r3, r2
 800710a:	b29a      	uxth	r2, r3
 800710c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800710e:	801a      	strh	r2, [r3, #0]
 8007110:	e030      	b.n	8007174 <USB_EPStartXfer+0xcfa>
 8007112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	785b      	ldrb	r3, [r3, #1]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d128      	bne.n	8007174 <USB_EPStartXfer+0xcfa>
 8007122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007126:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007134:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800713e:	b29b      	uxth	r3, r3
 8007140:	461a      	mov	r2, r3
 8007142:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007146:	4413      	add	r3, r2
 8007148:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800714c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	011a      	lsls	r2, r3, #4
 800715a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800715e:	4413      	add	r3, r2
 8007160:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007164:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800716c:	b29a      	uxth	r2, r3
 800716e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007172:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	891b      	ldrh	r3, [r3, #8]
 8007180:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	6959      	ldr	r1, [r3, #20]
 8007190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007194:	b29b      	uxth	r3, r3
 8007196:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800719a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800719e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80071a2:	6800      	ldr	r0, [r0, #0]
 80071a4:	f000 fe48 	bl	8007e38 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80071a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4413      	add	r3, r2
 80071c2:	881b      	ldrh	r3, [r3, #0]
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071ce:	817b      	strh	r3, [r7, #10]
 80071d0:	897b      	ldrh	r3, [r7, #10]
 80071d2:	f083 0310 	eor.w	r3, r3, #16
 80071d6:	817b      	strh	r3, [r7, #10]
 80071d8:	897b      	ldrh	r3, [r7, #10]
 80071da:	f083 0320 	eor.w	r3, r3, #32
 80071de:	817b      	strh	r3, [r7, #10]
 80071e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	441a      	add	r2, r3
 80071fa:	897b      	ldrh	r3, [r7, #10]
 80071fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007200:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800720c:	b29b      	uxth	r3, r3
 800720e:	8013      	strh	r3, [r2, #0]
 8007210:	f000 bcde 	b.w	8007bd0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007218:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	7b1b      	ldrb	r3, [r3, #12]
 8007220:	2b00      	cmp	r3, #0
 8007222:	f040 80bb 	bne.w	800739c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800722a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	699a      	ldr	r2, [r3, #24]
 8007232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	429a      	cmp	r2, r3
 8007240:	d917      	bls.n	8007272 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	699a      	ldr	r2, [r3, #24]
 800725e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007262:	1ad2      	subs	r2, r2, r3
 8007264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	619a      	str	r2, [r3, #24]
 8007270:	e00e      	b.n	8007290 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2200      	movs	r2, #0
 800728e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007294:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800729e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	461a      	mov	r2, r3
 80072b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072b4:	4413      	add	r3, r2
 80072b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	011a      	lsls	r2, r3, #4
 80072c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072cc:	4413      	add	r3, r2
 80072ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80072d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072da:	881b      	ldrh	r3, [r3, #0]
 80072dc:	b29b      	uxth	r3, r3
 80072de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072e8:	801a      	strh	r2, [r3, #0]
 80072ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ee:	2b3e      	cmp	r3, #62	; 0x3e
 80072f0:	d924      	bls.n	800733c <USB_EPStartXfer+0xec2>
 80072f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072f6:	095b      	lsrs	r3, r3, #5
 80072f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80072fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007300:	f003 031f 	and.w	r3, r3, #31
 8007304:	2b00      	cmp	r3, #0
 8007306:	d104      	bne.n	8007312 <USB_EPStartXfer+0xe98>
 8007308:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800730c:	3b01      	subs	r3, #1
 800730e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007312:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	b29a      	uxth	r2, r3
 800731a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800731e:	b29b      	uxth	r3, r3
 8007320:	029b      	lsls	r3, r3, #10
 8007322:	b29b      	uxth	r3, r3
 8007324:	4313      	orrs	r3, r2
 8007326:	b29b      	uxth	r3, r3
 8007328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800732c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007330:	b29a      	uxth	r2, r3
 8007332:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007336:	801a      	strh	r2, [r3, #0]
 8007338:	f000 bc10 	b.w	8007b5c <USB_EPStartXfer+0x16e2>
 800733c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10c      	bne.n	800735e <USB_EPStartXfer+0xee4>
 8007344:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007348:	881b      	ldrh	r3, [r3, #0]
 800734a:	b29b      	uxth	r3, r3
 800734c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007354:	b29a      	uxth	r2, r3
 8007356:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800735a:	801a      	strh	r2, [r3, #0]
 800735c:	e3fe      	b.n	8007b5c <USB_EPStartXfer+0x16e2>
 800735e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007362:	085b      	lsrs	r3, r3, #1
 8007364:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800736c:	f003 0301 	and.w	r3, r3, #1
 8007370:	2b00      	cmp	r3, #0
 8007372:	d004      	beq.n	800737e <USB_EPStartXfer+0xf04>
 8007374:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007378:	3301      	adds	r3, #1
 800737a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800737e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007382:	881b      	ldrh	r3, [r3, #0]
 8007384:	b29a      	uxth	r2, r3
 8007386:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800738a:	b29b      	uxth	r3, r3
 800738c:	029b      	lsls	r3, r3, #10
 800738e:	b29b      	uxth	r3, r3
 8007390:	4313      	orrs	r3, r2
 8007392:	b29a      	uxth	r2, r3
 8007394:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007398:	801a      	strh	r2, [r3, #0]
 800739a:	e3df      	b.n	8007b5c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800739c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	78db      	ldrb	r3, [r3, #3]
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	f040 8218 	bne.w	80077de <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80073ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	785b      	ldrb	r3, [r3, #1]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f040 809d 	bne.w	80074fa <USB_EPStartXfer+0x1080>
 80073c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80073ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073dc:	b29b      	uxth	r3, r3
 80073de:	461a      	mov	r2, r3
 80073e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073e4:	4413      	add	r3, r2
 80073e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80073ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	011a      	lsls	r2, r3, #4
 80073f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073fc:	4413      	add	r3, r2
 80073fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007402:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007406:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800740a:	881b      	ldrh	r3, [r3, #0]
 800740c:	b29b      	uxth	r3, r3
 800740e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007412:	b29a      	uxth	r2, r3
 8007414:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007418:	801a      	strh	r2, [r3, #0]
 800741a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800741e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	2b3e      	cmp	r3, #62	; 0x3e
 8007428:	d92b      	bls.n	8007482 <USB_EPStartXfer+0x1008>
 800742a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800742e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	095b      	lsrs	r3, r3, #5
 8007438:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800743c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	f003 031f 	and.w	r3, r3, #31
 800744c:	2b00      	cmp	r3, #0
 800744e:	d104      	bne.n	800745a <USB_EPStartXfer+0xfe0>
 8007450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007454:	3b01      	subs	r3, #1
 8007456:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800745a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800745e:	881b      	ldrh	r3, [r3, #0]
 8007460:	b29a      	uxth	r2, r3
 8007462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007466:	b29b      	uxth	r3, r3
 8007468:	029b      	lsls	r3, r3, #10
 800746a:	b29b      	uxth	r3, r3
 800746c:	4313      	orrs	r3, r2
 800746e:	b29b      	uxth	r3, r3
 8007470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007478:	b29a      	uxth	r2, r3
 800747a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800747e:	801a      	strh	r2, [r3, #0]
 8007480:	e070      	b.n	8007564 <USB_EPStartXfer+0x10ea>
 8007482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10c      	bne.n	80074ac <USB_EPStartXfer+0x1032>
 8007492:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007496:	881b      	ldrh	r3, [r3, #0]
 8007498:	b29b      	uxth	r3, r3
 800749a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800749e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074a8:	801a      	strh	r2, [r3, #0]
 80074aa:	e05b      	b.n	8007564 <USB_EPStartXfer+0x10ea>
 80074ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	085b      	lsrs	r3, r3, #1
 80074ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80074be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d004      	beq.n	80074dc <USB_EPStartXfer+0x1062>
 80074d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074d6:	3301      	adds	r3, #1
 80074d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80074dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074e0:	881b      	ldrh	r3, [r3, #0]
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	029b      	lsls	r3, r3, #10
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	4313      	orrs	r3, r2
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074f6:	801a      	strh	r2, [r3, #0]
 80074f8:	e034      	b.n	8007564 <USB_EPStartXfer+0x10ea>
 80074fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	785b      	ldrb	r3, [r3, #1]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d12c      	bne.n	8007564 <USB_EPStartXfer+0x10ea>
 800750a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800750e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800751c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007526:	b29b      	uxth	r3, r3
 8007528:	461a      	mov	r2, r3
 800752a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800752e:	4413      	add	r3, r2
 8007530:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	011a      	lsls	r2, r3, #4
 8007542:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007546:	4413      	add	r3, r2
 8007548:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800754c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	b29a      	uxth	r2, r3
 800755e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007562:	801a      	strh	r2, [r3, #0]
 8007564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007568:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	785b      	ldrb	r3, [r3, #1]
 800757e:	2b00      	cmp	r3, #0
 8007580:	f040 809d 	bne.w	80076be <USB_EPStartXfer+0x1244>
 8007584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007588:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007596:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	461a      	mov	r2, r3
 80075a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075a8:	4413      	add	r3, r2
 80075aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	011a      	lsls	r2, r3, #4
 80075bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075c0:	4413      	add	r3, r2
 80075c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075ce:	881b      	ldrh	r3, [r3, #0]
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075dc:	801a      	strh	r2, [r3, #0]
 80075de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	2b3e      	cmp	r3, #62	; 0x3e
 80075ec:	d92b      	bls.n	8007646 <USB_EPStartXfer+0x11cc>
 80075ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	095b      	lsrs	r3, r3, #5
 80075fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	f003 031f 	and.w	r3, r3, #31
 8007610:	2b00      	cmp	r3, #0
 8007612:	d104      	bne.n	800761e <USB_EPStartXfer+0x11a4>
 8007614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007618:	3b01      	subs	r3, #1
 800761a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800761e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	b29a      	uxth	r2, r3
 8007626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800762a:	b29b      	uxth	r3, r3
 800762c:	029b      	lsls	r3, r3, #10
 800762e:	b29b      	uxth	r3, r3
 8007630:	4313      	orrs	r3, r2
 8007632:	b29b      	uxth	r3, r3
 8007634:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007638:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800763c:	b29a      	uxth	r2, r3
 800763e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007642:	801a      	strh	r2, [r3, #0]
 8007644:	e069      	b.n	800771a <USB_EPStartXfer+0x12a0>
 8007646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800764a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10c      	bne.n	8007670 <USB_EPStartXfer+0x11f6>
 8007656:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800765a:	881b      	ldrh	r3, [r3, #0]
 800765c:	b29b      	uxth	r3, r3
 800765e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007666:	b29a      	uxth	r2, r3
 8007668:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800766c:	801a      	strh	r2, [r3, #0]
 800766e:	e054      	b.n	800771a <USB_EPStartXfer+0x12a0>
 8007670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007674:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	085b      	lsrs	r3, r3, #1
 800767e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	f003 0301 	and.w	r3, r3, #1
 8007692:	2b00      	cmp	r3, #0
 8007694:	d004      	beq.n	80076a0 <USB_EPStartXfer+0x1226>
 8007696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800769a:	3301      	adds	r3, #1
 800769c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80076a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076a4:	881b      	ldrh	r3, [r3, #0]
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	029b      	lsls	r3, r3, #10
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	4313      	orrs	r3, r2
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076ba:	801a      	strh	r2, [r3, #0]
 80076bc:	e02d      	b.n	800771a <USB_EPStartXfer+0x12a0>
 80076be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	785b      	ldrb	r3, [r3, #1]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d125      	bne.n	800771a <USB_EPStartXfer+0x12a0>
 80076ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076dc:	b29b      	uxth	r3, r3
 80076de:	461a      	mov	r2, r3
 80076e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80076e4:	4413      	add	r3, r2
 80076e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80076ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	011a      	lsls	r2, r3, #4
 80076f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80076fc:	4413      	add	r3, r2
 80076fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007702:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800770a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	b29a      	uxth	r2, r3
 8007714:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007718:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800771a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800771e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	69db      	ldr	r3, [r3, #28]
 8007726:	2b00      	cmp	r3, #0
 8007728:	f000 8218 	beq.w	8007b5c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800772c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007730:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800773a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4413      	add	r3, r2
 8007746:	881b      	ldrh	r3, [r3, #0]
 8007748:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800774c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d005      	beq.n	8007764 <USB_EPStartXfer+0x12ea>
 8007758:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800775c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10d      	bne.n	8007780 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007764:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800776c:	2b00      	cmp	r3, #0
 800776e:	f040 81f5 	bne.w	8007b5c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007772:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777a:	2b00      	cmp	r3, #0
 800777c:	f040 81ee 	bne.w	8007b5c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007784:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800778e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	881b      	ldrh	r3, [r3, #0]
 800779c:	b29b      	uxth	r3, r3
 800779e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077a6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80077aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	441a      	add	r2, r3
 80077c4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80077c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80077d8:	b29b      	uxth	r3, r3
 80077da:	8013      	strh	r3, [r2, #0]
 80077dc:	e1be      	b.n	8007b5c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80077de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	78db      	ldrb	r3, [r3, #3]
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	f040 81b4 	bne.w	8007b58 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80077f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	699a      	ldr	r2, [r3, #24]
 80077fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	429a      	cmp	r2, r3
 800780a:	d917      	bls.n	800783c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800780c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800781c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	699a      	ldr	r2, [r3, #24]
 8007828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800782c:	1ad2      	subs	r2, r2, r3
 800782e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	619a      	str	r2, [r3, #24]
 800783a:	e00e      	b.n	800785a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800783c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800784c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2200      	movs	r2, #0
 8007858:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800785a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800785e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	785b      	ldrb	r3, [r3, #1]
 8007866:	2b00      	cmp	r3, #0
 8007868:	f040 8085 	bne.w	8007976 <USB_EPStartXfer+0x14fc>
 800786c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007870:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800787a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800787e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007888:	b29b      	uxth	r3, r3
 800788a:	461a      	mov	r2, r3
 800788c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007890:	4413      	add	r3, r2
 8007892:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800789a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	011a      	lsls	r2, r3, #4
 80078a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80078a8:	4413      	add	r3, r2
 80078aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078b6:	881b      	ldrh	r3, [r3, #0]
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078be:	b29a      	uxth	r2, r3
 80078c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078c4:	801a      	strh	r2, [r3, #0]
 80078c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ca:	2b3e      	cmp	r3, #62	; 0x3e
 80078cc:	d923      	bls.n	8007916 <USB_EPStartXfer+0x149c>
 80078ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078d2:	095b      	lsrs	r3, r3, #5
 80078d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80078d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078dc:	f003 031f 	and.w	r3, r3, #31
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d104      	bne.n	80078ee <USB_EPStartXfer+0x1474>
 80078e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078e8:	3b01      	subs	r3, #1
 80078ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80078ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078f2:	881b      	ldrh	r3, [r3, #0]
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	029b      	lsls	r3, r3, #10
 80078fe:	b29b      	uxth	r3, r3
 8007900:	4313      	orrs	r3, r2
 8007902:	b29b      	uxth	r3, r3
 8007904:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007908:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800790c:	b29a      	uxth	r2, r3
 800790e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007912:	801a      	strh	r2, [r3, #0]
 8007914:	e060      	b.n	80079d8 <USB_EPStartXfer+0x155e>
 8007916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10c      	bne.n	8007938 <USB_EPStartXfer+0x14be>
 800791e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	b29b      	uxth	r3, r3
 8007926:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800792a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800792e:	b29a      	uxth	r2, r3
 8007930:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007934:	801a      	strh	r2, [r3, #0]
 8007936:	e04f      	b.n	80079d8 <USB_EPStartXfer+0x155e>
 8007938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800793c:	085b      	lsrs	r3, r3, #1
 800793e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	2b00      	cmp	r3, #0
 800794c:	d004      	beq.n	8007958 <USB_EPStartXfer+0x14de>
 800794e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007952:	3301      	adds	r3, #1
 8007954:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007958:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	b29a      	uxth	r2, r3
 8007960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007964:	b29b      	uxth	r3, r3
 8007966:	029b      	lsls	r3, r3, #10
 8007968:	b29b      	uxth	r3, r3
 800796a:	4313      	orrs	r3, r2
 800796c:	b29a      	uxth	r2, r3
 800796e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007972:	801a      	strh	r2, [r3, #0]
 8007974:	e030      	b.n	80079d8 <USB_EPStartXfer+0x155e>
 8007976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800797a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	785b      	ldrb	r3, [r3, #1]
 8007982:	2b01      	cmp	r3, #1
 8007984:	d128      	bne.n	80079d8 <USB_EPStartXfer+0x155e>
 8007986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800798a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007998:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	461a      	mov	r2, r3
 80079a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079aa:	4413      	add	r3, r2
 80079ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80079b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	011a      	lsls	r2, r3, #4
 80079be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079c2:	4413      	add	r3, r2
 80079c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80079d6:	801a      	strh	r2, [r3, #0]
 80079d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	785b      	ldrb	r3, [r3, #1]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	f040 8085 	bne.w	8007b02 <USB_EPStartXfer+0x1688>
 80079f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	461a      	mov	r2, r3
 8007a18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	011a      	lsls	r2, r3, #4
 8007a30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a34:	4413      	add	r3, r2
 8007a36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a42:	881b      	ldrh	r3, [r3, #0]
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a50:	801a      	strh	r2, [r3, #0]
 8007a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a56:	2b3e      	cmp	r3, #62	; 0x3e
 8007a58:	d923      	bls.n	8007aa2 <USB_EPStartXfer+0x1628>
 8007a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a5e:	095b      	lsrs	r3, r3, #5
 8007a60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a68:	f003 031f 	and.w	r3, r3, #31
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d104      	bne.n	8007a7a <USB_EPStartXfer+0x1600>
 8007a70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a74:	3b01      	subs	r3, #1
 8007a76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a7e:	881b      	ldrh	r3, [r3, #0]
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	029b      	lsls	r3, r3, #10
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a9e:	801a      	strh	r2, [r3, #0]
 8007aa0:	e05c      	b.n	8007b5c <USB_EPStartXfer+0x16e2>
 8007aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10c      	bne.n	8007ac4 <USB_EPStartXfer+0x164a>
 8007aaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007aae:	881b      	ldrh	r3, [r3, #0]
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ac0:	801a      	strh	r2, [r3, #0]
 8007ac2:	e04b      	b.n	8007b5c <USB_EPStartXfer+0x16e2>
 8007ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ac8:	085b      	lsrs	r3, r3, #1
 8007aca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ad2:	f003 0301 	and.w	r3, r3, #1
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d004      	beq.n	8007ae4 <USB_EPStartXfer+0x166a>
 8007ada:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ade:	3301      	adds	r3, #1
 8007ae0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007ae4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ae8:	881b      	ldrh	r3, [r3, #0]
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	029b      	lsls	r3, r3, #10
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	4313      	orrs	r3, r2
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007afe:	801a      	strh	r2, [r3, #0]
 8007b00:	e02c      	b.n	8007b5c <USB_EPStartXfer+0x16e2>
 8007b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	785b      	ldrb	r3, [r3, #1]
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d124      	bne.n	8007b5c <USB_EPStartXfer+0x16e2>
 8007b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	461a      	mov	r2, r3
 8007b24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007b28:	4413      	add	r3, r2
 8007b2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	011a      	lsls	r2, r3, #4
 8007b3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007b40:	4413      	add	r3, r2
 8007b42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b4e:	b29a      	uxth	r2, r3
 8007b50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b54:	801a      	strh	r2, [r3, #0]
 8007b56:	e001      	b.n	8007b5c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e03a      	b.n	8007bd2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	4413      	add	r3, r2
 8007b76:	881b      	ldrh	r3, [r3, #0]
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b82:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007b86:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007b8a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b8e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007b92:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007b96:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b9a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	441a      	add	r2, r3
 8007bb8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007bbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	785b      	ldrb	r3, [r3, #1]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d020      	beq.n	8007c30 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	881b      	ldrh	r3, [r3, #0]
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c04:	81bb      	strh	r3, [r7, #12]
 8007c06:	89bb      	ldrh	r3, [r7, #12]
 8007c08:	f083 0310 	eor.w	r3, r3, #16
 8007c0c:	81bb      	strh	r3, [r7, #12]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	441a      	add	r2, r3
 8007c18:	89bb      	ldrh	r3, [r7, #12]
 8007c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	8013      	strh	r3, [r2, #0]
 8007c2e:	e01f      	b.n	8007c70 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c46:	81fb      	strh	r3, [r7, #14]
 8007c48:	89fb      	ldrh	r3, [r7, #14]
 8007c4a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007c4e:	81fb      	strh	r3, [r7, #14]
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	441a      	add	r2, r3
 8007c5a:	89fb      	ldrh	r3, [r7, #14]
 8007c5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c7e:	b480      	push	{r7}
 8007c80:	b087      	sub	sp, #28
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	7b1b      	ldrb	r3, [r3, #12]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f040 809d 	bne.w	8007dcc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	785b      	ldrb	r3, [r3, #1]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d04c      	beq.n	8007d34 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	4413      	add	r3, r2
 8007ca4:	881b      	ldrh	r3, [r3, #0]
 8007ca6:	823b      	strh	r3, [r7, #16]
 8007ca8:	8a3b      	ldrh	r3, [r7, #16]
 8007caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d01b      	beq.n	8007cea <USB_EPClearStall+0x6c>
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	4413      	add	r3, r2
 8007cbc:	881b      	ldrh	r3, [r3, #0]
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cc8:	81fb      	strh	r3, [r7, #14]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	441a      	add	r2, r3
 8007cd4:	89fb      	ldrh	r3, [r7, #14]
 8007cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ce2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	78db      	ldrb	r3, [r3, #3]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d06c      	beq.n	8007dcc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	881b      	ldrh	r3, [r3, #0]
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d08:	81bb      	strh	r3, [r7, #12]
 8007d0a:	89bb      	ldrh	r3, [r7, #12]
 8007d0c:	f083 0320 	eor.w	r3, r3, #32
 8007d10:	81bb      	strh	r3, [r7, #12]
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	441a      	add	r2, r3
 8007d1c:	89bb      	ldrh	r3, [r7, #12]
 8007d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	8013      	strh	r3, [r2, #0]
 8007d32:	e04b      	b.n	8007dcc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	4413      	add	r3, r2
 8007d3e:	881b      	ldrh	r3, [r3, #0]
 8007d40:	82fb      	strh	r3, [r7, #22]
 8007d42:	8afb      	ldrh	r3, [r7, #22]
 8007d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d01b      	beq.n	8007d84 <USB_EPClearStall+0x106>
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	4413      	add	r3, r2
 8007d56:	881b      	ldrh	r3, [r3, #0]
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d62:	82bb      	strh	r3, [r7, #20]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	441a      	add	r2, r3
 8007d6e:	8abb      	ldrh	r3, [r7, #20]
 8007d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	4413      	add	r3, r2
 8007d8e:	881b      	ldrh	r3, [r3, #0]
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d9a:	827b      	strh	r3, [r7, #18]
 8007d9c:	8a7b      	ldrh	r3, [r7, #18]
 8007d9e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007da2:	827b      	strh	r3, [r7, #18]
 8007da4:	8a7b      	ldrh	r3, [r7, #18]
 8007da6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007daa:	827b      	strh	r3, [r7, #18]
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	441a      	add	r2, r3
 8007db6:	8a7b      	ldrh	r3, [r7, #18]
 8007db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	371c      	adds	r7, #28
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007dda:	b480      	push	{r7}
 8007ddc:	b083      	sub	sp, #12
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
 8007de2:	460b      	mov	r3, r1
 8007de4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007de6:	78fb      	ldrb	r3, [r7, #3]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d103      	bne.n	8007df4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2280      	movs	r2, #128	; 0x80
 8007df0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b083      	sub	sp, #12
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3714      	adds	r7, #20
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b08b      	sub	sp, #44	; 0x2c
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	4611      	mov	r1, r2
 8007e44:	461a      	mov	r2, r3
 8007e46:	460b      	mov	r3, r1
 8007e48:	80fb      	strh	r3, [r7, #6]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007e4e:	88bb      	ldrh	r3, [r7, #4]
 8007e50:	3301      	adds	r3, #1
 8007e52:	085b      	lsrs	r3, r3, #1
 8007e54:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e5e:	88fb      	ldrh	r3, [r7, #6]
 8007e60:	005a      	lsls	r2, r3, #1
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	4413      	add	r3, r2
 8007e66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e6a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8007e70:	e01e      	b.n	8007eb0 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	021b      	lsls	r3, r3, #8
 8007e80:	b21a      	sxth	r2, r3
 8007e82:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	b21b      	sxth	r3, r3
 8007e8a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007e8c:	6a3b      	ldr	r3, [r7, #32]
 8007e8e:	8a7a      	ldrh	r2, [r7, #18]
 8007e90:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007e92:	6a3b      	ldr	r3, [r7, #32]
 8007e94:	3302      	adds	r3, #2
 8007e96:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007e98:	6a3b      	ldr	r3, [r7, #32]
 8007e9a:	3302      	adds	r3, #2
 8007e9c:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eac:	3b01      	subs	r3, #1
 8007eae:	627b      	str	r3, [r7, #36]	; 0x24
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1dd      	bne.n	8007e72 <USB_WritePMA+0x3a>
  }
}
 8007eb6:	bf00      	nop
 8007eb8:	bf00      	nop
 8007eba:	372c      	adds	r7, #44	; 0x2c
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b08b      	sub	sp, #44	; 0x2c
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	4611      	mov	r1, r2
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	80fb      	strh	r3, [r7, #6]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007eda:	88bb      	ldrh	r3, [r7, #4]
 8007edc:	085b      	lsrs	r3, r3, #1
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007eea:	88fb      	ldrh	r3, [r7, #6]
 8007eec:	005a      	lsls	r2, r3, #1
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ef6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	627b      	str	r3, [r7, #36]	; 0x24
 8007efc:	e01b      	b.n	8007f36 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007efe:	6a3b      	ldr	r3, [r7, #32]
 8007f00:	881b      	ldrh	r3, [r3, #0]
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007f06:	6a3b      	ldr	r3, [r7, #32]
 8007f08:	3302      	adds	r3, #2
 8007f0a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	b2da      	uxtb	r2, r3
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	3301      	adds	r3, #1
 8007f18:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	0a1b      	lsrs	r3, r3, #8
 8007f1e:	b2da      	uxtb	r2, r3
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	3301      	adds	r3, #1
 8007f28:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007f2a:	6a3b      	ldr	r3, [r7, #32]
 8007f2c:	3302      	adds	r3, #2
 8007f2e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f32:	3b01      	subs	r3, #1
 8007f34:	627b      	str	r3, [r7, #36]	; 0x24
 8007f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1e0      	bne.n	8007efe <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007f3c:	88bb      	ldrh	r3, [r7, #4]
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d007      	beq.n	8007f58 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007f48:	6a3b      	ldr	r3, [r7, #32]
 8007f4a:	881b      	ldrh	r3, [r3, #0]
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	701a      	strb	r2, [r3, #0]
  }
}
 8007f58:	bf00      	nop
 8007f5a:	372c      	adds	r7, #44	; 0x2c
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007f70:	2300      	movs	r3, #0
 8007f72:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	7c1b      	ldrb	r3, [r3, #16]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d115      	bne.n	8007fa8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f80:	2202      	movs	r2, #2
 8007f82:	2181      	movs	r1, #129	; 0x81
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f001 fe62 	bl	8009c4e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f94:	2202      	movs	r2, #2
 8007f96:	2101      	movs	r1, #1
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f001 fe58 	bl	8009c4e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007fa6:	e012      	b.n	8007fce <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007fa8:	2340      	movs	r3, #64	; 0x40
 8007faa:	2202      	movs	r2, #2
 8007fac:	2181      	movs	r1, #129	; 0x81
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f001 fe4d 	bl	8009c4e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007fba:	2340      	movs	r3, #64	; 0x40
 8007fbc:	2202      	movs	r2, #2
 8007fbe:	2101      	movs	r1, #1
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f001 fe44 	bl	8009c4e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007fce:	2308      	movs	r3, #8
 8007fd0:	2203      	movs	r2, #3
 8007fd2:	2182      	movs	r1, #130	; 0x82
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f001 fe3a 	bl	8009c4e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007fe0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007fe4:	f001 ff5c 	bl	8009ea0 <USBD_static_malloc>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d102      	bne.n	8008000 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	73fb      	strb	r3, [r7, #15]
 8007ffe:	e026      	b.n	800804e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008006:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	2200      	movs	r2, #0
 8008016:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	2200      	movs	r2, #0
 800801e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	7c1b      	ldrb	r3, [r3, #16]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d109      	bne.n	800803e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008030:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008034:	2101      	movs	r1, #1
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f001 fefb 	bl	8009e32 <USBD_LL_PrepareReceive>
 800803c:	e007      	b.n	800804e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008044:	2340      	movs	r3, #64	; 0x40
 8008046:	2101      	movs	r1, #1
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f001 fef2 	bl	8009e32 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800804e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008050:	4618      	mov	r0, r3
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	460b      	mov	r3, r1
 8008062:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008064:	2300      	movs	r3, #0
 8008066:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008068:	2181      	movs	r1, #129	; 0x81
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f001 fe15 	bl	8009c9a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008076:	2101      	movs	r1, #1
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f001 fe0e 	bl	8009c9a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008086:	2182      	movs	r1, #130	; 0x82
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f001 fe06 	bl	8009c9a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00e      	beq.n	80080bc <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ae:	4618      	mov	r0, r3
 80080b0:	f001 ff04 	bl	8009ebc <USBD_static_free>
    pdev->pClassData = NULL;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b086      	sub	sp, #24
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
 80080ce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080d6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80080d8:	2300      	movs	r3, #0
 80080da:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80080dc:	2300      	movs	r3, #0
 80080de:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d039      	beq.n	8008164 <USBD_CDC_Setup+0x9e>
 80080f0:	2b20      	cmp	r3, #32
 80080f2:	d17f      	bne.n	80081f4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	88db      	ldrh	r3, [r3, #6]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d029      	beq.n	8008150 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	b25b      	sxtb	r3, r3
 8008102:	2b00      	cmp	r3, #0
 8008104:	da11      	bge.n	800812a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008112:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008114:	683a      	ldr	r2, [r7, #0]
 8008116:	88d2      	ldrh	r2, [r2, #6]
 8008118:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800811a:	6939      	ldr	r1, [r7, #16]
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	88db      	ldrh	r3, [r3, #6]
 8008120:	461a      	mov	r2, r3
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f001 f9e3 	bl	80094ee <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008128:	e06b      	b.n	8008202 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	785a      	ldrb	r2, [r3, #1]
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	88db      	ldrh	r3, [r3, #6]
 8008138:	b2da      	uxtb	r2, r3
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008140:	6939      	ldr	r1, [r7, #16]
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	88db      	ldrh	r3, [r3, #6]
 8008146:	461a      	mov	r2, r3
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f001 f9fe 	bl	800954a <USBD_CtlPrepareRx>
      break;
 800814e:	e058      	b.n	8008202 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	683a      	ldr	r2, [r7, #0]
 800815a:	7850      	ldrb	r0, [r2, #1]
 800815c:	2200      	movs	r2, #0
 800815e:	6839      	ldr	r1, [r7, #0]
 8008160:	4798      	blx	r3
      break;
 8008162:	e04e      	b.n	8008202 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	785b      	ldrb	r3, [r3, #1]
 8008168:	2b0b      	cmp	r3, #11
 800816a:	d02e      	beq.n	80081ca <USBD_CDC_Setup+0x104>
 800816c:	2b0b      	cmp	r3, #11
 800816e:	dc38      	bgt.n	80081e2 <USBD_CDC_Setup+0x11c>
 8008170:	2b00      	cmp	r3, #0
 8008172:	d002      	beq.n	800817a <USBD_CDC_Setup+0xb4>
 8008174:	2b0a      	cmp	r3, #10
 8008176:	d014      	beq.n	80081a2 <USBD_CDC_Setup+0xdc>
 8008178:	e033      	b.n	80081e2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008180:	2b03      	cmp	r3, #3
 8008182:	d107      	bne.n	8008194 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008184:	f107 030c 	add.w	r3, r7, #12
 8008188:	2202      	movs	r2, #2
 800818a:	4619      	mov	r1, r3
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f001 f9ae 	bl	80094ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008192:	e02e      	b.n	80081f2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008194:	6839      	ldr	r1, [r7, #0]
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f001 f93e 	bl	8009418 <USBD_CtlError>
            ret = USBD_FAIL;
 800819c:	2302      	movs	r3, #2
 800819e:	75fb      	strb	r3, [r7, #23]
          break;
 80081a0:	e027      	b.n	80081f2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081a8:	2b03      	cmp	r3, #3
 80081aa:	d107      	bne.n	80081bc <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80081ac:	f107 030f 	add.w	r3, r7, #15
 80081b0:	2201      	movs	r2, #1
 80081b2:	4619      	mov	r1, r3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f001 f99a 	bl	80094ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081ba:	e01a      	b.n	80081f2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80081bc:	6839      	ldr	r1, [r7, #0]
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f001 f92a 	bl	8009418 <USBD_CtlError>
            ret = USBD_FAIL;
 80081c4:	2302      	movs	r3, #2
 80081c6:	75fb      	strb	r3, [r7, #23]
          break;
 80081c8:	e013      	b.n	80081f2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081d0:	2b03      	cmp	r3, #3
 80081d2:	d00d      	beq.n	80081f0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f001 f91e 	bl	8009418 <USBD_CtlError>
            ret = USBD_FAIL;
 80081dc:	2302      	movs	r3, #2
 80081de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80081e0:	e006      	b.n	80081f0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80081e2:	6839      	ldr	r1, [r7, #0]
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f001 f917 	bl	8009418 <USBD_CtlError>
          ret = USBD_FAIL;
 80081ea:	2302      	movs	r3, #2
 80081ec:	75fb      	strb	r3, [r7, #23]
          break;
 80081ee:	e000      	b.n	80081f2 <USBD_CDC_Setup+0x12c>
          break;
 80081f0:	bf00      	nop
      }
      break;
 80081f2:	e006      	b.n	8008202 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f001 f90e 	bl	8009418 <USBD_CtlError>
      ret = USBD_FAIL;
 80081fc:	2302      	movs	r3, #2
 80081fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008200:	bf00      	nop
  }

  return ret;
 8008202:	7dfb      	ldrb	r3, [r7, #23]
}
 8008204:	4618      	mov	r0, r3
 8008206:	3718      	adds	r7, #24
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	460b      	mov	r3, r1
 8008216:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800821e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008226:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800822e:	2b00      	cmp	r3, #0
 8008230:	d03a      	beq.n	80082a8 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008232:	78fa      	ldrb	r2, [r7, #3]
 8008234:	6879      	ldr	r1, [r7, #4]
 8008236:	4613      	mov	r3, r2
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	4413      	add	r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	440b      	add	r3, r1
 8008240:	331c      	adds	r3, #28
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d029      	beq.n	800829c <USBD_CDC_DataIn+0x90>
 8008248:	78fa      	ldrb	r2, [r7, #3]
 800824a:	6879      	ldr	r1, [r7, #4]
 800824c:	4613      	mov	r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	440b      	add	r3, r1
 8008256:	331c      	adds	r3, #28
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	78f9      	ldrb	r1, [r7, #3]
 800825c:	68b8      	ldr	r0, [r7, #8]
 800825e:	460b      	mov	r3, r1
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	440b      	add	r3, r1
 8008264:	00db      	lsls	r3, r3, #3
 8008266:	4403      	add	r3, r0
 8008268:	3338      	adds	r3, #56	; 0x38
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008270:	fb01 f303 	mul.w	r3, r1, r3
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	2b00      	cmp	r3, #0
 8008278:	d110      	bne.n	800829c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800827a:	78fa      	ldrb	r2, [r7, #3]
 800827c:	6879      	ldr	r1, [r7, #4]
 800827e:	4613      	mov	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4413      	add	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	440b      	add	r3, r1
 8008288:	331c      	adds	r3, #28
 800828a:	2200      	movs	r2, #0
 800828c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800828e:	78f9      	ldrb	r1, [r7, #3]
 8008290:	2300      	movs	r3, #0
 8008292:	2200      	movs	r2, #0
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f001 fda9 	bl	8009dec <USBD_LL_Transmit>
 800829a:	e003      	b.n	80082a4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2200      	movs	r2, #0
 80082a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80082a4:	2300      	movs	r3, #0
 80082a6:	e000      	b.n	80082aa <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80082a8:	2302      	movs	r3, #2
  }
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b084      	sub	sp, #16
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	460b      	mov	r3, r1
 80082bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80082c6:	78fb      	ldrb	r3, [r7, #3]
 80082c8:	4619      	mov	r1, r3
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f001 fdd4 	bl	8009e78 <USBD_LL_GetRxDataSize>
 80082d0:	4602      	mov	r2, r0
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00d      	beq.n	80082fe <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80082f6:	4611      	mov	r1, r2
 80082f8:	4798      	blx	r3

    return USBD_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	e000      	b.n	8008300 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80082fe:	2302      	movs	r3, #2
  }
}
 8008300:	4618      	mov	r0, r3
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008316:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800831e:	2b00      	cmp	r3, #0
 8008320:	d015      	beq.n	800834e <USBD_CDC_EP0_RxReady+0x46>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008328:	2bff      	cmp	r3, #255	; 0xff
 800832a:	d010      	beq.n	800834e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800833a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008342:	b292      	uxth	r2, r2
 8008344:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	22ff      	movs	r2, #255	; 0xff
 800834a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2243      	movs	r2, #67	; 0x43
 8008364:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008366:	4b03      	ldr	r3, [pc, #12]	; (8008374 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008368:	4618      	mov	r0, r3
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	20000094 	.word	0x20000094

08008378 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2243      	movs	r2, #67	; 0x43
 8008384:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008386:	4b03      	ldr	r3, [pc, #12]	; (8008394 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008388:	4618      	mov	r0, r3
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr
 8008394:	20000050 	.word	0x20000050

08008398 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2243      	movs	r2, #67	; 0x43
 80083a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80083a6:	4b03      	ldr	r3, [pc, #12]	; (80083b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	200000d8 	.word	0x200000d8

080083b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	220a      	movs	r2, #10
 80083c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80083c6:	4b03      	ldr	r3, [pc, #12]	; (80083d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr
 80083d4:	2000000c 	.word	0x2000000c

080083d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80083e2:	2302      	movs	r3, #2
 80083e4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d005      	beq.n	80083f8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	683a      	ldr	r2, [r7, #0]
 80083f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3714      	adds	r7, #20
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008406:	b480      	push	{r7}
 8008408:	b087      	sub	sp, #28
 800840a:	af00      	add	r7, sp, #0
 800840c:	60f8      	str	r0, [r7, #12]
 800840e:	60b9      	str	r1, [r7, #8]
 8008410:	4613      	mov	r3, r2
 8008412:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800841a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008424:	88fa      	ldrh	r2, [r7, #6]
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	371c      	adds	r7, #28
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr

0800843a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800843a:	b480      	push	{r7}
 800843c:	b085      	sub	sp, #20
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800844a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	683a      	ldr	r2, [r7, #0]
 8008450:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b084      	sub	sp, #16
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008470:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008478:	2b00      	cmp	r3, #0
 800847a:	d017      	beq.n	80084ac <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	7c1b      	ldrb	r3, [r3, #16]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d109      	bne.n	8008498 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800848a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800848e:	2101      	movs	r1, #1
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f001 fcce 	bl	8009e32 <USBD_LL_PrepareReceive>
 8008496:	e007      	b.n	80084a8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800849e:	2340      	movs	r3, #64	; 0x40
 80084a0:	2101      	movs	r1, #1
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f001 fcc5 	bl	8009e32 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80084a8:	2300      	movs	r3, #0
 80084aa:	e000      	b.n	80084ae <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80084ac:	2302      	movs	r3, #2
  }
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b084      	sub	sp, #16
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	60f8      	str	r0, [r7, #12]
 80084be:	60b9      	str	r1, [r7, #8]
 80084c0:	4613      	mov	r3, r2
 80084c2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80084ca:	2302      	movs	r3, #2
 80084cc:	e01a      	b.n	8008504 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d003      	beq.n	80084e0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2200      	movs	r2, #0
 80084dc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d003      	beq.n	80084ee <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	68ba      	ldr	r2, [r7, #8]
 80084ea:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2201      	movs	r2, #1
 80084f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	79fa      	ldrb	r2, [r7, #7]
 80084fa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f001 fb31 	bl	8009b64 <USBD_LL_Init>

  return USBD_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008516:	2300      	movs	r3, #0
 8008518:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d006      	beq.n	800852e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	683a      	ldr	r2, [r7, #0]
 8008524:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008528:	2300      	movs	r3, #0
 800852a:	73fb      	strb	r3, [r7, #15]
 800852c:	e001      	b.n	8008532 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800852e:	2302      	movs	r3, #2
 8008530:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008532:	7bfb      	ldrb	r3, [r7, #15]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3714      	adds	r7, #20
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f001 fb65 	bl	8009c18 <USBD_LL_Start>

  return USBD_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	370c      	adds	r7, #12
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b084      	sub	sp, #16
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	460b      	mov	r3, r1
 8008578:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800857a:	2302      	movs	r3, #2
 800857c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00c      	beq.n	80085a2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	78fa      	ldrb	r2, [r7, #3]
 8008592:	4611      	mov	r1, r2
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	4798      	blx	r3
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d101      	bne.n	80085a2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800859e:	2300      	movs	r3, #0
 80085a0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	460b      	mov	r3, r1
 80085b6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	78fa      	ldrb	r2, [r7, #3]
 80085c2:	4611      	mov	r1, r2
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	4798      	blx	r3

  return USBD_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b082      	sub	sp, #8
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	4618      	mov	r0, r3
 80085e6:	f000 feda 	bl	800939e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80085f8:	461a      	mov	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008606:	f003 031f 	and.w	r3, r3, #31
 800860a:	2b02      	cmp	r3, #2
 800860c:	d016      	beq.n	800863c <USBD_LL_SetupStage+0x6a>
 800860e:	2b02      	cmp	r3, #2
 8008610:	d81c      	bhi.n	800864c <USBD_LL_SetupStage+0x7a>
 8008612:	2b00      	cmp	r3, #0
 8008614:	d002      	beq.n	800861c <USBD_LL_SetupStage+0x4a>
 8008616:	2b01      	cmp	r3, #1
 8008618:	d008      	beq.n	800862c <USBD_LL_SetupStage+0x5a>
 800861a:	e017      	b.n	800864c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f9cd 	bl	80089c4 <USBD_StdDevReq>
      break;
 800862a:	e01a      	b.n	8008662 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008632:	4619      	mov	r1, r3
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 fa2f 	bl	8008a98 <USBD_StdItfReq>
      break;
 800863a:	e012      	b.n	8008662 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 fa6f 	bl	8008b28 <USBD_StdEPReq>
      break;
 800864a:	e00a      	b.n	8008662 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008652:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008656:	b2db      	uxtb	r3, r3
 8008658:	4619      	mov	r1, r3
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f001 fb3c 	bl	8009cd8 <USBD_LL_StallEP>
      break;
 8008660:	bf00      	nop
  }

  return USBD_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b086      	sub	sp, #24
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	460b      	mov	r3, r1
 8008676:	607a      	str	r2, [r7, #4]
 8008678:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800867a:	7afb      	ldrb	r3, [r7, #11]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d14b      	bne.n	8008718 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008686:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800868e:	2b03      	cmp	r3, #3
 8008690:	d134      	bne.n	80086fc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	68da      	ldr	r2, [r3, #12]
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	429a      	cmp	r2, r3
 800869c:	d919      	bls.n	80086d2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	68da      	ldr	r2, [r3, #12]
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	1ad2      	subs	r2, r2, r3
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	68da      	ldr	r2, [r3, #12]
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d203      	bcs.n	80086c0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80086bc:	b29b      	uxth	r3, r3
 80086be:	e002      	b.n	80086c6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	461a      	mov	r2, r3
 80086c8:	6879      	ldr	r1, [r7, #4]
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f000 ff5b 	bl	8009586 <USBD_CtlContinueRx>
 80086d0:	e038      	b.n	8008744 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00a      	beq.n	80086f4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80086e4:	2b03      	cmp	r3, #3
 80086e6:	d105      	bne.n	80086f4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f000 ff58 	bl	80095aa <USBD_CtlSendStatus>
 80086fa:	e023      	b.n	8008744 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008702:	2b05      	cmp	r3, #5
 8008704:	d11e      	bne.n	8008744 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800870e:	2100      	movs	r1, #0
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f001 fae1 	bl	8009cd8 <USBD_LL_StallEP>
 8008716:	e015      	b.n	8008744 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800871e:	699b      	ldr	r3, [r3, #24]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00d      	beq.n	8008740 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800872a:	2b03      	cmp	r3, #3
 800872c:	d108      	bne.n	8008740 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	7afa      	ldrb	r2, [r7, #11]
 8008738:	4611      	mov	r1, r2
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	4798      	blx	r3
 800873e:	e001      	b.n	8008744 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008740:	2302      	movs	r3, #2
 8008742:	e000      	b.n	8008746 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3718      	adds	r7, #24
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b086      	sub	sp, #24
 8008752:	af00      	add	r7, sp, #0
 8008754:	60f8      	str	r0, [r7, #12]
 8008756:	460b      	mov	r3, r1
 8008758:	607a      	str	r2, [r7, #4]
 800875a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800875c:	7afb      	ldrb	r3, [r7, #11]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d17f      	bne.n	8008862 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	3314      	adds	r3, #20
 8008766:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800876e:	2b02      	cmp	r3, #2
 8008770:	d15c      	bne.n	800882c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	68da      	ldr	r2, [r3, #12]
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	429a      	cmp	r2, r3
 800877c:	d915      	bls.n	80087aa <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	68da      	ldr	r2, [r3, #12]
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	1ad2      	subs	r2, r2, r3
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	b29b      	uxth	r3, r3
 8008792:	461a      	mov	r2, r3
 8008794:	6879      	ldr	r1, [r7, #4]
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f000 fec5 	bl	8009526 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800879c:	2300      	movs	r3, #0
 800879e:	2200      	movs	r2, #0
 80087a0:	2100      	movs	r1, #0
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f001 fb45 	bl	8009e32 <USBD_LL_PrepareReceive>
 80087a8:	e04e      	b.n	8008848 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	697a      	ldr	r2, [r7, #20]
 80087b0:	6912      	ldr	r2, [r2, #16]
 80087b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80087b6:	fb01 f202 	mul.w	r2, r1, r2
 80087ba:	1a9b      	subs	r3, r3, r2
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d11c      	bne.n	80087fa <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	689a      	ldr	r2, [r3, #8]
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d316      	bcc.n	80087fa <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	689a      	ldr	r2, [r3, #8]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d20f      	bcs.n	80087fa <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80087da:	2200      	movs	r2, #0
 80087dc:	2100      	movs	r1, #0
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f000 fea1 	bl	8009526 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087ec:	2300      	movs	r3, #0
 80087ee:	2200      	movs	r2, #0
 80087f0:	2100      	movs	r1, #0
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f001 fb1d 	bl	8009e32 <USBD_LL_PrepareReceive>
 80087f8:	e026      	b.n	8008848 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00a      	beq.n	800881c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800880c:	2b03      	cmp	r3, #3
 800880e:	d105      	bne.n	800881c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800881c:	2180      	movs	r1, #128	; 0x80
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	f001 fa5a 	bl	8009cd8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f000 fed3 	bl	80095d0 <USBD_CtlReceiveStatus>
 800882a:	e00d      	b.n	8008848 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008832:	2b04      	cmp	r3, #4
 8008834:	d004      	beq.n	8008840 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800883c:	2b00      	cmp	r3, #0
 800883e:	d103      	bne.n	8008848 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008840:	2180      	movs	r1, #128	; 0x80
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f001 fa48 	bl	8009cd8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800884e:	2b01      	cmp	r3, #1
 8008850:	d11d      	bne.n	800888e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f7ff fe80 	bl	8008558 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008860:	e015      	b.n	800888e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008868:	695b      	ldr	r3, [r3, #20]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00d      	beq.n	800888a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008874:	2b03      	cmp	r3, #3
 8008876:	d108      	bne.n	800888a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800887e:	695b      	ldr	r3, [r3, #20]
 8008880:	7afa      	ldrb	r2, [r7, #11]
 8008882:	4611      	mov	r1, r2
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	4798      	blx	r3
 8008888:	e001      	b.n	800888e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800888a:	2302      	movs	r3, #2
 800888c:	e000      	b.n	8008890 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3718      	adds	r7, #24
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088a0:	2340      	movs	r3, #64	; 0x40
 80088a2:	2200      	movs	r2, #0
 80088a4:	2100      	movs	r1, #0
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f001 f9d1 	bl	8009c4e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2240      	movs	r2, #64	; 0x40
 80088b8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088bc:	2340      	movs	r3, #64	; 0x40
 80088be:	2200      	movs	r2, #0
 80088c0:	2180      	movs	r1, #128	; 0x80
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f001 f9c3 	bl	8009c4e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2240      	movs	r2, #64	; 0x40
 80088d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d009      	beq.n	8008910 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	6852      	ldr	r2, [r2, #4]
 8008908:	b2d2      	uxtb	r2, r2
 800890a:	4611      	mov	r1, r2
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	4798      	blx	r3
  }

  return USBD_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3708      	adds	r7, #8
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800891a:	b480      	push	{r7}
 800891c:	b083      	sub	sp, #12
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	460b      	mov	r3, r1
 8008924:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	78fa      	ldrb	r2, [r7, #3]
 800892a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	370c      	adds	r7, #12
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr

0800893a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800893a:	b480      	push	{r7}
 800893c:	b083      	sub	sp, #12
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2204      	movs	r2, #4
 8008952:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008972:	2b04      	cmp	r3, #4
 8008974:	d105      	bne.n	8008982 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800899e:	2b03      	cmp	r3, #3
 80089a0:	d10b      	bne.n	80089ba <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089a8:	69db      	ldr	r3, [r3, #28]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d005      	beq.n	80089ba <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089b4:	69db      	ldr	r3, [r3, #28]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089da:	2b40      	cmp	r3, #64	; 0x40
 80089dc:	d005      	beq.n	80089ea <USBD_StdDevReq+0x26>
 80089de:	2b40      	cmp	r3, #64	; 0x40
 80089e0:	d84f      	bhi.n	8008a82 <USBD_StdDevReq+0xbe>
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d009      	beq.n	80089fa <USBD_StdDevReq+0x36>
 80089e6:	2b20      	cmp	r3, #32
 80089e8:	d14b      	bne.n	8008a82 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	6839      	ldr	r1, [r7, #0]
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	4798      	blx	r3
      break;
 80089f8:	e048      	b.n	8008a8c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	785b      	ldrb	r3, [r3, #1]
 80089fe:	2b09      	cmp	r3, #9
 8008a00:	d839      	bhi.n	8008a76 <USBD_StdDevReq+0xb2>
 8008a02:	a201      	add	r2, pc, #4	; (adr r2, 8008a08 <USBD_StdDevReq+0x44>)
 8008a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a08:	08008a59 	.word	0x08008a59
 8008a0c:	08008a6d 	.word	0x08008a6d
 8008a10:	08008a77 	.word	0x08008a77
 8008a14:	08008a63 	.word	0x08008a63
 8008a18:	08008a77 	.word	0x08008a77
 8008a1c:	08008a3b 	.word	0x08008a3b
 8008a20:	08008a31 	.word	0x08008a31
 8008a24:	08008a77 	.word	0x08008a77
 8008a28:	08008a4f 	.word	0x08008a4f
 8008a2c:	08008a45 	.word	0x08008a45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a30:	6839      	ldr	r1, [r7, #0]
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 f9dc 	bl	8008df0 <USBD_GetDescriptor>
          break;
 8008a38:	e022      	b.n	8008a80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a3a:	6839      	ldr	r1, [r7, #0]
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 fb3f 	bl	80090c0 <USBD_SetAddress>
          break;
 8008a42:	e01d      	b.n	8008a80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fb7e 	bl	8009148 <USBD_SetConfig>
          break;
 8008a4c:	e018      	b.n	8008a80 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008a4e:	6839      	ldr	r1, [r7, #0]
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 fc07 	bl	8009264 <USBD_GetConfig>
          break;
 8008a56:	e013      	b.n	8008a80 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fc37 	bl	80092ce <USBD_GetStatus>
          break;
 8008a60:	e00e      	b.n	8008a80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 fc65 	bl	8009334 <USBD_SetFeature>
          break;
 8008a6a:	e009      	b.n	8008a80 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a6c:	6839      	ldr	r1, [r7, #0]
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 fc74 	bl	800935c <USBD_ClrFeature>
          break;
 8008a74:	e004      	b.n	8008a80 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008a76:	6839      	ldr	r1, [r7, #0]
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 fccd 	bl	8009418 <USBD_CtlError>
          break;
 8008a7e:	bf00      	nop
      }
      break;
 8008a80:	e004      	b.n	8008a8c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008a82:	6839      	ldr	r1, [r7, #0]
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fcc7 	bl	8009418 <USBD_CtlError>
      break;
 8008a8a:	bf00      	nop
  }

  return ret;
 8008a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop

08008a98 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008aae:	2b40      	cmp	r3, #64	; 0x40
 8008ab0:	d005      	beq.n	8008abe <USBD_StdItfReq+0x26>
 8008ab2:	2b40      	cmp	r3, #64	; 0x40
 8008ab4:	d82e      	bhi.n	8008b14 <USBD_StdItfReq+0x7c>
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d001      	beq.n	8008abe <USBD_StdItfReq+0x26>
 8008aba:	2b20      	cmp	r3, #32
 8008abc:	d12a      	bne.n	8008b14 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d81d      	bhi.n	8008b06 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	889b      	ldrh	r3, [r3, #4]
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d813      	bhi.n	8008afc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	6839      	ldr	r1, [r7, #0]
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	4798      	blx	r3
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	88db      	ldrh	r3, [r3, #6]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d110      	bne.n	8008b10 <USBD_StdItfReq+0x78>
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10d      	bne.n	8008b10 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 fd58 	bl	80095aa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008afa:	e009      	b.n	8008b10 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008afc:	6839      	ldr	r1, [r7, #0]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fc8a 	bl	8009418 <USBD_CtlError>
          break;
 8008b04:	e004      	b.n	8008b10 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008b06:	6839      	ldr	r1, [r7, #0]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fc85 	bl	8009418 <USBD_CtlError>
          break;
 8008b0e:	e000      	b.n	8008b12 <USBD_StdItfReq+0x7a>
          break;
 8008b10:	bf00      	nop
      }
      break;
 8008b12:	e004      	b.n	8008b1e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fc7e 	bl	8009418 <USBD_CtlError>
      break;
 8008b1c:	bf00      	nop
  }

  return USBD_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	889b      	ldrh	r3, [r3, #4]
 8008b3a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b44:	2b40      	cmp	r3, #64	; 0x40
 8008b46:	d007      	beq.n	8008b58 <USBD_StdEPReq+0x30>
 8008b48:	2b40      	cmp	r3, #64	; 0x40
 8008b4a:	f200 8146 	bhi.w	8008dda <USBD_StdEPReq+0x2b2>
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d00a      	beq.n	8008b68 <USBD_StdEPReq+0x40>
 8008b52:	2b20      	cmp	r3, #32
 8008b54:	f040 8141 	bne.w	8008dda <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	4798      	blx	r3
      break;
 8008b66:	e13d      	b.n	8008de4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b70:	2b20      	cmp	r3, #32
 8008b72:	d10a      	bne.n	8008b8a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	6839      	ldr	r1, [r7, #0]
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	4798      	blx	r3
 8008b82:	4603      	mov	r3, r0
 8008b84:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008b86:	7bfb      	ldrb	r3, [r7, #15]
 8008b88:	e12d      	b.n	8008de6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	785b      	ldrb	r3, [r3, #1]
 8008b8e:	2b03      	cmp	r3, #3
 8008b90:	d007      	beq.n	8008ba2 <USBD_StdEPReq+0x7a>
 8008b92:	2b03      	cmp	r3, #3
 8008b94:	f300 811b 	bgt.w	8008dce <USBD_StdEPReq+0x2a6>
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d072      	beq.n	8008c82 <USBD_StdEPReq+0x15a>
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d03a      	beq.n	8008c16 <USBD_StdEPReq+0xee>
 8008ba0:	e115      	b.n	8008dce <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d002      	beq.n	8008bb2 <USBD_StdEPReq+0x8a>
 8008bac:	2b03      	cmp	r3, #3
 8008bae:	d015      	beq.n	8008bdc <USBD_StdEPReq+0xb4>
 8008bb0:	e02b      	b.n	8008c0a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bb2:	7bbb      	ldrb	r3, [r7, #14]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d00c      	beq.n	8008bd2 <USBD_StdEPReq+0xaa>
 8008bb8:	7bbb      	ldrb	r3, [r7, #14]
 8008bba:	2b80      	cmp	r3, #128	; 0x80
 8008bbc:	d009      	beq.n	8008bd2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008bbe:	7bbb      	ldrb	r3, [r7, #14]
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f001 f888 	bl	8009cd8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008bc8:	2180      	movs	r1, #128	; 0x80
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f001 f884 	bl	8009cd8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bd0:	e020      	b.n	8008c14 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008bd2:	6839      	ldr	r1, [r7, #0]
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 fc1f 	bl	8009418 <USBD_CtlError>
              break;
 8008bda:	e01b      	b.n	8008c14 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	885b      	ldrh	r3, [r3, #2]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10e      	bne.n	8008c02 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008be4:	7bbb      	ldrb	r3, [r7, #14]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00b      	beq.n	8008c02 <USBD_StdEPReq+0xda>
 8008bea:	7bbb      	ldrb	r3, [r7, #14]
 8008bec:	2b80      	cmp	r3, #128	; 0x80
 8008bee:	d008      	beq.n	8008c02 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	88db      	ldrh	r3, [r3, #6]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d104      	bne.n	8008c02 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008bf8:	7bbb      	ldrb	r3, [r7, #14]
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f001 f86b 	bl	8009cd8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fcd1 	bl	80095aa <USBD_CtlSendStatus>

              break;
 8008c08:	e004      	b.n	8008c14 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008c0a:	6839      	ldr	r1, [r7, #0]
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 fc03 	bl	8009418 <USBD_CtlError>
              break;
 8008c12:	bf00      	nop
          }
          break;
 8008c14:	e0e0      	b.n	8008dd8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d002      	beq.n	8008c26 <USBD_StdEPReq+0xfe>
 8008c20:	2b03      	cmp	r3, #3
 8008c22:	d015      	beq.n	8008c50 <USBD_StdEPReq+0x128>
 8008c24:	e026      	b.n	8008c74 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c26:	7bbb      	ldrb	r3, [r7, #14]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00c      	beq.n	8008c46 <USBD_StdEPReq+0x11e>
 8008c2c:	7bbb      	ldrb	r3, [r7, #14]
 8008c2e:	2b80      	cmp	r3, #128	; 0x80
 8008c30:	d009      	beq.n	8008c46 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008c32:	7bbb      	ldrb	r3, [r7, #14]
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f001 f84e 	bl	8009cd8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008c3c:	2180      	movs	r1, #128	; 0x80
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f001 f84a 	bl	8009cd8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c44:	e01c      	b.n	8008c80 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008c46:	6839      	ldr	r1, [r7, #0]
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 fbe5 	bl	8009418 <USBD_CtlError>
              break;
 8008c4e:	e017      	b.n	8008c80 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	885b      	ldrh	r3, [r3, #2]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d112      	bne.n	8008c7e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008c58:	7bbb      	ldrb	r3, [r7, #14]
 8008c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d004      	beq.n	8008c6c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008c62:	7bbb      	ldrb	r3, [r7, #14]
 8008c64:	4619      	mov	r1, r3
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f001 f855 	bl	8009d16 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fc9c 	bl	80095aa <USBD_CtlSendStatus>
              }
              break;
 8008c72:	e004      	b.n	8008c7e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fbce 	bl	8009418 <USBD_CtlError>
              break;
 8008c7c:	e000      	b.n	8008c80 <USBD_StdEPReq+0x158>
              break;
 8008c7e:	bf00      	nop
          }
          break;
 8008c80:	e0aa      	b.n	8008dd8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d002      	beq.n	8008c92 <USBD_StdEPReq+0x16a>
 8008c8c:	2b03      	cmp	r3, #3
 8008c8e:	d032      	beq.n	8008cf6 <USBD_StdEPReq+0x1ce>
 8008c90:	e097      	b.n	8008dc2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c92:	7bbb      	ldrb	r3, [r7, #14]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d007      	beq.n	8008ca8 <USBD_StdEPReq+0x180>
 8008c98:	7bbb      	ldrb	r3, [r7, #14]
 8008c9a:	2b80      	cmp	r3, #128	; 0x80
 8008c9c:	d004      	beq.n	8008ca8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008c9e:	6839      	ldr	r1, [r7, #0]
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 fbb9 	bl	8009418 <USBD_CtlError>
                break;
 8008ca6:	e091      	b.n	8008dcc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ca8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	da0b      	bge.n	8008cc8 <USBD_StdEPReq+0x1a0>
 8008cb0:	7bbb      	ldrb	r3, [r7, #14]
 8008cb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	4413      	add	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	3310      	adds	r3, #16
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	3304      	adds	r3, #4
 8008cc6:	e00b      	b.n	8008ce0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008cc8:	7bbb      	ldrb	r3, [r7, #14]
 8008cca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cce:	4613      	mov	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4413      	add	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	4413      	add	r3, r2
 8008cde:	3304      	adds	r3, #4
 8008ce0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	2202      	movs	r2, #2
 8008cec:	4619      	mov	r1, r3
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 fbfd 	bl	80094ee <USBD_CtlSendData>
              break;
 8008cf4:	e06a      	b.n	8008dcc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008cf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	da11      	bge.n	8008d22 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008cfe:	7bbb      	ldrb	r3, [r7, #14]
 8008d00:	f003 020f 	and.w	r2, r3, #15
 8008d04:	6879      	ldr	r1, [r7, #4]
 8008d06:	4613      	mov	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	4413      	add	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	440b      	add	r3, r1
 8008d10:	3318      	adds	r3, #24
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d117      	bne.n	8008d48 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008d18:	6839      	ldr	r1, [r7, #0]
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 fb7c 	bl	8009418 <USBD_CtlError>
                  break;
 8008d20:	e054      	b.n	8008dcc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
 8008d24:	f003 020f 	and.w	r2, r3, #15
 8008d28:	6879      	ldr	r1, [r7, #4]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4413      	add	r3, r2
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	440b      	add	r3, r1
 8008d34:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d104      	bne.n	8008d48 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008d3e:	6839      	ldr	r1, [r7, #0]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 fb69 	bl	8009418 <USBD_CtlError>
                  break;
 8008d46:	e041      	b.n	8008dcc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	da0b      	bge.n	8008d68 <USBD_StdEPReq+0x240>
 8008d50:	7bbb      	ldrb	r3, [r7, #14]
 8008d52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d56:	4613      	mov	r3, r2
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	4413      	add	r3, r2
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	3310      	adds	r3, #16
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	4413      	add	r3, r2
 8008d64:	3304      	adds	r3, #4
 8008d66:	e00b      	b.n	8008d80 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d68:	7bbb      	ldrb	r3, [r7, #14]
 8008d6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d6e:	4613      	mov	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	4413      	add	r3, r2
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	3304      	adds	r3, #4
 8008d80:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d82:	7bbb      	ldrb	r3, [r7, #14]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d002      	beq.n	8008d8e <USBD_StdEPReq+0x266>
 8008d88:	7bbb      	ldrb	r3, [r7, #14]
 8008d8a:	2b80      	cmp	r3, #128	; 0x80
 8008d8c:	d103      	bne.n	8008d96 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	2200      	movs	r2, #0
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	e00e      	b.n	8008db4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008d96:	7bbb      	ldrb	r3, [r7, #14]
 8008d98:	4619      	mov	r1, r3
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 ffda 	bl	8009d54 <USBD_LL_IsStallEP>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d003      	beq.n	8008dae <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	2201      	movs	r2, #1
 8008daa:	601a      	str	r2, [r3, #0]
 8008dac:	e002      	b.n	8008db4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	2200      	movs	r2, #0
 8008db2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	2202      	movs	r2, #2
 8008db8:	4619      	mov	r1, r3
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fb97 	bl	80094ee <USBD_CtlSendData>
              break;
 8008dc0:	e004      	b.n	8008dcc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008dc2:	6839      	ldr	r1, [r7, #0]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 fb27 	bl	8009418 <USBD_CtlError>
              break;
 8008dca:	bf00      	nop
          }
          break;
 8008dcc:	e004      	b.n	8008dd8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fb21 	bl	8009418 <USBD_CtlError>
          break;
 8008dd6:	bf00      	nop
      }
      break;
 8008dd8:	e004      	b.n	8008de4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 fb1b 	bl	8009418 <USBD_CtlError>
      break;
 8008de2:	bf00      	nop
  }

  return ret;
 8008de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
	...

08008df0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e02:	2300      	movs	r3, #0
 8008e04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	885b      	ldrh	r3, [r3, #2]
 8008e0a:	0a1b      	lsrs	r3, r3, #8
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	2b06      	cmp	r3, #6
 8008e12:	f200 8128 	bhi.w	8009066 <USBD_GetDescriptor+0x276>
 8008e16:	a201      	add	r2, pc, #4	; (adr r2, 8008e1c <USBD_GetDescriptor+0x2c>)
 8008e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1c:	08008e39 	.word	0x08008e39
 8008e20:	08008e51 	.word	0x08008e51
 8008e24:	08008e91 	.word	0x08008e91
 8008e28:	08009067 	.word	0x08009067
 8008e2c:	08009067 	.word	0x08009067
 8008e30:	08009007 	.word	0x08009007
 8008e34:	08009033 	.word	0x08009033
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	7c12      	ldrb	r2, [r2, #16]
 8008e44:	f107 0108 	add.w	r1, r7, #8
 8008e48:	4610      	mov	r0, r2
 8008e4a:	4798      	blx	r3
 8008e4c:	60f8      	str	r0, [r7, #12]
      break;
 8008e4e:	e112      	b.n	8009076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	7c1b      	ldrb	r3, [r3, #16]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d10d      	bne.n	8008e74 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e60:	f107 0208 	add.w	r2, r7, #8
 8008e64:	4610      	mov	r0, r2
 8008e66:	4798      	blx	r3
 8008e68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	2202      	movs	r2, #2
 8008e70:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008e72:	e100      	b.n	8009076 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7c:	f107 0208 	add.w	r2, r7, #8
 8008e80:	4610      	mov	r0, r2
 8008e82:	4798      	blx	r3
 8008e84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	2202      	movs	r2, #2
 8008e8c:	701a      	strb	r2, [r3, #0]
      break;
 8008e8e:	e0f2      	b.n	8009076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	885b      	ldrh	r3, [r3, #2]
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b05      	cmp	r3, #5
 8008e98:	f200 80ac 	bhi.w	8008ff4 <USBD_GetDescriptor+0x204>
 8008e9c:	a201      	add	r2, pc, #4	; (adr r2, 8008ea4 <USBD_GetDescriptor+0xb4>)
 8008e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea2:	bf00      	nop
 8008ea4:	08008ebd 	.word	0x08008ebd
 8008ea8:	08008ef1 	.word	0x08008ef1
 8008eac:	08008f25 	.word	0x08008f25
 8008eb0:	08008f59 	.word	0x08008f59
 8008eb4:	08008f8d 	.word	0x08008f8d
 8008eb8:	08008fc1 	.word	0x08008fc1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d00b      	beq.n	8008ee0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	7c12      	ldrb	r2, [r2, #16]
 8008ed4:	f107 0108 	add.w	r1, r7, #8
 8008ed8:	4610      	mov	r0, r2
 8008eda:	4798      	blx	r3
 8008edc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ede:	e091      	b.n	8009004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 fa98 	bl	8009418 <USBD_CtlError>
            err++;
 8008ee8:	7afb      	ldrb	r3, [r7, #11]
 8008eea:	3301      	adds	r3, #1
 8008eec:	72fb      	strb	r3, [r7, #11]
          break;
 8008eee:	e089      	b.n	8009004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00b      	beq.n	8008f14 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	7c12      	ldrb	r2, [r2, #16]
 8008f08:	f107 0108 	add.w	r1, r7, #8
 8008f0c:	4610      	mov	r0, r2
 8008f0e:	4798      	blx	r3
 8008f10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f12:	e077      	b.n	8009004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f14:	6839      	ldr	r1, [r7, #0]
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fa7e 	bl	8009418 <USBD_CtlError>
            err++;
 8008f1c:	7afb      	ldrb	r3, [r7, #11]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	72fb      	strb	r3, [r7, #11]
          break;
 8008f22:	e06f      	b.n	8009004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00b      	beq.n	8008f48 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	7c12      	ldrb	r2, [r2, #16]
 8008f3c:	f107 0108 	add.w	r1, r7, #8
 8008f40:	4610      	mov	r0, r2
 8008f42:	4798      	blx	r3
 8008f44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f46:	e05d      	b.n	8009004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f48:	6839      	ldr	r1, [r7, #0]
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fa64 	bl	8009418 <USBD_CtlError>
            err++;
 8008f50:	7afb      	ldrb	r3, [r7, #11]
 8008f52:	3301      	adds	r3, #1
 8008f54:	72fb      	strb	r3, [r7, #11]
          break;
 8008f56:	e055      	b.n	8009004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00b      	beq.n	8008f7c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	7c12      	ldrb	r2, [r2, #16]
 8008f70:	f107 0108 	add.w	r1, r7, #8
 8008f74:	4610      	mov	r0, r2
 8008f76:	4798      	blx	r3
 8008f78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f7a:	e043      	b.n	8009004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f7c:	6839      	ldr	r1, [r7, #0]
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 fa4a 	bl	8009418 <USBD_CtlError>
            err++;
 8008f84:	7afb      	ldrb	r3, [r7, #11]
 8008f86:	3301      	adds	r3, #1
 8008f88:	72fb      	strb	r3, [r7, #11]
          break;
 8008f8a:	e03b      	b.n	8009004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f92:	695b      	ldr	r3, [r3, #20]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00b      	beq.n	8008fb0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f9e:	695b      	ldr	r3, [r3, #20]
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	7c12      	ldrb	r2, [r2, #16]
 8008fa4:	f107 0108 	add.w	r1, r7, #8
 8008fa8:	4610      	mov	r0, r2
 8008faa:	4798      	blx	r3
 8008fac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fae:	e029      	b.n	8009004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fb0:	6839      	ldr	r1, [r7, #0]
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 fa30 	bl	8009418 <USBD_CtlError>
            err++;
 8008fb8:	7afb      	ldrb	r3, [r7, #11]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	72fb      	strb	r3, [r7, #11]
          break;
 8008fbe:	e021      	b.n	8009004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fc6:	699b      	ldr	r3, [r3, #24]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d00b      	beq.n	8008fe4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fd2:	699b      	ldr	r3, [r3, #24]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	7c12      	ldrb	r2, [r2, #16]
 8008fd8:	f107 0108 	add.w	r1, r7, #8
 8008fdc:	4610      	mov	r0, r2
 8008fde:	4798      	blx	r3
 8008fe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fe2:	e00f      	b.n	8009004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fe4:	6839      	ldr	r1, [r7, #0]
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fa16 	bl	8009418 <USBD_CtlError>
            err++;
 8008fec:	7afb      	ldrb	r3, [r7, #11]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ff2:	e007      	b.n	8009004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fa0e 	bl	8009418 <USBD_CtlError>
          err++;
 8008ffc:	7afb      	ldrb	r3, [r7, #11]
 8008ffe:	3301      	adds	r3, #1
 8009000:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009002:	e038      	b.n	8009076 <USBD_GetDescriptor+0x286>
 8009004:	e037      	b.n	8009076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	7c1b      	ldrb	r3, [r3, #16]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d109      	bne.n	8009022 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009016:	f107 0208 	add.w	r2, r7, #8
 800901a:	4610      	mov	r0, r2
 800901c:	4798      	blx	r3
 800901e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009020:	e029      	b.n	8009076 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009022:	6839      	ldr	r1, [r7, #0]
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 f9f7 	bl	8009418 <USBD_CtlError>
        err++;
 800902a:	7afb      	ldrb	r3, [r7, #11]
 800902c:	3301      	adds	r3, #1
 800902e:	72fb      	strb	r3, [r7, #11]
      break;
 8009030:	e021      	b.n	8009076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	7c1b      	ldrb	r3, [r3, #16]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d10d      	bne.n	8009056 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009042:	f107 0208 	add.w	r2, r7, #8
 8009046:	4610      	mov	r0, r2
 8009048:	4798      	blx	r3
 800904a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	3301      	adds	r3, #1
 8009050:	2207      	movs	r2, #7
 8009052:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009054:	e00f      	b.n	8009076 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009056:	6839      	ldr	r1, [r7, #0]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 f9dd 	bl	8009418 <USBD_CtlError>
        err++;
 800905e:	7afb      	ldrb	r3, [r7, #11]
 8009060:	3301      	adds	r3, #1
 8009062:	72fb      	strb	r3, [r7, #11]
      break;
 8009064:	e007      	b.n	8009076 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009066:	6839      	ldr	r1, [r7, #0]
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 f9d5 	bl	8009418 <USBD_CtlError>
      err++;
 800906e:	7afb      	ldrb	r3, [r7, #11]
 8009070:	3301      	adds	r3, #1
 8009072:	72fb      	strb	r3, [r7, #11]
      break;
 8009074:	bf00      	nop
  }

  if (err != 0U)
 8009076:	7afb      	ldrb	r3, [r7, #11]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d11c      	bne.n	80090b6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800907c:	893b      	ldrh	r3, [r7, #8]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d011      	beq.n	80090a6 <USBD_GetDescriptor+0x2b6>
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	88db      	ldrh	r3, [r3, #6]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00d      	beq.n	80090a6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	88da      	ldrh	r2, [r3, #6]
 800908e:	893b      	ldrh	r3, [r7, #8]
 8009090:	4293      	cmp	r3, r2
 8009092:	bf28      	it	cs
 8009094:	4613      	movcs	r3, r2
 8009096:	b29b      	uxth	r3, r3
 8009098:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800909a:	893b      	ldrh	r3, [r7, #8]
 800909c:	461a      	mov	r2, r3
 800909e:	68f9      	ldr	r1, [r7, #12]
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fa24 	bl	80094ee <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	88db      	ldrh	r3, [r3, #6]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d104      	bne.n	80090b8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fa7b 	bl	80095aa <USBD_CtlSendStatus>
 80090b4:	e000      	b.n	80090b8 <USBD_GetDescriptor+0x2c8>
    return;
 80090b6:	bf00      	nop
    }
  }
}
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop

080090c0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	889b      	ldrh	r3, [r3, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d130      	bne.n	8009134 <USBD_SetAddress+0x74>
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	88db      	ldrh	r3, [r3, #6]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d12c      	bne.n	8009134 <USBD_SetAddress+0x74>
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	885b      	ldrh	r3, [r3, #2]
 80090de:	2b7f      	cmp	r3, #127	; 0x7f
 80090e0:	d828      	bhi.n	8009134 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	885b      	ldrh	r3, [r3, #2]
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090f4:	2b03      	cmp	r3, #3
 80090f6:	d104      	bne.n	8009102 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80090f8:	6839      	ldr	r1, [r7, #0]
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 f98c 	bl	8009418 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009100:	e01d      	b.n	800913e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	7bfa      	ldrb	r2, [r7, #15]
 8009106:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800910a:	7bfb      	ldrb	r3, [r7, #15]
 800910c:	4619      	mov	r1, r3
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 fe4d 	bl	8009dae <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fa48 	bl	80095aa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800911a:	7bfb      	ldrb	r3, [r7, #15]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d004      	beq.n	800912a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2202      	movs	r2, #2
 8009124:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009128:	e009      	b.n	800913e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2201      	movs	r2, #1
 800912e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009132:	e004      	b.n	800913e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009134:	6839      	ldr	r1, [r7, #0]
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f96e 	bl	8009418 <USBD_CtlError>
  }
}
 800913c:	bf00      	nop
 800913e:	bf00      	nop
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
	...

08009148 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	885b      	ldrh	r3, [r3, #2]
 8009156:	b2da      	uxtb	r2, r3
 8009158:	4b41      	ldr	r3, [pc, #260]	; (8009260 <USBD_SetConfig+0x118>)
 800915a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800915c:	4b40      	ldr	r3, [pc, #256]	; (8009260 <USBD_SetConfig+0x118>)
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d904      	bls.n	800916e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009164:	6839      	ldr	r1, [r7, #0]
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 f956 	bl	8009418 <USBD_CtlError>
 800916c:	e075      	b.n	800925a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009174:	2b02      	cmp	r3, #2
 8009176:	d002      	beq.n	800917e <USBD_SetConfig+0x36>
 8009178:	2b03      	cmp	r3, #3
 800917a:	d023      	beq.n	80091c4 <USBD_SetConfig+0x7c>
 800917c:	e062      	b.n	8009244 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800917e:	4b38      	ldr	r3, [pc, #224]	; (8009260 <USBD_SetConfig+0x118>)
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d01a      	beq.n	80091bc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009186:	4b36      	ldr	r3, [pc, #216]	; (8009260 <USBD_SetConfig+0x118>)
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	461a      	mov	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2203      	movs	r2, #3
 8009194:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009198:	4b31      	ldr	r3, [pc, #196]	; (8009260 <USBD_SetConfig+0x118>)
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	4619      	mov	r1, r3
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f7ff f9e5 	bl	800856e <USBD_SetClassConfig>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d104      	bne.n	80091b4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80091aa:	6839      	ldr	r1, [r7, #0]
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 f933 	bl	8009418 <USBD_CtlError>
            return;
 80091b2:	e052      	b.n	800925a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 f9f8 	bl	80095aa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80091ba:	e04e      	b.n	800925a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f9f4 	bl	80095aa <USBD_CtlSendStatus>
        break;
 80091c2:	e04a      	b.n	800925a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80091c4:	4b26      	ldr	r3, [pc, #152]	; (8009260 <USBD_SetConfig+0x118>)
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d112      	bne.n	80091f2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2202      	movs	r2, #2
 80091d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80091d4:	4b22      	ldr	r3, [pc, #136]	; (8009260 <USBD_SetConfig+0x118>)
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	461a      	mov	r2, r3
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80091de:	4b20      	ldr	r3, [pc, #128]	; (8009260 <USBD_SetConfig+0x118>)
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	4619      	mov	r1, r3
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f7ff f9e1 	bl	80085ac <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f9dd 	bl	80095aa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80091f0:	e033      	b.n	800925a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80091f2:	4b1b      	ldr	r3, [pc, #108]	; (8009260 <USBD_SetConfig+0x118>)
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	461a      	mov	r2, r3
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d01d      	beq.n	800923c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	b2db      	uxtb	r3, r3
 8009206:	4619      	mov	r1, r3
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f7ff f9cf 	bl	80085ac <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800920e:	4b14      	ldr	r3, [pc, #80]	; (8009260 <USBD_SetConfig+0x118>)
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	461a      	mov	r2, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009218:	4b11      	ldr	r3, [pc, #68]	; (8009260 <USBD_SetConfig+0x118>)
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	4619      	mov	r1, r3
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f7ff f9a5 	bl	800856e <USBD_SetClassConfig>
 8009224:	4603      	mov	r3, r0
 8009226:	2b02      	cmp	r3, #2
 8009228:	d104      	bne.n	8009234 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800922a:	6839      	ldr	r1, [r7, #0]
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f8f3 	bl	8009418 <USBD_CtlError>
            return;
 8009232:	e012      	b.n	800925a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 f9b8 	bl	80095aa <USBD_CtlSendStatus>
        break;
 800923a:	e00e      	b.n	800925a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 f9b4 	bl	80095aa <USBD_CtlSendStatus>
        break;
 8009242:	e00a      	b.n	800925a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009244:	6839      	ldr	r1, [r7, #0]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 f8e6 	bl	8009418 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800924c:	4b04      	ldr	r3, [pc, #16]	; (8009260 <USBD_SetConfig+0x118>)
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	4619      	mov	r1, r3
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f7ff f9aa 	bl	80085ac <USBD_ClrClassConfig>
        break;
 8009258:	bf00      	nop
    }
  }
}
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	20000288 	.word	0x20000288

08009264 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	88db      	ldrh	r3, [r3, #6]
 8009272:	2b01      	cmp	r3, #1
 8009274:	d004      	beq.n	8009280 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009276:	6839      	ldr	r1, [r7, #0]
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f8cd 	bl	8009418 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800927e:	e022      	b.n	80092c6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009286:	2b02      	cmp	r3, #2
 8009288:	dc02      	bgt.n	8009290 <USBD_GetConfig+0x2c>
 800928a:	2b00      	cmp	r3, #0
 800928c:	dc03      	bgt.n	8009296 <USBD_GetConfig+0x32>
 800928e:	e015      	b.n	80092bc <USBD_GetConfig+0x58>
 8009290:	2b03      	cmp	r3, #3
 8009292:	d00b      	beq.n	80092ac <USBD_GetConfig+0x48>
 8009294:	e012      	b.n	80092bc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	3308      	adds	r3, #8
 80092a0:	2201      	movs	r2, #1
 80092a2:	4619      	mov	r1, r3
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 f922 	bl	80094ee <USBD_CtlSendData>
        break;
 80092aa:	e00c      	b.n	80092c6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	3304      	adds	r3, #4
 80092b0:	2201      	movs	r2, #1
 80092b2:	4619      	mov	r1, r3
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 f91a 	bl	80094ee <USBD_CtlSendData>
        break;
 80092ba:	e004      	b.n	80092c6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80092bc:	6839      	ldr	r1, [r7, #0]
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f8aa 	bl	8009418 <USBD_CtlError>
        break;
 80092c4:	bf00      	nop
}
 80092c6:	bf00      	nop
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b082      	sub	sp, #8
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092de:	3b01      	subs	r3, #1
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d81e      	bhi.n	8009322 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	88db      	ldrh	r3, [r3, #6]
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	d004      	beq.n	80092f6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80092ec:	6839      	ldr	r1, [r7, #0]
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 f892 	bl	8009418 <USBD_CtlError>
        break;
 80092f4:	e01a      	b.n	800932c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2201      	movs	r2, #1
 80092fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009302:	2b00      	cmp	r3, #0
 8009304:	d005      	beq.n	8009312 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	f043 0202 	orr.w	r2, r3, #2
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	330c      	adds	r3, #12
 8009316:	2202      	movs	r2, #2
 8009318:	4619      	mov	r1, r3
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f8e7 	bl	80094ee <USBD_CtlSendData>
      break;
 8009320:	e004      	b.n	800932c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009322:	6839      	ldr	r1, [r7, #0]
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 f877 	bl	8009418 <USBD_CtlError>
      break;
 800932a:	bf00      	nop
  }
}
 800932c:	bf00      	nop
 800932e:	3708      	adds	r7, #8
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	885b      	ldrh	r3, [r3, #2]
 8009342:	2b01      	cmp	r3, #1
 8009344:	d106      	bne.n	8009354 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2201      	movs	r2, #1
 800934a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 f92b 	bl	80095aa <USBD_CtlSendStatus>
  }
}
 8009354:	bf00      	nop
 8009356:	3708      	adds	r7, #8
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800936c:	3b01      	subs	r3, #1
 800936e:	2b02      	cmp	r3, #2
 8009370:	d80b      	bhi.n	800938a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	885b      	ldrh	r3, [r3, #2]
 8009376:	2b01      	cmp	r3, #1
 8009378:	d10c      	bne.n	8009394 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f911 	bl	80095aa <USBD_CtlSendStatus>
      }
      break;
 8009388:	e004      	b.n	8009394 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800938a:	6839      	ldr	r1, [r7, #0]
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f843 	bl	8009418 <USBD_CtlError>
      break;
 8009392:	e000      	b.n	8009396 <USBD_ClrFeature+0x3a>
      break;
 8009394:	bf00      	nop
  }
}
 8009396:	bf00      	nop
 8009398:	3708      	adds	r7, #8
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800939e:	b480      	push	{r7}
 80093a0:	b083      	sub	sp, #12
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
 80093a6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	781a      	ldrb	r2, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	785a      	ldrb	r2, [r3, #1]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	3302      	adds	r3, #2
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	b29a      	uxth	r2, r3
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	3303      	adds	r3, #3
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	021b      	lsls	r3, r3, #8
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	4413      	add	r3, r2
 80093ce:	b29a      	uxth	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	3304      	adds	r3, #4
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	b29a      	uxth	r2, r3
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	3305      	adds	r3, #5
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	021b      	lsls	r3, r3, #8
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	4413      	add	r3, r2
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	3306      	adds	r3, #6
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	b29a      	uxth	r2, r3
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	3307      	adds	r3, #7
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	b29b      	uxth	r3, r3
 8009400:	021b      	lsls	r3, r3, #8
 8009402:	b29b      	uxth	r3, r3
 8009404:	4413      	add	r3, r2
 8009406:	b29a      	uxth	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	80da      	strh	r2, [r3, #6]

}
 800940c:	bf00      	nop
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009422:	2180      	movs	r1, #128	; 0x80
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 fc57 	bl	8009cd8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800942a:	2100      	movs	r1, #0
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fc53 	bl	8009cd8 <USBD_LL_StallEP>
}
 8009432:	bf00      	nop
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b086      	sub	sp, #24
 800943e:	af00      	add	r7, sp, #0
 8009440:	60f8      	str	r0, [r7, #12]
 8009442:	60b9      	str	r1, [r7, #8]
 8009444:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009446:	2300      	movs	r3, #0
 8009448:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d032      	beq.n	80094b6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f000 f834 	bl	80094be <USBD_GetLen>
 8009456:	4603      	mov	r3, r0
 8009458:	3301      	adds	r3, #1
 800945a:	b29b      	uxth	r3, r3
 800945c:	005b      	lsls	r3, r3, #1
 800945e:	b29a      	uxth	r2, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009464:	7dfb      	ldrb	r3, [r7, #23]
 8009466:	1c5a      	adds	r2, r3, #1
 8009468:	75fa      	strb	r2, [r7, #23]
 800946a:	461a      	mov	r2, r3
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	4413      	add	r3, r2
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	7812      	ldrb	r2, [r2, #0]
 8009474:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009476:	7dfb      	ldrb	r3, [r7, #23]
 8009478:	1c5a      	adds	r2, r3, #1
 800947a:	75fa      	strb	r2, [r7, #23]
 800947c:	461a      	mov	r2, r3
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	4413      	add	r3, r2
 8009482:	2203      	movs	r2, #3
 8009484:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009486:	e012      	b.n	80094ae <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	1c5a      	adds	r2, r3, #1
 800948c:	60fa      	str	r2, [r7, #12]
 800948e:	7dfa      	ldrb	r2, [r7, #23]
 8009490:	1c51      	adds	r1, r2, #1
 8009492:	75f9      	strb	r1, [r7, #23]
 8009494:	4611      	mov	r1, r2
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	440a      	add	r2, r1
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800949e:	7dfb      	ldrb	r3, [r7, #23]
 80094a0:	1c5a      	adds	r2, r3, #1
 80094a2:	75fa      	strb	r2, [r7, #23]
 80094a4:	461a      	mov	r2, r3
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	4413      	add	r3, r2
 80094aa:	2200      	movs	r2, #0
 80094ac:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1e8      	bne.n	8009488 <USBD_GetString+0x4e>
    }
  }
}
 80094b6:	bf00      	nop
 80094b8:	3718      	adds	r7, #24
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80094be:	b480      	push	{r7}
 80094c0:	b085      	sub	sp, #20
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80094c6:	2300      	movs	r3, #0
 80094c8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80094ca:	e005      	b.n	80094d8 <USBD_GetLen+0x1a>
  {
    len++;
 80094cc:	7bfb      	ldrb	r3, [r7, #15]
 80094ce:	3301      	adds	r3, #1
 80094d0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	3301      	adds	r3, #1
 80094d6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1f5      	bne.n	80094cc <USBD_GetLen+0xe>
  }

  return len;
 80094e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3714      	adds	r7, #20
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr

080094ee <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b084      	sub	sp, #16
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	60f8      	str	r0, [r7, #12]
 80094f6:	60b9      	str	r1, [r7, #8]
 80094f8:	4613      	mov	r3, r2
 80094fa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2202      	movs	r2, #2
 8009500:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009504:	88fa      	ldrh	r2, [r7, #6]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800950a:	88fa      	ldrh	r2, [r7, #6]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009510:	88fb      	ldrh	r3, [r7, #6]
 8009512:	68ba      	ldr	r2, [r7, #8]
 8009514:	2100      	movs	r1, #0
 8009516:	68f8      	ldr	r0, [r7, #12]
 8009518:	f000 fc68 	bl	8009dec <USBD_LL_Transmit>

  return USBD_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b084      	sub	sp, #16
 800952a:	af00      	add	r7, sp, #0
 800952c:	60f8      	str	r0, [r7, #12]
 800952e:	60b9      	str	r1, [r7, #8]
 8009530:	4613      	mov	r3, r2
 8009532:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009534:	88fb      	ldrh	r3, [r7, #6]
 8009536:	68ba      	ldr	r2, [r7, #8]
 8009538:	2100      	movs	r1, #0
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	f000 fc56 	bl	8009dec <USBD_LL_Transmit>

  return USBD_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b084      	sub	sp, #16
 800954e:	af00      	add	r7, sp, #0
 8009550:	60f8      	str	r0, [r7, #12]
 8009552:	60b9      	str	r1, [r7, #8]
 8009554:	4613      	mov	r3, r2
 8009556:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2203      	movs	r2, #3
 800955c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009560:	88fa      	ldrh	r2, [r7, #6]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009568:	88fa      	ldrh	r2, [r7, #6]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009570:	88fb      	ldrh	r3, [r7, #6]
 8009572:	68ba      	ldr	r2, [r7, #8]
 8009574:	2100      	movs	r1, #0
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f000 fc5b 	bl	8009e32 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b084      	sub	sp, #16
 800958a:	af00      	add	r7, sp, #0
 800958c:	60f8      	str	r0, [r7, #12]
 800958e:	60b9      	str	r1, [r7, #8]
 8009590:	4613      	mov	r3, r2
 8009592:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009594:	88fb      	ldrh	r3, [r7, #6]
 8009596:	68ba      	ldr	r2, [r7, #8]
 8009598:	2100      	movs	r1, #0
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f000 fc49 	bl	8009e32 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b082      	sub	sp, #8
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2204      	movs	r2, #4
 80095b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80095ba:	2300      	movs	r3, #0
 80095bc:	2200      	movs	r2, #0
 80095be:	2100      	movs	r1, #0
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fc13 	bl	8009dec <USBD_LL_Transmit>

  return USBD_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3708      	adds	r7, #8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2205      	movs	r2, #5
 80095dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095e0:	2300      	movs	r3, #0
 80095e2:	2200      	movs	r2, #0
 80095e4:	2100      	movs	r1, #0
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 fc23 	bl	8009e32 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
	...

080095f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80095fc:	2200      	movs	r2, #0
 80095fe:	4912      	ldr	r1, [pc, #72]	; (8009648 <MX_USB_DEVICE_Init+0x50>)
 8009600:	4812      	ldr	r0, [pc, #72]	; (800964c <MX_USB_DEVICE_Init+0x54>)
 8009602:	f7fe ff58 	bl	80084b6 <USBD_Init>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d001      	beq.n	8009610 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800960c:	f7f7 f828 	bl	8000660 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009610:	490f      	ldr	r1, [pc, #60]	; (8009650 <MX_USB_DEVICE_Init+0x58>)
 8009612:	480e      	ldr	r0, [pc, #56]	; (800964c <MX_USB_DEVICE_Init+0x54>)
 8009614:	f7fe ff7a 	bl	800850c <USBD_RegisterClass>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800961e:	f7f7 f81f 	bl	8000660 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009622:	490c      	ldr	r1, [pc, #48]	; (8009654 <MX_USB_DEVICE_Init+0x5c>)
 8009624:	4809      	ldr	r0, [pc, #36]	; (800964c <MX_USB_DEVICE_Init+0x54>)
 8009626:	f7fe fed7 	bl	80083d8 <USBD_CDC_RegisterInterface>
 800962a:	4603      	mov	r3, r0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d001      	beq.n	8009634 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009630:	f7f7 f816 	bl	8000660 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009634:	4805      	ldr	r0, [pc, #20]	; (800964c <MX_USB_DEVICE_Init+0x54>)
 8009636:	f7fe ff83 	bl	8008540 <USBD_Start>
 800963a:	4603      	mov	r3, r0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d001      	beq.n	8009644 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009640:	f7f7 f80e 	bl	8000660 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009644:	bf00      	nop
 8009646:	bd80      	pop	{r7, pc}
 8009648:	2000012c 	.word	0x2000012c
 800964c:	2000028c 	.word	0x2000028c
 8009650:	20000018 	.word	0x20000018
 8009654:	2000011c 	.word	0x2000011c

08009658 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800965c:	2200      	movs	r2, #0
 800965e:	4905      	ldr	r1, [pc, #20]	; (8009674 <CDC_Init_FS+0x1c>)
 8009660:	4805      	ldr	r0, [pc, #20]	; (8009678 <CDC_Init_FS+0x20>)
 8009662:	f7fe fed0 	bl	8008406 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009666:	4905      	ldr	r1, [pc, #20]	; (800967c <CDC_Init_FS+0x24>)
 8009668:	4803      	ldr	r0, [pc, #12]	; (8009678 <CDC_Init_FS+0x20>)
 800966a:	f7fe fee6 	bl	800843a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800966e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009670:	4618      	mov	r0, r3
 8009672:	bd80      	pop	{r7, pc}
 8009674:	20000950 	.word	0x20000950
 8009678:	2000028c 	.word	0x2000028c
 800967c:	20000550 	.word	0x20000550

08009680 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009680:	b480      	push	{r7}
 8009682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009684:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009686:	4618      	mov	r0, r3
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	4603      	mov	r3, r0
 8009698:	6039      	str	r1, [r7, #0]
 800969a:	71fb      	strb	r3, [r7, #7]
 800969c:	4613      	mov	r3, r2
 800969e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80096a0:	79fb      	ldrb	r3, [r7, #7]
 80096a2:	2b23      	cmp	r3, #35	; 0x23
 80096a4:	d84a      	bhi.n	800973c <CDC_Control_FS+0xac>
 80096a6:	a201      	add	r2, pc, #4	; (adr r2, 80096ac <CDC_Control_FS+0x1c>)
 80096a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ac:	0800973d 	.word	0x0800973d
 80096b0:	0800973d 	.word	0x0800973d
 80096b4:	0800973d 	.word	0x0800973d
 80096b8:	0800973d 	.word	0x0800973d
 80096bc:	0800973d 	.word	0x0800973d
 80096c0:	0800973d 	.word	0x0800973d
 80096c4:	0800973d 	.word	0x0800973d
 80096c8:	0800973d 	.word	0x0800973d
 80096cc:	0800973d 	.word	0x0800973d
 80096d0:	0800973d 	.word	0x0800973d
 80096d4:	0800973d 	.word	0x0800973d
 80096d8:	0800973d 	.word	0x0800973d
 80096dc:	0800973d 	.word	0x0800973d
 80096e0:	0800973d 	.word	0x0800973d
 80096e4:	0800973d 	.word	0x0800973d
 80096e8:	0800973d 	.word	0x0800973d
 80096ec:	0800973d 	.word	0x0800973d
 80096f0:	0800973d 	.word	0x0800973d
 80096f4:	0800973d 	.word	0x0800973d
 80096f8:	0800973d 	.word	0x0800973d
 80096fc:	0800973d 	.word	0x0800973d
 8009700:	0800973d 	.word	0x0800973d
 8009704:	0800973d 	.word	0x0800973d
 8009708:	0800973d 	.word	0x0800973d
 800970c:	0800973d 	.word	0x0800973d
 8009710:	0800973d 	.word	0x0800973d
 8009714:	0800973d 	.word	0x0800973d
 8009718:	0800973d 	.word	0x0800973d
 800971c:	0800973d 	.word	0x0800973d
 8009720:	0800973d 	.word	0x0800973d
 8009724:	0800973d 	.word	0x0800973d
 8009728:	0800973d 	.word	0x0800973d
 800972c:	0800973d 	.word	0x0800973d
 8009730:	0800973d 	.word	0x0800973d
 8009734:	0800973d 	.word	0x0800973d
 8009738:	0800973d 	.word	0x0800973d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800973c:	bf00      	nop
  }

  return (USBD_OK);
 800973e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009740:	4618      	mov	r0, r3
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009756:	6879      	ldr	r1, [r7, #4]
 8009758:	4805      	ldr	r0, [pc, #20]	; (8009770 <CDC_Receive_FS+0x24>)
 800975a:	f7fe fe6e 	bl	800843a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800975e:	4804      	ldr	r0, [pc, #16]	; (8009770 <CDC_Receive_FS+0x24>)
 8009760:	f7fe fe7f 	bl	8008462 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009764:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009766:	4618      	mov	r0, r3
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	2000028c 	.word	0x2000028c

08009774 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	4603      	mov	r3, r0
 800977c:	6039      	str	r1, [r7, #0]
 800977e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	2212      	movs	r2, #18
 8009784:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009786:	4b03      	ldr	r3, [pc, #12]	; (8009794 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009788:	4618      	mov	r0, r3
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr
 8009794:	20000148 	.word	0x20000148

08009798 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
 800979e:	4603      	mov	r3, r0
 80097a0:	6039      	str	r1, [r7, #0]
 80097a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	2204      	movs	r2, #4
 80097a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80097aa:	4b03      	ldr	r3, [pc, #12]	; (80097b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	370c      	adds	r7, #12
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr
 80097b8:	2000015c 	.word	0x2000015c

080097bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	4603      	mov	r3, r0
 80097c4:	6039      	str	r1, [r7, #0]
 80097c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80097c8:	79fb      	ldrb	r3, [r7, #7]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d105      	bne.n	80097da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80097ce:	683a      	ldr	r2, [r7, #0]
 80097d0:	4907      	ldr	r1, [pc, #28]	; (80097f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80097d2:	4808      	ldr	r0, [pc, #32]	; (80097f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80097d4:	f7ff fe31 	bl	800943a <USBD_GetString>
 80097d8:	e004      	b.n	80097e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80097da:	683a      	ldr	r2, [r7, #0]
 80097dc:	4904      	ldr	r1, [pc, #16]	; (80097f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80097de:	4805      	ldr	r0, [pc, #20]	; (80097f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80097e0:	f7ff fe2b 	bl	800943a <USBD_GetString>
  }
  return USBD_StrDesc;
 80097e4:	4b02      	ldr	r3, [pc, #8]	; (80097f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3708      	adds	r7, #8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	20000d50 	.word	0x20000d50
 80097f4:	08009fb0 	.word	0x08009fb0

080097f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	4603      	mov	r3, r0
 8009800:	6039      	str	r1, [r7, #0]
 8009802:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009804:	683a      	ldr	r2, [r7, #0]
 8009806:	4904      	ldr	r1, [pc, #16]	; (8009818 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009808:	4804      	ldr	r0, [pc, #16]	; (800981c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800980a:	f7ff fe16 	bl	800943a <USBD_GetString>
  return USBD_StrDesc;
 800980e:	4b02      	ldr	r3, [pc, #8]	; (8009818 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009810:	4618      	mov	r0, r3
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	20000d50 	.word	0x20000d50
 800981c:	08009fc8 	.word	0x08009fc8

08009820 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	4603      	mov	r3, r0
 8009828:	6039      	str	r1, [r7, #0]
 800982a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	221a      	movs	r2, #26
 8009830:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009832:	f000 f843 	bl	80098bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009836:	4b02      	ldr	r3, [pc, #8]	; (8009840 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009838:	4618      	mov	r0, r3
 800983a:	3708      	adds	r7, #8
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	20000160 	.word	0x20000160

08009844 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	4603      	mov	r3, r0
 800984c:	6039      	str	r1, [r7, #0]
 800984e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009850:	79fb      	ldrb	r3, [r7, #7]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d105      	bne.n	8009862 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009856:	683a      	ldr	r2, [r7, #0]
 8009858:	4907      	ldr	r1, [pc, #28]	; (8009878 <USBD_FS_ConfigStrDescriptor+0x34>)
 800985a:	4808      	ldr	r0, [pc, #32]	; (800987c <USBD_FS_ConfigStrDescriptor+0x38>)
 800985c:	f7ff fded 	bl	800943a <USBD_GetString>
 8009860:	e004      	b.n	800986c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009862:	683a      	ldr	r2, [r7, #0]
 8009864:	4904      	ldr	r1, [pc, #16]	; (8009878 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009866:	4805      	ldr	r0, [pc, #20]	; (800987c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009868:	f7ff fde7 	bl	800943a <USBD_GetString>
  }
  return USBD_StrDesc;
 800986c:	4b02      	ldr	r3, [pc, #8]	; (8009878 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800986e:	4618      	mov	r0, r3
 8009870:	3708      	adds	r7, #8
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	20000d50 	.word	0x20000d50
 800987c:	08009fdc 	.word	0x08009fdc

08009880 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	4603      	mov	r3, r0
 8009888:	6039      	str	r1, [r7, #0]
 800988a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800988c:	79fb      	ldrb	r3, [r7, #7]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d105      	bne.n	800989e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009892:	683a      	ldr	r2, [r7, #0]
 8009894:	4907      	ldr	r1, [pc, #28]	; (80098b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009896:	4808      	ldr	r0, [pc, #32]	; (80098b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009898:	f7ff fdcf 	bl	800943a <USBD_GetString>
 800989c:	e004      	b.n	80098a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800989e:	683a      	ldr	r2, [r7, #0]
 80098a0:	4904      	ldr	r1, [pc, #16]	; (80098b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80098a2:	4805      	ldr	r0, [pc, #20]	; (80098b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80098a4:	f7ff fdc9 	bl	800943a <USBD_GetString>
  }
  return USBD_StrDesc;
 80098a8:	4b02      	ldr	r3, [pc, #8]	; (80098b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3708      	adds	r7, #8
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	20000d50 	.word	0x20000d50
 80098b8:	08009fe8 	.word	0x08009fe8

080098bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80098c2:	4b0f      	ldr	r3, [pc, #60]	; (8009900 <Get_SerialNum+0x44>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80098c8:	4b0e      	ldr	r3, [pc, #56]	; (8009904 <Get_SerialNum+0x48>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80098ce:	4b0e      	ldr	r3, [pc, #56]	; (8009908 <Get_SerialNum+0x4c>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4413      	add	r3, r2
 80098da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d009      	beq.n	80098f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80098e2:	2208      	movs	r2, #8
 80098e4:	4909      	ldr	r1, [pc, #36]	; (800990c <Get_SerialNum+0x50>)
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	f000 f814 	bl	8009914 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80098ec:	2204      	movs	r2, #4
 80098ee:	4908      	ldr	r1, [pc, #32]	; (8009910 <Get_SerialNum+0x54>)
 80098f0:	68b8      	ldr	r0, [r7, #8]
 80098f2:	f000 f80f 	bl	8009914 <IntToUnicode>
  }
}
 80098f6:	bf00      	nop
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	1ffff7ac 	.word	0x1ffff7ac
 8009904:	1ffff7b0 	.word	0x1ffff7b0
 8009908:	1ffff7b4 	.word	0x1ffff7b4
 800990c:	20000162 	.word	0x20000162
 8009910:	20000172 	.word	0x20000172

08009914 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009914:	b480      	push	{r7}
 8009916:	b087      	sub	sp, #28
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	4613      	mov	r3, r2
 8009920:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009922:	2300      	movs	r3, #0
 8009924:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009926:	2300      	movs	r3, #0
 8009928:	75fb      	strb	r3, [r7, #23]
 800992a:	e027      	b.n	800997c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	0f1b      	lsrs	r3, r3, #28
 8009930:	2b09      	cmp	r3, #9
 8009932:	d80b      	bhi.n	800994c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	0f1b      	lsrs	r3, r3, #28
 8009938:	b2da      	uxtb	r2, r3
 800993a:	7dfb      	ldrb	r3, [r7, #23]
 800993c:	005b      	lsls	r3, r3, #1
 800993e:	4619      	mov	r1, r3
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	440b      	add	r3, r1
 8009944:	3230      	adds	r2, #48	; 0x30
 8009946:	b2d2      	uxtb	r2, r2
 8009948:	701a      	strb	r2, [r3, #0]
 800994a:	e00a      	b.n	8009962 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	0f1b      	lsrs	r3, r3, #28
 8009950:	b2da      	uxtb	r2, r3
 8009952:	7dfb      	ldrb	r3, [r7, #23]
 8009954:	005b      	lsls	r3, r3, #1
 8009956:	4619      	mov	r1, r3
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	440b      	add	r3, r1
 800995c:	3237      	adds	r2, #55	; 0x37
 800995e:	b2d2      	uxtb	r2, r2
 8009960:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	011b      	lsls	r3, r3, #4
 8009966:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009968:	7dfb      	ldrb	r3, [r7, #23]
 800996a:	005b      	lsls	r3, r3, #1
 800996c:	3301      	adds	r3, #1
 800996e:	68ba      	ldr	r2, [r7, #8]
 8009970:	4413      	add	r3, r2
 8009972:	2200      	movs	r2, #0
 8009974:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009976:	7dfb      	ldrb	r3, [r7, #23]
 8009978:	3301      	adds	r3, #1
 800997a:	75fb      	strb	r3, [r7, #23]
 800997c:	7dfa      	ldrb	r2, [r7, #23]
 800997e:	79fb      	ldrb	r3, [r7, #7]
 8009980:	429a      	cmp	r2, r3
 8009982:	d3d3      	bcc.n	800992c <IntToUnicode+0x18>
  }
}
 8009984:	bf00      	nop
 8009986:	bf00      	nop
 8009988:	371c      	adds	r7, #28
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
	...

08009994 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b08a      	sub	sp, #40	; 0x28
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800999c:	f107 0314 	add.w	r3, r7, #20
 80099a0:	2200      	movs	r2, #0
 80099a2:	601a      	str	r2, [r3, #0]
 80099a4:	605a      	str	r2, [r3, #4]
 80099a6:	609a      	str	r2, [r3, #8]
 80099a8:	60da      	str	r2, [r3, #12]
 80099aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a1c      	ldr	r2, [pc, #112]	; (8009a24 <HAL_PCD_MspInit+0x90>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d131      	bne.n	8009a1a <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80099b6:	4b1c      	ldr	r3, [pc, #112]	; (8009a28 <HAL_PCD_MspInit+0x94>)
 80099b8:	695b      	ldr	r3, [r3, #20]
 80099ba:	4a1b      	ldr	r2, [pc, #108]	; (8009a28 <HAL_PCD_MspInit+0x94>)
 80099bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099c0:	6153      	str	r3, [r2, #20]
 80099c2:	4b19      	ldr	r3, [pc, #100]	; (8009a28 <HAL_PCD_MspInit+0x94>)
 80099c4:	695b      	ldr	r3, [r3, #20]
 80099c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099ca:	613b      	str	r3, [r7, #16]
 80099cc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80099ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80099d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099d4:	2302      	movs	r3, #2
 80099d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099d8:	2300      	movs	r3, #0
 80099da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80099dc:	2303      	movs	r3, #3
 80099de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80099e0:	230e      	movs	r3, #14
 80099e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099e4:	f107 0314 	add.w	r3, r7, #20
 80099e8:	4619      	mov	r1, r3
 80099ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80099ee:	f7f7 ff4f 	bl	8001890 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80099f2:	4b0d      	ldr	r3, [pc, #52]	; (8009a28 <HAL_PCD_MspInit+0x94>)
 80099f4:	69db      	ldr	r3, [r3, #28]
 80099f6:	4a0c      	ldr	r2, [pc, #48]	; (8009a28 <HAL_PCD_MspInit+0x94>)
 80099f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80099fc:	61d3      	str	r3, [r2, #28]
 80099fe:	4b0a      	ldr	r3, [pc, #40]	; (8009a28 <HAL_PCD_MspInit+0x94>)
 8009a00:	69db      	ldr	r3, [r3, #28]
 8009a02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a06:	60fb      	str	r3, [r7, #12]
 8009a08:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	2100      	movs	r1, #0
 8009a0e:	2014      	movs	r0, #20
 8009a10:	f7f7 ff07 	bl	8001822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8009a14:	2014      	movs	r0, #20
 8009a16:	f7f7 ff20 	bl	800185a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009a1a:	bf00      	nop
 8009a1c:	3728      	adds	r7, #40	; 0x28
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	40005c00 	.word	0x40005c00
 8009a28:	40021000 	.word	0x40021000

08009a2c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009a40:	4619      	mov	r1, r3
 8009a42:	4610      	mov	r0, r2
 8009a44:	f7fe fdc5 	bl	80085d2 <USBD_LL_SetupStage>
}
 8009a48:	bf00      	nop
 8009a4a:	3708      	adds	r7, #8
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	460b      	mov	r3, r1
 8009a5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009a62:	78fa      	ldrb	r2, [r7, #3]
 8009a64:	6879      	ldr	r1, [r7, #4]
 8009a66:	4613      	mov	r3, r2
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	4413      	add	r3, r2
 8009a6c:	00db      	lsls	r3, r3, #3
 8009a6e:	440b      	add	r3, r1
 8009a70:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	78fb      	ldrb	r3, [r7, #3]
 8009a78:	4619      	mov	r1, r3
 8009a7a:	f7fe fdf7 	bl	800866c <USBD_LL_DataOutStage>
}
 8009a7e:	bf00      	nop
 8009a80:	3708      	adds	r7, #8
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}

08009a86 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b082      	sub	sp, #8
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
 8009a8e:	460b      	mov	r3, r1
 8009a90:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009a98:	78fa      	ldrb	r2, [r7, #3]
 8009a9a:	6879      	ldr	r1, [r7, #4]
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	4413      	add	r3, r2
 8009aa2:	00db      	lsls	r3, r3, #3
 8009aa4:	440b      	add	r3, r1
 8009aa6:	333c      	adds	r3, #60	; 0x3c
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	78fb      	ldrb	r3, [r7, #3]
 8009aac:	4619      	mov	r1, r3
 8009aae:	f7fe fe4e 	bl	800874e <USBD_LL_DataInStage>
}
 8009ab2:	bf00      	nop
 8009ab4:	3708      	adds	r7, #8
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b082      	sub	sp, #8
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7fe ff61 	bl	8008990 <USBD_LL_SOF>
}
 8009ace:	bf00      	nop
 8009ad0:	3708      	adds	r7, #8
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b084      	sub	sp, #16
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	2b02      	cmp	r3, #2
 8009ae8:	d001      	beq.n	8009aee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009aea:	f7f6 fdb9 	bl	8000660 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009af4:	7bfa      	ldrb	r2, [r7, #15]
 8009af6:	4611      	mov	r1, r2
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7fe ff0e 	bl	800891a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009b04:	4618      	mov	r0, r3
 8009b06:	f7fe fec7 	bl	8008898 <USBD_LL_Reset>
}
 8009b0a:	bf00      	nop
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
	...

08009b14 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7fe ff09 	bl	800893a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	699b      	ldr	r3, [r3, #24]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d005      	beq.n	8009b3c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b30:	4b04      	ldr	r3, [pc, #16]	; (8009b44 <HAL_PCD_SuspendCallback+0x30>)
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	4a03      	ldr	r2, [pc, #12]	; (8009b44 <HAL_PCD_SuspendCallback+0x30>)
 8009b36:	f043 0306 	orr.w	r3, r3, #6
 8009b3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009b3c:	bf00      	nop
 8009b3e:	3708      	adds	r7, #8
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	e000ed00 	.word	0xe000ed00

08009b48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7fe ff04 	bl	8008964 <USBD_LL_Resume>
}
 8009b5c:	bf00      	nop
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009b6c:	4a28      	ldr	r2, [pc, #160]	; (8009c10 <USBD_LL_Init+0xac>)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	4a26      	ldr	r2, [pc, #152]	; (8009c10 <USBD_LL_Init+0xac>)
 8009b78:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009b7c:	4b24      	ldr	r3, [pc, #144]	; (8009c10 <USBD_LL_Init+0xac>)
 8009b7e:	4a25      	ldr	r2, [pc, #148]	; (8009c14 <USBD_LL_Init+0xb0>)
 8009b80:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009b82:	4b23      	ldr	r3, [pc, #140]	; (8009c10 <USBD_LL_Init+0xac>)
 8009b84:	2208      	movs	r2, #8
 8009b86:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009b88:	4b21      	ldr	r3, [pc, #132]	; (8009c10 <USBD_LL_Init+0xac>)
 8009b8a:	2202      	movs	r2, #2
 8009b8c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009b8e:	4b20      	ldr	r3, [pc, #128]	; (8009c10 <USBD_LL_Init+0xac>)
 8009b90:	2202      	movs	r2, #2
 8009b92:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009b94:	4b1e      	ldr	r3, [pc, #120]	; (8009c10 <USBD_LL_Init+0xac>)
 8009b96:	2200      	movs	r2, #0
 8009b98:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009b9a:	4b1d      	ldr	r3, [pc, #116]	; (8009c10 <USBD_LL_Init+0xac>)
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009ba0:	481b      	ldr	r0, [pc, #108]	; (8009c10 <USBD_LL_Init+0xac>)
 8009ba2:	f7f8 f807 	bl	8001bb4 <HAL_PCD_Init>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d001      	beq.n	8009bb0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009bac:	f7f6 fd58 	bl	8000660 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009bb6:	2318      	movs	r3, #24
 8009bb8:	2200      	movs	r2, #0
 8009bba:	2100      	movs	r1, #0
 8009bbc:	f7f9 fc90 	bl	80034e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009bc6:	2358      	movs	r3, #88	; 0x58
 8009bc8:	2200      	movs	r2, #0
 8009bca:	2180      	movs	r1, #128	; 0x80
 8009bcc:	f7f9 fc88 	bl	80034e0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009bd6:	23c0      	movs	r3, #192	; 0xc0
 8009bd8:	2200      	movs	r2, #0
 8009bda:	2181      	movs	r1, #129	; 0x81
 8009bdc:	f7f9 fc80 	bl	80034e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009be6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009bea:	2200      	movs	r2, #0
 8009bec:	2101      	movs	r1, #1
 8009bee:	f7f9 fc77 	bl	80034e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009bf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	2182      	movs	r1, #130	; 0x82
 8009c00:	f7f9 fc6e 	bl	80034e0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3708      	adds	r7, #8
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	20000f50 	.word	0x20000f50
 8009c14:	40005c00 	.word	0x40005c00

08009c18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c20:	2300      	movs	r3, #0
 8009c22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7f8 f892 	bl	8001d58 <HAL_PCD_Start>
 8009c34:	4603      	mov	r3, r0
 8009c36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c38:	7bfb      	ldrb	r3, [r7, #15]
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f000 f954 	bl	8009ee8 <USBD_Get_USB_Status>
 8009c40:	4603      	mov	r3, r0
 8009c42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c44:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3710      	adds	r7, #16
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b084      	sub	sp, #16
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
 8009c56:	4608      	mov	r0, r1
 8009c58:	4611      	mov	r1, r2
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	70fb      	strb	r3, [r7, #3]
 8009c60:	460b      	mov	r3, r1
 8009c62:	70bb      	strb	r3, [r7, #2]
 8009c64:	4613      	mov	r3, r2
 8009c66:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c76:	78bb      	ldrb	r3, [r7, #2]
 8009c78:	883a      	ldrh	r2, [r7, #0]
 8009c7a:	78f9      	ldrb	r1, [r7, #3]
 8009c7c:	f7f8 f98b 	bl	8001f96 <HAL_PCD_EP_Open>
 8009c80:	4603      	mov	r3, r0
 8009c82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c84:	7bfb      	ldrb	r3, [r7, #15]
 8009c86:	4618      	mov	r0, r3
 8009c88:	f000 f92e 	bl	8009ee8 <USBD_Get_USB_Status>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c90:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b084      	sub	sp, #16
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009caa:	2300      	movs	r3, #0
 8009cac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cb4:	78fa      	ldrb	r2, [r7, #3]
 8009cb6:	4611      	mov	r1, r2
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7f8 f9c9 	bl	8002050 <HAL_PCD_EP_Close>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cc2:	7bfb      	ldrb	r3, [r7, #15]
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f000 f90f 	bl	8009ee8 <USBD_Get_USB_Status>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cce:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cf2:	78fa      	ldrb	r2, [r7, #3]
 8009cf4:	4611      	mov	r1, r2
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7f8 fa72 	bl	80021e0 <HAL_PCD_EP_SetStall>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d00:	7bfb      	ldrb	r3, [r7, #15]
 8009d02:	4618      	mov	r0, r3
 8009d04:	f000 f8f0 	bl	8009ee8 <USBD_Get_USB_Status>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b084      	sub	sp, #16
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
 8009d1e:	460b      	mov	r3, r1
 8009d20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d22:	2300      	movs	r3, #0
 8009d24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d26:	2300      	movs	r3, #0
 8009d28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d30:	78fa      	ldrb	r2, [r7, #3]
 8009d32:	4611      	mov	r1, r2
 8009d34:	4618      	mov	r0, r3
 8009d36:	f7f8 faa5 	bl	8002284 <HAL_PCD_EP_ClrStall>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d3e:	7bfb      	ldrb	r3, [r7, #15]
 8009d40:	4618      	mov	r0, r3
 8009d42:	f000 f8d1 	bl	8009ee8 <USBD_Get_USB_Status>
 8009d46:	4603      	mov	r3, r0
 8009d48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3710      	adds	r7, #16
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d66:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009d68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	da0c      	bge.n	8009d8a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009d70:	78fb      	ldrb	r3, [r7, #3]
 8009d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d76:	68f9      	ldr	r1, [r7, #12]
 8009d78:	1c5a      	adds	r2, r3, #1
 8009d7a:	4613      	mov	r3, r2
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	4413      	add	r3, r2
 8009d80:	00db      	lsls	r3, r3, #3
 8009d82:	440b      	add	r3, r1
 8009d84:	3302      	adds	r3, #2
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	e00b      	b.n	8009da2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009d8a:	78fb      	ldrb	r3, [r7, #3]
 8009d8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d90:	68f9      	ldr	r1, [r7, #12]
 8009d92:	4613      	mov	r3, r2
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	4413      	add	r3, r2
 8009d98:	00db      	lsls	r3, r3, #3
 8009d9a:	440b      	add	r3, r1
 8009d9c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009da0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3714      	adds	r7, #20
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr

08009dae <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b084      	sub	sp, #16
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
 8009db6:	460b      	mov	r3, r1
 8009db8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009dc8:	78fa      	ldrb	r2, [r7, #3]
 8009dca:	4611      	mov	r1, r2
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7f8 f8bd 	bl	8001f4c <HAL_PCD_SetAddress>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dd6:	7bfb      	ldrb	r3, [r7, #15]
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f000 f885 	bl	8009ee8 <USBD_Get_USB_Status>
 8009dde:	4603      	mov	r3, r0
 8009de0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009de2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b086      	sub	sp, #24
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	607a      	str	r2, [r7, #4]
 8009df6:	461a      	mov	r2, r3
 8009df8:	460b      	mov	r3, r1
 8009dfa:	72fb      	strb	r3, [r7, #11]
 8009dfc:	4613      	mov	r3, r2
 8009dfe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e00:	2300      	movs	r3, #0
 8009e02:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e04:	2300      	movs	r3, #0
 8009e06:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009e0e:	893b      	ldrh	r3, [r7, #8]
 8009e10:	7af9      	ldrb	r1, [r7, #11]
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	f7f8 f9ad 	bl	8002172 <HAL_PCD_EP_Transmit>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e1c:	7dfb      	ldrb	r3, [r7, #23]
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f000 f862 	bl	8009ee8 <USBD_Get_USB_Status>
 8009e24:	4603      	mov	r3, r0
 8009e26:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e28:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3718      	adds	r7, #24
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b086      	sub	sp, #24
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	60f8      	str	r0, [r7, #12]
 8009e3a:	607a      	str	r2, [r7, #4]
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	460b      	mov	r3, r1
 8009e40:	72fb      	strb	r3, [r7, #11]
 8009e42:	4613      	mov	r3, r2
 8009e44:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e46:	2300      	movs	r3, #0
 8009e48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009e54:	893b      	ldrh	r3, [r7, #8]
 8009e56:	7af9      	ldrb	r1, [r7, #11]
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	f7f8 f941 	bl	80020e0 <HAL_PCD_EP_Receive>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e62:	7dfb      	ldrb	r3, [r7, #23]
 8009e64:	4618      	mov	r0, r3
 8009e66:	f000 f83f 	bl	8009ee8 <USBD_Get_USB_Status>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e6e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3718      	adds	r7, #24
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	460b      	mov	r3, r1
 8009e82:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e8a:	78fa      	ldrb	r2, [r7, #3]
 8009e8c:	4611      	mov	r1, r2
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7f8 f957 	bl	8002142 <HAL_PCD_EP_GetRxCount>
 8009e94:	4603      	mov	r3, r0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
	...

08009ea0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b083      	sub	sp, #12
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009ea8:	4b03      	ldr	r3, [pc, #12]	; (8009eb8 <USBD_static_malloc+0x18>)
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	370c      	adds	r7, #12
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr
 8009eb6:	bf00      	nop
 8009eb8:	2000123c 	.word	0x2000123c

08009ebc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]

}
 8009ec4:	bf00      	nop
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	460b      	mov	r3, r1
 8009eda:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009edc:	bf00      	nop
 8009ede:	370c      	adds	r7, #12
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b085      	sub	sp, #20
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	4603      	mov	r3, r0
 8009ef0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009ef6:	79fb      	ldrb	r3, [r7, #7]
 8009ef8:	2b03      	cmp	r3, #3
 8009efa:	d817      	bhi.n	8009f2c <USBD_Get_USB_Status+0x44>
 8009efc:	a201      	add	r2, pc, #4	; (adr r2, 8009f04 <USBD_Get_USB_Status+0x1c>)
 8009efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f02:	bf00      	nop
 8009f04:	08009f15 	.word	0x08009f15
 8009f08:	08009f1b 	.word	0x08009f1b
 8009f0c:	08009f21 	.word	0x08009f21
 8009f10:	08009f27 	.word	0x08009f27
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009f14:	2300      	movs	r3, #0
 8009f16:	73fb      	strb	r3, [r7, #15]
    break;
 8009f18:	e00b      	b.n	8009f32 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f1a:	2302      	movs	r3, #2
 8009f1c:	73fb      	strb	r3, [r7, #15]
    break;
 8009f1e:	e008      	b.n	8009f32 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f20:	2301      	movs	r3, #1
 8009f22:	73fb      	strb	r3, [r7, #15]
    break;
 8009f24:	e005      	b.n	8009f32 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f26:	2302      	movs	r3, #2
 8009f28:	73fb      	strb	r3, [r7, #15]
    break;
 8009f2a:	e002      	b.n	8009f32 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	73fb      	strb	r3, [r7, #15]
    break;
 8009f30:	bf00      	nop
  }
  return usb_status;
 8009f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3714      	adds	r7, #20
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <memset>:
 8009f40:	4402      	add	r2, r0
 8009f42:	4603      	mov	r3, r0
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d100      	bne.n	8009f4a <memset+0xa>
 8009f48:	4770      	bx	lr
 8009f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8009f4e:	e7f9      	b.n	8009f44 <memset+0x4>

08009f50 <__libc_init_array>:
 8009f50:	b570      	push	{r4, r5, r6, lr}
 8009f52:	4d0d      	ldr	r5, [pc, #52]	; (8009f88 <__libc_init_array+0x38>)
 8009f54:	4c0d      	ldr	r4, [pc, #52]	; (8009f8c <__libc_init_array+0x3c>)
 8009f56:	1b64      	subs	r4, r4, r5
 8009f58:	10a4      	asrs	r4, r4, #2
 8009f5a:	2600      	movs	r6, #0
 8009f5c:	42a6      	cmp	r6, r4
 8009f5e:	d109      	bne.n	8009f74 <__libc_init_array+0x24>
 8009f60:	4d0b      	ldr	r5, [pc, #44]	; (8009f90 <__libc_init_array+0x40>)
 8009f62:	4c0c      	ldr	r4, [pc, #48]	; (8009f94 <__libc_init_array+0x44>)
 8009f64:	f000 f818 	bl	8009f98 <_init>
 8009f68:	1b64      	subs	r4, r4, r5
 8009f6a:	10a4      	asrs	r4, r4, #2
 8009f6c:	2600      	movs	r6, #0
 8009f6e:	42a6      	cmp	r6, r4
 8009f70:	d105      	bne.n	8009f7e <__libc_init_array+0x2e>
 8009f72:	bd70      	pop	{r4, r5, r6, pc}
 8009f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f78:	4798      	blx	r3
 8009f7a:	3601      	adds	r6, #1
 8009f7c:	e7ee      	b.n	8009f5c <__libc_init_array+0xc>
 8009f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f82:	4798      	blx	r3
 8009f84:	3601      	adds	r6, #1
 8009f86:	e7f2      	b.n	8009f6e <__libc_init_array+0x1e>
 8009f88:	0800a028 	.word	0x0800a028
 8009f8c:	0800a028 	.word	0x0800a028
 8009f90:	0800a028 	.word	0x0800a028
 8009f94:	0800a02c 	.word	0x0800a02c

08009f98 <_init>:
 8009f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9a:	bf00      	nop
 8009f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f9e:	bc08      	pop	{r3}
 8009fa0:	469e      	mov	lr, r3
 8009fa2:	4770      	bx	lr

08009fa4 <_fini>:
 8009fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa6:	bf00      	nop
 8009fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009faa:	bc08      	pop	{r3}
 8009fac:	469e      	mov	lr, r3
 8009fae:	4770      	bx	lr
