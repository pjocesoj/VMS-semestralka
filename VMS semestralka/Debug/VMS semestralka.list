
VMS semestralka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb90  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800bd18  0800bd18  0001bd18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd90  0800bd90  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800bd90  0800bd90  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bd90  0800bd90  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd90  0800bd90  0001bd90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd94  0800bd94  0001bd94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800bd98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020180  2**0
                  CONTENTS
 10 .bss          00001390  20000180  20000180  00020180  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001510  20001510  00020180  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015d94  00000000  00000000  000201f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000036ba  00000000  00000000  00035f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001280  00000000  00000000  00039648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e1b  00000000  00000000  0003a8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000210fc  00000000  00000000  0003b6e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018b86  00000000  00000000  0005c7df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bf9e2  00000000  00000000  00075365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004c90  00000000  00000000  00134d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  001399d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bd00 	.word	0x0800bd00

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	0800bd00 	.word	0x0800bd00

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
	if (htim == &htim17)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4a22      	ldr	r2, [pc, #136]	; (800026c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d10d      	bne.n	8000204 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		HAL_GPIO_TogglePin(LD10_GPIO_Port, LD10_Pin);
 80001e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ec:	4820      	ldr	r0, [pc, #128]	; (8000270 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80001ee:	f002 fe6d 	bl	8002ecc <HAL_GPIO_TogglePin>
		tim17 = HAL_GPIO_ReadPin(LD10_GPIO_Port, LD10_Pin);
 80001f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f6:	481e      	ldr	r0, [pc, #120]	; (8000270 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80001f8:	f002 fe38 	bl	8002e6c <HAL_GPIO_ReadPin>
 80001fc:	4603      	mov	r3, r0
 80001fe:	461a      	mov	r2, r3
 8000200:	4b1c      	ldr	r3, [pc, #112]	; (8000274 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000202:	601a      	str	r2, [r3, #0]
	}
	if (htim == &htim16)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4a1c      	ldr	r2, [pc, #112]	; (8000278 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000208:	4293      	cmp	r3, r2
 800020a:	d104      	bne.n	8000216 <HAL_TIM_PeriodElapsedCallback+0x3e>
	{
		HAL_GPIO_TogglePin(LD9_GPIO_Port, LD9_Pin);
 800020c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000210:	4817      	ldr	r0, [pc, #92]	; (8000270 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000212:	f002 fe5b 	bl	8002ecc <HAL_GPIO_TogglePin>
	}
	if (htim == &htim2)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a18      	ldr	r2, [pc, #96]	; (800027c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d122      	bne.n	8000264 <HAL_TIM_PeriodElapsedCallback+0x8c>
	{
		HAL_GPIO_TogglePin(LD8_GPIO_Port, LD8_Pin);
 800021e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000222:	4813      	ldr	r0, [pc, #76]	; (8000270 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000224:	f002 fe52 	bl	8002ecc <HAL_GPIO_TogglePin>
		tim2 = HAL_GPIO_ReadPin(LD8_GPIO_Port, LD8_Pin);
 8000228:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800022c:	4810      	ldr	r0, [pc, #64]	; (8000270 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800022e:	f002 fe1d 	bl	8002e6c <HAL_GPIO_ReadPin>
 8000232:	4603      	mov	r3, r0
 8000234:	461a      	mov	r2, r3
 8000236:	4b12      	ldr	r3, [pc, #72]	; (8000280 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000238:	601a      	str	r2, [r3, #0]
		tim2 += 9;
 800023a:	4b11      	ldr	r3, [pc, #68]	; (8000280 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	3309      	adds	r3, #9
 8000240:	4a0f      	ldr	r2, [pc, #60]	; (8000280 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000242:	6013      	str	r3, [r2, #0]

		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000244:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000248:	4809      	ldr	r0, [pc, #36]	; (8000270 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800024a:	f002 fe3f 	bl	8002ecc <HAL_GPIO_TogglePin>
		tim2_ch2 = 1 + 3;
 800024e:	4b0d      	ldr	r3, [pc, #52]	; (8000284 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000250:	2204      	movs	r2, #4
 8000252:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8000254:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000258:	4805      	ldr	r0, [pc, #20]	; (8000270 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800025a:	f002 fe37 	bl	8002ecc <HAL_GPIO_TogglePin>
		tim2_ch4 = 1 + 6;
 800025e:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000260:	2207      	movs	r2, #7
 8000262:	601a      	str	r2, [r3, #0]
	}
}
 8000264:	bf00      	nop
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	200002d4 	.word	0x200002d4
 8000270:	48001000 	.word	0x48001000
 8000274:	20000320 	.word	0x20000320
 8000278:	20000288 	.word	0x20000288
 800027c:	2000023c 	.word	0x2000023c
 8000280:	20000324 	.word	0x20000324
 8000284:	20000328 	.word	0x20000328
 8000288:	2000032c 	.word	0x2000032c

0800028c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a0f      	ldr	r2, [pc, #60]	; (80002d4 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d117      	bne.n	80002cc <HAL_TIM_PWM_PulseFinishedCallback+0x40>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	7f1b      	ldrb	r3, [r3, #28]
 80002a0:	2b02      	cmp	r3, #2
 80002a2:	d107      	bne.n	80002b4 <HAL_TIM_PWM_PulseFinishedCallback+0x28>
		{
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80002a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a8:	480b      	ldr	r0, [pc, #44]	; (80002d8 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 80002aa:	f002 fe0f 	bl	8002ecc <HAL_GPIO_TogglePin>
			tim2_ch2 = 3;
 80002ae:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 80002b0:	2203      	movs	r2, #3
 80002b2:	601a      	str	r2, [r3, #0]
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	7f1b      	ldrb	r3, [r3, #28]
 80002b8:	2b08      	cmp	r3, #8
 80002ba:	d107      	bne.n	80002cc <HAL_TIM_PWM_PulseFinishedCallback+0x40>
		{
			HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 80002bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002c0:	4805      	ldr	r0, [pc, #20]	; (80002d8 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 80002c2:	f002 fe03 	bl	8002ecc <HAL_GPIO_TogglePin>
			tim2_ch4 = 6;
 80002c6:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <HAL_TIM_PWM_PulseFinishedCallback+0x54>)
 80002c8:	2206      	movs	r2, #6
 80002ca:	601a      	str	r2, [r3, #0]
		}
	}
}
 80002cc:	bf00      	nop
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	2000023c 	.word	0x2000023c
 80002d8:	48001000 	.word	0x48001000
 80002dc:	20000328 	.word	0x20000328
 80002e0:	2000032c 	.word	0x2000032c

080002e4 <dutyCycle>:

uint16_t dutyCycle(uint8_t adc, uint16_t period)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b087      	sub	sp, #28
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	460a      	mov	r2, r1
 80002ee:	71fb      	strb	r3, [r7, #7]
 80002f0:	4613      	mov	r3, r2
 80002f2:	80bb      	strh	r3, [r7, #4]
	uint8_t min = 211;
 80002f4:	23d3      	movs	r3, #211	; 0xd3
 80002f6:	74fb      	strb	r3, [r7, #19]
	float max = 255 - min;
 80002f8:	7cfb      	ldrb	r3, [r7, #19]
 80002fa:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80002fe:	ee07 3a90 	vmov	s15, r3
 8000302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000306:	edc7 7a03 	vstr	s15, [r7, #12]
	float val = adc - min;
 800030a:	79fa      	ldrb	r2, [r7, #7]
 800030c:	7cfb      	ldrb	r3, [r7, #19]
 800030e:	1ad3      	subs	r3, r2, r3
 8000310:	ee07 3a90 	vmov	s15, r3
 8000314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000318:	edc7 7a05 	vstr	s15, [r7, #20]

	if (val < 0){val = 0;}
 800031c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000320:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000328:	d502      	bpl.n	8000330 <dutyCycle+0x4c>
 800032a:	f04f 0300 	mov.w	r3, #0
 800032e:	617b      	str	r3, [r7, #20]
	if (adc >= 252){val = max;} //pri spatnem kontaktu nedosahne na max
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	2bfb      	cmp	r3, #251	; 0xfb
 8000334:	d901      	bls.n	800033a <dutyCycle+0x56>
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	617b      	str	r3, [r7, #20]

	float proc = val / max;
 800033a:	edd7 6a05 	vldr	s13, [r7, #20]
 800033e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000346:	edc7 7a02 	vstr	s15, [r7, #8]
	p = proc * 100;
 800034a:	edd7 7a02 	vldr	s15, [r7, #8]
 800034e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000384 <dutyCycle+0xa0>
 8000352:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000356:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <dutyCycle+0xa4>)
 8000358:	edc3 7a00 	vstr	s15, [r3]
	return proc * period;
 800035c:	88bb      	ldrh	r3, [r7, #4]
 800035e:	ee07 3a90 	vmov	s15, r3
 8000362:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000366:	edd7 7a02 	vldr	s15, [r7, #8]
 800036a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800036e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000372:	ee17 3a90 	vmov	r3, s15
 8000376:	b29b      	uxth	r3, r3
}
 8000378:	4618      	mov	r0, r3
 800037a:	371c      	adds	r7, #28
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	42c80000 	.word	0x42c80000
 8000388:	20000334 	.word	0x20000334

0800038c <updateDuty>:

void updateDuty(uint16_t duty)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	80fb      	strh	r3, [r7, #6]
	if (smer_otaceni == DOPRAVA)
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <updateDuty+0x44>)
 8000398:	f993 3000 	ldrsb.w	r3, [r3]
 800039c:	2b01      	cmp	r3, #1
 800039e:	d108      	bne.n	80003b2 <updateDuty+0x26>
	{
		__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_2,duty);
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <updateDuty+0x48>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	88fa      	ldrh	r2, [r7, #6]
 80003a6:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_4,0);
 80003a8:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <updateDuty+0x48>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2200      	movs	r2, #0
 80003ae:	641a      	str	r2, [r3, #64]	; 0x40
	else
	{
		__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_2,0);
		__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_4,duty);
	}
}
 80003b0:	e007      	b.n	80003c2 <updateDuty+0x36>
		__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_2,0);
 80003b2:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <updateDuty+0x48>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	2200      	movs	r2, #0
 80003b8:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_4,duty);
 80003ba:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <updateDuty+0x48>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	88fa      	ldrh	r2, [r7, #6]
 80003c0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	20000000 	.word	0x20000000
 80003d4:	2000023c 	.word	0x2000023c

080003d8 <zmenSmer>:
void zmenSmer()
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	if (smer_otaceni == DOPRAVA)
 80003dc:	4b09      	ldr	r3, [pc, #36]	; (8000404 <zmenSmer+0x2c>)
 80003de:	f993 3000 	ldrsb.w	r3, [r3]
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d103      	bne.n	80003ee <zmenSmer+0x16>
	{
		smer_otaceni = DOLEVA;
 80003e6:	4b07      	ldr	r3, [pc, #28]	; (8000404 <zmenSmer+0x2c>)
 80003e8:	22ff      	movs	r2, #255	; 0xff
 80003ea:	701a      	strb	r2, [r3, #0]
 80003ec:	e002      	b.n	80003f4 <zmenSmer+0x1c>
	}
	else
	{
		smer_otaceni = DOPRAVA;
 80003ee:	4b05      	ldr	r3, [pc, #20]	; (8000404 <zmenSmer+0x2c>)
 80003f0:	2201      	movs	r2, #1
 80003f2:	701a      	strb	r2, [r3, #0]
	}

	updateDuty(duty);
 80003f4:	4b04      	ldr	r3, [pc, #16]	; (8000408 <zmenSmer+0x30>)
 80003f6:	881b      	ldrh	r3, [r3, #0]
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff ffc7 	bl	800038c <updateDuty>
}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	20000000 	.word	0x20000000
 8000408:	20000332 	.word	0x20000332

0800040c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	80fb      	strh	r3, [r7, #6]
	GPIO_PinState B1_old=HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000416:	2101      	movs	r1, #1
 8000418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800041c:	f002 fd26 	bl	8002e6c <HAL_GPIO_ReadPin>
 8000420:	4603      	mov	r3, r0
 8000422:	73fb      	strb	r3, [r7, #15]
	if ( B1_old== 1)
 8000424:	7bfb      	ldrb	r3, [r7, #15]
 8000426:	2b01      	cmp	r3, #1
 8000428:	d101      	bne.n	800042e <HAL_GPIO_EXTI_Callback+0x22>
	{
		zmenSmer();
 800042a:	f7ff ffd5 	bl	80003d8 <zmenSmer>
	}
}
 800042e:	bf00      	nop
 8000430:	3710      	adds	r7, #16
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
	...

08000438 <dec_ascii>:

void dec_ascii(uint16_t d, char ret[])
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	6039      	str	r1, [r7, #0]
 8000442:	80fb      	strh	r3, [r7, #6]
	ret[0]=0;
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	2200      	movs	r2, #0
 8000448:	701a      	strb	r2, [r3, #0]
	ret[1]=0;
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	3301      	adds	r3, #1
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	ret[2]=0;
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	3302      	adds	r3, #2
 8000456:	2200      	movs	r2, #0
 8000458:	701a      	strb	r2, [r3, #0]

	uint16_t temp = d;
 800045a:	88fb      	ldrh	r3, [r7, #6]
 800045c:	81fb      	strh	r3, [r7, #14]
	uint8_t a=0;
 800045e:	2300      	movs	r3, #0
 8000460:	737b      	strb	r3, [r7, #13]

	a=temp/1000;
 8000462:	89fb      	ldrh	r3, [r7, #14]
 8000464:	4a37      	ldr	r2, [pc, #220]	; (8000544 <dec_ascii+0x10c>)
 8000466:	fba2 2303 	umull	r2, r3, r2, r3
 800046a:	099b      	lsrs	r3, r3, #6
 800046c:	b29b      	uxth	r3, r3
 800046e:	737b      	strb	r3, [r7, #13]
	ret[0]=a;
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	7b7a      	ldrb	r2, [r7, #13]
 8000474:	701a      	strb	r2, [r3, #0]
	temp=temp-a*1000;
 8000476:	7b7b      	ldrb	r3, [r7, #13]
 8000478:	b29b      	uxth	r3, r3
 800047a:	461a      	mov	r2, r3
 800047c:	0192      	lsls	r2, r2, #6
 800047e:	1ad2      	subs	r2, r2, r3
 8000480:	0192      	lsls	r2, r2, #6
 8000482:	441a      	add	r2, r3
 8000484:	0052      	lsls	r2, r2, #1
 8000486:	4413      	add	r3, r2
 8000488:	00db      	lsls	r3, r3, #3
 800048a:	b29a      	uxth	r2, r3
 800048c:	89fb      	ldrh	r3, [r7, #14]
 800048e:	4413      	add	r3, r2
 8000490:	81fb      	strh	r3, [r7, #14]

	a=temp/100;
 8000492:	89fb      	ldrh	r3, [r7, #14]
 8000494:	4a2c      	ldr	r2, [pc, #176]	; (8000548 <dec_ascii+0x110>)
 8000496:	fba2 2303 	umull	r2, r3, r2, r3
 800049a:	095b      	lsrs	r3, r3, #5
 800049c:	b29b      	uxth	r3, r3
 800049e:	737b      	strb	r3, [r7, #13]
	ret[1]=a;
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	3301      	adds	r3, #1
 80004a4:	7b7a      	ldrb	r2, [r7, #13]
 80004a6:	701a      	strb	r2, [r3, #0]
	temp=temp-a*100;
 80004a8:	7b7b      	ldrb	r3, [r7, #13]
 80004aa:	b29b      	uxth	r3, r3
 80004ac:	461a      	mov	r2, r3
 80004ae:	0252      	lsls	r2, r2, #9
 80004b0:	1ad2      	subs	r2, r2, r3
 80004b2:	0092      	lsls	r2, r2, #2
 80004b4:	441a      	add	r2, r3
 80004b6:	00d2      	lsls	r2, r2, #3
 80004b8:	1ad3      	subs	r3, r2, r3
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	b29a      	uxth	r2, r3
 80004be:	89fb      	ldrh	r3, [r7, #14]
 80004c0:	4413      	add	r3, r2
 80004c2:	81fb      	strh	r3, [r7, #14]

	a=temp/10;
 80004c4:	89fb      	ldrh	r3, [r7, #14]
 80004c6:	4a21      	ldr	r2, [pc, #132]	; (800054c <dec_ascii+0x114>)
 80004c8:	fba2 2303 	umull	r2, r3, r2, r3
 80004cc:	08db      	lsrs	r3, r3, #3
 80004ce:	b29b      	uxth	r3, r3
 80004d0:	737b      	strb	r3, [r7, #13]
	ret[2]=a;
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	3302      	adds	r3, #2
 80004d6:	7b7a      	ldrb	r2, [r7, #13]
 80004d8:	701a      	strb	r2, [r3, #0]
	temp=temp-a*10;
 80004da:	7b7b      	ldrb	r3, [r7, #13]
 80004dc:	b29b      	uxth	r3, r3
 80004de:	461a      	mov	r2, r3
 80004e0:	0352      	lsls	r2, r2, #13
 80004e2:	1ad2      	subs	r2, r2, r3
 80004e4:	0092      	lsls	r2, r2, #2
 80004e6:	1ad3      	subs	r3, r2, r3
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	b29a      	uxth	r2, r3
 80004ec:	89fb      	ldrh	r3, [r7, #14]
 80004ee:	4413      	add	r3, r2
 80004f0:	81fb      	strh	r3, [r7, #14]

	ret[3]=temp;
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	3303      	adds	r3, #3
 80004f6:	89fa      	ldrh	r2, [r7, #14]
 80004f8:	b2d2      	uxtb	r2, r2
 80004fa:	701a      	strb	r2, [r3, #0]

	ret[0] += 48;//pricte 48(0 v ASCII)
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	3330      	adds	r3, #48	; 0x30
 8000502:	b2da      	uxtb	r2, r3
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	701a      	strb	r2, [r3, #0]
	ret[1] += 48;
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	3301      	adds	r3, #1
 800050c:	781a      	ldrb	r2, [r3, #0]
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	3301      	adds	r3, #1
 8000512:	3230      	adds	r2, #48	; 0x30
 8000514:	b2d2      	uxtb	r2, r2
 8000516:	701a      	strb	r2, [r3, #0]
	ret[2] += 48;
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	3302      	adds	r3, #2
 800051c:	781a      	ldrb	r2, [r3, #0]
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	3302      	adds	r3, #2
 8000522:	3230      	adds	r2, #48	; 0x30
 8000524:	b2d2      	uxtb	r2, r2
 8000526:	701a      	strb	r2, [r3, #0]
	ret[3] += 48;
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	3303      	adds	r3, #3
 800052c:	781a      	ldrb	r2, [r3, #0]
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	3303      	adds	r3, #3
 8000532:	3230      	adds	r2, #48	; 0x30
 8000534:	b2d2      	uxtb	r2, r2
 8000536:	701a      	strb	r2, [r3, #0]
}
 8000538:	bf00      	nop
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	10624dd3 	.word	0x10624dd3
 8000548:	51eb851f 	.word	0x51eb851f
 800054c:	cccccccd 	.word	0xcccccccd

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000556:	f000 fcd3 	bl	8000f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055a:	f000 f873 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055e:	f000 fa87 	bl	8000a70 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000562:	f000 f8d3 	bl	800070c <MX_ADC1_Init>
  MX_ADC3_Init();
 8000566:	f000 f941 	bl	80007ec <MX_ADC3_Init>
  MX_TIM17_Init();
 800056a:	f000 fa59 	bl	8000a20 <MX_TIM17_Init>
  MX_USB_DEVICE_Init();
 800056e:	f00a fed1 	bl	800b314 <MX_USB_DEVICE_Init>
  MX_TIM16_Init();
 8000572:	f000 fa2d 	bl	80009d0 <MX_TIM16_Init>
  MX_TIM2_Init();
 8000576:	f000 f9a9 	bl	80008cc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 800057a:	2104      	movs	r1, #4
 800057c:	482b      	ldr	r0, [pc, #172]	; (800062c <main+0xdc>)
 800057e:	f005 fea9 	bl	80062d4 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4);
 8000582:	210c      	movs	r1, #12
 8000584:	4829      	ldr	r0, [pc, #164]	; (800062c <main+0xdc>)
 8000586:	f005 fea5 	bl	80062d4 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2); //pro kontrolu
 800058a:	4828      	ldr	r0, [pc, #160]	; (800062c <main+0xdc>)
 800058c:	f005 fdd6 	bl	800613c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim17);
 8000590:	4827      	ldr	r0, [pc, #156]	; (8000630 <main+0xe0>)
 8000592:	f005 fdd3 	bl	800613c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim16);
 8000596:	4827      	ldr	r0, [pc, #156]	; (8000634 <main+0xe4>)
 8000598:	f005 fdd0 	bl	800613c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_StatusTypeDef s=HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
	while (1)
	{
		HAL_ADC_Start(&hadc1);
 800059c:	4826      	ldr	r0, [pc, #152]	; (8000638 <main+0xe8>)
 800059e:	f000 ff13 	bl	80013c8 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 80005a2:	210a      	movs	r1, #10
 80005a4:	4824      	ldr	r0, [pc, #144]	; (8000638 <main+0xe8>)
 80005a6:	f001 f85b 	bl	8001660 <HAL_ADC_PollForConversion>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d106      	bne.n	80005be <main+0x6e>
		{
			adc_hod = HAL_ADC_GetValue(&hadc1);
 80005b0:	4821      	ldr	r0, [pc, #132]	; (8000638 <main+0xe8>)
 80005b2:	f001 f957 	bl	8001864 <HAL_ADC_GetValue>
 80005b6:	4603      	mov	r3, r0
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4b20      	ldr	r3, [pc, #128]	; (800063c <main+0xec>)
 80005bc:	701a      	strb	r2, [r3, #0]
		}
		HAL_ADC_Stop(&hadc1);
 80005be:	481e      	ldr	r0, [pc, #120]	; (8000638 <main+0xe8>)
 80005c0:	f001 f818 	bl	80015f4 <HAL_ADC_Stop>
		duty = dutyCycle(adc_hod, 1000);
 80005c4:	4b1d      	ldr	r3, [pc, #116]	; (800063c <main+0xec>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff fe89 	bl	80002e4 <dutyCycle>
 80005d2:	4603      	mov	r3, r0
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <main+0xf0>)
 80005d8:	801a      	strh	r2, [r3, #0]
		updateDuty(duty);
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <main+0xf0>)
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff fed4 	bl	800038c <updateDuty>

		char bufferADC[4]={1,1,1,1};
 80005e4:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 80005e8:	60fb      	str	r3, [r7, #12]
		dec_ascii(adc_hod, bufferADC);
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <main+0xec>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	f107 020c 	add.w	r2, r7, #12
 80005f4:	4611      	mov	r1, r2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ff1e 	bl	8000438 <dec_ascii>
		uint8_t bufferADC_[6]={bufferADC[0],bufferADC[1],bufferADC[2],bufferADC[3],'\r','\n'};
 80005fc:	7b3b      	ldrb	r3, [r7, #12]
 80005fe:	713b      	strb	r3, [r7, #4]
 8000600:	7b7b      	ldrb	r3, [r7, #13]
 8000602:	717b      	strb	r3, [r7, #5]
 8000604:	7bbb      	ldrb	r3, [r7, #14]
 8000606:	71bb      	strb	r3, [r7, #6]
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	71fb      	strb	r3, [r7, #7]
 800060c:	230d      	movs	r3, #13
 800060e:	723b      	strb	r3, [r7, #8]
 8000610:	230a      	movs	r3, #10
 8000612:	727b      	strb	r3, [r7, #9]
		//uint8_t bufferADC_[5]="ABC\r\n";
		CDC_Transmit_FS(bufferADC_,strlen(bufferADC_));
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff fdd6 	bl	80001c8 <strlen>
 800061c:	4602      	mov	r2, r0
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	4611      	mov	r1, r2
 8000622:	4618      	mov	r0, r3
 8000624:	f00a ff34 	bl	800b490 <CDC_Transmit_FS>
	{
 8000628:	e7b8      	b.n	800059c <main+0x4c>
 800062a:	bf00      	nop
 800062c:	2000023c 	.word	0x2000023c
 8000630:	200002d4 	.word	0x200002d4
 8000634:	20000288 	.word	0x20000288
 8000638:	2000019c 	.word	0x2000019c
 800063c:	20000330 	.word	0x20000330
 8000640:	20000332 	.word	0x20000332

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b09e      	sub	sp, #120	; 0x78
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800064e:	2228      	movs	r2, #40	; 0x28
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f00b fb28 	bl	800bca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000668:	463b      	mov	r3, r7
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f00b fb1a 	bl	800bca8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000674:	2301      	movs	r3, #1
 8000676:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000678:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800067c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000682:	2301      	movs	r3, #1
 8000684:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800068e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000690:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000694:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800069a:	4618      	mov	r0, r3
 800069c:	f004 f922 	bl	80048e4 <HAL_RCC_OscConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006a6:	f000 fa5d 	bl	8000b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006aa:	230f      	movs	r3, #15
 80006ac:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ae:	2302      	movs	r3, #2
 80006b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006c4:	2101      	movs	r1, #1
 80006c6:	4618      	mov	r0, r3
 80006c8:	f005 f94a 	bl	8005960 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006d2:	f000 fa47 	bl	8000b64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC12
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <SystemClock_Config+0xc4>)
 80006d8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80006da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006de:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80006e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e4:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80006e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ec:	463b      	mov	r3, r7
 80006ee:	4618      	mov	r0, r3
 80006f0:	f005 fb1c 	bl	8005d2c <HAL_RCCEx_PeriphCLKConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006fa:	f000 fa33 	bl	8000b64 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3778      	adds	r7, #120	; 0x78
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	00020180 	.word	0x00020180

0800070c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
 800072c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800072e:	4b2e      	ldr	r3, [pc, #184]	; (80007e8 <MX_ADC1_Init+0xdc>)
 8000730:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000734:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000736:	4b2c      	ldr	r3, [pc, #176]	; (80007e8 <MX_ADC1_Init+0xdc>)
 8000738:	2200      	movs	r2, #0
 800073a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800073c:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <MX_ADC1_Init+0xdc>)
 800073e:	2210      	movs	r2, #16
 8000740:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000742:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <MX_ADC1_Init+0xdc>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000748:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <MX_ADC1_Init+0xdc>)
 800074a:	2200      	movs	r2, #0
 800074c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800074e:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <MX_ADC1_Init+0xdc>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000756:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <MX_ADC1_Init+0xdc>)
 8000758:	2200      	movs	r2, #0
 800075a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800075c:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <MX_ADC1_Init+0xdc>)
 800075e:	2201      	movs	r2, #1
 8000760:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000762:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <MX_ADC1_Init+0xdc>)
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000768:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <MX_ADC1_Init+0xdc>)
 800076a:	2201      	movs	r2, #1
 800076c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800076e:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <MX_ADC1_Init+0xdc>)
 8000770:	2200      	movs	r2, #0
 8000772:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_ADC1_Init+0xdc>)
 8000778:	2204      	movs	r2, #4
 800077a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_ADC1_Init+0xdc>)
 800077e:	2200      	movs	r2, #0
 8000780:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <MX_ADC1_Init+0xdc>)
 8000784:	2200      	movs	r2, #0
 8000786:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000788:	4817      	ldr	r0, [pc, #92]	; (80007e8 <MX_ADC1_Init+0xdc>)
 800078a:	f000 fc3d 	bl	8001008 <HAL_ADC_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000794:	f000 f9e6 	bl	8000b64 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4811      	ldr	r0, [pc, #68]	; (80007e8 <MX_ADC1_Init+0xdc>)
 80007a4:	f001 fe64 	bl	8002470 <HAL_ADCEx_MultiModeConfigChannel>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80007ae:	f000 f9d9 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007b6:	2301      	movs	r3, #1
 80007b8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	4619      	mov	r1, r3
 80007ce:	4806      	ldr	r0, [pc, #24]	; (80007e8 <MX_ADC1_Init+0xdc>)
 80007d0:	f001 fb64 	bl	8001e9c <HAL_ADC_ConfigChannel>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80007da:	f000 f9c3 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	3728      	adds	r7, #40	; 0x28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	2000019c 	.word	0x2000019c

080007ec <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
 800080c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800080e:	4b2d      	ldr	r3, [pc, #180]	; (80008c4 <MX_ADC3_Init+0xd8>)
 8000810:	4a2d      	ldr	r2, [pc, #180]	; (80008c8 <MX_ADC3_Init+0xdc>)
 8000812:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000814:	4b2b      	ldr	r3, [pc, #172]	; (80008c4 <MX_ADC3_Init+0xd8>)
 8000816:	2200      	movs	r2, #0
 8000818:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800081a:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <MX_ADC3_Init+0xd8>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000820:	4b28      	ldr	r3, [pc, #160]	; (80008c4 <MX_ADC3_Init+0xd8>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000826:	4b27      	ldr	r3, [pc, #156]	; (80008c4 <MX_ADC3_Init+0xd8>)
 8000828:	2200      	movs	r2, #0
 800082a:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800082c:	4b25      	ldr	r3, [pc, #148]	; (80008c4 <MX_ADC3_Init+0xd8>)
 800082e:	2200      	movs	r2, #0
 8000830:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000834:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <MX_ADC3_Init+0xd8>)
 8000836:	2200      	movs	r2, #0
 8000838:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800083a:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <MX_ADC3_Init+0xd8>)
 800083c:	2201      	movs	r2, #1
 800083e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000840:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <MX_ADC3_Init+0xd8>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000846:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <MX_ADC3_Init+0xd8>)
 8000848:	2201      	movs	r2, #1
 800084a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800084c:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <MX_ADC3_Init+0xd8>)
 800084e:	2200      	movs	r2, #0
 8000850:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_ADC3_Init+0xd8>)
 8000856:	2204      	movs	r2, #4
 8000858:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_ADC3_Init+0xd8>)
 800085c:	2200      	movs	r2, #0
 800085e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_ADC3_Init+0xd8>)
 8000862:	2200      	movs	r2, #0
 8000864:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000866:	4817      	ldr	r0, [pc, #92]	; (80008c4 <MX_ADC3_Init+0xd8>)
 8000868:	f000 fbce 	bl	8001008 <HAL_ADC_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8000872:	f000 f977 	bl	8000b64 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	4810      	ldr	r0, [pc, #64]	; (80008c4 <MX_ADC3_Init+0xd8>)
 8000882:	f001 fdf5 	bl	8002470 <HAL_ADCEx_MultiModeConfigChannel>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 800088c:	f000 f96a 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000890:	2301      	movs	r3, #1
 8000892:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000894:	2301      	movs	r3, #1
 8000896:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	4619      	mov	r1, r3
 80008ac:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_ADC3_Init+0xd8>)
 80008ae:	f001 faf5 	bl	8001e9c <HAL_ADC_ConfigChannel>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80008b8:	f000 f954 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	; 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	200001ec 	.word	0x200001ec
 80008c8:	50000400 	.word	0x50000400

080008cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08e      	sub	sp, #56	; 0x38
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ec:	463b      	mov	r3, r7
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]
 80008fa:	615a      	str	r2, [r3, #20]
 80008fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008fe:	4b33      	ldr	r3, [pc, #204]	; (80009cc <MX_TIM2_Init+0x100>)
 8000900:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000904:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000;
 8000906:	4b31      	ldr	r3, [pc, #196]	; (80009cc <MX_TIM2_Init+0x100>)
 8000908:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800090c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090e:	4b2f      	ldr	r3, [pc, #188]	; (80009cc <MX_TIM2_Init+0x100>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000914:	4b2d      	ldr	r3, [pc, #180]	; (80009cc <MX_TIM2_Init+0x100>)
 8000916:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800091a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091c:	4b2b      	ldr	r3, [pc, #172]	; (80009cc <MX_TIM2_Init+0x100>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000922:	4b2a      	ldr	r3, [pc, #168]	; (80009cc <MX_TIM2_Init+0x100>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000928:	4828      	ldr	r0, [pc, #160]	; (80009cc <MX_TIM2_Init+0x100>)
 800092a:	f005 fbaf 	bl	800608c <HAL_TIM_Base_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000934:	f000 f916 	bl	8000b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800093e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000942:	4619      	mov	r1, r3
 8000944:	4821      	ldr	r0, [pc, #132]	; (80009cc <MX_TIM2_Init+0x100>)
 8000946:	f006 f845 	bl	80069d4 <HAL_TIM_ConfigClockSource>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000950:	f000 f908 	bl	8000b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000954:	481d      	ldr	r0, [pc, #116]	; (80009cc <MX_TIM2_Init+0x100>)
 8000956:	f005 fc5b 	bl	8006210 <HAL_TIM_PWM_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000960:	f000 f900 	bl	8000b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4816      	ldr	r0, [pc, #88]	; (80009cc <MX_TIM2_Init+0x100>)
 8000974:	f006 fd3c 	bl	80073f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800097e:	f000 f8f1 	bl	8000b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000982:	2360      	movs	r3, #96	; 0x60
 8000984:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000992:	463b      	mov	r3, r7
 8000994:	2204      	movs	r2, #4
 8000996:	4619      	mov	r1, r3
 8000998:	480c      	ldr	r0, [pc, #48]	; (80009cc <MX_TIM2_Init+0x100>)
 800099a:	f005 ff07 	bl	80067ac <HAL_TIM_PWM_ConfigChannel>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80009a4:	f000 f8de 	bl	8000b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009a8:	463b      	mov	r3, r7
 80009aa:	220c      	movs	r2, #12
 80009ac:	4619      	mov	r1, r3
 80009ae:	4807      	ldr	r0, [pc, #28]	; (80009cc <MX_TIM2_Init+0x100>)
 80009b0:	f005 fefc 	bl	80067ac <HAL_TIM_PWM_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80009ba:	f000 f8d3 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009be:	4803      	ldr	r0, [pc, #12]	; (80009cc <MX_TIM2_Init+0x100>)
 80009c0:	f000 f9c8 	bl	8000d54 <HAL_TIM_MspPostInit>

}
 80009c4:	bf00      	nop
 80009c6:	3738      	adds	r7, #56	; 0x38
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	2000023c 	.word	0x2000023c

080009d0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80009d4:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <MX_TIM16_Init+0x48>)
 80009d6:	4a11      	ldr	r2, [pc, #68]	; (8000a1c <MX_TIM16_Init+0x4c>)
 80009d8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48000;
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_TIM16_Init+0x48>)
 80009dc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80009e0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e2:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <MX_TIM16_Init+0x48>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <MX_TIM16_Init+0x48>)
 80009ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009ee:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_TIM16_Init+0x48>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <MX_TIM16_Init+0x48>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_TIM16_Init+0x48>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_TIM16_Init+0x48>)
 8000a04:	f005 fb42 	bl	800608c <HAL_TIM_Base_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000a0e:	f000 f8a9 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000288 	.word	0x20000288
 8000a1c:	40014400 	.word	0x40014400

08000a20 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000a24:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <MX_TIM17_Init+0x48>)
 8000a26:	4a11      	ldr	r2, [pc, #68]	; (8000a6c <MX_TIM17_Init+0x4c>)
 8000a28:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48000;
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_TIM17_Init+0x48>)
 8000a2c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000a30:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <MX_TIM17_Init+0x48>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 8000a38:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_TIM17_Init+0x48>)
 8000a3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a3e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_TIM17_Init+0x48>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <MX_TIM17_Init+0x48>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_TIM17_Init+0x48>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_TIM17_Init+0x48>)
 8000a54:	f005 fb1a 	bl	800608c <HAL_TIM_Base_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8000a5e:	f000 f881 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200002d4 	.word	0x200002d4
 8000a6c:	40014800 	.word	0x40014800

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a86:	4b35      	ldr	r3, [pc, #212]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	4a34      	ldr	r2, [pc, #208]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000a8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a90:	6153      	str	r3, [r2, #20]
 8000a92:	4b32      	ldr	r3, [pc, #200]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa8:	6153      	str	r3, [r2, #20]
 8000aaa:	4b2c      	ldr	r3, [pc, #176]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	4b29      	ldr	r3, [pc, #164]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	4a28      	ldr	r2, [pc, #160]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ac0:	6153      	str	r3, [r2, #20]
 8000ac2:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ace:	4b23      	ldr	r3, [pc, #140]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	4a22      	ldr	r2, [pc, #136]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000ad4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ad8:	6153      	str	r3, [r2, #20]
 8000ada:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	4a1c      	ldr	r2, [pc, #112]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000aec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000af0:	6153      	str	r3, [r2, #20]
 8000af2:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <MX_GPIO_Init+0xec>)
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000b04:	4816      	ldr	r0, [pc, #88]	; (8000b60 <MX_GPIO_Init+0xf0>)
 8000b06:	f002 f9c9 	bl	8002e9c <HAL_GPIO_WritePin>
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b14:	2302      	movs	r3, #2
 8000b16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b22:	f002 f829 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD7_Pin
                           LD9_Pin LD10_Pin LD8_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 8000b26:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000b2a:	617b      	str	r3, [r7, #20]
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4808      	ldr	r0, [pc, #32]	; (8000b60 <MX_GPIO_Init+0xf0>)
 8000b40:	f002 f81a 	bl	8002b78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2100      	movs	r1, #0
 8000b48:	2006      	movs	r0, #6
 8000b4a:	f001 ffde 	bl	8002b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b4e:	2006      	movs	r0, #6
 8000b50:	f001 fff7 	bl	8002b42 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b54:	bf00      	nop
 8000b56:	3728      	adds	r7, #40	; 0x28
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	48001000 	.word	0x48001000

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
}
 8000b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b6c:	e7fe      	b.n	8000b6c <Error_Handler+0x8>
	...

08000b70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6193      	str	r3, [r2, #24]
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b90:	69db      	ldr	r3, [r3, #28]
 8000b92:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b98:	61d3      	str	r3, [r2, #28]
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ba6:	2007      	movs	r0, #7
 8000ba8:	f001 ffa4 	bl	8002af4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08c      	sub	sp, #48	; 0x30
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bd8:	d125      	bne.n	8000c26 <HAL_ADC_MspInit+0x6e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000bda:	4b2d      	ldr	r3, [pc, #180]	; (8000c90 <HAL_ADC_MspInit+0xd8>)
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	4a2c      	ldr	r2, [pc, #176]	; (8000c90 <HAL_ADC_MspInit+0xd8>)
 8000be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be4:	6153      	str	r3, [r2, #20]
 8000be6:	4b2a      	ldr	r3, [pc, #168]	; (8000c90 <HAL_ADC_MspInit+0xd8>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bee:	61bb      	str	r3, [r7, #24]
 8000bf0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	4b27      	ldr	r3, [pc, #156]	; (8000c90 <HAL_ADC_MspInit+0xd8>)
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	4a26      	ldr	r2, [pc, #152]	; (8000c90 <HAL_ADC_MspInit+0xd8>)
 8000bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfc:	6153      	str	r3, [r2, #20]
 8000bfe:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <HAL_ADC_MspInit+0xd8>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c20:	f001 ffaa 	bl	8002b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000c24:	e030      	b.n	8000c88 <HAL_ADC_MspInit+0xd0>
  else if(hadc->Instance==ADC3)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a1a      	ldr	r2, [pc, #104]	; (8000c94 <HAL_ADC_MspInit+0xdc>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d12b      	bne.n	8000c88 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000c30:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <HAL_ADC_MspInit+0xd8>)
 8000c32:	695b      	ldr	r3, [r3, #20]
 8000c34:	4a16      	ldr	r2, [pc, #88]	; (8000c90 <HAL_ADC_MspInit+0xd8>)
 8000c36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c3a:	6153      	str	r3, [r2, #20]
 8000c3c:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <HAL_ADC_MspInit+0xd8>)
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <HAL_ADC_MspInit+0xd8>)
 8000c4a:	695b      	ldr	r3, [r3, #20]
 8000c4c:	4a10      	ldr	r2, [pc, #64]	; (8000c90 <HAL_ADC_MspInit+0xd8>)
 8000c4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c52:	6153      	str	r3, [r2, #20]
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <HAL_ADC_MspInit+0xd8>)
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c60:	2302      	movs	r3, #2
 8000c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c64:	2303      	movs	r3, #3
 8000c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6c:	f107 031c 	add.w	r3, r7, #28
 8000c70:	4619      	mov	r1, r3
 8000c72:	4809      	ldr	r0, [pc, #36]	; (8000c98 <HAL_ADC_MspInit+0xe0>)
 8000c74:	f001 ff80 	bl	8002b78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	202f      	movs	r0, #47	; 0x2f
 8000c7e:	f001 ff44 	bl	8002b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000c82:	202f      	movs	r0, #47	; 0x2f
 8000c84:	f001 ff5d 	bl	8002b42 <HAL_NVIC_EnableIRQ>
}
 8000c88:	bf00      	nop
 8000c8a:	3730      	adds	r7, #48	; 0x30
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40021000 	.word	0x40021000
 8000c94:	50000400 	.word	0x50000400
 8000c98:	48000400 	.word	0x48000400

08000c9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cac:	d114      	bne.n	8000cd8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cae:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <HAL_TIM_Base_MspInit+0xac>)
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	4a25      	ldr	r2, [pc, #148]	; (8000d48 <HAL_TIM_Base_MspInit+0xac>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	61d3      	str	r3, [r2, #28]
 8000cba:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <HAL_TIM_Base_MspInit+0xac>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	201c      	movs	r0, #28
 8000ccc:	f001 ff1d 	bl	8002b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cd0:	201c      	movs	r0, #28
 8000cd2:	f001 ff36 	bl	8002b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000cd6:	e032      	b.n	8000d3e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a1b      	ldr	r2, [pc, #108]	; (8000d4c <HAL_TIM_Base_MspInit+0xb0>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d114      	bne.n	8000d0c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ce2:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <HAL_TIM_Base_MspInit+0xac>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	4a18      	ldr	r2, [pc, #96]	; (8000d48 <HAL_TIM_Base_MspInit+0xac>)
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cec:	6193      	str	r3, [r2, #24]
 8000cee:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <HAL_TIM_Base_MspInit+0xac>)
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2019      	movs	r0, #25
 8000d00:	f001 ff03 	bl	8002b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d04:	2019      	movs	r0, #25
 8000d06:	f001 ff1c 	bl	8002b42 <HAL_NVIC_EnableIRQ>
}
 8000d0a:	e018      	b.n	8000d3e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM17)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0f      	ldr	r2, [pc, #60]	; (8000d50 <HAL_TIM_Base_MspInit+0xb4>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d113      	bne.n	8000d3e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <HAL_TIM_Base_MspInit+0xac>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <HAL_TIM_Base_MspInit+0xac>)
 8000d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d20:	6193      	str	r3, [r2, #24]
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <HAL_TIM_Base_MspInit+0xac>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	201a      	movs	r0, #26
 8000d34:	f001 fee9 	bl	8002b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000d38:	201a      	movs	r0, #26
 8000d3a:	f001 ff02 	bl	8002b42 <HAL_NVIC_EnableIRQ>
}
 8000d3e:	bf00      	nop
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40014400 	.word	0x40014400
 8000d50:	40014800 	.word	0x40014800

08000d54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d74:	d11b      	bne.n	8000dae <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <HAL_TIM_MspPostInit+0x64>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	4a0f      	ldr	r2, [pc, #60]	; (8000db8 <HAL_TIM_MspPostInit+0x64>)
 8000d7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d80:	6153      	str	r3, [r2, #20]
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <HAL_TIM_MspPostInit+0x64>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PD4     ------> TIM2_CH2
    PD6     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000d8e:	2350      	movs	r3, #80	; 0x50
 8000d90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	4619      	mov	r1, r3
 8000da8:	4804      	ldr	r0, [pc, #16]	; (8000dbc <HAL_TIM_MspPostInit+0x68>)
 8000daa:	f001 fee5 	bl	8002b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000dae:	bf00      	nop
 8000db0:	3720      	adds	r7, #32
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	48000c00 	.word	0x48000c00

08000dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <NMI_Handler+0x4>

08000dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <HardFault_Handler+0x4>

08000dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <MemManage_Handler+0x4>

08000dd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <BusFault_Handler+0x4>

08000dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <UsageFault_Handler+0x4>

08000dde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0c:	f000 f8be 	bl	8000f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f002 f871 	bl	8002f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000e2a:	f002 f979 	bl	8003120 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20001004 	.word	0x20001004

08000e38 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000e3c:	4802      	ldr	r0, [pc, #8]	; (8000e48 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000e3e:	f005 fb95 	bl	800656c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000288 	.word	0x20000288

08000e4c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000e52:	f005 fb8b 	bl	800656c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200002d4 	.word	0x200002d4

08000e60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <TIM2_IRQHandler+0x10>)
 8000e66:	f005 fb81 	bl	800656c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	2000023c 	.word	0x2000023c

08000e74 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <ADC3_IRQHandler+0x10>)
 8000e7a:	f000 fd01 	bl	8001880 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200001ec 	.word	0x200001ec

08000e88 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <SystemInit+0x20>)
 8000e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <SystemInit+0x20>)
 8000e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eb0:	f7ff ffea 	bl	8000e88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb4:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eb6:	490d      	ldr	r1, [pc, #52]	; (8000eec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <LoopForever+0xe>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ebc:	e002      	b.n	8000ec4 <LoopCopyDataInit>

08000ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec2:	3304      	adds	r3, #4

08000ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec8:	d3f9      	bcc.n	8000ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ecc:	4c0a      	ldr	r4, [pc, #40]	; (8000ef8 <LoopForever+0x16>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed0:	e001      	b.n	8000ed6 <LoopFillZerobss>

08000ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed4:	3204      	adds	r2, #4

08000ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed8:	d3fb      	bcc.n	8000ed2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eda:	f00a feed 	bl	800bcb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ede:	f7ff fb37 	bl	8000550 <main>

08000ee2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ee2:	e7fe      	b.n	8000ee2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ee4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eec:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000ef0:	0800bd98 	.word	0x0800bd98
  ldr r2, =_sbss
 8000ef4:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000ef8:	20001510 	.word	0x20001510

08000efc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000efc:	e7fe      	b.n	8000efc <ADC1_2_IRQHandler>
	...

08000f00 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <HAL_Init+0x28>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <HAL_Init+0x28>)
 8000f0a:	f043 0310 	orr.w	r3, r3, #16
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f10:	2003      	movs	r0, #3
 8000f12:	f001 fdef 	bl	8002af4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f16:	2000      	movs	r0, #0
 8000f18:	f000 f808 	bl	8000f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f1c:	f7ff fe28 	bl	8000b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40022000 	.word	0x40022000

08000f2c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_InitTick+0x54>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_InitTick+0x58>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f001 fe07 	bl	8002b5e <HAL_SYSTICK_Config>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00e      	b.n	8000f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b0f      	cmp	r3, #15
 8000f5e:	d80a      	bhi.n	8000f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f60:	2200      	movs	r2, #0
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f001 fdcf 	bl	8002b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f6c:	4a06      	ldr	r2, [pc, #24]	; (8000f88 <HAL_InitTick+0x5c>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e000      	b.n	8000f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000004 	.word	0x20000004
 8000f84:	2000000c 	.word	0x2000000c
 8000f88:	20000008 	.word	0x20000008

08000f8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x20>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	2000000c 	.word	0x2000000c
 8000fb0:	20000338 	.word	0x20000338

08000fb4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <HAL_GetTick+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000338 	.word	0x20000338

08000fcc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b09a      	sub	sp, #104	; 0x68
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001010:	2300      	movs	r3, #0
 8001012:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001016:	2300      	movs	r3, #0
 8001018:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d101      	bne.n	8001028 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e1c9      	b.n	80013bc <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f003 0310 	and.w	r3, r3, #16
 8001036:	2b00      	cmp	r3, #0
 8001038:	d176      	bne.n	8001128 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	2b00      	cmp	r3, #0
 8001040:	d152      	bne.n	80010e8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff fdab 	bl	8000bb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d13b      	bne.n	80010e8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f001 fb53 	bl	800271c <ADC_Disable>
 8001076:	4603      	mov	r3, r0
 8001078:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	f003 0310 	and.w	r3, r3, #16
 8001084:	2b00      	cmp	r3, #0
 8001086:	d12f      	bne.n	80010e8 <HAL_ADC_Init+0xe0>
 8001088:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800108c:	2b00      	cmp	r3, #0
 800108e:	d12b      	bne.n	80010e8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001098:	f023 0302 	bic.w	r3, r3, #2
 800109c:	f043 0202 	orr.w	r2, r3, #2
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80010b2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010c2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010c4:	4b86      	ldr	r3, [pc, #536]	; (80012e0 <HAL_ADC_Init+0x2d8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a86      	ldr	r2, [pc, #536]	; (80012e4 <HAL_ADC_Init+0x2dc>)
 80010ca:	fba2 2303 	umull	r2, r3, r2, r3
 80010ce:	0c9a      	lsrs	r2, r3, #18
 80010d0:	4613      	mov	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010da:	e002      	b.n	80010e2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	3b01      	subs	r3, #1
 80010e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1f9      	bne.n	80010dc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d007      	beq.n	8001106 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001104:	d110      	bne.n	8001128 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	f023 0312 	bic.w	r3, r3, #18
 800110e:	f043 0210 	orr.w	r2, r3, #16
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f043 0201 	orr.w	r2, r3, #1
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	f003 0310 	and.w	r3, r3, #16
 8001130:	2b00      	cmp	r3, #0
 8001132:	f040 8136 	bne.w	80013a2 <HAL_ADC_Init+0x39a>
 8001136:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800113a:	2b00      	cmp	r3, #0
 800113c:	f040 8131 	bne.w	80013a2 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800114a:	2b00      	cmp	r3, #0
 800114c:	f040 8129 	bne.w	80013a2 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001158:	f043 0202 	orr.w	r2, r3, #2
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001168:	d004      	beq.n	8001174 <HAL_ADC_Init+0x16c>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a5e      	ldr	r2, [pc, #376]	; (80012e8 <HAL_ADC_Init+0x2e0>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d101      	bne.n	8001178 <HAL_ADC_Init+0x170>
 8001174:	4b5d      	ldr	r3, [pc, #372]	; (80012ec <HAL_ADC_Init+0x2e4>)
 8001176:	e000      	b.n	800117a <HAL_ADC_Init+0x172>
 8001178:	4b5d      	ldr	r3, [pc, #372]	; (80012f0 <HAL_ADC_Init+0x2e8>)
 800117a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001184:	d102      	bne.n	800118c <HAL_ADC_Init+0x184>
 8001186:	4b58      	ldr	r3, [pc, #352]	; (80012e8 <HAL_ADC_Init+0x2e0>)
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	e01a      	b.n	80011c2 <HAL_ADC_Init+0x1ba>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a55      	ldr	r2, [pc, #340]	; (80012e8 <HAL_ADC_Init+0x2e0>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d103      	bne.n	800119e <HAL_ADC_Init+0x196>
 8001196:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	e011      	b.n	80011c2 <HAL_ADC_Init+0x1ba>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a54      	ldr	r2, [pc, #336]	; (80012f4 <HAL_ADC_Init+0x2ec>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d102      	bne.n	80011ae <HAL_ADC_Init+0x1a6>
 80011a8:	4b53      	ldr	r3, [pc, #332]	; (80012f8 <HAL_ADC_Init+0x2f0>)
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	e009      	b.n	80011c2 <HAL_ADC_Init+0x1ba>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a51      	ldr	r2, [pc, #324]	; (80012f8 <HAL_ADC_Init+0x2f0>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d102      	bne.n	80011be <HAL_ADC_Init+0x1b6>
 80011b8:	4b4e      	ldr	r3, [pc, #312]	; (80012f4 <HAL_ADC_Init+0x2ec>)
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	e001      	b.n	80011c2 <HAL_ADC_Init+0x1ba>
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d108      	bne.n	80011e2 <HAL_ADC_Init+0x1da>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d101      	bne.n	80011e2 <HAL_ADC_Init+0x1da>
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <HAL_ADC_Init+0x1dc>
 80011e2:	2300      	movs	r3, #0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d11c      	bne.n	8001222 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80011e8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d010      	beq.n	8001210 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d107      	bne.n	800120a <HAL_ADC_Init+0x202>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b01      	cmp	r3, #1
 8001204:	d101      	bne.n	800120a <HAL_ADC_Init+0x202>
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <HAL_ADC_Init+0x204>
 800120a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800120c:	2b00      	cmp	r3, #0
 800120e:	d108      	bne.n	8001222 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001210:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	431a      	orrs	r2, r3
 800121e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001220:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	7e5b      	ldrb	r3, [r3, #25]
 8001226:	035b      	lsls	r3, r3, #13
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800122c:	2a01      	cmp	r2, #1
 800122e:	d002      	beq.n	8001236 <HAL_ADC_Init+0x22e>
 8001230:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001234:	e000      	b.n	8001238 <HAL_ADC_Init+0x230>
 8001236:	2200      	movs	r2, #0
 8001238:	431a      	orrs	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	431a      	orrs	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	4313      	orrs	r3, r2
 8001246:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001248:	4313      	orrs	r3, r2
 800124a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d11b      	bne.n	800128e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	7e5b      	ldrb	r3, [r3, #25]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d109      	bne.n	8001272 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001262:	3b01      	subs	r3, #1
 8001264:	045a      	lsls	r2, r3, #17
 8001266:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001268:	4313      	orrs	r3, r2
 800126a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126e:	663b      	str	r3, [r7, #96]	; 0x60
 8001270:	e00d      	b.n	800128e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800127a:	f043 0220 	orr.w	r2, r3, #32
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	f043 0201 	orr.w	r2, r3, #1
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001292:	2b01      	cmp	r3, #1
 8001294:	d03a      	beq.n	800130c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a16      	ldr	r2, [pc, #88]	; (80012f4 <HAL_ADC_Init+0x2ec>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d004      	beq.n	80012aa <HAL_ADC_Init+0x2a2>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a14      	ldr	r2, [pc, #80]	; (80012f8 <HAL_ADC_Init+0x2f0>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d128      	bne.n	80012fc <HAL_ADC_Init+0x2f4>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ae:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80012b2:	d012      	beq.n	80012da <HAL_ADC_Init+0x2d2>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012bc:	d00a      	beq.n	80012d4 <HAL_ADC_Init+0x2cc>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80012c6:	d002      	beq.n	80012ce <HAL_ADC_Init+0x2c6>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012cc:	e018      	b.n	8001300 <HAL_ADC_Init+0x2f8>
 80012ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012d2:	e015      	b.n	8001300 <HAL_ADC_Init+0x2f8>
 80012d4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80012d8:	e012      	b.n	8001300 <HAL_ADC_Init+0x2f8>
 80012da:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80012de:	e00f      	b.n	8001300 <HAL_ADC_Init+0x2f8>
 80012e0:	20000004 	.word	0x20000004
 80012e4:	431bde83 	.word	0x431bde83
 80012e8:	50000100 	.word	0x50000100
 80012ec:	50000300 	.word	0x50000300
 80012f0:	50000700 	.word	0x50000700
 80012f4:	50000400 	.word	0x50000400
 80012f8:	50000500 	.word	0x50000500
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001304:	4313      	orrs	r3, r2
 8001306:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001308:	4313      	orrs	r3, r2
 800130a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 030c 	and.w	r3, r3, #12
 8001316:	2b00      	cmp	r3, #0
 8001318:	d114      	bne.n	8001344 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	6812      	ldr	r2, [r2, #0]
 8001324:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001328:	f023 0302 	bic.w	r3, r3, #2
 800132c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7e1b      	ldrb	r3, [r3, #24]
 8001332:	039a      	lsls	r2, r3, #14
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	4313      	orrs	r3, r2
 800133e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001340:	4313      	orrs	r3, r2
 8001342:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <HAL_ADC_Init+0x3bc>)
 800134c:	4013      	ands	r3, r2
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	6812      	ldr	r2, [r2, #0]
 8001352:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001354:	430b      	orrs	r3, r1
 8001356:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d10c      	bne.n	800137a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f023 010f 	bic.w	r1, r3, #15
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	1e5a      	subs	r2, r3, #1
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	631a      	str	r2, [r3, #48]	; 0x30
 8001378:	e007      	b.n	800138a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 020f 	bic.w	r2, r2, #15
 8001388:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f023 0303 	bic.w	r3, r3, #3
 8001398:	f043 0201 	orr.w	r2, r3, #1
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	641a      	str	r2, [r3, #64]	; 0x40
 80013a0:	e00a      	b.n	80013b8 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f023 0312 	bic.w	r3, r3, #18
 80013aa:	f043 0210 	orr.w	r2, r3, #16
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80013b2:	2301      	movs	r3, #1
 80013b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80013b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3768      	adds	r7, #104	; 0x68
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	fff0c007 	.word	0xfff0c007

080013c8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f040 80f9 	bne.w	80015d6 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d101      	bne.n	80013f2 <HAL_ADC_Start+0x2a>
 80013ee:	2302      	movs	r3, #2
 80013f0:	e0f4      	b.n	80015dc <HAL_ADC_Start+0x214>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f001 f92a 	bl	8002654 <ADC_Enable>
 8001400:	4603      	mov	r3, r0
 8001402:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	2b00      	cmp	r3, #0
 8001408:	f040 80e0 	bne.w	80015cc <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001414:	f023 0301 	bic.w	r3, r3, #1
 8001418:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001428:	d004      	beq.n	8001434 <HAL_ADC_Start+0x6c>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a6d      	ldr	r2, [pc, #436]	; (80015e4 <HAL_ADC_Start+0x21c>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d106      	bne.n	8001442 <HAL_ADC_Start+0x7a>
 8001434:	4b6c      	ldr	r3, [pc, #432]	; (80015e8 <HAL_ADC_Start+0x220>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 031f 	and.w	r3, r3, #31
 800143c:	2b00      	cmp	r3, #0
 800143e:	d010      	beq.n	8001462 <HAL_ADC_Start+0x9a>
 8001440:	e005      	b.n	800144e <HAL_ADC_Start+0x86>
 8001442:	4b6a      	ldr	r3, [pc, #424]	; (80015ec <HAL_ADC_Start+0x224>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 031f 	and.w	r3, r3, #31
 800144a:	2b00      	cmp	r3, #0
 800144c:	d009      	beq.n	8001462 <HAL_ADC_Start+0x9a>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001456:	d004      	beq.n	8001462 <HAL_ADC_Start+0x9a>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a64      	ldr	r2, [pc, #400]	; (80015f0 <HAL_ADC_Start+0x228>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d115      	bne.n	800148e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d036      	beq.n	80014ea <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001484:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800148c:	e02d      	b.n	80014ea <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014a2:	d004      	beq.n	80014ae <HAL_ADC_Start+0xe6>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a4e      	ldr	r2, [pc, #312]	; (80015e4 <HAL_ADC_Start+0x21c>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d10a      	bne.n	80014c4 <HAL_ADC_Start+0xfc>
 80014ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	bf14      	ite	ne
 80014bc:	2301      	movne	r3, #1
 80014be:	2300      	moveq	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	e008      	b.n	80014d6 <HAL_ADC_Start+0x10e>
 80014c4:	4b4a      	ldr	r3, [pc, #296]	; (80015f0 <HAL_ADC_Start+0x228>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	bf14      	ite	ne
 80014d0:	2301      	movne	r3, #1
 80014d2:	2300      	moveq	r3, #0
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d007      	beq.n	80014ea <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014f6:	d106      	bne.n	8001506 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fc:	f023 0206 	bic.w	r2, r3, #6
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	645a      	str	r2, [r3, #68]	; 0x44
 8001504:	e002      	b.n	800150c <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	221c      	movs	r2, #28
 800151a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001524:	d004      	beq.n	8001530 <HAL_ADC_Start+0x168>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a2e      	ldr	r2, [pc, #184]	; (80015e4 <HAL_ADC_Start+0x21c>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d106      	bne.n	800153e <HAL_ADC_Start+0x176>
 8001530:	4b2d      	ldr	r3, [pc, #180]	; (80015e8 <HAL_ADC_Start+0x220>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 031f 	and.w	r3, r3, #31
 8001538:	2b00      	cmp	r3, #0
 800153a:	d03e      	beq.n	80015ba <HAL_ADC_Start+0x1f2>
 800153c:	e005      	b.n	800154a <HAL_ADC_Start+0x182>
 800153e:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <HAL_ADC_Start+0x224>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 031f 	and.w	r3, r3, #31
 8001546:	2b00      	cmp	r3, #0
 8001548:	d037      	beq.n	80015ba <HAL_ADC_Start+0x1f2>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001552:	d004      	beq.n	800155e <HAL_ADC_Start+0x196>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a22      	ldr	r2, [pc, #136]	; (80015e4 <HAL_ADC_Start+0x21c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d106      	bne.n	800156c <HAL_ADC_Start+0x1a4>
 800155e:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <HAL_ADC_Start+0x220>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 031f 	and.w	r3, r3, #31
 8001566:	2b05      	cmp	r3, #5
 8001568:	d027      	beq.n	80015ba <HAL_ADC_Start+0x1f2>
 800156a:	e005      	b.n	8001578 <HAL_ADC_Start+0x1b0>
 800156c:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <HAL_ADC_Start+0x224>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 031f 	and.w	r3, r3, #31
 8001574:	2b05      	cmp	r3, #5
 8001576:	d020      	beq.n	80015ba <HAL_ADC_Start+0x1f2>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001580:	d004      	beq.n	800158c <HAL_ADC_Start+0x1c4>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <HAL_ADC_Start+0x21c>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d106      	bne.n	800159a <HAL_ADC_Start+0x1d2>
 800158c:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <HAL_ADC_Start+0x220>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f003 031f 	and.w	r3, r3, #31
 8001594:	2b09      	cmp	r3, #9
 8001596:	d010      	beq.n	80015ba <HAL_ADC_Start+0x1f2>
 8001598:	e005      	b.n	80015a6 <HAL_ADC_Start+0x1de>
 800159a:	4b14      	ldr	r3, [pc, #80]	; (80015ec <HAL_ADC_Start+0x224>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 031f 	and.w	r3, r3, #31
 80015a2:	2b09      	cmp	r3, #9
 80015a4:	d009      	beq.n	80015ba <HAL_ADC_Start+0x1f2>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015ae:	d004      	beq.n	80015ba <HAL_ADC_Start+0x1f2>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <HAL_ADC_Start+0x228>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d10f      	bne.n	80015da <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f042 0204 	orr.w	r2, r2, #4
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	e006      	b.n	80015da <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80015d4:	e001      	b.n	80015da <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015d6:	2302      	movs	r3, #2
 80015d8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015da:	7bfb      	ldrb	r3, [r7, #15]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	50000100 	.word	0x50000100
 80015e8:	50000300 	.word	0x50000300
 80015ec:	50000700 	.word	0x50000700
 80015f0:	50000400 	.word	0x50000400

080015f4 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001606:	2b01      	cmp	r3, #1
 8001608:	d101      	bne.n	800160e <HAL_ADC_Stop+0x1a>
 800160a:	2302      	movs	r3, #2
 800160c:	e023      	b.n	8001656 <HAL_ADC_Stop+0x62>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001616:	216c      	movs	r1, #108	; 0x6c
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f001 f8e5 	bl	80027e8 <ADC_ConversionStop>
 800161e:	4603      	mov	r3, r0
 8001620:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d111      	bne.n	800164c <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f001 f877 	bl	800271c <ADC_Disable>
 800162e:	4603      	mov	r3, r0
 8001630:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d109      	bne.n	800164c <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	f043 0201 	orr.w	r2, r3, #1
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001654:	7bfb      	ldrb	r3, [r7, #15]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	2b08      	cmp	r3, #8
 8001674:	d102      	bne.n	800167c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001676:	2308      	movs	r3, #8
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	e03a      	b.n	80016f2 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001684:	d004      	beq.n	8001690 <HAL_ADC_PollForConversion+0x30>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a72      	ldr	r2, [pc, #456]	; (8001854 <HAL_ADC_PollForConversion+0x1f4>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d101      	bne.n	8001694 <HAL_ADC_PollForConversion+0x34>
 8001690:	4b71      	ldr	r3, [pc, #452]	; (8001858 <HAL_ADC_PollForConversion+0x1f8>)
 8001692:	e000      	b.n	8001696 <HAL_ADC_PollForConversion+0x36>
 8001694:	4b71      	ldr	r3, [pc, #452]	; (800185c <HAL_ADC_PollForConversion+0x1fc>)
 8001696:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 031f 	and.w	r3, r3, #31
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d112      	bne.n	80016ca <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d11d      	bne.n	80016ee <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f043 0220 	orr.w	r2, r3, #32
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e0bf      	b.n	800184a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00b      	beq.n	80016ee <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f043 0220 	orr.w	r2, r3, #32
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e0ad      	b.n	800184a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80016ee:	230c      	movs	r3, #12
 80016f0:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016fa:	d004      	beq.n	8001706 <HAL_ADC_PollForConversion+0xa6>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a54      	ldr	r2, [pc, #336]	; (8001854 <HAL_ADC_PollForConversion+0x1f4>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d106      	bne.n	8001714 <HAL_ADC_PollForConversion+0xb4>
 8001706:	4b54      	ldr	r3, [pc, #336]	; (8001858 <HAL_ADC_PollForConversion+0x1f8>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 031f 	and.w	r3, r3, #31
 800170e:	2b00      	cmp	r3, #0
 8001710:	d010      	beq.n	8001734 <HAL_ADC_PollForConversion+0xd4>
 8001712:	e005      	b.n	8001720 <HAL_ADC_PollForConversion+0xc0>
 8001714:	4b51      	ldr	r3, [pc, #324]	; (800185c <HAL_ADC_PollForConversion+0x1fc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 031f 	and.w	r3, r3, #31
 800171c:	2b00      	cmp	r3, #0
 800171e:	d009      	beq.n	8001734 <HAL_ADC_PollForConversion+0xd4>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001728:	d004      	beq.n	8001734 <HAL_ADC_PollForConversion+0xd4>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a4c      	ldr	r2, [pc, #304]	; (8001860 <HAL_ADC_PollForConversion+0x200>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d104      	bne.n	800173e <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	e00f      	b.n	800175e <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001746:	d004      	beq.n	8001752 <HAL_ADC_PollForConversion+0xf2>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a41      	ldr	r2, [pc, #260]	; (8001854 <HAL_ADC_PollForConversion+0x1f4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d102      	bne.n	8001758 <HAL_ADC_PollForConversion+0xf8>
 8001752:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001756:	e000      	b.n	800175a <HAL_ADC_PollForConversion+0xfa>
 8001758:	4b41      	ldr	r3, [pc, #260]	; (8001860 <HAL_ADC_PollForConversion+0x200>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800175e:	f7ff fc29 	bl	8000fb4 <HAL_GetTick>
 8001762:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001764:	e021      	b.n	80017aa <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176c:	d01d      	beq.n	80017aa <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d007      	beq.n	8001784 <HAL_ADC_PollForConversion+0x124>
 8001774:	f7ff fc1e 	bl	8000fb4 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d212      	bcs.n	80017aa <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	4013      	ands	r3, r2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10b      	bne.n	80017aa <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f043 0204 	orr.w	r2, r3, #4
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e04f      	b.n	800184a <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0d6      	beq.n	8001766 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d131      	bne.n	8001836 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d12c      	bne.n	8001836 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d125      	bne.n	8001836 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d112      	bne.n	800181e <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d112      	bne.n	8001836 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	f043 0201 	orr.w	r2, r3, #1
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	641a      	str	r2, [r3, #64]	; 0x40
 800181c:	e00b      	b.n	8001836 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f043 0220 	orr.w	r2, r3, #32
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	f043 0201 	orr.w	r2, r3, #1
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d103      	bne.n	8001848 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	50000100 	.word	0x50000100
 8001858:	50000300 	.word	0x50000300
 800185c:	50000700 	.word	0x50000700
 8001860:	50000400 	.word	0x50000400

08001864 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800188c:	2300      	movs	r3, #0
 800188e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	f003 0304 	and.w	r3, r3, #4
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d004      	beq.n	80018b8 <HAL_ADC_IRQHandler+0x38>
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10b      	bne.n	80018d0 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 80bc 	beq.w	8001a3c <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 80b6 	beq.w	8001a3c <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d105      	bne.n	80018e8 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018f0:	d004      	beq.n	80018fc <HAL_ADC_IRQHandler+0x7c>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a90      	ldr	r2, [pc, #576]	; (8001b38 <HAL_ADC_IRQHandler+0x2b8>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d106      	bne.n	800190a <HAL_ADC_IRQHandler+0x8a>
 80018fc:	4b8f      	ldr	r3, [pc, #572]	; (8001b3c <HAL_ADC_IRQHandler+0x2bc>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 031f 	and.w	r3, r3, #31
 8001904:	2b00      	cmp	r3, #0
 8001906:	d03e      	beq.n	8001986 <HAL_ADC_IRQHandler+0x106>
 8001908:	e005      	b.n	8001916 <HAL_ADC_IRQHandler+0x96>
 800190a:	4b8d      	ldr	r3, [pc, #564]	; (8001b40 <HAL_ADC_IRQHandler+0x2c0>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 031f 	and.w	r3, r3, #31
 8001912:	2b00      	cmp	r3, #0
 8001914:	d037      	beq.n	8001986 <HAL_ADC_IRQHandler+0x106>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800191e:	d004      	beq.n	800192a <HAL_ADC_IRQHandler+0xaa>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a84      	ldr	r2, [pc, #528]	; (8001b38 <HAL_ADC_IRQHandler+0x2b8>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d106      	bne.n	8001938 <HAL_ADC_IRQHandler+0xb8>
 800192a:	4b84      	ldr	r3, [pc, #528]	; (8001b3c <HAL_ADC_IRQHandler+0x2bc>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 031f 	and.w	r3, r3, #31
 8001932:	2b05      	cmp	r3, #5
 8001934:	d027      	beq.n	8001986 <HAL_ADC_IRQHandler+0x106>
 8001936:	e005      	b.n	8001944 <HAL_ADC_IRQHandler+0xc4>
 8001938:	4b81      	ldr	r3, [pc, #516]	; (8001b40 <HAL_ADC_IRQHandler+0x2c0>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 031f 	and.w	r3, r3, #31
 8001940:	2b05      	cmp	r3, #5
 8001942:	d020      	beq.n	8001986 <HAL_ADC_IRQHandler+0x106>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800194c:	d004      	beq.n	8001958 <HAL_ADC_IRQHandler+0xd8>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a79      	ldr	r2, [pc, #484]	; (8001b38 <HAL_ADC_IRQHandler+0x2b8>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d106      	bne.n	8001966 <HAL_ADC_IRQHandler+0xe6>
 8001958:	4b78      	ldr	r3, [pc, #480]	; (8001b3c <HAL_ADC_IRQHandler+0x2bc>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 031f 	and.w	r3, r3, #31
 8001960:	2b09      	cmp	r3, #9
 8001962:	d010      	beq.n	8001986 <HAL_ADC_IRQHandler+0x106>
 8001964:	e005      	b.n	8001972 <HAL_ADC_IRQHandler+0xf2>
 8001966:	4b76      	ldr	r3, [pc, #472]	; (8001b40 <HAL_ADC_IRQHandler+0x2c0>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 031f 	and.w	r3, r3, #31
 800196e:	2b09      	cmp	r3, #9
 8001970:	d009      	beq.n	8001986 <HAL_ADC_IRQHandler+0x106>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800197a:	d004      	beq.n	8001986 <HAL_ADC_IRQHandler+0x106>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a70      	ldr	r2, [pc, #448]	; (8001b44 <HAL_ADC_IRQHandler+0x2c4>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d104      	bne.n	8001990 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	61bb      	str	r3, [r7, #24]
 800198e:	e00f      	b.n	80019b0 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001998:	d004      	beq.n	80019a4 <HAL_ADC_IRQHandler+0x124>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a66      	ldr	r2, [pc, #408]	; (8001b38 <HAL_ADC_IRQHandler+0x2b8>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d102      	bne.n	80019aa <HAL_ADC_IRQHandler+0x12a>
 80019a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019a8:	e000      	b.n	80019ac <HAL_ADC_IRQHandler+0x12c>
 80019aa:	4b66      	ldr	r3, [pc, #408]	; (8001b44 <HAL_ADC_IRQHandler+0x2c4>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d137      	bne.n	8001a2e <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d132      	bne.n	8001a2e <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d02d      	beq.n	8001a2e <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d11a      	bne.n	8001a16 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 020c 	bic.w	r2, r2, #12
 80019ee:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d112      	bne.n	8001a2e <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	f043 0201 	orr.w	r2, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	641a      	str	r2, [r3, #64]	; 0x40
 8001a14:	e00b      	b.n	8001a2e <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f043 0210 	orr.w	r2, r3, #16
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f043 0201 	orr.w	r2, r3, #1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff facc 	bl	8000fcc <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	220c      	movs	r2, #12
 8001a3a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	f003 0320 	and.w	r3, r3, #32
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d004      	beq.n	8001a50 <HAL_ADC_IRQHandler+0x1d0>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f003 0320 	and.w	r3, r3, #32
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d10b      	bne.n	8001a68 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 8138 	beq.w	8001ccc <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8132 	beq.w	8001ccc <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a7c:	d004      	beq.n	8001a88 <HAL_ADC_IRQHandler+0x208>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a2d      	ldr	r2, [pc, #180]	; (8001b38 <HAL_ADC_IRQHandler+0x2b8>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d106      	bne.n	8001a96 <HAL_ADC_IRQHandler+0x216>
 8001a88:	4b2c      	ldr	r3, [pc, #176]	; (8001b3c <HAL_ADC_IRQHandler+0x2bc>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 031f 	and.w	r3, r3, #31
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d03e      	beq.n	8001b12 <HAL_ADC_IRQHandler+0x292>
 8001a94:	e005      	b.n	8001aa2 <HAL_ADC_IRQHandler+0x222>
 8001a96:	4b2a      	ldr	r3, [pc, #168]	; (8001b40 <HAL_ADC_IRQHandler+0x2c0>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d037      	beq.n	8001b12 <HAL_ADC_IRQHandler+0x292>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001aaa:	d004      	beq.n	8001ab6 <HAL_ADC_IRQHandler+0x236>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a21      	ldr	r2, [pc, #132]	; (8001b38 <HAL_ADC_IRQHandler+0x2b8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d106      	bne.n	8001ac4 <HAL_ADC_IRQHandler+0x244>
 8001ab6:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <HAL_ADC_IRQHandler+0x2bc>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 031f 	and.w	r3, r3, #31
 8001abe:	2b05      	cmp	r3, #5
 8001ac0:	d027      	beq.n	8001b12 <HAL_ADC_IRQHandler+0x292>
 8001ac2:	e005      	b.n	8001ad0 <HAL_ADC_IRQHandler+0x250>
 8001ac4:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <HAL_ADC_IRQHandler+0x2c0>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 031f 	and.w	r3, r3, #31
 8001acc:	2b05      	cmp	r3, #5
 8001ace:	d020      	beq.n	8001b12 <HAL_ADC_IRQHandler+0x292>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ad8:	d004      	beq.n	8001ae4 <HAL_ADC_IRQHandler+0x264>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a16      	ldr	r2, [pc, #88]	; (8001b38 <HAL_ADC_IRQHandler+0x2b8>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d106      	bne.n	8001af2 <HAL_ADC_IRQHandler+0x272>
 8001ae4:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <HAL_ADC_IRQHandler+0x2bc>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 031f 	and.w	r3, r3, #31
 8001aec:	2b09      	cmp	r3, #9
 8001aee:	d010      	beq.n	8001b12 <HAL_ADC_IRQHandler+0x292>
 8001af0:	e005      	b.n	8001afe <HAL_ADC_IRQHandler+0x27e>
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <HAL_ADC_IRQHandler+0x2c0>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 031f 	and.w	r3, r3, #31
 8001afa:	2b09      	cmp	r3, #9
 8001afc:	d009      	beq.n	8001b12 <HAL_ADC_IRQHandler+0x292>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b06:	d004      	beq.n	8001b12 <HAL_ADC_IRQHandler+0x292>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0d      	ldr	r2, [pc, #52]	; (8001b44 <HAL_ADC_IRQHandler+0x2c4>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d104      	bne.n	8001b1c <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	61bb      	str	r3, [r7, #24]
 8001b1a:	e018      	b.n	8001b4e <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b24:	d004      	beq.n	8001b30 <HAL_ADC_IRQHandler+0x2b0>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a03      	ldr	r2, [pc, #12]	; (8001b38 <HAL_ADC_IRQHandler+0x2b8>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d10b      	bne.n	8001b48 <HAL_ADC_IRQHandler+0x2c8>
 8001b30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b34:	e009      	b.n	8001b4a <HAL_ADC_IRQHandler+0x2ca>
 8001b36:	bf00      	nop
 8001b38:	50000100 	.word	0x50000100
 8001b3c:	50000300 	.word	0x50000300
 8001b40:	50000700 	.word	0x50000700
 8001b44:	50000400 	.word	0x50000400
 8001b48:	4b92      	ldr	r3, [pc, #584]	; (8001d94 <HAL_ADC_IRQHandler+0x514>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b54:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f040 80b0 	bne.w	8001cbe <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00d      	beq.n	8001b84 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f040 80a3 	bne.w	8001cbe <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f040 809d 	bne.w	8001cbe <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 8097 	beq.w	8001cbe <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b98:	d004      	beq.n	8001ba4 <HAL_ADC_IRQHandler+0x324>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a7e      	ldr	r2, [pc, #504]	; (8001d98 <HAL_ADC_IRQHandler+0x518>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d106      	bne.n	8001bb2 <HAL_ADC_IRQHandler+0x332>
 8001ba4:	4b7d      	ldr	r3, [pc, #500]	; (8001d9c <HAL_ADC_IRQHandler+0x51c>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 031f 	and.w	r3, r3, #31
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d03e      	beq.n	8001c2e <HAL_ADC_IRQHandler+0x3ae>
 8001bb0:	e005      	b.n	8001bbe <HAL_ADC_IRQHandler+0x33e>
 8001bb2:	4b7b      	ldr	r3, [pc, #492]	; (8001da0 <HAL_ADC_IRQHandler+0x520>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 031f 	and.w	r3, r3, #31
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d037      	beq.n	8001c2e <HAL_ADC_IRQHandler+0x3ae>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bc6:	d004      	beq.n	8001bd2 <HAL_ADC_IRQHandler+0x352>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a72      	ldr	r2, [pc, #456]	; (8001d98 <HAL_ADC_IRQHandler+0x518>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d106      	bne.n	8001be0 <HAL_ADC_IRQHandler+0x360>
 8001bd2:	4b72      	ldr	r3, [pc, #456]	; (8001d9c <HAL_ADC_IRQHandler+0x51c>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 031f 	and.w	r3, r3, #31
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d027      	beq.n	8001c2e <HAL_ADC_IRQHandler+0x3ae>
 8001bde:	e005      	b.n	8001bec <HAL_ADC_IRQHandler+0x36c>
 8001be0:	4b6f      	ldr	r3, [pc, #444]	; (8001da0 <HAL_ADC_IRQHandler+0x520>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	2b06      	cmp	r3, #6
 8001bea:	d020      	beq.n	8001c2e <HAL_ADC_IRQHandler+0x3ae>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bf4:	d004      	beq.n	8001c00 <HAL_ADC_IRQHandler+0x380>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a67      	ldr	r2, [pc, #412]	; (8001d98 <HAL_ADC_IRQHandler+0x518>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d106      	bne.n	8001c0e <HAL_ADC_IRQHandler+0x38e>
 8001c00:	4b66      	ldr	r3, [pc, #408]	; (8001d9c <HAL_ADC_IRQHandler+0x51c>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	2b07      	cmp	r3, #7
 8001c0a:	d010      	beq.n	8001c2e <HAL_ADC_IRQHandler+0x3ae>
 8001c0c:	e005      	b.n	8001c1a <HAL_ADC_IRQHandler+0x39a>
 8001c0e:	4b64      	ldr	r3, [pc, #400]	; (8001da0 <HAL_ADC_IRQHandler+0x520>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 031f 	and.w	r3, r3, #31
 8001c16:	2b07      	cmp	r3, #7
 8001c18:	d009      	beq.n	8001c2e <HAL_ADC_IRQHandler+0x3ae>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c22:	d004      	beq.n	8001c2e <HAL_ADC_IRQHandler+0x3ae>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a5a      	ldr	r2, [pc, #360]	; (8001d94 <HAL_ADC_IRQHandler+0x514>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d104      	bne.n	8001c38 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	e00f      	b.n	8001c58 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c40:	d004      	beq.n	8001c4c <HAL_ADC_IRQHandler+0x3cc>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a54      	ldr	r2, [pc, #336]	; (8001d98 <HAL_ADC_IRQHandler+0x518>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d102      	bne.n	8001c52 <HAL_ADC_IRQHandler+0x3d2>
 8001c4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c50:	e000      	b.n	8001c54 <HAL_ADC_IRQHandler+0x3d4>
 8001c52:	4b50      	ldr	r3, [pc, #320]	; (8001d94 <HAL_ADC_IRQHandler+0x514>)
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d12d      	bne.n	8001cbe <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d11a      	bne.n	8001ca6 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c7e:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d112      	bne.n	8001cbe <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	f043 0201 	orr.w	r2, r3, #1
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	641a      	str	r2, [r3, #64]	; 0x40
 8001ca4:	e00b      	b.n	8001cbe <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f043 0210 	orr.w	r2, r3, #16
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	f043 0201 	orr.w	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f8c4 	bl	8001e4c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2260      	movs	r2, #96	; 0x60
 8001cca:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d011      	beq.n	8001cfa <HAL_ADC_IRQHandler+0x47a>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00c      	beq.n	8001cfa <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff f977 	bl	8000fe0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2280      	movs	r2, #128	; 0x80
 8001cf8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d012      	beq.n	8001d2a <HAL_ADC_IRQHandler+0x4aa>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00d      	beq.n	8001d2a <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f8aa 	bl	8001e74 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d28:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d012      	beq.n	8001d5a <HAL_ADC_IRQHandler+0x4da>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00d      	beq.n	8001d5a <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f89c 	bl	8001e88 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d58:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d04f      	beq.n	8001e04 <HAL_ADC_IRQHandler+0x584>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 0310 	and.w	r3, r3, #16
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d04a      	beq.n	8001e04 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d102      	bne.n	8001d7c <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8001d76:	2301      	movs	r3, #1
 8001d78:	61fb      	str	r3, [r7, #28]
 8001d7a:	e02d      	b.n	8001dd8 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d84:	d004      	beq.n	8001d90 <HAL_ADC_IRQHandler+0x510>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a03      	ldr	r2, [pc, #12]	; (8001d98 <HAL_ADC_IRQHandler+0x518>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d109      	bne.n	8001da4 <HAL_ADC_IRQHandler+0x524>
 8001d90:	4b02      	ldr	r3, [pc, #8]	; (8001d9c <HAL_ADC_IRQHandler+0x51c>)
 8001d92:	e008      	b.n	8001da6 <HAL_ADC_IRQHandler+0x526>
 8001d94:	50000400 	.word	0x50000400
 8001d98:	50000100 	.word	0x50000100
 8001d9c:	50000300 	.word	0x50000300
 8001da0:	50000700 	.word	0x50000700
 8001da4:	4b28      	ldr	r3, [pc, #160]	; (8001e48 <HAL_ADC_IRQHandler+0x5c8>)
 8001da6:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d109      	bne.n	8001dc8 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d10a      	bne.n	8001dd8 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	e007      	b.n	8001dd8 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d10e      	bne.n	8001dfc <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	f043 0202 	orr.w	r2, r3, #2
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff f8fc 	bl	8000ff4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2210      	movs	r2, #16
 8001e02:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d018      	beq.n	8001e40 <HAL_ADC_IRQHandler+0x5c0>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d013      	beq.n	8001e40 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e28:	f043 0208 	orr.w	r2, r3, #8
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e38:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f810 	bl	8001e60 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001e40:	bf00      	nop
 8001e42:	3720      	adds	r7, #32
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	50000700 	.word	0x50000700

08001e4c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b09b      	sub	sp, #108	; 0x6c
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x22>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e2c8      	b.n	8002450 <HAL_ADC_ConfigChannel+0x5b4>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f040 82ac 	bne.w	800242e <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d81c      	bhi.n	8001f18 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	231f      	movs	r3, #31
 8001ef4:	4093      	lsls	r3, r2
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	4019      	ands	r1, r3
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	631a      	str	r2, [r3, #48]	; 0x30
 8001f16:	e063      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b09      	cmp	r3, #9
 8001f1e:	d81e      	bhi.n	8001f5e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4413      	add	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	3b1e      	subs	r3, #30
 8001f34:	221f      	movs	r2, #31
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	4019      	ands	r1, r3
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	6818      	ldr	r0, [r3, #0]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4413      	add	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	3b1e      	subs	r3, #30
 8001f50:	fa00 f203 	lsl.w	r2, r0, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	635a      	str	r2, [r3, #52]	; 0x34
 8001f5c:	e040      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b0e      	cmp	r3, #14
 8001f64:	d81e      	bhi.n	8001fa4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4413      	add	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	3b3c      	subs	r3, #60	; 0x3c
 8001f7a:	221f      	movs	r2, #31
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	4019      	ands	r1, r3
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	3b3c      	subs	r3, #60	; 0x3c
 8001f96:	fa00 f203 	lsl.w	r2, r0, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	639a      	str	r2, [r3, #56]	; 0x38
 8001fa2:	e01d      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4413      	add	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	3b5a      	subs	r3, #90	; 0x5a
 8001fb8:	221f      	movs	r2, #31
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	4019      	ands	r1, r3
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	6818      	ldr	r0, [r3, #0]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	3b5a      	subs	r3, #90	; 0x5a
 8001fd4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f040 80e5 	bne.w	80021ba <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b09      	cmp	r3, #9
 8001ff6:	d91c      	bls.n	8002032 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6999      	ldr	r1, [r3, #24]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	3b1e      	subs	r3, #30
 800200a:	2207      	movs	r2, #7
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	4019      	ands	r1, r3
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	6898      	ldr	r0, [r3, #8]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4613      	mov	r3, r2
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4413      	add	r3, r2
 8002022:	3b1e      	subs	r3, #30
 8002024:	fa00 f203 	lsl.w	r2, r0, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	619a      	str	r2, [r3, #24]
 8002030:	e019      	b.n	8002066 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6959      	ldr	r1, [r3, #20]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4613      	mov	r3, r2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4413      	add	r3, r2
 8002042:	2207      	movs	r2, #7
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	4019      	ands	r1, r3
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	6898      	ldr	r0, [r3, #8]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4613      	mov	r3, r2
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	4413      	add	r3, r2
 800205a:	fa00 f203 	lsl.w	r2, r0, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	695a      	ldr	r2, [r3, #20]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	08db      	lsrs	r3, r3, #3
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	3b01      	subs	r3, #1
 8002084:	2b03      	cmp	r3, #3
 8002086:	d84f      	bhi.n	8002128 <HAL_ADC_ConfigChannel+0x28c>
 8002088:	a201      	add	r2, pc, #4	; (adr r2, 8002090 <HAL_ADC_ConfigChannel+0x1f4>)
 800208a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208e:	bf00      	nop
 8002090:	080020a1 	.word	0x080020a1
 8002094:	080020c3 	.word	0x080020c3
 8002098:	080020e5 	.word	0x080020e5
 800209c:	08002107 	.word	0x08002107
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020a6:	4b99      	ldr	r3, [pc, #612]	; (800230c <HAL_ADC_ConfigChannel+0x470>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	0691      	lsls	r1, r2, #26
 80020b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020b2:	430a      	orrs	r2, r1
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80020be:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80020c0:	e07b      	b.n	80021ba <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80020c8:	4b90      	ldr	r3, [pc, #576]	; (800230c <HAL_ADC_ConfigChannel+0x470>)
 80020ca:	4013      	ands	r3, r2
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	6812      	ldr	r2, [r2, #0]
 80020d0:	0691      	lsls	r1, r2, #26
 80020d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020d4:	430a      	orrs	r2, r1
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80020e0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80020e2:	e06a      	b.n	80021ba <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80020ea:	4b88      	ldr	r3, [pc, #544]	; (800230c <HAL_ADC_ConfigChannel+0x470>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	6812      	ldr	r2, [r2, #0]
 80020f2:	0691      	lsls	r1, r2, #26
 80020f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020f6:	430a      	orrs	r2, r1
 80020f8:	431a      	orrs	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002102:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002104:	e059      	b.n	80021ba <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800210c:	4b7f      	ldr	r3, [pc, #508]	; (800230c <HAL_ADC_ConfigChannel+0x470>)
 800210e:	4013      	ands	r3, r2
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	0691      	lsls	r1, r2, #26
 8002116:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002118:	430a      	orrs	r2, r1
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002124:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002126:	e048      	b.n	80021ba <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	069b      	lsls	r3, r3, #26
 8002138:	429a      	cmp	r2, r3
 800213a:	d107      	bne.n	800214c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800214a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002152:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	069b      	lsls	r3, r3, #26
 800215c:	429a      	cmp	r2, r3
 800215e:	d107      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800216e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002176:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	069b      	lsls	r3, r3, #26
 8002180:	429a      	cmp	r2, r3
 8002182:	d107      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002192:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800219a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	069b      	lsls	r3, r3, #26
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d107      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021b6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80021b8:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 0303 	and.w	r3, r3, #3
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d108      	bne.n	80021da <HAL_ADC_ConfigChannel+0x33e>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_ADC_ConfigChannel+0x33e>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <HAL_ADC_ConfigChannel+0x340>
 80021da:	2300      	movs	r3, #0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f040 8131 	bne.w	8002444 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d00f      	beq.n	800220a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2201      	movs	r2, #1
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43da      	mvns	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	400a      	ands	r2, r1
 8002204:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002208:	e049      	b.n	800229e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2201      	movs	r2, #1
 8002218:	409a      	lsls	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2b09      	cmp	r3, #9
 800222a:	d91c      	bls.n	8002266 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6999      	ldr	r1, [r3, #24]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	4613      	mov	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4413      	add	r3, r2
 800223c:	3b1b      	subs	r3, #27
 800223e:	2207      	movs	r2, #7
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	4019      	ands	r1, r3
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	6898      	ldr	r0, [r3, #8]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4613      	mov	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4413      	add	r3, r2
 8002256:	3b1b      	subs	r3, #27
 8002258:	fa00 f203 	lsl.w	r2, r0, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	619a      	str	r2, [r3, #24]
 8002264:	e01b      	b.n	800229e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6959      	ldr	r1, [r3, #20]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	4613      	mov	r3, r2
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	4413      	add	r3, r2
 8002278:	2207      	movs	r2, #7
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	4019      	ands	r1, r3
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	6898      	ldr	r0, [r3, #8]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	4613      	mov	r3, r2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4413      	add	r3, r2
 8002292:	fa00 f203 	lsl.w	r2, r0, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022a6:	d004      	beq.n	80022b2 <HAL_ADC_ConfigChannel+0x416>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a18      	ldr	r2, [pc, #96]	; (8002310 <HAL_ADC_ConfigChannel+0x474>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d101      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x41a>
 80022b2:	4b18      	ldr	r3, [pc, #96]	; (8002314 <HAL_ADC_ConfigChannel+0x478>)
 80022b4:	e000      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x41c>
 80022b6:	4b18      	ldr	r3, [pc, #96]	; (8002318 <HAL_ADC_ConfigChannel+0x47c>)
 80022b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b10      	cmp	r3, #16
 80022c0:	d105      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80022c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d015      	beq.n	80022fa <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80022d2:	2b11      	cmp	r3, #17
 80022d4:	d105      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80022d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00b      	beq.n	80022fa <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80022e6:	2b12      	cmp	r3, #18
 80022e8:	f040 80ac 	bne.w	8002444 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80022ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f040 80a5 	bne.w	8002444 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002302:	d10b      	bne.n	800231c <HAL_ADC_ConfigChannel+0x480>
 8002304:	4b02      	ldr	r3, [pc, #8]	; (8002310 <HAL_ADC_ConfigChannel+0x474>)
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	e023      	b.n	8002352 <HAL_ADC_ConfigChannel+0x4b6>
 800230a:	bf00      	nop
 800230c:	83fff000 	.word	0x83fff000
 8002310:	50000100 	.word	0x50000100
 8002314:	50000300 	.word	0x50000300
 8002318:	50000700 	.word	0x50000700
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a4e      	ldr	r2, [pc, #312]	; (800245c <HAL_ADC_ConfigChannel+0x5c0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d103      	bne.n	800232e <HAL_ADC_ConfigChannel+0x492>
 8002326:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	e011      	b.n	8002352 <HAL_ADC_ConfigChannel+0x4b6>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a4b      	ldr	r2, [pc, #300]	; (8002460 <HAL_ADC_ConfigChannel+0x5c4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d102      	bne.n	800233e <HAL_ADC_ConfigChannel+0x4a2>
 8002338:	4b4a      	ldr	r3, [pc, #296]	; (8002464 <HAL_ADC_ConfigChannel+0x5c8>)
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	e009      	b.n	8002352 <HAL_ADC_ConfigChannel+0x4b6>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a48      	ldr	r2, [pc, #288]	; (8002464 <HAL_ADC_ConfigChannel+0x5c8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d102      	bne.n	800234e <HAL_ADC_ConfigChannel+0x4b2>
 8002348:	4b45      	ldr	r3, [pc, #276]	; (8002460 <HAL_ADC_ConfigChannel+0x5c4>)
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	e001      	b.n	8002352 <HAL_ADC_ConfigChannel+0x4b6>
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	2b01      	cmp	r3, #1
 800235e:	d108      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x4d6>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x4d6>
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <HAL_ADC_ConfigChannel+0x4d8>
 8002372:	2300      	movs	r3, #0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d150      	bne.n	800241a <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002378:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800237a:	2b00      	cmp	r3, #0
 800237c:	d010      	beq.n	80023a0 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b01      	cmp	r3, #1
 8002388:	d107      	bne.n	800239a <HAL_ADC_ConfigChannel+0x4fe>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_ADC_ConfigChannel+0x4fe>
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <HAL_ADC_ConfigChannel+0x500>
 800239a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800239c:	2b00      	cmp	r3, #0
 800239e:	d13c      	bne.n	800241a <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b10      	cmp	r3, #16
 80023a6:	d11d      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x548>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023b0:	d118      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80023b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023bc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023be:	4b2a      	ldr	r3, [pc, #168]	; (8002468 <HAL_ADC_ConfigChannel+0x5cc>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a2a      	ldr	r2, [pc, #168]	; (800246c <HAL_ADC_ConfigChannel+0x5d0>)
 80023c4:	fba2 2303 	umull	r2, r3, r2, r3
 80023c8:	0c9a      	lsrs	r2, r3, #18
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023d4:	e002      	b.n	80023dc <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	3b01      	subs	r3, #1
 80023da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f9      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80023e2:	e02e      	b.n	8002442 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b11      	cmp	r3, #17
 80023ea:	d10b      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x568>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023f4:	d106      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80023f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80023fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002400:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002402:	e01e      	b.n	8002442 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b12      	cmp	r3, #18
 800240a:	d11a      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800240c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002414:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002416:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002418:	e013      	b.n	8002442 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f043 0220 	orr.w	r2, r3, #32
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800242c:	e00a      	b.n	8002444 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f043 0220 	orr.w	r2, r3, #32
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002440:	e000      	b.n	8002444 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002442:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800244c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002450:	4618      	mov	r0, r3
 8002452:	376c      	adds	r7, #108	; 0x6c
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	50000100 	.word	0x50000100
 8002460:	50000400 	.word	0x50000400
 8002464:	50000500 	.word	0x50000500
 8002468:	20000004 	.word	0x20000004
 800246c:	431bde83 	.word	0x431bde83

08002470 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002470:	b480      	push	{r7}
 8002472:	b099      	sub	sp, #100	; 0x64
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002488:	d102      	bne.n	8002490 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800248a:	4b6d      	ldr	r3, [pc, #436]	; (8002640 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	e01a      	b.n	80024c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a6a      	ldr	r2, [pc, #424]	; (8002640 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d103      	bne.n	80024a2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800249a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	e011      	b.n	80024c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a67      	ldr	r2, [pc, #412]	; (8002644 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d102      	bne.n	80024b2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80024ac:	4b66      	ldr	r3, [pc, #408]	; (8002648 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	e009      	b.n	80024c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a64      	ldr	r2, [pc, #400]	; (8002648 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d102      	bne.n	80024c2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80024bc:	4b61      	ldr	r3, [pc, #388]	; (8002644 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	e001      	b.n	80024c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80024c2:	2300      	movs	r3, #0
 80024c4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0b0      	b.n	8002632 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80024da:	2302      	movs	r3, #2
 80024dc:	e0a9      	b.n	8002632 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f040 808d 	bne.w	8002610 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f040 8086 	bne.w	8002610 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800250c:	d004      	beq.n	8002518 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a4b      	ldr	r2, [pc, #300]	; (8002640 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d101      	bne.n	800251c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002518:	4b4c      	ldr	r3, [pc, #304]	; (800264c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800251a:	e000      	b.n	800251e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800251c:	4b4c      	ldr	r3, [pc, #304]	; (8002650 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800251e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d040      	beq.n	80025aa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002528:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	6859      	ldr	r1, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800253a:	035b      	lsls	r3, r3, #13
 800253c:	430b      	orrs	r3, r1
 800253e:	431a      	orrs	r2, r3
 8002540:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002542:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	2b01      	cmp	r3, #1
 8002550:	d108      	bne.n	8002564 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002564:	2300      	movs	r3, #0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d15c      	bne.n	8002624 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b01      	cmp	r3, #1
 8002574:	d107      	bne.n	8002586 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002586:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002588:	2b00      	cmp	r3, #0
 800258a:	d14b      	bne.n	8002624 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800258c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002594:	f023 030f 	bic.w	r3, r3, #15
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	6811      	ldr	r1, [r2, #0]
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	6892      	ldr	r2, [r2, #8]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	431a      	orrs	r2, r3
 80025a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025a6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80025a8:	e03c      	b.n	8002624 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80025aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025b4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d108      	bne.n	80025d6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80025d6:	2300      	movs	r3, #0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d123      	bne.n	8002624 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d107      	bne.n	80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d101      	bne.n	80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80025f8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d112      	bne.n	8002624 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80025fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002606:	f023 030f 	bic.w	r3, r3, #15
 800260a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800260c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800260e:	e009      	b.n	8002624 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	f043 0220 	orr.w	r2, r3, #32
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002622:	e000      	b.n	8002626 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002624:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800262e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002632:	4618      	mov	r0, r3
 8002634:	3764      	adds	r7, #100	; 0x64
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	50000100 	.word	0x50000100
 8002644:	50000400 	.word	0x50000400
 8002648:	50000500 	.word	0x50000500
 800264c:	50000300 	.word	0x50000300
 8002650:	50000700 	.word	0x50000700

08002654 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	2b01      	cmp	r3, #1
 800266c:	d108      	bne.n	8002680 <ADC_Enable+0x2c>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <ADC_Enable+0x2c>
 800267c:	2301      	movs	r3, #1
 800267e:	e000      	b.n	8002682 <ADC_Enable+0x2e>
 8002680:	2300      	movs	r3, #0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d143      	bne.n	800270e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	4b22      	ldr	r3, [pc, #136]	; (8002718 <ADC_Enable+0xc4>)
 800268e:	4013      	ands	r3, r2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00d      	beq.n	80026b0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	f043 0210 	orr.w	r2, r3, #16
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a4:	f043 0201 	orr.w	r2, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e02f      	b.n	8002710 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80026c0:	f7fe fc78 	bl	8000fb4 <HAL_GetTick>
 80026c4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80026c6:	e01b      	b.n	8002700 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026c8:	f7fe fc74 	bl	8000fb4 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d914      	bls.n	8002700 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d00d      	beq.n	8002700 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	f043 0210 	orr.w	r2, r3, #16
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f4:	f043 0201 	orr.w	r2, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e007      	b.n	8002710 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b01      	cmp	r3, #1
 800270c:	d1dc      	bne.n	80026c8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	8000003f 	.word	0x8000003f

0800271c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	2b01      	cmp	r3, #1
 8002734:	d108      	bne.n	8002748 <ADC_Disable+0x2c>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <ADC_Disable+0x2c>
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <ADC_Disable+0x2e>
 8002748:	2300      	movs	r3, #0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d047      	beq.n	80027de <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 030d 	and.w	r3, r3, #13
 8002758:	2b01      	cmp	r3, #1
 800275a:	d10f      	bne.n	800277c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0202 	orr.w	r2, r2, #2
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2203      	movs	r2, #3
 8002772:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002774:	f7fe fc1e 	bl	8000fb4 <HAL_GetTick>
 8002778:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800277a:	e029      	b.n	80027d0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	f043 0210 	orr.w	r2, r3, #16
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278c:	f043 0201 	orr.w	r2, r3, #1
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e023      	b.n	80027e0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002798:	f7fe fc0c 	bl	8000fb4 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d914      	bls.n	80027d0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d10d      	bne.n	80027d0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	f043 0210 	orr.w	r2, r3, #16
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c4:	f043 0201 	orr.w	r2, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e007      	b.n	80027e0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d0dc      	beq.n	8002798 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 030c 	and.w	r3, r3, #12
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 809b 	beq.w	8002944 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002818:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800281c:	d12a      	bne.n	8002874 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002822:	2b01      	cmp	r3, #1
 8002824:	d126      	bne.n	8002874 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800282a:	2b01      	cmp	r3, #1
 800282c:	d122      	bne.n	8002874 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800282e:	230c      	movs	r3, #12
 8002830:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002832:	e014      	b.n	800285e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	4a46      	ldr	r2, [pc, #280]	; (8002950 <ADC_ConversionStop+0x168>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d90d      	bls.n	8002858 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	f043 0210 	orr.w	r2, r3, #16
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284c:	f043 0201 	orr.w	r2, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e076      	b.n	8002946 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	3301      	adds	r3, #1
 800285c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002868:	2b40      	cmp	r3, #64	; 0x40
 800286a:	d1e3      	bne.n	8002834 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2240      	movs	r2, #64	; 0x40
 8002872:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	2b60      	cmp	r3, #96	; 0x60
 8002878:	d015      	beq.n	80028a6 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b04      	cmp	r3, #4
 8002886:	d10e      	bne.n	80028a6 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002892:	2b00      	cmp	r3, #0
 8002894:	d107      	bne.n	80028a6 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 0210 	orr.w	r2, r2, #16
 80028a4:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b0c      	cmp	r3, #12
 80028aa:	d015      	beq.n	80028d8 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d10e      	bne.n	80028d8 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d107      	bne.n	80028d8 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0220 	orr.w	r2, r2, #32
 80028d6:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	2b60      	cmp	r3, #96	; 0x60
 80028dc:	d005      	beq.n	80028ea <ADC_ConversionStop+0x102>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2b6c      	cmp	r3, #108	; 0x6c
 80028e2:	d105      	bne.n	80028f0 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80028e4:	230c      	movs	r3, #12
 80028e6:	617b      	str	r3, [r7, #20]
        break;
 80028e8:	e005      	b.n	80028f6 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80028ea:	2308      	movs	r3, #8
 80028ec:	617b      	str	r3, [r7, #20]
        break;
 80028ee:	e002      	b.n	80028f6 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80028f0:	2304      	movs	r3, #4
 80028f2:	617b      	str	r3, [r7, #20]
        break;
 80028f4:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80028f6:	f7fe fb5d 	bl	8000fb4 <HAL_GetTick>
 80028fa:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80028fc:	e01b      	b.n	8002936 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80028fe:	f7fe fb59 	bl	8000fb4 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b0b      	cmp	r3, #11
 800290a:	d914      	bls.n	8002936 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	4013      	ands	r3, r2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00d      	beq.n	8002936 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f043 0210 	orr.w	r2, r3, #16
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292a:	f043 0201 	orr.w	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e007      	b.n	8002946 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	4013      	ands	r3, r2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1dc      	bne.n	80028fe <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	000993ff 	.word	0x000993ff

08002954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002964:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <__NVIC_SetPriorityGrouping+0x44>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002970:	4013      	ands	r3, r2
 8002972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800297c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002986:	4a04      	ldr	r2, [pc, #16]	; (8002998 <__NVIC_SetPriorityGrouping+0x44>)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	60d3      	str	r3, [r2, #12]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a0:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <__NVIC_GetPriorityGrouping+0x18>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	0a1b      	lsrs	r3, r3, #8
 80029a6:	f003 0307 	and.w	r3, r3, #7
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	db0b      	blt.n	80029e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	f003 021f 	and.w	r2, r3, #31
 80029d0:	4907      	ldr	r1, [pc, #28]	; (80029f0 <__NVIC_EnableIRQ+0x38>)
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	2001      	movs	r0, #1
 80029da:	fa00 f202 	lsl.w	r2, r0, r2
 80029de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	e000e100 	.word	0xe000e100

080029f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	6039      	str	r1, [r7, #0]
 80029fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	db0a      	blt.n	8002a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	490c      	ldr	r1, [pc, #48]	; (8002a40 <__NVIC_SetPriority+0x4c>)
 8002a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a12:	0112      	lsls	r2, r2, #4
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	440b      	add	r3, r1
 8002a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a1c:	e00a      	b.n	8002a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	4908      	ldr	r1, [pc, #32]	; (8002a44 <__NVIC_SetPriority+0x50>)
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	3b04      	subs	r3, #4
 8002a2c:	0112      	lsls	r2, r2, #4
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	440b      	add	r3, r1
 8002a32:	761a      	strb	r2, [r3, #24]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000e100 	.word	0xe000e100
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b089      	sub	sp, #36	; 0x24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f1c3 0307 	rsb	r3, r3, #7
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	bf28      	it	cs
 8002a66:	2304      	movcs	r3, #4
 8002a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	2b06      	cmp	r3, #6
 8002a70:	d902      	bls.n	8002a78 <NVIC_EncodePriority+0x30>
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3b03      	subs	r3, #3
 8002a76:	e000      	b.n	8002a7a <NVIC_EncodePriority+0x32>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43da      	mvns	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	401a      	ands	r2, r3
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a90:	f04f 31ff 	mov.w	r1, #4294967295
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9a:	43d9      	mvns	r1, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa0:	4313      	orrs	r3, r2
         );
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3724      	adds	r7, #36	; 0x24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ac0:	d301      	bcc.n	8002ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e00f      	b.n	8002ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ac6:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <SysTick_Config+0x40>)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ace:	210f      	movs	r1, #15
 8002ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad4:	f7ff ff8e 	bl	80029f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <SysTick_Config+0x40>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ade:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <SysTick_Config+0x40>)
 8002ae0:	2207      	movs	r2, #7
 8002ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	e000e010 	.word	0xe000e010

08002af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7ff ff29 	bl	8002954 <__NVIC_SetPriorityGrouping>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b086      	sub	sp, #24
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	4603      	mov	r3, r0
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
 8002b16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b1c:	f7ff ff3e 	bl	800299c <__NVIC_GetPriorityGrouping>
 8002b20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68b9      	ldr	r1, [r7, #8]
 8002b26:	6978      	ldr	r0, [r7, #20]
 8002b28:	f7ff ff8e 	bl	8002a48 <NVIC_EncodePriority>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b32:	4611      	mov	r1, r2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff ff5d 	bl	80029f4 <__NVIC_SetPriority>
}
 8002b3a:	bf00      	nop
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	4603      	mov	r3, r0
 8002b4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff ff31 	bl	80029b8 <__NVIC_EnableIRQ>
}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff ffa2 	bl	8002ab0 <SysTick_Config>
 8002b6c:	4603      	mov	r3, r0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b86:	e154      	b.n	8002e32 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	fa01 f303 	lsl.w	r3, r1, r3
 8002b94:	4013      	ands	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 8146 	beq.w	8002e2c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d005      	beq.n	8002bb8 <HAL_GPIO_Init+0x40>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d130      	bne.n	8002c1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bee:	2201      	movs	r2, #1
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	f003 0201 	and.w	r2, r3, #1
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d017      	beq.n	8002c56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	2203      	movs	r2, #3
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d123      	bne.n	8002caa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	08da      	lsrs	r2, r3, #3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3208      	adds	r2, #8
 8002c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	220f      	movs	r2, #15
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4013      	ands	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	691a      	ldr	r2, [r3, #16]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	08da      	lsrs	r2, r3, #3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3208      	adds	r2, #8
 8002ca4:	6939      	ldr	r1, [r7, #16]
 8002ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	2203      	movs	r2, #3
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 0203 	and.w	r2, r3, #3
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 80a0 	beq.w	8002e2c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cec:	4b58      	ldr	r3, [pc, #352]	; (8002e50 <HAL_GPIO_Init+0x2d8>)
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	4a57      	ldr	r2, [pc, #348]	; (8002e50 <HAL_GPIO_Init+0x2d8>)
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	6193      	str	r3, [r2, #24]
 8002cf8:	4b55      	ldr	r3, [pc, #340]	; (8002e50 <HAL_GPIO_Init+0x2d8>)
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d04:	4a53      	ldr	r2, [pc, #332]	; (8002e54 <HAL_GPIO_Init+0x2dc>)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	089b      	lsrs	r3, r3, #2
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	220f      	movs	r2, #15
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4013      	ands	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d2e:	d019      	beq.n	8002d64 <HAL_GPIO_Init+0x1ec>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a49      	ldr	r2, [pc, #292]	; (8002e58 <HAL_GPIO_Init+0x2e0>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d013      	beq.n	8002d60 <HAL_GPIO_Init+0x1e8>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a48      	ldr	r2, [pc, #288]	; (8002e5c <HAL_GPIO_Init+0x2e4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d00d      	beq.n	8002d5c <HAL_GPIO_Init+0x1e4>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a47      	ldr	r2, [pc, #284]	; (8002e60 <HAL_GPIO_Init+0x2e8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d007      	beq.n	8002d58 <HAL_GPIO_Init+0x1e0>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a46      	ldr	r2, [pc, #280]	; (8002e64 <HAL_GPIO_Init+0x2ec>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d101      	bne.n	8002d54 <HAL_GPIO_Init+0x1dc>
 8002d50:	2304      	movs	r3, #4
 8002d52:	e008      	b.n	8002d66 <HAL_GPIO_Init+0x1ee>
 8002d54:	2305      	movs	r3, #5
 8002d56:	e006      	b.n	8002d66 <HAL_GPIO_Init+0x1ee>
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e004      	b.n	8002d66 <HAL_GPIO_Init+0x1ee>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e002      	b.n	8002d66 <HAL_GPIO_Init+0x1ee>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <HAL_GPIO_Init+0x1ee>
 8002d64:	2300      	movs	r3, #0
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	f002 0203 	and.w	r2, r2, #3
 8002d6c:	0092      	lsls	r2, r2, #2
 8002d6e:	4093      	lsls	r3, r2
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d76:	4937      	ldr	r1, [pc, #220]	; (8002e54 <HAL_GPIO_Init+0x2dc>)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	089b      	lsrs	r3, r3, #2
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d84:	4b38      	ldr	r3, [pc, #224]	; (8002e68 <HAL_GPIO_Init+0x2f0>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4013      	ands	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002da8:	4a2f      	ldr	r2, [pc, #188]	; (8002e68 <HAL_GPIO_Init+0x2f0>)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dae:	4b2e      	ldr	r3, [pc, #184]	; (8002e68 <HAL_GPIO_Init+0x2f0>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	43db      	mvns	r3, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002dd2:	4a25      	ldr	r2, [pc, #148]	; (8002e68 <HAL_GPIO_Init+0x2f0>)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dd8:	4b23      	ldr	r3, [pc, #140]	; (8002e68 <HAL_GPIO_Init+0x2f0>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4013      	ands	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002dfc:	4a1a      	ldr	r2, [pc, #104]	; (8002e68 <HAL_GPIO_Init+0x2f0>)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e02:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <HAL_GPIO_Init+0x2f0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002e26:	4a10      	ldr	r2, [pc, #64]	; (8002e68 <HAL_GPIO_Init+0x2f0>)
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	fa22 f303 	lsr.w	r3, r2, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f47f aea3 	bne.w	8002b88 <HAL_GPIO_Init+0x10>
  }
}
 8002e42:	bf00      	nop
 8002e44:	bf00      	nop
 8002e46:	371c      	adds	r7, #28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40010000 	.word	0x40010000
 8002e58:	48000400 	.word	0x48000400
 8002e5c:	48000800 	.word	0x48000800
 8002e60:	48000c00 	.word	0x48000c00
 8002e64:	48001000 	.word	0x48001000
 8002e68:	40010400 	.word	0x40010400

08002e6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	887b      	ldrh	r3, [r7, #2]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e84:	2301      	movs	r3, #1
 8002e86:	73fb      	strb	r3, [r7, #15]
 8002e88:	e001      	b.n	8002e8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	807b      	strh	r3, [r7, #2]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002eac:	787b      	ldrb	r3, [r7, #1]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002eb2:	887a      	ldrh	r2, [r7, #2]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002eb8:	e002      	b.n	8002ec0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002eba:	887a      	ldrh	r2, [r7, #2]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ede:	887a      	ldrh	r2, [r7, #2]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	041a      	lsls	r2, r3, #16
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	43d9      	mvns	r1, r3
 8002eea:	887b      	ldrh	r3, [r7, #2]
 8002eec:	400b      	ands	r3, r1
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	619a      	str	r2, [r3, #24]
}
 8002ef4:	bf00      	nop
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f0a:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f0c:	695a      	ldr	r2, [r3, #20]
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	4013      	ands	r3, r2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d006      	beq.n	8002f24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f16:	4a05      	ldr	r2, [pc, #20]	; (8002f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f18:	88fb      	ldrh	r3, [r7, #6]
 8002f1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f1c:	88fb      	ldrh	r3, [r7, #6]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fd fa74 	bl	800040c <HAL_GPIO_EXTI_Callback>
  }
}
 8002f24:	bf00      	nop
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40010400 	.word	0x40010400

08002f30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f32:	b08b      	sub	sp, #44	; 0x2c
 8002f34:	af06      	add	r7, sp, #24
 8002f36:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e0c4      	b.n	80030cc <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f008 fbd0 	bl	800b6fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2203      	movs	r2, #3
 8002f60:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f004 faf6 	bl	800755a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f6e:	2300      	movs	r3, #0
 8002f70:	73fb      	strb	r3, [r7, #15]
 8002f72:	e040      	b.n	8002ff6 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	440b      	add	r3, r1
 8002f84:	3301      	adds	r3, #1
 8002f86:	2201      	movs	r2, #1
 8002f88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	440b      	add	r3, r1
 8002f9a:	7bfa      	ldrb	r2, [r7, #15]
 8002f9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	440b      	add	r3, r1
 8002fae:	3303      	adds	r3, #3
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fb4:	7bfa      	ldrb	r2, [r7, #15]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	440b      	add	r3, r1
 8002fc2:	3338      	adds	r3, #56	; 0x38
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fc8:	7bfa      	ldrb	r2, [r7, #15]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	440b      	add	r3, r1
 8002fd6:	333c      	adds	r3, #60	; 0x3c
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fdc:	7bfa      	ldrb	r2, [r7, #15]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	440b      	add	r3, r1
 8002fea:	3340      	adds	r3, #64	; 0x40
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	73fb      	strb	r3, [r7, #15]
 8002ff6:	7bfa      	ldrb	r2, [r7, #15]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d3b9      	bcc.n	8002f74 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003000:	2300      	movs	r3, #0
 8003002:	73fb      	strb	r3, [r7, #15]
 8003004:	e044      	b.n	8003090 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003006:	7bfa      	ldrb	r2, [r7, #15]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	440b      	add	r3, r1
 8003014:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003018:	2200      	movs	r2, #0
 800301a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800301c:	7bfa      	ldrb	r2, [r7, #15]
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	440b      	add	r3, r1
 800302a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800302e:	7bfa      	ldrb	r2, [r7, #15]
 8003030:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003032:	7bfa      	ldrb	r2, [r7, #15]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	440b      	add	r3, r1
 8003040:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003048:	7bfa      	ldrb	r2, [r7, #15]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	440b      	add	r3, r1
 8003056:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800305e:	7bfa      	ldrb	r2, [r7, #15]
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	440b      	add	r3, r1
 800306c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003074:	7bfa      	ldrb	r2, [r7, #15]
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	440b      	add	r3, r1
 8003082:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800308a:	7bfb      	ldrb	r3, [r7, #15]
 800308c:	3301      	adds	r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
 8003090:	7bfa      	ldrb	r2, [r7, #15]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	429a      	cmp	r2, r3
 8003098:	d3b5      	bcc.n	8003006 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	603b      	str	r3, [r7, #0]
 80030a0:	687e      	ldr	r6, [r7, #4]
 80030a2:	466d      	mov	r5, sp
 80030a4:	f106 0410 	add.w	r4, r6, #16
 80030a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ac:	6823      	ldr	r3, [r4, #0]
 80030ae:	602b      	str	r3, [r5, #0]
 80030b0:	1d33      	adds	r3, r6, #4
 80030b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030b4:	6838      	ldr	r0, [r7, #0]
 80030b6:	f004 fa6b 	bl	8007590 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030d4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d101      	bne.n	80030ea <HAL_PCD_Start+0x16>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e016      	b.n	8003118 <HAL_PCD_Start+0x44>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f004 fa18 	bl	800752c <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80030fc:	2101      	movs	r1, #1
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f008 fd9a 	bl	800bc38 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f006 fcd8 	bl	8009abe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f006 fcd1 	bl	8009ad4 <USB_ReadInterrupts>
 8003132:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 fab2 	bl	80036a8 <PCD_EP_ISR_Handler>

    return;
 8003144:	e0bd      	b.n	80032c2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314c:	2b00      	cmp	r3, #0
 800314e:	d013      	beq.n	8003178 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003158:	b29a      	uxth	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003162:	b292      	uxth	r2, r2
 8003164:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f008 fb68 	bl	800b83e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800316e:	2100      	movs	r1, #0
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f8a9 	bl	80032c8 <HAL_PCD_SetAddress>

    return;
 8003176:	e0a4      	b.n	80032c2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00c      	beq.n	800319c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800318a:	b29a      	uxth	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003194:	b292      	uxth	r2, r2
 8003196:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800319a:	e092      	b.n	80032c2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00c      	beq.n	80031c0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031b8:	b292      	uxth	r2, r2
 80031ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80031be:	e080      	b.n	80032c2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d027      	beq.n	800321a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0204 	bic.w	r2, r2, #4
 80031dc:	b292      	uxth	r2, r2
 80031de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0208 	bic.w	r2, r2, #8
 80031f4:	b292      	uxth	r2, r2
 80031f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f008 fb58 	bl	800b8b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003208:	b29a      	uxth	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003212:	b292      	uxth	r2, r2
 8003214:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003218:	e053      	b.n	80032c2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003220:	2b00      	cmp	r3, #0
 8003222:	d027      	beq.n	8003274 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800322c:	b29a      	uxth	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0208 	orr.w	r2, r2, #8
 8003236:	b292      	uxth	r2, r2
 8003238:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003244:	b29a      	uxth	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800324e:	b292      	uxth	r2, r2
 8003250:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800325c:	b29a      	uxth	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0204 	orr.w	r2, r2, #4
 8003266:	b292      	uxth	r2, r2
 8003268:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f008 fb05 	bl	800b87c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003272:	e026      	b.n	80032c2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00f      	beq.n	800329e <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003286:	b29a      	uxth	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003290:	b292      	uxth	r2, r2
 8003292:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f008 fac3 	bl	800b822 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800329c:	e011      	b.n	80032c2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00c      	beq.n	80032c2 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032ba:	b292      	uxth	r2, r2
 80032bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80032c0:	bf00      	nop
  }
}
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_PCD_SetAddress+0x1a>
 80032de:	2302      	movs	r3, #2
 80032e0:	e013      	b.n	800330a <HAL_PCD_SetAddress+0x42>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	78fa      	ldrb	r2, [r7, #3]
 80032ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	78fa      	ldrb	r2, [r7, #3]
 80032f8:	4611      	mov	r1, r2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f006 fbcb 	bl	8009a96 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	4608      	mov	r0, r1
 800331c:	4611      	mov	r1, r2
 800331e:	461a      	mov	r2, r3
 8003320:	4603      	mov	r3, r0
 8003322:	70fb      	strb	r3, [r7, #3]
 8003324:	460b      	mov	r3, r1
 8003326:	803b      	strh	r3, [r7, #0]
 8003328:	4613      	mov	r3, r2
 800332a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003334:	2b00      	cmp	r3, #0
 8003336:	da0e      	bge.n	8003356 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003338:	78fb      	ldrb	r3, [r7, #3]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	4413      	add	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2201      	movs	r2, #1
 8003352:	705a      	strb	r2, [r3, #1]
 8003354:	e00e      	b.n	8003374 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003356:	78fb      	ldrb	r3, [r7, #3]
 8003358:	f003 0207 	and.w	r2, r3, #7
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	4413      	add	r3, r2
 800336c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003374:	78fb      	ldrb	r3, [r7, #3]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	b2da      	uxtb	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003380:	883a      	ldrh	r2, [r7, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	78ba      	ldrb	r2, [r7, #2]
 800338a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800338c:	78bb      	ldrb	r3, [r7, #2]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d102      	bne.n	8003398 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_PCD_EP_Open+0x94>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e00e      	b.n	80033c4 <HAL_PCD_EP_Open+0xb2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68f9      	ldr	r1, [r7, #12]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f004 f90d 	bl	80075d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80033c2:	7afb      	ldrb	r3, [r7, #11]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	da0e      	bge.n	80033fe <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	4413      	add	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	705a      	strb	r2, [r3, #1]
 80033fc:	e00e      	b.n	800341c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033fe:	78fb      	ldrb	r3, [r7, #3]
 8003400:	f003 0207 	and.w	r2, r3, #7
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	4413      	add	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800341c:	78fb      	ldrb	r3, [r7, #3]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	b2da      	uxtb	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_PCD_EP_Close+0x6a>
 8003432:	2302      	movs	r3, #2
 8003434:	e00e      	b.n	8003454 <HAL_PCD_EP_Close+0x88>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68f9      	ldr	r1, [r7, #12]
 8003444:	4618      	mov	r0, r3
 8003446:	f004 fc89 	bl	8007d5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	607a      	str	r2, [r7, #4]
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	460b      	mov	r3, r1
 800346a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800346c:	7afb      	ldrb	r3, [r7, #11]
 800346e:	f003 0207 	and.w	r2, r3, #7
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4413      	add	r3, r2
 8003482:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2200      	movs	r2, #0
 8003494:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2200      	movs	r2, #0
 800349a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800349c:	7afb      	ldrb	r3, [r7, #11]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6979      	ldr	r1, [r7, #20]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f004 fe41 	bl	8008136 <USB_EPStartXfer>

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	460b      	mov	r3, r1
 80034c8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80034ca:	78fb      	ldrb	r3, [r7, #3]
 80034cc:	f003 0207 	and.w	r2, r3, #7
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	440b      	add	r3, r1
 80034dc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80034e0:	681b      	ldr	r3, [r3, #0]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b086      	sub	sp, #24
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	60f8      	str	r0, [r7, #12]
 80034f6:	607a      	str	r2, [r7, #4]
 80034f8:	603b      	str	r3, [r7, #0]
 80034fa:	460b      	mov	r3, r1
 80034fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034fe:	7afb      	ldrb	r3, [r7, #11]
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	4413      	add	r3, r2
 8003512:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	2200      	movs	r2, #0
 8003532:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	2201      	movs	r2, #1
 8003538:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800353a:	7afb      	ldrb	r3, [r7, #11]
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	b2da      	uxtb	r2, r3
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6979      	ldr	r1, [r7, #20]
 800354c:	4618      	mov	r0, r3
 800354e:	f004 fdf2 	bl	8008136 <USB_EPStartXfer>

  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003568:	78fb      	ldrb	r3, [r7, #3]
 800356a:	f003 0207 	and.w	r2, r3, #7
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	429a      	cmp	r2, r3
 8003574:	d901      	bls.n	800357a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e03e      	b.n	80035f8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800357a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800357e:	2b00      	cmp	r3, #0
 8003580:	da0e      	bge.n	80035a0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	4613      	mov	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	4413      	add	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2201      	movs	r2, #1
 800359c:	705a      	strb	r2, [r3, #1]
 800359e:	e00c      	b.n	80035ba <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035a0:	78fa      	ldrb	r2, [r7, #3]
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	4413      	add	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2201      	movs	r2, #1
 80035be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <HAL_PCD_EP_SetStall+0x7e>
 80035d6:	2302      	movs	r3, #2
 80035d8:	e00e      	b.n	80035f8 <HAL_PCD_EP_SetStall+0x9c>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68f9      	ldr	r1, [r7, #12]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f006 f955 	bl	8009898 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	460b      	mov	r3, r1
 800360a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	f003 020f 	and.w	r2, r3, #15
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	429a      	cmp	r2, r3
 8003618:	d901      	bls.n	800361e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e040      	b.n	80036a0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800361e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003622:	2b00      	cmp	r3, #0
 8003624:	da0e      	bge.n	8003644 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003626:	78fb      	ldrb	r3, [r7, #3]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	4613      	mov	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	4413      	add	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2201      	movs	r2, #1
 8003640:	705a      	strb	r2, [r3, #1]
 8003642:	e00e      	b.n	8003662 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003644:	78fb      	ldrb	r3, [r7, #3]
 8003646:	f003 0207 	and.w	r2, r3, #7
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	4413      	add	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003668:	78fb      	ldrb	r3, [r7, #3]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	b2da      	uxtb	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_PCD_EP_ClrStall+0x82>
 800367e:	2302      	movs	r3, #2
 8003680:	e00e      	b.n	80036a0 <HAL_PCD_EP_ClrStall+0xa0>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68f9      	ldr	r1, [r7, #12]
 8003690:	4618      	mov	r0, r3
 8003692:	f006 f952 	bl	800993a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b096      	sub	sp, #88	; 0x58
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80036b0:	e3bf      	b.n	8003e32 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80036be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	f003 030f 	and.w	r3, r3, #15
 80036c8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80036cc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f040 8179 	bne.w	80039c8 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80036d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80036da:	f003 0310 	and.w	r3, r3, #16
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d152      	bne.n	8003788 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80036ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f2:	81fb      	strh	r3, [r7, #14]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	89fb      	ldrh	r3, [r7, #14]
 80036fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003702:	b29b      	uxth	r3, r3
 8003704:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	3328      	adds	r3, #40	; 0x28
 800370a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003714:	b29b      	uxth	r3, r3
 8003716:	461a      	mov	r2, r3
 8003718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	4413      	add	r3, r2
 8003720:	3302      	adds	r3, #2
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	4413      	add	r3, r2
 800372a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003736:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800373a:	695a      	ldr	r2, [r3, #20]
 800373c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	441a      	add	r2, r3
 8003742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003744:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003746:	2100      	movs	r1, #0
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f008 f850 	bl	800b7ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 836b 	beq.w	8003e32 <PCD_EP_ISR_Handler+0x78a>
 800375c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	2b00      	cmp	r3, #0
 8003762:	f040 8366 	bne.w	8003e32 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800376c:	b2db      	uxtb	r3, r3
 800376e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003772:	b2da      	uxtb	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	b292      	uxth	r2, r2
 800377a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003786:	e354      	b.n	8003e32 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800378e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800379a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800379e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d034      	beq.n	8003810 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	461a      	mov	r2, r3
 80037b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4413      	add	r3, r2
 80037ba:	3306      	adds	r3, #6
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6812      	ldr	r2, [r2, #0]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037c8:	881b      	ldrh	r3, [r3, #0]
 80037ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80037ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037d0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6818      	ldr	r0, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80037dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037de:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80037e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	f006 f9cb 	bl	8009b80 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	881b      	ldrh	r3, [r3, #0]
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80037f6:	4013      	ands	r3, r2
 80037f8:	823b      	strh	r3, [r7, #16]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	8a3a      	ldrh	r2, [r7, #16]
 8003800:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003804:	b292      	uxth	r2, r2
 8003806:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f007 ffc3 	bl	800b794 <HAL_PCD_SetupStageCallback>
 800380e:	e310      	b.n	8003e32 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003810:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003814:	2b00      	cmp	r3, #0
 8003816:	f280 830c 	bge.w	8003e32 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	b29a      	uxth	r2, r3
 8003822:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003826:	4013      	ands	r3, r2
 8003828:	83fb      	strh	r3, [r7, #30]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	8bfa      	ldrh	r2, [r7, #30]
 8003830:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003834:	b292      	uxth	r2, r2
 8003836:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003840:	b29b      	uxth	r3, r3
 8003842:	461a      	mov	r2, r3
 8003844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	4413      	add	r3, r2
 800384c:	3306      	adds	r3, #6
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	4413      	add	r3, r2
 8003856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003862:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d019      	beq.n	80038a0 <PCD_EP_ISR_Handler+0x1f8>
 800386c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d015      	beq.n	80038a0 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800387a:	6959      	ldr	r1, [r3, #20]
 800387c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800387e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003882:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003884:	b29b      	uxth	r3, r3
 8003886:	f006 f97b 	bl	8009b80 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800388a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800388c:	695a      	ldr	r2, [r3, #20]
 800388e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	441a      	add	r2, r3
 8003894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003896:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003898:	2100      	movs	r1, #0
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f007 ff8c 	bl	800b7b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80038aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80038ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f040 82bd 	bne.w	8003e32 <PCD_EP_ISR_Handler+0x78a>
 80038b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80038bc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80038c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038c4:	f000 82b5 	beq.w	8003e32 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	61bb      	str	r3, [r7, #24]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	461a      	mov	r2, r3
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	4413      	add	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	801a      	strh	r2, [r3, #0]
 80038f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	2b3e      	cmp	r3, #62	; 0x3e
 80038fe:	d91d      	bls.n	800393c <PCD_EP_ISR_Handler+0x294>
 8003900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	095b      	lsrs	r3, r3, #5
 8003906:	647b      	str	r3, [r7, #68]	; 0x44
 8003908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	f003 031f 	and.w	r3, r3, #31
 8003910:	2b00      	cmp	r3, #0
 8003912:	d102      	bne.n	800391a <PCD_EP_ISR_Handler+0x272>
 8003914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003916:	3b01      	subs	r3, #1
 8003918:	647b      	str	r3, [r7, #68]	; 0x44
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	b29a      	uxth	r2, r3
 8003920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003922:	b29b      	uxth	r3, r3
 8003924:	029b      	lsls	r3, r3, #10
 8003926:	b29b      	uxth	r3, r3
 8003928:	4313      	orrs	r3, r2
 800392a:	b29b      	uxth	r3, r3
 800392c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003930:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003934:	b29a      	uxth	r2, r3
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	801a      	strh	r2, [r3, #0]
 800393a:	e026      	b.n	800398a <PCD_EP_ISR_Handler+0x2e2>
 800393c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10a      	bne.n	800395a <PCD_EP_ISR_Handler+0x2b2>
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	b29b      	uxth	r3, r3
 800394a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800394e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003952:	b29a      	uxth	r2, r3
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	801a      	strh	r2, [r3, #0]
 8003958:	e017      	b.n	800398a <PCD_EP_ISR_Handler+0x2e2>
 800395a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	085b      	lsrs	r3, r3, #1
 8003960:	647b      	str	r3, [r7, #68]	; 0x44
 8003962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <PCD_EP_ISR_Handler+0x2cc>
 800396e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003970:	3301      	adds	r3, #1
 8003972:	647b      	str	r3, [r7, #68]	; 0x44
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	881b      	ldrh	r3, [r3, #0]
 8003978:	b29a      	uxth	r2, r3
 800397a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800397c:	b29b      	uxth	r3, r3
 800397e:	029b      	lsls	r3, r3, #10
 8003980:	b29b      	uxth	r3, r3
 8003982:	4313      	orrs	r3, r2
 8003984:	b29a      	uxth	r2, r3
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	b29b      	uxth	r3, r3
 8003992:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399a:	827b      	strh	r3, [r7, #18]
 800399c:	8a7b      	ldrh	r3, [r7, #18]
 800399e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80039a2:	827b      	strh	r3, [r7, #18]
 80039a4:	8a7b      	ldrh	r3, [r7, #18]
 80039a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80039aa:	827b      	strh	r3, [r7, #18]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	8a7b      	ldrh	r3, [r7, #18]
 80039b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	8013      	strh	r3, [r2, #0]
 80039c6:	e234      	b.n	8003e32 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	881b      	ldrh	r3, [r3, #0]
 80039d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80039dc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f280 80fc 	bge.w	8003bde <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	461a      	mov	r2, r3
 80039ec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80039fc:	4013      	ands	r3, r2
 80039fe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003a14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a18:	b292      	uxth	r2, r2
 8003a1a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003a1c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003a20:	4613      	mov	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	4413      	add	r3, r2
 8003a30:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a34:	7b1b      	ldrb	r3, [r3, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d125      	bne.n	8003a86 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	4413      	add	r3, r2
 8003a4e:	3306      	adds	r3, #6
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6812      	ldr	r2, [r2, #0]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a5c:	881b      	ldrh	r3, [r3, #0]
 8003a5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a62:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003a66:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 8092 	beq.w	8003b94 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6818      	ldr	r0, [r3, #0]
 8003a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a76:	6959      	ldr	r1, [r3, #20]
 8003a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a7a:	88da      	ldrh	r2, [r3, #6]
 8003a7c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003a80:	f006 f87e 	bl	8009b80 <USB_ReadPMA>
 8003a84:	e086      	b.n	8003b94 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a88:	78db      	ldrb	r3, [r3, #3]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d10a      	bne.n	8003aa4 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003a8e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003a92:	461a      	mov	r2, r3
 8003a94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f9d9 	bl	8003e4e <HAL_PCD_EP_DB_Receive>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003aa2:	e077      	b.n	8003b94 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003abe:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	441a      	add	r2, r3
 8003ad0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ae0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	881b      	ldrh	r3, [r3, #0]
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d024      	beq.n	8003b4c <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	4413      	add	r3, r2
 8003b16:	3302      	adds	r3, #2
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6812      	ldr	r2, [r2, #0]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b2a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003b2e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d02e      	beq.n	8003b94 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6818      	ldr	r0, [r3, #0]
 8003b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b3c:	6959      	ldr	r1, [r3, #20]
 8003b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b40:	891a      	ldrh	r2, [r3, #8]
 8003b42:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003b46:	f006 f81b 	bl	8009b80 <USB_ReadPMA>
 8003b4a:	e023      	b.n	8003b94 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	461a      	mov	r2, r3
 8003b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	4413      	add	r3, r2
 8003b60:	3306      	adds	r3, #6
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6812      	ldr	r2, [r2, #0]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b74:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003b78:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d009      	beq.n	8003b94 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6818      	ldr	r0, [r3, #0]
 8003b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b86:	6959      	ldr	r1, [r3, #20]
 8003b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b8a:	895a      	ldrh	r2, [r3, #10]
 8003b8c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003b90:	f005 fff6 	bl	8009b80 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b96:	69da      	ldr	r2, [r3, #28]
 8003b98:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003b9c:	441a      	add	r2, r3
 8003b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003baa:	441a      	add	r2, r3
 8003bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bae:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <PCD_EP_ISR_Handler+0x51c>
 8003bb8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d206      	bcs.n	8003bd2 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	4619      	mov	r1, r3
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f007 fdf4 	bl	800b7b8 <HAL_PCD_DataOutStageCallback>
 8003bd0:	e005      	b.n	8003bde <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f004 faac 	bl	8008136 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003bde:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 8123 	beq.w	8003e32 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8003bec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c1a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	441a      	add	r2, r3
 8003c2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003c30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c3e:	78db      	ldrb	r3, [r3, #3]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	f040 80a2 	bne.w	8003d8a <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8003c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c48:	2200      	movs	r2, #0
 8003c4a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c4e:	7b1b      	ldrb	r3, [r3, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 8093 	beq.w	8003d7c <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c56:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d046      	beq.n	8003cf0 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c64:	785b      	ldrb	r3, [r3, #1]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d126      	bne.n	8003cb8 <PCD_EP_ISR_Handler+0x610>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	4413      	add	r3, r2
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
 8003c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	011a      	lsls	r2, r3, #4
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c90:	623b      	str	r3, [r7, #32]
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	801a      	strh	r2, [r3, #0]
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	801a      	strh	r2, [r3, #0]
 8003cb6:	e061      	b.n	8003d7c <PCD_EP_ISR_Handler+0x6d4>
 8003cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cba:	785b      	ldrb	r3, [r3, #1]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d15d      	bne.n	8003d7c <PCD_EP_ISR_Handler+0x6d4>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd4:	4413      	add	r3, r2
 8003cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	011a      	lsls	r2, r3, #4
 8003cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ce6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cea:	2200      	movs	r2, #0
 8003cec:	801a      	strh	r2, [r3, #0]
 8003cee:	e045      	b.n	8003d7c <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cf8:	785b      	ldrb	r3, [r3, #1]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d126      	bne.n	8003d4c <PCD_EP_ISR_Handler+0x6a4>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	637b      	str	r3, [r7, #52]	; 0x34
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	461a      	mov	r2, r3
 8003d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d12:	4413      	add	r3, r2
 8003d14:	637b      	str	r3, [r7, #52]	; 0x34
 8003d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	011a      	lsls	r2, r3, #4
 8003d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d1e:	4413      	add	r3, r2
 8003d20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d24:	633b      	str	r3, [r7, #48]	; 0x30
 8003d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d34:	801a      	strh	r2, [r3, #0]
 8003d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	801a      	strh	r2, [r3, #0]
 8003d4a:	e017      	b.n	8003d7c <PCD_EP_ISR_Handler+0x6d4>
 8003d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d4e:	785b      	ldrb	r3, [r3, #1]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d113      	bne.n	8003d7c <PCD_EP_ISR_Handler+0x6d4>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d62:	4413      	add	r3, r2
 8003d64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	011a      	lsls	r2, r3, #4
 8003d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d6e:	4413      	add	r3, r2
 8003d70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d74:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d78:	2200      	movs	r2, #0
 8003d7a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	4619      	mov	r1, r3
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f007 fd33 	bl	800b7ee <HAL_PCD_DataInStageCallback>
 8003d88:	e053      	b.n	8003e32 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003d8a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d146      	bne.n	8003e24 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	461a      	mov	r2, r3
 8003da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	4413      	add	r3, r2
 8003daa:	3302      	adds	r3, #2
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6812      	ldr	r2, [r2, #0]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dbe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dc4:	699a      	ldr	r2, [r3, #24]
 8003dc6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d907      	bls.n	8003dde <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8003dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dd0:	699a      	ldr	r2, [r3, #24]
 8003dd2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003dd6:	1ad2      	subs	r2, r2, r3
 8003dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dda:	619a      	str	r2, [r3, #24]
 8003ddc:	e002      	b.n	8003de4 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8003dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003de0:	2200      	movs	r2, #0
 8003de2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d106      	bne.n	8003dfa <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	4619      	mov	r1, r3
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f007 fcfb 	bl	800b7ee <HAL_PCD_DataInStageCallback>
 8003df8:	e01b      	b.n	8003e32 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dfc:	695a      	ldr	r2, [r3, #20]
 8003dfe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003e02:	441a      	add	r2, r3
 8003e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e06:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e0a:	69da      	ldr	r2, [r3, #28]
 8003e0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003e10:	441a      	add	r2, r3
 8003e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e14:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f004 f98a 	bl	8008136 <USB_EPStartXfer>
 8003e22:	e006      	b.n	8003e32 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003e24:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003e28:	461a      	mov	r2, r3
 8003e2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f91b 	bl	8004068 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	b21b      	sxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f6ff ac37 	blt.w	80036b2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3758      	adds	r7, #88	; 0x58
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b088      	sub	sp, #32
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e5c:	88fb      	ldrh	r3, [r7, #6]
 8003e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d07e      	beq.n	8003f64 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	461a      	mov	r2, r3
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	4413      	add	r3, r2
 8003e7a:	3302      	adds	r3, #2
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	6812      	ldr	r2, [r2, #0]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e8e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	699a      	ldr	r2, [r3, #24]
 8003e94:	8b7b      	ldrh	r3, [r7, #26]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d306      	bcc.n	8003ea8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	699a      	ldr	r2, [r3, #24]
 8003e9e:	8b7b      	ldrh	r3, [r7, #26]
 8003ea0:	1ad2      	subs	r2, r2, r3
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	619a      	str	r2, [r3, #24]
 8003ea6:	e002      	b.n	8003eae <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d123      	bne.n	8003efe <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed0:	833b      	strh	r3, [r7, #24]
 8003ed2:	8b3b      	ldrh	r3, [r7, #24]
 8003ed4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003ed8:	833b      	strh	r3, [r7, #24]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	441a      	add	r2, r3
 8003ee8:	8b3b      	ldrh	r3, [r7, #24]
 8003eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003efe:	88fb      	ldrh	r3, [r7, #6]
 8003f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d01f      	beq.n	8003f48 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f22:	82fb      	strh	r3, [r7, #22]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	461a      	mov	r2, r3
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	441a      	add	r2, r3
 8003f32:	8afb      	ldrh	r3, [r7, #22]
 8003f34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003f48:	8b7b      	ldrh	r3, [r7, #26]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 8087 	beq.w	800405e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6818      	ldr	r0, [r3, #0]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	6959      	ldr	r1, [r3, #20]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	891a      	ldrh	r2, [r3, #8]
 8003f5c:	8b7b      	ldrh	r3, [r7, #26]
 8003f5e:	f005 fe0f 	bl	8009b80 <USB_ReadPMA>
 8003f62:	e07c      	b.n	800405e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	4413      	add	r3, r2
 8003f78:	3306      	adds	r3, #6
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	6812      	ldr	r2, [r2, #0]
 8003f80:	4413      	add	r3, r2
 8003f82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f8c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	699a      	ldr	r2, [r3, #24]
 8003f92:	8b7b      	ldrh	r3, [r7, #26]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d306      	bcc.n	8003fa6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	699a      	ldr	r2, [r3, #24]
 8003f9c:	8b7b      	ldrh	r3, [r7, #26]
 8003f9e:	1ad2      	subs	r2, r2, r3
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	619a      	str	r2, [r3, #24]
 8003fa4:	e002      	b.n	8003fac <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d123      	bne.n	8003ffc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fce:	83fb      	strh	r3, [r7, #30]
 8003fd0:	8bfb      	ldrh	r3, [r7, #30]
 8003fd2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003fd6:	83fb      	strh	r3, [r7, #30]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	441a      	add	r2, r3
 8003fe6:	8bfb      	ldrh	r3, [r7, #30]
 8003fe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003ffc:	88fb      	ldrh	r3, [r7, #6]
 8003ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004002:	2b00      	cmp	r3, #0
 8004004:	d11f      	bne.n	8004046 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	b29b      	uxth	r3, r3
 8004018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800401c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004020:	83bb      	strh	r3, [r7, #28]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	461a      	mov	r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	441a      	add	r2, r3
 8004030:	8bbb      	ldrh	r3, [r7, #28]
 8004032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800403a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800403e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004042:	b29b      	uxth	r3, r3
 8004044:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004046:	8b7b      	ldrh	r3, [r7, #26]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d008      	beq.n	800405e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6818      	ldr	r0, [r3, #0]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	6959      	ldr	r1, [r3, #20]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	895a      	ldrh	r2, [r3, #10]
 8004058:	8b7b      	ldrh	r3, [r7, #26]
 800405a:	f005 fd91 	bl	8009b80 <USB_ReadPMA>
    }
  }

  return count;
 800405e:	8b7b      	ldrh	r3, [r7, #26]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3720      	adds	r7, #32
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b0a4      	sub	sp, #144	; 0x90
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	4613      	mov	r3, r2
 8004074:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004076:	88fb      	ldrh	r3, [r7, #6]
 8004078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 81dd 	beq.w	800443c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800408a:	b29b      	uxth	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4413      	add	r3, r2
 8004096:	3302      	adds	r3, #2
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	6812      	ldr	r2, [r2, #0]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040aa:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d907      	bls.n	80040ca <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80040c2:	1ad2      	subs	r2, r2, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	619a      	str	r2, [r3, #24]
 80040c8:	e002      	b.n	80040d0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2200      	movs	r2, #0
 80040ce:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f040 80b9 	bne.w	800424c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	785b      	ldrb	r3, [r3, #1]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d126      	bne.n	8004130 <HAL_PCD_EP_DB_Transmit+0xc8>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	461a      	mov	r2, r3
 80040f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f6:	4413      	add	r3, r2
 80040f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	011a      	lsls	r2, r3, #4
 8004100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004102:	4413      	add	r3, r2
 8004104:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004108:	62bb      	str	r3, [r7, #40]	; 0x28
 800410a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	b29b      	uxth	r3, r3
 8004110:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004114:	b29a      	uxth	r2, r3
 8004116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004118:	801a      	strh	r2, [r3, #0]
 800411a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	b29b      	uxth	r3, r3
 8004120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004128:	b29a      	uxth	r2, r3
 800412a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412c:	801a      	strh	r2, [r3, #0]
 800412e:	e01a      	b.n	8004166 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	785b      	ldrb	r3, [r3, #1]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d116      	bne.n	8004166 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	637b      	str	r3, [r7, #52]	; 0x34
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004146:	b29b      	uxth	r3, r3
 8004148:	461a      	mov	r2, r3
 800414a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800414c:	4413      	add	r3, r2
 800414e:	637b      	str	r3, [r7, #52]	; 0x34
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	011a      	lsls	r2, r3, #4
 8004156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004158:	4413      	add	r3, r2
 800415a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800415e:	633b      	str	r3, [r7, #48]	; 0x30
 8004160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004162:	2200      	movs	r2, #0
 8004164:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	627b      	str	r3, [r7, #36]	; 0x24
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	785b      	ldrb	r3, [r3, #1]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d126      	bne.n	80041c2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	61fb      	str	r3, [r7, #28]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004182:	b29b      	uxth	r3, r3
 8004184:	461a      	mov	r2, r3
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	4413      	add	r3, r2
 800418a:	61fb      	str	r3, [r7, #28]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	011a      	lsls	r2, r3, #4
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	4413      	add	r3, r2
 8004196:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800419a:	61bb      	str	r3, [r7, #24]
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	801a      	strh	r2, [r3, #0]
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	801a      	strh	r2, [r3, #0]
 80041c0:	e017      	b.n	80041f2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	785b      	ldrb	r3, [r3, #1]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d113      	bne.n	80041f2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	461a      	mov	r2, r3
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	4413      	add	r3, r2
 80041da:	627b      	str	r3, [r7, #36]	; 0x24
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	011a      	lsls	r2, r3, #4
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	4413      	add	r3, r2
 80041e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041ea:	623b      	str	r3, [r7, #32]
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	2200      	movs	r2, #0
 80041f0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	4619      	mov	r1, r3
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f007 faf8 	bl	800b7ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80041fe:	88fb      	ldrh	r3, [r7, #6]
 8004200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 82fc 	beq.w	8004802 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	461a      	mov	r2, r3
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	b29b      	uxth	r3, r3
 800421c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004224:	82fb      	strh	r3, [r7, #22]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	441a      	add	r2, r3
 8004234:	8afb      	ldrh	r3, [r7, #22]
 8004236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800423a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800423e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004246:	b29b      	uxth	r3, r3
 8004248:	8013      	strh	r3, [r2, #0]
 800424a:	e2da      	b.n	8004802 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800424c:	88fb      	ldrh	r3, [r7, #6]
 800424e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d021      	beq.n	800429a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	b29b      	uxth	r3, r3
 8004268:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800426c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004270:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	441a      	add	r2, r3
 8004282:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800428a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800428e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004296:	b29b      	uxth	r3, r3
 8004298:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	f040 82ae 	bne.w	8004802 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	695a      	ldr	r2, [r3, #20]
 80042aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80042ae:	441a      	add	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	69da      	ldr	r2, [r3, #28]
 80042b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80042bc:	441a      	add	r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	6a1a      	ldr	r2, [r3, #32]
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d30b      	bcc.n	80042e6 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	6a1a      	ldr	r2, [r3, #32]
 80042da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042de:	1ad2      	subs	r2, r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	621a      	str	r2, [r3, #32]
 80042e4:	e017      	b.n	8004316 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d108      	bne.n	8004300 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80042ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80042f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80042fe:	e00a      	b.n	8004316 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2200      	movs	r2, #0
 8004314:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	785b      	ldrb	r3, [r3, #1]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d165      	bne.n	80043ea <HAL_PCD_EP_DB_Transmit+0x382>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800432c:	b29b      	uxth	r3, r3
 800432e:	461a      	mov	r2, r3
 8004330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004332:	4413      	add	r3, r2
 8004334:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	011a      	lsls	r2, r3, #4
 800433c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800433e:	4413      	add	r3, r2
 8004340:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004344:	63bb      	str	r3, [r7, #56]	; 0x38
 8004346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	b29b      	uxth	r3, r3
 800434c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004350:	b29a      	uxth	r2, r3
 8004352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004354:	801a      	strh	r2, [r3, #0]
 8004356:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800435a:	2b3e      	cmp	r3, #62	; 0x3e
 800435c:	d91d      	bls.n	800439a <HAL_PCD_EP_DB_Transmit+0x332>
 800435e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	64bb      	str	r3, [r7, #72]	; 0x48
 8004366:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800436a:	f003 031f 	and.w	r3, r3, #31
 800436e:	2b00      	cmp	r3, #0
 8004370:	d102      	bne.n	8004378 <HAL_PCD_EP_DB_Transmit+0x310>
 8004372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004374:	3b01      	subs	r3, #1
 8004376:	64bb      	str	r3, [r7, #72]	; 0x48
 8004378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	b29a      	uxth	r2, r3
 800437e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004380:	b29b      	uxth	r3, r3
 8004382:	029b      	lsls	r3, r3, #10
 8004384:	b29b      	uxth	r3, r3
 8004386:	4313      	orrs	r3, r2
 8004388:	b29b      	uxth	r3, r3
 800438a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800438e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004392:	b29a      	uxth	r2, r3
 8004394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004396:	801a      	strh	r2, [r3, #0]
 8004398:	e044      	b.n	8004424 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800439a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10a      	bne.n	80043b8 <HAL_PCD_EP_DB_Transmit+0x350>
 80043a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b4:	801a      	strh	r2, [r3, #0]
 80043b6:	e035      	b.n	8004424 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80043b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043bc:	085b      	lsrs	r3, r3, #1
 80043be:	64bb      	str	r3, [r7, #72]	; 0x48
 80043c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <HAL_PCD_EP_DB_Transmit+0x36a>
 80043cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ce:	3301      	adds	r3, #1
 80043d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80043d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043da:	b29b      	uxth	r3, r3
 80043dc:	029b      	lsls	r3, r3, #10
 80043de:	b29b      	uxth	r3, r3
 80043e0:	4313      	orrs	r3, r2
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e6:	801a      	strh	r2, [r3, #0]
 80043e8:	e01c      	b.n	8004424 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	785b      	ldrb	r3, [r3, #1]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d118      	bne.n	8004424 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	647b      	str	r3, [r7, #68]	; 0x44
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004400:	b29b      	uxth	r3, r3
 8004402:	461a      	mov	r2, r3
 8004404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004406:	4413      	add	r3, r2
 8004408:	647b      	str	r3, [r7, #68]	; 0x44
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	011a      	lsls	r2, r3, #4
 8004410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004412:	4413      	add	r3, r2
 8004414:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004418:	643b      	str	r3, [r7, #64]	; 0x40
 800441a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800441e:	b29a      	uxth	r2, r3
 8004420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004422:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6818      	ldr	r0, [r3, #0]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	6959      	ldr	r1, [r3, #20]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	891a      	ldrh	r2, [r3, #8]
 8004430:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004434:	b29b      	uxth	r3, r3
 8004436:	f005 fb5d 	bl	8009af4 <USB_WritePMA>
 800443a:	e1e2      	b.n	8004802 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004444:	b29b      	uxth	r3, r3
 8004446:	461a      	mov	r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	4413      	add	r3, r2
 8004450:	3306      	adds	r3, #6
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	4413      	add	r3, r2
 800445a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004464:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	699a      	ldr	r2, [r3, #24]
 800446c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004470:	429a      	cmp	r2, r3
 8004472:	d307      	bcc.n	8004484 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	699a      	ldr	r2, [r3, #24]
 8004478:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800447c:	1ad2      	subs	r2, r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	619a      	str	r2, [r3, #24]
 8004482:	e002      	b.n	800448a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2200      	movs	r2, #0
 8004488:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	2b00      	cmp	r3, #0
 8004490:	f040 80c0 	bne.w	8004614 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	785b      	ldrb	r3, [r3, #1]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d126      	bne.n	80044ea <HAL_PCD_EP_DB_Transmit+0x482>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	461a      	mov	r2, r3
 80044ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044b0:	4413      	add	r3, r2
 80044b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	011a      	lsls	r2, r3, #4
 80044ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044bc:	4413      	add	r3, r2
 80044be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80044c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044c6:	881b      	ldrh	r3, [r3, #0]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044d2:	801a      	strh	r2, [r3, #0]
 80044d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044d6:	881b      	ldrh	r3, [r3, #0]
 80044d8:	b29b      	uxth	r3, r3
 80044da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044e6:	801a      	strh	r2, [r3, #0]
 80044e8:	e01a      	b.n	8004520 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	785b      	ldrb	r3, [r3, #1]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d116      	bne.n	8004520 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	667b      	str	r3, [r7, #100]	; 0x64
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004500:	b29b      	uxth	r3, r3
 8004502:	461a      	mov	r2, r3
 8004504:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004506:	4413      	add	r3, r2
 8004508:	667b      	str	r3, [r7, #100]	; 0x64
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	011a      	lsls	r2, r3, #4
 8004510:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004512:	4413      	add	r3, r2
 8004514:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004518:	663b      	str	r3, [r7, #96]	; 0x60
 800451a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800451c:	2200      	movs	r2, #0
 800451e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	677b      	str	r3, [r7, #116]	; 0x74
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	785b      	ldrb	r3, [r3, #1]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d12b      	bne.n	8004586 <HAL_PCD_EP_DB_Transmit+0x51e>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800453c:	b29b      	uxth	r3, r3
 800453e:	461a      	mov	r2, r3
 8004540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004542:	4413      	add	r3, r2
 8004544:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	011a      	lsls	r2, r3, #4
 800454c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800454e:	4413      	add	r3, r2
 8004550:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004554:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004558:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800455c:	881b      	ldrh	r3, [r3, #0]
 800455e:	b29b      	uxth	r3, r3
 8004560:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004564:	b29a      	uxth	r2, r3
 8004566:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800456a:	801a      	strh	r2, [r3, #0]
 800456c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	b29b      	uxth	r3, r3
 8004574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800457c:	b29a      	uxth	r2, r3
 800457e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004582:	801a      	strh	r2, [r3, #0]
 8004584:	e017      	b.n	80045b6 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	785b      	ldrb	r3, [r3, #1]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d113      	bne.n	80045b6 <HAL_PCD_EP_DB_Transmit+0x54e>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004596:	b29b      	uxth	r3, r3
 8004598:	461a      	mov	r2, r3
 800459a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800459c:	4413      	add	r3, r2
 800459e:	677b      	str	r3, [r7, #116]	; 0x74
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	011a      	lsls	r2, r3, #4
 80045a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045a8:	4413      	add	r3, r2
 80045aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045ae:	673b      	str	r3, [r7, #112]	; 0x70
 80045b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045b2:	2200      	movs	r2, #0
 80045b4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	4619      	mov	r1, r3
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f007 f916 	bl	800b7ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80045c2:	88fb      	ldrh	r3, [r7, #6]
 80045c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f040 811a 	bne.w	8004802 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	461a      	mov	r2, r3
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	461a      	mov	r2, r3
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	441a      	add	r2, r3
 80045fa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80045fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800460a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800460e:	b29b      	uxth	r3, r3
 8004610:	8013      	strh	r3, [r2, #0]
 8004612:	e0f6      	b.n	8004802 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004614:	88fb      	ldrh	r3, [r7, #6]
 8004616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d121      	bne.n	8004662 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	461a      	mov	r2, r3
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	b29b      	uxth	r3, r3
 8004630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004638:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	461a      	mov	r2, r3
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	441a      	add	r2, r3
 800464a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800464e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004656:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800465a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800465e:	b29b      	uxth	r3, r3
 8004660:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004668:	2b01      	cmp	r3, #1
 800466a:	f040 80ca 	bne.w	8004802 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	695a      	ldr	r2, [r3, #20]
 8004672:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004676:	441a      	add	r2, r3
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	69da      	ldr	r2, [r3, #28]
 8004680:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004684:	441a      	add	r2, r3
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	6a1a      	ldr	r2, [r3, #32]
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	429a      	cmp	r2, r3
 8004694:	d30b      	bcc.n	80046ae <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	6a1a      	ldr	r2, [r3, #32]
 80046a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046a6:	1ad2      	subs	r2, r2, r3
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	621a      	str	r2, [r3, #32]
 80046ac:	e017      	b.n	80046de <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d108      	bne.n	80046c8 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80046b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80046ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80046c6:	e00a      	b.n	80046de <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2200      	movs	r2, #0
 80046d4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	657b      	str	r3, [r7, #84]	; 0x54
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	785b      	ldrb	r3, [r3, #1]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d165      	bne.n	80047b8 <HAL_PCD_EP_DB_Transmit+0x750>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	461a      	mov	r2, r3
 80046fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004700:	4413      	add	r3, r2
 8004702:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	011a      	lsls	r2, r3, #4
 800470a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800470c:	4413      	add	r3, r2
 800470e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004712:	65bb      	str	r3, [r7, #88]	; 0x58
 8004714:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	b29b      	uxth	r3, r3
 800471a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800471e:	b29a      	uxth	r2, r3
 8004720:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004722:	801a      	strh	r2, [r3, #0]
 8004724:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004728:	2b3e      	cmp	r3, #62	; 0x3e
 800472a:	d91d      	bls.n	8004768 <HAL_PCD_EP_DB_Transmit+0x700>
 800472c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004730:	095b      	lsrs	r3, r3, #5
 8004732:	66bb      	str	r3, [r7, #104]	; 0x68
 8004734:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004738:	f003 031f 	and.w	r3, r3, #31
 800473c:	2b00      	cmp	r3, #0
 800473e:	d102      	bne.n	8004746 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004740:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004742:	3b01      	subs	r3, #1
 8004744:	66bb      	str	r3, [r7, #104]	; 0x68
 8004746:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	b29a      	uxth	r2, r3
 800474c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800474e:	b29b      	uxth	r3, r3
 8004750:	029b      	lsls	r3, r3, #10
 8004752:	b29b      	uxth	r3, r3
 8004754:	4313      	orrs	r3, r2
 8004756:	b29b      	uxth	r3, r3
 8004758:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800475c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004760:	b29a      	uxth	r2, r3
 8004762:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004764:	801a      	strh	r2, [r3, #0]
 8004766:	e041      	b.n	80047ec <HAL_PCD_EP_DB_Transmit+0x784>
 8004768:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10a      	bne.n	8004786 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004770:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004772:	881b      	ldrh	r3, [r3, #0]
 8004774:	b29b      	uxth	r3, r3
 8004776:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800477a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800477e:	b29a      	uxth	r2, r3
 8004780:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004782:	801a      	strh	r2, [r3, #0]
 8004784:	e032      	b.n	80047ec <HAL_PCD_EP_DB_Transmit+0x784>
 8004786:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800478a:	085b      	lsrs	r3, r3, #1
 800478c:	66bb      	str	r3, [r7, #104]	; 0x68
 800478e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d002      	beq.n	80047a0 <HAL_PCD_EP_DB_Transmit+0x738>
 800479a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800479c:	3301      	adds	r3, #1
 800479e:	66bb      	str	r3, [r7, #104]	; 0x68
 80047a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	029b      	lsls	r3, r3, #10
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	4313      	orrs	r3, r2
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047b4:	801a      	strh	r2, [r3, #0]
 80047b6:	e019      	b.n	80047ec <HAL_PCD_EP_DB_Transmit+0x784>
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	785b      	ldrb	r3, [r3, #1]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d115      	bne.n	80047ec <HAL_PCD_EP_DB_Transmit+0x784>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	461a      	mov	r2, r3
 80047cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047ce:	4413      	add	r3, r2
 80047d0:	657b      	str	r3, [r7, #84]	; 0x54
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	011a      	lsls	r2, r3, #4
 80047d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047da:	4413      	add	r3, r2
 80047dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047e0:	653b      	str	r3, [r7, #80]	; 0x50
 80047e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047ea:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6818      	ldr	r0, [r3, #0]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	6959      	ldr	r1, [r3, #20]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	895a      	ldrh	r2, [r3, #10]
 80047f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	f005 f979 	bl	8009af4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	461a      	mov	r2, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	b29b      	uxth	r3, r3
 8004814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800481c:	82bb      	strh	r3, [r7, #20]
 800481e:	8abb      	ldrh	r3, [r7, #20]
 8004820:	f083 0310 	eor.w	r3, r3, #16
 8004824:	82bb      	strh	r3, [r7, #20]
 8004826:	8abb      	ldrh	r3, [r7, #20]
 8004828:	f083 0320 	eor.w	r3, r3, #32
 800482c:	82bb      	strh	r3, [r7, #20]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	441a      	add	r2, r3
 800483c:	8abb      	ldrh	r3, [r7, #20]
 800483e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800484a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800484e:	b29b      	uxth	r3, r3
 8004850:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3790      	adds	r7, #144	; 0x90
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	607b      	str	r3, [r7, #4]
 8004866:	460b      	mov	r3, r1
 8004868:	817b      	strh	r3, [r7, #10]
 800486a:	4613      	mov	r3, r2
 800486c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800486e:	897b      	ldrh	r3, [r7, #10]
 8004870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004874:	b29b      	uxth	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00b      	beq.n	8004892 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800487a:	897b      	ldrh	r3, [r7, #10]
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	1c5a      	adds	r2, r3, #1
 8004882:	4613      	mov	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	4413      	add	r3, r2
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	e009      	b.n	80048a6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004892:	897a      	ldrh	r2, [r7, #10]
 8004894:	4613      	mov	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4413      	add	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80048a6:	893b      	ldrh	r3, [r7, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d107      	bne.n	80048bc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	2200      	movs	r2, #0
 80048b0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	80da      	strh	r2, [r3, #6]
 80048ba:	e00b      	b.n	80048d4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	2201      	movs	r2, #1
 80048c0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	0c1b      	lsrs	r3, r3, #16
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	371c      	adds	r7, #28
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
	...

080048e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048f4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d102      	bne.n	800490a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	f001 b823 	b.w	8005950 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800490a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800490e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 817d 	beq.w	8004c1a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004920:	4bbc      	ldr	r3, [pc, #752]	; (8004c14 <HAL_RCC_OscConfig+0x330>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f003 030c 	and.w	r3, r3, #12
 8004928:	2b04      	cmp	r3, #4
 800492a:	d00c      	beq.n	8004946 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800492c:	4bb9      	ldr	r3, [pc, #740]	; (8004c14 <HAL_RCC_OscConfig+0x330>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f003 030c 	and.w	r3, r3, #12
 8004934:	2b08      	cmp	r3, #8
 8004936:	d15c      	bne.n	80049f2 <HAL_RCC_OscConfig+0x10e>
 8004938:	4bb6      	ldr	r3, [pc, #728]	; (8004c14 <HAL_RCC_OscConfig+0x330>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004944:	d155      	bne.n	80049f2 <HAL_RCC_OscConfig+0x10e>
 8004946:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800494a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004952:	fa93 f3a3 	rbit	r3, r3
 8004956:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800495a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800495e:	fab3 f383 	clz	r3, r3
 8004962:	b2db      	uxtb	r3, r3
 8004964:	095b      	lsrs	r3, r3, #5
 8004966:	b2db      	uxtb	r3, r3
 8004968:	f043 0301 	orr.w	r3, r3, #1
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b01      	cmp	r3, #1
 8004970:	d102      	bne.n	8004978 <HAL_RCC_OscConfig+0x94>
 8004972:	4ba8      	ldr	r3, [pc, #672]	; (8004c14 <HAL_RCC_OscConfig+0x330>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	e015      	b.n	80049a4 <HAL_RCC_OscConfig+0xc0>
 8004978:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800497c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004980:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004984:	fa93 f3a3 	rbit	r3, r3
 8004988:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800498c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004990:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004994:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004998:	fa93 f3a3 	rbit	r3, r3
 800499c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80049a0:	4b9c      	ldr	r3, [pc, #624]	; (8004c14 <HAL_RCC_OscConfig+0x330>)
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049a8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80049ac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80049b0:	fa92 f2a2 	rbit	r2, r2
 80049b4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80049b8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80049bc:	fab2 f282 	clz	r2, r2
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	f042 0220 	orr.w	r2, r2, #32
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	f002 021f 	and.w	r2, r2, #31
 80049cc:	2101      	movs	r1, #1
 80049ce:	fa01 f202 	lsl.w	r2, r1, r2
 80049d2:	4013      	ands	r3, r2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 811f 	beq.w	8004c18 <HAL_RCC_OscConfig+0x334>
 80049da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f040 8116 	bne.w	8004c18 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	f000 bfaf 	b.w	8005950 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a02:	d106      	bne.n	8004a12 <HAL_RCC_OscConfig+0x12e>
 8004a04:	4b83      	ldr	r3, [pc, #524]	; (8004c14 <HAL_RCC_OscConfig+0x330>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a82      	ldr	r2, [pc, #520]	; (8004c14 <HAL_RCC_OscConfig+0x330>)
 8004a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a0e:	6013      	str	r3, [r2, #0]
 8004a10:	e036      	b.n	8004a80 <HAL_RCC_OscConfig+0x19c>
 8004a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10c      	bne.n	8004a3c <HAL_RCC_OscConfig+0x158>
 8004a22:	4b7c      	ldr	r3, [pc, #496]	; (8004c14 <HAL_RCC_OscConfig+0x330>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a7b      	ldr	r2, [pc, #492]	; (8004c14 <HAL_RCC_OscConfig+0x330>)
 8004a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a2c:	6013      	str	r3, [r2, #0]
 8004a2e:	4b79      	ldr	r3, [pc, #484]	; (8004c14 <HAL_RCC_OscConfig+0x330>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a78      	ldr	r2, [pc, #480]	; (8004c14 <HAL_RCC_OscConfig+0x330>)
 8004a34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	e021      	b.n	8004a80 <HAL_RCC_OscConfig+0x19c>
 8004a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a4c:	d10c      	bne.n	8004a68 <HAL_RCC_OscConfig+0x184>
 8004a4e:	4b71      	ldr	r3, [pc, #452]	; (8004c14 <HAL_RCC_OscConfig+0x330>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a70      	ldr	r2, [pc, #448]	; (8004c14 <HAL_RCC_OscConfig+0x330>)
 8004a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	4b6e      	ldr	r3, [pc, #440]	; (8004c14 <HAL_RCC_OscConfig+0x330>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a6d      	ldr	r2, [pc, #436]	; (8004c14 <HAL_RCC_OscConfig+0x330>)
 8004a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	e00b      	b.n	8004a80 <HAL_RCC_OscConfig+0x19c>
 8004a68:	4b6a      	ldr	r3, [pc, #424]	; (8004c14 <HAL_RCC_OscConfig+0x330>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a69      	ldr	r2, [pc, #420]	; (8004c14 <HAL_RCC_OscConfig+0x330>)
 8004a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	4b67      	ldr	r3, [pc, #412]	; (8004c14 <HAL_RCC_OscConfig+0x330>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a66      	ldr	r2, [pc, #408]	; (8004c14 <HAL_RCC_OscConfig+0x330>)
 8004a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a7e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a80:	4b64      	ldr	r3, [pc, #400]	; (8004c14 <HAL_RCC_OscConfig+0x330>)
 8004a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a84:	f023 020f 	bic.w	r2, r3, #15
 8004a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	495f      	ldr	r1, [pc, #380]	; (8004c14 <HAL_RCC_OscConfig+0x330>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d059      	beq.n	8004b5e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aaa:	f7fc fa83 	bl	8000fb4 <HAL_GetTick>
 8004aae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab2:	e00a      	b.n	8004aca <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ab4:	f7fc fa7e 	bl	8000fb4 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b64      	cmp	r3, #100	; 0x64
 8004ac2:	d902      	bls.n	8004aca <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	f000 bf43 	b.w	8005950 <HAL_RCC_OscConfig+0x106c>
 8004aca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ace:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004ad6:	fa93 f3a3 	rbit	r3, r3
 8004ada:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004ade:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae2:	fab3 f383 	clz	r3, r3
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	095b      	lsrs	r3, r3, #5
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	f043 0301 	orr.w	r3, r3, #1
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d102      	bne.n	8004afc <HAL_RCC_OscConfig+0x218>
 8004af6:	4b47      	ldr	r3, [pc, #284]	; (8004c14 <HAL_RCC_OscConfig+0x330>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	e015      	b.n	8004b28 <HAL_RCC_OscConfig+0x244>
 8004afc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b00:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b04:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004b08:	fa93 f3a3 	rbit	r3, r3
 8004b0c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004b10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b14:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004b18:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004b1c:	fa93 f3a3 	rbit	r3, r3
 8004b20:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004b24:	4b3b      	ldr	r3, [pc, #236]	; (8004c14 <HAL_RCC_OscConfig+0x330>)
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b2c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004b30:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004b34:	fa92 f2a2 	rbit	r2, r2
 8004b38:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004b3c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004b40:	fab2 f282 	clz	r2, r2
 8004b44:	b2d2      	uxtb	r2, r2
 8004b46:	f042 0220 	orr.w	r2, r2, #32
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	f002 021f 	and.w	r2, r2, #31
 8004b50:	2101      	movs	r1, #1
 8004b52:	fa01 f202 	lsl.w	r2, r1, r2
 8004b56:	4013      	ands	r3, r2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0ab      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x1d0>
 8004b5c:	e05d      	b.n	8004c1a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5e:	f7fc fa29 	bl	8000fb4 <HAL_GetTick>
 8004b62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b66:	e00a      	b.n	8004b7e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b68:	f7fc fa24 	bl	8000fb4 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b64      	cmp	r3, #100	; 0x64
 8004b76:	d902      	bls.n	8004b7e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	f000 bee9 	b.w	8005950 <HAL_RCC_OscConfig+0x106c>
 8004b7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b82:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b86:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004b8a:	fa93 f3a3 	rbit	r3, r3
 8004b8e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004b92:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b96:	fab3 f383 	clz	r3, r3
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	095b      	lsrs	r3, r3, #5
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	f043 0301 	orr.w	r3, r3, #1
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d102      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x2cc>
 8004baa:	4b1a      	ldr	r3, [pc, #104]	; (8004c14 <HAL_RCC_OscConfig+0x330>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	e015      	b.n	8004bdc <HAL_RCC_OscConfig+0x2f8>
 8004bb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bb4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004bbc:	fa93 f3a3 	rbit	r3, r3
 8004bc0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004bc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bc8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004bcc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004bd0:	fa93 f3a3 	rbit	r3, r3
 8004bd4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004bd8:	4b0e      	ldr	r3, [pc, #56]	; (8004c14 <HAL_RCC_OscConfig+0x330>)
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004be0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004be4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004be8:	fa92 f2a2 	rbit	r2, r2
 8004bec:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004bf0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004bf4:	fab2 f282 	clz	r2, r2
 8004bf8:	b2d2      	uxtb	r2, r2
 8004bfa:	f042 0220 	orr.w	r2, r2, #32
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	f002 021f 	and.w	r2, r2, #31
 8004c04:	2101      	movs	r1, #1
 8004c06:	fa01 f202 	lsl.w	r2, r1, r2
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1ab      	bne.n	8004b68 <HAL_RCC_OscConfig+0x284>
 8004c10:	e003      	b.n	8004c1a <HAL_RCC_OscConfig+0x336>
 8004c12:	bf00      	nop
 8004c14:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 817d 	beq.w	8004f2a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004c30:	4ba6      	ldr	r3, [pc, #664]	; (8004ecc <HAL_RCC_OscConfig+0x5e8>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f003 030c 	and.w	r3, r3, #12
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00b      	beq.n	8004c54 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004c3c:	4ba3      	ldr	r3, [pc, #652]	; (8004ecc <HAL_RCC_OscConfig+0x5e8>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f003 030c 	and.w	r3, r3, #12
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d172      	bne.n	8004d2e <HAL_RCC_OscConfig+0x44a>
 8004c48:	4ba0      	ldr	r3, [pc, #640]	; (8004ecc <HAL_RCC_OscConfig+0x5e8>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d16c      	bne.n	8004d2e <HAL_RCC_OscConfig+0x44a>
 8004c54:	2302      	movs	r3, #2
 8004c56:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004c5e:	fa93 f3a3 	rbit	r3, r3
 8004c62:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004c66:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c6a:	fab3 f383 	clz	r3, r3
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	095b      	lsrs	r3, r3, #5
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	f043 0301 	orr.w	r3, r3, #1
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d102      	bne.n	8004c84 <HAL_RCC_OscConfig+0x3a0>
 8004c7e:	4b93      	ldr	r3, [pc, #588]	; (8004ecc <HAL_RCC_OscConfig+0x5e8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	e013      	b.n	8004cac <HAL_RCC_OscConfig+0x3c8>
 8004c84:	2302      	movs	r3, #2
 8004c86:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004c8e:	fa93 f3a3 	rbit	r3, r3
 8004c92:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004c96:	2302      	movs	r3, #2
 8004c98:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004c9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004ca0:	fa93 f3a3 	rbit	r3, r3
 8004ca4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004ca8:	4b88      	ldr	r3, [pc, #544]	; (8004ecc <HAL_RCC_OscConfig+0x5e8>)
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	2202      	movs	r2, #2
 8004cae:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004cb2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004cb6:	fa92 f2a2 	rbit	r2, r2
 8004cba:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004cbe:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004cc2:	fab2 f282 	clz	r2, r2
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	f042 0220 	orr.w	r2, r2, #32
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	f002 021f 	and.w	r2, r2, #31
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8004cd8:	4013      	ands	r3, r2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x410>
 8004cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ce2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d002      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	f000 be2e 	b.w	8005950 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf4:	4b75      	ldr	r3, [pc, #468]	; (8004ecc <HAL_RCC_OscConfig+0x5e8>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	21f8      	movs	r1, #248	; 0xf8
 8004d0a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004d12:	fa91 f1a1 	rbit	r1, r1
 8004d16:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004d1a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004d1e:	fab1 f181 	clz	r1, r1
 8004d22:	b2c9      	uxtb	r1, r1
 8004d24:	408b      	lsls	r3, r1
 8004d26:	4969      	ldr	r1, [pc, #420]	; (8004ecc <HAL_RCC_OscConfig+0x5e8>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d2c:	e0fd      	b.n	8004f2a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 8088 	beq.w	8004e50 <HAL_RCC_OscConfig+0x56c>
 8004d40:	2301      	movs	r3, #1
 8004d42:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d46:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004d4a:	fa93 f3a3 	rbit	r3, r3
 8004d4e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004d52:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d56:	fab3 f383 	clz	r3, r3
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	461a      	mov	r2, r3
 8004d68:	2301      	movs	r3, #1
 8004d6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d6c:	f7fc f922 	bl	8000fb4 <HAL_GetTick>
 8004d70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d74:	e00a      	b.n	8004d8c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d76:	f7fc f91d 	bl	8000fb4 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d902      	bls.n	8004d8c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	f000 bde2 	b.w	8005950 <HAL_RCC_OscConfig+0x106c>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d92:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004d96:	fa93 f3a3 	rbit	r3, r3
 8004d9a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004d9e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da2:	fab3 f383 	clz	r3, r3
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	095b      	lsrs	r3, r3, #5
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	f043 0301 	orr.w	r3, r3, #1
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d102      	bne.n	8004dbc <HAL_RCC_OscConfig+0x4d8>
 8004db6:	4b45      	ldr	r3, [pc, #276]	; (8004ecc <HAL_RCC_OscConfig+0x5e8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	e013      	b.n	8004de4 <HAL_RCC_OscConfig+0x500>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004dc6:	fa93 f3a3 	rbit	r3, r3
 8004dca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004dce:	2302      	movs	r3, #2
 8004dd0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004dd4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004dd8:	fa93 f3a3 	rbit	r3, r3
 8004ddc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004de0:	4b3a      	ldr	r3, [pc, #232]	; (8004ecc <HAL_RCC_OscConfig+0x5e8>)
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	2202      	movs	r2, #2
 8004de6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004dea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004dee:	fa92 f2a2 	rbit	r2, r2
 8004df2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004df6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004dfa:	fab2 f282 	clz	r2, r2
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	f042 0220 	orr.w	r2, r2, #32
 8004e04:	b2d2      	uxtb	r2, r2
 8004e06:	f002 021f 	and.w	r2, r2, #31
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e10:	4013      	ands	r3, r2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0af      	beq.n	8004d76 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e16:	4b2d      	ldr	r3, [pc, #180]	; (8004ecc <HAL_RCC_OscConfig+0x5e8>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	21f8      	movs	r1, #248	; 0xf8
 8004e2c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e30:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004e34:	fa91 f1a1 	rbit	r1, r1
 8004e38:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004e3c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004e40:	fab1 f181 	clz	r1, r1
 8004e44:	b2c9      	uxtb	r1, r1
 8004e46:	408b      	lsls	r3, r1
 8004e48:	4920      	ldr	r1, [pc, #128]	; (8004ecc <HAL_RCC_OscConfig+0x5e8>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	600b      	str	r3, [r1, #0]
 8004e4e:	e06c      	b.n	8004f2a <HAL_RCC_OscConfig+0x646>
 8004e50:	2301      	movs	r3, #1
 8004e52:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e56:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004e5a:	fa93 f3a3 	rbit	r3, r3
 8004e5e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004e62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e66:	fab3 f383 	clz	r3, r3
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	461a      	mov	r2, r3
 8004e78:	2300      	movs	r3, #0
 8004e7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e7c:	f7fc f89a 	bl	8000fb4 <HAL_GetTick>
 8004e80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e84:	e00a      	b.n	8004e9c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e86:	f7fc f895 	bl	8000fb4 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d902      	bls.n	8004e9c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	f000 bd5a 	b.w	8005950 <HAL_RCC_OscConfig+0x106c>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004ea6:	fa93 f3a3 	rbit	r3, r3
 8004eaa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004eae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eb2:	fab3 f383 	clz	r3, r3
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	095b      	lsrs	r3, r3, #5
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	f043 0301 	orr.w	r3, r3, #1
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d104      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x5ec>
 8004ec6:	4b01      	ldr	r3, [pc, #4]	; (8004ecc <HAL_RCC_OscConfig+0x5e8>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	e015      	b.n	8004ef8 <HAL_RCC_OscConfig+0x614>
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004eda:	fa93 f3a3 	rbit	r3, r3
 8004ede:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004ee8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004eec:	fa93 f3a3 	rbit	r3, r3
 8004ef0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004ef4:	4bc8      	ldr	r3, [pc, #800]	; (8005218 <HAL_RCC_OscConfig+0x934>)
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	2202      	movs	r2, #2
 8004efa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004efe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004f02:	fa92 f2a2 	rbit	r2, r2
 8004f06:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004f0a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004f0e:	fab2 f282 	clz	r2, r2
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	f042 0220 	orr.w	r2, r2, #32
 8004f18:	b2d2      	uxtb	r2, r2
 8004f1a:	f002 021f 	and.w	r2, r2, #31
 8004f1e:	2101      	movs	r1, #1
 8004f20:	fa01 f202 	lsl.w	r2, r1, r2
 8004f24:	4013      	ands	r3, r2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1ad      	bne.n	8004e86 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 8110 	beq.w	8005160 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d079      	beq.n	8005044 <HAL_RCC_OscConfig+0x760>
 8004f50:	2301      	movs	r3, #1
 8004f52:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f56:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004f5a:	fa93 f3a3 	rbit	r3, r3
 8004f5e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f66:	fab3 f383 	clz	r3, r3
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	4bab      	ldr	r3, [pc, #684]	; (800521c <HAL_RCC_OscConfig+0x938>)
 8004f70:	4413      	add	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	461a      	mov	r2, r3
 8004f76:	2301      	movs	r3, #1
 8004f78:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f7a:	f7fc f81b 	bl	8000fb4 <HAL_GetTick>
 8004f7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f82:	e00a      	b.n	8004f9a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f84:	f7fc f816 	bl	8000fb4 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d902      	bls.n	8004f9a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	f000 bcdb 	b.w	8005950 <HAL_RCC_OscConfig+0x106c>
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004fa4:	fa93 f3a3 	rbit	r3, r3
 8004fa8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fb0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fbc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	fa93 f2a3 	rbit	r2, r3
 8004fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fd8:	2202      	movs	r2, #2
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	fa93 f2a3 	rbit	r2, r3
 8004fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ff2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ff4:	4b88      	ldr	r3, [pc, #544]	; (8005218 <HAL_RCC_OscConfig+0x934>)
 8004ff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ffc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005000:	2102      	movs	r1, #2
 8005002:	6019      	str	r1, [r3, #0]
 8005004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005008:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	fa93 f1a3 	rbit	r1, r3
 8005012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005016:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800501a:	6019      	str	r1, [r3, #0]
  return result;
 800501c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005020:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	fab3 f383 	clz	r3, r3
 800502a:	b2db      	uxtb	r3, r3
 800502c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005030:	b2db      	uxtb	r3, r3
 8005032:	f003 031f 	and.w	r3, r3, #31
 8005036:	2101      	movs	r1, #1
 8005038:	fa01 f303 	lsl.w	r3, r1, r3
 800503c:	4013      	ands	r3, r2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0a0      	beq.n	8004f84 <HAL_RCC_OscConfig+0x6a0>
 8005042:	e08d      	b.n	8005160 <HAL_RCC_OscConfig+0x87c>
 8005044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005048:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800504c:	2201      	movs	r2, #1
 800504e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005054:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	fa93 f2a3 	rbit	r2, r3
 800505e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005062:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005066:	601a      	str	r2, [r3, #0]
  return result;
 8005068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800506c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005070:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005072:	fab3 f383 	clz	r3, r3
 8005076:	b2db      	uxtb	r3, r3
 8005078:	461a      	mov	r2, r3
 800507a:	4b68      	ldr	r3, [pc, #416]	; (800521c <HAL_RCC_OscConfig+0x938>)
 800507c:	4413      	add	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	461a      	mov	r2, r3
 8005082:	2300      	movs	r3, #0
 8005084:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005086:	f7fb ff95 	bl	8000fb4 <HAL_GetTick>
 800508a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800508e:	e00a      	b.n	80050a6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005090:	f7fb ff90 	bl	8000fb4 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d902      	bls.n	80050a6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	f000 bc55 	b.w	8005950 <HAL_RCC_OscConfig+0x106c>
 80050a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80050ae:	2202      	movs	r2, #2
 80050b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	fa93 f2a3 	rbit	r2, r3
 80050c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050c4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80050d2:	2202      	movs	r2, #2
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	fa93 f2a3 	rbit	r2, r3
 80050e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050f6:	2202      	movs	r2, #2
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	fa93 f2a3 	rbit	r2, r3
 8005108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800510c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005110:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005112:	4b41      	ldr	r3, [pc, #260]	; (8005218 <HAL_RCC_OscConfig+0x934>)
 8005114:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800511a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800511e:	2102      	movs	r1, #2
 8005120:	6019      	str	r1, [r3, #0]
 8005122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005126:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	fa93 f1a3 	rbit	r1, r3
 8005130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005134:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005138:	6019      	str	r1, [r3, #0]
  return result;
 800513a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800513e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	fab3 f383 	clz	r3, r3
 8005148:	b2db      	uxtb	r3, r3
 800514a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800514e:	b2db      	uxtb	r3, r3
 8005150:	f003 031f 	and.w	r3, r3, #31
 8005154:	2101      	movs	r1, #1
 8005156:	fa01 f303 	lsl.w	r3, r1, r3
 800515a:	4013      	ands	r3, r2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d197      	bne.n	8005090 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005160:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005164:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 81a1 	beq.w	80054b8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005176:	2300      	movs	r3, #0
 8005178:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800517c:	4b26      	ldr	r3, [pc, #152]	; (8005218 <HAL_RCC_OscConfig+0x934>)
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d116      	bne.n	80051b6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005188:	4b23      	ldr	r3, [pc, #140]	; (8005218 <HAL_RCC_OscConfig+0x934>)
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	4a22      	ldr	r2, [pc, #136]	; (8005218 <HAL_RCC_OscConfig+0x934>)
 800518e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005192:	61d3      	str	r3, [r2, #28]
 8005194:	4b20      	ldr	r3, [pc, #128]	; (8005218 <HAL_RCC_OscConfig+0x934>)
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800519c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051a0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051aa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80051ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80051b0:	2301      	movs	r3, #1
 80051b2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051b6:	4b1a      	ldr	r3, [pc, #104]	; (8005220 <HAL_RCC_OscConfig+0x93c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d11a      	bne.n	80051f8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051c2:	4b17      	ldr	r3, [pc, #92]	; (8005220 <HAL_RCC_OscConfig+0x93c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a16      	ldr	r2, [pc, #88]	; (8005220 <HAL_RCC_OscConfig+0x93c>)
 80051c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ce:	f7fb fef1 	bl	8000fb4 <HAL_GetTick>
 80051d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d6:	e009      	b.n	80051ec <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051d8:	f7fb feec 	bl	8000fb4 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b64      	cmp	r3, #100	; 0x64
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e3b1      	b.n	8005950 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ec:	4b0c      	ldr	r3, [pc, #48]	; (8005220 <HAL_RCC_OscConfig+0x93c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0ef      	beq.n	80051d8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d10d      	bne.n	8005224 <HAL_RCC_OscConfig+0x940>
 8005208:	4b03      	ldr	r3, [pc, #12]	; (8005218 <HAL_RCC_OscConfig+0x934>)
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	4a02      	ldr	r2, [pc, #8]	; (8005218 <HAL_RCC_OscConfig+0x934>)
 800520e:	f043 0301 	orr.w	r3, r3, #1
 8005212:	6213      	str	r3, [r2, #32]
 8005214:	e03c      	b.n	8005290 <HAL_RCC_OscConfig+0x9ac>
 8005216:	bf00      	nop
 8005218:	40021000 	.word	0x40021000
 800521c:	10908120 	.word	0x10908120
 8005220:	40007000 	.word	0x40007000
 8005224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005228:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10c      	bne.n	800524e <HAL_RCC_OscConfig+0x96a>
 8005234:	4bc1      	ldr	r3, [pc, #772]	; (800553c <HAL_RCC_OscConfig+0xc58>)
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	4ac0      	ldr	r2, [pc, #768]	; (800553c <HAL_RCC_OscConfig+0xc58>)
 800523a:	f023 0301 	bic.w	r3, r3, #1
 800523e:	6213      	str	r3, [r2, #32]
 8005240:	4bbe      	ldr	r3, [pc, #760]	; (800553c <HAL_RCC_OscConfig+0xc58>)
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	4abd      	ldr	r2, [pc, #756]	; (800553c <HAL_RCC_OscConfig+0xc58>)
 8005246:	f023 0304 	bic.w	r3, r3, #4
 800524a:	6213      	str	r3, [r2, #32]
 800524c:	e020      	b.n	8005290 <HAL_RCC_OscConfig+0x9ac>
 800524e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005252:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	2b05      	cmp	r3, #5
 800525c:	d10c      	bne.n	8005278 <HAL_RCC_OscConfig+0x994>
 800525e:	4bb7      	ldr	r3, [pc, #732]	; (800553c <HAL_RCC_OscConfig+0xc58>)
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	4ab6      	ldr	r2, [pc, #728]	; (800553c <HAL_RCC_OscConfig+0xc58>)
 8005264:	f043 0304 	orr.w	r3, r3, #4
 8005268:	6213      	str	r3, [r2, #32]
 800526a:	4bb4      	ldr	r3, [pc, #720]	; (800553c <HAL_RCC_OscConfig+0xc58>)
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	4ab3      	ldr	r2, [pc, #716]	; (800553c <HAL_RCC_OscConfig+0xc58>)
 8005270:	f043 0301 	orr.w	r3, r3, #1
 8005274:	6213      	str	r3, [r2, #32]
 8005276:	e00b      	b.n	8005290 <HAL_RCC_OscConfig+0x9ac>
 8005278:	4bb0      	ldr	r3, [pc, #704]	; (800553c <HAL_RCC_OscConfig+0xc58>)
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	4aaf      	ldr	r2, [pc, #700]	; (800553c <HAL_RCC_OscConfig+0xc58>)
 800527e:	f023 0301 	bic.w	r3, r3, #1
 8005282:	6213      	str	r3, [r2, #32]
 8005284:	4bad      	ldr	r3, [pc, #692]	; (800553c <HAL_RCC_OscConfig+0xc58>)
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	4aac      	ldr	r2, [pc, #688]	; (800553c <HAL_RCC_OscConfig+0xc58>)
 800528a:	f023 0304 	bic.w	r3, r3, #4
 800528e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005294:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 8081 	beq.w	80053a4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052a2:	f7fb fe87 	bl	8000fb4 <HAL_GetTick>
 80052a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052aa:	e00b      	b.n	80052c4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052ac:	f7fb fe82 	bl	8000fb4 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052bc:	4293      	cmp	r3, r2
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e345      	b.n	8005950 <HAL_RCC_OscConfig+0x106c>
 80052c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80052cc:	2202      	movs	r2, #2
 80052ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	fa93 f2a3 	rbit	r2, r3
 80052de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052e2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80052f0:	2202      	movs	r2, #2
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	fa93 f2a3 	rbit	r2, r3
 8005302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005306:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800530a:	601a      	str	r2, [r3, #0]
  return result;
 800530c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005310:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005314:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005316:	fab3 f383 	clz	r3, r3
 800531a:	b2db      	uxtb	r3, r3
 800531c:	095b      	lsrs	r3, r3, #5
 800531e:	b2db      	uxtb	r3, r3
 8005320:	f043 0302 	orr.w	r3, r3, #2
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d102      	bne.n	8005330 <HAL_RCC_OscConfig+0xa4c>
 800532a:	4b84      	ldr	r3, [pc, #528]	; (800553c <HAL_RCC_OscConfig+0xc58>)
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	e013      	b.n	8005358 <HAL_RCC_OscConfig+0xa74>
 8005330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005334:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005338:	2202      	movs	r2, #2
 800533a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800533c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005340:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	fa93 f2a3 	rbit	r2, r3
 800534a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800534e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	4b79      	ldr	r3, [pc, #484]	; (800553c <HAL_RCC_OscConfig+0xc58>)
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800535c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005360:	2102      	movs	r1, #2
 8005362:	6011      	str	r1, [r2, #0]
 8005364:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005368:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800536c:	6812      	ldr	r2, [r2, #0]
 800536e:	fa92 f1a2 	rbit	r1, r2
 8005372:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005376:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800537a:	6011      	str	r1, [r2, #0]
  return result;
 800537c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005380:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005384:	6812      	ldr	r2, [r2, #0]
 8005386:	fab2 f282 	clz	r2, r2
 800538a:	b2d2      	uxtb	r2, r2
 800538c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005390:	b2d2      	uxtb	r2, r2
 8005392:	f002 021f 	and.w	r2, r2, #31
 8005396:	2101      	movs	r1, #1
 8005398:	fa01 f202 	lsl.w	r2, r1, r2
 800539c:	4013      	ands	r3, r2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d084      	beq.n	80052ac <HAL_RCC_OscConfig+0x9c8>
 80053a2:	e07f      	b.n	80054a4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053a4:	f7fb fe06 	bl	8000fb4 <HAL_GetTick>
 80053a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053ac:	e00b      	b.n	80053c6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053ae:	f7fb fe01 	bl	8000fb4 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80053be:	4293      	cmp	r3, r2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e2c4      	b.n	8005950 <HAL_RCC_OscConfig+0x106c>
 80053c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80053ce:	2202      	movs	r2, #2
 80053d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053d6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	fa93 f2a3 	rbit	r2, r3
 80053e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053e4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80053f2:	2202      	movs	r2, #2
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053fa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	fa93 f2a3 	rbit	r2, r3
 8005404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005408:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800540c:	601a      	str	r2, [r3, #0]
  return result;
 800540e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005412:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005416:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005418:	fab3 f383 	clz	r3, r3
 800541c:	b2db      	uxtb	r3, r3
 800541e:	095b      	lsrs	r3, r3, #5
 8005420:	b2db      	uxtb	r3, r3
 8005422:	f043 0302 	orr.w	r3, r3, #2
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d102      	bne.n	8005432 <HAL_RCC_OscConfig+0xb4e>
 800542c:	4b43      	ldr	r3, [pc, #268]	; (800553c <HAL_RCC_OscConfig+0xc58>)
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	e013      	b.n	800545a <HAL_RCC_OscConfig+0xb76>
 8005432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005436:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800543a:	2202      	movs	r2, #2
 800543c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800543e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005442:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	fa93 f2a3 	rbit	r2, r3
 800544c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005450:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	4b39      	ldr	r3, [pc, #228]	; (800553c <HAL_RCC_OscConfig+0xc58>)
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800545e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005462:	2102      	movs	r1, #2
 8005464:	6011      	str	r1, [r2, #0]
 8005466:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800546a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800546e:	6812      	ldr	r2, [r2, #0]
 8005470:	fa92 f1a2 	rbit	r1, r2
 8005474:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005478:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800547c:	6011      	str	r1, [r2, #0]
  return result;
 800547e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005482:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005486:	6812      	ldr	r2, [r2, #0]
 8005488:	fab2 f282 	clz	r2, r2
 800548c:	b2d2      	uxtb	r2, r2
 800548e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005492:	b2d2      	uxtb	r2, r2
 8005494:	f002 021f 	and.w	r2, r2, #31
 8005498:	2101      	movs	r1, #1
 800549a:	fa01 f202 	lsl.w	r2, r1, r2
 800549e:	4013      	ands	r3, r2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d184      	bne.n	80053ae <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80054a4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d105      	bne.n	80054b8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054ac:	4b23      	ldr	r3, [pc, #140]	; (800553c <HAL_RCC_OscConfig+0xc58>)
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	4a22      	ldr	r2, [pc, #136]	; (800553c <HAL_RCC_OscConfig+0xc58>)
 80054b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054b6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 8242 	beq.w	800594e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054ca:	4b1c      	ldr	r3, [pc, #112]	; (800553c <HAL_RCC_OscConfig+0xc58>)
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f003 030c 	and.w	r3, r3, #12
 80054d2:	2b08      	cmp	r3, #8
 80054d4:	f000 8213 	beq.w	80058fe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	f040 8162 	bne.w	80057ae <HAL_RCC_OscConfig+0xeca>
 80054ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054ee:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80054f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054fc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	fa93 f2a3 	rbit	r2, r3
 8005506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800550a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800550e:	601a      	str	r2, [r3, #0]
  return result;
 8005510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005514:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005518:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800551a:	fab3 f383 	clz	r3, r3
 800551e:	b2db      	uxtb	r3, r3
 8005520:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005524:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	461a      	mov	r2, r3
 800552c:	2300      	movs	r3, #0
 800552e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005530:	f7fb fd40 	bl	8000fb4 <HAL_GetTick>
 8005534:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005538:	e00c      	b.n	8005554 <HAL_RCC_OscConfig+0xc70>
 800553a:	bf00      	nop
 800553c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005540:	f7fb fd38 	bl	8000fb4 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d901      	bls.n	8005554 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e1fd      	b.n	8005950 <HAL_RCC_OscConfig+0x106c>
 8005554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005558:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800555c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005560:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005566:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	fa93 f2a3 	rbit	r2, r3
 8005570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005574:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005578:	601a      	str	r2, [r3, #0]
  return result;
 800557a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800557e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005582:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005584:	fab3 f383 	clz	r3, r3
 8005588:	b2db      	uxtb	r3, r3
 800558a:	095b      	lsrs	r3, r3, #5
 800558c:	b2db      	uxtb	r3, r3
 800558e:	f043 0301 	orr.w	r3, r3, #1
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b01      	cmp	r3, #1
 8005596:	d102      	bne.n	800559e <HAL_RCC_OscConfig+0xcba>
 8005598:	4bb0      	ldr	r3, [pc, #704]	; (800585c <HAL_RCC_OscConfig+0xf78>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	e027      	b.n	80055ee <HAL_RCC_OscConfig+0xd0a>
 800559e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055a2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80055a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055b0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	fa93 f2a3 	rbit	r2, r3
 80055ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055be:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80055cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055d6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	fa93 f2a3 	rbit	r2, r3
 80055e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055e4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	4b9c      	ldr	r3, [pc, #624]	; (800585c <HAL_RCC_OscConfig+0xf78>)
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055f2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80055f6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80055fa:	6011      	str	r1, [r2, #0]
 80055fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005600:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005604:	6812      	ldr	r2, [r2, #0]
 8005606:	fa92 f1a2 	rbit	r1, r2
 800560a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800560e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005612:	6011      	str	r1, [r2, #0]
  return result;
 8005614:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005618:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800561c:	6812      	ldr	r2, [r2, #0]
 800561e:	fab2 f282 	clz	r2, r2
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	f042 0220 	orr.w	r2, r2, #32
 8005628:	b2d2      	uxtb	r2, r2
 800562a:	f002 021f 	and.w	r2, r2, #31
 800562e:	2101      	movs	r1, #1
 8005630:	fa01 f202 	lsl.w	r2, r1, r2
 8005634:	4013      	ands	r3, r2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d182      	bne.n	8005540 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800563a:	4b88      	ldr	r3, [pc, #544]	; (800585c <HAL_RCC_OscConfig+0xf78>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005646:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800564e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005652:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	430b      	orrs	r3, r1
 800565c:	497f      	ldr	r1, [pc, #508]	; (800585c <HAL_RCC_OscConfig+0xf78>)
 800565e:	4313      	orrs	r3, r2
 8005660:	604b      	str	r3, [r1, #4]
 8005662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005666:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800566a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800566e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005674:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	fa93 f2a3 	rbit	r2, r3
 800567e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005682:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005686:	601a      	str	r2, [r3, #0]
  return result;
 8005688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800568c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005690:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005692:	fab3 f383 	clz	r3, r3
 8005696:	b2db      	uxtb	r3, r3
 8005698:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800569c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	461a      	mov	r2, r3
 80056a4:	2301      	movs	r3, #1
 80056a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a8:	f7fb fc84 	bl	8000fb4 <HAL_GetTick>
 80056ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056b0:	e009      	b.n	80056c6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056b2:	f7fb fc7f 	bl	8000fb4 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e144      	b.n	8005950 <HAL_RCC_OscConfig+0x106c>
 80056c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056ca:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80056ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056d8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	fa93 f2a3 	rbit	r2, r3
 80056e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056e6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80056ea:	601a      	str	r2, [r3, #0]
  return result;
 80056ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056f0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80056f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056f6:	fab3 f383 	clz	r3, r3
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	095b      	lsrs	r3, r3, #5
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	f043 0301 	orr.w	r3, r3, #1
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b01      	cmp	r3, #1
 8005708:	d102      	bne.n	8005710 <HAL_RCC_OscConfig+0xe2c>
 800570a:	4b54      	ldr	r3, [pc, #336]	; (800585c <HAL_RCC_OscConfig+0xf78>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	e027      	b.n	8005760 <HAL_RCC_OscConfig+0xe7c>
 8005710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005714:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005718:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800571c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800571e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005722:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	fa93 f2a3 	rbit	r2, r3
 800572c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005730:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800573a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800573e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005748:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	fa93 f2a3 	rbit	r2, r3
 8005752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005756:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	4b3f      	ldr	r3, [pc, #252]	; (800585c <HAL_RCC_OscConfig+0xf78>)
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005764:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005768:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800576c:	6011      	str	r1, [r2, #0]
 800576e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005772:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005776:	6812      	ldr	r2, [r2, #0]
 8005778:	fa92 f1a2 	rbit	r1, r2
 800577c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005780:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005784:	6011      	str	r1, [r2, #0]
  return result;
 8005786:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800578a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800578e:	6812      	ldr	r2, [r2, #0]
 8005790:	fab2 f282 	clz	r2, r2
 8005794:	b2d2      	uxtb	r2, r2
 8005796:	f042 0220 	orr.w	r2, r2, #32
 800579a:	b2d2      	uxtb	r2, r2
 800579c:	f002 021f 	and.w	r2, r2, #31
 80057a0:	2101      	movs	r1, #1
 80057a2:	fa01 f202 	lsl.w	r2, r1, r2
 80057a6:	4013      	ands	r3, r2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d082      	beq.n	80056b2 <HAL_RCC_OscConfig+0xdce>
 80057ac:	e0cf      	b.n	800594e <HAL_RCC_OscConfig+0x106a>
 80057ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057b2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80057b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057c0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	fa93 f2a3 	rbit	r2, r3
 80057ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ce:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80057d2:	601a      	str	r2, [r3, #0]
  return result;
 80057d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057d8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80057dc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057de:	fab3 f383 	clz	r3, r3
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80057e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	461a      	mov	r2, r3
 80057f0:	2300      	movs	r3, #0
 80057f2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f4:	f7fb fbde 	bl	8000fb4 <HAL_GetTick>
 80057f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057fc:	e009      	b.n	8005812 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057fe:	f7fb fbd9 	bl	8000fb4 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e09e      	b.n	8005950 <HAL_RCC_OscConfig+0x106c>
 8005812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005816:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800581a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800581e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005824:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	fa93 f2a3 	rbit	r2, r3
 800582e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005832:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005836:	601a      	str	r2, [r3, #0]
  return result;
 8005838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800583c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005840:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005842:	fab3 f383 	clz	r3, r3
 8005846:	b2db      	uxtb	r3, r3
 8005848:	095b      	lsrs	r3, r3, #5
 800584a:	b2db      	uxtb	r3, r3
 800584c:	f043 0301 	orr.w	r3, r3, #1
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b01      	cmp	r3, #1
 8005854:	d104      	bne.n	8005860 <HAL_RCC_OscConfig+0xf7c>
 8005856:	4b01      	ldr	r3, [pc, #4]	; (800585c <HAL_RCC_OscConfig+0xf78>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	e029      	b.n	80058b0 <HAL_RCC_OscConfig+0xfcc>
 800585c:	40021000 	.word	0x40021000
 8005860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005864:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005868:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800586c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800586e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005872:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	fa93 f2a3 	rbit	r2, r3
 800587c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005880:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800588a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800588e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005898:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	fa93 f2a3 	rbit	r2, r3
 80058a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058a6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80058aa:	601a      	str	r2, [r3, #0]
 80058ac:	4b2b      	ldr	r3, [pc, #172]	; (800595c <HAL_RCC_OscConfig+0x1078>)
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058b4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80058b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80058bc:	6011      	str	r1, [r2, #0]
 80058be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058c2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80058c6:	6812      	ldr	r2, [r2, #0]
 80058c8:	fa92 f1a2 	rbit	r1, r2
 80058cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058d0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80058d4:	6011      	str	r1, [r2, #0]
  return result;
 80058d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058da:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80058de:	6812      	ldr	r2, [r2, #0]
 80058e0:	fab2 f282 	clz	r2, r2
 80058e4:	b2d2      	uxtb	r2, r2
 80058e6:	f042 0220 	orr.w	r2, r2, #32
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	f002 021f 	and.w	r2, r2, #31
 80058f0:	2101      	movs	r1, #1
 80058f2:	fa01 f202 	lsl.w	r2, r1, r2
 80058f6:	4013      	ands	r3, r2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d180      	bne.n	80057fe <HAL_RCC_OscConfig+0xf1a>
 80058fc:	e027      	b.n	800594e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005902:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d101      	bne.n	8005912 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e01e      	b.n	8005950 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005912:	4b12      	ldr	r3, [pc, #72]	; (800595c <HAL_RCC_OscConfig+0x1078>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800591a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800591e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005926:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	429a      	cmp	r2, r3
 8005930:	d10b      	bne.n	800594a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005932:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005936:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800593a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800593e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005946:	429a      	cmp	r2, r3
 8005948:	d001      	beq.n	800594e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	40021000 	.word	0x40021000

08005960 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b09e      	sub	sp, #120	; 0x78
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e162      	b.n	8005c3e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005978:	4b90      	ldr	r3, [pc, #576]	; (8005bbc <HAL_RCC_ClockConfig+0x25c>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	429a      	cmp	r2, r3
 8005984:	d910      	bls.n	80059a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005986:	4b8d      	ldr	r3, [pc, #564]	; (8005bbc <HAL_RCC_ClockConfig+0x25c>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f023 0207 	bic.w	r2, r3, #7
 800598e:	498b      	ldr	r1, [pc, #556]	; (8005bbc <HAL_RCC_ClockConfig+0x25c>)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	4313      	orrs	r3, r2
 8005994:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005996:	4b89      	ldr	r3, [pc, #548]	; (8005bbc <HAL_RCC_ClockConfig+0x25c>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d001      	beq.n	80059a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e14a      	b.n	8005c3e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0302 	and.w	r3, r3, #2
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d008      	beq.n	80059c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059b4:	4b82      	ldr	r3, [pc, #520]	; (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	497f      	ldr	r1, [pc, #508]	; (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 80dc 	beq.w	8005b8c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d13c      	bne.n	8005a56 <HAL_RCC_ClockConfig+0xf6>
 80059dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059e4:	fa93 f3a3 	rbit	r3, r3
 80059e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80059ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ec:	fab3 f383 	clz	r3, r3
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	095b      	lsrs	r3, r3, #5
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	f043 0301 	orr.w	r3, r3, #1
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d102      	bne.n	8005a06 <HAL_RCC_ClockConfig+0xa6>
 8005a00:	4b6f      	ldr	r3, [pc, #444]	; (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	e00f      	b.n	8005a26 <HAL_RCC_ClockConfig+0xc6>
 8005a06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a0e:	fa93 f3a3 	rbit	r3, r3
 8005a12:	667b      	str	r3, [r7, #100]	; 0x64
 8005a14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a18:	663b      	str	r3, [r7, #96]	; 0x60
 8005a1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a1c:	fa93 f3a3 	rbit	r3, r3
 8005a20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a22:	4b67      	ldr	r3, [pc, #412]	; (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a2a:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a2e:	fa92 f2a2 	rbit	r2, r2
 8005a32:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005a34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a36:	fab2 f282 	clz	r2, r2
 8005a3a:	b2d2      	uxtb	r2, r2
 8005a3c:	f042 0220 	orr.w	r2, r2, #32
 8005a40:	b2d2      	uxtb	r2, r2
 8005a42:	f002 021f 	and.w	r2, r2, #31
 8005a46:	2101      	movs	r1, #1
 8005a48:	fa01 f202 	lsl.w	r2, r1, r2
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d17b      	bne.n	8005b4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e0f3      	b.n	8005c3e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d13c      	bne.n	8005ad8 <HAL_RCC_ClockConfig+0x178>
 8005a5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a66:	fa93 f3a3 	rbit	r3, r3
 8005a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a6e:	fab3 f383 	clz	r3, r3
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	095b      	lsrs	r3, r3, #5
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	f043 0301 	orr.w	r3, r3, #1
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d102      	bne.n	8005a88 <HAL_RCC_ClockConfig+0x128>
 8005a82:	4b4f      	ldr	r3, [pc, #316]	; (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	e00f      	b.n	8005aa8 <HAL_RCC_ClockConfig+0x148>
 8005a88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a90:	fa93 f3a3 	rbit	r3, r3
 8005a94:	647b      	str	r3, [r7, #68]	; 0x44
 8005a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a9a:	643b      	str	r3, [r7, #64]	; 0x40
 8005a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a9e:	fa93 f3a3 	rbit	r3, r3
 8005aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aa4:	4b46      	ldr	r3, [pc, #280]	; (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005aac:	63ba      	str	r2, [r7, #56]	; 0x38
 8005aae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ab0:	fa92 f2a2 	rbit	r2, r2
 8005ab4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ab8:	fab2 f282 	clz	r2, r2
 8005abc:	b2d2      	uxtb	r2, r2
 8005abe:	f042 0220 	orr.w	r2, r2, #32
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	f002 021f 	and.w	r2, r2, #31
 8005ac8:	2101      	movs	r1, #1
 8005aca:	fa01 f202 	lsl.w	r2, r1, r2
 8005ace:	4013      	ands	r3, r2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d13a      	bne.n	8005b4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e0b2      	b.n	8005c3e <HAL_RCC_ClockConfig+0x2de>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ade:	fa93 f3a3 	rbit	r3, r3
 8005ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ae6:	fab3 f383 	clz	r3, r3
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	095b      	lsrs	r3, r3, #5
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	f043 0301 	orr.w	r3, r3, #1
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d102      	bne.n	8005b00 <HAL_RCC_ClockConfig+0x1a0>
 8005afa:	4b31      	ldr	r3, [pc, #196]	; (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	e00d      	b.n	8005b1c <HAL_RCC_ClockConfig+0x1bc>
 8005b00:	2302      	movs	r3, #2
 8005b02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	fa93 f3a3 	rbit	r3, r3
 8005b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	623b      	str	r3, [r7, #32]
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	fa93 f3a3 	rbit	r3, r3
 8005b16:	61fb      	str	r3, [r7, #28]
 8005b18:	4b29      	ldr	r3, [pc, #164]	; (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	61ba      	str	r2, [r7, #24]
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	fa92 f2a2 	rbit	r2, r2
 8005b26:	617a      	str	r2, [r7, #20]
  return result;
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	fab2 f282 	clz	r2, r2
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	f042 0220 	orr.w	r2, r2, #32
 8005b34:	b2d2      	uxtb	r2, r2
 8005b36:	f002 021f 	and.w	r2, r2, #31
 8005b3a:	2101      	movs	r1, #1
 8005b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b40:	4013      	ands	r3, r2
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e079      	b.n	8005c3e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b4a:	4b1d      	ldr	r3, [pc, #116]	; (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f023 0203 	bic.w	r2, r3, #3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	491a      	ldr	r1, [pc, #104]	; (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b5c:	f7fb fa2a 	bl	8000fb4 <HAL_GetTick>
 8005b60:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b62:	e00a      	b.n	8005b7a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b64:	f7fb fa26 	bl	8000fb4 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e061      	b.n	8005c3e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b7a:	4b11      	ldr	r3, [pc, #68]	; (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f003 020c 	and.w	r2, r3, #12
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d1eb      	bne.n	8005b64 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b8c:	4b0b      	ldr	r3, [pc, #44]	; (8005bbc <HAL_RCC_ClockConfig+0x25c>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0307 	and.w	r3, r3, #7
 8005b94:	683a      	ldr	r2, [r7, #0]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d214      	bcs.n	8005bc4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b9a:	4b08      	ldr	r3, [pc, #32]	; (8005bbc <HAL_RCC_ClockConfig+0x25c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f023 0207 	bic.w	r2, r3, #7
 8005ba2:	4906      	ldr	r1, [pc, #24]	; (8005bbc <HAL_RCC_ClockConfig+0x25c>)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005baa:	4b04      	ldr	r3, [pc, #16]	; (8005bbc <HAL_RCC_ClockConfig+0x25c>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0307 	and.w	r3, r3, #7
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d005      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e040      	b.n	8005c3e <HAL_RCC_ClockConfig+0x2de>
 8005bbc:	40022000 	.word	0x40022000
 8005bc0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d008      	beq.n	8005be2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bd0:	4b1d      	ldr	r3, [pc, #116]	; (8005c48 <HAL_RCC_ClockConfig+0x2e8>)
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	491a      	ldr	r1, [pc, #104]	; (8005c48 <HAL_RCC_ClockConfig+0x2e8>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0308 	and.w	r3, r3, #8
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d009      	beq.n	8005c02 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bee:	4b16      	ldr	r3, [pc, #88]	; (8005c48 <HAL_RCC_ClockConfig+0x2e8>)
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	4912      	ldr	r1, [pc, #72]	; (8005c48 <HAL_RCC_ClockConfig+0x2e8>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005c02:	f000 f829 	bl	8005c58 <HAL_RCC_GetSysClockFreq>
 8005c06:	4601      	mov	r1, r0
 8005c08:	4b0f      	ldr	r3, [pc, #60]	; (8005c48 <HAL_RCC_ClockConfig+0x2e8>)
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c10:	22f0      	movs	r2, #240	; 0xf0
 8005c12:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	fa92 f2a2 	rbit	r2, r2
 8005c1a:	60fa      	str	r2, [r7, #12]
  return result;
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	fab2 f282 	clz	r2, r2
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	40d3      	lsrs	r3, r2
 8005c26:	4a09      	ldr	r2, [pc, #36]	; (8005c4c <HAL_RCC_ClockConfig+0x2ec>)
 8005c28:	5cd3      	ldrb	r3, [r2, r3]
 8005c2a:	fa21 f303 	lsr.w	r3, r1, r3
 8005c2e:	4a08      	ldr	r2, [pc, #32]	; (8005c50 <HAL_RCC_ClockConfig+0x2f0>)
 8005c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005c32:	4b08      	ldr	r3, [pc, #32]	; (8005c54 <HAL_RCC_ClockConfig+0x2f4>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fb f978 	bl	8000f2c <HAL_InitTick>
  
  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3778      	adds	r7, #120	; 0x78
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	40021000 	.word	0x40021000
 8005c4c:	0800bd60 	.word	0x0800bd60
 8005c50:	20000004 	.word	0x20000004
 8005c54:	20000008 	.word	0x20000008

08005c58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b08b      	sub	sp, #44	; 0x2c
 8005c5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	61fb      	str	r3, [r7, #28]
 8005c62:	2300      	movs	r3, #0
 8005c64:	61bb      	str	r3, [r7, #24]
 8005c66:	2300      	movs	r3, #0
 8005c68:	627b      	str	r3, [r7, #36]	; 0x24
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005c72:	4b29      	ldr	r3, [pc, #164]	; (8005d18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	f003 030c 	and.w	r3, r3, #12
 8005c7e:	2b04      	cmp	r3, #4
 8005c80:	d002      	beq.n	8005c88 <HAL_RCC_GetSysClockFreq+0x30>
 8005c82:	2b08      	cmp	r3, #8
 8005c84:	d003      	beq.n	8005c8e <HAL_RCC_GetSysClockFreq+0x36>
 8005c86:	e03c      	b.n	8005d02 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c88:	4b24      	ldr	r3, [pc, #144]	; (8005d1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005c8a:	623b      	str	r3, [r7, #32]
      break;
 8005c8c:	e03c      	b.n	8005d08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005c94:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005c98:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	fa92 f2a2 	rbit	r2, r2
 8005ca0:	607a      	str	r2, [r7, #4]
  return result;
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	fab2 f282 	clz	r2, r2
 8005ca8:	b2d2      	uxtb	r2, r2
 8005caa:	40d3      	lsrs	r3, r2
 8005cac:	4a1c      	ldr	r2, [pc, #112]	; (8005d20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005cae:	5cd3      	ldrb	r3, [r2, r3]
 8005cb0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005cb2:	4b19      	ldr	r3, [pc, #100]	; (8005d18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb6:	f003 030f 	and.w	r3, r3, #15
 8005cba:	220f      	movs	r2, #15
 8005cbc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	fa92 f2a2 	rbit	r2, r2
 8005cc4:	60fa      	str	r2, [r7, #12]
  return result;
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	fab2 f282 	clz	r2, r2
 8005ccc:	b2d2      	uxtb	r2, r2
 8005cce:	40d3      	lsrs	r3, r2
 8005cd0:	4a14      	ldr	r2, [pc, #80]	; (8005d24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005cd2:	5cd3      	ldrb	r3, [r2, r3]
 8005cd4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d008      	beq.n	8005cf2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005ce0:	4a0e      	ldr	r2, [pc, #56]	; (8005d1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	fb02 f303 	mul.w	r3, r2, r3
 8005cee:	627b      	str	r3, [r7, #36]	; 0x24
 8005cf0:	e004      	b.n	8005cfc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	4a0c      	ldr	r2, [pc, #48]	; (8005d28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005cf6:	fb02 f303 	mul.w	r3, r2, r3
 8005cfa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	623b      	str	r3, [r7, #32]
      break;
 8005d00:	e002      	b.n	8005d08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d02:	4b06      	ldr	r3, [pc, #24]	; (8005d1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d04:	623b      	str	r3, [r7, #32]
      break;
 8005d06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d08:	6a3b      	ldr	r3, [r7, #32]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	372c      	adds	r7, #44	; 0x2c
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	40021000 	.word	0x40021000
 8005d1c:	007a1200 	.word	0x007a1200
 8005d20:	0800bd70 	.word	0x0800bd70
 8005d24:	0800bd80 	.word	0x0800bd80
 8005d28:	003d0900 	.word	0x003d0900

08005d2c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b092      	sub	sp, #72	; 0x48
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 80d4 	beq.w	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d50:	4b4e      	ldr	r3, [pc, #312]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10e      	bne.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d5c:	4b4b      	ldr	r3, [pc, #300]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	4a4a      	ldr	r2, [pc, #296]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d66:	61d3      	str	r3, [r2, #28]
 8005d68:	4b48      	ldr	r3, [pc, #288]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d70:	60bb      	str	r3, [r7, #8]
 8005d72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d74:	2301      	movs	r3, #1
 8005d76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d7a:	4b45      	ldr	r3, [pc, #276]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d118      	bne.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d86:	4b42      	ldr	r3, [pc, #264]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a41      	ldr	r2, [pc, #260]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d90:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d92:	f7fb f90f 	bl	8000fb4 <HAL_GetTick>
 8005d96:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d98:	e008      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d9a:	f7fb f90b 	bl	8000fb4 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	2b64      	cmp	r3, #100	; 0x64
 8005da6:	d901      	bls.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e169      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dac:	4b38      	ldr	r3, [pc, #224]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d0f0      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005db8:	4b34      	ldr	r3, [pc, #208]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dba:	6a1b      	ldr	r3, [r3, #32]
 8005dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 8084 	beq.w	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d07c      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dd8:	4b2c      	ldr	r3, [pc, #176]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005de2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005de6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dea:	fa93 f3a3 	rbit	r3, r3
 8005dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005df2:	fab3 f383 	clz	r3, r3
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	461a      	mov	r2, r3
 8005dfa:	4b26      	ldr	r3, [pc, #152]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005dfc:	4413      	add	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	461a      	mov	r2, r3
 8005e02:	2301      	movs	r3, #1
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0e:	fa93 f3a3 	rbit	r3, r3
 8005e12:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e16:	fab3 f383 	clz	r3, r3
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	4b1d      	ldr	r3, [pc, #116]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e20:	4413      	add	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	461a      	mov	r2, r3
 8005e26:	2300      	movs	r3, #0
 8005e28:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005e2a:	4a18      	ldr	r2, [pc, #96]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e2e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d04b      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e3a:	f7fb f8bb 	bl	8000fb4 <HAL_GetTick>
 8005e3e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e40:	e00a      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e42:	f7fb f8b7 	bl	8000fb4 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d901      	bls.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e113      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5e:	fa93 f3a3 	rbit	r3, r3
 8005e62:	627b      	str	r3, [r7, #36]	; 0x24
 8005e64:	2302      	movs	r3, #2
 8005e66:	623b      	str	r3, [r7, #32]
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	fa93 f3a3 	rbit	r3, r3
 8005e6e:	61fb      	str	r3, [r7, #28]
  return result;
 8005e70:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e72:	fab3 f383 	clz	r3, r3
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	095b      	lsrs	r3, r3, #5
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	f043 0302 	orr.w	r3, r3, #2
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d108      	bne.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005e86:	4b01      	ldr	r3, [pc, #4]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	e00d      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005e8c:	40021000 	.word	0x40021000
 8005e90:	40007000 	.word	0x40007000
 8005e94:	10908100 	.word	0x10908100
 8005e98:	2302      	movs	r3, #2
 8005e9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	fa93 f3a3 	rbit	r3, r3
 8005ea2:	617b      	str	r3, [r7, #20]
 8005ea4:	4b78      	ldr	r3, [pc, #480]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	613a      	str	r2, [r7, #16]
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	fa92 f2a2 	rbit	r2, r2
 8005eb2:	60fa      	str	r2, [r7, #12]
  return result;
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	fab2 f282 	clz	r2, r2
 8005eba:	b2d2      	uxtb	r2, r2
 8005ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ec0:	b2d2      	uxtb	r2, r2
 8005ec2:	f002 021f 	and.w	r2, r2, #31
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8005ecc:	4013      	ands	r3, r2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0b7      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005ed2:	4b6d      	ldr	r3, [pc, #436]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	496a      	ldr	r1, [pc, #424]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005ee4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d105      	bne.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eec:	4b66      	ldr	r3, [pc, #408]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eee:	69db      	ldr	r3, [r3, #28]
 8005ef0:	4a65      	ldr	r2, [pc, #404]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ef6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d008      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f04:	4b60      	ldr	r3, [pc, #384]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f08:	f023 0203 	bic.w	r2, r3, #3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	495d      	ldr	r1, [pc, #372]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d008      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f22:	4b59      	ldr	r3, [pc, #356]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	4956      	ldr	r1, [pc, #344]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d008      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f40:	4b51      	ldr	r3, [pc, #324]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	494e      	ldr	r1, [pc, #312]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0320 	and.w	r3, r3, #32
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d008      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f5e:	4b4a      	ldr	r3, [pc, #296]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f62:	f023 0210 	bic.w	r2, r3, #16
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	4947      	ldr	r1, [pc, #284]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d008      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005f7c:	4b42      	ldr	r3, [pc, #264]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f88:	493f      	ldr	r1, [pc, #252]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d008      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f9a:	4b3b      	ldr	r3, [pc, #236]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9e:	f023 0220 	bic.w	r2, r3, #32
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	4938      	ldr	r1, [pc, #224]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0308 	and.w	r3, r3, #8
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d008      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005fb8:	4b33      	ldr	r3, [pc, #204]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	4930      	ldr	r1, [pc, #192]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0310 	and.w	r3, r3, #16
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d008      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005fd6:	4b2c      	ldr	r3, [pc, #176]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	4929      	ldr	r1, [pc, #164]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d008      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ff4:	4b24      	ldr	r3, [pc, #144]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	4921      	ldr	r1, [pc, #132]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006002:	4313      	orrs	r3, r2
 8006004:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600e:	2b00      	cmp	r3, #0
 8006010:	d008      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006012:	4b1d      	ldr	r3, [pc, #116]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006016:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601e:	491a      	ldr	r1, [pc, #104]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006020:	4313      	orrs	r3, r2
 8006022:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602c:	2b00      	cmp	r3, #0
 800602e:	d008      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006030:	4b15      	ldr	r3, [pc, #84]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006034:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603c:	4912      	ldr	r1, [pc, #72]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800603e:	4313      	orrs	r3, r2
 8006040:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d008      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800604e:	4b0e      	ldr	r3, [pc, #56]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006052:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605a:	490b      	ldr	r1, [pc, #44]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800605c:	4313      	orrs	r3, r2
 800605e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d008      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800606c:	4b06      	ldr	r3, [pc, #24]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800606e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006070:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006078:	4903      	ldr	r1, [pc, #12]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800607a:	4313      	orrs	r3, r2
 800607c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3748      	adds	r7, #72	; 0x48
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	40021000 	.word	0x40021000

0800608c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e049      	b.n	8006132 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d106      	bne.n	80060b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7fa fdf2 	bl	8000c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	3304      	adds	r3, #4
 80060c8:	4619      	mov	r1, r3
 80060ca:	4610      	mov	r0, r2
 80060cc:	f000 fd6a 	bl	8006ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
	...

0800613c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b01      	cmp	r3, #1
 800614e:	d001      	beq.n	8006154 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e04a      	b.n	80061ea <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68da      	ldr	r2, [r3, #12]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0201 	orr.w	r2, r2, #1
 800616a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a21      	ldr	r2, [pc, #132]	; (80061f8 <HAL_TIM_Base_Start_IT+0xbc>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d018      	beq.n	80061a8 <HAL_TIM_Base_Start_IT+0x6c>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800617e:	d013      	beq.n	80061a8 <HAL_TIM_Base_Start_IT+0x6c>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a1d      	ldr	r2, [pc, #116]	; (80061fc <HAL_TIM_Base_Start_IT+0xc0>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d00e      	beq.n	80061a8 <HAL_TIM_Base_Start_IT+0x6c>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a1c      	ldr	r2, [pc, #112]	; (8006200 <HAL_TIM_Base_Start_IT+0xc4>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d009      	beq.n	80061a8 <HAL_TIM_Base_Start_IT+0x6c>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a1a      	ldr	r2, [pc, #104]	; (8006204 <HAL_TIM_Base_Start_IT+0xc8>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d004      	beq.n	80061a8 <HAL_TIM_Base_Start_IT+0x6c>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a19      	ldr	r2, [pc, #100]	; (8006208 <HAL_TIM_Base_Start_IT+0xcc>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d115      	bne.n	80061d4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	4b17      	ldr	r3, [pc, #92]	; (800620c <HAL_TIM_Base_Start_IT+0xd0>)
 80061b0:	4013      	ands	r3, r2
 80061b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2b06      	cmp	r3, #6
 80061b8:	d015      	beq.n	80061e6 <HAL_TIM_Base_Start_IT+0xaa>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c0:	d011      	beq.n	80061e6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f042 0201 	orr.w	r2, r2, #1
 80061d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061d2:	e008      	b.n	80061e6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0201 	orr.w	r2, r2, #1
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	e000      	b.n	80061e8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	40012c00 	.word	0x40012c00
 80061fc:	40000400 	.word	0x40000400
 8006200:	40000800 	.word	0x40000800
 8006204:	40013400 	.word	0x40013400
 8006208:	40014000 	.word	0x40014000
 800620c:	00010007 	.word	0x00010007

08006210 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e049      	b.n	80062b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d106      	bne.n	800623c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f841 	bl	80062be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2202      	movs	r2, #2
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3304      	adds	r3, #4
 800624c:	4619      	mov	r1, r3
 800624e:	4610      	mov	r0, r2
 8006250:	f000 fca8 	bl	8006ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3708      	adds	r7, #8
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
	...

080062d4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062de:	2300      	movs	r3, #0
 80062e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d109      	bne.n	80062fc <HAL_TIM_PWM_Start_IT+0x28>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	bf14      	ite	ne
 80062f4:	2301      	movne	r3, #1
 80062f6:	2300      	moveq	r3, #0
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	e03c      	b.n	8006376 <HAL_TIM_PWM_Start_IT+0xa2>
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	2b04      	cmp	r3, #4
 8006300:	d109      	bne.n	8006316 <HAL_TIM_PWM_Start_IT+0x42>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b01      	cmp	r3, #1
 800630c:	bf14      	ite	ne
 800630e:	2301      	movne	r3, #1
 8006310:	2300      	moveq	r3, #0
 8006312:	b2db      	uxtb	r3, r3
 8006314:	e02f      	b.n	8006376 <HAL_TIM_PWM_Start_IT+0xa2>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b08      	cmp	r3, #8
 800631a:	d109      	bne.n	8006330 <HAL_TIM_PWM_Start_IT+0x5c>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b01      	cmp	r3, #1
 8006326:	bf14      	ite	ne
 8006328:	2301      	movne	r3, #1
 800632a:	2300      	moveq	r3, #0
 800632c:	b2db      	uxtb	r3, r3
 800632e:	e022      	b.n	8006376 <HAL_TIM_PWM_Start_IT+0xa2>
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	2b0c      	cmp	r3, #12
 8006334:	d109      	bne.n	800634a <HAL_TIM_PWM_Start_IT+0x76>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b01      	cmp	r3, #1
 8006340:	bf14      	ite	ne
 8006342:	2301      	movne	r3, #1
 8006344:	2300      	moveq	r3, #0
 8006346:	b2db      	uxtb	r3, r3
 8006348:	e015      	b.n	8006376 <HAL_TIM_PWM_Start_IT+0xa2>
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b10      	cmp	r3, #16
 800634e:	d109      	bne.n	8006364 <HAL_TIM_PWM_Start_IT+0x90>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b01      	cmp	r3, #1
 800635a:	bf14      	ite	ne
 800635c:	2301      	movne	r3, #1
 800635e:	2300      	moveq	r3, #0
 8006360:	b2db      	uxtb	r3, r3
 8006362:	e008      	b.n	8006376 <HAL_TIM_PWM_Start_IT+0xa2>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b01      	cmp	r3, #1
 800636e:	bf14      	ite	ne
 8006370:	2301      	movne	r3, #1
 8006372:	2300      	moveq	r3, #0
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e0e2      	b.n	8006544 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d104      	bne.n	800638e <HAL_TIM_PWM_Start_IT+0xba>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2202      	movs	r2, #2
 8006388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800638c:	e023      	b.n	80063d6 <HAL_TIM_PWM_Start_IT+0x102>
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2b04      	cmp	r3, #4
 8006392:	d104      	bne.n	800639e <HAL_TIM_PWM_Start_IT+0xca>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800639c:	e01b      	b.n	80063d6 <HAL_TIM_PWM_Start_IT+0x102>
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b08      	cmp	r3, #8
 80063a2:	d104      	bne.n	80063ae <HAL_TIM_PWM_Start_IT+0xda>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063ac:	e013      	b.n	80063d6 <HAL_TIM_PWM_Start_IT+0x102>
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b0c      	cmp	r3, #12
 80063b2:	d104      	bne.n	80063be <HAL_TIM_PWM_Start_IT+0xea>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2202      	movs	r2, #2
 80063b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063bc:	e00b      	b.n	80063d6 <HAL_TIM_PWM_Start_IT+0x102>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b10      	cmp	r3, #16
 80063c2:	d104      	bne.n	80063ce <HAL_TIM_PWM_Start_IT+0xfa>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063cc:	e003      	b.n	80063d6 <HAL_TIM_PWM_Start_IT+0x102>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2202      	movs	r2, #2
 80063d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b0c      	cmp	r3, #12
 80063da:	d841      	bhi.n	8006460 <HAL_TIM_PWM_Start_IT+0x18c>
 80063dc:	a201      	add	r2, pc, #4	; (adr r2, 80063e4 <HAL_TIM_PWM_Start_IT+0x110>)
 80063de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e2:	bf00      	nop
 80063e4:	08006419 	.word	0x08006419
 80063e8:	08006461 	.word	0x08006461
 80063ec:	08006461 	.word	0x08006461
 80063f0:	08006461 	.word	0x08006461
 80063f4:	0800642b 	.word	0x0800642b
 80063f8:	08006461 	.word	0x08006461
 80063fc:	08006461 	.word	0x08006461
 8006400:	08006461 	.word	0x08006461
 8006404:	0800643d 	.word	0x0800643d
 8006408:	08006461 	.word	0x08006461
 800640c:	08006461 	.word	0x08006461
 8006410:	08006461 	.word	0x08006461
 8006414:	0800644f 	.word	0x0800644f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68da      	ldr	r2, [r3, #12]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f042 0202 	orr.w	r2, r2, #2
 8006426:	60da      	str	r2, [r3, #12]
      break;
 8006428:	e01d      	b.n	8006466 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68da      	ldr	r2, [r3, #12]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f042 0204 	orr.w	r2, r2, #4
 8006438:	60da      	str	r2, [r3, #12]
      break;
 800643a:	e014      	b.n	8006466 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68da      	ldr	r2, [r3, #12]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f042 0208 	orr.w	r2, r2, #8
 800644a:	60da      	str	r2, [r3, #12]
      break;
 800644c:	e00b      	b.n	8006466 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68da      	ldr	r2, [r3, #12]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f042 0210 	orr.w	r2, r2, #16
 800645c:	60da      	str	r2, [r3, #12]
      break;
 800645e:	e002      	b.n	8006466 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	73fb      	strb	r3, [r7, #15]
      break;
 8006464:	bf00      	nop
  }

  if (status == HAL_OK)
 8006466:	7bfb      	ldrb	r3, [r7, #15]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d16a      	bne.n	8006542 <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2201      	movs	r2, #1
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	4618      	mov	r0, r3
 8006476:	f000 ff95 	bl	80073a4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a33      	ldr	r2, [pc, #204]	; (800654c <HAL_TIM_PWM_Start_IT+0x278>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d013      	beq.n	80064ac <HAL_TIM_PWM_Start_IT+0x1d8>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a31      	ldr	r2, [pc, #196]	; (8006550 <HAL_TIM_PWM_Start_IT+0x27c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d00e      	beq.n	80064ac <HAL_TIM_PWM_Start_IT+0x1d8>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a30      	ldr	r2, [pc, #192]	; (8006554 <HAL_TIM_PWM_Start_IT+0x280>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d009      	beq.n	80064ac <HAL_TIM_PWM_Start_IT+0x1d8>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a2e      	ldr	r2, [pc, #184]	; (8006558 <HAL_TIM_PWM_Start_IT+0x284>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d004      	beq.n	80064ac <HAL_TIM_PWM_Start_IT+0x1d8>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a2d      	ldr	r2, [pc, #180]	; (800655c <HAL_TIM_PWM_Start_IT+0x288>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d101      	bne.n	80064b0 <HAL_TIM_PWM_Start_IT+0x1dc>
 80064ac:	2301      	movs	r3, #1
 80064ae:	e000      	b.n	80064b2 <HAL_TIM_PWM_Start_IT+0x1de>
 80064b0:	2300      	movs	r3, #0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d007      	beq.n	80064c6 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a20      	ldr	r2, [pc, #128]	; (800654c <HAL_TIM_PWM_Start_IT+0x278>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d018      	beq.n	8006502 <HAL_TIM_PWM_Start_IT+0x22e>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d8:	d013      	beq.n	8006502 <HAL_TIM_PWM_Start_IT+0x22e>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a20      	ldr	r2, [pc, #128]	; (8006560 <HAL_TIM_PWM_Start_IT+0x28c>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d00e      	beq.n	8006502 <HAL_TIM_PWM_Start_IT+0x22e>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a1e      	ldr	r2, [pc, #120]	; (8006564 <HAL_TIM_PWM_Start_IT+0x290>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d009      	beq.n	8006502 <HAL_TIM_PWM_Start_IT+0x22e>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a17      	ldr	r2, [pc, #92]	; (8006550 <HAL_TIM_PWM_Start_IT+0x27c>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d004      	beq.n	8006502 <HAL_TIM_PWM_Start_IT+0x22e>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a15      	ldr	r2, [pc, #84]	; (8006554 <HAL_TIM_PWM_Start_IT+0x280>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d115      	bne.n	800652e <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	689a      	ldr	r2, [r3, #8]
 8006508:	4b17      	ldr	r3, [pc, #92]	; (8006568 <HAL_TIM_PWM_Start_IT+0x294>)
 800650a:	4013      	ands	r3, r2
 800650c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2b06      	cmp	r3, #6
 8006512:	d015      	beq.n	8006540 <HAL_TIM_PWM_Start_IT+0x26c>
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800651a:	d011      	beq.n	8006540 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f042 0201 	orr.w	r2, r2, #1
 800652a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800652c:	e008      	b.n	8006540 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f042 0201 	orr.w	r2, r2, #1
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	e000      	b.n	8006542 <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006540:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006542:	7bfb      	ldrb	r3, [r7, #15]
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	40012c00 	.word	0x40012c00
 8006550:	40013400 	.word	0x40013400
 8006554:	40014000 	.word	0x40014000
 8006558:	40014400 	.word	0x40014400
 800655c:	40014800 	.word	0x40014800
 8006560:	40000400 	.word	0x40000400
 8006564:	40000800 	.word	0x40000800
 8006568:	00010007 	.word	0x00010007

0800656c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b02      	cmp	r3, #2
 8006580:	d122      	bne.n	80065c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f003 0302 	and.w	r3, r3, #2
 800658c:	2b02      	cmp	r3, #2
 800658e:	d11b      	bne.n	80065c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f06f 0202 	mvn.w	r2, #2
 8006598:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	f003 0303 	and.w	r3, r3, #3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fae3 	bl	8006b7a <HAL_TIM_IC_CaptureCallback>
 80065b4:	e005      	b.n	80065c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fad5 	bl	8006b66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f7f9 fe65 	bl	800028c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	f003 0304 	and.w	r3, r3, #4
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	d122      	bne.n	800661c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f003 0304 	and.w	r3, r3, #4
 80065e0:	2b04      	cmp	r3, #4
 80065e2:	d11b      	bne.n	800661c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f06f 0204 	mvn.w	r2, #4
 80065ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2202      	movs	r2, #2
 80065f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fab9 	bl	8006b7a <HAL_TIM_IC_CaptureCallback>
 8006608:	e005      	b.n	8006616 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 faab 	bl	8006b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7f9 fe3b 	bl	800028c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	f003 0308 	and.w	r3, r3, #8
 8006626:	2b08      	cmp	r3, #8
 8006628:	d122      	bne.n	8006670 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	f003 0308 	and.w	r3, r3, #8
 8006634:	2b08      	cmp	r3, #8
 8006636:	d11b      	bne.n	8006670 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f06f 0208 	mvn.w	r2, #8
 8006640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2204      	movs	r2, #4
 8006646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	f003 0303 	and.w	r3, r3, #3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fa8f 	bl	8006b7a <HAL_TIM_IC_CaptureCallback>
 800665c:	e005      	b.n	800666a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 fa81 	bl	8006b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f7f9 fe11 	bl	800028c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	f003 0310 	and.w	r3, r3, #16
 800667a:	2b10      	cmp	r3, #16
 800667c:	d122      	bne.n	80066c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f003 0310 	and.w	r3, r3, #16
 8006688:	2b10      	cmp	r3, #16
 800668a:	d11b      	bne.n	80066c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f06f 0210 	mvn.w	r2, #16
 8006694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2208      	movs	r2, #8
 800669a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d003      	beq.n	80066b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fa65 	bl	8006b7a <HAL_TIM_IC_CaptureCallback>
 80066b0:	e005      	b.n	80066be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fa57 	bl	8006b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7f9 fde7 	bl	800028c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d10e      	bne.n	80066f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d107      	bne.n	80066f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f06f 0201 	mvn.w	r2, #1
 80066e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7f9 fd74 	bl	80001d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066fa:	2b80      	cmp	r3, #128	; 0x80
 80066fc:	d10e      	bne.n	800671c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006708:	2b80      	cmp	r3, #128	; 0x80
 800670a:	d107      	bne.n	800671c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fef4 	bl	8007504 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800672a:	d10e      	bne.n	800674a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006736:	2b80      	cmp	r3, #128	; 0x80
 8006738:	d107      	bne.n	800674a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fee7 	bl	8007518 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006754:	2b40      	cmp	r3, #64	; 0x40
 8006756:	d10e      	bne.n	8006776 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006762:	2b40      	cmp	r3, #64	; 0x40
 8006764:	d107      	bne.n	8006776 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800676e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fa0c 	bl	8006b8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	f003 0320 	and.w	r3, r3, #32
 8006780:	2b20      	cmp	r3, #32
 8006782:	d10e      	bne.n	80067a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	f003 0320 	and.w	r3, r3, #32
 800678e:	2b20      	cmp	r3, #32
 8006790:	d107      	bne.n	80067a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f06f 0220 	mvn.w	r2, #32
 800679a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 fea7 	bl	80074f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067a2:	bf00      	nop
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
	...

080067ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067b8:	2300      	movs	r3, #0
 80067ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d101      	bne.n	80067ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80067c6:	2302      	movs	r3, #2
 80067c8:	e0ff      	b.n	80069ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b14      	cmp	r3, #20
 80067d6:	f200 80f0 	bhi.w	80069ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80067da:	a201      	add	r2, pc, #4	; (adr r2, 80067e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e0:	08006835 	.word	0x08006835
 80067e4:	080069bb 	.word	0x080069bb
 80067e8:	080069bb 	.word	0x080069bb
 80067ec:	080069bb 	.word	0x080069bb
 80067f0:	08006875 	.word	0x08006875
 80067f4:	080069bb 	.word	0x080069bb
 80067f8:	080069bb 	.word	0x080069bb
 80067fc:	080069bb 	.word	0x080069bb
 8006800:	080068b7 	.word	0x080068b7
 8006804:	080069bb 	.word	0x080069bb
 8006808:	080069bb 	.word	0x080069bb
 800680c:	080069bb 	.word	0x080069bb
 8006810:	080068f7 	.word	0x080068f7
 8006814:	080069bb 	.word	0x080069bb
 8006818:	080069bb 	.word	0x080069bb
 800681c:	080069bb 	.word	0x080069bb
 8006820:	08006939 	.word	0x08006939
 8006824:	080069bb 	.word	0x080069bb
 8006828:	080069bb 	.word	0x080069bb
 800682c:	080069bb 	.word	0x080069bb
 8006830:	08006979 	.word	0x08006979
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68b9      	ldr	r1, [r7, #8]
 800683a:	4618      	mov	r0, r3
 800683c:	f000 fa42 	bl	8006cc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	699a      	ldr	r2, [r3, #24]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f042 0208 	orr.w	r2, r2, #8
 800684e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	699a      	ldr	r2, [r3, #24]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f022 0204 	bic.w	r2, r2, #4
 800685e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6999      	ldr	r1, [r3, #24]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	691a      	ldr	r2, [r3, #16]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	430a      	orrs	r2, r1
 8006870:	619a      	str	r2, [r3, #24]
      break;
 8006872:	e0a5      	b.n	80069c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68b9      	ldr	r1, [r7, #8]
 800687a:	4618      	mov	r0, r3
 800687c:	f000 fab2 	bl	8006de4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	699a      	ldr	r2, [r3, #24]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800688e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	699a      	ldr	r2, [r3, #24]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800689e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6999      	ldr	r1, [r3, #24]
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	021a      	lsls	r2, r3, #8
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	619a      	str	r2, [r3, #24]
      break;
 80068b4:	e084      	b.n	80069c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68b9      	ldr	r1, [r7, #8]
 80068bc:	4618      	mov	r0, r3
 80068be:	f000 fb1b 	bl	8006ef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69da      	ldr	r2, [r3, #28]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f042 0208 	orr.w	r2, r2, #8
 80068d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69da      	ldr	r2, [r3, #28]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f022 0204 	bic.w	r2, r2, #4
 80068e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	69d9      	ldr	r1, [r3, #28]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	691a      	ldr	r2, [r3, #16]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	430a      	orrs	r2, r1
 80068f2:	61da      	str	r2, [r3, #28]
      break;
 80068f4:	e064      	b.n	80069c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68b9      	ldr	r1, [r7, #8]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 fb83 	bl	8007008 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	69da      	ldr	r2, [r3, #28]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006910:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69da      	ldr	r2, [r3, #28]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	69d9      	ldr	r1, [r3, #28]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	021a      	lsls	r2, r3, #8
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	61da      	str	r2, [r3, #28]
      break;
 8006936:	e043      	b.n	80069c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68b9      	ldr	r1, [r7, #8]
 800693e:	4618      	mov	r0, r3
 8006940:	f000 fbcc 	bl	80070dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0208 	orr.w	r2, r2, #8
 8006952:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f022 0204 	bic.w	r2, r2, #4
 8006962:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	691a      	ldr	r2, [r3, #16]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006976:	e023      	b.n	80069c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68b9      	ldr	r1, [r7, #8]
 800697e:	4618      	mov	r0, r3
 8006980:	f000 fc10 	bl	80071a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006992:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	021a      	lsls	r2, r3, #8
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	430a      	orrs	r2, r1
 80069b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069b8:	e002      	b.n	80069c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	75fb      	strb	r3, [r7, #23]
      break;
 80069be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop

080069d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d101      	bne.n	80069f0 <HAL_TIM_ConfigClockSource+0x1c>
 80069ec:	2302      	movs	r3, #2
 80069ee:	e0b6      	b.n	8006b5e <HAL_TIM_ConfigClockSource+0x18a>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a2c:	d03e      	beq.n	8006aac <HAL_TIM_ConfigClockSource+0xd8>
 8006a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a32:	f200 8087 	bhi.w	8006b44 <HAL_TIM_ConfigClockSource+0x170>
 8006a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a3a:	f000 8086 	beq.w	8006b4a <HAL_TIM_ConfigClockSource+0x176>
 8006a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a42:	d87f      	bhi.n	8006b44 <HAL_TIM_ConfigClockSource+0x170>
 8006a44:	2b70      	cmp	r3, #112	; 0x70
 8006a46:	d01a      	beq.n	8006a7e <HAL_TIM_ConfigClockSource+0xaa>
 8006a48:	2b70      	cmp	r3, #112	; 0x70
 8006a4a:	d87b      	bhi.n	8006b44 <HAL_TIM_ConfigClockSource+0x170>
 8006a4c:	2b60      	cmp	r3, #96	; 0x60
 8006a4e:	d050      	beq.n	8006af2 <HAL_TIM_ConfigClockSource+0x11e>
 8006a50:	2b60      	cmp	r3, #96	; 0x60
 8006a52:	d877      	bhi.n	8006b44 <HAL_TIM_ConfigClockSource+0x170>
 8006a54:	2b50      	cmp	r3, #80	; 0x50
 8006a56:	d03c      	beq.n	8006ad2 <HAL_TIM_ConfigClockSource+0xfe>
 8006a58:	2b50      	cmp	r3, #80	; 0x50
 8006a5a:	d873      	bhi.n	8006b44 <HAL_TIM_ConfigClockSource+0x170>
 8006a5c:	2b40      	cmp	r3, #64	; 0x40
 8006a5e:	d058      	beq.n	8006b12 <HAL_TIM_ConfigClockSource+0x13e>
 8006a60:	2b40      	cmp	r3, #64	; 0x40
 8006a62:	d86f      	bhi.n	8006b44 <HAL_TIM_ConfigClockSource+0x170>
 8006a64:	2b30      	cmp	r3, #48	; 0x30
 8006a66:	d064      	beq.n	8006b32 <HAL_TIM_ConfigClockSource+0x15e>
 8006a68:	2b30      	cmp	r3, #48	; 0x30
 8006a6a:	d86b      	bhi.n	8006b44 <HAL_TIM_ConfigClockSource+0x170>
 8006a6c:	2b20      	cmp	r3, #32
 8006a6e:	d060      	beq.n	8006b32 <HAL_TIM_ConfigClockSource+0x15e>
 8006a70:	2b20      	cmp	r3, #32
 8006a72:	d867      	bhi.n	8006b44 <HAL_TIM_ConfigClockSource+0x170>
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d05c      	beq.n	8006b32 <HAL_TIM_ConfigClockSource+0x15e>
 8006a78:	2b10      	cmp	r3, #16
 8006a7a:	d05a      	beq.n	8006b32 <HAL_TIM_ConfigClockSource+0x15e>
 8006a7c:	e062      	b.n	8006b44 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a8e:	f000 fc69 	bl	8007364 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006aa0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	609a      	str	r2, [r3, #8]
      break;
 8006aaa:	e04f      	b.n	8006b4c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006abc:	f000 fc52 	bl	8007364 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689a      	ldr	r2, [r3, #8]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ace:	609a      	str	r2, [r3, #8]
      break;
 8006ad0:	e03c      	b.n	8006b4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ade:	461a      	mov	r2, r3
 8006ae0:	f000 fbc6 	bl	8007270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2150      	movs	r1, #80	; 0x50
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 fc1f 	bl	800732e <TIM_ITRx_SetConfig>
      break;
 8006af0:	e02c      	b.n	8006b4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006afe:	461a      	mov	r2, r3
 8006b00:	f000 fbe5 	bl	80072ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2160      	movs	r1, #96	; 0x60
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 fc0f 	bl	800732e <TIM_ITRx_SetConfig>
      break;
 8006b10:	e01c      	b.n	8006b4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b1e:	461a      	mov	r2, r3
 8006b20:	f000 fba6 	bl	8007270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2140      	movs	r1, #64	; 0x40
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 fbff 	bl	800732e <TIM_ITRx_SetConfig>
      break;
 8006b30:	e00c      	b.n	8006b4c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	f000 fbf6 	bl	800732e <TIM_ITRx_SetConfig>
      break;
 8006b42:	e003      	b.n	8006b4c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	73fb      	strb	r3, [r7, #15]
      break;
 8006b48:	e000      	b.n	8006b4c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006b4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b083      	sub	sp, #12
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b6e:	bf00      	nop
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b083      	sub	sp, #12
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b82:	bf00      	nop
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b96:	bf00      	nop
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
	...

08006ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a3c      	ldr	r2, [pc, #240]	; (8006ca8 <TIM_Base_SetConfig+0x104>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d00f      	beq.n	8006bdc <TIM_Base_SetConfig+0x38>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bc2:	d00b      	beq.n	8006bdc <TIM_Base_SetConfig+0x38>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a39      	ldr	r2, [pc, #228]	; (8006cac <TIM_Base_SetConfig+0x108>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d007      	beq.n	8006bdc <TIM_Base_SetConfig+0x38>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a38      	ldr	r2, [pc, #224]	; (8006cb0 <TIM_Base_SetConfig+0x10c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d003      	beq.n	8006bdc <TIM_Base_SetConfig+0x38>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a37      	ldr	r2, [pc, #220]	; (8006cb4 <TIM_Base_SetConfig+0x110>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d108      	bne.n	8006bee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a2d      	ldr	r2, [pc, #180]	; (8006ca8 <TIM_Base_SetConfig+0x104>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d01b      	beq.n	8006c2e <TIM_Base_SetConfig+0x8a>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bfc:	d017      	beq.n	8006c2e <TIM_Base_SetConfig+0x8a>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a2a      	ldr	r2, [pc, #168]	; (8006cac <TIM_Base_SetConfig+0x108>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d013      	beq.n	8006c2e <TIM_Base_SetConfig+0x8a>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a29      	ldr	r2, [pc, #164]	; (8006cb0 <TIM_Base_SetConfig+0x10c>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d00f      	beq.n	8006c2e <TIM_Base_SetConfig+0x8a>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a28      	ldr	r2, [pc, #160]	; (8006cb4 <TIM_Base_SetConfig+0x110>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d00b      	beq.n	8006c2e <TIM_Base_SetConfig+0x8a>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a27      	ldr	r2, [pc, #156]	; (8006cb8 <TIM_Base_SetConfig+0x114>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d007      	beq.n	8006c2e <TIM_Base_SetConfig+0x8a>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a26      	ldr	r2, [pc, #152]	; (8006cbc <TIM_Base_SetConfig+0x118>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d003      	beq.n	8006c2e <TIM_Base_SetConfig+0x8a>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a25      	ldr	r2, [pc, #148]	; (8006cc0 <TIM_Base_SetConfig+0x11c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d108      	bne.n	8006c40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	689a      	ldr	r2, [r3, #8]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a10      	ldr	r2, [pc, #64]	; (8006ca8 <TIM_Base_SetConfig+0x104>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d00f      	beq.n	8006c8c <TIM_Base_SetConfig+0xe8>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a11      	ldr	r2, [pc, #68]	; (8006cb4 <TIM_Base_SetConfig+0x110>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d00b      	beq.n	8006c8c <TIM_Base_SetConfig+0xe8>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a10      	ldr	r2, [pc, #64]	; (8006cb8 <TIM_Base_SetConfig+0x114>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d007      	beq.n	8006c8c <TIM_Base_SetConfig+0xe8>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a0f      	ldr	r2, [pc, #60]	; (8006cbc <TIM_Base_SetConfig+0x118>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d003      	beq.n	8006c8c <TIM_Base_SetConfig+0xe8>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a0e      	ldr	r2, [pc, #56]	; (8006cc0 <TIM_Base_SetConfig+0x11c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d103      	bne.n	8006c94 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	691a      	ldr	r2, [r3, #16]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	615a      	str	r2, [r3, #20]
}
 8006c9a:	bf00      	nop
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	40012c00 	.word	0x40012c00
 8006cac:	40000400 	.word	0x40000400
 8006cb0:	40000800 	.word	0x40000800
 8006cb4:	40013400 	.word	0x40013400
 8006cb8:	40014000 	.word	0x40014000
 8006cbc:	40014400 	.word	0x40014400
 8006cc0:	40014800 	.word	0x40014800

08006cc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	f023 0201 	bic.w	r2, r3, #1
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f023 0303 	bic.w	r3, r3, #3
 8006cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f023 0302 	bic.w	r3, r3, #2
 8006d10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a2c      	ldr	r2, [pc, #176]	; (8006dd0 <TIM_OC1_SetConfig+0x10c>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d00f      	beq.n	8006d44 <TIM_OC1_SetConfig+0x80>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a2b      	ldr	r2, [pc, #172]	; (8006dd4 <TIM_OC1_SetConfig+0x110>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00b      	beq.n	8006d44 <TIM_OC1_SetConfig+0x80>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a2a      	ldr	r2, [pc, #168]	; (8006dd8 <TIM_OC1_SetConfig+0x114>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d007      	beq.n	8006d44 <TIM_OC1_SetConfig+0x80>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a29      	ldr	r2, [pc, #164]	; (8006ddc <TIM_OC1_SetConfig+0x118>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d003      	beq.n	8006d44 <TIM_OC1_SetConfig+0x80>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a28      	ldr	r2, [pc, #160]	; (8006de0 <TIM_OC1_SetConfig+0x11c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d10c      	bne.n	8006d5e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f023 0308 	bic.w	r3, r3, #8
 8006d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	f023 0304 	bic.w	r3, r3, #4
 8006d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a1b      	ldr	r2, [pc, #108]	; (8006dd0 <TIM_OC1_SetConfig+0x10c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d00f      	beq.n	8006d86 <TIM_OC1_SetConfig+0xc2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a1a      	ldr	r2, [pc, #104]	; (8006dd4 <TIM_OC1_SetConfig+0x110>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d00b      	beq.n	8006d86 <TIM_OC1_SetConfig+0xc2>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a19      	ldr	r2, [pc, #100]	; (8006dd8 <TIM_OC1_SetConfig+0x114>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d007      	beq.n	8006d86 <TIM_OC1_SetConfig+0xc2>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a18      	ldr	r2, [pc, #96]	; (8006ddc <TIM_OC1_SetConfig+0x118>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d003      	beq.n	8006d86 <TIM_OC1_SetConfig+0xc2>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a17      	ldr	r2, [pc, #92]	; (8006de0 <TIM_OC1_SetConfig+0x11c>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d111      	bne.n	8006daa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	697a      	ldr	r2, [r7, #20]
 8006dc2:	621a      	str	r2, [r3, #32]
}
 8006dc4:	bf00      	nop
 8006dc6:	371c      	adds	r7, #28
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	40012c00 	.word	0x40012c00
 8006dd4:	40013400 	.word	0x40013400
 8006dd8:	40014000 	.word	0x40014000
 8006ddc:	40014400 	.word	0x40014400
 8006de0:	40014800 	.word	0x40014800

08006de4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	f023 0210 	bic.w	r2, r3, #16
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	021b      	lsls	r3, r3, #8
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	f023 0320 	bic.w	r3, r3, #32
 8006e32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	011b      	lsls	r3, r3, #4
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a28      	ldr	r2, [pc, #160]	; (8006ee4 <TIM_OC2_SetConfig+0x100>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d003      	beq.n	8006e50 <TIM_OC2_SetConfig+0x6c>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a27      	ldr	r2, [pc, #156]	; (8006ee8 <TIM_OC2_SetConfig+0x104>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d10d      	bne.n	8006e6c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	011b      	lsls	r3, r3, #4
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a1d      	ldr	r2, [pc, #116]	; (8006ee4 <TIM_OC2_SetConfig+0x100>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d00f      	beq.n	8006e94 <TIM_OC2_SetConfig+0xb0>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a1c      	ldr	r2, [pc, #112]	; (8006ee8 <TIM_OC2_SetConfig+0x104>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d00b      	beq.n	8006e94 <TIM_OC2_SetConfig+0xb0>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a1b      	ldr	r2, [pc, #108]	; (8006eec <TIM_OC2_SetConfig+0x108>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d007      	beq.n	8006e94 <TIM_OC2_SetConfig+0xb0>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a1a      	ldr	r2, [pc, #104]	; (8006ef0 <TIM_OC2_SetConfig+0x10c>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d003      	beq.n	8006e94 <TIM_OC2_SetConfig+0xb0>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a19      	ldr	r2, [pc, #100]	; (8006ef4 <TIM_OC2_SetConfig+0x110>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d113      	bne.n	8006ebc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e9a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ea2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	621a      	str	r2, [r3, #32]
}
 8006ed6:	bf00      	nop
 8006ed8:	371c      	adds	r7, #28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	40012c00 	.word	0x40012c00
 8006ee8:	40013400 	.word	0x40013400
 8006eec:	40014000 	.word	0x40014000
 8006ef0:	40014400 	.word	0x40014400
 8006ef4:	40014800 	.word	0x40014800

08006ef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b087      	sub	sp, #28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f023 0303 	bic.w	r3, r3, #3
 8006f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	021b      	lsls	r3, r3, #8
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a27      	ldr	r2, [pc, #156]	; (8006ff4 <TIM_OC3_SetConfig+0xfc>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d003      	beq.n	8006f62 <TIM_OC3_SetConfig+0x6a>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a26      	ldr	r2, [pc, #152]	; (8006ff8 <TIM_OC3_SetConfig+0x100>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d10d      	bne.n	8006f7e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	021b      	lsls	r3, r3, #8
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f7c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a1c      	ldr	r2, [pc, #112]	; (8006ff4 <TIM_OC3_SetConfig+0xfc>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d00f      	beq.n	8006fa6 <TIM_OC3_SetConfig+0xae>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a1b      	ldr	r2, [pc, #108]	; (8006ff8 <TIM_OC3_SetConfig+0x100>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d00b      	beq.n	8006fa6 <TIM_OC3_SetConfig+0xae>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a1a      	ldr	r2, [pc, #104]	; (8006ffc <TIM_OC3_SetConfig+0x104>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d007      	beq.n	8006fa6 <TIM_OC3_SetConfig+0xae>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a19      	ldr	r2, [pc, #100]	; (8007000 <TIM_OC3_SetConfig+0x108>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d003      	beq.n	8006fa6 <TIM_OC3_SetConfig+0xae>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a18      	ldr	r2, [pc, #96]	; (8007004 <TIM_OC3_SetConfig+0x10c>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d113      	bne.n	8006fce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	011b      	lsls	r3, r3, #4
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	011b      	lsls	r3, r3, #4
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	621a      	str	r2, [r3, #32]
}
 8006fe8:	bf00      	nop
 8006fea:	371c      	adds	r7, #28
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	40012c00 	.word	0x40012c00
 8006ff8:	40013400 	.word	0x40013400
 8006ffc:	40014000 	.word	0x40014000
 8007000:	40014400 	.word	0x40014400
 8007004:	40014800 	.word	0x40014800

08007008 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800703a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	021b      	lsls	r3, r3, #8
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	4313      	orrs	r3, r2
 800704e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007056:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	031b      	lsls	r3, r3, #12
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	4313      	orrs	r3, r2
 8007062:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a18      	ldr	r2, [pc, #96]	; (80070c8 <TIM_OC4_SetConfig+0xc0>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d00f      	beq.n	800708c <TIM_OC4_SetConfig+0x84>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a17      	ldr	r2, [pc, #92]	; (80070cc <TIM_OC4_SetConfig+0xc4>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d00b      	beq.n	800708c <TIM_OC4_SetConfig+0x84>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a16      	ldr	r2, [pc, #88]	; (80070d0 <TIM_OC4_SetConfig+0xc8>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d007      	beq.n	800708c <TIM_OC4_SetConfig+0x84>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a15      	ldr	r2, [pc, #84]	; (80070d4 <TIM_OC4_SetConfig+0xcc>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d003      	beq.n	800708c <TIM_OC4_SetConfig+0x84>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a14      	ldr	r2, [pc, #80]	; (80070d8 <TIM_OC4_SetConfig+0xd0>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d109      	bne.n	80070a0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007092:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	019b      	lsls	r3, r3, #6
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	4313      	orrs	r3, r2
 800709e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	621a      	str	r2, [r3, #32]
}
 80070ba:	bf00      	nop
 80070bc:	371c      	adds	r7, #28
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	40012c00 	.word	0x40012c00
 80070cc:	40013400 	.word	0x40013400
 80070d0:	40014000 	.word	0x40014000
 80070d4:	40014400 	.word	0x40014400
 80070d8:	40014800 	.word	0x40014800

080070dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070dc:	b480      	push	{r7}
 80070de:	b087      	sub	sp, #28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800710a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800710e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	4313      	orrs	r3, r2
 8007118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007120:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	041b      	lsls	r3, r3, #16
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	4313      	orrs	r3, r2
 800712c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a17      	ldr	r2, [pc, #92]	; (8007190 <TIM_OC5_SetConfig+0xb4>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d00f      	beq.n	8007156 <TIM_OC5_SetConfig+0x7a>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a16      	ldr	r2, [pc, #88]	; (8007194 <TIM_OC5_SetConfig+0xb8>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d00b      	beq.n	8007156 <TIM_OC5_SetConfig+0x7a>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a15      	ldr	r2, [pc, #84]	; (8007198 <TIM_OC5_SetConfig+0xbc>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d007      	beq.n	8007156 <TIM_OC5_SetConfig+0x7a>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a14      	ldr	r2, [pc, #80]	; (800719c <TIM_OC5_SetConfig+0xc0>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d003      	beq.n	8007156 <TIM_OC5_SetConfig+0x7a>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a13      	ldr	r2, [pc, #76]	; (80071a0 <TIM_OC5_SetConfig+0xc4>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d109      	bne.n	800716a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800715c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	021b      	lsls	r3, r3, #8
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	4313      	orrs	r3, r2
 8007168:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	621a      	str	r2, [r3, #32]
}
 8007184:	bf00      	nop
 8007186:	371c      	adds	r7, #28
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr
 8007190:	40012c00 	.word	0x40012c00
 8007194:	40013400 	.word	0x40013400
 8007198:	40014000 	.word	0x40014000
 800719c:	40014400 	.word	0x40014400
 80071a0:	40014800 	.word	0x40014800

080071a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	021b      	lsls	r3, r3, #8
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	051b      	lsls	r3, r3, #20
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a18      	ldr	r2, [pc, #96]	; (800725c <TIM_OC6_SetConfig+0xb8>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d00f      	beq.n	8007220 <TIM_OC6_SetConfig+0x7c>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a17      	ldr	r2, [pc, #92]	; (8007260 <TIM_OC6_SetConfig+0xbc>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d00b      	beq.n	8007220 <TIM_OC6_SetConfig+0x7c>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a16      	ldr	r2, [pc, #88]	; (8007264 <TIM_OC6_SetConfig+0xc0>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d007      	beq.n	8007220 <TIM_OC6_SetConfig+0x7c>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a15      	ldr	r2, [pc, #84]	; (8007268 <TIM_OC6_SetConfig+0xc4>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d003      	beq.n	8007220 <TIM_OC6_SetConfig+0x7c>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a14      	ldr	r2, [pc, #80]	; (800726c <TIM_OC6_SetConfig+0xc8>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d109      	bne.n	8007234 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007226:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	695b      	ldr	r3, [r3, #20]
 800722c:	029b      	lsls	r3, r3, #10
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	4313      	orrs	r3, r2
 8007232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	621a      	str	r2, [r3, #32]
}
 800724e:	bf00      	nop
 8007250:	371c      	adds	r7, #28
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	40012c00 	.word	0x40012c00
 8007260:	40013400 	.word	0x40013400
 8007264:	40014000 	.word	0x40014000
 8007268:	40014400 	.word	0x40014400
 800726c:	40014800 	.word	0x40014800

08007270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	f023 0201 	bic.w	r2, r3, #1
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800729a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	011b      	lsls	r3, r3, #4
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f023 030a 	bic.w	r3, r3, #10
 80072ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	621a      	str	r2, [r3, #32]
}
 80072c2:	bf00      	nop
 80072c4:	371c      	adds	r7, #28
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b087      	sub	sp, #28
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	60f8      	str	r0, [r7, #12]
 80072d6:	60b9      	str	r1, [r7, #8]
 80072d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	f023 0210 	bic.w	r2, r3, #16
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	031b      	lsls	r3, r3, #12
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	4313      	orrs	r3, r2
 8007302:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800730a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	011b      	lsls	r3, r3, #4
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	4313      	orrs	r3, r2
 8007314:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	621a      	str	r2, [r3, #32]
}
 8007322:	bf00      	nop
 8007324:	371c      	adds	r7, #28
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800732e:	b480      	push	{r7}
 8007330:	b085      	sub	sp, #20
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4313      	orrs	r3, r2
 800734c:	f043 0307 	orr.w	r3, r3, #7
 8007350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	609a      	str	r2, [r3, #8]
}
 8007358:	bf00      	nop
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007364:	b480      	push	{r7}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
 8007370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800737e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	021a      	lsls	r2, r3, #8
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	431a      	orrs	r2, r3
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	4313      	orrs	r3, r2
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	4313      	orrs	r3, r2
 8007390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	609a      	str	r2, [r3, #8]
}
 8007398:	bf00      	nop
 800739a:	371c      	adds	r7, #28
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	f003 031f 	and.w	r3, r3, #31
 80073b6:	2201      	movs	r2, #1
 80073b8:	fa02 f303 	lsl.w	r3, r2, r3
 80073bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6a1a      	ldr	r2, [r3, #32]
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	43db      	mvns	r3, r3
 80073c6:	401a      	ands	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6a1a      	ldr	r2, [r3, #32]
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	f003 031f 	and.w	r3, r3, #31
 80073d6:	6879      	ldr	r1, [r7, #4]
 80073d8:	fa01 f303 	lsl.w	r3, r1, r3
 80073dc:	431a      	orrs	r2, r3
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	621a      	str	r2, [r3, #32]
}
 80073e2:	bf00      	nop
 80073e4:	371c      	adds	r7, #28
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
	...

080073f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007400:	2b01      	cmp	r3, #1
 8007402:	d101      	bne.n	8007408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007404:	2302      	movs	r3, #2
 8007406:	e063      	b.n	80074d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2202      	movs	r2, #2
 8007414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a2b      	ldr	r2, [pc, #172]	; (80074dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d004      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a2a      	ldr	r2, [pc, #168]	; (80074e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d108      	bne.n	800744e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007442:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	4313      	orrs	r3, r2
 800744c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007454:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	4313      	orrs	r3, r2
 800745e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a1b      	ldr	r2, [pc, #108]	; (80074dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d018      	beq.n	80074a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800747a:	d013      	beq.n	80074a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a18      	ldr	r2, [pc, #96]	; (80074e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d00e      	beq.n	80074a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a17      	ldr	r2, [pc, #92]	; (80074e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d009      	beq.n	80074a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a12      	ldr	r2, [pc, #72]	; (80074e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d004      	beq.n	80074a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a13      	ldr	r2, [pc, #76]	; (80074ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d10c      	bne.n	80074be <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3714      	adds	r7, #20
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	40012c00 	.word	0x40012c00
 80074e0:	40013400 	.word	0x40013400
 80074e4:	40000400 	.word	0x40000400
 80074e8:	40000800 	.word	0x40000800
 80074ec:	40014000 	.word	0x40014000

080074f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074f8:	bf00      	nop
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800753c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007540:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	b29a      	uxth	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3714      	adds	r7, #20
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800755a:	b480      	push	{r7}
 800755c:	b085      	sub	sp, #20
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007562:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007566:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800756e:	b29a      	uxth	r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	b29b      	uxth	r3, r3
 8007574:	43db      	mvns	r3, r3
 8007576:	b29b      	uxth	r3, r3
 8007578:	4013      	ands	r3, r2
 800757a:	b29a      	uxth	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007590:	b084      	sub	sp, #16
 8007592:	b480      	push	{r7}
 8007594:	b083      	sub	sp, #12
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	f107 0014 	add.w	r0, r7, #20
 800759e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	b004      	add	sp, #16
 80075d0:	4770      	bx	lr
	...

080075d4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b09d      	sub	sp, #116	; 0x74
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80075de:	2300      	movs	r3, #0
 80075e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80075f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075fa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	78db      	ldrb	r3, [r3, #3]
 8007602:	2b03      	cmp	r3, #3
 8007604:	d81f      	bhi.n	8007646 <USB_ActivateEndpoint+0x72>
 8007606:	a201      	add	r2, pc, #4	; (adr r2, 800760c <USB_ActivateEndpoint+0x38>)
 8007608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760c:	0800761d 	.word	0x0800761d
 8007610:	08007639 	.word	0x08007639
 8007614:	0800764f 	.word	0x0800764f
 8007618:	0800762b 	.word	0x0800762b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800761c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007620:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007624:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007628:	e012      	b.n	8007650 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800762a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800762e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007632:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007636:	e00b      	b.n	8007650 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007638:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800763c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007640:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007644:	e004      	b.n	8007650 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800764c:	e000      	b.n	8007650 <USB_ActivateEndpoint+0x7c>
      break;
 800764e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	441a      	add	r2, r3
 800765a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800765e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800766a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800766e:	b29b      	uxth	r3, r3
 8007670:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	881b      	ldrh	r3, [r3, #0]
 800767e:	b29b      	uxth	r3, r3
 8007680:	b21b      	sxth	r3, r3
 8007682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800768a:	b21a      	sxth	r2, r3
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	b21b      	sxth	r3, r3
 8007692:	4313      	orrs	r3, r2
 8007694:	b21b      	sxth	r3, r3
 8007696:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	441a      	add	r2, r3
 80076a4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80076a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	7b1b      	ldrb	r3, [r3, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f040 8178 	bne.w	80079b6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	785b      	ldrb	r3, [r3, #1]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f000 8084 	beq.w	80077d8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	61bb      	str	r3, [r7, #24]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076da:	b29b      	uxth	r3, r3
 80076dc:	461a      	mov	r2, r3
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	4413      	add	r3, r2
 80076e2:	61bb      	str	r3, [r7, #24]
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	011a      	lsls	r2, r3, #4
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	4413      	add	r3, r2
 80076ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076f2:	617b      	str	r3, [r7, #20]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	88db      	ldrh	r3, [r3, #6]
 80076f8:	085b      	lsrs	r3, r3, #1
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	005b      	lsls	r3, r3, #1
 80076fe:	b29a      	uxth	r2, r3
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	4413      	add	r3, r2
 800770e:	881b      	ldrh	r3, [r3, #0]
 8007710:	827b      	strh	r3, [r7, #18]
 8007712:	8a7b      	ldrh	r3, [r7, #18]
 8007714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007718:	2b00      	cmp	r3, #0
 800771a:	d01b      	beq.n	8007754 <USB_ActivateEndpoint+0x180>
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	b29b      	uxth	r3, r3
 800772a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800772e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007732:	823b      	strh	r3, [r7, #16]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	441a      	add	r2, r3
 800773e:	8a3b      	ldrh	r3, [r7, #16]
 8007740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800774c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007750:	b29b      	uxth	r3, r3
 8007752:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	78db      	ldrb	r3, [r3, #3]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d020      	beq.n	800779e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	881b      	ldrh	r3, [r3, #0]
 8007768:	b29b      	uxth	r3, r3
 800776a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800776e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007772:	81bb      	strh	r3, [r7, #12]
 8007774:	89bb      	ldrh	r3, [r7, #12]
 8007776:	f083 0320 	eor.w	r3, r3, #32
 800777a:	81bb      	strh	r3, [r7, #12]
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	441a      	add	r2, r3
 8007786:	89bb      	ldrh	r3, [r7, #12]
 8007788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800778c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007798:	b29b      	uxth	r3, r3
 800779a:	8013      	strh	r3, [r2, #0]
 800779c:	e2d5      	b.n	8007d4a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4413      	add	r3, r2
 80077a8:	881b      	ldrh	r3, [r3, #0]
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077b4:	81fb      	strh	r3, [r7, #14]
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	441a      	add	r2, r3
 80077c0:	89fb      	ldrh	r3, [r7, #14]
 80077c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	8013      	strh	r3, [r2, #0]
 80077d6:	e2b8      	b.n	8007d4a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	633b      	str	r3, [r7, #48]	; 0x30
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	461a      	mov	r2, r3
 80077e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e8:	4413      	add	r3, r2
 80077ea:	633b      	str	r3, [r7, #48]	; 0x30
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	011a      	lsls	r2, r3, #4
 80077f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f4:	4413      	add	r3, r2
 80077f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80077fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	88db      	ldrh	r3, [r3, #6]
 8007800:	085b      	lsrs	r3, r3, #1
 8007802:	b29b      	uxth	r3, r3
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	b29a      	uxth	r2, r3
 8007808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007816:	b29b      	uxth	r3, r3
 8007818:	461a      	mov	r2, r3
 800781a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781c:	4413      	add	r3, r2
 800781e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	011a      	lsls	r2, r3, #4
 8007826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007828:	4413      	add	r3, r2
 800782a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800782e:	627b      	str	r3, [r7, #36]	; 0x24
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	881b      	ldrh	r3, [r3, #0]
 8007834:	b29b      	uxth	r3, r3
 8007836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800783a:	b29a      	uxth	r2, r3
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	801a      	strh	r2, [r3, #0]
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	2b3e      	cmp	r3, #62	; 0x3e
 8007846:	d91d      	bls.n	8007884 <USB_ActivateEndpoint+0x2b0>
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	095b      	lsrs	r3, r3, #5
 800784e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	f003 031f 	and.w	r3, r3, #31
 8007858:	2b00      	cmp	r3, #0
 800785a:	d102      	bne.n	8007862 <USB_ActivateEndpoint+0x28e>
 800785c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800785e:	3b01      	subs	r3, #1
 8007860:	66bb      	str	r3, [r7, #104]	; 0x68
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	881b      	ldrh	r3, [r3, #0]
 8007866:	b29a      	uxth	r2, r3
 8007868:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800786a:	b29b      	uxth	r3, r3
 800786c:	029b      	lsls	r3, r3, #10
 800786e:	b29b      	uxth	r3, r3
 8007870:	4313      	orrs	r3, r2
 8007872:	b29b      	uxth	r3, r3
 8007874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800787c:	b29a      	uxth	r2, r3
 800787e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007880:	801a      	strh	r2, [r3, #0]
 8007882:	e026      	b.n	80078d2 <USB_ActivateEndpoint+0x2fe>
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10a      	bne.n	80078a2 <USB_ActivateEndpoint+0x2ce>
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788e:	881b      	ldrh	r3, [r3, #0]
 8007890:	b29b      	uxth	r3, r3
 8007892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800789a:	b29a      	uxth	r2, r3
 800789c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789e:	801a      	strh	r2, [r3, #0]
 80078a0:	e017      	b.n	80078d2 <USB_ActivateEndpoint+0x2fe>
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	085b      	lsrs	r3, r3, #1
 80078a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	f003 0301 	and.w	r3, r3, #1
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d002      	beq.n	80078bc <USB_ActivateEndpoint+0x2e8>
 80078b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078b8:	3301      	adds	r3, #1
 80078ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80078bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078be:	881b      	ldrh	r3, [r3, #0]
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	029b      	lsls	r3, r3, #10
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	4313      	orrs	r3, r2
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4413      	add	r3, r2
 80078dc:	881b      	ldrh	r3, [r3, #0]
 80078de:	847b      	strh	r3, [r7, #34]	; 0x22
 80078e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80078e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d01b      	beq.n	8007922 <USB_ActivateEndpoint+0x34e>
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	4413      	add	r3, r2
 80078f4:	881b      	ldrh	r3, [r3, #0]
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007900:	843b      	strh	r3, [r7, #32]
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	441a      	add	r2, r3
 800790c:	8c3b      	ldrh	r3, [r7, #32]
 800790e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007916:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800791a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800791e:	b29b      	uxth	r3, r3
 8007920:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d124      	bne.n	8007974 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	881b      	ldrh	r3, [r3, #0]
 8007936:	b29b      	uxth	r3, r3
 8007938:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800793c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007940:	83bb      	strh	r3, [r7, #28]
 8007942:	8bbb      	ldrh	r3, [r7, #28]
 8007944:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007948:	83bb      	strh	r3, [r7, #28]
 800794a:	8bbb      	ldrh	r3, [r7, #28]
 800794c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007950:	83bb      	strh	r3, [r7, #28]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	441a      	add	r2, r3
 800795c:	8bbb      	ldrh	r3, [r7, #28]
 800795e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800796a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800796e:	b29b      	uxth	r3, r3
 8007970:	8013      	strh	r3, [r2, #0]
 8007972:	e1ea      	b.n	8007d4a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4413      	add	r3, r2
 800797e:	881b      	ldrh	r3, [r3, #0]
 8007980:	b29b      	uxth	r3, r3
 8007982:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800798a:	83fb      	strh	r3, [r7, #30]
 800798c:	8bfb      	ldrh	r3, [r7, #30]
 800798e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007992:	83fb      	strh	r3, [r7, #30]
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	441a      	add	r2, r3
 800799e:	8bfb      	ldrh	r3, [r7, #30]
 80079a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	8013      	strh	r3, [r2, #0]
 80079b4:	e1c9      	b.n	8007d4a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	78db      	ldrb	r3, [r3, #3]
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d11e      	bne.n	80079fc <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4413      	add	r3, r2
 80079c8:	881b      	ldrh	r3, [r3, #0]
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	441a      	add	r2, r3
 80079e2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80079e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ee:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80079f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	8013      	strh	r3, [r2, #0]
 80079fa:	e01d      	b.n	8007a38 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	4413      	add	r3, r2
 8007a06:	881b      	ldrh	r3, [r3, #0]
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a12:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	441a      	add	r2, r3
 8007a20:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007a24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	461a      	mov	r2, r3
 8007a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a48:	4413      	add	r3, r2
 8007a4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	011a      	lsls	r2, r3, #4
 8007a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a54:	4413      	add	r3, r2
 8007a56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	891b      	ldrh	r3, [r3, #8]
 8007a60:	085b      	lsrs	r3, r3, #1
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	005b      	lsls	r3, r3, #1
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a6a:	801a      	strh	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	657b      	str	r3, [r7, #84]	; 0x54
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	461a      	mov	r2, r3
 8007a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a7c:	4413      	add	r3, r2
 8007a7e:	657b      	str	r3, [r7, #84]	; 0x54
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	011a      	lsls	r2, r3, #4
 8007a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a88:	4413      	add	r3, r2
 8007a8a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007a8e:	653b      	str	r3, [r7, #80]	; 0x50
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	895b      	ldrh	r3, [r3, #10]
 8007a94:	085b      	lsrs	r3, r3, #1
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	005b      	lsls	r3, r3, #1
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a9e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	785b      	ldrb	r3, [r3, #1]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f040 8093 	bne.w	8007bd0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4413      	add	r3, r2
 8007ab4:	881b      	ldrh	r3, [r3, #0]
 8007ab6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007aba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d01b      	beq.n	8007afe <USB_ActivateEndpoint+0x52a>
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4413      	add	r3, r2
 8007ad0:	881b      	ldrh	r3, [r3, #0]
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007adc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	441a      	add	r2, r3
 8007ae8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007af2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	881b      	ldrh	r3, [r3, #0]
 8007b0a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007b0c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d01b      	beq.n	8007b4e <USB_ActivateEndpoint+0x57a>
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	4413      	add	r3, r2
 8007b20:	881b      	ldrh	r3, [r3, #0]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b2c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	441a      	add	r2, r3
 8007b38:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4413      	add	r3, r2
 8007b58:	881b      	ldrh	r3, [r3, #0]
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b64:	873b      	strh	r3, [r7, #56]	; 0x38
 8007b66:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007b68:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b6c:	873b      	strh	r3, [r7, #56]	; 0x38
 8007b6e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007b70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b74:	873b      	strh	r3, [r7, #56]	; 0x38
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	441a      	add	r2, r3
 8007b80:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	4413      	add	r3, r2
 8007ba0:	881b      	ldrh	r3, [r3, #0]
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bac:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	441a      	add	r2, r3
 8007bb8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	8013      	strh	r3, [r2, #0]
 8007bce:	e0bc      	b.n	8007d4a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4413      	add	r3, r2
 8007bda:	881b      	ldrh	r3, [r3, #0]
 8007bdc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007be0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d01d      	beq.n	8007c28 <USB_ActivateEndpoint+0x654>
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4413      	add	r3, r2
 8007bf6:	881b      	ldrh	r3, [r3, #0]
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c02:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	441a      	add	r2, r3
 8007c10:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4413      	add	r3, r2
 8007c32:	881b      	ldrh	r3, [r3, #0]
 8007c34:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007c38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d01d      	beq.n	8007c80 <USB_ActivateEndpoint+0x6ac>
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	4413      	add	r3, r2
 8007c4e:	881b      	ldrh	r3, [r3, #0]
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c5a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	441a      	add	r2, r3
 8007c68:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	78db      	ldrb	r3, [r3, #3]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d024      	beq.n	8007cd2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4413      	add	r3, r2
 8007c92:	881b      	ldrh	r3, [r3, #0]
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c9e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007ca2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007ca6:	f083 0320 	eor.w	r3, r3, #32
 8007caa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	441a      	add	r2, r3
 8007cb8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007cbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	8013      	strh	r3, [r2, #0]
 8007cd0:	e01d      	b.n	8007d0e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4413      	add	r3, r2
 8007cdc:	881b      	ldrh	r3, [r3, #0]
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ce8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	441a      	add	r2, r3
 8007cf6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007cfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4413      	add	r3, r2
 8007d18:	881b      	ldrh	r3, [r3, #0]
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d24:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	441a      	add	r2, r3
 8007d32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007d4a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3774      	adds	r7, #116	; 0x74
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop

08007d5c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b08d      	sub	sp, #52	; 0x34
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	7b1b      	ldrb	r3, [r3, #12]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f040 808e 	bne.w	8007e8c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	785b      	ldrb	r3, [r3, #1]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d044      	beq.n	8007e02 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	881b      	ldrh	r3, [r3, #0]
 8007d84:	81bb      	strh	r3, [r7, #12]
 8007d86:	89bb      	ldrh	r3, [r7, #12]
 8007d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d01b      	beq.n	8007dc8 <USB_DeactivateEndpoint+0x6c>
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	4413      	add	r3, r2
 8007d9a:	881b      	ldrh	r3, [r3, #0]
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007da6:	817b      	strh	r3, [r7, #10]
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	441a      	add	r2, r3
 8007db2:	897b      	ldrh	r3, [r7, #10]
 8007db4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007db8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dc0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	881b      	ldrh	r3, [r3, #0]
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dde:	813b      	strh	r3, [r7, #8]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	441a      	add	r2, r3
 8007dea:	893b      	ldrh	r3, [r7, #8]
 8007dec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007df0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007df4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	8013      	strh	r3, [r2, #0]
 8007e00:	e192      	b.n	8008128 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	4413      	add	r3, r2
 8007e0c:	881b      	ldrh	r3, [r3, #0]
 8007e0e:	827b      	strh	r3, [r7, #18]
 8007e10:	8a7b      	ldrh	r3, [r7, #18]
 8007e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d01b      	beq.n	8007e52 <USB_DeactivateEndpoint+0xf6>
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4413      	add	r3, r2
 8007e24:	881b      	ldrh	r3, [r3, #0]
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e30:	823b      	strh	r3, [r7, #16]
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	441a      	add	r2, r3
 8007e3c:	8a3b      	ldrh	r3, [r7, #16]
 8007e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	881b      	ldrh	r3, [r3, #0]
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e68:	81fb      	strh	r3, [r7, #14]
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	441a      	add	r2, r3
 8007e74:	89fb      	ldrh	r3, [r7, #14]
 8007e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	8013      	strh	r3, [r2, #0]
 8007e8a:	e14d      	b.n	8008128 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	785b      	ldrb	r3, [r3, #1]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f040 80a5 	bne.w	8007fe0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	4413      	add	r3, r2
 8007ea0:	881b      	ldrh	r3, [r3, #0]
 8007ea2:	843b      	strh	r3, [r7, #32]
 8007ea4:	8c3b      	ldrh	r3, [r7, #32]
 8007ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d01b      	beq.n	8007ee6 <USB_DeactivateEndpoint+0x18a>
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	881b      	ldrh	r3, [r3, #0]
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ec4:	83fb      	strh	r3, [r7, #30]
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	441a      	add	r2, r3
 8007ed0:	8bfb      	ldrh	r3, [r7, #30]
 8007ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	4413      	add	r3, r2
 8007ef0:	881b      	ldrh	r3, [r3, #0]
 8007ef2:	83bb      	strh	r3, [r7, #28]
 8007ef4:	8bbb      	ldrh	r3, [r7, #28]
 8007ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d01b      	beq.n	8007f36 <USB_DeactivateEndpoint+0x1da>
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4413      	add	r3, r2
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f14:	837b      	strh	r3, [r7, #26]
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	441a      	add	r2, r3
 8007f20:	8b7b      	ldrh	r3, [r7, #26]
 8007f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	881b      	ldrh	r3, [r3, #0]
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f4c:	833b      	strh	r3, [r7, #24]
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	441a      	add	r2, r3
 8007f58:	8b3b      	ldrh	r3, [r7, #24]
 8007f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	4413      	add	r3, r2
 8007f78:	881b      	ldrh	r3, [r3, #0]
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f84:	82fb      	strh	r3, [r7, #22]
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	441a      	add	r2, r3
 8007f90:	8afb      	ldrh	r3, [r7, #22]
 8007f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4413      	add	r3, r2
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fbc:	82bb      	strh	r3, [r7, #20]
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	441a      	add	r2, r3
 8007fc8:	8abb      	ldrh	r3, [r7, #20]
 8007fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	8013      	strh	r3, [r2, #0]
 8007fde:	e0a3      	b.n	8008128 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	4413      	add	r3, r2
 8007fea:	881b      	ldrh	r3, [r3, #0]
 8007fec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007fee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d01b      	beq.n	8008030 <USB_DeactivateEndpoint+0x2d4>
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4413      	add	r3, r2
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	b29b      	uxth	r3, r3
 8008006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800800a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800800e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	441a      	add	r2, r3
 800801a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800801c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008024:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800802c:	b29b      	uxth	r3, r3
 800802e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4413      	add	r3, r2
 800803a:	881b      	ldrh	r3, [r3, #0]
 800803c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800803e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008044:	2b00      	cmp	r3, #0
 8008046:	d01b      	beq.n	8008080 <USB_DeactivateEndpoint+0x324>
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	4413      	add	r3, r2
 8008052:	881b      	ldrh	r3, [r3, #0]
 8008054:	b29b      	uxth	r3, r3
 8008056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800805a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800805e:	853b      	strh	r3, [r7, #40]	; 0x28
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	441a      	add	r2, r3
 800806a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800806c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008078:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800807c:	b29b      	uxth	r3, r3
 800807e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	881b      	ldrh	r3, [r3, #0]
 800808c:	b29b      	uxth	r3, r3
 800808e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008096:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	441a      	add	r2, r3
 80080a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80080a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	881b      	ldrh	r3, [r3, #0]
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080ce:	84bb      	strh	r3, [r7, #36]	; 0x24
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	441a      	add	r2, r3
 80080da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80080dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	881b      	ldrh	r3, [r3, #0]
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008106:	847b      	strh	r3, [r7, #34]	; 0x22
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	441a      	add	r2, r3
 8008112:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800811c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008124:	b29b      	uxth	r3, r3
 8008126:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3734      	adds	r7, #52	; 0x34
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr

08008136 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b0c2      	sub	sp, #264	; 0x108
 800813a:	af00      	add	r7, sp, #0
 800813c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008140:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008144:	6018      	str	r0, [r3, #0]
 8008146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800814a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800814e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	785b      	ldrb	r3, [r3, #1]
 800815c:	2b01      	cmp	r3, #1
 800815e:	f040 86b7 	bne.w	8008ed0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	699a      	ldr	r2, [r3, #24]
 800816e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	429a      	cmp	r2, r3
 800817c:	d908      	bls.n	8008190 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800817e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800818e:	e007      	b.n	80081a0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80081a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	7b1b      	ldrb	r3, [r3, #12]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d13a      	bne.n	8008226 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80081b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	6959      	ldr	r1, [r3, #20]
 80081bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	88da      	ldrh	r2, [r3, #6]
 80081c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80081d2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80081d6:	6800      	ldr	r0, [r0, #0]
 80081d8:	f001 fc8c 	bl	8009af4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80081dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	613b      	str	r3, [r7, #16]
 80081e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	461a      	mov	r2, r3
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	4413      	add	r3, r2
 80081fe:	613b      	str	r3, [r7, #16]
 8008200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	011a      	lsls	r2, r3, #4
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	4413      	add	r3, r2
 8008212:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008216:	60fb      	str	r3, [r7, #12]
 8008218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800821c:	b29a      	uxth	r2, r3
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	801a      	strh	r2, [r3, #0]
 8008222:	f000 be1f 	b.w	8008e64 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800822a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	78db      	ldrb	r3, [r3, #3]
 8008232:	2b02      	cmp	r3, #2
 8008234:	f040 8462 	bne.w	8008afc <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800823c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	6a1a      	ldr	r2, [r3, #32]
 8008244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	429a      	cmp	r2, r3
 8008252:	f240 83df 	bls.w	8008a14 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800825a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	881b      	ldrh	r3, [r3, #0]
 8008272:	b29b      	uxth	r3, r3
 8008274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800827c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008284:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800828e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	441a      	add	r2, r3
 800829a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800829e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082a6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80082aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80082b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6a1a      	ldr	r2, [r3, #32]
 80082be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082c2:	1ad2      	subs	r2, r2, r3
 80082c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80082d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4413      	add	r3, r2
 80082ea:	881b      	ldrh	r3, [r3, #0]
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f000 81c7 	beq.w	8008686 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80082f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	633b      	str	r3, [r7, #48]	; 0x30
 8008304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	785b      	ldrb	r3, [r3, #1]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d177      	bne.n	8008404 <USB_EPStartXfer+0x2ce>
 8008314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008318:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008324:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800832e:	b29b      	uxth	r3, r3
 8008330:	461a      	mov	r2, r3
 8008332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008334:	4413      	add	r3, r2
 8008336:	62bb      	str	r3, [r7, #40]	; 0x28
 8008338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800833c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	011a      	lsls	r2, r3, #4
 8008346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008348:	4413      	add	r3, r2
 800834a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800834e:	627b      	str	r3, [r7, #36]	; 0x24
 8008350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008352:	881b      	ldrh	r3, [r3, #0]
 8008354:	b29b      	uxth	r3, r3
 8008356:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800835a:	b29a      	uxth	r2, r3
 800835c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835e:	801a      	strh	r2, [r3, #0]
 8008360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008364:	2b3e      	cmp	r3, #62	; 0x3e
 8008366:	d921      	bls.n	80083ac <USB_EPStartXfer+0x276>
 8008368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800836c:	095b      	lsrs	r3, r3, #5
 800836e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008376:	f003 031f 	and.w	r3, r3, #31
 800837a:	2b00      	cmp	r3, #0
 800837c:	d104      	bne.n	8008388 <USB_EPStartXfer+0x252>
 800837e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008382:	3b01      	subs	r3, #1
 8008384:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838a:	881b      	ldrh	r3, [r3, #0]
 800838c:	b29a      	uxth	r2, r3
 800838e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008392:	b29b      	uxth	r3, r3
 8008394:	029b      	lsls	r3, r3, #10
 8008396:	b29b      	uxth	r3, r3
 8008398:	4313      	orrs	r3, r2
 800839a:	b29b      	uxth	r3, r3
 800839c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a8:	801a      	strh	r2, [r3, #0]
 80083aa:	e050      	b.n	800844e <USB_EPStartXfer+0x318>
 80083ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10a      	bne.n	80083ca <USB_EPStartXfer+0x294>
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	881b      	ldrh	r3, [r3, #0]
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c6:	801a      	strh	r2, [r3, #0]
 80083c8:	e041      	b.n	800844e <USB_EPStartXfer+0x318>
 80083ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ce:	085b      	lsrs	r3, r3, #1
 80083d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80083d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083d8:	f003 0301 	and.w	r3, r3, #1
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d004      	beq.n	80083ea <USB_EPStartXfer+0x2b4>
 80083e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80083e4:	3301      	adds	r3, #1
 80083e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80083ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ec:	881b      	ldrh	r3, [r3, #0]
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	029b      	lsls	r3, r3, #10
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	4313      	orrs	r3, r2
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008400:	801a      	strh	r2, [r3, #0]
 8008402:	e024      	b.n	800844e <USB_EPStartXfer+0x318>
 8008404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008408:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	785b      	ldrb	r3, [r3, #1]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d11c      	bne.n	800844e <USB_EPStartXfer+0x318>
 8008414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008418:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008422:	b29b      	uxth	r3, r3
 8008424:	461a      	mov	r2, r3
 8008426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008428:	4413      	add	r3, r2
 800842a:	633b      	str	r3, [r7, #48]	; 0x30
 800842c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	011a      	lsls	r2, r3, #4
 800843a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843c:	4413      	add	r3, r2
 800843e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008442:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008444:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008448:	b29a      	uxth	r2, r3
 800844a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800844e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	895b      	ldrh	r3, [r3, #10]
 800845a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800845e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6959      	ldr	r1, [r3, #20]
 800846a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800846e:	b29b      	uxth	r3, r3
 8008470:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008474:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008478:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800847c:	6800      	ldr	r0, [r0, #0]
 800847e:	f001 fb39 	bl	8009af4 <USB_WritePMA>
            ep->xfer_buff += len;
 8008482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	695a      	ldr	r2, [r3, #20]
 800848e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008492:	441a      	add	r2, r3
 8008494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80084a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	6a1a      	ldr	r2, [r3, #32]
 80084ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d90f      	bls.n	80084dc <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80084bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	6a1a      	ldr	r2, [r3, #32]
 80084c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084cc:	1ad2      	subs	r2, r2, r3
 80084ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	621a      	str	r2, [r3, #32]
 80084da:	e00e      	b.n	80084fa <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80084dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	6a1b      	ldr	r3, [r3, #32]
 80084e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80084ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2200      	movs	r2, #0
 80084f8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80084fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	785b      	ldrb	r3, [r3, #1]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d177      	bne.n	80085fa <USB_EPStartXfer+0x4c4>
 800850a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800850e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	61bb      	str	r3, [r7, #24]
 8008516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800851a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008524:	b29b      	uxth	r3, r3
 8008526:	461a      	mov	r2, r3
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	4413      	add	r3, r2
 800852c:	61bb      	str	r3, [r7, #24]
 800852e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	011a      	lsls	r2, r3, #4
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	4413      	add	r3, r2
 8008540:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008544:	617b      	str	r3, [r7, #20]
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	881b      	ldrh	r3, [r3, #0]
 800854a:	b29b      	uxth	r3, r3
 800854c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008550:	b29a      	uxth	r2, r3
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	801a      	strh	r2, [r3, #0]
 8008556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800855a:	2b3e      	cmp	r3, #62	; 0x3e
 800855c:	d921      	bls.n	80085a2 <USB_EPStartXfer+0x46c>
 800855e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008562:	095b      	lsrs	r3, r3, #5
 8008564:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800856c:	f003 031f 	and.w	r3, r3, #31
 8008570:	2b00      	cmp	r3, #0
 8008572:	d104      	bne.n	800857e <USB_EPStartXfer+0x448>
 8008574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008578:	3b01      	subs	r3, #1
 800857a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	881b      	ldrh	r3, [r3, #0]
 8008582:	b29a      	uxth	r2, r3
 8008584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008588:	b29b      	uxth	r3, r3
 800858a:	029b      	lsls	r3, r3, #10
 800858c:	b29b      	uxth	r3, r3
 800858e:	4313      	orrs	r3, r2
 8008590:	b29b      	uxth	r3, r3
 8008592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800859a:	b29a      	uxth	r2, r3
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	801a      	strh	r2, [r3, #0]
 80085a0:	e056      	b.n	8008650 <USB_EPStartXfer+0x51a>
 80085a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10a      	bne.n	80085c0 <USB_EPStartXfer+0x48a>
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	881b      	ldrh	r3, [r3, #0]
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	801a      	strh	r2, [r3, #0]
 80085be:	e047      	b.n	8008650 <USB_EPStartXfer+0x51a>
 80085c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085c4:	085b      	lsrs	r3, r3, #1
 80085c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80085ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085ce:	f003 0301 	and.w	r3, r3, #1
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d004      	beq.n	80085e0 <USB_EPStartXfer+0x4aa>
 80085d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085da:	3301      	adds	r3, #1
 80085dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	881b      	ldrh	r3, [r3, #0]
 80085e4:	b29a      	uxth	r2, r3
 80085e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	029b      	lsls	r3, r3, #10
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	4313      	orrs	r3, r2
 80085f2:	b29a      	uxth	r2, r3
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	801a      	strh	r2, [r3, #0]
 80085f8:	e02a      	b.n	8008650 <USB_EPStartXfer+0x51a>
 80085fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	785b      	ldrb	r3, [r3, #1]
 8008606:	2b01      	cmp	r3, #1
 8008608:	d122      	bne.n	8008650 <USB_EPStartXfer+0x51a>
 800860a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800860e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	623b      	str	r3, [r7, #32]
 8008616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800861a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008624:	b29b      	uxth	r3, r3
 8008626:	461a      	mov	r2, r3
 8008628:	6a3b      	ldr	r3, [r7, #32]
 800862a:	4413      	add	r3, r2
 800862c:	623b      	str	r3, [r7, #32]
 800862e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	011a      	lsls	r2, r3, #4
 800863c:	6a3b      	ldr	r3, [r7, #32]
 800863e:	4413      	add	r3, r2
 8008640:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008644:	61fb      	str	r3, [r7, #28]
 8008646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800864a:	b29a      	uxth	r2, r3
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	891b      	ldrh	r3, [r3, #8]
 800865c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	6959      	ldr	r1, [r3, #20]
 800866c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008670:	b29b      	uxth	r3, r3
 8008672:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008676:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800867a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800867e:	6800      	ldr	r0, [r0, #0]
 8008680:	f001 fa38 	bl	8009af4 <USB_WritePMA>
 8008684:	e3ee      	b.n	8008e64 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800868a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	785b      	ldrb	r3, [r3, #1]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d177      	bne.n	8008786 <USB_EPStartXfer+0x650>
 8008696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800869a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80086a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	461a      	mov	r2, r3
 80086b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086b6:	4413      	add	r3, r2
 80086b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80086ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	011a      	lsls	r2, r3, #4
 80086c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086ca:	4413      	add	r3, r2
 80086cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80086d0:	647b      	str	r3, [r7, #68]	; 0x44
 80086d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086d4:	881b      	ldrh	r3, [r3, #0]
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086dc:	b29a      	uxth	r2, r3
 80086de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086e0:	801a      	strh	r2, [r3, #0]
 80086e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086e6:	2b3e      	cmp	r3, #62	; 0x3e
 80086e8:	d921      	bls.n	800872e <USB_EPStartXfer+0x5f8>
 80086ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086ee:	095b      	lsrs	r3, r3, #5
 80086f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80086f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086f8:	f003 031f 	and.w	r3, r3, #31
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d104      	bne.n	800870a <USB_EPStartXfer+0x5d4>
 8008700:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008704:	3b01      	subs	r3, #1
 8008706:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800870a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800870c:	881b      	ldrh	r3, [r3, #0]
 800870e:	b29a      	uxth	r2, r3
 8008710:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008714:	b29b      	uxth	r3, r3
 8008716:	029b      	lsls	r3, r3, #10
 8008718:	b29b      	uxth	r3, r3
 800871a:	4313      	orrs	r3, r2
 800871c:	b29b      	uxth	r3, r3
 800871e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008726:	b29a      	uxth	r2, r3
 8008728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800872a:	801a      	strh	r2, [r3, #0]
 800872c:	e056      	b.n	80087dc <USB_EPStartXfer+0x6a6>
 800872e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10a      	bne.n	800874c <USB_EPStartXfer+0x616>
 8008736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008738:	881b      	ldrh	r3, [r3, #0]
 800873a:	b29b      	uxth	r3, r3
 800873c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008740:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008744:	b29a      	uxth	r2, r3
 8008746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008748:	801a      	strh	r2, [r3, #0]
 800874a:	e047      	b.n	80087dc <USB_EPStartXfer+0x6a6>
 800874c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008756:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800875a:	f003 0301 	and.w	r3, r3, #1
 800875e:	2b00      	cmp	r3, #0
 8008760:	d004      	beq.n	800876c <USB_EPStartXfer+0x636>
 8008762:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008766:	3301      	adds	r3, #1
 8008768:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800876c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800876e:	881b      	ldrh	r3, [r3, #0]
 8008770:	b29a      	uxth	r2, r3
 8008772:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008776:	b29b      	uxth	r3, r3
 8008778:	029b      	lsls	r3, r3, #10
 800877a:	b29b      	uxth	r3, r3
 800877c:	4313      	orrs	r3, r2
 800877e:	b29a      	uxth	r2, r3
 8008780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008782:	801a      	strh	r2, [r3, #0]
 8008784:	e02a      	b.n	80087dc <USB_EPStartXfer+0x6a6>
 8008786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800878a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	785b      	ldrb	r3, [r3, #1]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d122      	bne.n	80087dc <USB_EPStartXfer+0x6a6>
 8008796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800879a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	653b      	str	r3, [r7, #80]	; 0x50
 80087a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	461a      	mov	r2, r3
 80087b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087b6:	4413      	add	r3, r2
 80087b8:	653b      	str	r3, [r7, #80]	; 0x50
 80087ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	011a      	lsls	r2, r3, #4
 80087c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087ca:	4413      	add	r3, r2
 80087cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80087d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80087dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	891b      	ldrh	r3, [r3, #8]
 80087e8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80087ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	6959      	ldr	r1, [r3, #20]
 80087f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008802:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008806:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800880a:	6800      	ldr	r0, [r0, #0]
 800880c:	f001 f972 	bl	8009af4 <USB_WritePMA>
            ep->xfer_buff += len;
 8008810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	695a      	ldr	r2, [r3, #20]
 800881c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008820:	441a      	add	r2, r3
 8008822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800882e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	6a1a      	ldr	r2, [r3, #32]
 800883a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800883e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	429a      	cmp	r2, r3
 8008848:	d90f      	bls.n	800886a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800884a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800884e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6a1a      	ldr	r2, [r3, #32]
 8008856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800885a:	1ad2      	subs	r2, r2, r3
 800885c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	621a      	str	r2, [r3, #32]
 8008868:	e00e      	b.n	8008888 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800886a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800886e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	6a1b      	ldr	r3, [r3, #32]
 8008876:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800887a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800887e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2200      	movs	r2, #0
 8008886:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800888c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	643b      	str	r3, [r7, #64]	; 0x40
 8008894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008898:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	785b      	ldrb	r3, [r3, #1]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d177      	bne.n	8008994 <USB_EPStartXfer+0x85e>
 80088a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80088b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088be:	b29b      	uxth	r3, r3
 80088c0:	461a      	mov	r2, r3
 80088c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c4:	4413      	add	r3, r2
 80088c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80088c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	011a      	lsls	r2, r3, #4
 80088d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d8:	4413      	add	r3, r2
 80088da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088de:	637b      	str	r3, [r7, #52]	; 0x34
 80088e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e2:	881b      	ldrh	r3, [r3, #0]
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ee:	801a      	strh	r2, [r3, #0]
 80088f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088f4:	2b3e      	cmp	r3, #62	; 0x3e
 80088f6:	d921      	bls.n	800893c <USB_EPStartXfer+0x806>
 80088f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088fc:	095b      	lsrs	r3, r3, #5
 80088fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008906:	f003 031f 	and.w	r3, r3, #31
 800890a:	2b00      	cmp	r3, #0
 800890c:	d104      	bne.n	8008918 <USB_EPStartXfer+0x7e2>
 800890e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008912:	3b01      	subs	r3, #1
 8008914:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800891a:	881b      	ldrh	r3, [r3, #0]
 800891c:	b29a      	uxth	r2, r3
 800891e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008922:	b29b      	uxth	r3, r3
 8008924:	029b      	lsls	r3, r3, #10
 8008926:	b29b      	uxth	r3, r3
 8008928:	4313      	orrs	r3, r2
 800892a:	b29b      	uxth	r3, r3
 800892c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008930:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008934:	b29a      	uxth	r2, r3
 8008936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008938:	801a      	strh	r2, [r3, #0]
 800893a:	e050      	b.n	80089de <USB_EPStartXfer+0x8a8>
 800893c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10a      	bne.n	800895a <USB_EPStartXfer+0x824>
 8008944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008946:	881b      	ldrh	r3, [r3, #0]
 8008948:	b29b      	uxth	r3, r3
 800894a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800894e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008952:	b29a      	uxth	r2, r3
 8008954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008956:	801a      	strh	r2, [r3, #0]
 8008958:	e041      	b.n	80089de <USB_EPStartXfer+0x8a8>
 800895a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800895e:	085b      	lsrs	r3, r3, #1
 8008960:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	2b00      	cmp	r3, #0
 800896e:	d004      	beq.n	800897a <USB_EPStartXfer+0x844>
 8008970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008974:	3301      	adds	r3, #1
 8008976:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800897a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800897c:	881b      	ldrh	r3, [r3, #0]
 800897e:	b29a      	uxth	r2, r3
 8008980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008984:	b29b      	uxth	r3, r3
 8008986:	029b      	lsls	r3, r3, #10
 8008988:	b29b      	uxth	r3, r3
 800898a:	4313      	orrs	r3, r2
 800898c:	b29a      	uxth	r2, r3
 800898e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008990:	801a      	strh	r2, [r3, #0]
 8008992:	e024      	b.n	80089de <USB_EPStartXfer+0x8a8>
 8008994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	785b      	ldrb	r3, [r3, #1]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d11c      	bne.n	80089de <USB_EPStartXfer+0x8a8>
 80089a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	461a      	mov	r2, r3
 80089b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089b8:	4413      	add	r3, r2
 80089ba:	643b      	str	r3, [r7, #64]	; 0x40
 80089bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	011a      	lsls	r2, r3, #4
 80089ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089cc:	4413      	add	r3, r2
 80089ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089d8:	b29a      	uxth	r2, r3
 80089da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80089de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	895b      	ldrh	r3, [r3, #10]
 80089ea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	6959      	ldr	r1, [r3, #20]
 80089fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008a04:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008a08:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008a0c:	6800      	ldr	r0, [r0, #0]
 8008a0e:	f001 f871 	bl	8009af4 <USB_WritePMA>
 8008a12:	e227      	b.n	8008e64 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	6a1b      	ldr	r3, [r3, #32]
 8008a20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	881b      	ldrh	r3, [r3, #0]
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a4a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008a4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	441a      	add	r2, r3
 8008a68:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008a6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008aa0:	4413      	add	r3, r2
 8008aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	011a      	lsls	r2, r3, #4
 8008ab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008aba:	65bb      	str	r3, [r7, #88]	; 0x58
 8008abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ac4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	891b      	ldrh	r3, [r3, #8]
 8008ad2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	6959      	ldr	r1, [r3, #20]
 8008ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008aec:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008af0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008af4:	6800      	ldr	r0, [r0, #0]
 8008af6:	f000 fffd 	bl	8009af4 <USB_WritePMA>
 8008afa:	e1b3      	b.n	8008e64 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	6a1a      	ldr	r2, [r3, #32]
 8008b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b0c:	1ad2      	subs	r2, r2, r3
 8008b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4413      	add	r3, r2
 8008b34:	881b      	ldrh	r3, [r3, #0]
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f000 80c6 	beq.w	8008cce <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	673b      	str	r3, [r7, #112]	; 0x70
 8008b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	785b      	ldrb	r3, [r3, #1]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d177      	bne.n	8008c4e <USB_EPStartXfer+0xb18>
 8008b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b7e:	4413      	add	r3, r2
 8008b80:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	011a      	lsls	r2, r3, #4
 8008b90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b92:	4413      	add	r3, r2
 8008b94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b98:	667b      	str	r3, [r7, #100]	; 0x64
 8008b9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b9c:	881b      	ldrh	r3, [r3, #0]
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ba8:	801a      	strh	r2, [r3, #0]
 8008baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bae:	2b3e      	cmp	r3, #62	; 0x3e
 8008bb0:	d921      	bls.n	8008bf6 <USB_EPStartXfer+0xac0>
 8008bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bb6:	095b      	lsrs	r3, r3, #5
 8008bb8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bc0:	f003 031f 	and.w	r3, r3, #31
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d104      	bne.n	8008bd2 <USB_EPStartXfer+0xa9c>
 8008bc8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008bd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bd4:	881b      	ldrh	r3, [r3, #0]
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	029b      	lsls	r3, r3, #10
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	4313      	orrs	r3, r2
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bf2:	801a      	strh	r2, [r3, #0]
 8008bf4:	e050      	b.n	8008c98 <USB_EPStartXfer+0xb62>
 8008bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d10a      	bne.n	8008c14 <USB_EPStartXfer+0xade>
 8008bfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c00:	881b      	ldrh	r3, [r3, #0]
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c10:	801a      	strh	r2, [r3, #0]
 8008c12:	e041      	b.n	8008c98 <USB_EPStartXfer+0xb62>
 8008c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c18:	085b      	lsrs	r3, r3, #1
 8008c1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c22:	f003 0301 	and.w	r3, r3, #1
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d004      	beq.n	8008c34 <USB_EPStartXfer+0xafe>
 8008c2a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008c2e:	3301      	adds	r3, #1
 8008c30:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c36:	881b      	ldrh	r3, [r3, #0]
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	029b      	lsls	r3, r3, #10
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	4313      	orrs	r3, r2
 8008c46:	b29a      	uxth	r2, r3
 8008c48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c4a:	801a      	strh	r2, [r3, #0]
 8008c4c:	e024      	b.n	8008c98 <USB_EPStartXfer+0xb62>
 8008c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	785b      	ldrb	r3, [r3, #1]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d11c      	bne.n	8008c98 <USB_EPStartXfer+0xb62>
 8008c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	461a      	mov	r2, r3
 8008c70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c72:	4413      	add	r3, r2
 8008c74:	673b      	str	r3, [r7, #112]	; 0x70
 8008c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	011a      	lsls	r2, r3, #4
 8008c84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c86:	4413      	add	r3, r2
 8008c88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c92:	b29a      	uxth	r2, r3
 8008c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c96:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	895b      	ldrh	r3, [r3, #10]
 8008ca4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	6959      	ldr	r1, [r3, #20]
 8008cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008cbe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008cc2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008cc6:	6800      	ldr	r0, [r0, #0]
 8008cc8:	f000 ff14 	bl	8009af4 <USB_WritePMA>
 8008ccc:	e0ca      	b.n	8008e64 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	785b      	ldrb	r3, [r3, #1]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d177      	bne.n	8008dce <USB_EPStartXfer+0xc98>
 8008cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ce2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008cfe:	4413      	add	r3, r2
 8008d00:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	011a      	lsls	r2, r3, #4
 8008d10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d12:	4413      	add	r3, r2
 8008d14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d18:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d1c:	881b      	ldrh	r3, [r3, #0]
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d28:	801a      	strh	r2, [r3, #0]
 8008d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d2e:	2b3e      	cmp	r3, #62	; 0x3e
 8008d30:	d921      	bls.n	8008d76 <USB_EPStartXfer+0xc40>
 8008d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d36:	095b      	lsrs	r3, r3, #5
 8008d38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d40:	f003 031f 	and.w	r3, r3, #31
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d104      	bne.n	8008d52 <USB_EPStartXfer+0xc1c>
 8008d48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008d52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d54:	881b      	ldrh	r3, [r3, #0]
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	029b      	lsls	r3, r3, #10
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	4313      	orrs	r3, r2
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d6e:	b29a      	uxth	r2, r3
 8008d70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d72:	801a      	strh	r2, [r3, #0]
 8008d74:	e05c      	b.n	8008e30 <USB_EPStartXfer+0xcfa>
 8008d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10a      	bne.n	8008d94 <USB_EPStartXfer+0xc5e>
 8008d7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d80:	881b      	ldrh	r3, [r3, #0]
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d90:	801a      	strh	r2, [r3, #0]
 8008d92:	e04d      	b.n	8008e30 <USB_EPStartXfer+0xcfa>
 8008d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d98:	085b      	lsrs	r3, r3, #1
 8008d9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008da2:	f003 0301 	and.w	r3, r3, #1
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d004      	beq.n	8008db4 <USB_EPStartXfer+0xc7e>
 8008daa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008dae:	3301      	adds	r3, #1
 8008db0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008db6:	881b      	ldrh	r3, [r3, #0]
 8008db8:	b29a      	uxth	r2, r3
 8008dba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	029b      	lsls	r3, r3, #10
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dca:	801a      	strh	r2, [r3, #0]
 8008dcc:	e030      	b.n	8008e30 <USB_EPStartXfer+0xcfa>
 8008dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	785b      	ldrb	r3, [r3, #1]
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d128      	bne.n	8008e30 <USB_EPStartXfer+0xcfa>
 8008dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008de2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008df0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e02:	4413      	add	r3, r2
 8008e04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	011a      	lsls	r2, r3, #4
 8008e16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e1a:	4413      	add	r3, r2
 8008e1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008e2e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	891b      	ldrh	r3, [r3, #8]
 8008e3c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	6959      	ldr	r1, [r3, #20]
 8008e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008e56:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008e5a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008e5e:	6800      	ldr	r0, [r0, #0]
 8008e60:	f000 fe48 	bl	8009af4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	4413      	add	r3, r2
 8008e7e:	881b      	ldrh	r3, [r3, #0]
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e8a:	817b      	strh	r3, [r7, #10]
 8008e8c:	897b      	ldrh	r3, [r7, #10]
 8008e8e:	f083 0310 	eor.w	r3, r3, #16
 8008e92:	817b      	strh	r3, [r7, #10]
 8008e94:	897b      	ldrh	r3, [r7, #10]
 8008e96:	f083 0320 	eor.w	r3, r3, #32
 8008e9a:	817b      	strh	r3, [r7, #10]
 8008e9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ea0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	441a      	add	r2, r3
 8008eb6:	897b      	ldrh	r3, [r7, #10]
 8008eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	8013      	strh	r3, [r2, #0]
 8008ecc:	f000 bcde 	b.w	800988c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	7b1b      	ldrb	r3, [r3, #12]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f040 80bb 	bne.w	8009058 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	699a      	ldr	r2, [r3, #24]
 8008eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d917      	bls.n	8008f2e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	691b      	ldr	r3, [r3, #16]
 8008f0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	699a      	ldr	r2, [r3, #24]
 8008f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f1e:	1ad2      	subs	r2, r2, r3
 8008f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	619a      	str	r2, [r3, #24]
 8008f2c:	e00e      	b.n	8008f4c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	699b      	ldr	r3, [r3, #24]
 8008f3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f70:	4413      	add	r3, r2
 8008f72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	011a      	lsls	r2, r3, #4
 8008f84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f88:	4413      	add	r3, r2
 8008f8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008f8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f96:	881b      	ldrh	r3, [r3, #0]
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fa4:	801a      	strh	r2, [r3, #0]
 8008fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008faa:	2b3e      	cmp	r3, #62	; 0x3e
 8008fac:	d924      	bls.n	8008ff8 <USB_EPStartXfer+0xec2>
 8008fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fb2:	095b      	lsrs	r3, r3, #5
 8008fb4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fbc:	f003 031f 	and.w	r3, r3, #31
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d104      	bne.n	8008fce <USB_EPStartXfer+0xe98>
 8008fc4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008fce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fd2:	881b      	ldrh	r3, [r3, #0]
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	029b      	lsls	r3, r3, #10
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ff2:	801a      	strh	r2, [r3, #0]
 8008ff4:	f000 bc10 	b.w	8009818 <USB_EPStartXfer+0x16e2>
 8008ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10c      	bne.n	800901a <USB_EPStartXfer+0xee4>
 8009000:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009004:	881b      	ldrh	r3, [r3, #0]
 8009006:	b29b      	uxth	r3, r3
 8009008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800900c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009010:	b29a      	uxth	r2, r3
 8009012:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009016:	801a      	strh	r2, [r3, #0]
 8009018:	e3fe      	b.n	8009818 <USB_EPStartXfer+0x16e2>
 800901a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800901e:	085b      	lsrs	r3, r3, #1
 8009020:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009028:	f003 0301 	and.w	r3, r3, #1
 800902c:	2b00      	cmp	r3, #0
 800902e:	d004      	beq.n	800903a <USB_EPStartXfer+0xf04>
 8009030:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009034:	3301      	adds	r3, #1
 8009036:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800903a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800903e:	881b      	ldrh	r3, [r3, #0]
 8009040:	b29a      	uxth	r2, r3
 8009042:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009046:	b29b      	uxth	r3, r3
 8009048:	029b      	lsls	r3, r3, #10
 800904a:	b29b      	uxth	r3, r3
 800904c:	4313      	orrs	r3, r2
 800904e:	b29a      	uxth	r2, r3
 8009050:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009054:	801a      	strh	r2, [r3, #0]
 8009056:	e3df      	b.n	8009818 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800905c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	78db      	ldrb	r3, [r3, #3]
 8009064:	2b02      	cmp	r3, #2
 8009066:	f040 8218 	bne.w	800949a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800906a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800906e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	785b      	ldrb	r3, [r3, #1]
 8009076:	2b00      	cmp	r3, #0
 8009078:	f040 809d 	bne.w	80091b6 <USB_EPStartXfer+0x1080>
 800907c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009080:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800908a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800908e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009098:	b29b      	uxth	r3, r3
 800909a:	461a      	mov	r2, r3
 800909c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090a0:	4413      	add	r3, r2
 80090a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80090a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	011a      	lsls	r2, r3, #4
 80090b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090b8:	4413      	add	r3, r2
 80090ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80090be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80090c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80090c6:	881b      	ldrh	r3, [r3, #0]
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80090d4:	801a      	strh	r2, [r3, #0]
 80090d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	2b3e      	cmp	r3, #62	; 0x3e
 80090e4:	d92b      	bls.n	800913e <USB_EPStartXfer+0x1008>
 80090e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	095b      	lsrs	r3, r3, #5
 80090f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80090f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	691b      	ldr	r3, [r3, #16]
 8009104:	f003 031f 	and.w	r3, r3, #31
 8009108:	2b00      	cmp	r3, #0
 800910a:	d104      	bne.n	8009116 <USB_EPStartXfer+0xfe0>
 800910c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009110:	3b01      	subs	r3, #1
 8009112:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009116:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800911a:	881b      	ldrh	r3, [r3, #0]
 800911c:	b29a      	uxth	r2, r3
 800911e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009122:	b29b      	uxth	r3, r3
 8009124:	029b      	lsls	r3, r3, #10
 8009126:	b29b      	uxth	r3, r3
 8009128:	4313      	orrs	r3, r2
 800912a:	b29b      	uxth	r3, r3
 800912c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009134:	b29a      	uxth	r2, r3
 8009136:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800913a:	801a      	strh	r2, [r3, #0]
 800913c:	e070      	b.n	8009220 <USB_EPStartXfer+0x10ea>
 800913e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10c      	bne.n	8009168 <USB_EPStartXfer+0x1032>
 800914e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009152:	881b      	ldrh	r3, [r3, #0]
 8009154:	b29b      	uxth	r3, r3
 8009156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800915a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800915e:	b29a      	uxth	r2, r3
 8009160:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009164:	801a      	strh	r2, [r3, #0]
 8009166:	e05b      	b.n	8009220 <USB_EPStartXfer+0x10ea>
 8009168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800916c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	691b      	ldr	r3, [r3, #16]
 8009174:	085b      	lsrs	r3, r3, #1
 8009176:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800917a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800917e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	f003 0301 	and.w	r3, r3, #1
 800918a:	2b00      	cmp	r3, #0
 800918c:	d004      	beq.n	8009198 <USB_EPStartXfer+0x1062>
 800918e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009192:	3301      	adds	r3, #1
 8009194:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009198:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800919c:	881b      	ldrh	r3, [r3, #0]
 800919e:	b29a      	uxth	r2, r3
 80091a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	029b      	lsls	r3, r3, #10
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	4313      	orrs	r3, r2
 80091ac:	b29a      	uxth	r2, r3
 80091ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80091b2:	801a      	strh	r2, [r3, #0]
 80091b4:	e034      	b.n	8009220 <USB_EPStartXfer+0x10ea>
 80091b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	785b      	ldrb	r3, [r3, #1]
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d12c      	bne.n	8009220 <USB_EPStartXfer+0x10ea>
 80091c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80091d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	461a      	mov	r2, r3
 80091e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80091ea:	4413      	add	r3, r2
 80091ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80091f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	011a      	lsls	r2, r3, #4
 80091fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009202:	4413      	add	r3, r2
 8009204:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009208:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800920c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	b29a      	uxth	r2, r3
 800921a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800921e:	801a      	strh	r2, [r3, #0]
 8009220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009224:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800922e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	785b      	ldrb	r3, [r3, #1]
 800923a:	2b00      	cmp	r3, #0
 800923c:	f040 809d 	bne.w	800937a <USB_EPStartXfer+0x1244>
 8009240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009244:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800924e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009252:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800925c:	b29b      	uxth	r3, r3
 800925e:	461a      	mov	r2, r3
 8009260:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009264:	4413      	add	r3, r2
 8009266:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800926a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800926e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	011a      	lsls	r2, r3, #4
 8009278:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800927c:	4413      	add	r3, r2
 800927e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009282:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009286:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800928a:	881b      	ldrh	r3, [r3, #0]
 800928c:	b29b      	uxth	r3, r3
 800928e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009292:	b29a      	uxth	r2, r3
 8009294:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009298:	801a      	strh	r2, [r3, #0]
 800929a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800929e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	2b3e      	cmp	r3, #62	; 0x3e
 80092a8:	d92b      	bls.n	8009302 <USB_EPStartXfer+0x11cc>
 80092aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	095b      	lsrs	r3, r3, #5
 80092b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80092bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	f003 031f 	and.w	r3, r3, #31
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d104      	bne.n	80092da <USB_EPStartXfer+0x11a4>
 80092d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092d4:	3b01      	subs	r3, #1
 80092d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80092da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092de:	881b      	ldrh	r3, [r3, #0]
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	029b      	lsls	r3, r3, #10
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	4313      	orrs	r3, r2
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092fe:	801a      	strh	r2, [r3, #0]
 8009300:	e069      	b.n	80093d6 <USB_EPStartXfer+0x12a0>
 8009302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d10c      	bne.n	800932c <USB_EPStartXfer+0x11f6>
 8009312:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009316:	881b      	ldrh	r3, [r3, #0]
 8009318:	b29b      	uxth	r3, r3
 800931a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800931e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009322:	b29a      	uxth	r2, r3
 8009324:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009328:	801a      	strh	r2, [r3, #0]
 800932a:	e054      	b.n	80093d6 <USB_EPStartXfer+0x12a0>
 800932c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	691b      	ldr	r3, [r3, #16]
 8009338:	085b      	lsrs	r3, r3, #1
 800933a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800933e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	f003 0301 	and.w	r3, r3, #1
 800934e:	2b00      	cmp	r3, #0
 8009350:	d004      	beq.n	800935c <USB_EPStartXfer+0x1226>
 8009352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009356:	3301      	adds	r3, #1
 8009358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800935c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009360:	881b      	ldrh	r3, [r3, #0]
 8009362:	b29a      	uxth	r2, r3
 8009364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009368:	b29b      	uxth	r3, r3
 800936a:	029b      	lsls	r3, r3, #10
 800936c:	b29b      	uxth	r3, r3
 800936e:	4313      	orrs	r3, r2
 8009370:	b29a      	uxth	r2, r3
 8009372:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009376:	801a      	strh	r2, [r3, #0]
 8009378:	e02d      	b.n	80093d6 <USB_EPStartXfer+0x12a0>
 800937a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800937e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	785b      	ldrb	r3, [r3, #1]
 8009386:	2b01      	cmp	r3, #1
 8009388:	d125      	bne.n	80093d6 <USB_EPStartXfer+0x12a0>
 800938a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800938e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009398:	b29b      	uxth	r3, r3
 800939a:	461a      	mov	r2, r3
 800939c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80093a0:	4413      	add	r3, r2
 80093a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80093a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	011a      	lsls	r2, r3, #4
 80093b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80093b8:	4413      	add	r3, r2
 80093ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80093be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80093c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	b29a      	uxth	r2, r3
 80093d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80093d4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80093d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	69db      	ldr	r3, [r3, #28]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f000 8218 	beq.w	8009818 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80093e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	4413      	add	r3, r2
 8009402:	881b      	ldrh	r3, [r3, #0]
 8009404:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009408:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800940c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009410:	2b00      	cmp	r3, #0
 8009412:	d005      	beq.n	8009420 <USB_EPStartXfer+0x12ea>
 8009414:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800941c:	2b00      	cmp	r3, #0
 800941e:	d10d      	bne.n	800943c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009420:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009428:	2b00      	cmp	r3, #0
 800942a:	f040 81f5 	bne.w	8009818 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800942e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009436:	2b00      	cmp	r3, #0
 8009438:	f040 81ee 	bne.w	8009818 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800943c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009440:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800944a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	4413      	add	r3, r2
 8009456:	881b      	ldrh	r3, [r3, #0]
 8009458:	b29b      	uxth	r3, r3
 800945a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800945e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009462:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800946a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	441a      	add	r2, r3
 8009480:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009484:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009488:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800948c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009490:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009494:	b29b      	uxth	r3, r3
 8009496:	8013      	strh	r3, [r2, #0]
 8009498:	e1be      	b.n	8009818 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800949a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800949e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	78db      	ldrb	r3, [r3, #3]
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	f040 81b4 	bne.w	8009814 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80094ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	699a      	ldr	r2, [r3, #24]
 80094b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d917      	bls.n	80094f8 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80094c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80094d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	699a      	ldr	r2, [r3, #24]
 80094e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094e8:	1ad2      	subs	r2, r2, r3
 80094ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	619a      	str	r2, [r3, #24]
 80094f6:	e00e      	b.n	8009516 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80094f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800950c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2200      	movs	r2, #0
 8009514:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800951a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	785b      	ldrb	r3, [r3, #1]
 8009522:	2b00      	cmp	r3, #0
 8009524:	f040 8085 	bne.w	8009632 <USB_EPStartXfer+0x14fc>
 8009528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800952c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800953a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009544:	b29b      	uxth	r3, r3
 8009546:	461a      	mov	r2, r3
 8009548:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800954c:	4413      	add	r3, r2
 800954e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	011a      	lsls	r2, r3, #4
 8009560:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009564:	4413      	add	r3, r2
 8009566:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800956a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800956e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009572:	881b      	ldrh	r3, [r3, #0]
 8009574:	b29b      	uxth	r3, r3
 8009576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800957a:	b29a      	uxth	r2, r3
 800957c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009580:	801a      	strh	r2, [r3, #0]
 8009582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009586:	2b3e      	cmp	r3, #62	; 0x3e
 8009588:	d923      	bls.n	80095d2 <USB_EPStartXfer+0x149c>
 800958a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800958e:	095b      	lsrs	r3, r3, #5
 8009590:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009598:	f003 031f 	and.w	r3, r3, #31
 800959c:	2b00      	cmp	r3, #0
 800959e:	d104      	bne.n	80095aa <USB_EPStartXfer+0x1474>
 80095a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095a4:	3b01      	subs	r3, #1
 80095a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80095aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095ae:	881b      	ldrh	r3, [r3, #0]
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	029b      	lsls	r3, r3, #10
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	4313      	orrs	r3, r2
 80095be:	b29b      	uxth	r3, r3
 80095c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095c8:	b29a      	uxth	r2, r3
 80095ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095ce:	801a      	strh	r2, [r3, #0]
 80095d0:	e060      	b.n	8009694 <USB_EPStartXfer+0x155e>
 80095d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d10c      	bne.n	80095f4 <USB_EPStartXfer+0x14be>
 80095da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095de:	881b      	ldrh	r3, [r3, #0]
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095ea:	b29a      	uxth	r2, r3
 80095ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095f0:	801a      	strh	r2, [r3, #0]
 80095f2:	e04f      	b.n	8009694 <USB_EPStartXfer+0x155e>
 80095f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095f8:	085b      	lsrs	r3, r3, #1
 80095fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80095fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009602:	f003 0301 	and.w	r3, r3, #1
 8009606:	2b00      	cmp	r3, #0
 8009608:	d004      	beq.n	8009614 <USB_EPStartXfer+0x14de>
 800960a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800960e:	3301      	adds	r3, #1
 8009610:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009614:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009618:	881b      	ldrh	r3, [r3, #0]
 800961a:	b29a      	uxth	r2, r3
 800961c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009620:	b29b      	uxth	r3, r3
 8009622:	029b      	lsls	r3, r3, #10
 8009624:	b29b      	uxth	r3, r3
 8009626:	4313      	orrs	r3, r2
 8009628:	b29a      	uxth	r2, r3
 800962a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800962e:	801a      	strh	r2, [r3, #0]
 8009630:	e030      	b.n	8009694 <USB_EPStartXfer+0x155e>
 8009632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009636:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	785b      	ldrb	r3, [r3, #1]
 800963e:	2b01      	cmp	r3, #1
 8009640:	d128      	bne.n	8009694 <USB_EPStartXfer+0x155e>
 8009642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009646:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009654:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800965e:	b29b      	uxth	r3, r3
 8009660:	461a      	mov	r2, r3
 8009662:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009666:	4413      	add	r3, r2
 8009668:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800966c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	011a      	lsls	r2, r3, #4
 800967a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800967e:	4413      	add	r3, r2
 8009680:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800968c:	b29a      	uxth	r2, r3
 800968e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009692:	801a      	strh	r2, [r3, #0]
 8009694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009698:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80096a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	785b      	ldrb	r3, [r3, #1]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f040 8085 	bne.w	80097be <USB_EPStartXfer+0x1688>
 80096b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80096c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	461a      	mov	r2, r3
 80096d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80096d8:	4413      	add	r3, r2
 80096da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80096de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	011a      	lsls	r2, r3, #4
 80096ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80096f0:	4413      	add	r3, r2
 80096f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80096f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80096fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096fe:	881b      	ldrh	r3, [r3, #0]
 8009700:	b29b      	uxth	r3, r3
 8009702:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009706:	b29a      	uxth	r2, r3
 8009708:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800970c:	801a      	strh	r2, [r3, #0]
 800970e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009712:	2b3e      	cmp	r3, #62	; 0x3e
 8009714:	d923      	bls.n	800975e <USB_EPStartXfer+0x1628>
 8009716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800971a:	095b      	lsrs	r3, r3, #5
 800971c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009724:	f003 031f 	and.w	r3, r3, #31
 8009728:	2b00      	cmp	r3, #0
 800972a:	d104      	bne.n	8009736 <USB_EPStartXfer+0x1600>
 800972c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009730:	3b01      	subs	r3, #1
 8009732:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009736:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800973a:	881b      	ldrh	r3, [r3, #0]
 800973c:	b29a      	uxth	r2, r3
 800973e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009742:	b29b      	uxth	r3, r3
 8009744:	029b      	lsls	r3, r3, #10
 8009746:	b29b      	uxth	r3, r3
 8009748:	4313      	orrs	r3, r2
 800974a:	b29b      	uxth	r3, r3
 800974c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009754:	b29a      	uxth	r2, r3
 8009756:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800975a:	801a      	strh	r2, [r3, #0]
 800975c:	e05c      	b.n	8009818 <USB_EPStartXfer+0x16e2>
 800975e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009762:	2b00      	cmp	r3, #0
 8009764:	d10c      	bne.n	8009780 <USB_EPStartXfer+0x164a>
 8009766:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800976a:	881b      	ldrh	r3, [r3, #0]
 800976c:	b29b      	uxth	r3, r3
 800976e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009776:	b29a      	uxth	r2, r3
 8009778:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800977c:	801a      	strh	r2, [r3, #0]
 800977e:	e04b      	b.n	8009818 <USB_EPStartXfer+0x16e2>
 8009780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009784:	085b      	lsrs	r3, r3, #1
 8009786:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800978a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800978e:	f003 0301 	and.w	r3, r3, #1
 8009792:	2b00      	cmp	r3, #0
 8009794:	d004      	beq.n	80097a0 <USB_EPStartXfer+0x166a>
 8009796:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800979a:	3301      	adds	r3, #1
 800979c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80097a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80097a4:	881b      	ldrh	r3, [r3, #0]
 80097a6:	b29a      	uxth	r2, r3
 80097a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	029b      	lsls	r3, r3, #10
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	4313      	orrs	r3, r2
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80097ba:	801a      	strh	r2, [r3, #0]
 80097bc:	e02c      	b.n	8009818 <USB_EPStartXfer+0x16e2>
 80097be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	785b      	ldrb	r3, [r3, #1]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d124      	bne.n	8009818 <USB_EPStartXfer+0x16e2>
 80097ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097dc:	b29b      	uxth	r3, r3
 80097de:	461a      	mov	r2, r3
 80097e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80097e4:	4413      	add	r3, r2
 80097e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80097ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	011a      	lsls	r2, r3, #4
 80097f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80097fc:	4413      	add	r3, r2
 80097fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009802:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009806:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800980a:	b29a      	uxth	r2, r3
 800980c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009810:	801a      	strh	r2, [r3, #0]
 8009812:	e001      	b.n	8009818 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	e03a      	b.n	800988e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800981c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	4413      	add	r3, r2
 8009832:	881b      	ldrh	r3, [r3, #0]
 8009834:	b29b      	uxth	r3, r3
 8009836:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800983a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800983e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009842:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009846:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800984a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800984e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009852:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009856:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800985a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800985e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	441a      	add	r2, r3
 8009874:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800987c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009888:	b29b      	uxth	r3, r3
 800988a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	785b      	ldrb	r3, [r3, #1]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d020      	beq.n	80098ec <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	4413      	add	r3, r2
 80098b4:	881b      	ldrh	r3, [r3, #0]
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098c0:	81bb      	strh	r3, [r7, #12]
 80098c2:	89bb      	ldrh	r3, [r7, #12]
 80098c4:	f083 0310 	eor.w	r3, r3, #16
 80098c8:	81bb      	strh	r3, [r7, #12]
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	441a      	add	r2, r3
 80098d4:	89bb      	ldrh	r3, [r7, #12]
 80098d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	8013      	strh	r3, [r2, #0]
 80098ea:	e01f      	b.n	800992c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	4413      	add	r3, r2
 80098f6:	881b      	ldrh	r3, [r3, #0]
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009902:	81fb      	strh	r3, [r7, #14]
 8009904:	89fb      	ldrh	r3, [r7, #14]
 8009906:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800990a:	81fb      	strh	r3, [r7, #14]
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	441a      	add	r2, r3
 8009916:	89fb      	ldrh	r3, [r7, #14]
 8009918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800991c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009928:	b29b      	uxth	r3, r3
 800992a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800992c:	2300      	movs	r3, #0
}
 800992e:	4618      	mov	r0, r3
 8009930:	3714      	adds	r7, #20
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr

0800993a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800993a:	b480      	push	{r7}
 800993c:	b087      	sub	sp, #28
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
 8009942:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	7b1b      	ldrb	r3, [r3, #12]
 8009948:	2b00      	cmp	r3, #0
 800994a:	f040 809d 	bne.w	8009a88 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	785b      	ldrb	r3, [r3, #1]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d04c      	beq.n	80099f0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	4413      	add	r3, r2
 8009960:	881b      	ldrh	r3, [r3, #0]
 8009962:	823b      	strh	r3, [r7, #16]
 8009964:	8a3b      	ldrh	r3, [r7, #16]
 8009966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800996a:	2b00      	cmp	r3, #0
 800996c:	d01b      	beq.n	80099a6 <USB_EPClearStall+0x6c>
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	4413      	add	r3, r2
 8009978:	881b      	ldrh	r3, [r3, #0]
 800997a:	b29b      	uxth	r3, r3
 800997c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009984:	81fb      	strh	r3, [r7, #14]
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	441a      	add	r2, r3
 8009990:	89fb      	ldrh	r3, [r7, #14]
 8009992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800999a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800999e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	78db      	ldrb	r3, [r3, #3]
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d06c      	beq.n	8009a88 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	4413      	add	r3, r2
 80099b8:	881b      	ldrh	r3, [r3, #0]
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099c4:	81bb      	strh	r3, [r7, #12]
 80099c6:	89bb      	ldrh	r3, [r7, #12]
 80099c8:	f083 0320 	eor.w	r3, r3, #32
 80099cc:	81bb      	strh	r3, [r7, #12]
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	441a      	add	r2, r3
 80099d8:	89bb      	ldrh	r3, [r7, #12]
 80099da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	8013      	strh	r3, [r2, #0]
 80099ee:	e04b      	b.n	8009a88 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	4413      	add	r3, r2
 80099fa:	881b      	ldrh	r3, [r3, #0]
 80099fc:	82fb      	strh	r3, [r7, #22]
 80099fe:	8afb      	ldrh	r3, [r7, #22]
 8009a00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d01b      	beq.n	8009a40 <USB_EPClearStall+0x106>
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	4413      	add	r3, r2
 8009a12:	881b      	ldrh	r3, [r3, #0]
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a1e:	82bb      	strh	r3, [r7, #20]
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	441a      	add	r2, r3
 8009a2a:	8abb      	ldrh	r3, [r7, #20]
 8009a2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	4413      	add	r3, r2
 8009a4a:	881b      	ldrh	r3, [r3, #0]
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a56:	827b      	strh	r3, [r7, #18]
 8009a58:	8a7b      	ldrh	r3, [r7, #18]
 8009a5a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009a5e:	827b      	strh	r3, [r7, #18]
 8009a60:	8a7b      	ldrh	r3, [r7, #18]
 8009a62:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009a66:	827b      	strh	r3, [r7, #18]
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	441a      	add	r2, r3
 8009a72:	8a7b      	ldrh	r3, [r7, #18]
 8009a74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	371c      	adds	r7, #28
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr

08009a96 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009a96:	b480      	push	{r7}
 8009a98:	b083      	sub	sp, #12
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009aa2:	78fb      	ldrb	r3, [r7, #3]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d103      	bne.n	8009ab0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2280      	movs	r2, #128	; 0x80
 8009aac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	370c      	adds	r7, #12
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr

08009abe <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009abe:	b480      	push	{r7}
 8009ac0:	b083      	sub	sp, #12
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	370c      	adds	r7, #12
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3714      	adds	r7, #20
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b08b      	sub	sp, #44	; 0x2c
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	4611      	mov	r1, r2
 8009b00:	461a      	mov	r2, r3
 8009b02:	460b      	mov	r3, r1
 8009b04:	80fb      	strh	r3, [r7, #6]
 8009b06:	4613      	mov	r3, r2
 8009b08:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009b0a:	88bb      	ldrh	r3, [r7, #4]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	085b      	lsrs	r3, r3, #1
 8009b10:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009b1a:	88fb      	ldrh	r3, [r7, #6]
 8009b1c:	005a      	lsls	r2, r3, #1
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	4413      	add	r3, r2
 8009b22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b26:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8009b2c:	e01e      	b.n	8009b6c <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	3301      	adds	r3, #1
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	021b      	lsls	r3, r3, #8
 8009b3c:	b21a      	sxth	r2, r3
 8009b3e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	b21b      	sxth	r3, r3
 8009b46:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009b48:	6a3b      	ldr	r3, [r7, #32]
 8009b4a:	8a7a      	ldrh	r2, [r7, #18]
 8009b4c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009b4e:	6a3b      	ldr	r3, [r7, #32]
 8009b50:	3302      	adds	r3, #2
 8009b52:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	3302      	adds	r3, #2
 8009b58:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	3301      	adds	r3, #1
 8009b64:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b68:	3b01      	subs	r3, #1
 8009b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d1dd      	bne.n	8009b2e <USB_WritePMA+0x3a>
  }
}
 8009b72:	bf00      	nop
 8009b74:	bf00      	nop
 8009b76:	372c      	adds	r7, #44	; 0x2c
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b08b      	sub	sp, #44	; 0x2c
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	4611      	mov	r1, r2
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	460b      	mov	r3, r1
 8009b90:	80fb      	strh	r3, [r7, #6]
 8009b92:	4613      	mov	r3, r2
 8009b94:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009b96:	88bb      	ldrh	r3, [r7, #4]
 8009b98:	085b      	lsrs	r3, r3, #1
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009ba6:	88fb      	ldrh	r3, [r7, #6]
 8009ba8:	005a      	lsls	r2, r3, #1
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	4413      	add	r3, r2
 8009bae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bb2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009bb4:	69bb      	ldr	r3, [r7, #24]
 8009bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8009bb8:	e01b      	b.n	8009bf2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009bba:	6a3b      	ldr	r3, [r7, #32]
 8009bbc:	881b      	ldrh	r3, [r3, #0]
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009bc2:	6a3b      	ldr	r3, [r7, #32]
 8009bc4:	3302      	adds	r3, #2
 8009bc6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	b2da      	uxtb	r2, r3
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	0a1b      	lsrs	r3, r3, #8
 8009bda:	b2da      	uxtb	r2, r3
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	3301      	adds	r3, #1
 8009be4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009be6:	6a3b      	ldr	r3, [r7, #32]
 8009be8:	3302      	adds	r3, #2
 8009bea:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8009bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8009bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d1e0      	bne.n	8009bba <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009bf8:	88bb      	ldrh	r3, [r7, #4]
 8009bfa:	f003 0301 	and.w	r3, r3, #1
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d007      	beq.n	8009c14 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8009c04:	6a3b      	ldr	r3, [r7, #32]
 8009c06:	881b      	ldrh	r3, [r3, #0]
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	b2da      	uxtb	r2, r3
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	701a      	strb	r2, [r3, #0]
  }
}
 8009c14:	bf00      	nop
 8009c16:	372c      	adds	r7, #44	; 0x2c
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	460b      	mov	r3, r1
 8009c2a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	7c1b      	ldrb	r3, [r3, #16]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d115      	bne.n	8009c64 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009c38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c3c:	2202      	movs	r2, #2
 8009c3e:	2181      	movs	r1, #129	; 0x81
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f001 feb8 	bl	800b9b6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009c4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c50:	2202      	movs	r2, #2
 8009c52:	2101      	movs	r1, #1
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f001 feae 	bl	800b9b6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009c62:	e012      	b.n	8009c8a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009c64:	2340      	movs	r3, #64	; 0x40
 8009c66:	2202      	movs	r2, #2
 8009c68:	2181      	movs	r1, #129	; 0x81
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f001 fea3 	bl	800b9b6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009c76:	2340      	movs	r3, #64	; 0x40
 8009c78:	2202      	movs	r2, #2
 8009c7a:	2101      	movs	r1, #1
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f001 fe9a 	bl	800b9b6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2201      	movs	r2, #1
 8009c86:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009c8a:	2308      	movs	r3, #8
 8009c8c:	2203      	movs	r2, #3
 8009c8e:	2182      	movs	r1, #130	; 0x82
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f001 fe90 	bl	800b9b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009c9c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009ca0:	f001 ffb2 	bl	800bc08 <USBD_static_malloc>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d102      	bne.n	8009cbc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	73fb      	strb	r3, [r7, #15]
 8009cba:	e026      	b.n	8009d0a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cc2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	7c1b      	ldrb	r3, [r3, #16]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d109      	bne.n	8009cfa <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009cec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cf0:	2101      	movs	r1, #1
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f001 ff51 	bl	800bb9a <USBD_LL_PrepareReceive>
 8009cf8:	e007      	b.n	8009d0a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d00:	2340      	movs	r3, #64	; 0x40
 8009d02:	2101      	movs	r1, #1
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f001 ff48 	bl	800bb9a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009d20:	2300      	movs	r3, #0
 8009d22:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009d24:	2181      	movs	r1, #129	; 0x81
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f001 fe6b 	bl	800ba02 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009d32:	2101      	movs	r1, #1
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f001 fe64 	bl	800ba02 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009d42:	2182      	movs	r1, #130	; 0x82
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f001 fe5c 	bl	800ba02 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00e      	beq.n	8009d78 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f001 ff5a 	bl	800bc24 <USBD_static_free>
    pdev->pClassData = NULL;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3710      	adds	r7, #16
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b086      	sub	sp, #24
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
 8009d8a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d92:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009d94:	2300      	movs	r3, #0
 8009d96:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d039      	beq.n	8009e20 <USBD_CDC_Setup+0x9e>
 8009dac:	2b20      	cmp	r3, #32
 8009dae:	d17f      	bne.n	8009eb0 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	88db      	ldrh	r3, [r3, #6]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d029      	beq.n	8009e0c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	b25b      	sxtb	r3, r3
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	da11      	bge.n	8009de6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	683a      	ldr	r2, [r7, #0]
 8009dcc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009dce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009dd0:	683a      	ldr	r2, [r7, #0]
 8009dd2:	88d2      	ldrh	r2, [r2, #6]
 8009dd4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009dd6:	6939      	ldr	r1, [r7, #16]
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	88db      	ldrh	r3, [r3, #6]
 8009ddc:	461a      	mov	r2, r3
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f001 fa13 	bl	800b20a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009de4:	e06b      	b.n	8009ebe <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	785a      	ldrb	r2, [r3, #1]
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	88db      	ldrh	r3, [r3, #6]
 8009df4:	b2da      	uxtb	r2, r3
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009dfc:	6939      	ldr	r1, [r7, #16]
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	88db      	ldrh	r3, [r3, #6]
 8009e02:	461a      	mov	r2, r3
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f001 fa2e 	bl	800b266 <USBD_CtlPrepareRx>
      break;
 8009e0a:	e058      	b.n	8009ebe <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	683a      	ldr	r2, [r7, #0]
 8009e16:	7850      	ldrb	r0, [r2, #1]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	6839      	ldr	r1, [r7, #0]
 8009e1c:	4798      	blx	r3
      break;
 8009e1e:	e04e      	b.n	8009ebe <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	785b      	ldrb	r3, [r3, #1]
 8009e24:	2b0b      	cmp	r3, #11
 8009e26:	d02e      	beq.n	8009e86 <USBD_CDC_Setup+0x104>
 8009e28:	2b0b      	cmp	r3, #11
 8009e2a:	dc38      	bgt.n	8009e9e <USBD_CDC_Setup+0x11c>
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d002      	beq.n	8009e36 <USBD_CDC_Setup+0xb4>
 8009e30:	2b0a      	cmp	r3, #10
 8009e32:	d014      	beq.n	8009e5e <USBD_CDC_Setup+0xdc>
 8009e34:	e033      	b.n	8009e9e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e3c:	2b03      	cmp	r3, #3
 8009e3e:	d107      	bne.n	8009e50 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009e40:	f107 030c 	add.w	r3, r7, #12
 8009e44:	2202      	movs	r2, #2
 8009e46:	4619      	mov	r1, r3
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f001 f9de 	bl	800b20a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e4e:	e02e      	b.n	8009eae <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009e50:	6839      	ldr	r1, [r7, #0]
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f001 f96e 	bl	800b134 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e58:	2302      	movs	r3, #2
 8009e5a:	75fb      	strb	r3, [r7, #23]
          break;
 8009e5c:	e027      	b.n	8009eae <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e64:	2b03      	cmp	r3, #3
 8009e66:	d107      	bne.n	8009e78 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009e68:	f107 030f 	add.w	r3, r7, #15
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	4619      	mov	r1, r3
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f001 f9ca 	bl	800b20a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e76:	e01a      	b.n	8009eae <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009e78:	6839      	ldr	r1, [r7, #0]
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f001 f95a 	bl	800b134 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e80:	2302      	movs	r3, #2
 8009e82:	75fb      	strb	r3, [r7, #23]
          break;
 8009e84:	e013      	b.n	8009eae <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e8c:	2b03      	cmp	r3, #3
 8009e8e:	d00d      	beq.n	8009eac <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009e90:	6839      	ldr	r1, [r7, #0]
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f001 f94e 	bl	800b134 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e98:	2302      	movs	r3, #2
 8009e9a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009e9c:	e006      	b.n	8009eac <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009e9e:	6839      	ldr	r1, [r7, #0]
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f001 f947 	bl	800b134 <USBD_CtlError>
          ret = USBD_FAIL;
 8009ea6:	2302      	movs	r3, #2
 8009ea8:	75fb      	strb	r3, [r7, #23]
          break;
 8009eaa:	e000      	b.n	8009eae <USBD_CDC_Setup+0x12c>
          break;
 8009eac:	bf00      	nop
      }
      break;
 8009eae:	e006      	b.n	8009ebe <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009eb0:	6839      	ldr	r1, [r7, #0]
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f001 f93e 	bl	800b134 <USBD_CtlError>
      ret = USBD_FAIL;
 8009eb8:	2302      	movs	r3, #2
 8009eba:	75fb      	strb	r3, [r7, #23]
      break;
 8009ebc:	bf00      	nop
  }

  return ret;
 8009ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3718      	adds	r7, #24
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eda:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ee2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d03a      	beq.n	8009f64 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009eee:	78fa      	ldrb	r2, [r7, #3]
 8009ef0:	6879      	ldr	r1, [r7, #4]
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	4413      	add	r3, r2
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	440b      	add	r3, r1
 8009efc:	331c      	adds	r3, #28
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d029      	beq.n	8009f58 <USBD_CDC_DataIn+0x90>
 8009f04:	78fa      	ldrb	r2, [r7, #3]
 8009f06:	6879      	ldr	r1, [r7, #4]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	4413      	add	r3, r2
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	440b      	add	r3, r1
 8009f12:	331c      	adds	r3, #28
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	78f9      	ldrb	r1, [r7, #3]
 8009f18:	68b8      	ldr	r0, [r7, #8]
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	440b      	add	r3, r1
 8009f20:	00db      	lsls	r3, r3, #3
 8009f22:	4403      	add	r3, r0
 8009f24:	3338      	adds	r3, #56	; 0x38
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	fbb2 f1f3 	udiv	r1, r2, r3
 8009f2c:	fb01 f303 	mul.w	r3, r1, r3
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d110      	bne.n	8009f58 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009f36:	78fa      	ldrb	r2, [r7, #3]
 8009f38:	6879      	ldr	r1, [r7, #4]
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4413      	add	r3, r2
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	440b      	add	r3, r1
 8009f44:	331c      	adds	r3, #28
 8009f46:	2200      	movs	r2, #0
 8009f48:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009f4a:	78f9      	ldrb	r1, [r7, #3]
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	2200      	movs	r2, #0
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f001 fdff 	bl	800bb54 <USBD_LL_Transmit>
 8009f56:	e003      	b.n	8009f60 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009f60:	2300      	movs	r3, #0
 8009f62:	e000      	b.n	8009f66 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009f64:	2302      	movs	r3, #2
  }
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f6e:	b580      	push	{r7, lr}
 8009f70:	b084      	sub	sp, #16
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
 8009f76:	460b      	mov	r3, r1
 8009f78:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f80:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009f82:	78fb      	ldrb	r3, [r7, #3]
 8009f84:	4619      	mov	r1, r3
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f001 fe2a 	bl	800bbe0 <USBD_LL_GetRxDataSize>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00d      	beq.n	8009fba <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	68fa      	ldr	r2, [r7, #12]
 8009fa8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009fb2:	4611      	mov	r1, r2
 8009fb4:	4798      	blx	r3

    return USBD_OK;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	e000      	b.n	8009fbc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009fba:	2302      	movs	r3, #2
  }
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fd2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d015      	beq.n	800a00a <USBD_CDC_EP0_RxReady+0x46>
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009fe4:	2bff      	cmp	r3, #255	; 0xff
 8009fe6:	d010      	beq.n	800a00a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	68fa      	ldr	r2, [r7, #12]
 8009ff2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009ff6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009ffe:	b292      	uxth	r2, r2
 800a000:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	22ff      	movs	r2, #255	; 0xff
 800a006:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3710      	adds	r7, #16
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2243      	movs	r2, #67	; 0x43
 800a020:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a022:	4b03      	ldr	r3, [pc, #12]	; (800a030 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a024:	4618      	mov	r0, r3
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr
 800a030:	20000098 	.word	0x20000098

0800a034 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2243      	movs	r2, #67	; 0x43
 800a040:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a042:	4b03      	ldr	r3, [pc, #12]	; (800a050 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a044:	4618      	mov	r0, r3
 800a046:	370c      	adds	r7, #12
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr
 800a050:	20000054 	.word	0x20000054

0800a054 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2243      	movs	r2, #67	; 0x43
 800a060:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a062:	4b03      	ldr	r3, [pc, #12]	; (800a070 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a064:	4618      	mov	r0, r3
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr
 800a070:	200000dc 	.word	0x200000dc

0800a074 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	220a      	movs	r2, #10
 800a080:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a082:	4b03      	ldr	r3, [pc, #12]	; (800a090 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a084:	4618      	mov	r0, r3
 800a086:	370c      	adds	r7, #12
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr
 800a090:	20000010 	.word	0x20000010

0800a094 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a094:	b480      	push	{r7}
 800a096:	b085      	sub	sp, #20
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a09e:	2302      	movs	r3, #2
 800a0a0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d005      	beq.n	800a0b4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	683a      	ldr	r2, [r7, #0]
 800a0ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3714      	adds	r7, #20
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr

0800a0c2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a0c2:	b480      	push	{r7}
 800a0c4:	b087      	sub	sp, #28
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	60f8      	str	r0, [r7, #12]
 800a0ca:	60b9      	str	r1, [r7, #8]
 800a0cc:	4613      	mov	r3, r2
 800a0ce:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0d6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	68ba      	ldr	r2, [r7, #8]
 800a0dc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a0e0:	88fa      	ldrh	r2, [r7, #6]
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a0e8:	2300      	movs	r3, #0
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	371c      	adds	r7, #28
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr

0800a0f6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a0f6:	b480      	push	{r7}
 800a0f8:	b085      	sub	sp, #20
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
 800a0fe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a106:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	683a      	ldr	r2, [r7, #0]
 800a10c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	3714      	adds	r7, #20
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr

0800a11e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b084      	sub	sp, #16
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a12c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a134:	2b00      	cmp	r3, #0
 800a136:	d01c      	beq.n	800a172 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d115      	bne.n	800a16e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2201      	movs	r2, #1
 800a146:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a160:	b29b      	uxth	r3, r3
 800a162:	2181      	movs	r1, #129	; 0x81
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f001 fcf5 	bl	800bb54 <USBD_LL_Transmit>

      return USBD_OK;
 800a16a:	2300      	movs	r3, #0
 800a16c:	e002      	b.n	800a174 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a16e:	2301      	movs	r3, #1
 800a170:	e000      	b.n	800a174 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a172:	2302      	movs	r3, #2
  }
}
 800a174:	4618      	mov	r0, r3
 800a176:	3710      	adds	r7, #16
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a18a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a192:	2b00      	cmp	r3, #0
 800a194:	d017      	beq.n	800a1c6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	7c1b      	ldrb	r3, [r3, #16]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d109      	bne.n	800a1b2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1a8:	2101      	movs	r1, #1
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f001 fcf5 	bl	800bb9a <USBD_LL_PrepareReceive>
 800a1b0:	e007      	b.n	800a1c2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1b8:	2340      	movs	r3, #64	; 0x40
 800a1ba:	2101      	movs	r1, #1
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f001 fcec 	bl	800bb9a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	e000      	b.n	800a1c8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a1c6:	2302      	movs	r3, #2
  }
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d101      	bne.n	800a1e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a1e4:	2302      	movs	r3, #2
 800a1e6:	e01a      	b.n	800a21e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d003      	beq.n	800a1fa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d003      	beq.n	800a208 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	68ba      	ldr	r2, [r7, #8]
 800a204:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2201      	movs	r2, #1
 800a20c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	79fa      	ldrb	r2, [r7, #7]
 800a214:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a216:	68f8      	ldr	r0, [r7, #12]
 800a218:	f001 fb58 	bl	800b8cc <USBD_LL_Init>

  return USBD_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a226:	b480      	push	{r7}
 800a228:	b085      	sub	sp, #20
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a230:	2300      	movs	r3, #0
 800a232:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d006      	beq.n	800a248 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	683a      	ldr	r2, [r7, #0]
 800a23e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a242:	2300      	movs	r3, #0
 800a244:	73fb      	strb	r3, [r7, #15]
 800a246:	e001      	b.n	800a24c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a248:	2302      	movs	r3, #2
 800a24a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a24c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3714      	adds	r7, #20
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b082      	sub	sp, #8
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f001 fb8c 	bl	800b980 <USBD_LL_Start>

  return USBD_OK;
 800a268:	2300      	movs	r3, #0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3708      	adds	r7, #8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}

0800a272 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a272:	b480      	push	{r7}
 800a274:	b083      	sub	sp, #12
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a27a:	2300      	movs	r3, #0
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	370c      	adds	r7, #12
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	460b      	mov	r3, r1
 800a292:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a294:	2302      	movs	r3, #2
 800a296:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00c      	beq.n	800a2bc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	78fa      	ldrb	r2, [r7, #3]
 800a2ac:	4611      	mov	r1, r2
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	4798      	blx	r3
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d101      	bne.n	800a2bc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a2bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b082      	sub	sp, #8
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	78fa      	ldrb	r2, [r7, #3]
 800a2dc:	4611      	mov	r1, r2
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	4798      	blx	r3

  return USBD_OK;
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3708      	adds	r7, #8
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a2fc:	6839      	ldr	r1, [r7, #0]
 800a2fe:	4618      	mov	r0, r3
 800a300:	f000 fedb 	bl	800b0ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a312:	461a      	mov	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a320:	f003 031f 	and.w	r3, r3, #31
 800a324:	2b02      	cmp	r3, #2
 800a326:	d016      	beq.n	800a356 <USBD_LL_SetupStage+0x6a>
 800a328:	2b02      	cmp	r3, #2
 800a32a:	d81c      	bhi.n	800a366 <USBD_LL_SetupStage+0x7a>
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d002      	beq.n	800a336 <USBD_LL_SetupStage+0x4a>
 800a330:	2b01      	cmp	r3, #1
 800a332:	d008      	beq.n	800a346 <USBD_LL_SetupStage+0x5a>
 800a334:	e017      	b.n	800a366 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a33c:	4619      	mov	r1, r3
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 f9ce 	bl	800a6e0 <USBD_StdDevReq>
      break;
 800a344:	e01a      	b.n	800a37c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a34c:	4619      	mov	r1, r3
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 fa30 	bl	800a7b4 <USBD_StdItfReq>
      break;
 800a354:	e012      	b.n	800a37c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a35c:	4619      	mov	r1, r3
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 fa70 	bl	800a844 <USBD_StdEPReq>
      break;
 800a364:	e00a      	b.n	800a37c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a36c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a370:	b2db      	uxtb	r3, r3
 800a372:	4619      	mov	r1, r3
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f001 fb63 	bl	800ba40 <USBD_LL_StallEP>
      break;
 800a37a:	bf00      	nop
  }

  return USBD_OK;
 800a37c:	2300      	movs	r3, #0
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3708      	adds	r7, #8
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b086      	sub	sp, #24
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	60f8      	str	r0, [r7, #12]
 800a38e:	460b      	mov	r3, r1
 800a390:	607a      	str	r2, [r7, #4]
 800a392:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a394:	7afb      	ldrb	r3, [r7, #11]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d14b      	bne.n	800a432 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a3a0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a3a8:	2b03      	cmp	r3, #3
 800a3aa:	d134      	bne.n	800a416 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	68da      	ldr	r2, [r3, #12]
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	691b      	ldr	r3, [r3, #16]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d919      	bls.n	800a3ec <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	68da      	ldr	r2, [r3, #12]
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	691b      	ldr	r3, [r3, #16]
 800a3c0:	1ad2      	subs	r2, r2, r3
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	68da      	ldr	r2, [r3, #12]
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d203      	bcs.n	800a3da <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	e002      	b.n	800a3e0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	6879      	ldr	r1, [r7, #4]
 800a3e4:	68f8      	ldr	r0, [r7, #12]
 800a3e6:	f000 ff5c 	bl	800b2a2 <USBD_CtlContinueRx>
 800a3ea:	e038      	b.n	800a45e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3f2:	691b      	ldr	r3, [r3, #16]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d00a      	beq.n	800a40e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a3fe:	2b03      	cmp	r3, #3
 800a400:	d105      	bne.n	800a40e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a408:	691b      	ldr	r3, [r3, #16]
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f000 ff59 	bl	800b2c6 <USBD_CtlSendStatus>
 800a414:	e023      	b.n	800a45e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a41c:	2b05      	cmp	r3, #5
 800a41e:	d11e      	bne.n	800a45e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2200      	movs	r2, #0
 800a424:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a428:	2100      	movs	r1, #0
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f001 fb08 	bl	800ba40 <USBD_LL_StallEP>
 800a430:	e015      	b.n	800a45e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a438:	699b      	ldr	r3, [r3, #24]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00d      	beq.n	800a45a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a444:	2b03      	cmp	r3, #3
 800a446:	d108      	bne.n	800a45a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a44e:	699b      	ldr	r3, [r3, #24]
 800a450:	7afa      	ldrb	r2, [r7, #11]
 800a452:	4611      	mov	r1, r2
 800a454:	68f8      	ldr	r0, [r7, #12]
 800a456:	4798      	blx	r3
 800a458:	e001      	b.n	800a45e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a45a:	2302      	movs	r3, #2
 800a45c:	e000      	b.n	800a460 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	3718      	adds	r7, #24
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b086      	sub	sp, #24
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	460b      	mov	r3, r1
 800a472:	607a      	str	r2, [r7, #4]
 800a474:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a476:	7afb      	ldrb	r3, [r7, #11]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d17f      	bne.n	800a57c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	3314      	adds	r3, #20
 800a480:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a488:	2b02      	cmp	r3, #2
 800a48a:	d15c      	bne.n	800a546 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	68da      	ldr	r2, [r3, #12]
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	429a      	cmp	r2, r3
 800a496:	d915      	bls.n	800a4c4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	68da      	ldr	r2, [r3, #12]
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	691b      	ldr	r3, [r3, #16]
 800a4a0:	1ad2      	subs	r2, r2, r3
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	68db      	ldr	r3, [r3, #12]
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	6879      	ldr	r1, [r7, #4]
 800a4b0:	68f8      	ldr	r0, [r7, #12]
 800a4b2:	f000 fec6 	bl	800b242 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f001 fb6c 	bl	800bb9a <USBD_LL_PrepareReceive>
 800a4c2:	e04e      	b.n	800a562 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	697a      	ldr	r2, [r7, #20]
 800a4ca:	6912      	ldr	r2, [r2, #16]
 800a4cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4d0:	fb01 f202 	mul.w	r2, r1, r2
 800a4d4:	1a9b      	subs	r3, r3, r2
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d11c      	bne.n	800a514 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	689a      	ldr	r2, [r3, #8]
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d316      	bcc.n	800a514 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	689a      	ldr	r2, [r3, #8]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d20f      	bcs.n	800a514 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	2100      	movs	r1, #0
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	f000 fea2 	bl	800b242 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2200      	movs	r2, #0
 800a502:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a506:	2300      	movs	r3, #0
 800a508:	2200      	movs	r2, #0
 800a50a:	2100      	movs	r1, #0
 800a50c:	68f8      	ldr	r0, [r7, #12]
 800a50e:	f001 fb44 	bl	800bb9a <USBD_LL_PrepareReceive>
 800a512:	e026      	b.n	800a562 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00a      	beq.n	800a536 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a526:	2b03      	cmp	r3, #3
 800a528:	d105      	bne.n	800a536 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	68f8      	ldr	r0, [r7, #12]
 800a534:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a536:	2180      	movs	r1, #128	; 0x80
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f001 fa81 	bl	800ba40 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a53e:	68f8      	ldr	r0, [r7, #12]
 800a540:	f000 fed4 	bl	800b2ec <USBD_CtlReceiveStatus>
 800a544:	e00d      	b.n	800a562 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a54c:	2b04      	cmp	r3, #4
 800a54e:	d004      	beq.n	800a55a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a556:	2b00      	cmp	r3, #0
 800a558:	d103      	bne.n	800a562 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a55a:	2180      	movs	r1, #128	; 0x80
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	f001 fa6f 	bl	800ba40 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d11d      	bne.n	800a5a8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f7ff fe80 	bl	800a272 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2200      	movs	r2, #0
 800a576:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a57a:	e015      	b.n	800a5a8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a582:	695b      	ldr	r3, [r3, #20]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d00d      	beq.n	800a5a4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a58e:	2b03      	cmp	r3, #3
 800a590:	d108      	bne.n	800a5a4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a598:	695b      	ldr	r3, [r3, #20]
 800a59a:	7afa      	ldrb	r2, [r7, #11]
 800a59c:	4611      	mov	r1, r2
 800a59e:	68f8      	ldr	r0, [r7, #12]
 800a5a0:	4798      	blx	r3
 800a5a2:	e001      	b.n	800a5a8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a5a4:	2302      	movs	r3, #2
 800a5a6:	e000      	b.n	800a5aa <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3718      	adds	r7, #24
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b082      	sub	sp, #8
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a5ba:	2340      	movs	r3, #64	; 0x40
 800a5bc:	2200      	movs	r2, #0
 800a5be:	2100      	movs	r1, #0
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f001 f9f8 	bl	800b9b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2240      	movs	r2, #64	; 0x40
 800a5d2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a5d6:	2340      	movs	r3, #64	; 0x40
 800a5d8:	2200      	movs	r2, #0
 800a5da:	2180      	movs	r1, #128	; 0x80
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f001 f9ea 	bl	800b9b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2240      	movs	r2, #64	; 0x40
 800a5ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a612:	2b00      	cmp	r3, #0
 800a614:	d009      	beq.n	800a62a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	6852      	ldr	r2, [r2, #4]
 800a622:	b2d2      	uxtb	r2, r2
 800a624:	4611      	mov	r1, r2
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	4798      	blx	r3
  }

  return USBD_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3708      	adds	r7, #8
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	460b      	mov	r3, r1
 800a63e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	78fa      	ldrb	r2, [r7, #3]
 800a644:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a646:	2300      	movs	r3, #0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2204      	movs	r2, #4
 800a66c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a670:	2300      	movs	r3, #0
}
 800a672:	4618      	mov	r0, r3
 800a674:	370c      	adds	r7, #12
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr

0800a67e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a67e:	b480      	push	{r7}
 800a680:	b083      	sub	sp, #12
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a68c:	2b04      	cmp	r3, #4
 800a68e:	d105      	bne.n	800a69c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	370c      	adds	r7, #12
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr

0800a6aa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b082      	sub	sp, #8
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6b8:	2b03      	cmp	r3, #3
 800a6ba:	d10b      	bne.n	800a6d4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6c2:	69db      	ldr	r3, [r3, #28]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d005      	beq.n	800a6d4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6ce:	69db      	ldr	r3, [r3, #28]
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3708      	adds	r7, #8
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
	...

0800a6e0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6f6:	2b40      	cmp	r3, #64	; 0x40
 800a6f8:	d005      	beq.n	800a706 <USBD_StdDevReq+0x26>
 800a6fa:	2b40      	cmp	r3, #64	; 0x40
 800a6fc:	d84f      	bhi.n	800a79e <USBD_StdDevReq+0xbe>
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d009      	beq.n	800a716 <USBD_StdDevReq+0x36>
 800a702:	2b20      	cmp	r3, #32
 800a704:	d14b      	bne.n	800a79e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	6839      	ldr	r1, [r7, #0]
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	4798      	blx	r3
      break;
 800a714:	e048      	b.n	800a7a8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	785b      	ldrb	r3, [r3, #1]
 800a71a:	2b09      	cmp	r3, #9
 800a71c:	d839      	bhi.n	800a792 <USBD_StdDevReq+0xb2>
 800a71e:	a201      	add	r2, pc, #4	; (adr r2, 800a724 <USBD_StdDevReq+0x44>)
 800a720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a724:	0800a775 	.word	0x0800a775
 800a728:	0800a789 	.word	0x0800a789
 800a72c:	0800a793 	.word	0x0800a793
 800a730:	0800a77f 	.word	0x0800a77f
 800a734:	0800a793 	.word	0x0800a793
 800a738:	0800a757 	.word	0x0800a757
 800a73c:	0800a74d 	.word	0x0800a74d
 800a740:	0800a793 	.word	0x0800a793
 800a744:	0800a76b 	.word	0x0800a76b
 800a748:	0800a761 	.word	0x0800a761
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a74c:	6839      	ldr	r1, [r7, #0]
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 f9dc 	bl	800ab0c <USBD_GetDescriptor>
          break;
 800a754:	e022      	b.n	800a79c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a756:	6839      	ldr	r1, [r7, #0]
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f000 fb3f 	bl	800addc <USBD_SetAddress>
          break;
 800a75e:	e01d      	b.n	800a79c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a760:	6839      	ldr	r1, [r7, #0]
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 fb7e 	bl	800ae64 <USBD_SetConfig>
          break;
 800a768:	e018      	b.n	800a79c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a76a:	6839      	ldr	r1, [r7, #0]
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 fc07 	bl	800af80 <USBD_GetConfig>
          break;
 800a772:	e013      	b.n	800a79c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a774:	6839      	ldr	r1, [r7, #0]
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 fc37 	bl	800afea <USBD_GetStatus>
          break;
 800a77c:	e00e      	b.n	800a79c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a77e:	6839      	ldr	r1, [r7, #0]
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f000 fc65 	bl	800b050 <USBD_SetFeature>
          break;
 800a786:	e009      	b.n	800a79c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a788:	6839      	ldr	r1, [r7, #0]
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 fc74 	bl	800b078 <USBD_ClrFeature>
          break;
 800a790:	e004      	b.n	800a79c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a792:	6839      	ldr	r1, [r7, #0]
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 fccd 	bl	800b134 <USBD_CtlError>
          break;
 800a79a:	bf00      	nop
      }
      break;
 800a79c:	e004      	b.n	800a7a8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a79e:	6839      	ldr	r1, [r7, #0]
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f000 fcc7 	bl	800b134 <USBD_CtlError>
      break;
 800a7a6:	bf00      	nop
  }

  return ret;
 800a7a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop

0800a7b4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7ca:	2b40      	cmp	r3, #64	; 0x40
 800a7cc:	d005      	beq.n	800a7da <USBD_StdItfReq+0x26>
 800a7ce:	2b40      	cmp	r3, #64	; 0x40
 800a7d0:	d82e      	bhi.n	800a830 <USBD_StdItfReq+0x7c>
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d001      	beq.n	800a7da <USBD_StdItfReq+0x26>
 800a7d6:	2b20      	cmp	r3, #32
 800a7d8:	d12a      	bne.n	800a830 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	2b02      	cmp	r3, #2
 800a7e4:	d81d      	bhi.n	800a822 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	889b      	ldrh	r3, [r3, #4]
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d813      	bhi.n	800a818 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	6839      	ldr	r1, [r7, #0]
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	4798      	blx	r3
 800a7fe:	4603      	mov	r3, r0
 800a800:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	88db      	ldrh	r3, [r3, #6]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d110      	bne.n	800a82c <USBD_StdItfReq+0x78>
 800a80a:	7bfb      	ldrb	r3, [r7, #15]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d10d      	bne.n	800a82c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f000 fd58 	bl	800b2c6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a816:	e009      	b.n	800a82c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a818:	6839      	ldr	r1, [r7, #0]
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 fc8a 	bl	800b134 <USBD_CtlError>
          break;
 800a820:	e004      	b.n	800a82c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a822:	6839      	ldr	r1, [r7, #0]
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 fc85 	bl	800b134 <USBD_CtlError>
          break;
 800a82a:	e000      	b.n	800a82e <USBD_StdItfReq+0x7a>
          break;
 800a82c:	bf00      	nop
      }
      break;
 800a82e:	e004      	b.n	800a83a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a830:	6839      	ldr	r1, [r7, #0]
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 fc7e 	bl	800b134 <USBD_CtlError>
      break;
 800a838:	bf00      	nop
  }

  return USBD_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3710      	adds	r7, #16
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a84e:	2300      	movs	r3, #0
 800a850:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	889b      	ldrh	r3, [r3, #4]
 800a856:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a860:	2b40      	cmp	r3, #64	; 0x40
 800a862:	d007      	beq.n	800a874 <USBD_StdEPReq+0x30>
 800a864:	2b40      	cmp	r3, #64	; 0x40
 800a866:	f200 8146 	bhi.w	800aaf6 <USBD_StdEPReq+0x2b2>
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d00a      	beq.n	800a884 <USBD_StdEPReq+0x40>
 800a86e:	2b20      	cmp	r3, #32
 800a870:	f040 8141 	bne.w	800aaf6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	6839      	ldr	r1, [r7, #0]
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	4798      	blx	r3
      break;
 800a882:	e13d      	b.n	800ab00 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a88c:	2b20      	cmp	r3, #32
 800a88e:	d10a      	bne.n	800a8a6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a896:	689b      	ldr	r3, [r3, #8]
 800a898:	6839      	ldr	r1, [r7, #0]
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	4798      	blx	r3
 800a89e:	4603      	mov	r3, r0
 800a8a0:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a8a2:	7bfb      	ldrb	r3, [r7, #15]
 800a8a4:	e12d      	b.n	800ab02 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	785b      	ldrb	r3, [r3, #1]
 800a8aa:	2b03      	cmp	r3, #3
 800a8ac:	d007      	beq.n	800a8be <USBD_StdEPReq+0x7a>
 800a8ae:	2b03      	cmp	r3, #3
 800a8b0:	f300 811b 	bgt.w	800aaea <USBD_StdEPReq+0x2a6>
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d072      	beq.n	800a99e <USBD_StdEPReq+0x15a>
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d03a      	beq.n	800a932 <USBD_StdEPReq+0xee>
 800a8bc:	e115      	b.n	800aaea <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8c4:	2b02      	cmp	r3, #2
 800a8c6:	d002      	beq.n	800a8ce <USBD_StdEPReq+0x8a>
 800a8c8:	2b03      	cmp	r3, #3
 800a8ca:	d015      	beq.n	800a8f8 <USBD_StdEPReq+0xb4>
 800a8cc:	e02b      	b.n	800a926 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8ce:	7bbb      	ldrb	r3, [r7, #14]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d00c      	beq.n	800a8ee <USBD_StdEPReq+0xaa>
 800a8d4:	7bbb      	ldrb	r3, [r7, #14]
 800a8d6:	2b80      	cmp	r3, #128	; 0x80
 800a8d8:	d009      	beq.n	800a8ee <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a8da:	7bbb      	ldrb	r3, [r7, #14]
 800a8dc:	4619      	mov	r1, r3
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f001 f8ae 	bl	800ba40 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a8e4:	2180      	movs	r1, #128	; 0x80
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f001 f8aa 	bl	800ba40 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a8ec:	e020      	b.n	800a930 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a8ee:	6839      	ldr	r1, [r7, #0]
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f000 fc1f 	bl	800b134 <USBD_CtlError>
              break;
 800a8f6:	e01b      	b.n	800a930 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	885b      	ldrh	r3, [r3, #2]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d10e      	bne.n	800a91e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a900:	7bbb      	ldrb	r3, [r7, #14]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00b      	beq.n	800a91e <USBD_StdEPReq+0xda>
 800a906:	7bbb      	ldrb	r3, [r7, #14]
 800a908:	2b80      	cmp	r3, #128	; 0x80
 800a90a:	d008      	beq.n	800a91e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	88db      	ldrh	r3, [r3, #6]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d104      	bne.n	800a91e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a914:	7bbb      	ldrb	r3, [r7, #14]
 800a916:	4619      	mov	r1, r3
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f001 f891 	bl	800ba40 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 fcd1 	bl	800b2c6 <USBD_CtlSendStatus>

              break;
 800a924:	e004      	b.n	800a930 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a926:	6839      	ldr	r1, [r7, #0]
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 fc03 	bl	800b134 <USBD_CtlError>
              break;
 800a92e:	bf00      	nop
          }
          break;
 800a930:	e0e0      	b.n	800aaf4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a938:	2b02      	cmp	r3, #2
 800a93a:	d002      	beq.n	800a942 <USBD_StdEPReq+0xfe>
 800a93c:	2b03      	cmp	r3, #3
 800a93e:	d015      	beq.n	800a96c <USBD_StdEPReq+0x128>
 800a940:	e026      	b.n	800a990 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a942:	7bbb      	ldrb	r3, [r7, #14]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00c      	beq.n	800a962 <USBD_StdEPReq+0x11e>
 800a948:	7bbb      	ldrb	r3, [r7, #14]
 800a94a:	2b80      	cmp	r3, #128	; 0x80
 800a94c:	d009      	beq.n	800a962 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a94e:	7bbb      	ldrb	r3, [r7, #14]
 800a950:	4619      	mov	r1, r3
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f001 f874 	bl	800ba40 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a958:	2180      	movs	r1, #128	; 0x80
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f001 f870 	bl	800ba40 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a960:	e01c      	b.n	800a99c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a962:	6839      	ldr	r1, [r7, #0]
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 fbe5 	bl	800b134 <USBD_CtlError>
              break;
 800a96a:	e017      	b.n	800a99c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	885b      	ldrh	r3, [r3, #2]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d112      	bne.n	800a99a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a974:	7bbb      	ldrb	r3, [r7, #14]
 800a976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d004      	beq.n	800a988 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a97e:	7bbb      	ldrb	r3, [r7, #14]
 800a980:	4619      	mov	r1, r3
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f001 f87b 	bl	800ba7e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 fc9c 	bl	800b2c6 <USBD_CtlSendStatus>
              }
              break;
 800a98e:	e004      	b.n	800a99a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a990:	6839      	ldr	r1, [r7, #0]
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 fbce 	bl	800b134 <USBD_CtlError>
              break;
 800a998:	e000      	b.n	800a99c <USBD_StdEPReq+0x158>
              break;
 800a99a:	bf00      	nop
          }
          break;
 800a99c:	e0aa      	b.n	800aaf4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9a4:	2b02      	cmp	r3, #2
 800a9a6:	d002      	beq.n	800a9ae <USBD_StdEPReq+0x16a>
 800a9a8:	2b03      	cmp	r3, #3
 800a9aa:	d032      	beq.n	800aa12 <USBD_StdEPReq+0x1ce>
 800a9ac:	e097      	b.n	800aade <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9ae:	7bbb      	ldrb	r3, [r7, #14]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d007      	beq.n	800a9c4 <USBD_StdEPReq+0x180>
 800a9b4:	7bbb      	ldrb	r3, [r7, #14]
 800a9b6:	2b80      	cmp	r3, #128	; 0x80
 800a9b8:	d004      	beq.n	800a9c4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a9ba:	6839      	ldr	r1, [r7, #0]
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 fbb9 	bl	800b134 <USBD_CtlError>
                break;
 800a9c2:	e091      	b.n	800aae8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	da0b      	bge.n	800a9e4 <USBD_StdEPReq+0x1a0>
 800a9cc:	7bbb      	ldrb	r3, [r7, #14]
 800a9ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9d2:	4613      	mov	r3, r2
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	4413      	add	r3, r2
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	3310      	adds	r3, #16
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	4413      	add	r3, r2
 800a9e0:	3304      	adds	r3, #4
 800a9e2:	e00b      	b.n	800a9fc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a9e4:	7bbb      	ldrb	r3, [r7, #14]
 800a9e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	4413      	add	r3, r2
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	3304      	adds	r3, #4
 800a9fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	2200      	movs	r2, #0
 800aa02:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	2202      	movs	r2, #2
 800aa08:	4619      	mov	r1, r3
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fbfd 	bl	800b20a <USBD_CtlSendData>
              break;
 800aa10:	e06a      	b.n	800aae8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aa12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	da11      	bge.n	800aa3e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aa1a:	7bbb      	ldrb	r3, [r7, #14]
 800aa1c:	f003 020f 	and.w	r2, r3, #15
 800aa20:	6879      	ldr	r1, [r7, #4]
 800aa22:	4613      	mov	r3, r2
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	4413      	add	r3, r2
 800aa28:	009b      	lsls	r3, r3, #2
 800aa2a:	440b      	add	r3, r1
 800aa2c:	3318      	adds	r3, #24
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d117      	bne.n	800aa64 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800aa34:	6839      	ldr	r1, [r7, #0]
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 fb7c 	bl	800b134 <USBD_CtlError>
                  break;
 800aa3c:	e054      	b.n	800aae8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aa3e:	7bbb      	ldrb	r3, [r7, #14]
 800aa40:	f003 020f 	and.w	r2, r3, #15
 800aa44:	6879      	ldr	r1, [r7, #4]
 800aa46:	4613      	mov	r3, r2
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	4413      	add	r3, r2
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	440b      	add	r3, r1
 800aa50:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d104      	bne.n	800aa64 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800aa5a:	6839      	ldr	r1, [r7, #0]
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f000 fb69 	bl	800b134 <USBD_CtlError>
                  break;
 800aa62:	e041      	b.n	800aae8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	da0b      	bge.n	800aa84 <USBD_StdEPReq+0x240>
 800aa6c:	7bbb      	ldrb	r3, [r7, #14]
 800aa6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa72:	4613      	mov	r3, r2
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	4413      	add	r3, r2
 800aa78:	009b      	lsls	r3, r3, #2
 800aa7a:	3310      	adds	r3, #16
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	4413      	add	r3, r2
 800aa80:	3304      	adds	r3, #4
 800aa82:	e00b      	b.n	800aa9c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa84:	7bbb      	ldrb	r3, [r7, #14]
 800aa86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	4413      	add	r3, r2
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	4413      	add	r3, r2
 800aa9a:	3304      	adds	r3, #4
 800aa9c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aa9e:	7bbb      	ldrb	r3, [r7, #14]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d002      	beq.n	800aaaa <USBD_StdEPReq+0x266>
 800aaa4:	7bbb      	ldrb	r3, [r7, #14]
 800aaa6:	2b80      	cmp	r3, #128	; 0x80
 800aaa8:	d103      	bne.n	800aab2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	2200      	movs	r2, #0
 800aaae:	601a      	str	r2, [r3, #0]
 800aab0:	e00e      	b.n	800aad0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800aab2:	7bbb      	ldrb	r3, [r7, #14]
 800aab4:	4619      	mov	r1, r3
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f001 f800 	bl	800babc <USBD_LL_IsStallEP>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d003      	beq.n	800aaca <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	2201      	movs	r2, #1
 800aac6:	601a      	str	r2, [r3, #0]
 800aac8:	e002      	b.n	800aad0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	2200      	movs	r2, #0
 800aace:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	2202      	movs	r2, #2
 800aad4:	4619      	mov	r1, r3
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 fb97 	bl	800b20a <USBD_CtlSendData>
              break;
 800aadc:	e004      	b.n	800aae8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800aade:	6839      	ldr	r1, [r7, #0]
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 fb27 	bl	800b134 <USBD_CtlError>
              break;
 800aae6:	bf00      	nop
          }
          break;
 800aae8:	e004      	b.n	800aaf4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800aaea:	6839      	ldr	r1, [r7, #0]
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 fb21 	bl	800b134 <USBD_CtlError>
          break;
 800aaf2:	bf00      	nop
      }
      break;
 800aaf4:	e004      	b.n	800ab00 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800aaf6:	6839      	ldr	r1, [r7, #0]
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 fb1b 	bl	800b134 <USBD_CtlError>
      break;
 800aafe:	bf00      	nop
  }

  return ret;
 800ab00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3710      	adds	r7, #16
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
	...

0800ab0c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab16:	2300      	movs	r3, #0
 800ab18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	885b      	ldrh	r3, [r3, #2]
 800ab26:	0a1b      	lsrs	r3, r3, #8
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	3b01      	subs	r3, #1
 800ab2c:	2b06      	cmp	r3, #6
 800ab2e:	f200 8128 	bhi.w	800ad82 <USBD_GetDescriptor+0x276>
 800ab32:	a201      	add	r2, pc, #4	; (adr r2, 800ab38 <USBD_GetDescriptor+0x2c>)
 800ab34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab38:	0800ab55 	.word	0x0800ab55
 800ab3c:	0800ab6d 	.word	0x0800ab6d
 800ab40:	0800abad 	.word	0x0800abad
 800ab44:	0800ad83 	.word	0x0800ad83
 800ab48:	0800ad83 	.word	0x0800ad83
 800ab4c:	0800ad23 	.word	0x0800ad23
 800ab50:	0800ad4f 	.word	0x0800ad4f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	7c12      	ldrb	r2, [r2, #16]
 800ab60:	f107 0108 	add.w	r1, r7, #8
 800ab64:	4610      	mov	r0, r2
 800ab66:	4798      	blx	r3
 800ab68:	60f8      	str	r0, [r7, #12]
      break;
 800ab6a:	e112      	b.n	800ad92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	7c1b      	ldrb	r3, [r3, #16]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d10d      	bne.n	800ab90 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab7c:	f107 0208 	add.w	r2, r7, #8
 800ab80:	4610      	mov	r0, r2
 800ab82:	4798      	blx	r3
 800ab84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	2202      	movs	r2, #2
 800ab8c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ab8e:	e100      	b.n	800ad92 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab98:	f107 0208 	add.w	r2, r7, #8
 800ab9c:	4610      	mov	r0, r2
 800ab9e:	4798      	blx	r3
 800aba0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	3301      	adds	r3, #1
 800aba6:	2202      	movs	r2, #2
 800aba8:	701a      	strb	r2, [r3, #0]
      break;
 800abaa:	e0f2      	b.n	800ad92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	885b      	ldrh	r3, [r3, #2]
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	2b05      	cmp	r3, #5
 800abb4:	f200 80ac 	bhi.w	800ad10 <USBD_GetDescriptor+0x204>
 800abb8:	a201      	add	r2, pc, #4	; (adr r2, 800abc0 <USBD_GetDescriptor+0xb4>)
 800abba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abbe:	bf00      	nop
 800abc0:	0800abd9 	.word	0x0800abd9
 800abc4:	0800ac0d 	.word	0x0800ac0d
 800abc8:	0800ac41 	.word	0x0800ac41
 800abcc:	0800ac75 	.word	0x0800ac75
 800abd0:	0800aca9 	.word	0x0800aca9
 800abd4:	0800acdd 	.word	0x0800acdd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d00b      	beq.n	800abfc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	7c12      	ldrb	r2, [r2, #16]
 800abf0:	f107 0108 	add.w	r1, r7, #8
 800abf4:	4610      	mov	r0, r2
 800abf6:	4798      	blx	r3
 800abf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abfa:	e091      	b.n	800ad20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abfc:	6839      	ldr	r1, [r7, #0]
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 fa98 	bl	800b134 <USBD_CtlError>
            err++;
 800ac04:	7afb      	ldrb	r3, [r7, #11]
 800ac06:	3301      	adds	r3, #1
 800ac08:	72fb      	strb	r3, [r7, #11]
          break;
 800ac0a:	e089      	b.n	800ad20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac12:	689b      	ldr	r3, [r3, #8]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d00b      	beq.n	800ac30 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	7c12      	ldrb	r2, [r2, #16]
 800ac24:	f107 0108 	add.w	r1, r7, #8
 800ac28:	4610      	mov	r0, r2
 800ac2a:	4798      	blx	r3
 800ac2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac2e:	e077      	b.n	800ad20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac30:	6839      	ldr	r1, [r7, #0]
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 fa7e 	bl	800b134 <USBD_CtlError>
            err++;
 800ac38:	7afb      	ldrb	r3, [r7, #11]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	72fb      	strb	r3, [r7, #11]
          break;
 800ac3e:	e06f      	b.n	800ad20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d00b      	beq.n	800ac64 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac52:	68db      	ldr	r3, [r3, #12]
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	7c12      	ldrb	r2, [r2, #16]
 800ac58:	f107 0108 	add.w	r1, r7, #8
 800ac5c:	4610      	mov	r0, r2
 800ac5e:	4798      	blx	r3
 800ac60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac62:	e05d      	b.n	800ad20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac64:	6839      	ldr	r1, [r7, #0]
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 fa64 	bl	800b134 <USBD_CtlError>
            err++;
 800ac6c:	7afb      	ldrb	r3, [r7, #11]
 800ac6e:	3301      	adds	r3, #1
 800ac70:	72fb      	strb	r3, [r7, #11]
          break;
 800ac72:	e055      	b.n	800ad20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac7a:	691b      	ldr	r3, [r3, #16]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d00b      	beq.n	800ac98 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac86:	691b      	ldr	r3, [r3, #16]
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	7c12      	ldrb	r2, [r2, #16]
 800ac8c:	f107 0108 	add.w	r1, r7, #8
 800ac90:	4610      	mov	r0, r2
 800ac92:	4798      	blx	r3
 800ac94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac96:	e043      	b.n	800ad20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac98:	6839      	ldr	r1, [r7, #0]
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 fa4a 	bl	800b134 <USBD_CtlError>
            err++;
 800aca0:	7afb      	ldrb	r3, [r7, #11]
 800aca2:	3301      	adds	r3, #1
 800aca4:	72fb      	strb	r3, [r7, #11]
          break;
 800aca6:	e03b      	b.n	800ad20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acae:	695b      	ldr	r3, [r3, #20]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d00b      	beq.n	800accc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acba:	695b      	ldr	r3, [r3, #20]
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	7c12      	ldrb	r2, [r2, #16]
 800acc0:	f107 0108 	add.w	r1, r7, #8
 800acc4:	4610      	mov	r0, r2
 800acc6:	4798      	blx	r3
 800acc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acca:	e029      	b.n	800ad20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800accc:	6839      	ldr	r1, [r7, #0]
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 fa30 	bl	800b134 <USBD_CtlError>
            err++;
 800acd4:	7afb      	ldrb	r3, [r7, #11]
 800acd6:	3301      	adds	r3, #1
 800acd8:	72fb      	strb	r3, [r7, #11]
          break;
 800acda:	e021      	b.n	800ad20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ace2:	699b      	ldr	r3, [r3, #24]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d00b      	beq.n	800ad00 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acee:	699b      	ldr	r3, [r3, #24]
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	7c12      	ldrb	r2, [r2, #16]
 800acf4:	f107 0108 	add.w	r1, r7, #8
 800acf8:	4610      	mov	r0, r2
 800acfa:	4798      	blx	r3
 800acfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acfe:	e00f      	b.n	800ad20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad00:	6839      	ldr	r1, [r7, #0]
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 fa16 	bl	800b134 <USBD_CtlError>
            err++;
 800ad08:	7afb      	ldrb	r3, [r7, #11]
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad0e:	e007      	b.n	800ad20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ad10:	6839      	ldr	r1, [r7, #0]
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 fa0e 	bl	800b134 <USBD_CtlError>
          err++;
 800ad18:	7afb      	ldrb	r3, [r7, #11]
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800ad1e:	e038      	b.n	800ad92 <USBD_GetDescriptor+0x286>
 800ad20:	e037      	b.n	800ad92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	7c1b      	ldrb	r3, [r3, #16]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d109      	bne.n	800ad3e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad32:	f107 0208 	add.w	r2, r7, #8
 800ad36:	4610      	mov	r0, r2
 800ad38:	4798      	blx	r3
 800ad3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad3c:	e029      	b.n	800ad92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ad3e:	6839      	ldr	r1, [r7, #0]
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 f9f7 	bl	800b134 <USBD_CtlError>
        err++;
 800ad46:	7afb      	ldrb	r3, [r7, #11]
 800ad48:	3301      	adds	r3, #1
 800ad4a:	72fb      	strb	r3, [r7, #11]
      break;
 800ad4c:	e021      	b.n	800ad92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	7c1b      	ldrb	r3, [r3, #16]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d10d      	bne.n	800ad72 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad5e:	f107 0208 	add.w	r2, r7, #8
 800ad62:	4610      	mov	r0, r2
 800ad64:	4798      	blx	r3
 800ad66:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	2207      	movs	r2, #7
 800ad6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad70:	e00f      	b.n	800ad92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ad72:	6839      	ldr	r1, [r7, #0]
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f000 f9dd 	bl	800b134 <USBD_CtlError>
        err++;
 800ad7a:	7afb      	ldrb	r3, [r7, #11]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	72fb      	strb	r3, [r7, #11]
      break;
 800ad80:	e007      	b.n	800ad92 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ad82:	6839      	ldr	r1, [r7, #0]
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 f9d5 	bl	800b134 <USBD_CtlError>
      err++;
 800ad8a:	7afb      	ldrb	r3, [r7, #11]
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	72fb      	strb	r3, [r7, #11]
      break;
 800ad90:	bf00      	nop
  }

  if (err != 0U)
 800ad92:	7afb      	ldrb	r3, [r7, #11]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d11c      	bne.n	800add2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ad98:	893b      	ldrh	r3, [r7, #8]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d011      	beq.n	800adc2 <USBD_GetDescriptor+0x2b6>
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	88db      	ldrh	r3, [r3, #6]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d00d      	beq.n	800adc2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	88da      	ldrh	r2, [r3, #6]
 800adaa:	893b      	ldrh	r3, [r7, #8]
 800adac:	4293      	cmp	r3, r2
 800adae:	bf28      	it	cs
 800adb0:	4613      	movcs	r3, r2
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800adb6:	893b      	ldrh	r3, [r7, #8]
 800adb8:	461a      	mov	r2, r3
 800adba:	68f9      	ldr	r1, [r7, #12]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 fa24 	bl	800b20a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	88db      	ldrh	r3, [r3, #6]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d104      	bne.n	800add4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 fa7b 	bl	800b2c6 <USBD_CtlSendStatus>
 800add0:	e000      	b.n	800add4 <USBD_GetDescriptor+0x2c8>
    return;
 800add2:	bf00      	nop
    }
  }
}
 800add4:	3710      	adds	r7, #16
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop

0800addc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	889b      	ldrh	r3, [r3, #4]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d130      	bne.n	800ae50 <USBD_SetAddress+0x74>
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	88db      	ldrh	r3, [r3, #6]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d12c      	bne.n	800ae50 <USBD_SetAddress+0x74>
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	885b      	ldrh	r3, [r3, #2]
 800adfa:	2b7f      	cmp	r3, #127	; 0x7f
 800adfc:	d828      	bhi.n	800ae50 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	885b      	ldrh	r3, [r3, #2]
 800ae02:	b2db      	uxtb	r3, r3
 800ae04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae10:	2b03      	cmp	r3, #3
 800ae12:	d104      	bne.n	800ae1e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ae14:	6839      	ldr	r1, [r7, #0]
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 f98c 	bl	800b134 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae1c:	e01d      	b.n	800ae5a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	7bfa      	ldrb	r2, [r7, #15]
 800ae22:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ae26:	7bfb      	ldrb	r3, [r7, #15]
 800ae28:	4619      	mov	r1, r3
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 fe73 	bl	800bb16 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f000 fa48 	bl	800b2c6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ae36:	7bfb      	ldrb	r3, [r7, #15]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d004      	beq.n	800ae46 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2202      	movs	r2, #2
 800ae40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae44:	e009      	b.n	800ae5a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2201      	movs	r2, #1
 800ae4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae4e:	e004      	b.n	800ae5a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ae50:	6839      	ldr	r1, [r7, #0]
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 f96e 	bl	800b134 <USBD_CtlError>
  }
}
 800ae58:	bf00      	nop
 800ae5a:	bf00      	nop
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
	...

0800ae64 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	885b      	ldrh	r3, [r3, #2]
 800ae72:	b2da      	uxtb	r2, r3
 800ae74:	4b41      	ldr	r3, [pc, #260]	; (800af7c <USBD_SetConfig+0x118>)
 800ae76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ae78:	4b40      	ldr	r3, [pc, #256]	; (800af7c <USBD_SetConfig+0x118>)
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d904      	bls.n	800ae8a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ae80:	6839      	ldr	r1, [r7, #0]
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 f956 	bl	800b134 <USBD_CtlError>
 800ae88:	e075      	b.n	800af76 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae90:	2b02      	cmp	r3, #2
 800ae92:	d002      	beq.n	800ae9a <USBD_SetConfig+0x36>
 800ae94:	2b03      	cmp	r3, #3
 800ae96:	d023      	beq.n	800aee0 <USBD_SetConfig+0x7c>
 800ae98:	e062      	b.n	800af60 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ae9a:	4b38      	ldr	r3, [pc, #224]	; (800af7c <USBD_SetConfig+0x118>)
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d01a      	beq.n	800aed8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800aea2:	4b36      	ldr	r3, [pc, #216]	; (800af7c <USBD_SetConfig+0x118>)
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	461a      	mov	r2, r3
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2203      	movs	r2, #3
 800aeb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aeb4:	4b31      	ldr	r3, [pc, #196]	; (800af7c <USBD_SetConfig+0x118>)
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	4619      	mov	r1, r3
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f7ff f9e4 	bl	800a288 <USBD_SetClassConfig>
 800aec0:	4603      	mov	r3, r0
 800aec2:	2b02      	cmp	r3, #2
 800aec4:	d104      	bne.n	800aed0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800aec6:	6839      	ldr	r1, [r7, #0]
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 f933 	bl	800b134 <USBD_CtlError>
            return;
 800aece:	e052      	b.n	800af76 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 f9f8 	bl	800b2c6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800aed6:	e04e      	b.n	800af76 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 f9f4 	bl	800b2c6 <USBD_CtlSendStatus>
        break;
 800aede:	e04a      	b.n	800af76 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800aee0:	4b26      	ldr	r3, [pc, #152]	; (800af7c <USBD_SetConfig+0x118>)
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d112      	bne.n	800af0e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2202      	movs	r2, #2
 800aeec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800aef0:	4b22      	ldr	r3, [pc, #136]	; (800af7c <USBD_SetConfig+0x118>)
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	461a      	mov	r2, r3
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800aefa:	4b20      	ldr	r3, [pc, #128]	; (800af7c <USBD_SetConfig+0x118>)
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	4619      	mov	r1, r3
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f7ff f9e0 	bl	800a2c6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 f9dd 	bl	800b2c6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800af0c:	e033      	b.n	800af76 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800af0e:	4b1b      	ldr	r3, [pc, #108]	; (800af7c <USBD_SetConfig+0x118>)
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	461a      	mov	r2, r3
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d01d      	beq.n	800af58 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	b2db      	uxtb	r3, r3
 800af22:	4619      	mov	r1, r3
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f7ff f9ce 	bl	800a2c6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800af2a:	4b14      	ldr	r3, [pc, #80]	; (800af7c <USBD_SetConfig+0x118>)
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	461a      	mov	r2, r3
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800af34:	4b11      	ldr	r3, [pc, #68]	; (800af7c <USBD_SetConfig+0x118>)
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	4619      	mov	r1, r3
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f7ff f9a4 	bl	800a288 <USBD_SetClassConfig>
 800af40:	4603      	mov	r3, r0
 800af42:	2b02      	cmp	r3, #2
 800af44:	d104      	bne.n	800af50 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800af46:	6839      	ldr	r1, [r7, #0]
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 f8f3 	bl	800b134 <USBD_CtlError>
            return;
 800af4e:	e012      	b.n	800af76 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 f9b8 	bl	800b2c6 <USBD_CtlSendStatus>
        break;
 800af56:	e00e      	b.n	800af76 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f000 f9b4 	bl	800b2c6 <USBD_CtlSendStatus>
        break;
 800af5e:	e00a      	b.n	800af76 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800af60:	6839      	ldr	r1, [r7, #0]
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 f8e6 	bl	800b134 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800af68:	4b04      	ldr	r3, [pc, #16]	; (800af7c <USBD_SetConfig+0x118>)
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	4619      	mov	r1, r3
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f7ff f9a9 	bl	800a2c6 <USBD_ClrClassConfig>
        break;
 800af74:	bf00      	nop
    }
  }
}
 800af76:	3708      	adds	r7, #8
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	2000033c 	.word	0x2000033c

0800af80 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	88db      	ldrh	r3, [r3, #6]
 800af8e:	2b01      	cmp	r3, #1
 800af90:	d004      	beq.n	800af9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800af92:	6839      	ldr	r1, [r7, #0]
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 f8cd 	bl	800b134 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800af9a:	e022      	b.n	800afe2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	dc02      	bgt.n	800afac <USBD_GetConfig+0x2c>
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	dc03      	bgt.n	800afb2 <USBD_GetConfig+0x32>
 800afaa:	e015      	b.n	800afd8 <USBD_GetConfig+0x58>
 800afac:	2b03      	cmp	r3, #3
 800afae:	d00b      	beq.n	800afc8 <USBD_GetConfig+0x48>
 800afb0:	e012      	b.n	800afd8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2200      	movs	r2, #0
 800afb6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	3308      	adds	r3, #8
 800afbc:	2201      	movs	r2, #1
 800afbe:	4619      	mov	r1, r3
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 f922 	bl	800b20a <USBD_CtlSendData>
        break;
 800afc6:	e00c      	b.n	800afe2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	3304      	adds	r3, #4
 800afcc:	2201      	movs	r2, #1
 800afce:	4619      	mov	r1, r3
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 f91a 	bl	800b20a <USBD_CtlSendData>
        break;
 800afd6:	e004      	b.n	800afe2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800afd8:	6839      	ldr	r1, [r7, #0]
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 f8aa 	bl	800b134 <USBD_CtlError>
        break;
 800afe0:	bf00      	nop
}
 800afe2:	bf00      	nop
 800afe4:	3708      	adds	r7, #8
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}

0800afea <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afea:	b580      	push	{r7, lr}
 800afec:	b082      	sub	sp, #8
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
 800aff2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800affa:	3b01      	subs	r3, #1
 800affc:	2b02      	cmp	r3, #2
 800affe:	d81e      	bhi.n	800b03e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	88db      	ldrh	r3, [r3, #6]
 800b004:	2b02      	cmp	r3, #2
 800b006:	d004      	beq.n	800b012 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b008:	6839      	ldr	r1, [r7, #0]
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 f892 	bl	800b134 <USBD_CtlError>
        break;
 800b010:	e01a      	b.n	800b048 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2201      	movs	r2, #1
 800b016:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d005      	beq.n	800b02e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	68db      	ldr	r3, [r3, #12]
 800b026:	f043 0202 	orr.w	r2, r3, #2
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	330c      	adds	r3, #12
 800b032:	2202      	movs	r2, #2
 800b034:	4619      	mov	r1, r3
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f8e7 	bl	800b20a <USBD_CtlSendData>
      break;
 800b03c:	e004      	b.n	800b048 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b03e:	6839      	ldr	r1, [r7, #0]
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f000 f877 	bl	800b134 <USBD_CtlError>
      break;
 800b046:	bf00      	nop
  }
}
 800b048:	bf00      	nop
 800b04a:	3708      	adds	r7, #8
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	885b      	ldrh	r3, [r3, #2]
 800b05e:	2b01      	cmp	r3, #1
 800b060:	d106      	bne.n	800b070 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2201      	movs	r2, #1
 800b066:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 f92b 	bl	800b2c6 <USBD_CtlSendStatus>
  }
}
 800b070:	bf00      	nop
 800b072:	3708      	adds	r7, #8
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b088:	3b01      	subs	r3, #1
 800b08a:	2b02      	cmp	r3, #2
 800b08c:	d80b      	bhi.n	800b0a6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	885b      	ldrh	r3, [r3, #2]
 800b092:	2b01      	cmp	r3, #1
 800b094:	d10c      	bne.n	800b0b0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2200      	movs	r2, #0
 800b09a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 f911 	bl	800b2c6 <USBD_CtlSendStatus>
      }
      break;
 800b0a4:	e004      	b.n	800b0b0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b0a6:	6839      	ldr	r1, [r7, #0]
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 f843 	bl	800b134 <USBD_CtlError>
      break;
 800b0ae:	e000      	b.n	800b0b2 <USBD_ClrFeature+0x3a>
      break;
 800b0b0:	bf00      	nop
  }
}
 800b0b2:	bf00      	nop
 800b0b4:	3708      	adds	r7, #8
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}

0800b0ba <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b0ba:	b480      	push	{r7}
 800b0bc:	b083      	sub	sp, #12
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
 800b0c2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	781a      	ldrb	r2, [r3, #0]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	785a      	ldrb	r2, [r3, #1]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	3302      	adds	r3, #2
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	b29a      	uxth	r2, r3
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	3303      	adds	r3, #3
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	021b      	lsls	r3, r3, #8
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	4413      	add	r3, r2
 800b0ea:	b29a      	uxth	r2, r3
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	3304      	adds	r3, #4
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	b29a      	uxth	r2, r3
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	3305      	adds	r3, #5
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	021b      	lsls	r3, r3, #8
 800b102:	b29b      	uxth	r3, r3
 800b104:	4413      	add	r3, r2
 800b106:	b29a      	uxth	r2, r3
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	3306      	adds	r3, #6
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	b29a      	uxth	r2, r3
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	3307      	adds	r3, #7
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	b29b      	uxth	r3, r3
 800b11c:	021b      	lsls	r3, r3, #8
 800b11e:	b29b      	uxth	r3, r3
 800b120:	4413      	add	r3, r2
 800b122:	b29a      	uxth	r2, r3
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	80da      	strh	r2, [r3, #6]

}
 800b128:	bf00      	nop
 800b12a:	370c      	adds	r7, #12
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b13e:	2180      	movs	r1, #128	; 0x80
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 fc7d 	bl	800ba40 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b146:	2100      	movs	r1, #0
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 fc79 	bl	800ba40 <USBD_LL_StallEP>
}
 800b14e:	bf00      	nop
 800b150:	3708      	adds	r7, #8
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b086      	sub	sp, #24
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	60f8      	str	r0, [r7, #12]
 800b15e:	60b9      	str	r1, [r7, #8]
 800b160:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b162:	2300      	movs	r3, #0
 800b164:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d032      	beq.n	800b1d2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b16c:	68f8      	ldr	r0, [r7, #12]
 800b16e:	f000 f834 	bl	800b1da <USBD_GetLen>
 800b172:	4603      	mov	r3, r0
 800b174:	3301      	adds	r3, #1
 800b176:	b29b      	uxth	r3, r3
 800b178:	005b      	lsls	r3, r3, #1
 800b17a:	b29a      	uxth	r2, r3
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b180:	7dfb      	ldrb	r3, [r7, #23]
 800b182:	1c5a      	adds	r2, r3, #1
 800b184:	75fa      	strb	r2, [r7, #23]
 800b186:	461a      	mov	r2, r3
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	4413      	add	r3, r2
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	7812      	ldrb	r2, [r2, #0]
 800b190:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b192:	7dfb      	ldrb	r3, [r7, #23]
 800b194:	1c5a      	adds	r2, r3, #1
 800b196:	75fa      	strb	r2, [r7, #23]
 800b198:	461a      	mov	r2, r3
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	4413      	add	r3, r2
 800b19e:	2203      	movs	r2, #3
 800b1a0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b1a2:	e012      	b.n	800b1ca <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	1c5a      	adds	r2, r3, #1
 800b1a8:	60fa      	str	r2, [r7, #12]
 800b1aa:	7dfa      	ldrb	r2, [r7, #23]
 800b1ac:	1c51      	adds	r1, r2, #1
 800b1ae:	75f9      	strb	r1, [r7, #23]
 800b1b0:	4611      	mov	r1, r2
 800b1b2:	68ba      	ldr	r2, [r7, #8]
 800b1b4:	440a      	add	r2, r1
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b1ba:	7dfb      	ldrb	r3, [r7, #23]
 800b1bc:	1c5a      	adds	r2, r3, #1
 800b1be:	75fa      	strb	r2, [r7, #23]
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1e8      	bne.n	800b1a4 <USBD_GetString+0x4e>
    }
  }
}
 800b1d2:	bf00      	nop
 800b1d4:	3718      	adds	r7, #24
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}

0800b1da <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b1da:	b480      	push	{r7}
 800b1dc:	b085      	sub	sp, #20
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b1e6:	e005      	b.n	800b1f4 <USBD_GetLen+0x1a>
  {
    len++;
 800b1e8:	7bfb      	ldrb	r3, [r7, #15]
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d1f5      	bne.n	800b1e8 <USBD_GetLen+0xe>
  }

  return len;
 800b1fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3714      	adds	r7, #20
 800b202:	46bd      	mov	sp, r7
 800b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b208:	4770      	bx	lr

0800b20a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b084      	sub	sp, #16
 800b20e:	af00      	add	r7, sp, #0
 800b210:	60f8      	str	r0, [r7, #12]
 800b212:	60b9      	str	r1, [r7, #8]
 800b214:	4613      	mov	r3, r2
 800b216:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2202      	movs	r2, #2
 800b21c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b220:	88fa      	ldrh	r2, [r7, #6]
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b226:	88fa      	ldrh	r2, [r7, #6]
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b22c:	88fb      	ldrh	r3, [r7, #6]
 800b22e:	68ba      	ldr	r2, [r7, #8]
 800b230:	2100      	movs	r1, #0
 800b232:	68f8      	ldr	r0, [r7, #12]
 800b234:	f000 fc8e 	bl	800bb54 <USBD_LL_Transmit>

  return USBD_OK;
 800b238:	2300      	movs	r3, #0
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3710      	adds	r7, #16
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}

0800b242 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b242:	b580      	push	{r7, lr}
 800b244:	b084      	sub	sp, #16
 800b246:	af00      	add	r7, sp, #0
 800b248:	60f8      	str	r0, [r7, #12]
 800b24a:	60b9      	str	r1, [r7, #8]
 800b24c:	4613      	mov	r3, r2
 800b24e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b250:	88fb      	ldrh	r3, [r7, #6]
 800b252:	68ba      	ldr	r2, [r7, #8]
 800b254:	2100      	movs	r1, #0
 800b256:	68f8      	ldr	r0, [r7, #12]
 800b258:	f000 fc7c 	bl	800bb54 <USBD_LL_Transmit>

  return USBD_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b084      	sub	sp, #16
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	60f8      	str	r0, [r7, #12]
 800b26e:	60b9      	str	r1, [r7, #8]
 800b270:	4613      	mov	r3, r2
 800b272:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2203      	movs	r2, #3
 800b278:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b27c:	88fa      	ldrh	r2, [r7, #6]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b284:	88fa      	ldrh	r2, [r7, #6]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b28c:	88fb      	ldrh	r3, [r7, #6]
 800b28e:	68ba      	ldr	r2, [r7, #8]
 800b290:	2100      	movs	r1, #0
 800b292:	68f8      	ldr	r0, [r7, #12]
 800b294:	f000 fc81 	bl	800bb9a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b298:	2300      	movs	r3, #0
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3710      	adds	r7, #16
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}

0800b2a2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b2a2:	b580      	push	{r7, lr}
 800b2a4:	b084      	sub	sp, #16
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	60f8      	str	r0, [r7, #12]
 800b2aa:	60b9      	str	r1, [r7, #8]
 800b2ac:	4613      	mov	r3, r2
 800b2ae:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b2b0:	88fb      	ldrh	r3, [r7, #6]
 800b2b2:	68ba      	ldr	r2, [r7, #8]
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f000 fc6f 	bl	800bb9a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2bc:	2300      	movs	r3, #0
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}

0800b2c6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b082      	sub	sp, #8
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2204      	movs	r2, #4
 800b2d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	2200      	movs	r2, #0
 800b2da:	2100      	movs	r1, #0
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 fc39 	bl	800bb54 <USBD_LL_Transmit>

  return USBD_OK;
 800b2e2:	2300      	movs	r3, #0
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2205      	movs	r2, #5
 800b2f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	2200      	movs	r2, #0
 800b300:	2100      	movs	r1, #0
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 fc49 	bl	800bb9a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b308:	2300      	movs	r3, #0
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3708      	adds	r7, #8
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
	...

0800b314 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b318:	2200      	movs	r2, #0
 800b31a:	4912      	ldr	r1, [pc, #72]	; (800b364 <MX_USB_DEVICE_Init+0x50>)
 800b31c:	4812      	ldr	r0, [pc, #72]	; (800b368 <MX_USB_DEVICE_Init+0x54>)
 800b31e:	f7fe ff57 	bl	800a1d0 <USBD_Init>
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d001      	beq.n	800b32c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b328:	f7f5 fc1c 	bl	8000b64 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b32c:	490f      	ldr	r1, [pc, #60]	; (800b36c <MX_USB_DEVICE_Init+0x58>)
 800b32e:	480e      	ldr	r0, [pc, #56]	; (800b368 <MX_USB_DEVICE_Init+0x54>)
 800b330:	f7fe ff79 	bl	800a226 <USBD_RegisterClass>
 800b334:	4603      	mov	r3, r0
 800b336:	2b00      	cmp	r3, #0
 800b338:	d001      	beq.n	800b33e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b33a:	f7f5 fc13 	bl	8000b64 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b33e:	490c      	ldr	r1, [pc, #48]	; (800b370 <MX_USB_DEVICE_Init+0x5c>)
 800b340:	4809      	ldr	r0, [pc, #36]	; (800b368 <MX_USB_DEVICE_Init+0x54>)
 800b342:	f7fe fea7 	bl	800a094 <USBD_CDC_RegisterInterface>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d001      	beq.n	800b350 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b34c:	f7f5 fc0a 	bl	8000b64 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b350:	4805      	ldr	r0, [pc, #20]	; (800b368 <MX_USB_DEVICE_Init+0x54>)
 800b352:	f7fe ff82 	bl	800a25a <USBD_Start>
 800b356:	4603      	mov	r3, r0
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d001      	beq.n	800b360 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b35c:	f7f5 fc02 	bl	8000b64 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b360:	bf00      	nop
 800b362:	bd80      	pop	{r7, pc}
 800b364:	20000130 	.word	0x20000130
 800b368:	20000340 	.word	0x20000340
 800b36c:	2000001c 	.word	0x2000001c
 800b370:	20000120 	.word	0x20000120

0800b374 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b378:	2200      	movs	r2, #0
 800b37a:	4905      	ldr	r1, [pc, #20]	; (800b390 <CDC_Init_FS+0x1c>)
 800b37c:	4805      	ldr	r0, [pc, #20]	; (800b394 <CDC_Init_FS+0x20>)
 800b37e:	f7fe fea0 	bl	800a0c2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b382:	4905      	ldr	r1, [pc, #20]	; (800b398 <CDC_Init_FS+0x24>)
 800b384:	4803      	ldr	r0, [pc, #12]	; (800b394 <CDC_Init_FS+0x20>)
 800b386:	f7fe feb6 	bl	800a0f6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b38a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	20000a04 	.word	0x20000a04
 800b394:	20000340 	.word	0x20000340
 800b398:	20000604 	.word	0x20000604

0800b39c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b39c:	b480      	push	{r7}
 800b39e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b3a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	6039      	str	r1, [r7, #0]
 800b3b6:	71fb      	strb	r3, [r7, #7]
 800b3b8:	4613      	mov	r3, r2
 800b3ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b3bc:	79fb      	ldrb	r3, [r7, #7]
 800b3be:	2b23      	cmp	r3, #35	; 0x23
 800b3c0:	d84a      	bhi.n	800b458 <CDC_Control_FS+0xac>
 800b3c2:	a201      	add	r2, pc, #4	; (adr r2, 800b3c8 <CDC_Control_FS+0x1c>)
 800b3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c8:	0800b459 	.word	0x0800b459
 800b3cc:	0800b459 	.word	0x0800b459
 800b3d0:	0800b459 	.word	0x0800b459
 800b3d4:	0800b459 	.word	0x0800b459
 800b3d8:	0800b459 	.word	0x0800b459
 800b3dc:	0800b459 	.word	0x0800b459
 800b3e0:	0800b459 	.word	0x0800b459
 800b3e4:	0800b459 	.word	0x0800b459
 800b3e8:	0800b459 	.word	0x0800b459
 800b3ec:	0800b459 	.word	0x0800b459
 800b3f0:	0800b459 	.word	0x0800b459
 800b3f4:	0800b459 	.word	0x0800b459
 800b3f8:	0800b459 	.word	0x0800b459
 800b3fc:	0800b459 	.word	0x0800b459
 800b400:	0800b459 	.word	0x0800b459
 800b404:	0800b459 	.word	0x0800b459
 800b408:	0800b459 	.word	0x0800b459
 800b40c:	0800b459 	.word	0x0800b459
 800b410:	0800b459 	.word	0x0800b459
 800b414:	0800b459 	.word	0x0800b459
 800b418:	0800b459 	.word	0x0800b459
 800b41c:	0800b459 	.word	0x0800b459
 800b420:	0800b459 	.word	0x0800b459
 800b424:	0800b459 	.word	0x0800b459
 800b428:	0800b459 	.word	0x0800b459
 800b42c:	0800b459 	.word	0x0800b459
 800b430:	0800b459 	.word	0x0800b459
 800b434:	0800b459 	.word	0x0800b459
 800b438:	0800b459 	.word	0x0800b459
 800b43c:	0800b459 	.word	0x0800b459
 800b440:	0800b459 	.word	0x0800b459
 800b444:	0800b459 	.word	0x0800b459
 800b448:	0800b459 	.word	0x0800b459
 800b44c:	0800b459 	.word	0x0800b459
 800b450:	0800b459 	.word	0x0800b459
 800b454:	0800b459 	.word	0x0800b459
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b458:	bf00      	nop
  }

  return (USBD_OK);
 800b45a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	370c      	adds	r7, #12
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr

0800b468 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b472:	6879      	ldr	r1, [r7, #4]
 800b474:	4805      	ldr	r0, [pc, #20]	; (800b48c <CDC_Receive_FS+0x24>)
 800b476:	f7fe fe3e 	bl	800a0f6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b47a:	4804      	ldr	r0, [pc, #16]	; (800b48c <CDC_Receive_FS+0x24>)
 800b47c:	f7fe fe7e 	bl	800a17c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b480:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b482:	4618      	mov	r0, r3
 800b484:	3708      	adds	r7, #8
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	20000340 	.word	0x20000340

0800b490 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	460b      	mov	r3, r1
 800b49a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b49c:	2300      	movs	r3, #0
 800b49e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b4a0:	4b0d      	ldr	r3, [pc, #52]	; (800b4d8 <CDC_Transmit_FS+0x48>)
 800b4a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d001      	beq.n	800b4b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	e00b      	b.n	800b4ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b4b6:	887b      	ldrh	r3, [r7, #2]
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	6879      	ldr	r1, [r7, #4]
 800b4bc:	4806      	ldr	r0, [pc, #24]	; (800b4d8 <CDC_Transmit_FS+0x48>)
 800b4be:	f7fe fe00 	bl	800a0c2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b4c2:	4805      	ldr	r0, [pc, #20]	; (800b4d8 <CDC_Transmit_FS+0x48>)
 800b4c4:	f7fe fe2b 	bl	800a11e <USBD_CDC_TransmitPacket>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b4cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	20000340 	.word	0x20000340

0800b4dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	6039      	str	r1, [r7, #0]
 800b4e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	2212      	movs	r2, #18
 800b4ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b4ee:	4b03      	ldr	r3, [pc, #12]	; (800b4fc <USBD_FS_DeviceDescriptor+0x20>)
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	370c      	adds	r7, #12
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr
 800b4fc:	2000014c 	.word	0x2000014c

0800b500 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b500:	b480      	push	{r7}
 800b502:	b083      	sub	sp, #12
 800b504:	af00      	add	r7, sp, #0
 800b506:	4603      	mov	r3, r0
 800b508:	6039      	str	r1, [r7, #0]
 800b50a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	2204      	movs	r2, #4
 800b510:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b512:	4b03      	ldr	r3, [pc, #12]	; (800b520 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b514:	4618      	mov	r0, r3
 800b516:	370c      	adds	r7, #12
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr
 800b520:	20000160 	.word	0x20000160

0800b524 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b082      	sub	sp, #8
 800b528:	af00      	add	r7, sp, #0
 800b52a:	4603      	mov	r3, r0
 800b52c:	6039      	str	r1, [r7, #0]
 800b52e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b530:	79fb      	ldrb	r3, [r7, #7]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d105      	bne.n	800b542 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b536:	683a      	ldr	r2, [r7, #0]
 800b538:	4907      	ldr	r1, [pc, #28]	; (800b558 <USBD_FS_ProductStrDescriptor+0x34>)
 800b53a:	4808      	ldr	r0, [pc, #32]	; (800b55c <USBD_FS_ProductStrDescriptor+0x38>)
 800b53c:	f7ff fe0b 	bl	800b156 <USBD_GetString>
 800b540:	e004      	b.n	800b54c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b542:	683a      	ldr	r2, [r7, #0]
 800b544:	4904      	ldr	r1, [pc, #16]	; (800b558 <USBD_FS_ProductStrDescriptor+0x34>)
 800b546:	4805      	ldr	r0, [pc, #20]	; (800b55c <USBD_FS_ProductStrDescriptor+0x38>)
 800b548:	f7ff fe05 	bl	800b156 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b54c:	4b02      	ldr	r3, [pc, #8]	; (800b558 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3708      	adds	r7, #8
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	20000e04 	.word	0x20000e04
 800b55c:	0800bd18 	.word	0x0800bd18

0800b560 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	4603      	mov	r3, r0
 800b568:	6039      	str	r1, [r7, #0]
 800b56a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b56c:	683a      	ldr	r2, [r7, #0]
 800b56e:	4904      	ldr	r1, [pc, #16]	; (800b580 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b570:	4804      	ldr	r0, [pc, #16]	; (800b584 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b572:	f7ff fdf0 	bl	800b156 <USBD_GetString>
  return USBD_StrDesc;
 800b576:	4b02      	ldr	r3, [pc, #8]	; (800b580 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3708      	adds	r7, #8
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	20000e04 	.word	0x20000e04
 800b584:	0800bd30 	.word	0x0800bd30

0800b588 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	4603      	mov	r3, r0
 800b590:	6039      	str	r1, [r7, #0]
 800b592:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	221a      	movs	r2, #26
 800b598:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b59a:	f000 f843 	bl	800b624 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b59e:	4b02      	ldr	r3, [pc, #8]	; (800b5a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3708      	adds	r7, #8
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	20000164 	.word	0x20000164

0800b5ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	6039      	str	r1, [r7, #0]
 800b5b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b5b8:	79fb      	ldrb	r3, [r7, #7]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d105      	bne.n	800b5ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b5be:	683a      	ldr	r2, [r7, #0]
 800b5c0:	4907      	ldr	r1, [pc, #28]	; (800b5e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b5c2:	4808      	ldr	r0, [pc, #32]	; (800b5e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b5c4:	f7ff fdc7 	bl	800b156 <USBD_GetString>
 800b5c8:	e004      	b.n	800b5d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b5ca:	683a      	ldr	r2, [r7, #0]
 800b5cc:	4904      	ldr	r1, [pc, #16]	; (800b5e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b5ce:	4805      	ldr	r0, [pc, #20]	; (800b5e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b5d0:	f7ff fdc1 	bl	800b156 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5d4:	4b02      	ldr	r3, [pc, #8]	; (800b5e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3708      	adds	r7, #8
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	20000e04 	.word	0x20000e04
 800b5e4:	0800bd44 	.word	0x0800bd44

0800b5e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	6039      	str	r1, [r7, #0]
 800b5f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b5f4:	79fb      	ldrb	r3, [r7, #7]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d105      	bne.n	800b606 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b5fa:	683a      	ldr	r2, [r7, #0]
 800b5fc:	4907      	ldr	r1, [pc, #28]	; (800b61c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b5fe:	4808      	ldr	r0, [pc, #32]	; (800b620 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b600:	f7ff fda9 	bl	800b156 <USBD_GetString>
 800b604:	e004      	b.n	800b610 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b606:	683a      	ldr	r2, [r7, #0]
 800b608:	4904      	ldr	r1, [pc, #16]	; (800b61c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b60a:	4805      	ldr	r0, [pc, #20]	; (800b620 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b60c:	f7ff fda3 	bl	800b156 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b610:	4b02      	ldr	r3, [pc, #8]	; (800b61c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b612:	4618      	mov	r0, r3
 800b614:	3708      	adds	r7, #8
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	20000e04 	.word	0x20000e04
 800b620:	0800bd50 	.word	0x0800bd50

0800b624 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b62a:	4b0f      	ldr	r3, [pc, #60]	; (800b668 <Get_SerialNum+0x44>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b630:	4b0e      	ldr	r3, [pc, #56]	; (800b66c <Get_SerialNum+0x48>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b636:	4b0e      	ldr	r3, [pc, #56]	; (800b670 <Get_SerialNum+0x4c>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b63c:	68fa      	ldr	r2, [r7, #12]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	4413      	add	r3, r2
 800b642:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d009      	beq.n	800b65e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b64a:	2208      	movs	r2, #8
 800b64c:	4909      	ldr	r1, [pc, #36]	; (800b674 <Get_SerialNum+0x50>)
 800b64e:	68f8      	ldr	r0, [r7, #12]
 800b650:	f000 f814 	bl	800b67c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b654:	2204      	movs	r2, #4
 800b656:	4908      	ldr	r1, [pc, #32]	; (800b678 <Get_SerialNum+0x54>)
 800b658:	68b8      	ldr	r0, [r7, #8]
 800b65a:	f000 f80f 	bl	800b67c <IntToUnicode>
  }
}
 800b65e:	bf00      	nop
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	1ffff7ac 	.word	0x1ffff7ac
 800b66c:	1ffff7b0 	.word	0x1ffff7b0
 800b670:	1ffff7b4 	.word	0x1ffff7b4
 800b674:	20000166 	.word	0x20000166
 800b678:	20000176 	.word	0x20000176

0800b67c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b087      	sub	sp, #28
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	4613      	mov	r3, r2
 800b688:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b68a:	2300      	movs	r3, #0
 800b68c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b68e:	2300      	movs	r3, #0
 800b690:	75fb      	strb	r3, [r7, #23]
 800b692:	e027      	b.n	800b6e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	0f1b      	lsrs	r3, r3, #28
 800b698:	2b09      	cmp	r3, #9
 800b69a:	d80b      	bhi.n	800b6b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	0f1b      	lsrs	r3, r3, #28
 800b6a0:	b2da      	uxtb	r2, r3
 800b6a2:	7dfb      	ldrb	r3, [r7, #23]
 800b6a4:	005b      	lsls	r3, r3, #1
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	440b      	add	r3, r1
 800b6ac:	3230      	adds	r2, #48	; 0x30
 800b6ae:	b2d2      	uxtb	r2, r2
 800b6b0:	701a      	strb	r2, [r3, #0]
 800b6b2:	e00a      	b.n	800b6ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	0f1b      	lsrs	r3, r3, #28
 800b6b8:	b2da      	uxtb	r2, r3
 800b6ba:	7dfb      	ldrb	r3, [r7, #23]
 800b6bc:	005b      	lsls	r3, r3, #1
 800b6be:	4619      	mov	r1, r3
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	440b      	add	r3, r1
 800b6c4:	3237      	adds	r2, #55	; 0x37
 800b6c6:	b2d2      	uxtb	r2, r2
 800b6c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	011b      	lsls	r3, r3, #4
 800b6ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b6d0:	7dfb      	ldrb	r3, [r7, #23]
 800b6d2:	005b      	lsls	r3, r3, #1
 800b6d4:	3301      	adds	r3, #1
 800b6d6:	68ba      	ldr	r2, [r7, #8]
 800b6d8:	4413      	add	r3, r2
 800b6da:	2200      	movs	r2, #0
 800b6dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b6de:	7dfb      	ldrb	r3, [r7, #23]
 800b6e0:	3301      	adds	r3, #1
 800b6e2:	75fb      	strb	r3, [r7, #23]
 800b6e4:	7dfa      	ldrb	r2, [r7, #23]
 800b6e6:	79fb      	ldrb	r3, [r7, #7]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d3d3      	bcc.n	800b694 <IntToUnicode+0x18>
  }
}
 800b6ec:	bf00      	nop
 800b6ee:	bf00      	nop
 800b6f0:	371c      	adds	r7, #28
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr
	...

0800b6fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b08a      	sub	sp, #40	; 0x28
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b704:	f107 0314 	add.w	r3, r7, #20
 800b708:	2200      	movs	r2, #0
 800b70a:	601a      	str	r2, [r3, #0]
 800b70c:	605a      	str	r2, [r3, #4]
 800b70e:	609a      	str	r2, [r3, #8]
 800b710:	60da      	str	r2, [r3, #12]
 800b712:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4a1c      	ldr	r2, [pc, #112]	; (800b78c <HAL_PCD_MspInit+0x90>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d131      	bne.n	800b782 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b71e:	4b1c      	ldr	r3, [pc, #112]	; (800b790 <HAL_PCD_MspInit+0x94>)
 800b720:	695b      	ldr	r3, [r3, #20]
 800b722:	4a1b      	ldr	r2, [pc, #108]	; (800b790 <HAL_PCD_MspInit+0x94>)
 800b724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b728:	6153      	str	r3, [r2, #20]
 800b72a:	4b19      	ldr	r3, [pc, #100]	; (800b790 <HAL_PCD_MspInit+0x94>)
 800b72c:	695b      	ldr	r3, [r3, #20]
 800b72e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b732:	613b      	str	r3, [r7, #16]
 800b734:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800b736:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b73a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b73c:	2302      	movs	r3, #2
 800b73e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b740:	2300      	movs	r3, #0
 800b742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b744:	2303      	movs	r3, #3
 800b746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800b748:	230e      	movs	r3, #14
 800b74a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b74c:	f107 0314 	add.w	r3, r7, #20
 800b750:	4619      	mov	r1, r3
 800b752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b756:	f7f7 fa0f 	bl	8002b78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b75a:	4b0d      	ldr	r3, [pc, #52]	; (800b790 <HAL_PCD_MspInit+0x94>)
 800b75c:	69db      	ldr	r3, [r3, #28]
 800b75e:	4a0c      	ldr	r2, [pc, #48]	; (800b790 <HAL_PCD_MspInit+0x94>)
 800b760:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b764:	61d3      	str	r3, [r2, #28]
 800b766:	4b0a      	ldr	r3, [pc, #40]	; (800b790 <HAL_PCD_MspInit+0x94>)
 800b768:	69db      	ldr	r3, [r3, #28]
 800b76a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b76e:	60fb      	str	r3, [r7, #12]
 800b770:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800b772:	2200      	movs	r2, #0
 800b774:	2100      	movs	r1, #0
 800b776:	2014      	movs	r0, #20
 800b778:	f7f7 f9c7 	bl	8002b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800b77c:	2014      	movs	r0, #20
 800b77e:	f7f7 f9e0 	bl	8002b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b782:	bf00      	nop
 800b784:	3728      	adds	r7, #40	; 0x28
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	40005c00 	.word	0x40005c00
 800b790:	40021000 	.word	0x40021000

0800b794 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	4610      	mov	r0, r2
 800b7ac:	f7fe fd9e 	bl	800a2ec <USBD_LL_SetupStage>
}
 800b7b0:	bf00      	nop
 800b7b2:	3708      	adds	r7, #8
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b7ca:	78fa      	ldrb	r2, [r7, #3]
 800b7cc:	6879      	ldr	r1, [r7, #4]
 800b7ce:	4613      	mov	r3, r2
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	4413      	add	r3, r2
 800b7d4:	00db      	lsls	r3, r3, #3
 800b7d6:	440b      	add	r3, r1
 800b7d8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	78fb      	ldrb	r3, [r7, #3]
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	f7fe fdd0 	bl	800a386 <USBD_LL_DataOutStage>
}
 800b7e6:	bf00      	nop
 800b7e8:	3708      	adds	r7, #8
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}

0800b7ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7ee:	b580      	push	{r7, lr}
 800b7f0:	b082      	sub	sp, #8
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	6078      	str	r0, [r7, #4]
 800b7f6:	460b      	mov	r3, r1
 800b7f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b800:	78fa      	ldrb	r2, [r7, #3]
 800b802:	6879      	ldr	r1, [r7, #4]
 800b804:	4613      	mov	r3, r2
 800b806:	009b      	lsls	r3, r3, #2
 800b808:	4413      	add	r3, r2
 800b80a:	00db      	lsls	r3, r3, #3
 800b80c:	440b      	add	r3, r1
 800b80e:	333c      	adds	r3, #60	; 0x3c
 800b810:	681a      	ldr	r2, [r3, #0]
 800b812:	78fb      	ldrb	r3, [r7, #3]
 800b814:	4619      	mov	r1, r3
 800b816:	f7fe fe27 	bl	800a468 <USBD_LL_DataInStage>
}
 800b81a:	bf00      	nop
 800b81c:	3708      	adds	r7, #8
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b082      	sub	sp, #8
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b830:	4618      	mov	r0, r3
 800b832:	f7fe ff3a 	bl	800a6aa <USBD_LL_SOF>
}
 800b836:	bf00      	nop
 800b838:	3708      	adds	r7, #8
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}

0800b83e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b83e:	b580      	push	{r7, lr}
 800b840:	b084      	sub	sp, #16
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b846:	2301      	movs	r3, #1
 800b848:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	689b      	ldr	r3, [r3, #8]
 800b84e:	2b02      	cmp	r3, #2
 800b850:	d001      	beq.n	800b856 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b852:	f7f5 f987 	bl	8000b64 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b85c:	7bfa      	ldrb	r2, [r7, #15]
 800b85e:	4611      	mov	r1, r2
 800b860:	4618      	mov	r0, r3
 800b862:	f7fe fee7 	bl	800a634 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7fe fea0 	bl	800a5b2 <USBD_LL_Reset>
}
 800b872:	bf00      	nop
 800b874:	3710      	adds	r7, #16
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
	...

0800b87c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b082      	sub	sp, #8
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7fe fee2 	bl	800a654 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	699b      	ldr	r3, [r3, #24]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d005      	beq.n	800b8a4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b898:	4b04      	ldr	r3, [pc, #16]	; (800b8ac <HAL_PCD_SuspendCallback+0x30>)
 800b89a:	691b      	ldr	r3, [r3, #16]
 800b89c:	4a03      	ldr	r2, [pc, #12]	; (800b8ac <HAL_PCD_SuspendCallback+0x30>)
 800b89e:	f043 0306 	orr.w	r3, r3, #6
 800b8a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b8a4:	bf00      	nop
 800b8a6:	3708      	adds	r7, #8
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}
 800b8ac:	e000ed00 	.word	0xe000ed00

0800b8b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7fe fedd 	bl	800a67e <USBD_LL_Resume>
}
 800b8c4:	bf00      	nop
 800b8c6:	3708      	adds	r7, #8
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b8d4:	4a28      	ldr	r2, [pc, #160]	; (800b978 <USBD_LL_Init+0xac>)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	4a26      	ldr	r2, [pc, #152]	; (800b978 <USBD_LL_Init+0xac>)
 800b8e0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b8e4:	4b24      	ldr	r3, [pc, #144]	; (800b978 <USBD_LL_Init+0xac>)
 800b8e6:	4a25      	ldr	r2, [pc, #148]	; (800b97c <USBD_LL_Init+0xb0>)
 800b8e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b8ea:	4b23      	ldr	r3, [pc, #140]	; (800b978 <USBD_LL_Init+0xac>)
 800b8ec:	2208      	movs	r2, #8
 800b8ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b8f0:	4b21      	ldr	r3, [pc, #132]	; (800b978 <USBD_LL_Init+0xac>)
 800b8f2:	2202      	movs	r2, #2
 800b8f4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b8f6:	4b20      	ldr	r3, [pc, #128]	; (800b978 <USBD_LL_Init+0xac>)
 800b8f8:	2202      	movs	r2, #2
 800b8fa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b8fc:	4b1e      	ldr	r3, [pc, #120]	; (800b978 <USBD_LL_Init+0xac>)
 800b8fe:	2200      	movs	r2, #0
 800b900:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b902:	4b1d      	ldr	r3, [pc, #116]	; (800b978 <USBD_LL_Init+0xac>)
 800b904:	2200      	movs	r2, #0
 800b906:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b908:	481b      	ldr	r0, [pc, #108]	; (800b978 <USBD_LL_Init+0xac>)
 800b90a:	f7f7 fb11 	bl	8002f30 <HAL_PCD_Init>
 800b90e:	4603      	mov	r3, r0
 800b910:	2b00      	cmp	r3, #0
 800b912:	d001      	beq.n	800b918 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b914:	f7f5 f926 	bl	8000b64 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b91e:	2318      	movs	r3, #24
 800b920:	2200      	movs	r2, #0
 800b922:	2100      	movs	r1, #0
 800b924:	f7f8 ff9a 	bl	800485c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b92e:	2358      	movs	r3, #88	; 0x58
 800b930:	2200      	movs	r2, #0
 800b932:	2180      	movs	r1, #128	; 0x80
 800b934:	f7f8 ff92 	bl	800485c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b93e:	23c0      	movs	r3, #192	; 0xc0
 800b940:	2200      	movs	r2, #0
 800b942:	2181      	movs	r1, #129	; 0x81
 800b944:	f7f8 ff8a 	bl	800485c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b94e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b952:	2200      	movs	r2, #0
 800b954:	2101      	movs	r1, #1
 800b956:	f7f8 ff81 	bl	800485c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b960:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b964:	2200      	movs	r2, #0
 800b966:	2182      	movs	r1, #130	; 0x82
 800b968:	f7f8 ff78 	bl	800485c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b96c:	2300      	movs	r3, #0
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3708      	adds	r7, #8
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop
 800b978:	20001004 	.word	0x20001004
 800b97c:	40005c00 	.word	0x40005c00

0800b980 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b988:	2300      	movs	r3, #0
 800b98a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b98c:	2300      	movs	r3, #0
 800b98e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b996:	4618      	mov	r0, r3
 800b998:	f7f7 fb9c 	bl	80030d4 <HAL_PCD_Start>
 800b99c:	4603      	mov	r3, r0
 800b99e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9a0:	7bfb      	ldrb	r3, [r7, #15]
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f000 f954 	bl	800bc50 <USBD_Get_USB_Status>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3710      	adds	r7, #16
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b084      	sub	sp, #16
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
 800b9be:	4608      	mov	r0, r1
 800b9c0:	4611      	mov	r1, r2
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	70fb      	strb	r3, [r7, #3]
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	70bb      	strb	r3, [r7, #2]
 800b9cc:	4613      	mov	r3, r2
 800b9ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b9de:	78bb      	ldrb	r3, [r7, #2]
 800b9e0:	883a      	ldrh	r2, [r7, #0]
 800b9e2:	78f9      	ldrb	r1, [r7, #3]
 800b9e4:	f7f7 fc95 	bl	8003312 <HAL_PCD_EP_Open>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9ec:	7bfb      	ldrb	r3, [r7, #15]
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f000 f92e 	bl	800bc50 <USBD_Get_USB_Status>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3710      	adds	r7, #16
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}

0800ba02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba02:	b580      	push	{r7, lr}
 800ba04:	b084      	sub	sp, #16
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
 800ba0a:	460b      	mov	r3, r1
 800ba0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba12:	2300      	movs	r3, #0
 800ba14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba1c:	78fa      	ldrb	r2, [r7, #3]
 800ba1e:	4611      	mov	r1, r2
 800ba20:	4618      	mov	r0, r3
 800ba22:	f7f7 fcd3 	bl	80033cc <HAL_PCD_EP_Close>
 800ba26:	4603      	mov	r3, r0
 800ba28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba2a:	7bfb      	ldrb	r3, [r7, #15]
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f000 f90f 	bl	800bc50 <USBD_Get_USB_Status>
 800ba32:	4603      	mov	r3, r0
 800ba34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba36:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3710      	adds	r7, #16
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	460b      	mov	r3, r1
 800ba4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba50:	2300      	movs	r3, #0
 800ba52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba5a:	78fa      	ldrb	r2, [r7, #3]
 800ba5c:	4611      	mov	r1, r2
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7f7 fd7c 	bl	800355c <HAL_PCD_EP_SetStall>
 800ba64:	4603      	mov	r3, r0
 800ba66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba68:	7bfb      	ldrb	r3, [r7, #15]
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f000 f8f0 	bl	800bc50 <USBD_Get_USB_Status>
 800ba70:	4603      	mov	r3, r0
 800ba72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba74:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}

0800ba7e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba7e:	b580      	push	{r7, lr}
 800ba80:	b084      	sub	sp, #16
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]
 800ba86:	460b      	mov	r3, r1
 800ba88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba98:	78fa      	ldrb	r2, [r7, #3]
 800ba9a:	4611      	mov	r1, r2
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f7f7 fdaf 	bl	8003600 <HAL_PCD_EP_ClrStall>
 800baa2:	4603      	mov	r3, r0
 800baa4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baa6:	7bfb      	ldrb	r3, [r7, #15]
 800baa8:	4618      	mov	r0, r3
 800baaa:	f000 f8d1 	bl	800bc50 <USBD_Get_USB_Status>
 800baae:	4603      	mov	r3, r0
 800bab0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bab2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3710      	adds	r7, #16
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800babc:	b480      	push	{r7}
 800babe:	b085      	sub	sp, #20
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	460b      	mov	r3, r1
 800bac6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bace:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bad0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	da0c      	bge.n	800baf2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bad8:	78fb      	ldrb	r3, [r7, #3]
 800bada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bade:	68f9      	ldr	r1, [r7, #12]
 800bae0:	1c5a      	adds	r2, r3, #1
 800bae2:	4613      	mov	r3, r2
 800bae4:	009b      	lsls	r3, r3, #2
 800bae6:	4413      	add	r3, r2
 800bae8:	00db      	lsls	r3, r3, #3
 800baea:	440b      	add	r3, r1
 800baec:	3302      	adds	r3, #2
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	e00b      	b.n	800bb0a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800baf2:	78fb      	ldrb	r3, [r7, #3]
 800baf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800baf8:	68f9      	ldr	r1, [r7, #12]
 800bafa:	4613      	mov	r3, r2
 800bafc:	009b      	lsls	r3, r3, #2
 800bafe:	4413      	add	r3, r2
 800bb00:	00db      	lsls	r3, r3, #3
 800bb02:	440b      	add	r3, r1
 800bb04:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bb08:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3714      	adds	r7, #20
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr

0800bb16 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bb16:	b580      	push	{r7, lr}
 800bb18:	b084      	sub	sp, #16
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
 800bb1e:	460b      	mov	r3, r1
 800bb20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb22:	2300      	movs	r3, #0
 800bb24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb26:	2300      	movs	r3, #0
 800bb28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb30:	78fa      	ldrb	r2, [r7, #3]
 800bb32:	4611      	mov	r1, r2
 800bb34:	4618      	mov	r0, r3
 800bb36:	f7f7 fbc7 	bl	80032c8 <HAL_PCD_SetAddress>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb3e:	7bfb      	ldrb	r3, [r7, #15]
 800bb40:	4618      	mov	r0, r3
 800bb42:	f000 f885 	bl	800bc50 <USBD_Get_USB_Status>
 800bb46:	4603      	mov	r3, r0
 800bb48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3710      	adds	r7, #16
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b086      	sub	sp, #24
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	607a      	str	r2, [r7, #4]
 800bb5e:	461a      	mov	r2, r3
 800bb60:	460b      	mov	r3, r1
 800bb62:	72fb      	strb	r3, [r7, #11]
 800bb64:	4613      	mov	r3, r2
 800bb66:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb76:	893b      	ldrh	r3, [r7, #8]
 800bb78:	7af9      	ldrb	r1, [r7, #11]
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	f7f7 fcb7 	bl	80034ee <HAL_PCD_EP_Transmit>
 800bb80:	4603      	mov	r3, r0
 800bb82:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb84:	7dfb      	ldrb	r3, [r7, #23]
 800bb86:	4618      	mov	r0, r3
 800bb88:	f000 f862 	bl	800bc50 <USBD_Get_USB_Status>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb90:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3718      	adds	r7, #24
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b086      	sub	sp, #24
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	60f8      	str	r0, [r7, #12]
 800bba2:	607a      	str	r2, [r7, #4]
 800bba4:	461a      	mov	r2, r3
 800bba6:	460b      	mov	r3, r1
 800bba8:	72fb      	strb	r3, [r7, #11]
 800bbaa:	4613      	mov	r3, r2
 800bbac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bbbc:	893b      	ldrh	r3, [r7, #8]
 800bbbe:	7af9      	ldrb	r1, [r7, #11]
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	f7f7 fc4b 	bl	800345c <HAL_PCD_EP_Receive>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbca:	7dfb      	ldrb	r3, [r7, #23]
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f000 f83f 	bl	800bc50 <USBD_Get_USB_Status>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bbd6:	7dbb      	ldrb	r3, [r7, #22]
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3718      	adds	r7, #24
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}

0800bbe0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	460b      	mov	r3, r1
 800bbea:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbf2:	78fa      	ldrb	r2, [r7, #3]
 800bbf4:	4611      	mov	r1, r2
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7f7 fc61 	bl	80034be <HAL_PCD_EP_GetRxCount>
 800bbfc:	4603      	mov	r3, r0
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3708      	adds	r7, #8
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
	...

0800bc08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bc10:	4b03      	ldr	r3, [pc, #12]	; (800bc20 <USBD_static_malloc+0x18>)
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	370c      	adds	r7, #12
 800bc16:	46bd      	mov	sp, r7
 800bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1c:	4770      	bx	lr
 800bc1e:	bf00      	nop
 800bc20:	200012f0 	.word	0x200012f0

0800bc24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]

}
 800bc2c:	bf00      	nop
 800bc2e:	370c      	adds	r7, #12
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr

0800bc38 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	460b      	mov	r3, r1
 800bc42:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800bc44:	bf00      	nop
 800bc46:	370c      	adds	r7, #12
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr

0800bc50 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b085      	sub	sp, #20
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	4603      	mov	r3, r0
 800bc58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bc5e:	79fb      	ldrb	r3, [r7, #7]
 800bc60:	2b03      	cmp	r3, #3
 800bc62:	d817      	bhi.n	800bc94 <USBD_Get_USB_Status+0x44>
 800bc64:	a201      	add	r2, pc, #4	; (adr r2, 800bc6c <USBD_Get_USB_Status+0x1c>)
 800bc66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc6a:	bf00      	nop
 800bc6c:	0800bc7d 	.word	0x0800bc7d
 800bc70:	0800bc83 	.word	0x0800bc83
 800bc74:	0800bc89 	.word	0x0800bc89
 800bc78:	0800bc8f 	.word	0x0800bc8f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc80:	e00b      	b.n	800bc9a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc82:	2302      	movs	r3, #2
 800bc84:	73fb      	strb	r3, [r7, #15]
    break;
 800bc86:	e008      	b.n	800bc9a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc88:	2301      	movs	r3, #1
 800bc8a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc8c:	e005      	b.n	800bc9a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc8e:	2302      	movs	r3, #2
 800bc90:	73fb      	strb	r3, [r7, #15]
    break;
 800bc92:	e002      	b.n	800bc9a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bc94:	2302      	movs	r3, #2
 800bc96:	73fb      	strb	r3, [r7, #15]
    break;
 800bc98:	bf00      	nop
  }
  return usb_status;
 800bc9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3714      	adds	r7, #20
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr

0800bca8 <memset>:
 800bca8:	4402      	add	r2, r0
 800bcaa:	4603      	mov	r3, r0
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d100      	bne.n	800bcb2 <memset+0xa>
 800bcb0:	4770      	bx	lr
 800bcb2:	f803 1b01 	strb.w	r1, [r3], #1
 800bcb6:	e7f9      	b.n	800bcac <memset+0x4>

0800bcb8 <__libc_init_array>:
 800bcb8:	b570      	push	{r4, r5, r6, lr}
 800bcba:	4d0d      	ldr	r5, [pc, #52]	; (800bcf0 <__libc_init_array+0x38>)
 800bcbc:	4c0d      	ldr	r4, [pc, #52]	; (800bcf4 <__libc_init_array+0x3c>)
 800bcbe:	1b64      	subs	r4, r4, r5
 800bcc0:	10a4      	asrs	r4, r4, #2
 800bcc2:	2600      	movs	r6, #0
 800bcc4:	42a6      	cmp	r6, r4
 800bcc6:	d109      	bne.n	800bcdc <__libc_init_array+0x24>
 800bcc8:	4d0b      	ldr	r5, [pc, #44]	; (800bcf8 <__libc_init_array+0x40>)
 800bcca:	4c0c      	ldr	r4, [pc, #48]	; (800bcfc <__libc_init_array+0x44>)
 800bccc:	f000 f818 	bl	800bd00 <_init>
 800bcd0:	1b64      	subs	r4, r4, r5
 800bcd2:	10a4      	asrs	r4, r4, #2
 800bcd4:	2600      	movs	r6, #0
 800bcd6:	42a6      	cmp	r6, r4
 800bcd8:	d105      	bne.n	800bce6 <__libc_init_array+0x2e>
 800bcda:	bd70      	pop	{r4, r5, r6, pc}
 800bcdc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bce0:	4798      	blx	r3
 800bce2:	3601      	adds	r6, #1
 800bce4:	e7ee      	b.n	800bcc4 <__libc_init_array+0xc>
 800bce6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcea:	4798      	blx	r3
 800bcec:	3601      	adds	r6, #1
 800bcee:	e7f2      	b.n	800bcd6 <__libc_init_array+0x1e>
 800bcf0:	0800bd90 	.word	0x0800bd90
 800bcf4:	0800bd90 	.word	0x0800bd90
 800bcf8:	0800bd90 	.word	0x0800bd90
 800bcfc:	0800bd94 	.word	0x0800bd94

0800bd00 <_init>:
 800bd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd02:	bf00      	nop
 800bd04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd06:	bc08      	pop	{r3}
 800bd08:	469e      	mov	lr, r3
 800bd0a:	4770      	bx	lr

0800bd0c <_fini>:
 800bd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd0e:	bf00      	nop
 800bd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd12:	bc08      	pop	{r3}
 800bd14:	469e      	mov	lr, r3
 800bd16:	4770      	bx	lr
