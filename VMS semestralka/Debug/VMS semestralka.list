
VMS semestralka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e90  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800a018  0800a018  0001a018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a090  0800a090  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a090  0800a090  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a090  0800a090  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a090  0800a090  0001a090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a094  0800a094  0001a094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800a098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002017c  2**0
                  CONTENTS
 10 .bss          000012e0  2000017c  2000017c  0002017c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000145c  2000145c  0002017c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001430d  00000000  00000000  000201ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000358a  00000000  00000000  000344fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001178  00000000  00000000  00037a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d50  00000000  00000000  00038c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021103  00000000  00000000  00039950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018709  00000000  00000000  0005aa53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bf8eb  00000000  00000000  0007315c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000047d4  00000000  00000000  00132a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0013721c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000017c 	.word	0x2000017c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a000 	.word	0x0800a000

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000180 	.word	0x20000180
 80001c4:	0800a000 	.word	0x0800a000

080001c8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001ce:	f000 fba9 	bl	8000924 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001d2:	f000 f829 	bl	8000228 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001d6:	f000 f9e5 	bl	80005a4 <MX_GPIO_Init>
	MX_ADC1_Init();
 80001da:	f000 f889 	bl	80002f0 <MX_ADC1_Init>
	MX_ADC3_Init();
 80001de:	f000 f8f7 	bl	80003d0 <MX_ADC3_Init>
	MX_TIM17_Init();
 80001e2:	f000 f965 	bl	80004b0 <MX_TIM17_Init>
	MX_USB_DEVICE_Init();
 80001e6:	f009 fa3b 	bl	8009660 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	Pin_struct LD9 = constructor(LD9_GPIO_Port, LD9_Pin);
 80001ea:	463b      	mov	r3, r7
 80001ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80001f0:	490c      	ldr	r1, [pc, #48]	; (8000224 <main+0x5c>)
 80001f2:	4618      	mov	r0, r3
 80001f4:	f007 febe 	bl	8007f74 <constructor>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		pisPin(LD9, 1);
 80001f8:	2201      	movs	r2, #1
 80001fa:	463b      	mov	r3, r7
 80001fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000200:	f007 fed1 	bl	8007fa6 <pisPin>
		HAL_Delay(500);
 8000204:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000208:	f000 fbf2 	bl	80009f0 <HAL_Delay>
		pisPin(LD9, 0);
 800020c:	2200      	movs	r2, #0
 800020e:	463b      	mov	r3, r7
 8000210:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000214:	f007 fec7 	bl	8007fa6 <pisPin>
		HAL_Delay(500);
 8000218:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800021c:	f000 fbe8 	bl	80009f0 <HAL_Delay>
		pisPin(LD9, 1);
 8000220:	e7ea      	b.n	80001f8 <main+0x30>
 8000222:	bf00      	nop
 8000224:	48001000 	.word	0x48001000

08000228 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b09e      	sub	sp, #120	; 0x78
 800022c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800022e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000232:	2228      	movs	r2, #40	; 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f009 feb6 	bl	8009fa8 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800023c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]
 8000248:	60da      	str	r2, [r3, #12]
 800024a:	611a      	str	r2, [r3, #16]
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
 800024c:	463b      	mov	r3, r7
 800024e:	223c      	movs	r2, #60	; 0x3c
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f009 fea8 	bl	8009fa8 <memset>
	{ 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000258:	2301      	movs	r3, #1
 800025a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800025c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000260:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000266:	2301      	movs	r3, #1
 8000268:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026a:	2302      	movs	r3, #2
 800026c:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800026e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000272:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000274:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000278:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800027e:	4618      	mov	r0, r3
 8000280:	f003 f97a 	bl	8003578 <HAL_RCC_OscConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x66>
	{
		Error_Handler();
 800028a:	f000 f9f1 	bl	8000670 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800028e:	230f      	movs	r3, #15
 8000290:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000292:	2302      	movs	r3, #2
 8000294:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800029a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002a8:	2101      	movs	r1, #1
 80002aa:	4618      	mov	r0, r3
 80002ac:	f004 f9a2 	bl	80045f4 <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x92>
	{
		Error_Handler();
 80002b6:	f000 f9db 	bl	8000670 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB | RCC_PERIPHCLK_ADC12
 80002ba:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <SystemClock_Config+0xc4>)
 80002bc:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_ADC34;
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002c2:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80002c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002c8:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80002ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002ce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d0:	463b      	mov	r3, r7
 80002d2:	4618      	mov	r0, r3
 80002d4:	f004 fb74 	bl	80049c0 <HAL_RCCEx_PeriphCLKConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0xba>
	{
		Error_Handler();
 80002de:	f000 f9c7 	bl	8000670 <Error_Handler>
	}
}
 80002e2:	bf00      	nop
 80002e4:	3778      	adds	r7, #120	; 0x78
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	00020180 	.word	0x00020180

080002f0 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b08a      	sub	sp, #40	; 0x28
 80002f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode =
 80002f6:	f107 031c 	add.w	r3, r7, #28
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
	{ 0 };
	ADC_ChannelConfTypeDef sConfig =
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	605a      	str	r2, [r3, #4]
 800030a:	609a      	str	r2, [r3, #8]
 800030c:	60da      	str	r2, [r3, #12]
 800030e:	611a      	str	r2, [r3, #16]
 8000310:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000312:	4b2e      	ldr	r3, [pc, #184]	; (80003cc <MX_ADC1_Init+0xdc>)
 8000314:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000318:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800031a:	4b2c      	ldr	r3, [pc, #176]	; (80003cc <MX_ADC1_Init+0xdc>)
 800031c:	2200      	movs	r2, #0
 800031e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000320:	4b2a      	ldr	r3, [pc, #168]	; (80003cc <MX_ADC1_Init+0xdc>)
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000326:	4b29      	ldr	r3, [pc, #164]	; (80003cc <MX_ADC1_Init+0xdc>)
 8000328:	2200      	movs	r2, #0
 800032a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800032c:	4b27      	ldr	r3, [pc, #156]	; (80003cc <MX_ADC1_Init+0xdc>)
 800032e:	2200      	movs	r2, #0
 8000330:	765a      	strb	r2, [r3, #25]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000332:	4b26      	ldr	r3, [pc, #152]	; (80003cc <MX_ADC1_Init+0xdc>)
 8000334:	2200      	movs	r2, #0
 8000336:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800033a:	4b24      	ldr	r3, [pc, #144]	; (80003cc <MX_ADC1_Init+0xdc>)
 800033c:	2200      	movs	r2, #0
 800033e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000340:	4b22      	ldr	r3, [pc, #136]	; (80003cc <MX_ADC1_Init+0xdc>)
 8000342:	2201      	movs	r2, #1
 8000344:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000346:	4b21      	ldr	r3, [pc, #132]	; (80003cc <MX_ADC1_Init+0xdc>)
 8000348:	2200      	movs	r2, #0
 800034a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800034c:	4b1f      	ldr	r3, [pc, #124]	; (80003cc <MX_ADC1_Init+0xdc>)
 800034e:	2201      	movs	r2, #1
 8000350:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000352:	4b1e      	ldr	r3, [pc, #120]	; (80003cc <MX_ADC1_Init+0xdc>)
 8000354:	2200      	movs	r2, #0
 8000356:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800035a:	4b1c      	ldr	r3, [pc, #112]	; (80003cc <MX_ADC1_Init+0xdc>)
 800035c:	2204      	movs	r2, #4
 800035e:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000360:	4b1a      	ldr	r3, [pc, #104]	; (80003cc <MX_ADC1_Init+0xdc>)
 8000362:	2200      	movs	r2, #0
 8000364:	761a      	strb	r2, [r3, #24]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000366:	4b19      	ldr	r3, [pc, #100]	; (80003cc <MX_ADC1_Init+0xdc>)
 8000368:	2200      	movs	r2, #0
 800036a:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800036c:	4817      	ldr	r0, [pc, #92]	; (80003cc <MX_ADC1_Init+0xdc>)
 800036e:	f000 fb63 	bl	8000a38 <HAL_ADC_Init>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_ADC1_Init+0x8c>
	{
		Error_Handler();
 8000378:	f000 f97a 	bl	8000670 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 800037c:	2300      	movs	r3, #0
 800037e:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000380:	f107 031c 	add.w	r3, r7, #28
 8000384:	4619      	mov	r1, r3
 8000386:	4811      	ldr	r0, [pc, #68]	; (80003cc <MX_ADC1_Init+0xdc>)
 8000388:	f001 f820 	bl	80013cc <HAL_ADCEx_MultiModeConfigChannel>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_ADC1_Init+0xa6>
	{
		Error_Handler();
 8000392:	f000 f96d 	bl	8000670 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8000396:	2302      	movs	r3, #2
 8000398:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800039a:	2301      	movs	r3, #1
 800039c:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800039e:	2300      	movs	r3, #0
 80003a0:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003a2:	2300      	movs	r3, #0
 80003a4:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003a6:	2300      	movs	r3, #0
 80003a8:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	4619      	mov	r1, r3
 80003b2:	4806      	ldr	r0, [pc, #24]	; (80003cc <MX_ADC1_Init+0xdc>)
 80003b4:	f000 fd20 	bl	8000df8 <HAL_ADC_ConfigChannel>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_ADC1_Init+0xd2>
	{
		Error_Handler();
 80003be:	f000 f957 	bl	8000670 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80003c2:	bf00      	nop
 80003c4:	3728      	adds	r7, #40	; 0x28
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000198 	.word	0x20000198

080003d0 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b08a      	sub	sp, #40	; 0x28
 80003d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_MultiModeTypeDef multimode =
 80003d6:	f107 031c 	add.w	r3, r7, #28
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
	{ 0 };
	ADC_ChannelConfTypeDef sConfig =
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
 80003ec:	60da      	str	r2, [r3, #12]
 80003ee:	611a      	str	r2, [r3, #16]
 80003f0:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC3_Init 1 */

	/** Common config
	 */
	hadc3.Instance = ADC3;
 80003f2:	4b2d      	ldr	r3, [pc, #180]	; (80004a8 <MX_ADC3_Init+0xd8>)
 80003f4:	4a2d      	ldr	r2, [pc, #180]	; (80004ac <MX_ADC3_Init+0xdc>)
 80003f6:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003f8:	4b2b      	ldr	r3, [pc, #172]	; (80004a8 <MX_ADC3_Init+0xd8>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80003fe:	4b2a      	ldr	r3, [pc, #168]	; (80004a8 <MX_ADC3_Init+0xd8>)
 8000400:	2200      	movs	r2, #0
 8000402:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000404:	4b28      	ldr	r3, [pc, #160]	; (80004a8 <MX_ADC3_Init+0xd8>)
 8000406:	2200      	movs	r2, #0
 8000408:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 800040a:	4b27      	ldr	r3, [pc, #156]	; (80004a8 <MX_ADC3_Init+0xd8>)
 800040c:	2200      	movs	r2, #0
 800040e:	765a      	strb	r2, [r3, #25]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000410:	4b25      	ldr	r3, [pc, #148]	; (80004a8 <MX_ADC3_Init+0xd8>)
 8000412:	2200      	movs	r2, #0
 8000414:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000418:	4b23      	ldr	r3, [pc, #140]	; (80004a8 <MX_ADC3_Init+0xd8>)
 800041a:	2200      	movs	r2, #0
 800041c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800041e:	4b22      	ldr	r3, [pc, #136]	; (80004a8 <MX_ADC3_Init+0xd8>)
 8000420:	2201      	movs	r2, #1
 8000422:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000424:	4b20      	ldr	r3, [pc, #128]	; (80004a8 <MX_ADC3_Init+0xd8>)
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 800042a:	4b1f      	ldr	r3, [pc, #124]	; (80004a8 <MX_ADC3_Init+0xd8>)
 800042c:	2201      	movs	r2, #1
 800042e:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8000430:	4b1d      	ldr	r3, [pc, #116]	; (80004a8 <MX_ADC3_Init+0xd8>)
 8000432:	2200      	movs	r2, #0
 8000434:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <MX_ADC3_Init+0xd8>)
 800043a:	2204      	movs	r2, #4
 800043c:	615a      	str	r2, [r3, #20]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 800043e:	4b1a      	ldr	r3, [pc, #104]	; (80004a8 <MX_ADC3_Init+0xd8>)
 8000440:	2200      	movs	r2, #0
 8000442:	761a      	strb	r2, [r3, #24]
	hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000444:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <MX_ADC3_Init+0xd8>)
 8000446:	2200      	movs	r2, #0
 8000448:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800044a:	4817      	ldr	r0, [pc, #92]	; (80004a8 <MX_ADC3_Init+0xd8>)
 800044c:	f000 faf4 	bl	8000a38 <HAL_ADC_Init>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_ADC3_Init+0x8a>
	{
		Error_Handler();
 8000456:	f000 f90b 	bl	8000670 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 800045a:	2300      	movs	r3, #0
 800045c:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800045e:	f107 031c 	add.w	r3, r7, #28
 8000462:	4619      	mov	r1, r3
 8000464:	4810      	ldr	r0, [pc, #64]	; (80004a8 <MX_ADC3_Init+0xd8>)
 8000466:	f000 ffb1 	bl	80013cc <HAL_ADCEx_MultiModeConfigChannel>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_ADC3_Init+0xa4>
	{
		Error_Handler();
 8000470:	f000 f8fe 	bl	8000670 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000474:	2301      	movs	r3, #1
 8000476:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000478:	2301      	movs	r3, #1
 800047a:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800047c:	2300      	movs	r3, #0
 800047e:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000480:	2300      	movs	r3, #0
 8000482:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000484:	2300      	movs	r3, #0
 8000486:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000488:	2300      	movs	r3, #0
 800048a:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	4619      	mov	r1, r3
 8000490:	4805      	ldr	r0, [pc, #20]	; (80004a8 <MX_ADC3_Init+0xd8>)
 8000492:	f000 fcb1 	bl	8000df8 <HAL_ADC_ConfigChannel>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_ADC3_Init+0xd0>
	{
		Error_Handler();
 800049c:	f000 f8e8 	bl	8000670 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 80004a0:	bf00      	nop
 80004a2:	3728      	adds	r7, #40	; 0x28
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	200001e8 	.word	0x200001e8
 80004ac:	50000400 	.word	0x50000400

080004b0 <MX_TIM17_Init>:
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b092      	sub	sp, #72	; 0x48
 80004b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM17_Init 0 */

	/* USER CODE END TIM17_Init 0 */

	TIM_OC_InitTypeDef sConfigOC =
 80004b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
 80004be:	605a      	str	r2, [r3, #4]
 80004c0:	609a      	str	r2, [r3, #8]
 80004c2:	60da      	str	r2, [r3, #12]
 80004c4:	611a      	str	r2, [r3, #16]
 80004c6:	615a      	str	r2, [r3, #20]
 80004c8:	619a      	str	r2, [r3, #24]
	{ 0 };
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig =
 80004ca:	463b      	mov	r3, r7
 80004cc:	222c      	movs	r2, #44	; 0x2c
 80004ce:	2100      	movs	r1, #0
 80004d0:	4618      	mov	r0, r3
 80004d2:	f009 fd69 	bl	8009fa8 <memset>
	{ 0 };

	/* USER CODE BEGIN TIM17_Init 1 */

	/* USER CODE END TIM17_Init 1 */
	htim17.Instance = TIM17;
 80004d6:	4b31      	ldr	r3, [pc, #196]	; (800059c <MX_TIM17_Init+0xec>)
 80004d8:	4a31      	ldr	r2, [pc, #196]	; (80005a0 <MX_TIM17_Init+0xf0>)
 80004da:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = 1000;
 80004dc:	4b2f      	ldr	r3, [pc, #188]	; (800059c <MX_TIM17_Init+0xec>)
 80004de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004e2:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004e4:	4b2d      	ldr	r3, [pc, #180]	; (800059c <MX_TIM17_Init+0xec>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 48;
 80004ea:	4b2c      	ldr	r3, [pc, #176]	; (800059c <MX_TIM17_Init+0xec>)
 80004ec:	2230      	movs	r2, #48	; 0x30
 80004ee:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004f0:	4b2a      	ldr	r3, [pc, #168]	; (800059c <MX_TIM17_Init+0xec>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	611a      	str	r2, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 80004f6:	4b29      	ldr	r3, [pc, #164]	; (800059c <MX_TIM17_Init+0xec>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	615a      	str	r2, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004fc:	4b27      	ldr	r3, [pc, #156]	; (800059c <MX_TIM17_Init+0xec>)
 80004fe:	2200      	movs	r2, #0
 8000500:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000502:	4826      	ldr	r0, [pc, #152]	; (800059c <MX_TIM17_Init+0xec>)
 8000504:	f004 fc0c 	bl	8004d20 <HAL_TIM_Base_Init>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_TIM17_Init+0x62>
	{
		Error_Handler();
 800050e:	f000 f8af 	bl	8000670 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000512:	4822      	ldr	r0, [pc, #136]	; (800059c <MX_TIM17_Init+0xec>)
 8000514:	f004 fc5b 	bl	8004dce <HAL_TIM_PWM_Init>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_TIM17_Init+0x72>
	{
		Error_Handler();
 800051e:	f000 f8a7 	bl	8000670 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000522:	2360      	movs	r3, #96	; 0x60
 8000524:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.Pulse = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800052a:	2300      	movs	r3, #0
 800052c:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800052e:	2300      	movs	r3, #0
 8000530:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000532:	2300      	movs	r3, #0
 8000534:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000536:	2300      	movs	r3, #0
 8000538:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800053a:	2300      	movs	r3, #0
 800053c:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800053e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000542:	2200      	movs	r2, #0
 8000544:	4619      	mov	r1, r3
 8000546:	4815      	ldr	r0, [pc, #84]	; (800059c <MX_TIM17_Init+0xec>)
 8000548:	f004 fca2 	bl	8004e90 <HAL_TIM_PWM_ConfigChannel>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_TIM17_Init+0xa6>
	{
		Error_Handler();
 8000552:	f000 f88d 	bl	8000670 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000556:	2300      	movs	r3, #0
 8000558:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000566:	2300      	movs	r3, #0
 8000568:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800056a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800056e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000574:	2300      	movs	r3, #0
 8000576:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000578:	463b      	mov	r3, r7
 800057a:	4619      	mov	r1, r3
 800057c:	4807      	ldr	r0, [pc, #28]	; (800059c <MX_TIM17_Init+0xec>)
 800057e:	f005 f901 	bl	8005784 <HAL_TIMEx_ConfigBreakDeadTime>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <MX_TIM17_Init+0xdc>
	{
		Error_Handler();
 8000588:	f000 f872 	bl	8000670 <Error_Handler>
	}
	/* USER CODE BEGIN TIM17_Init 2 */

	/* USER CODE END TIM17_Init 2 */
	HAL_TIM_MspPostInit(&htim17);
 800058c:	4803      	ldr	r0, [pc, #12]	; (800059c <MX_TIM17_Init+0xec>)
 800058e:	f000 f923 	bl	80007d8 <HAL_TIM_MspPostInit>

}
 8000592:	bf00      	nop
 8000594:	3748      	adds	r7, #72	; 0x48
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000238 	.word	0x20000238
 80005a0:	40014800 	.word	0x40014800

080005a4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]
	{ 0 };
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80005ba:	4b2b      	ldr	r3, [pc, #172]	; (8000668 <MX_GPIO_Init+0xc4>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	4a2a      	ldr	r2, [pc, #168]	; (8000668 <MX_GPIO_Init+0xc4>)
 80005c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005c4:	6153      	str	r3, [r2, #20]
 80005c6:	4b28      	ldr	r3, [pc, #160]	; (8000668 <MX_GPIO_Init+0xc4>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005ce:	613b      	str	r3, [r7, #16]
 80005d0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	4b25      	ldr	r3, [pc, #148]	; (8000668 <MX_GPIO_Init+0xc4>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	4a24      	ldr	r2, [pc, #144]	; (8000668 <MX_GPIO_Init+0xc4>)
 80005d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005dc:	6153      	str	r3, [r2, #20]
 80005de:	4b22      	ldr	r3, [pc, #136]	; (8000668 <MX_GPIO_Init+0xc4>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005ea:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <MX_GPIO_Init+0xc4>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	4a1e      	ldr	r2, [pc, #120]	; (8000668 <MX_GPIO_Init+0xc4>)
 80005f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005f4:	6153      	str	r3, [r2, #20]
 80005f6:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <MX_GPIO_Init+0xc4>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000602:	4b19      	ldr	r3, [pc, #100]	; (8000668 <MX_GPIO_Init+0xc4>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4a18      	ldr	r2, [pc, #96]	; (8000668 <MX_GPIO_Init+0xc4>)
 8000608:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800060c:	6153      	str	r3, [r2, #20]
 800060e:	4b16      	ldr	r3, [pc, #88]	; (8000668 <MX_GPIO_Init+0xc4>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000620:	4812      	ldr	r0, [pc, #72]	; (800066c <MX_GPIO_Init+0xc8>)
 8000622:	f001 fab7 	bl	8001b94 <HAL_GPIO_WritePin>
			LD4_Pin | LD3_Pin | LD5_Pin | LD7_Pin | LD9_Pin | LD10_Pin | LD8_Pin
					| LD6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000626:	2301      	movs	r3, #1
 8000628:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062a:	2300      	movs	r3, #0
 800062c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4619      	mov	r1, r3
 8000638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063c:	f001 f930 	bl	80018a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD7_Pin
	 LD9_Pin LD10_Pin LD8_Pin LD6_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD7_Pin | LD9_Pin
 8000640:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000644:	617b      	str	r3, [r7, #20]
			| LD10_Pin | LD8_Pin | LD6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000646:	2301      	movs	r3, #1
 8000648:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064e:	2300      	movs	r3, #0
 8000650:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4619      	mov	r1, r3
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <MX_GPIO_Init+0xc8>)
 800065a:	f001 f921 	bl	80018a0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800065e:	bf00      	nop
 8000660:	3728      	adds	r7, #40	; 0x28
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40021000 	.word	0x40021000
 800066c:	48001000 	.word	0x48001000

08000670 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000674:	b672      	cpsid	i
}
 8000676:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000678:	e7fe      	b.n	8000678 <Error_Handler+0x8>
	...

0800067c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <HAL_MspInit+0x44>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <HAL_MspInit+0x44>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6193      	str	r3, [r2, #24]
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <HAL_MspInit+0x44>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <HAL_MspInit+0x44>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <HAL_MspInit+0x44>)
 80006a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a4:	61d3      	str	r3, [r2, #28]
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HAL_MspInit+0x44>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006b2:	2007      	movs	r0, #7
 80006b4:	f001 f8b2 	bl	800181c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000

080006c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08c      	sub	sp, #48	; 0x30
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006e4:	d125      	bne.n	8000732 <HAL_ADC_MspInit+0x6e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <HAL_ADC_MspInit+0xc8>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	4a28      	ldr	r2, [pc, #160]	; (800078c <HAL_ADC_MspInit+0xc8>)
 80006ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f0:	6153      	str	r3, [r2, #20]
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <HAL_ADC_MspInit+0xc8>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fa:	61bb      	str	r3, [r7, #24]
 80006fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	4b23      	ldr	r3, [pc, #140]	; (800078c <HAL_ADC_MspInit+0xc8>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	4a22      	ldr	r2, [pc, #136]	; (800078c <HAL_ADC_MspInit+0xc8>)
 8000704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000708:	6153      	str	r3, [r2, #20]
 800070a:	4b20      	ldr	r3, [pc, #128]	; (800078c <HAL_ADC_MspInit+0xc8>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000712:	617b      	str	r3, [r7, #20]
 8000714:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000716:	2302      	movs	r3, #2
 8000718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800071a:	2303      	movs	r3, #3
 800071c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4619      	mov	r1, r3
 8000728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072c:	f001 f8b8 	bl	80018a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000730:	e028      	b.n	8000784 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a16      	ldr	r2, [pc, #88]	; (8000790 <HAL_ADC_MspInit+0xcc>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d123      	bne.n	8000784 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC34_CLK_ENABLE();
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <HAL_ADC_MspInit+0xc8>)
 800073e:	695b      	ldr	r3, [r3, #20]
 8000740:	4a12      	ldr	r2, [pc, #72]	; (800078c <HAL_ADC_MspInit+0xc8>)
 8000742:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000746:	6153      	str	r3, [r2, #20]
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <HAL_ADC_MspInit+0xc8>)
 800074a:	695b      	ldr	r3, [r3, #20]
 800074c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000754:	4b0d      	ldr	r3, [pc, #52]	; (800078c <HAL_ADC_MspInit+0xc8>)
 8000756:	695b      	ldr	r3, [r3, #20]
 8000758:	4a0c      	ldr	r2, [pc, #48]	; (800078c <HAL_ADC_MspInit+0xc8>)
 800075a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800075e:	6153      	str	r3, [r2, #20]
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <HAL_ADC_MspInit+0xc8>)
 8000762:	695b      	ldr	r3, [r3, #20]
 8000764:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800076c:	2302      	movs	r3, #2
 800076e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000770:	2303      	movs	r3, #3
 8000772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	4619      	mov	r1, r3
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <HAL_ADC_MspInit+0xd0>)
 8000780:	f001 f88e 	bl	80018a0 <HAL_GPIO_Init>
}
 8000784:	bf00      	nop
 8000786:	3730      	adds	r7, #48	; 0x30
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40021000 	.word	0x40021000
 8000790:	50000400 	.word	0x50000400
 8000794:	48000400 	.word	0x48000400

08000798 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <HAL_TIM_Base_MspInit+0x38>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d10b      	bne.n	80007c2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80007aa:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <HAL_TIM_Base_MspInit+0x3c>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	4a09      	ldr	r2, [pc, #36]	; (80007d4 <HAL_TIM_Base_MspInit+0x3c>)
 80007b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007b4:	6193      	str	r3, [r2, #24]
 80007b6:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <HAL_TIM_Base_MspInit+0x3c>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80007c2:	bf00      	nop
 80007c4:	3714      	adds	r7, #20
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40014800 	.word	0x40014800
 80007d4:	40021000 	.word	0x40021000

080007d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a11      	ldr	r2, [pc, #68]	; (800083c <HAL_TIM_MspPostInit+0x64>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d11c      	bne.n	8000834 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <HAL_TIM_MspPostInit+0x68>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	4a10      	ldr	r2, [pc, #64]	; (8000840 <HAL_TIM_MspPostInit+0x68>)
 8000800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000804:	6153      	str	r3, [r2, #20]
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <HAL_TIM_MspPostInit+0x68>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000816:	2302      	movs	r3, #2
 8000818:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8000822:	2301      	movs	r3, #1
 8000824:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	4619      	mov	r1, r3
 800082c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000830:	f001 f836 	bl	80018a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000834:	bf00      	nop
 8000836:	3720      	adds	r7, #32
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40014800 	.word	0x40014800
 8000840:	40021000 	.word	0x40021000

08000844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <NMI_Handler+0x4>

0800084a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <HardFault_Handler+0x4>

08000850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <MemManage_Handler+0x4>

08000856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <UsageFault_Handler+0x4>

08000862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000890:	f000 f88e 	bl	80009b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}

08000898 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800089c:	4802      	ldr	r0, [pc, #8]	; (80008a8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800089e:	f001 fa89 	bl	8001db4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000f50 	.word	0x20000f50

080008ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <SystemInit+0x20>)
 80008b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b6:	4a05      	ldr	r2, [pc, #20]	; (80008cc <SystemInit+0x20>)
 80008b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000908 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008d4:	f7ff ffea 	bl	80008ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d8:	480c      	ldr	r0, [pc, #48]	; (800090c <LoopForever+0x6>)
  ldr r1, =_edata
 80008da:	490d      	ldr	r1, [pc, #52]	; (8000910 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008dc:	4a0d      	ldr	r2, [pc, #52]	; (8000914 <LoopForever+0xe>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e0:	e002      	b.n	80008e8 <LoopCopyDataInit>

080008e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e6:	3304      	adds	r3, #4

080008e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ec:	d3f9      	bcc.n	80008e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ee:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f0:	4c0a      	ldr	r4, [pc, #40]	; (800091c <LoopForever+0x16>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f4:	e001      	b.n	80008fa <LoopFillZerobss>

080008f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f8:	3204      	adds	r2, #4

080008fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008fc:	d3fb      	bcc.n	80008f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008fe:	f009 fb5b 	bl	8009fb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000902:	f7ff fc61 	bl	80001c8 <main>

08000906 <LoopForever>:

LoopForever:
    b LoopForever
 8000906:	e7fe      	b.n	8000906 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000908:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800090c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000910:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000914:	0800a098 	.word	0x0800a098
  ldr r2, =_sbss
 8000918:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 800091c:	2000145c 	.word	0x2000145c

08000920 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <ADC1_2_IRQHandler>
	...

08000924 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <HAL_Init+0x28>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a07      	ldr	r2, [pc, #28]	; (800094c <HAL_Init+0x28>)
 800092e:	f043 0310 	orr.w	r3, r3, #16
 8000932:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000934:	2003      	movs	r0, #3
 8000936:	f000 ff71 	bl	800181c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800093a:	2000      	movs	r0, #0
 800093c:	f000 f808 	bl	8000950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000940:	f7ff fe9c 	bl	800067c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40022000 	.word	0x40022000

08000950 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <HAL_InitTick+0x54>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_InitTick+0x58>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000966:	fbb3 f3f1 	udiv	r3, r3, r1
 800096a:	fbb2 f3f3 	udiv	r3, r2, r3
 800096e:	4618      	mov	r0, r3
 8000970:	f000 ff89 	bl	8001886 <HAL_SYSTICK_Config>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	e00e      	b.n	800099c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2b0f      	cmp	r3, #15
 8000982:	d80a      	bhi.n	800099a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000984:	2200      	movs	r2, #0
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	f04f 30ff 	mov.w	r0, #4294967295
 800098c:	f000 ff51 	bl	8001832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000990:	4a06      	ldr	r2, [pc, #24]	; (80009ac <HAL_InitTick+0x5c>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000996:	2300      	movs	r3, #0
 8000998:	e000      	b.n	800099c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
}
 800099c:	4618      	mov	r0, r3
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000000 	.word	0x20000000
 80009a8:	20000008 	.word	0x20000008
 80009ac:	20000004 	.word	0x20000004

080009b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_IncTick+0x20>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_IncTick+0x24>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4413      	add	r3, r2
 80009c0:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <HAL_IncTick+0x24>)
 80009c2:	6013      	str	r3, [r2, #0]
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	20000008 	.word	0x20000008
 80009d4:	20000284 	.word	0x20000284

080009d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return uwTick;  
 80009dc:	4b03      	ldr	r3, [pc, #12]	; (80009ec <HAL_GetTick+0x14>)
 80009de:	681b      	ldr	r3, [r3, #0]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000284 	.word	0x20000284

080009f0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009f8:	f7ff ffee 	bl	80009d8 <HAL_GetTick>
 80009fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a08:	d005      	beq.n	8000a16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <HAL_Delay+0x44>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4413      	add	r3, r2
 8000a14:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a16:	bf00      	nop
 8000a18:	f7ff ffde 	bl	80009d8 <HAL_GetTick>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d8f7      	bhi.n	8000a18 <HAL_Delay+0x28>
  {
  }
}
 8000a28:	bf00      	nop
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000008 	.word	0x20000008

08000a38 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b09a      	sub	sp, #104	; 0x68
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a40:	2300      	movs	r3, #0
 8000a42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000a46:	2300      	movs	r3, #0
 8000a48:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d101      	bne.n	8000a58 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000a54:	2301      	movs	r3, #1
 8000a56:	e1c9      	b.n	8000dec <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	691b      	ldr	r3, [r3, #16]
 8000a5c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	f003 0310 	and.w	r3, r3, #16
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d176      	bne.n	8000b58 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d152      	bne.n	8000b18 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2200      	movs	r2, #0
 8000a82:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff fe19 	bl	80006c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d13b      	bne.n	8000b18 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f000 fd85 	bl	80015b0 <ADC_Disable>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	f003 0310 	and.w	r3, r3, #16
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d12f      	bne.n	8000b18 <HAL_ADC_Init+0xe0>
 8000ab8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d12b      	bne.n	8000b18 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ac8:	f023 0302 	bic.w	r3, r3, #2
 8000acc:	f043 0202 	orr.w	r2, r3, #2
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	689a      	ldr	r2, [r3, #8]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ae2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	689a      	ldr	r2, [r3, #8]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000af2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000af4:	4b86      	ldr	r3, [pc, #536]	; (8000d10 <HAL_ADC_Init+0x2d8>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a86      	ldr	r2, [pc, #536]	; (8000d14 <HAL_ADC_Init+0x2dc>)
 8000afa:	fba2 2303 	umull	r2, r3, r2, r3
 8000afe:	0c9a      	lsrs	r2, r3, #18
 8000b00:	4613      	mov	r3, r2
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	4413      	add	r3, r2
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b0a:	e002      	b.n	8000b12 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d1f9      	bne.n	8000b0c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d007      	beq.n	8000b36 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000b30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b34:	d110      	bne.n	8000b58 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f023 0312 	bic.w	r3, r3, #18
 8000b3e:	f043 0210 	orr.w	r2, r3, #16
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	f043 0201 	orr.w	r2, r3, #1
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	f003 0310 	and.w	r3, r3, #16
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	f040 8136 	bne.w	8000dd2 <HAL_ADC_Init+0x39a>
 8000b66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f040 8131 	bne.w	8000dd2 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f040 8129 	bne.w	8000dd2 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000b88:	f043 0202 	orr.w	r2, r3, #2
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b98:	d004      	beq.n	8000ba4 <HAL_ADC_Init+0x16c>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a5e      	ldr	r2, [pc, #376]	; (8000d18 <HAL_ADC_Init+0x2e0>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d101      	bne.n	8000ba8 <HAL_ADC_Init+0x170>
 8000ba4:	4b5d      	ldr	r3, [pc, #372]	; (8000d1c <HAL_ADC_Init+0x2e4>)
 8000ba6:	e000      	b.n	8000baa <HAL_ADC_Init+0x172>
 8000ba8:	4b5d      	ldr	r3, [pc, #372]	; (8000d20 <HAL_ADC_Init+0x2e8>)
 8000baa:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bb4:	d102      	bne.n	8000bbc <HAL_ADC_Init+0x184>
 8000bb6:	4b58      	ldr	r3, [pc, #352]	; (8000d18 <HAL_ADC_Init+0x2e0>)
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	e01a      	b.n	8000bf2 <HAL_ADC_Init+0x1ba>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a55      	ldr	r2, [pc, #340]	; (8000d18 <HAL_ADC_Init+0x2e0>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d103      	bne.n	8000bce <HAL_ADC_Init+0x196>
 8000bc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	e011      	b.n	8000bf2 <HAL_ADC_Init+0x1ba>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a54      	ldr	r2, [pc, #336]	; (8000d24 <HAL_ADC_Init+0x2ec>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d102      	bne.n	8000bde <HAL_ADC_Init+0x1a6>
 8000bd8:	4b53      	ldr	r3, [pc, #332]	; (8000d28 <HAL_ADC_Init+0x2f0>)
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	e009      	b.n	8000bf2 <HAL_ADC_Init+0x1ba>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a51      	ldr	r2, [pc, #324]	; (8000d28 <HAL_ADC_Init+0x2f0>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d102      	bne.n	8000bee <HAL_ADC_Init+0x1b6>
 8000be8:	4b4e      	ldr	r3, [pc, #312]	; (8000d24 <HAL_ADC_Init+0x2ec>)
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	e001      	b.n	8000bf2 <HAL_ADC_Init+0x1ba>
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	f003 0303 	and.w	r3, r3, #3
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d108      	bne.n	8000c12 <HAL_ADC_Init+0x1da>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d101      	bne.n	8000c12 <HAL_ADC_Init+0x1da>
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e000      	b.n	8000c14 <HAL_ADC_Init+0x1dc>
 8000c12:	2300      	movs	r3, #0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d11c      	bne.n	8000c52 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000c18:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d010      	beq.n	8000c40 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	f003 0303 	and.w	r3, r3, #3
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d107      	bne.n	8000c3a <HAL_ADC_Init+0x202>
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d101      	bne.n	8000c3a <HAL_ADC_Init+0x202>
 8000c36:	2301      	movs	r3, #1
 8000c38:	e000      	b.n	8000c3c <HAL_ADC_Init+0x204>
 8000c3a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d108      	bne.n	8000c52 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000c40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	431a      	orrs	r2, r3
 8000c4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c50:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	7e5b      	ldrb	r3, [r3, #25]
 8000c56:	035b      	lsls	r3, r3, #13
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c5c:	2a01      	cmp	r2, #1
 8000c5e:	d002      	beq.n	8000c66 <HAL_ADC_Init+0x22e>
 8000c60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c64:	e000      	b.n	8000c68 <HAL_ADC_Init+0x230>
 8000c66:	2200      	movs	r2, #0
 8000c68:	431a      	orrs	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d11b      	bne.n	8000cbe <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	7e5b      	ldrb	r3, [r3, #25]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d109      	bne.n	8000ca2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c92:	3b01      	subs	r3, #1
 8000c94:	045a      	lsls	r2, r3, #17
 8000c96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c9e:	663b      	str	r3, [r7, #96]	; 0x60
 8000ca0:	e00d      	b.n	8000cbe <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000caa:	f043 0220 	orr.w	r2, r3, #32
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	f043 0201 	orr.w	r2, r3, #1
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d03a      	beq.n	8000d3c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a16      	ldr	r2, [pc, #88]	; (8000d24 <HAL_ADC_Init+0x2ec>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d004      	beq.n	8000cda <HAL_ADC_Init+0x2a2>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a14      	ldr	r2, [pc, #80]	; (8000d28 <HAL_ADC_Init+0x2f0>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d128      	bne.n	8000d2c <HAL_ADC_Init+0x2f4>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cde:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000ce2:	d012      	beq.n	8000d0a <HAL_ADC_Init+0x2d2>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cec:	d00a      	beq.n	8000d04 <HAL_ADC_Init+0x2cc>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000cf6:	d002      	beq.n	8000cfe <HAL_ADC_Init+0x2c6>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfc:	e018      	b.n	8000d30 <HAL_ADC_Init+0x2f8>
 8000cfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d02:	e015      	b.n	8000d30 <HAL_ADC_Init+0x2f8>
 8000d04:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000d08:	e012      	b.n	8000d30 <HAL_ADC_Init+0x2f8>
 8000d0a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000d0e:	e00f      	b.n	8000d30 <HAL_ADC_Init+0x2f8>
 8000d10:	20000000 	.word	0x20000000
 8000d14:	431bde83 	.word	0x431bde83
 8000d18:	50000100 	.word	0x50000100
 8000d1c:	50000300 	.word	0x50000300
 8000d20:	50000700 	.word	0x50000700
 8000d24:	50000400 	.word	0x50000400
 8000d28:	50000500 	.word	0x50000500
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000d34:	4313      	orrs	r3, r2
 8000d36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	f003 030c 	and.w	r3, r3, #12
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d114      	bne.n	8000d74 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	6812      	ldr	r2, [r2, #0]
 8000d54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d58:	f023 0302 	bic.w	r3, r3, #2
 8000d5c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	7e1b      	ldrb	r3, [r3, #24]
 8000d62:	039a      	lsls	r2, r3, #14
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d70:	4313      	orrs	r3, r2
 8000d72:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	68da      	ldr	r2, [r3, #12]
 8000d7a:	4b1e      	ldr	r3, [pc, #120]	; (8000df4 <HAL_ADC_Init+0x3bc>)
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	6812      	ldr	r2, [r2, #0]
 8000d82:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000d84:	430b      	orrs	r3, r1
 8000d86:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d10c      	bne.n	8000daa <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f023 010f 	bic.w	r1, r3, #15
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	1e5a      	subs	r2, r3, #1
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	430a      	orrs	r2, r1
 8000da6:	631a      	str	r2, [r3, #48]	; 0x30
 8000da8:	e007      	b.n	8000dba <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f022 020f 	bic.w	r2, r2, #15
 8000db8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc4:	f023 0303 	bic.w	r3, r3, #3
 8000dc8:	f043 0201 	orr.w	r2, r3, #1
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	641a      	str	r2, [r3, #64]	; 0x40
 8000dd0:	e00a      	b.n	8000de8 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f023 0312 	bic.w	r3, r3, #18
 8000dda:	f043 0210 	orr.w	r2, r3, #16
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000de2:	2301      	movs	r3, #1
 8000de4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000de8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3768      	adds	r7, #104	; 0x68
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	fff0c007 	.word	0xfff0c007

08000df8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b09b      	sub	sp, #108	; 0x6c
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d101      	bne.n	8000e1a <HAL_ADC_ConfigChannel+0x22>
 8000e16:	2302      	movs	r3, #2
 8000e18:	e2c8      	b.n	80013ac <HAL_ADC_ConfigChannel+0x5b4>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f040 82ac 	bne.w	800138a <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	d81c      	bhi.n	8000e74 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	4613      	mov	r3, r2
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	4413      	add	r3, r2
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	231f      	movs	r3, #31
 8000e50:	4093      	lsls	r3, r2
 8000e52:	43db      	mvns	r3, r3
 8000e54:	4019      	ands	r1, r3
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	6818      	ldr	r0, [r3, #0]
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685a      	ldr	r2, [r3, #4]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	4413      	add	r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	fa00 f203 	lsl.w	r2, r0, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	631a      	str	r2, [r3, #48]	; 0x30
 8000e72:	e063      	b.n	8000f3c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	2b09      	cmp	r3, #9
 8000e7a:	d81e      	bhi.n	8000eba <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685a      	ldr	r2, [r3, #4]
 8000e86:	4613      	mov	r3, r2
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	4413      	add	r3, r2
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	3b1e      	subs	r3, #30
 8000e90:	221f      	movs	r2, #31
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	4019      	ands	r1, r3
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	6818      	ldr	r0, [r3, #0]
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685a      	ldr	r2, [r3, #4]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	4413      	add	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	3b1e      	subs	r3, #30
 8000eac:	fa00 f203 	lsl.w	r2, r0, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	635a      	str	r2, [r3, #52]	; 0x34
 8000eb8:	e040      	b.n	8000f3c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2b0e      	cmp	r3, #14
 8000ec0:	d81e      	bhi.n	8000f00 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	4413      	add	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	3b3c      	subs	r3, #60	; 0x3c
 8000ed6:	221f      	movs	r2, #31
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	4019      	ands	r1, r3
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	6818      	ldr	r0, [r3, #0]
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	4413      	add	r3, r2
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	3b3c      	subs	r3, #60	; 0x3c
 8000ef2:	fa00 f203 	lsl.w	r2, r0, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	430a      	orrs	r2, r1
 8000efc:	639a      	str	r2, [r3, #56]	; 0x38
 8000efe:	e01d      	b.n	8000f3c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685a      	ldr	r2, [r3, #4]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	4413      	add	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	3b5a      	subs	r3, #90	; 0x5a
 8000f14:	221f      	movs	r2, #31
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	4019      	ands	r1, r3
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	6818      	ldr	r0, [r3, #0]
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	4613      	mov	r3, r2
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	4413      	add	r3, r2
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	3b5a      	subs	r3, #90	; 0x5a
 8000f30:	fa00 f203 	lsl.w	r2, r0, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f003 030c 	and.w	r3, r3, #12
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f040 80e5 	bne.w	8001116 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b09      	cmp	r3, #9
 8000f52:	d91c      	bls.n	8000f8e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6999      	ldr	r1, [r3, #24]
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	3b1e      	subs	r3, #30
 8000f66:	2207      	movs	r2, #7
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	4019      	ands	r1, r3
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	6898      	ldr	r0, [r3, #8]
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	3b1e      	subs	r3, #30
 8000f80:	fa00 f203 	lsl.w	r2, r0, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	619a      	str	r2, [r3, #24]
 8000f8c:	e019      	b.n	8000fc2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	6959      	ldr	r1, [r3, #20]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	4413      	add	r3, r2
 8000f9e:	2207      	movs	r2, #7
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	4019      	ands	r1, r3
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	6898      	ldr	r0, [r3, #8]
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	fa00 f203 	lsl.w	r2, r0, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	695a      	ldr	r2, [r3, #20]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	08db      	lsrs	r3, r3, #3
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d84f      	bhi.n	8001084 <HAL_ADC_ConfigChannel+0x28c>
 8000fe4:	a201      	add	r2, pc, #4	; (adr r2, 8000fec <HAL_ADC_ConfigChannel+0x1f4>)
 8000fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fea:	bf00      	nop
 8000fec:	08000ffd 	.word	0x08000ffd
 8000ff0:	0800101f 	.word	0x0800101f
 8000ff4:	08001041 	.word	0x08001041
 8000ff8:	08001063 	.word	0x08001063
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001002:	4b99      	ldr	r3, [pc, #612]	; (8001268 <HAL_ADC_ConfigChannel+0x470>)
 8001004:	4013      	ands	r3, r2
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	6812      	ldr	r2, [r2, #0]
 800100a:	0691      	lsls	r1, r2, #26
 800100c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800100e:	430a      	orrs	r2, r1
 8001010:	431a      	orrs	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800101a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800101c:	e07b      	b.n	8001116 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001024:	4b90      	ldr	r3, [pc, #576]	; (8001268 <HAL_ADC_ConfigChannel+0x470>)
 8001026:	4013      	ands	r3, r2
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	6812      	ldr	r2, [r2, #0]
 800102c:	0691      	lsls	r1, r2, #26
 800102e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001030:	430a      	orrs	r2, r1
 8001032:	431a      	orrs	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800103c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800103e:	e06a      	b.n	8001116 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001046:	4b88      	ldr	r3, [pc, #544]	; (8001268 <HAL_ADC_ConfigChannel+0x470>)
 8001048:	4013      	ands	r3, r2
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	6812      	ldr	r2, [r2, #0]
 800104e:	0691      	lsls	r1, r2, #26
 8001050:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001052:	430a      	orrs	r2, r1
 8001054:	431a      	orrs	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800105e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001060:	e059      	b.n	8001116 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001068:	4b7f      	ldr	r3, [pc, #508]	; (8001268 <HAL_ADC_ConfigChannel+0x470>)
 800106a:	4013      	ands	r3, r2
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	6812      	ldr	r2, [r2, #0]
 8001070:	0691      	lsls	r1, r2, #26
 8001072:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001074:	430a      	orrs	r2, r1
 8001076:	431a      	orrs	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001080:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001082:	e048      	b.n	8001116 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	069b      	lsls	r3, r3, #26
 8001094:	429a      	cmp	r2, r3
 8001096:	d107      	bne.n	80010a8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80010a6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80010ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	069b      	lsls	r3, r3, #26
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d107      	bne.n	80010cc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80010ca:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80010d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	069b      	lsls	r3, r3, #26
 80010dc:	429a      	cmp	r2, r3
 80010de:	d107      	bne.n	80010f0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80010ee:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80010f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	069b      	lsls	r3, r3, #26
 8001100:	429a      	cmp	r2, r3
 8001102:	d107      	bne.n	8001114 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001112:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001114:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	2b01      	cmp	r3, #1
 8001122:	d108      	bne.n	8001136 <HAL_ADC_ConfigChannel+0x33e>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	2b01      	cmp	r3, #1
 8001130:	d101      	bne.n	8001136 <HAL_ADC_ConfigChannel+0x33e>
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <HAL_ADC_ConfigChannel+0x340>
 8001136:	2300      	movs	r3, #0
 8001138:	2b00      	cmp	r3, #0
 800113a:	f040 8131 	bne.w	80013a0 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d00f      	beq.n	8001166 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2201      	movs	r2, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43da      	mvns	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	400a      	ands	r2, r1
 8001160:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001164:	e049      	b.n	80011fa <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2201      	movs	r2, #1
 8001174:	409a      	lsls	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	430a      	orrs	r2, r1
 800117c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b09      	cmp	r3, #9
 8001186:	d91c      	bls.n	80011c2 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6999      	ldr	r1, [r3, #24]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	3b1b      	subs	r3, #27
 800119a:	2207      	movs	r2, #7
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	4019      	ands	r1, r3
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	6898      	ldr	r0, [r3, #8]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4613      	mov	r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	4413      	add	r3, r2
 80011b2:	3b1b      	subs	r3, #27
 80011b4:	fa00 f203 	lsl.w	r2, r0, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	430a      	orrs	r2, r1
 80011be:	619a      	str	r2, [r3, #24]
 80011c0:	e01b      	b.n	80011fa <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6959      	ldr	r1, [r3, #20]
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	1c5a      	adds	r2, r3, #1
 80011ce:	4613      	mov	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4413      	add	r3, r2
 80011d4:	2207      	movs	r2, #7
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	4019      	ands	r1, r3
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	6898      	ldr	r0, [r3, #8]
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	1c5a      	adds	r2, r3, #1
 80011e8:	4613      	mov	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	4413      	add	r3, r2
 80011ee:	fa00 f203 	lsl.w	r2, r0, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	430a      	orrs	r2, r1
 80011f8:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001202:	d004      	beq.n	800120e <HAL_ADC_ConfigChannel+0x416>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a18      	ldr	r2, [pc, #96]	; (800126c <HAL_ADC_ConfigChannel+0x474>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d101      	bne.n	8001212 <HAL_ADC_ConfigChannel+0x41a>
 800120e:	4b18      	ldr	r3, [pc, #96]	; (8001270 <HAL_ADC_ConfigChannel+0x478>)
 8001210:	e000      	b.n	8001214 <HAL_ADC_ConfigChannel+0x41c>
 8001212:	4b18      	ldr	r3, [pc, #96]	; (8001274 <HAL_ADC_ConfigChannel+0x47c>)
 8001214:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b10      	cmp	r3, #16
 800121c:	d105      	bne.n	800122a <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800121e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001226:	2b00      	cmp	r3, #0
 8001228:	d015      	beq.n	8001256 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800122e:	2b11      	cmp	r3, #17
 8001230:	d105      	bne.n	800123e <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800123a:	2b00      	cmp	r3, #0
 800123c:	d00b      	beq.n	8001256 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001242:	2b12      	cmp	r3, #18
 8001244:	f040 80ac 	bne.w	80013a0 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001248:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001250:	2b00      	cmp	r3, #0
 8001252:	f040 80a5 	bne.w	80013a0 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800125e:	d10b      	bne.n	8001278 <HAL_ADC_ConfigChannel+0x480>
 8001260:	4b02      	ldr	r3, [pc, #8]	; (800126c <HAL_ADC_ConfigChannel+0x474>)
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	e023      	b.n	80012ae <HAL_ADC_ConfigChannel+0x4b6>
 8001266:	bf00      	nop
 8001268:	83fff000 	.word	0x83fff000
 800126c:	50000100 	.word	0x50000100
 8001270:	50000300 	.word	0x50000300
 8001274:	50000700 	.word	0x50000700
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a4e      	ldr	r2, [pc, #312]	; (80013b8 <HAL_ADC_ConfigChannel+0x5c0>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d103      	bne.n	800128a <HAL_ADC_ConfigChannel+0x492>
 8001282:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	e011      	b.n	80012ae <HAL_ADC_ConfigChannel+0x4b6>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a4b      	ldr	r2, [pc, #300]	; (80013bc <HAL_ADC_ConfigChannel+0x5c4>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d102      	bne.n	800129a <HAL_ADC_ConfigChannel+0x4a2>
 8001294:	4b4a      	ldr	r3, [pc, #296]	; (80013c0 <HAL_ADC_ConfigChannel+0x5c8>)
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	e009      	b.n	80012ae <HAL_ADC_ConfigChannel+0x4b6>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a48      	ldr	r2, [pc, #288]	; (80013c0 <HAL_ADC_ConfigChannel+0x5c8>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d102      	bne.n	80012aa <HAL_ADC_ConfigChannel+0x4b2>
 80012a4:	4b45      	ldr	r3, [pc, #276]	; (80013bc <HAL_ADC_ConfigChannel+0x5c4>)
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	e001      	b.n	80012ae <HAL_ADC_ConfigChannel+0x4b6>
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d108      	bne.n	80012ce <HAL_ADC_ConfigChannel+0x4d6>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d101      	bne.n	80012ce <HAL_ADC_ConfigChannel+0x4d6>
 80012ca:	2301      	movs	r3, #1
 80012cc:	e000      	b.n	80012d0 <HAL_ADC_ConfigChannel+0x4d8>
 80012ce:	2300      	movs	r3, #0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d150      	bne.n	8001376 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012d4:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d010      	beq.n	80012fc <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 0303 	and.w	r3, r3, #3
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d107      	bne.n	80012f6 <HAL_ADC_ConfigChannel+0x4fe>
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d101      	bne.n	80012f6 <HAL_ADC_ConfigChannel+0x4fe>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x500>
 80012f6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d13c      	bne.n	8001376 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b10      	cmp	r3, #16
 8001302:	d11d      	bne.n	8001340 <HAL_ADC_ConfigChannel+0x548>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800130c:	d118      	bne.n	8001340 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800130e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001318:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800131a:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <HAL_ADC_ConfigChannel+0x5cc>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a2a      	ldr	r2, [pc, #168]	; (80013c8 <HAL_ADC_ConfigChannel+0x5d0>)
 8001320:	fba2 2303 	umull	r2, r3, r2, r3
 8001324:	0c9a      	lsrs	r2, r3, #18
 8001326:	4613      	mov	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001330:	e002      	b.n	8001338 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	3b01      	subs	r3, #1
 8001336:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f9      	bne.n	8001332 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800133e:	e02e      	b.n	800139e <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b11      	cmp	r3, #17
 8001346:	d10b      	bne.n	8001360 <HAL_ADC_ConfigChannel+0x568>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001350:	d106      	bne.n	8001360 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800135a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800135c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800135e:	e01e      	b.n	800139e <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b12      	cmp	r3, #18
 8001366:	d11a      	bne.n	800139e <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001372:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001374:	e013      	b.n	800139e <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f043 0220 	orr.w	r2, r3, #32
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001388:	e00a      	b.n	80013a0 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f043 0220 	orr.w	r2, r3, #32
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800139c:	e000      	b.n	80013a0 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800139e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80013a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	376c      	adds	r7, #108	; 0x6c
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	50000100 	.word	0x50000100
 80013bc:	50000400 	.word	0x50000400
 80013c0:	50000500 	.word	0x50000500
 80013c4:	20000000 	.word	0x20000000
 80013c8:	431bde83 	.word	0x431bde83

080013cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b099      	sub	sp, #100	; 0x64
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013e4:	d102      	bne.n	80013ec <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80013e6:	4b6d      	ldr	r3, [pc, #436]	; (800159c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	e01a      	b.n	8001422 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a6a      	ldr	r2, [pc, #424]	; (800159c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d103      	bne.n	80013fe <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80013f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	e011      	b.n	8001422 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a67      	ldr	r2, [pc, #412]	; (80015a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d102      	bne.n	800140e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001408:	4b66      	ldr	r3, [pc, #408]	; (80015a4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	e009      	b.n	8001422 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a64      	ldr	r2, [pc, #400]	; (80015a4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d102      	bne.n	800141e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001418:	4b61      	ldr	r3, [pc, #388]	; (80015a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	e001      	b.n	8001422 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e0b0      	b.n	800158e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001432:	2b01      	cmp	r3, #1
 8001434:	d101      	bne.n	800143a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001436:	2302      	movs	r3, #2
 8001438:	e0a9      	b.n	800158e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	2b00      	cmp	r3, #0
 800144e:	f040 808d 	bne.w	800156c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	2b00      	cmp	r3, #0
 800145c:	f040 8086 	bne.w	800156c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001468:	d004      	beq.n	8001474 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a4b      	ldr	r2, [pc, #300]	; (800159c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d101      	bne.n	8001478 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001474:	4b4c      	ldr	r3, [pc, #304]	; (80015a8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001476:	e000      	b.n	800147a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001478:	4b4c      	ldr	r3, [pc, #304]	; (80015ac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800147a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d040      	beq.n	8001506 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001484:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	6859      	ldr	r1, [r3, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001496:	035b      	lsls	r3, r3, #13
 8001498:	430b      	orrs	r3, r1
 800149a:	431a      	orrs	r2, r3
 800149c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800149e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d108      	bne.n	80014c0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d101      	bne.n	80014c0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80014bc:	2301      	movs	r3, #1
 80014be:	e000      	b.n	80014c2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80014c0:	2300      	movs	r3, #0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d15c      	bne.n	8001580 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d107      	bne.n	80014e2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d101      	bne.n	80014e2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80014e2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d14b      	bne.n	8001580 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80014e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80014f0:	f023 030f 	bic.w	r3, r3, #15
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	6811      	ldr	r1, [r2, #0]
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	6892      	ldr	r2, [r2, #8]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	431a      	orrs	r2, r3
 8001500:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001502:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001504:	e03c      	b.n	8001580 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001506:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800150e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001510:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	2b01      	cmp	r3, #1
 800151e:	d108      	bne.n	8001532 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b01      	cmp	r3, #1
 800152c:	d101      	bne.n	8001532 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001532:	2300      	movs	r3, #0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d123      	bne.n	8001580 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	2b01      	cmp	r3, #1
 8001542:	d107      	bne.n	8001554 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b01      	cmp	r3, #1
 800154e:	d101      	bne.n	8001554 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001554:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001556:	2b00      	cmp	r3, #0
 8001558:	d112      	bne.n	8001580 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800155a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001562:	f023 030f 	bic.w	r3, r3, #15
 8001566:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001568:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800156a:	e009      	b.n	8001580 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	f043 0220 	orr.w	r2, r3, #32
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800157e:	e000      	b.n	8001582 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001580:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800158a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800158e:	4618      	mov	r0, r3
 8001590:	3764      	adds	r7, #100	; 0x64
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	50000100 	.word	0x50000100
 80015a0:	50000400 	.word	0x50000400
 80015a4:	50000500 	.word	0x50000500
 80015a8:	50000300 	.word	0x50000300
 80015ac:	50000700 	.word	0x50000700

080015b0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d108      	bne.n	80015dc <ADC_Disable+0x2c>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d101      	bne.n	80015dc <ADC_Disable+0x2c>
 80015d8:	2301      	movs	r3, #1
 80015da:	e000      	b.n	80015de <ADC_Disable+0x2e>
 80015dc:	2300      	movs	r3, #0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d047      	beq.n	8001672 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 030d 	and.w	r3, r3, #13
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d10f      	bne.n	8001610 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0202 	orr.w	r2, r2, #2
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2203      	movs	r2, #3
 8001606:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001608:	f7ff f9e6 	bl	80009d8 <HAL_GetTick>
 800160c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800160e:	e029      	b.n	8001664 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	f043 0210 	orr.w	r2, r3, #16
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001620:	f043 0201 	orr.w	r2, r3, #1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e023      	b.n	8001674 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800162c:	f7ff f9d4 	bl	80009d8 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d914      	bls.n	8001664 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b01      	cmp	r3, #1
 8001646:	d10d      	bne.n	8001664 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	f043 0210 	orr.w	r2, r3, #16
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001658:	f043 0201 	orr.w	r2, r3, #1
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e007      	b.n	8001674 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b01      	cmp	r3, #1
 8001670:	d0dc      	beq.n	800162c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001698:	4013      	ands	r3, r2
 800169a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ae:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	60d3      	str	r3, [r2, #12]
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <__NVIC_GetPriorityGrouping+0x18>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	f003 0307 	and.w	r3, r3, #7
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	db0b      	blt.n	800170a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	f003 021f 	and.w	r2, r3, #31
 80016f8:	4907      	ldr	r1, [pc, #28]	; (8001718 <__NVIC_EnableIRQ+0x38>)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	095b      	lsrs	r3, r3, #5
 8001700:	2001      	movs	r0, #1
 8001702:	fa00 f202 	lsl.w	r2, r0, r2
 8001706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000e100 	.word	0xe000e100

0800171c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	2b00      	cmp	r3, #0
 800172e:	db0a      	blt.n	8001746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	490c      	ldr	r1, [pc, #48]	; (8001768 <__NVIC_SetPriority+0x4c>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	0112      	lsls	r2, r2, #4
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	440b      	add	r3, r1
 8001740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001744:	e00a      	b.n	800175c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4908      	ldr	r1, [pc, #32]	; (800176c <__NVIC_SetPriority+0x50>)
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	3b04      	subs	r3, #4
 8001754:	0112      	lsls	r2, r2, #4
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	440b      	add	r3, r1
 800175a:	761a      	strb	r2, [r3, #24]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000e100 	.word	0xe000e100
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f1c3 0307 	rsb	r3, r3, #7
 800178a:	2b04      	cmp	r3, #4
 800178c:	bf28      	it	cs
 800178e:	2304      	movcs	r3, #4
 8001790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3304      	adds	r3, #4
 8001796:	2b06      	cmp	r3, #6
 8001798:	d902      	bls.n	80017a0 <NVIC_EncodePriority+0x30>
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3b03      	subs	r3, #3
 800179e:	e000      	b.n	80017a2 <NVIC_EncodePriority+0x32>
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43da      	mvns	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	401a      	ands	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b8:	f04f 31ff 	mov.w	r1, #4294967295
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43d9      	mvns	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	4313      	orrs	r3, r2
         );
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3724      	adds	r7, #36	; 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e8:	d301      	bcc.n	80017ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00f      	b.n	800180e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ee:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <SysTick_Config+0x40>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f6:	210f      	movs	r1, #15
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	f7ff ff8e 	bl	800171c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <SysTick_Config+0x40>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001806:	4b04      	ldr	r3, [pc, #16]	; (8001818 <SysTick_Config+0x40>)
 8001808:	2207      	movs	r2, #7
 800180a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	e000e010 	.word	0xe000e010

0800181c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ff29 	bl	800167c <__NVIC_SetPriorityGrouping>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
 800183e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001844:	f7ff ff3e 	bl	80016c4 <__NVIC_GetPriorityGrouping>
 8001848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	6978      	ldr	r0, [r7, #20]
 8001850:	f7ff ff8e 	bl	8001770 <NVIC_EncodePriority>
 8001854:	4602      	mov	r2, r0
 8001856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff5d 	bl	800171c <__NVIC_SetPriority>
}
 8001862:	bf00      	nop
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff31 	bl	80016e0 <__NVIC_EnableIRQ>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff ffa2 	bl	80017d8 <SysTick_Config>
 8001894:	4603      	mov	r3, r0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b087      	sub	sp, #28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ae:	e154      	b.n	8001b5a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	2101      	movs	r1, #1
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	fa01 f303 	lsl.w	r3, r1, r3
 80018bc:	4013      	ands	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 8146 	beq.w	8001b54 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d005      	beq.n	80018e0 <HAL_GPIO_Init+0x40>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d130      	bne.n	8001942 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	2203      	movs	r2, #3
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4313      	orrs	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001916:	2201      	movs	r2, #1
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4013      	ands	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	091b      	lsrs	r3, r3, #4
 800192c:	f003 0201 	and.w	r2, r3, #1
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	2b03      	cmp	r3, #3
 800194c:	d017      	beq.n	800197e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	2203      	movs	r2, #3
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d123      	bne.n	80019d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	08da      	lsrs	r2, r3, #3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3208      	adds	r2, #8
 8001992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001996:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	220f      	movs	r2, #15
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	691a      	ldr	r2, [r3, #16]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	08da      	lsrs	r2, r3, #3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3208      	adds	r2, #8
 80019cc:	6939      	ldr	r1, [r7, #16]
 80019ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	2203      	movs	r2, #3
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0203 	and.w	r2, r3, #3
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 80a0 	beq.w	8001b54 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a14:	4b58      	ldr	r3, [pc, #352]	; (8001b78 <HAL_GPIO_Init+0x2d8>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	4a57      	ldr	r2, [pc, #348]	; (8001b78 <HAL_GPIO_Init+0x2d8>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6193      	str	r3, [r2, #24]
 8001a20:	4b55      	ldr	r3, [pc, #340]	; (8001b78 <HAL_GPIO_Init+0x2d8>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a2c:	4a53      	ldr	r2, [pc, #332]	; (8001b7c <HAL_GPIO_Init+0x2dc>)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	089b      	lsrs	r3, r3, #2
 8001a32:	3302      	adds	r3, #2
 8001a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	220f      	movs	r2, #15
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a56:	d019      	beq.n	8001a8c <HAL_GPIO_Init+0x1ec>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a49      	ldr	r2, [pc, #292]	; (8001b80 <HAL_GPIO_Init+0x2e0>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d013      	beq.n	8001a88 <HAL_GPIO_Init+0x1e8>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a48      	ldr	r2, [pc, #288]	; (8001b84 <HAL_GPIO_Init+0x2e4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d00d      	beq.n	8001a84 <HAL_GPIO_Init+0x1e4>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a47      	ldr	r2, [pc, #284]	; (8001b88 <HAL_GPIO_Init+0x2e8>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d007      	beq.n	8001a80 <HAL_GPIO_Init+0x1e0>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a46      	ldr	r2, [pc, #280]	; (8001b8c <HAL_GPIO_Init+0x2ec>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d101      	bne.n	8001a7c <HAL_GPIO_Init+0x1dc>
 8001a78:	2304      	movs	r3, #4
 8001a7a:	e008      	b.n	8001a8e <HAL_GPIO_Init+0x1ee>
 8001a7c:	2305      	movs	r3, #5
 8001a7e:	e006      	b.n	8001a8e <HAL_GPIO_Init+0x1ee>
 8001a80:	2303      	movs	r3, #3
 8001a82:	e004      	b.n	8001a8e <HAL_GPIO_Init+0x1ee>
 8001a84:	2302      	movs	r3, #2
 8001a86:	e002      	b.n	8001a8e <HAL_GPIO_Init+0x1ee>
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <HAL_GPIO_Init+0x1ee>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	f002 0203 	and.w	r2, r2, #3
 8001a94:	0092      	lsls	r2, r2, #2
 8001a96:	4093      	lsls	r3, r2
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a9e:	4937      	ldr	r1, [pc, #220]	; (8001b7c <HAL_GPIO_Init+0x2dc>)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	089b      	lsrs	r3, r3, #2
 8001aa4:	3302      	adds	r3, #2
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aac:	4b38      	ldr	r3, [pc, #224]	; (8001b90 <HAL_GPIO_Init+0x2f0>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ad0:	4a2f      	ldr	r2, [pc, #188]	; (8001b90 <HAL_GPIO_Init+0x2f0>)
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad6:	4b2e      	ldr	r3, [pc, #184]	; (8001b90 <HAL_GPIO_Init+0x2f0>)
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001afa:	4a25      	ldr	r2, [pc, #148]	; (8001b90 <HAL_GPIO_Init+0x2f0>)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b00:	4b23      	ldr	r3, [pc, #140]	; (8001b90 <HAL_GPIO_Init+0x2f0>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b24:	4a1a      	ldr	r2, [pc, #104]	; (8001b90 <HAL_GPIO_Init+0x2f0>)
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b2a:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <HAL_GPIO_Init+0x2f0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b4e:	4a10      	ldr	r2, [pc, #64]	; (8001b90 <HAL_GPIO_Init+0x2f0>)
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	3301      	adds	r3, #1
 8001b58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	fa22 f303 	lsr.w	r3, r2, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f47f aea3 	bne.w	80018b0 <HAL_GPIO_Init+0x10>
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	bf00      	nop
 8001b6e:	371c      	adds	r7, #28
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40010000 	.word	0x40010000
 8001b80:	48000400 	.word	0x48000400
 8001b84:	48000800 	.word	0x48000800
 8001b88:	48000c00 	.word	0x48000c00
 8001b8c:	48001000 	.word	0x48001000
 8001b90:	40010400 	.word	0x40010400

08001b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	807b      	strh	r3, [r7, #2]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba4:	787b      	ldrb	r3, [r7, #1]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001baa:	887a      	ldrh	r2, [r7, #2]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bb0:	e002      	b.n	8001bb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bb2:	887a      	ldrh	r2, [r7, #2]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc6:	b08b      	sub	sp, #44	; 0x2c
 8001bc8:	af06      	add	r7, sp, #24
 8001bca:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e0c4      	b.n	8001d60 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d106      	bne.n	8001bf0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f007 ff06 	bl	80099fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f003 fe56 	bl	80058ae <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c02:	2300      	movs	r3, #0
 8001c04:	73fb      	strb	r3, [r7, #15]
 8001c06:	e040      	b.n	8001c8a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	440b      	add	r3, r1
 8001c18:	3301      	adds	r3, #1
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	440b      	add	r3, r1
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	440b      	add	r3, r1
 8001c42:	3303      	adds	r3, #3
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c48:	7bfa      	ldrb	r2, [r7, #15]
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	440b      	add	r3, r1
 8001c56:	3338      	adds	r3, #56	; 0x38
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c5c:	7bfa      	ldrb	r2, [r7, #15]
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	440b      	add	r3, r1
 8001c6a:	333c      	adds	r3, #60	; 0x3c
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c70:	7bfa      	ldrb	r2, [r7, #15]
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	440b      	add	r3, r1
 8001c7e:	3340      	adds	r3, #64	; 0x40
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	3301      	adds	r3, #1
 8001c88:	73fb      	strb	r3, [r7, #15]
 8001c8a:	7bfa      	ldrb	r2, [r7, #15]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d3b9      	bcc.n	8001c08 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	73fb      	strb	r3, [r7, #15]
 8001c98:	e044      	b.n	8001d24 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c9a:	7bfa      	ldrb	r2, [r7, #15]
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001cb0:	7bfa      	ldrb	r2, [r7, #15]
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	440b      	add	r3, r1
 8001cbe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cc2:	7bfa      	ldrb	r2, [r7, #15]
 8001cc4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cc6:	7bfa      	ldrb	r2, [r7, #15]
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cdc:	7bfa      	ldrb	r2, [r7, #15]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	440b      	add	r3, r1
 8001cea:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cf2:	7bfa      	ldrb	r2, [r7, #15]
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	440b      	add	r3, r1
 8001d00:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d08:	7bfa      	ldrb	r2, [r7, #15]
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	440b      	add	r3, r1
 8001d16:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	3301      	adds	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d3b5      	bcc.n	8001c9a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	603b      	str	r3, [r7, #0]
 8001d34:	687e      	ldr	r6, [r7, #4]
 8001d36:	466d      	mov	r5, sp
 8001d38:	f106 0410 	add.w	r4, r6, #16
 8001d3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	602b      	str	r3, [r5, #0]
 8001d44:	1d33      	adds	r3, r6, #4
 8001d46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d48:	6838      	ldr	r0, [r7, #0]
 8001d4a:	f003 fdcb 	bl	80058e4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d68 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d101      	bne.n	8001d7e <HAL_PCD_Start+0x16>
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	e016      	b.n	8001dac <HAL_PCD_Start+0x44>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f003 fd78 	bl	8005880 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001d90:	2101      	movs	r1, #1
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f008 f8d0 	bl	8009f38 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f006 f838 	bl	8007e12 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f006 f831 	bl	8007e28 <USB_ReadInterrupts>
 8001dc6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 fab2 	bl	800233c <PCD_EP_ISR_Handler>

    return;
 8001dd8:	e0bd      	b.n	8001f56 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d013      	beq.n	8001e0c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001df6:	b292      	uxth	r2, r2
 8001df8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f007 fe9e 	bl	8009b3e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e02:	2100      	movs	r1, #0
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f8a9 	bl	8001f5c <HAL_PCD_SetAddress>

    return;
 8001e0a:	e0a4      	b.n	8001f56 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00c      	beq.n	8001e30 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e28:	b292      	uxth	r2, r2
 8001e2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e2e:	e092      	b.n	8001f56 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00c      	beq.n	8001e54 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e4c:	b292      	uxth	r2, r2
 8001e4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e52:	e080      	b.n	8001f56 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d027      	beq.n	8001eae <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0204 	bic.w	r2, r2, #4
 8001e70:	b292      	uxth	r2, r2
 8001e72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0208 	bic.w	r2, r2, #8
 8001e88:	b292      	uxth	r2, r2
 8001e8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f007 fe8e 	bl	8009bb0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ea6:	b292      	uxth	r2, r2
 8001ea8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001eac:	e053      	b.n	8001f56 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d027      	beq.n	8001f08 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0208 	orr.w	r2, r2, #8
 8001eca:	b292      	uxth	r2, r2
 8001ecc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ee2:	b292      	uxth	r2, r2
 8001ee4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0204 	orr.w	r2, r2, #4
 8001efa:	b292      	uxth	r2, r2
 8001efc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f007 fe3b 	bl	8009b7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001f06:	e026      	b.n	8001f56 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00f      	beq.n	8001f32 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f24:	b292      	uxth	r2, r2
 8001f26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f007 fdf9 	bl	8009b22 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001f30:	e011      	b.n	8001f56 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00c      	beq.n	8001f56 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f4e:	b292      	uxth	r2, r2
 8001f50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f54:	bf00      	nop
  }
}
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_PCD_SetAddress+0x1a>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e013      	b.n	8001f9e <HAL_PCD_SetAddress+0x42>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	78fa      	ldrb	r2, [r7, #3]
 8001f82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	78fa      	ldrb	r2, [r7, #3]
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f005 ff2b 	bl	8007dea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b084      	sub	sp, #16
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	4608      	mov	r0, r1
 8001fb0:	4611      	mov	r1, r2
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	70fb      	strb	r3, [r7, #3]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	803b      	strh	r3, [r7, #0]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	da0e      	bge.n	8001fea <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fcc:	78fb      	ldrb	r3, [r7, #3]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	1c5a      	adds	r2, r3, #1
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	4413      	add	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	705a      	strb	r2, [r3, #1]
 8001fe8:	e00e      	b.n	8002008 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fea:	78fb      	ldrb	r3, [r7, #3]
 8001fec:	f003 0207 	and.w	r2, r3, #7
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	4413      	add	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	b2da      	uxtb	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002014:	883a      	ldrh	r2, [r7, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	78ba      	ldrb	r2, [r7, #2]
 800201e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002020:	78bb      	ldrb	r3, [r7, #2]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d102      	bne.n	800202c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_PCD_EP_Open+0x94>
 8002036:	2302      	movs	r3, #2
 8002038:	e00e      	b.n	8002058 <HAL_PCD_EP_Open+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68f9      	ldr	r1, [r7, #12]
 8002048:	4618      	mov	r0, r3
 800204a:	f003 fc6d 	bl	8005928 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002056:	7afb      	ldrb	r3, [r7, #11]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800206c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002070:	2b00      	cmp	r3, #0
 8002072:	da0e      	bge.n	8002092 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	4413      	add	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2201      	movs	r2, #1
 800208e:	705a      	strb	r2, [r3, #1]
 8002090:	e00e      	b.n	80020b0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	f003 0207 	and.w	r2, r3, #7
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	4413      	add	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_PCD_EP_Close+0x6a>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e00e      	b.n	80020e8 <HAL_PCD_EP_Close+0x88>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68f9      	ldr	r1, [r7, #12]
 80020d8:	4618      	mov	r0, r3
 80020da:	f003 ffe9 	bl	80060b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	607a      	str	r2, [r7, #4]
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	460b      	mov	r3, r1
 80020fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002100:	7afb      	ldrb	r3, [r7, #11]
 8002102:	f003 0207 	and.w	r2, r3, #7
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	4413      	add	r3, r2
 8002116:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2200      	movs	r2, #0
 8002128:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2200      	movs	r2, #0
 800212e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002130:	7afb      	ldrb	r3, [r7, #11]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	b2da      	uxtb	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6979      	ldr	r1, [r7, #20]
 8002142:	4618      	mov	r0, r3
 8002144:	f004 f9a1 	bl	800648a <USB_EPStartXfer>

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	460b      	mov	r3, r1
 800215c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	f003 0207 	and.w	r2, r3, #7
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	440b      	add	r3, r1
 8002170:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002174:	681b      	ldr	r3, [r3, #0]
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b086      	sub	sp, #24
 8002186:	af00      	add	r7, sp, #0
 8002188:	60f8      	str	r0, [r7, #12]
 800218a:	607a      	str	r2, [r7, #4]
 800218c:	603b      	str	r3, [r7, #0]
 800218e:	460b      	mov	r3, r1
 8002190:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002192:	7afb      	ldrb	r3, [r7, #11]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	4413      	add	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2200      	movs	r2, #0
 80021c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	2201      	movs	r2, #1
 80021cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021ce:	7afb      	ldrb	r3, [r7, #11]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6979      	ldr	r1, [r7, #20]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f004 f952 	bl	800648a <USB_EPStartXfer>

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	f003 0207 	and.w	r2, r3, #7
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	429a      	cmp	r2, r3
 8002208:	d901      	bls.n	800220e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e03e      	b.n	800228c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800220e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002212:	2b00      	cmp	r3, #0
 8002214:	da0e      	bge.n	8002234 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	1c5a      	adds	r2, r3, #1
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2201      	movs	r2, #1
 8002230:	705a      	strb	r2, [r3, #1]
 8002232:	e00c      	b.n	800224e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002234:	78fa      	ldrb	r2, [r7, #3]
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	4413      	add	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2201      	movs	r2, #1
 8002252:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	b2da      	uxtb	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_PCD_EP_SetStall+0x7e>
 800226a:	2302      	movs	r3, #2
 800226c:	e00e      	b.n	800228c <HAL_PCD_EP_SetStall+0x9c>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68f9      	ldr	r1, [r7, #12]
 800227c:	4618      	mov	r0, r3
 800227e:	f005 fcb5 	bl	8007bec <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	f003 020f 	and.w	r2, r3, #15
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d901      	bls.n	80022b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e040      	b.n	8002334 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	da0e      	bge.n	80022d8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ba:	78fb      	ldrb	r3, [r7, #3]
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	1c5a      	adds	r2, r3, #1
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2201      	movs	r2, #1
 80022d4:	705a      	strb	r2, [r3, #1]
 80022d6:	e00e      	b.n	80022f6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	f003 0207 	and.w	r2, r3, #7
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	b2da      	uxtb	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800230e:	2b01      	cmp	r3, #1
 8002310:	d101      	bne.n	8002316 <HAL_PCD_EP_ClrStall+0x82>
 8002312:	2302      	movs	r3, #2
 8002314:	e00e      	b.n	8002334 <HAL_PCD_EP_ClrStall+0xa0>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68f9      	ldr	r1, [r7, #12]
 8002324:	4618      	mov	r0, r3
 8002326:	f005 fcb2 	bl	8007c8e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b096      	sub	sp, #88	; 0x58
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002344:	e3bf      	b.n	8002ac6 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800234e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002352:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002356:	b2db      	uxtb	r3, r3
 8002358:	f003 030f 	and.w	r3, r3, #15
 800235c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002360:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002364:	2b00      	cmp	r3, #0
 8002366:	f040 8179 	bne.w	800265c <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800236a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800236e:	f003 0310 	and.w	r3, r3, #16
 8002372:	2b00      	cmp	r3, #0
 8002374:	d152      	bne.n	800241c <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	b29b      	uxth	r3, r3
 800237e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002386:	81fb      	strh	r3, [r7, #14]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	89fb      	ldrh	r3, [r7, #14]
 800238e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002396:	b29b      	uxth	r3, r3
 8002398:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3328      	adds	r3, #40	; 0x28
 800239e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	461a      	mov	r2, r3
 80023ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4413      	add	r3, r2
 80023b4:	3302      	adds	r3, #2
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	4413      	add	r3, r2
 80023be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80023cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ce:	695a      	ldr	r2, [r3, #20]
 80023d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	441a      	add	r2, r3
 80023d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023d8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80023da:	2100      	movs	r1, #0
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f007 fb86 	bl	8009aee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 836b 	beq.w	8002ac6 <PCD_EP_ISR_Handler+0x78a>
 80023f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f040 8366 	bne.w	8002ac6 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002400:	b2db      	uxtb	r3, r3
 8002402:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002406:	b2da      	uxtb	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	b292      	uxth	r2, r2
 800240e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800241a:	e354      	b.n	8002ac6 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002422:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800242e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002432:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002436:	2b00      	cmp	r3, #0
 8002438:	d034      	beq.n	80024a4 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002442:	b29b      	uxth	r3, r3
 8002444:	461a      	mov	r2, r3
 8002446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4413      	add	r3, r2
 800244e:	3306      	adds	r3, #6
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6812      	ldr	r2, [r2, #0]
 8002456:	4413      	add	r3, r2
 8002458:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002464:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002472:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002476:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002478:	b29b      	uxth	r3, r3
 800247a:	f005 fd2b 	bl	8007ed4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	b29a      	uxth	r2, r3
 8002486:	f640 738f 	movw	r3, #3983	; 0xf8f
 800248a:	4013      	ands	r3, r2
 800248c:	823b      	strh	r3, [r7, #16]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	8a3a      	ldrh	r2, [r7, #16]
 8002494:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002498:	b292      	uxth	r2, r2
 800249a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f007 faf9 	bl	8009a94 <HAL_PCD_SetupStageCallback>
 80024a2:	e310      	b.n	8002ac6 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80024a4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f280 830c 	bge.w	8002ac6 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024ba:	4013      	ands	r3, r2
 80024bc:	83fb      	strh	r3, [r7, #30]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	8bfa      	ldrh	r2, [r7, #30]
 80024c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024c8:	b292      	uxth	r2, r2
 80024ca:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	461a      	mov	r2, r3
 80024d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4413      	add	r3, r2
 80024e0:	3306      	adds	r3, #6
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80024f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d019      	beq.n	8002534 <PCD_EP_ISR_Handler+0x1f8>
 8002500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d015      	beq.n	8002534 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6818      	ldr	r0, [r3, #0]
 800250c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800250e:	6959      	ldr	r1, [r3, #20]
 8002510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002512:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002516:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002518:	b29b      	uxth	r3, r3
 800251a:	f005 fcdb 	bl	8007ed4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800251e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002520:	695a      	ldr	r2, [r3, #20]
 8002522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	441a      	add	r2, r3
 8002528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800252a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800252c:	2100      	movs	r1, #0
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f007 fac2 	bl	8009ab8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800253e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002546:	2b00      	cmp	r3, #0
 8002548:	f040 82bd 	bne.w	8002ac6 <PCD_EP_ISR_Handler+0x78a>
 800254c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002550:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002554:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002558:	f000 82b5 	beq.w	8002ac6 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800256a:	b29b      	uxth	r3, r3
 800256c:	461a      	mov	r2, r3
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	4413      	add	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	b29b      	uxth	r3, r3
 8002582:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002586:	b29a      	uxth	r2, r3
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	801a      	strh	r2, [r3, #0]
 800258c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	2b3e      	cmp	r3, #62	; 0x3e
 8002592:	d91d      	bls.n	80025d0 <PCD_EP_ISR_Handler+0x294>
 8002594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	095b      	lsrs	r3, r3, #5
 800259a:	647b      	str	r3, [r7, #68]	; 0x44
 800259c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d102      	bne.n	80025ae <PCD_EP_ISR_Handler+0x272>
 80025a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025aa:	3b01      	subs	r3, #1
 80025ac:	647b      	str	r3, [r7, #68]	; 0x44
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	029b      	lsls	r3, r3, #10
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	4313      	orrs	r3, r2
 80025be:	b29b      	uxth	r3, r3
 80025c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	801a      	strh	r2, [r3, #0]
 80025ce:	e026      	b.n	800261e <PCD_EP_ISR_Handler+0x2e2>
 80025d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10a      	bne.n	80025ee <PCD_EP_ISR_Handler+0x2b2>
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	b29b      	uxth	r3, r3
 80025de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	801a      	strh	r2, [r3, #0]
 80025ec:	e017      	b.n	800261e <PCD_EP_ISR_Handler+0x2e2>
 80025ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	085b      	lsrs	r3, r3, #1
 80025f4:	647b      	str	r3, [r7, #68]	; 0x44
 80025f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <PCD_EP_ISR_Handler+0x2cc>
 8002602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002604:	3301      	adds	r3, #1
 8002606:	647b      	str	r3, [r7, #68]	; 0x44
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	b29a      	uxth	r2, r3
 800260e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002610:	b29b      	uxth	r3, r3
 8002612:	029b      	lsls	r3, r3, #10
 8002614:	b29b      	uxth	r3, r3
 8002616:	4313      	orrs	r3, r2
 8002618:	b29a      	uxth	r2, r3
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	b29b      	uxth	r3, r3
 8002626:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800262a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800262e:	827b      	strh	r3, [r7, #18]
 8002630:	8a7b      	ldrh	r3, [r7, #18]
 8002632:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002636:	827b      	strh	r3, [r7, #18]
 8002638:	8a7b      	ldrh	r3, [r7, #18]
 800263a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800263e:	827b      	strh	r3, [r7, #18]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	8a7b      	ldrh	r3, [r7, #18]
 8002646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800264a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800264e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002656:	b29b      	uxth	r3, r3
 8002658:	8013      	strh	r3, [r2, #0]
 800265a:	e234      	b.n	8002ac6 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002670:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002674:	2b00      	cmp	r3, #0
 8002676:	f280 80fc 	bge.w	8002872 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	b29a      	uxth	r2, r3
 800268c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002690:	4013      	ands	r3, r2
 8002692:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80026a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026ac:	b292      	uxth	r2, r2
 80026ae:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80026b0:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	4413      	add	r3, r2
 80026c4:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80026c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026c8:	7b1b      	ldrb	r3, [r3, #12]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d125      	bne.n	800271a <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	461a      	mov	r2, r3
 80026da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4413      	add	r3, r2
 80026e2:	3306      	adds	r3, #6
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6812      	ldr	r2, [r2, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026f6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80026fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 8092 	beq.w	8002828 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800270a:	6959      	ldr	r1, [r3, #20]
 800270c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800270e:	88da      	ldrh	r2, [r3, #6]
 8002710:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002714:	f005 fbde 	bl	8007ed4 <USB_ReadPMA>
 8002718:	e086      	b.n	8002828 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800271a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800271c:	78db      	ldrb	r3, [r3, #3]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d10a      	bne.n	8002738 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002722:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002726:	461a      	mov	r2, r3
 8002728:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f9d9 	bl	8002ae2 <HAL_PCD_EP_DB_Receive>
 8002730:	4603      	mov	r3, r0
 8002732:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002736:	e077      	b.n	8002828 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	461a      	mov	r2, r3
 800273e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	b29b      	uxth	r3, r3
 800274a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800274e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002752:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	461a      	mov	r2, r3
 800275c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	441a      	add	r2, r3
 8002764:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800276c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002774:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002778:	b29b      	uxth	r3, r3
 800277a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	461a      	mov	r2, r3
 8002782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	b29b      	uxth	r3, r3
 800278e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d024      	beq.n	80027e0 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800279e:	b29b      	uxth	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4413      	add	r3, r2
 80027aa:	3302      	adds	r3, #2
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027be:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80027c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d02e      	beq.n	8002828 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d0:	6959      	ldr	r1, [r3, #20]
 80027d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d4:	891a      	ldrh	r2, [r3, #8]
 80027d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027da:	f005 fb7b 	bl	8007ed4 <USB_ReadPMA>
 80027de:	e023      	b.n	8002828 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	461a      	mov	r2, r3
 80027ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4413      	add	r3, r2
 80027f4:	3306      	adds	r3, #6
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002808:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800280c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002810:	2b00      	cmp	r3, #0
 8002812:	d009      	beq.n	8002828 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800281a:	6959      	ldr	r1, [r3, #20]
 800281c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800281e:	895a      	ldrh	r2, [r3, #10]
 8002820:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002824:	f005 fb56 	bl	8007ed4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800282a:	69da      	ldr	r2, [r3, #28]
 800282c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002830:	441a      	add	r2, r3
 8002832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002834:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002838:	695a      	ldr	r2, [r3, #20]
 800283a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800283e:	441a      	add	r2, r3
 8002840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002842:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <PCD_EP_ISR_Handler+0x51c>
 800284c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	429a      	cmp	r2, r3
 8002856:	d206      	bcs.n	8002866 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	4619      	mov	r1, r3
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f007 f92a 	bl	8009ab8 <HAL_PCD_DataOutStageCallback>
 8002864:	e005      	b.n	8002872 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800286c:	4618      	mov	r0, r3
 800286e:	f003 fe0c 	bl	800648a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002872:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 8123 	beq.w	8002ac6 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8002880:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80028aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	441a      	add	r2, r3
 80028c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80028c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80028d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d2:	78db      	ldrb	r3, [r3, #3]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	f040 80a2 	bne.w	8002a1e <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80028da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028dc:	2200      	movs	r2, #0
 80028de:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80028e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e2:	7b1b      	ldrb	r3, [r3, #12]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 8093 	beq.w	8002a10 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80028ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d046      	beq.n	8002984 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f8:	785b      	ldrb	r3, [r3, #1]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d126      	bne.n	800294c <PCD_EP_ISR_Handler+0x610>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800290c:	b29b      	uxth	r3, r3
 800290e:	461a      	mov	r2, r3
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	4413      	add	r3, r2
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
 8002916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	011a      	lsls	r2, r3, #4
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	4413      	add	r3, r2
 8002920:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002924:	623b      	str	r3, [r7, #32]
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	b29b      	uxth	r3, r3
 800292c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002930:	b29a      	uxth	r2, r3
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	801a      	strh	r2, [r3, #0]
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	b29b      	uxth	r3, r3
 800293c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002944:	b29a      	uxth	r2, r3
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	801a      	strh	r2, [r3, #0]
 800294a:	e061      	b.n	8002a10 <PCD_EP_ISR_Handler+0x6d4>
 800294c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800294e:	785b      	ldrb	r3, [r3, #1]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d15d      	bne.n	8002a10 <PCD_EP_ISR_Handler+0x6d4>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002962:	b29b      	uxth	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002968:	4413      	add	r3, r2
 800296a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800296c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	011a      	lsls	r2, r3, #4
 8002972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002974:	4413      	add	r3, r2
 8002976:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800297a:	62bb      	str	r3, [r7, #40]	; 0x28
 800297c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297e:	2200      	movs	r2, #0
 8002980:	801a      	strh	r2, [r3, #0]
 8002982:	e045      	b.n	8002a10 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	63fb      	str	r3, [r7, #60]	; 0x3c
 800298a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800298c:	785b      	ldrb	r3, [r3, #1]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d126      	bne.n	80029e0 <PCD_EP_ISR_Handler+0x6a4>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	637b      	str	r3, [r7, #52]	; 0x34
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a6:	4413      	add	r3, r2
 80029a8:	637b      	str	r3, [r7, #52]	; 0x34
 80029aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	011a      	lsls	r2, r3, #4
 80029b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b2:	4413      	add	r3, r2
 80029b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029b8:	633b      	str	r3, [r7, #48]	; 0x30
 80029ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029bc:	881b      	ldrh	r3, [r3, #0]
 80029be:	b29b      	uxth	r3, r3
 80029c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c8:	801a      	strh	r2, [r3, #0]
 80029ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029d8:	b29a      	uxth	r2, r3
 80029da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029dc:	801a      	strh	r2, [r3, #0]
 80029de:	e017      	b.n	8002a10 <PCD_EP_ISR_Handler+0x6d4>
 80029e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e2:	785b      	ldrb	r3, [r3, #1]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d113      	bne.n	8002a10 <PCD_EP_ISR_Handler+0x6d4>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	461a      	mov	r2, r3
 80029f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029f6:	4413      	add	r3, r2
 80029f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	011a      	lsls	r2, r3, #4
 8002a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a02:	4413      	add	r3, r2
 8002a04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a08:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	4619      	mov	r1, r3
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f007 f869 	bl	8009aee <HAL_PCD_DataInStageCallback>
 8002a1c:	e053      	b.n	8002ac6 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002a1e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d146      	bne.n	8002ab8 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	461a      	mov	r2, r3
 8002a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3302      	adds	r3, #2
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6812      	ldr	r2, [r2, #0]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a52:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a58:	699a      	ldr	r2, [r3, #24]
 8002a5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d907      	bls.n	8002a72 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8002a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a64:	699a      	ldr	r2, [r3, #24]
 8002a66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a6a:	1ad2      	subs	r2, r2, r3
 8002a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a6e:	619a      	str	r2, [r3, #24]
 8002a70:	e002      	b.n	8002a78 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8002a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a74:	2200      	movs	r2, #0
 8002a76:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d106      	bne.n	8002a8e <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	4619      	mov	r1, r3
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f007 f831 	bl	8009aee <HAL_PCD_DataInStageCallback>
 8002a8c:	e01b      	b.n	8002ac6 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a90:	695a      	ldr	r2, [r3, #20]
 8002a92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a96:	441a      	add	r2, r3
 8002a98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a9a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a9e:	69da      	ldr	r2, [r3, #28]
 8002aa0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002aa4:	441a      	add	r2, r3
 8002aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aa8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f003 fcea 	bl	800648a <USB_EPStartXfer>
 8002ab6:	e006      	b.n	8002ac6 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002ab8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002abc:	461a      	mov	r2, r3
 8002abe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f91b 	bl	8002cfc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	b21b      	sxth	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f6ff ac37 	blt.w	8002346 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3758      	adds	r7, #88	; 0x58
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b088      	sub	sp, #32
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	4613      	mov	r3, r2
 8002aee:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002af0:	88fb      	ldrh	r3, [r7, #6]
 8002af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d07e      	beq.n	8002bf8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	461a      	mov	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3302      	adds	r3, #2
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	6812      	ldr	r2, [r2, #0]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b22:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	699a      	ldr	r2, [r3, #24]
 8002b28:	8b7b      	ldrh	r3, [r7, #26]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d306      	bcc.n	8002b3c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	699a      	ldr	r2, [r3, #24]
 8002b32:	8b7b      	ldrh	r3, [r7, #26]
 8002b34:	1ad2      	subs	r2, r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	619a      	str	r2, [r3, #24]
 8002b3a:	e002      	b.n	8002b42 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d123      	bne.n	8002b92 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b64:	833b      	strh	r3, [r7, #24]
 8002b66:	8b3b      	ldrh	r3, [r7, #24]
 8002b68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b6c:	833b      	strh	r3, [r7, #24]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	441a      	add	r2, r3
 8002b7c:	8b3b      	ldrh	r3, [r7, #24]
 8002b7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b92:	88fb      	ldrh	r3, [r7, #6]
 8002b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d01f      	beq.n	8002bdc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb6:	82fb      	strh	r3, [r7, #22]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	441a      	add	r2, r3
 8002bc6:	8afb      	ldrh	r3, [r7, #22]
 8002bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002bdc:	8b7b      	ldrh	r3, [r7, #26]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 8087 	beq.w	8002cf2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	6959      	ldr	r1, [r3, #20]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	891a      	ldrh	r2, [r3, #8]
 8002bf0:	8b7b      	ldrh	r3, [r7, #26]
 8002bf2:	f005 f96f 	bl	8007ed4 <USB_ReadPMA>
 8002bf6:	e07c      	b.n	8002cf2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	461a      	mov	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3306      	adds	r3, #6
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	6812      	ldr	r2, [r2, #0]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c20:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	8b7b      	ldrh	r3, [r7, #26]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d306      	bcc.n	8002c3a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	699a      	ldr	r2, [r3, #24]
 8002c30:	8b7b      	ldrh	r3, [r7, #26]
 8002c32:	1ad2      	subs	r2, r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	619a      	str	r2, [r3, #24]
 8002c38:	e002      	b.n	8002c40 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d123      	bne.n	8002c90 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c62:	83fb      	strh	r3, [r7, #30]
 8002c64:	8bfb      	ldrh	r3, [r7, #30]
 8002c66:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c6a:	83fb      	strh	r3, [r7, #30]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	461a      	mov	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	441a      	add	r2, r3
 8002c7a:	8bfb      	ldrh	r3, [r7, #30]
 8002c7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002c90:	88fb      	ldrh	r3, [r7, #6]
 8002c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d11f      	bne.n	8002cda <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb4:	83bb      	strh	r3, [r7, #28]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	441a      	add	r2, r3
 8002cc4:	8bbb      	ldrh	r3, [r7, #28]
 8002cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cd2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002cda:	8b7b      	ldrh	r3, [r7, #26]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d008      	beq.n	8002cf2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	6959      	ldr	r1, [r3, #20]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	895a      	ldrh	r2, [r3, #10]
 8002cec:	8b7b      	ldrh	r3, [r7, #26]
 8002cee:	f005 f8f1 	bl	8007ed4 <USB_ReadPMA>
    }
  }

  return count;
 8002cf2:	8b7b      	ldrh	r3, [r7, #26]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3720      	adds	r7, #32
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b0a4      	sub	sp, #144	; 0x90
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	4613      	mov	r3, r2
 8002d08:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 81dd 	beq.w	80030d0 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4413      	add	r3, r2
 8002d2a:	3302      	adds	r3, #2
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d3e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	699a      	ldr	r2, [r3, #24]
 8002d46:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d907      	bls.n	8002d5e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	699a      	ldr	r2, [r3, #24]
 8002d52:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d56:	1ad2      	subs	r2, r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	619a      	str	r2, [r3, #24]
 8002d5c:	e002      	b.n	8002d64 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2200      	movs	r2, #0
 8002d62:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f040 80b9 	bne.w	8002ee0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	785b      	ldrb	r3, [r3, #1]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d126      	bne.n	8002dc4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	461a      	mov	r2, r3
 8002d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8a:	4413      	add	r3, r2
 8002d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	011a      	lsls	r2, r3, #4
 8002d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d96:	4413      	add	r3, r2
 8002d98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	801a      	strh	r2, [r3, #0]
 8002dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002db8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc0:	801a      	strh	r2, [r3, #0]
 8002dc2:	e01a      	b.n	8002dfa <HAL_PCD_EP_DB_Transmit+0xfe>
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	785b      	ldrb	r3, [r3, #1]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d116      	bne.n	8002dfa <HAL_PCD_EP_DB_Transmit+0xfe>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	461a      	mov	r2, r3
 8002dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de0:	4413      	add	r3, r2
 8002de2:	637b      	str	r3, [r7, #52]	; 0x34
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	011a      	lsls	r2, r3, #4
 8002dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dec:	4413      	add	r3, r2
 8002dee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002df2:	633b      	str	r3, [r7, #48]	; 0x30
 8002df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df6:	2200      	movs	r2, #0
 8002df8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	785b      	ldrb	r3, [r3, #1]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d126      	bne.n	8002e56 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	61fb      	str	r3, [r7, #28]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	461a      	mov	r2, r3
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	61fb      	str	r3, [r7, #28]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	011a      	lsls	r2, r3, #4
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e2e:	61bb      	str	r3, [r7, #24]
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	801a      	strh	r2, [r3, #0]
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	801a      	strh	r2, [r3, #0]
 8002e54:	e017      	b.n	8002e86 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	785b      	ldrb	r3, [r3, #1]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d113      	bne.n	8002e86 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	4413      	add	r3, r2
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	011a      	lsls	r2, r3, #4
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	4413      	add	r3, r2
 8002e7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e7e:	623b      	str	r3, [r7, #32]
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	2200      	movs	r2, #0
 8002e84:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f006 fe2e 	bl	8009aee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e92:	88fb      	ldrh	r3, [r7, #6]
 8002e94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 82fc 	beq.w	8003496 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb8:	82fb      	strh	r3, [r7, #22]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	441a      	add	r2, r3
 8002ec8:	8afb      	ldrh	r3, [r7, #22]
 8002eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ed2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	8013      	strh	r3, [r2, #0]
 8002ede:	e2da      	b.n	8003496 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d021      	beq.n	8002f2e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f04:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	441a      	add	r2, r3
 8002f16:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	f040 82ae 	bne.w	8003496 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f42:	441a      	add	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	69da      	ldr	r2, [r3, #28]
 8002f4c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f50:	441a      	add	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	6a1a      	ldr	r2, [r3, #32]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d30b      	bcc.n	8002f7a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	6a1a      	ldr	r2, [r3, #32]
 8002f6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f72:	1ad2      	subs	r2, r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	621a      	str	r2, [r3, #32]
 8002f78:	e017      	b.n	8002faa <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d108      	bne.n	8002f94 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002f82:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f92:	e00a      	b.n	8002faa <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	785b      	ldrb	r3, [r3, #1]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d165      	bne.n	800307e <HAL_PCD_EP_DB_Transmit+0x382>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc6:	4413      	add	r3, r2
 8002fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	011a      	lsls	r2, r3, #4
 8002fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002fd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe8:	801a      	strh	r2, [r3, #0]
 8002fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fee:	2b3e      	cmp	r3, #62	; 0x3e
 8002ff0:	d91d      	bls.n	800302e <HAL_PCD_EP_DB_Transmit+0x332>
 8002ff2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ffe:	f003 031f 	and.w	r3, r3, #31
 8003002:	2b00      	cmp	r3, #0
 8003004:	d102      	bne.n	800300c <HAL_PCD_EP_DB_Transmit+0x310>
 8003006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003008:	3b01      	subs	r3, #1
 800300a:	64bb      	str	r3, [r7, #72]	; 0x48
 800300c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	b29a      	uxth	r2, r3
 8003012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003014:	b29b      	uxth	r3, r3
 8003016:	029b      	lsls	r3, r3, #10
 8003018:	b29b      	uxth	r3, r3
 800301a:	4313      	orrs	r3, r2
 800301c:	b29b      	uxth	r3, r3
 800301e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003022:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003026:	b29a      	uxth	r2, r3
 8003028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302a:	801a      	strh	r2, [r3, #0]
 800302c:	e044      	b.n	80030b8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800302e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10a      	bne.n	800304c <HAL_PCD_EP_DB_Transmit+0x350>
 8003036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	b29b      	uxth	r3, r3
 800303c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003040:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003044:	b29a      	uxth	r2, r3
 8003046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003048:	801a      	strh	r2, [r3, #0]
 800304a:	e035      	b.n	80030b8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800304c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003050:	085b      	lsrs	r3, r3, #1
 8003052:	64bb      	str	r3, [r7, #72]	; 0x48
 8003054:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b00      	cmp	r3, #0
 800305e:	d002      	beq.n	8003066 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003062:	3301      	adds	r3, #1
 8003064:	64bb      	str	r3, [r7, #72]	; 0x48
 8003066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	b29a      	uxth	r2, r3
 800306c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800306e:	b29b      	uxth	r3, r3
 8003070:	029b      	lsls	r3, r3, #10
 8003072:	b29b      	uxth	r3, r3
 8003074:	4313      	orrs	r3, r2
 8003076:	b29a      	uxth	r2, r3
 8003078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307a:	801a      	strh	r2, [r3, #0]
 800307c:	e01c      	b.n	80030b8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	785b      	ldrb	r3, [r3, #1]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d118      	bne.n	80030b8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	647b      	str	r3, [r7, #68]	; 0x44
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003094:	b29b      	uxth	r3, r3
 8003096:	461a      	mov	r2, r3
 8003098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800309a:	4413      	add	r3, r2
 800309c:	647b      	str	r3, [r7, #68]	; 0x44
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	011a      	lsls	r2, r3, #4
 80030a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030a6:	4413      	add	r3, r2
 80030a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030ac:	643b      	str	r3, [r7, #64]	; 0x40
 80030ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6818      	ldr	r0, [r3, #0]
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	6959      	ldr	r1, [r3, #20]
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	891a      	ldrh	r2, [r3, #8]
 80030c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	f004 febd 	bl	8007e48 <USB_WritePMA>
 80030ce:	e1e2      	b.n	8003496 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030d8:	b29b      	uxth	r3, r3
 80030da:	461a      	mov	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	3306      	adds	r3, #6
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	6812      	ldr	r2, [r2, #0]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030f8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	699a      	ldr	r2, [r3, #24]
 8003100:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003104:	429a      	cmp	r2, r3
 8003106:	d307      	bcc.n	8003118 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	699a      	ldr	r2, [r3, #24]
 800310c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003110:	1ad2      	subs	r2, r2, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	619a      	str	r2, [r3, #24]
 8003116:	e002      	b.n	800311e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2200      	movs	r2, #0
 800311c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	2b00      	cmp	r3, #0
 8003124:	f040 80c0 	bne.w	80032a8 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	785b      	ldrb	r3, [r3, #1]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d126      	bne.n	800317e <HAL_PCD_EP_DB_Transmit+0x482>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800313e:	b29b      	uxth	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003144:	4413      	add	r3, r2
 8003146:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	011a      	lsls	r2, r3, #4
 800314e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003150:	4413      	add	r3, r2
 8003152:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003156:	67bb      	str	r3, [r7, #120]	; 0x78
 8003158:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	b29b      	uxth	r3, r3
 800315e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003162:	b29a      	uxth	r2, r3
 8003164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003166:	801a      	strh	r2, [r3, #0]
 8003168:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	b29b      	uxth	r3, r3
 800316e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003176:	b29a      	uxth	r2, r3
 8003178:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800317a:	801a      	strh	r2, [r3, #0]
 800317c:	e01a      	b.n	80031b4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	785b      	ldrb	r3, [r3, #1]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d116      	bne.n	80031b4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	667b      	str	r3, [r7, #100]	; 0x64
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003194:	b29b      	uxth	r3, r3
 8003196:	461a      	mov	r2, r3
 8003198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800319a:	4413      	add	r3, r2
 800319c:	667b      	str	r3, [r7, #100]	; 0x64
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	011a      	lsls	r2, r3, #4
 80031a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031a6:	4413      	add	r3, r2
 80031a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80031ac:	663b      	str	r3, [r7, #96]	; 0x60
 80031ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031b0:	2200      	movs	r2, #0
 80031b2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	677b      	str	r3, [r7, #116]	; 0x74
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	785b      	ldrb	r3, [r3, #1]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d12b      	bne.n	800321a <HAL_PCD_EP_DB_Transmit+0x51e>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d6:	4413      	add	r3, r2
 80031d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	011a      	lsls	r2, r3, #4
 80031e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031e2:	4413      	add	r3, r2
 80031e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031fe:	801a      	strh	r2, [r3, #0]
 8003200:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	b29b      	uxth	r3, r3
 8003208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800320c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003210:	b29a      	uxth	r2, r3
 8003212:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003216:	801a      	strh	r2, [r3, #0]
 8003218:	e017      	b.n	800324a <HAL_PCD_EP_DB_Transmit+0x54e>
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	785b      	ldrb	r3, [r3, #1]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d113      	bne.n	800324a <HAL_PCD_EP_DB_Transmit+0x54e>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800322a:	b29b      	uxth	r3, r3
 800322c:	461a      	mov	r2, r3
 800322e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003230:	4413      	add	r3, r2
 8003232:	677b      	str	r3, [r7, #116]	; 0x74
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	011a      	lsls	r2, r3, #4
 800323a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800323c:	4413      	add	r3, r2
 800323e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003242:	673b      	str	r3, [r7, #112]	; 0x70
 8003244:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003246:	2200      	movs	r2, #0
 8003248:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	4619      	mov	r1, r3
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f006 fc4c 	bl	8009aee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003256:	88fb      	ldrh	r3, [r7, #6]
 8003258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800325c:	2b00      	cmp	r3, #0
 800325e:	f040 811a 	bne.w	8003496 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	b29b      	uxth	r3, r3
 8003274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	461a      	mov	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	441a      	add	r2, r3
 800328e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800329a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800329e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	8013      	strh	r3, [r2, #0]
 80032a6:	e0f6      	b.n	8003496 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80032a8:	88fb      	ldrh	r3, [r7, #6]
 80032aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d121      	bne.n	80032f6 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	461a      	mov	r2, r3
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	441a      	add	r2, r3
 80032de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	f040 80ca 	bne.w	8003496 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800330a:	441a      	add	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	69da      	ldr	r2, [r3, #28]
 8003314:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003318:	441a      	add	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	6a1a      	ldr	r2, [r3, #32]
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	429a      	cmp	r2, r3
 8003328:	d30b      	bcc.n	8003342 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	6a1a      	ldr	r2, [r3, #32]
 8003336:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800333a:	1ad2      	subs	r2, r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	621a      	str	r2, [r3, #32]
 8003340:	e017      	b.n	8003372 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d108      	bne.n	800335c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800334a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800334e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800335a:	e00a      	b.n	8003372 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2200      	movs	r2, #0
 8003368:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	657b      	str	r3, [r7, #84]	; 0x54
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	785b      	ldrb	r3, [r3, #1]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d165      	bne.n	800344c <HAL_PCD_EP_DB_Transmit+0x750>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800338e:	b29b      	uxth	r3, r3
 8003390:	461a      	mov	r2, r3
 8003392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003394:	4413      	add	r3, r2
 8003396:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	011a      	lsls	r2, r3, #4
 800339e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033a0:	4413      	add	r3, r2
 80033a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80033a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80033a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033b6:	801a      	strh	r2, [r3, #0]
 80033b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033bc:	2b3e      	cmp	r3, #62	; 0x3e
 80033be:	d91d      	bls.n	80033fc <HAL_PCD_EP_DB_Transmit+0x700>
 80033c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033c4:	095b      	lsrs	r3, r3, #5
 80033c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80033c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d102      	bne.n	80033da <HAL_PCD_EP_DB_Transmit+0x6de>
 80033d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033d6:	3b01      	subs	r3, #1
 80033d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80033da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	b29a      	uxth	r2, r3
 80033e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	029b      	lsls	r3, r3, #10
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	4313      	orrs	r3, r2
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033f8:	801a      	strh	r2, [r3, #0]
 80033fa:	e041      	b.n	8003480 <HAL_PCD_EP_DB_Transmit+0x784>
 80033fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10a      	bne.n	800341a <HAL_PCD_EP_DB_Transmit+0x71e>
 8003404:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	b29b      	uxth	r3, r3
 800340a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800340e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003412:	b29a      	uxth	r2, r3
 8003414:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003416:	801a      	strh	r2, [r3, #0]
 8003418:	e032      	b.n	8003480 <HAL_PCD_EP_DB_Transmit+0x784>
 800341a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800341e:	085b      	lsrs	r3, r3, #1
 8003420:	66bb      	str	r3, [r7, #104]	; 0x68
 8003422:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <HAL_PCD_EP_DB_Transmit+0x738>
 800342e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003430:	3301      	adds	r3, #1
 8003432:	66bb      	str	r3, [r7, #104]	; 0x68
 8003434:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	b29a      	uxth	r2, r3
 800343a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800343c:	b29b      	uxth	r3, r3
 800343e:	029b      	lsls	r3, r3, #10
 8003440:	b29b      	uxth	r3, r3
 8003442:	4313      	orrs	r3, r2
 8003444:	b29a      	uxth	r2, r3
 8003446:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003448:	801a      	strh	r2, [r3, #0]
 800344a:	e019      	b.n	8003480 <HAL_PCD_EP_DB_Transmit+0x784>
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	785b      	ldrb	r3, [r3, #1]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d115      	bne.n	8003480 <HAL_PCD_EP_DB_Transmit+0x784>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800345c:	b29b      	uxth	r3, r3
 800345e:	461a      	mov	r2, r3
 8003460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003462:	4413      	add	r3, r2
 8003464:	657b      	str	r3, [r7, #84]	; 0x54
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	011a      	lsls	r2, r3, #4
 800346c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800346e:	4413      	add	r3, r2
 8003470:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003474:	653b      	str	r3, [r7, #80]	; 0x50
 8003476:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800347a:	b29a      	uxth	r2, r3
 800347c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800347e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6818      	ldr	r0, [r3, #0]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	6959      	ldr	r1, [r3, #20]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	895a      	ldrh	r2, [r3, #10]
 800348c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003490:	b29b      	uxth	r3, r3
 8003492:	f004 fcd9 	bl	8007e48 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034b0:	82bb      	strh	r3, [r7, #20]
 80034b2:	8abb      	ldrh	r3, [r7, #20]
 80034b4:	f083 0310 	eor.w	r3, r3, #16
 80034b8:	82bb      	strh	r3, [r7, #20]
 80034ba:	8abb      	ldrh	r3, [r7, #20]
 80034bc:	f083 0320 	eor.w	r3, r3, #32
 80034c0:	82bb      	strh	r3, [r7, #20]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	441a      	add	r2, r3
 80034d0:	8abb      	ldrh	r3, [r7, #20]
 80034d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3790      	adds	r7, #144	; 0x90
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	607b      	str	r3, [r7, #4]
 80034fa:	460b      	mov	r3, r1
 80034fc:	817b      	strh	r3, [r7, #10]
 80034fe:	4613      	mov	r3, r2
 8003500:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003502:	897b      	ldrh	r3, [r7, #10]
 8003504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00b      	beq.n	8003526 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800350e:	897b      	ldrh	r3, [r7, #10]
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	4613      	mov	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	4413      	add	r3, r2
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	e009      	b.n	800353a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003526:	897a      	ldrh	r2, [r7, #10]
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4413      	add	r3, r2
 8003538:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800353a:	893b      	ldrh	r3, [r7, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d107      	bne.n	8003550 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2200      	movs	r2, #0
 8003544:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	b29a      	uxth	r2, r3
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	80da      	strh	r2, [r3, #6]
 800354e:	e00b      	b.n	8003568 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2201      	movs	r2, #1
 8003554:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	b29a      	uxth	r2, r3
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	0c1b      	lsrs	r3, r3, #16
 8003562:	b29a      	uxth	r2, r3
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800357e:	af00      	add	r7, sp, #0
 8003580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003584:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003588:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800358a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800358e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d102      	bne.n	800359e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	f001 b823 	b.w	80045e4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 817d 	beq.w	80038ae <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80035b4:	4bbc      	ldr	r3, [pc, #752]	; (80038a8 <HAL_RCC_OscConfig+0x330>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 030c 	and.w	r3, r3, #12
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d00c      	beq.n	80035da <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035c0:	4bb9      	ldr	r3, [pc, #740]	; (80038a8 <HAL_RCC_OscConfig+0x330>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 030c 	and.w	r3, r3, #12
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d15c      	bne.n	8003686 <HAL_RCC_OscConfig+0x10e>
 80035cc:	4bb6      	ldr	r3, [pc, #728]	; (80038a8 <HAL_RCC_OscConfig+0x330>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d8:	d155      	bne.n	8003686 <HAL_RCC_OscConfig+0x10e>
 80035da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035de:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80035e6:	fa93 f3a3 	rbit	r3, r3
 80035ea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035ee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f2:	fab3 f383 	clz	r3, r3
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	095b      	lsrs	r3, r3, #5
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b01      	cmp	r3, #1
 8003604:	d102      	bne.n	800360c <HAL_RCC_OscConfig+0x94>
 8003606:	4ba8      	ldr	r3, [pc, #672]	; (80038a8 <HAL_RCC_OscConfig+0x330>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	e015      	b.n	8003638 <HAL_RCC_OscConfig+0xc0>
 800360c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003610:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003614:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003618:	fa93 f3a3 	rbit	r3, r3
 800361c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003620:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003624:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003628:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800362c:	fa93 f3a3 	rbit	r3, r3
 8003630:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003634:	4b9c      	ldr	r3, [pc, #624]	; (80038a8 <HAL_RCC_OscConfig+0x330>)
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800363c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003640:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003644:	fa92 f2a2 	rbit	r2, r2
 8003648:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800364c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003650:	fab2 f282 	clz	r2, r2
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	f042 0220 	orr.w	r2, r2, #32
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	f002 021f 	and.w	r2, r2, #31
 8003660:	2101      	movs	r1, #1
 8003662:	fa01 f202 	lsl.w	r2, r1, r2
 8003666:	4013      	ands	r3, r2
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 811f 	beq.w	80038ac <HAL_RCC_OscConfig+0x334>
 800366e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003672:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	f040 8116 	bne.w	80038ac <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	f000 bfaf 	b.w	80045e4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003696:	d106      	bne.n	80036a6 <HAL_RCC_OscConfig+0x12e>
 8003698:	4b83      	ldr	r3, [pc, #524]	; (80038a8 <HAL_RCC_OscConfig+0x330>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a82      	ldr	r2, [pc, #520]	; (80038a8 <HAL_RCC_OscConfig+0x330>)
 800369e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a2:	6013      	str	r3, [r2, #0]
 80036a4:	e036      	b.n	8003714 <HAL_RCC_OscConfig+0x19c>
 80036a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10c      	bne.n	80036d0 <HAL_RCC_OscConfig+0x158>
 80036b6:	4b7c      	ldr	r3, [pc, #496]	; (80038a8 <HAL_RCC_OscConfig+0x330>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a7b      	ldr	r2, [pc, #492]	; (80038a8 <HAL_RCC_OscConfig+0x330>)
 80036bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	4b79      	ldr	r3, [pc, #484]	; (80038a8 <HAL_RCC_OscConfig+0x330>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a78      	ldr	r2, [pc, #480]	; (80038a8 <HAL_RCC_OscConfig+0x330>)
 80036c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	e021      	b.n	8003714 <HAL_RCC_OscConfig+0x19c>
 80036d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036e0:	d10c      	bne.n	80036fc <HAL_RCC_OscConfig+0x184>
 80036e2:	4b71      	ldr	r3, [pc, #452]	; (80038a8 <HAL_RCC_OscConfig+0x330>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a70      	ldr	r2, [pc, #448]	; (80038a8 <HAL_RCC_OscConfig+0x330>)
 80036e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	4b6e      	ldr	r3, [pc, #440]	; (80038a8 <HAL_RCC_OscConfig+0x330>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a6d      	ldr	r2, [pc, #436]	; (80038a8 <HAL_RCC_OscConfig+0x330>)
 80036f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	e00b      	b.n	8003714 <HAL_RCC_OscConfig+0x19c>
 80036fc:	4b6a      	ldr	r3, [pc, #424]	; (80038a8 <HAL_RCC_OscConfig+0x330>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a69      	ldr	r2, [pc, #420]	; (80038a8 <HAL_RCC_OscConfig+0x330>)
 8003702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	4b67      	ldr	r3, [pc, #412]	; (80038a8 <HAL_RCC_OscConfig+0x330>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a66      	ldr	r2, [pc, #408]	; (80038a8 <HAL_RCC_OscConfig+0x330>)
 800370e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003712:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003714:	4b64      	ldr	r3, [pc, #400]	; (80038a8 <HAL_RCC_OscConfig+0x330>)
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	f023 020f 	bic.w	r2, r3, #15
 800371c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003720:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	495f      	ldr	r1, [pc, #380]	; (80038a8 <HAL_RCC_OscConfig+0x330>)
 800372a:	4313      	orrs	r3, r2
 800372c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800372e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003732:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d059      	beq.n	80037f2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373e:	f7fd f94b 	bl	80009d8 <HAL_GetTick>
 8003742:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003746:	e00a      	b.n	800375e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003748:	f7fd f946 	bl	80009d8 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b64      	cmp	r3, #100	; 0x64
 8003756:	d902      	bls.n	800375e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	f000 bf43 	b.w	80045e4 <HAL_RCC_OscConfig+0x106c>
 800375e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003762:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003766:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800376a:	fa93 f3a3 	rbit	r3, r3
 800376e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003772:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003776:	fab3 f383 	clz	r3, r3
 800377a:	b2db      	uxtb	r3, r3
 800377c:	095b      	lsrs	r3, r3, #5
 800377e:	b2db      	uxtb	r3, r3
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b01      	cmp	r3, #1
 8003788:	d102      	bne.n	8003790 <HAL_RCC_OscConfig+0x218>
 800378a:	4b47      	ldr	r3, [pc, #284]	; (80038a8 <HAL_RCC_OscConfig+0x330>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	e015      	b.n	80037bc <HAL_RCC_OscConfig+0x244>
 8003790:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003794:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003798:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800379c:	fa93 f3a3 	rbit	r3, r3
 80037a0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80037a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037a8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80037ac:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80037b0:	fa93 f3a3 	rbit	r3, r3
 80037b4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80037b8:	4b3b      	ldr	r3, [pc, #236]	; (80038a8 <HAL_RCC_OscConfig+0x330>)
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037c0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80037c4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80037c8:	fa92 f2a2 	rbit	r2, r2
 80037cc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80037d0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80037d4:	fab2 f282 	clz	r2, r2
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	f042 0220 	orr.w	r2, r2, #32
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	f002 021f 	and.w	r2, r2, #31
 80037e4:	2101      	movs	r1, #1
 80037e6:	fa01 f202 	lsl.w	r2, r1, r2
 80037ea:	4013      	ands	r3, r2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0ab      	beq.n	8003748 <HAL_RCC_OscConfig+0x1d0>
 80037f0:	e05d      	b.n	80038ae <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f2:	f7fd f8f1 	bl	80009d8 <HAL_GetTick>
 80037f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037fa:	e00a      	b.n	8003812 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037fc:	f7fd f8ec 	bl	80009d8 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b64      	cmp	r3, #100	; 0x64
 800380a:	d902      	bls.n	8003812 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	f000 bee9 	b.w	80045e4 <HAL_RCC_OscConfig+0x106c>
 8003812:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003816:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800381e:	fa93 f3a3 	rbit	r3, r3
 8003822:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003826:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800382a:	fab3 f383 	clz	r3, r3
 800382e:	b2db      	uxtb	r3, r3
 8003830:	095b      	lsrs	r3, r3, #5
 8003832:	b2db      	uxtb	r3, r3
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b01      	cmp	r3, #1
 800383c:	d102      	bne.n	8003844 <HAL_RCC_OscConfig+0x2cc>
 800383e:	4b1a      	ldr	r3, [pc, #104]	; (80038a8 <HAL_RCC_OscConfig+0x330>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	e015      	b.n	8003870 <HAL_RCC_OscConfig+0x2f8>
 8003844:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003848:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003850:	fa93 f3a3 	rbit	r3, r3
 8003854:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003858:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800385c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003860:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003864:	fa93 f3a3 	rbit	r3, r3
 8003868:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800386c:	4b0e      	ldr	r3, [pc, #56]	; (80038a8 <HAL_RCC_OscConfig+0x330>)
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003874:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003878:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800387c:	fa92 f2a2 	rbit	r2, r2
 8003880:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003884:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003888:	fab2 f282 	clz	r2, r2
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	f042 0220 	orr.w	r2, r2, #32
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	f002 021f 	and.w	r2, r2, #31
 8003898:	2101      	movs	r1, #1
 800389a:	fa01 f202 	lsl.w	r2, r1, r2
 800389e:	4013      	ands	r3, r2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1ab      	bne.n	80037fc <HAL_RCC_OscConfig+0x284>
 80038a4:	e003      	b.n	80038ae <HAL_RCC_OscConfig+0x336>
 80038a6:	bf00      	nop
 80038a8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 817d 	beq.w	8003bbe <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80038c4:	4ba6      	ldr	r3, [pc, #664]	; (8003b60 <HAL_RCC_OscConfig+0x5e8>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f003 030c 	and.w	r3, r3, #12
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00b      	beq.n	80038e8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80038d0:	4ba3      	ldr	r3, [pc, #652]	; (8003b60 <HAL_RCC_OscConfig+0x5e8>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f003 030c 	and.w	r3, r3, #12
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d172      	bne.n	80039c2 <HAL_RCC_OscConfig+0x44a>
 80038dc:	4ba0      	ldr	r3, [pc, #640]	; (8003b60 <HAL_RCC_OscConfig+0x5e8>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d16c      	bne.n	80039c2 <HAL_RCC_OscConfig+0x44a>
 80038e8:	2302      	movs	r3, #2
 80038ea:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80038f2:	fa93 f3a3 	rbit	r3, r3
 80038f6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80038fa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038fe:	fab3 f383 	clz	r3, r3
 8003902:	b2db      	uxtb	r3, r3
 8003904:	095b      	lsrs	r3, r3, #5
 8003906:	b2db      	uxtb	r3, r3
 8003908:	f043 0301 	orr.w	r3, r3, #1
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b01      	cmp	r3, #1
 8003910:	d102      	bne.n	8003918 <HAL_RCC_OscConfig+0x3a0>
 8003912:	4b93      	ldr	r3, [pc, #588]	; (8003b60 <HAL_RCC_OscConfig+0x5e8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	e013      	b.n	8003940 <HAL_RCC_OscConfig+0x3c8>
 8003918:	2302      	movs	r3, #2
 800391a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003922:	fa93 f3a3 	rbit	r3, r3
 8003926:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800392a:	2302      	movs	r3, #2
 800392c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003930:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003934:	fa93 f3a3 	rbit	r3, r3
 8003938:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800393c:	4b88      	ldr	r3, [pc, #544]	; (8003b60 <HAL_RCC_OscConfig+0x5e8>)
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	2202      	movs	r2, #2
 8003942:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003946:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800394a:	fa92 f2a2 	rbit	r2, r2
 800394e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003952:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003956:	fab2 f282 	clz	r2, r2
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	f042 0220 	orr.w	r2, r2, #32
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	f002 021f 	and.w	r2, r2, #31
 8003966:	2101      	movs	r1, #1
 8003968:	fa01 f202 	lsl.w	r2, r1, r2
 800396c:	4013      	ands	r3, r2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <HAL_RCC_OscConfig+0x410>
 8003972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003976:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d002      	beq.n	8003988 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	f000 be2e 	b.w	80045e4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003988:	4b75      	ldr	r3, [pc, #468]	; (8003b60 <HAL_RCC_OscConfig+0x5e8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003994:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	21f8      	movs	r1, #248	; 0xf8
 800399e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80039a6:	fa91 f1a1 	rbit	r1, r1
 80039aa:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80039ae:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80039b2:	fab1 f181 	clz	r1, r1
 80039b6:	b2c9      	uxtb	r1, r1
 80039b8:	408b      	lsls	r3, r1
 80039ba:	4969      	ldr	r1, [pc, #420]	; (8003b60 <HAL_RCC_OscConfig+0x5e8>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c0:	e0fd      	b.n	8003bbe <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 8088 	beq.w	8003ae4 <HAL_RCC_OscConfig+0x56c>
 80039d4:	2301      	movs	r3, #1
 80039d6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039da:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80039de:	fa93 f3a3 	rbit	r3, r3
 80039e2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80039e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039ea:	fab3 f383 	clz	r3, r3
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	461a      	mov	r2, r3
 80039fc:	2301      	movs	r3, #1
 80039fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a00:	f7fc ffea 	bl	80009d8 <HAL_GetTick>
 8003a04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a08:	e00a      	b.n	8003a20 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a0a:	f7fc ffe5 	bl	80009d8 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d902      	bls.n	8003a20 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	f000 bde2 	b.w	80045e4 <HAL_RCC_OscConfig+0x106c>
 8003a20:	2302      	movs	r3, #2
 8003a22:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a26:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003a2a:	fa93 f3a3 	rbit	r3, r3
 8003a2e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003a32:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a36:	fab3 f383 	clz	r3, r3
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	095b      	lsrs	r3, r3, #5
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	f043 0301 	orr.w	r3, r3, #1
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d102      	bne.n	8003a50 <HAL_RCC_OscConfig+0x4d8>
 8003a4a:	4b45      	ldr	r3, [pc, #276]	; (8003b60 <HAL_RCC_OscConfig+0x5e8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	e013      	b.n	8003a78 <HAL_RCC_OscConfig+0x500>
 8003a50:	2302      	movs	r3, #2
 8003a52:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a56:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003a5a:	fa93 f3a3 	rbit	r3, r3
 8003a5e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003a62:	2302      	movs	r3, #2
 8003a64:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003a68:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003a6c:	fa93 f3a3 	rbit	r3, r3
 8003a70:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003a74:	4b3a      	ldr	r3, [pc, #232]	; (8003b60 <HAL_RCC_OscConfig+0x5e8>)
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	2202      	movs	r2, #2
 8003a7a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003a7e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003a82:	fa92 f2a2 	rbit	r2, r2
 8003a86:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003a8a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003a8e:	fab2 f282 	clz	r2, r2
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	f042 0220 	orr.w	r2, r2, #32
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	f002 021f 	and.w	r2, r2, #31
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0af      	beq.n	8003a0a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aaa:	4b2d      	ldr	r3, [pc, #180]	; (8003b60 <HAL_RCC_OscConfig+0x5e8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	21f8      	movs	r1, #248	; 0xf8
 8003ac0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003ac8:	fa91 f1a1 	rbit	r1, r1
 8003acc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003ad0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003ad4:	fab1 f181 	clz	r1, r1
 8003ad8:	b2c9      	uxtb	r1, r1
 8003ada:	408b      	lsls	r3, r1
 8003adc:	4920      	ldr	r1, [pc, #128]	; (8003b60 <HAL_RCC_OscConfig+0x5e8>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	600b      	str	r3, [r1, #0]
 8003ae2:	e06c      	b.n	8003bbe <HAL_RCC_OscConfig+0x646>
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003aee:	fa93 f3a3 	rbit	r3, r3
 8003af2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003af6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003afa:	fab3 f383 	clz	r3, r3
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b10:	f7fc ff62 	bl	80009d8 <HAL_GetTick>
 8003b14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b18:	e00a      	b.n	8003b30 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b1a:	f7fc ff5d 	bl	80009d8 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d902      	bls.n	8003b30 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	f000 bd5a 	b.w	80045e4 <HAL_RCC_OscConfig+0x106c>
 8003b30:	2302      	movs	r3, #2
 8003b32:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b36:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003b3a:	fa93 f3a3 	rbit	r3, r3
 8003b3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003b42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b46:	fab3 f383 	clz	r3, r3
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	095b      	lsrs	r3, r3, #5
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d104      	bne.n	8003b64 <HAL_RCC_OscConfig+0x5ec>
 8003b5a:	4b01      	ldr	r3, [pc, #4]	; (8003b60 <HAL_RCC_OscConfig+0x5e8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	e015      	b.n	8003b8c <HAL_RCC_OscConfig+0x614>
 8003b60:	40021000 	.word	0x40021000
 8003b64:	2302      	movs	r3, #2
 8003b66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b6e:	fa93 f3a3 	rbit	r3, r3
 8003b72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003b76:	2302      	movs	r3, #2
 8003b78:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003b7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003b80:	fa93 f3a3 	rbit	r3, r3
 8003b84:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003b88:	4bc8      	ldr	r3, [pc, #800]	; (8003eac <HAL_RCC_OscConfig+0x934>)
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003b92:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003b96:	fa92 f2a2 	rbit	r2, r2
 8003b9a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003b9e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003ba2:	fab2 f282 	clz	r2, r2
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	f042 0220 	orr.w	r2, r2, #32
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	f002 021f 	and.w	r2, r2, #31
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb8:	4013      	ands	r3, r2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1ad      	bne.n	8003b1a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 8110 	beq.w	8003df4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d079      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x760>
 8003be4:	2301      	movs	r3, #1
 8003be6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003bee:	fa93 f3a3 	rbit	r3, r3
 8003bf2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003bf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bfa:	fab3 f383 	clz	r3, r3
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	461a      	mov	r2, r3
 8003c02:	4bab      	ldr	r3, [pc, #684]	; (8003eb0 <HAL_RCC_OscConfig+0x938>)
 8003c04:	4413      	add	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	461a      	mov	r2, r3
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c0e:	f7fc fee3 	bl	80009d8 <HAL_GetTick>
 8003c12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c16:	e00a      	b.n	8003c2e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c18:	f7fc fede 	bl	80009d8 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d902      	bls.n	8003c2e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	f000 bcdb 	b.w	80045e4 <HAL_RCC_OscConfig+0x106c>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003c38:	fa93 f3a3 	rbit	r3, r3
 8003c3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c44:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003c48:	2202      	movs	r2, #2
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c50:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	fa93 f2a3 	rbit	r2, r3
 8003c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	fa93 f2a3 	rbit	r2, r3
 8003c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003c86:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c88:	4b88      	ldr	r3, [pc, #544]	; (8003eac <HAL_RCC_OscConfig+0x934>)
 8003c8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c90:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003c94:	2102      	movs	r1, #2
 8003c96:	6019      	str	r1, [r3, #0]
 8003c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c9c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	fa93 f1a3 	rbit	r1, r3
 8003ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003caa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003cae:	6019      	str	r1, [r3, #0]
  return result;
 8003cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	fab3 f383 	clz	r3, r3
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	f003 031f 	and.w	r3, r3, #31
 8003cca:	2101      	movs	r1, #1
 8003ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0a0      	beq.n	8003c18 <HAL_RCC_OscConfig+0x6a0>
 8003cd6:	e08d      	b.n	8003df4 <HAL_RCC_OscConfig+0x87c>
 8003cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cdc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	fa93 f2a3 	rbit	r2, r3
 8003cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003cfa:	601a      	str	r2, [r3, #0]
  return result;
 8003cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d00:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003d04:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d06:	fab3 f383 	clz	r3, r3
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4b68      	ldr	r3, [pc, #416]	; (8003eb0 <HAL_RCC_OscConfig+0x938>)
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	461a      	mov	r2, r3
 8003d16:	2300      	movs	r3, #0
 8003d18:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d1a:	f7fc fe5d 	bl	80009d8 <HAL_GetTick>
 8003d1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d22:	e00a      	b.n	8003d3a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d24:	f7fc fe58 	bl	80009d8 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d902      	bls.n	8003d3a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	f000 bc55 	b.w	80045e4 <HAL_RCC_OscConfig+0x106c>
 8003d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d3e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003d42:	2202      	movs	r2, #2
 8003d44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d4a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	fa93 f2a3 	rbit	r2, r3
 8003d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d58:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d62:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003d66:	2202      	movs	r2, #2
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d6e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	fa93 f2a3 	rbit	r2, r3
 8003d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	fa93 f2a3 	rbit	r2, r3
 8003d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003da4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da6:	4b41      	ldr	r3, [pc, #260]	; (8003eac <HAL_RCC_OscConfig+0x934>)
 8003da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003db2:	2102      	movs	r1, #2
 8003db4:	6019      	str	r1, [r3, #0]
 8003db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	fa93 f1a3 	rbit	r1, r3
 8003dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003dcc:	6019      	str	r1, [r3, #0]
  return result;
 8003dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	fab3 f383 	clz	r3, r3
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	f003 031f 	and.w	r3, r3, #31
 8003de8:	2101      	movs	r1, #1
 8003dea:	fa01 f303 	lsl.w	r3, r1, r3
 8003dee:	4013      	ands	r3, r2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d197      	bne.n	8003d24 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 81a1 	beq.w	800414c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e10:	4b26      	ldr	r3, [pc, #152]	; (8003eac <HAL_RCC_OscConfig+0x934>)
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d116      	bne.n	8003e4a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e1c:	4b23      	ldr	r3, [pc, #140]	; (8003eac <HAL_RCC_OscConfig+0x934>)
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	4a22      	ldr	r2, [pc, #136]	; (8003eac <HAL_RCC_OscConfig+0x934>)
 8003e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e26:	61d3      	str	r3, [r2, #28]
 8003e28:	4b20      	ldr	r3, [pc, #128]	; (8003eac <HAL_RCC_OscConfig+0x934>)
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e34:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e3e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003e42:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003e44:	2301      	movs	r3, #1
 8003e46:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4a:	4b1a      	ldr	r3, [pc, #104]	; (8003eb4 <HAL_RCC_OscConfig+0x93c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d11a      	bne.n	8003e8c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e56:	4b17      	ldr	r3, [pc, #92]	; (8003eb4 <HAL_RCC_OscConfig+0x93c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a16      	ldr	r2, [pc, #88]	; (8003eb4 <HAL_RCC_OscConfig+0x93c>)
 8003e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e60:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e62:	f7fc fdb9 	bl	80009d8 <HAL_GetTick>
 8003e66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6a:	e009      	b.n	8003e80 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e6c:	f7fc fdb4 	bl	80009d8 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b64      	cmp	r3, #100	; 0x64
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e3b1      	b.n	80045e4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e80:	4b0c      	ldr	r3, [pc, #48]	; (8003eb4 <HAL_RCC_OscConfig+0x93c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0ef      	beq.n	8003e6c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d10d      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x940>
 8003e9c:	4b03      	ldr	r3, [pc, #12]	; (8003eac <HAL_RCC_OscConfig+0x934>)
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	4a02      	ldr	r2, [pc, #8]	; (8003eac <HAL_RCC_OscConfig+0x934>)
 8003ea2:	f043 0301 	orr.w	r3, r3, #1
 8003ea6:	6213      	str	r3, [r2, #32]
 8003ea8:	e03c      	b.n	8003f24 <HAL_RCC_OscConfig+0x9ac>
 8003eaa:	bf00      	nop
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	10908120 	.word	0x10908120
 8003eb4:	40007000 	.word	0x40007000
 8003eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ebc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10c      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x96a>
 8003ec8:	4bc1      	ldr	r3, [pc, #772]	; (80041d0 <HAL_RCC_OscConfig+0xc58>)
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	4ac0      	ldr	r2, [pc, #768]	; (80041d0 <HAL_RCC_OscConfig+0xc58>)
 8003ece:	f023 0301 	bic.w	r3, r3, #1
 8003ed2:	6213      	str	r3, [r2, #32]
 8003ed4:	4bbe      	ldr	r3, [pc, #760]	; (80041d0 <HAL_RCC_OscConfig+0xc58>)
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	4abd      	ldr	r2, [pc, #756]	; (80041d0 <HAL_RCC_OscConfig+0xc58>)
 8003eda:	f023 0304 	bic.w	r3, r3, #4
 8003ede:	6213      	str	r3, [r2, #32]
 8003ee0:	e020      	b.n	8003f24 <HAL_RCC_OscConfig+0x9ac>
 8003ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	2b05      	cmp	r3, #5
 8003ef0:	d10c      	bne.n	8003f0c <HAL_RCC_OscConfig+0x994>
 8003ef2:	4bb7      	ldr	r3, [pc, #732]	; (80041d0 <HAL_RCC_OscConfig+0xc58>)
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	4ab6      	ldr	r2, [pc, #728]	; (80041d0 <HAL_RCC_OscConfig+0xc58>)
 8003ef8:	f043 0304 	orr.w	r3, r3, #4
 8003efc:	6213      	str	r3, [r2, #32]
 8003efe:	4bb4      	ldr	r3, [pc, #720]	; (80041d0 <HAL_RCC_OscConfig+0xc58>)
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	4ab3      	ldr	r2, [pc, #716]	; (80041d0 <HAL_RCC_OscConfig+0xc58>)
 8003f04:	f043 0301 	orr.w	r3, r3, #1
 8003f08:	6213      	str	r3, [r2, #32]
 8003f0a:	e00b      	b.n	8003f24 <HAL_RCC_OscConfig+0x9ac>
 8003f0c:	4bb0      	ldr	r3, [pc, #704]	; (80041d0 <HAL_RCC_OscConfig+0xc58>)
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	4aaf      	ldr	r2, [pc, #700]	; (80041d0 <HAL_RCC_OscConfig+0xc58>)
 8003f12:	f023 0301 	bic.w	r3, r3, #1
 8003f16:	6213      	str	r3, [r2, #32]
 8003f18:	4bad      	ldr	r3, [pc, #692]	; (80041d0 <HAL_RCC_OscConfig+0xc58>)
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	4aac      	ldr	r2, [pc, #688]	; (80041d0 <HAL_RCC_OscConfig+0xc58>)
 8003f1e:	f023 0304 	bic.w	r3, r3, #4
 8003f22:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 8081 	beq.w	8004038 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f36:	f7fc fd4f 	bl	80009d8 <HAL_GetTick>
 8003f3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f3e:	e00b      	b.n	8003f58 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f40:	f7fc fd4a 	bl	80009d8 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e345      	b.n	80045e4 <HAL_RCC_OscConfig+0x106c>
 8003f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f5c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003f60:	2202      	movs	r2, #2
 8003f62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f68:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	fa93 f2a3 	rbit	r2, r3
 8003f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f76:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f80:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003f84:	2202      	movs	r2, #2
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f8c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	fa93 f2a3 	rbit	r2, r3
 8003f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f9a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003f9e:	601a      	str	r2, [r3, #0]
  return result;
 8003fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003fa8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003faa:	fab3 f383 	clz	r3, r3
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	095b      	lsrs	r3, r3, #5
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	f043 0302 	orr.w	r3, r3, #2
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d102      	bne.n	8003fc4 <HAL_RCC_OscConfig+0xa4c>
 8003fbe:	4b84      	ldr	r3, [pc, #528]	; (80041d0 <HAL_RCC_OscConfig+0xc58>)
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	e013      	b.n	8003fec <HAL_RCC_OscConfig+0xa74>
 8003fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003fcc:	2202      	movs	r2, #2
 8003fce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	fa93 f2a3 	rbit	r2, r3
 8003fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	4b79      	ldr	r3, [pc, #484]	; (80041d0 <HAL_RCC_OscConfig+0xc58>)
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ff0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	6011      	str	r1, [r2, #0]
 8003ff8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ffc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004000:	6812      	ldr	r2, [r2, #0]
 8004002:	fa92 f1a2 	rbit	r1, r2
 8004006:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800400a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800400e:	6011      	str	r1, [r2, #0]
  return result;
 8004010:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004014:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004018:	6812      	ldr	r2, [r2, #0]
 800401a:	fab2 f282 	clz	r2, r2
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004024:	b2d2      	uxtb	r2, r2
 8004026:	f002 021f 	and.w	r2, r2, #31
 800402a:	2101      	movs	r1, #1
 800402c:	fa01 f202 	lsl.w	r2, r1, r2
 8004030:	4013      	ands	r3, r2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d084      	beq.n	8003f40 <HAL_RCC_OscConfig+0x9c8>
 8004036:	e07f      	b.n	8004138 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004038:	f7fc fcce 	bl	80009d8 <HAL_GetTick>
 800403c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004040:	e00b      	b.n	800405a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004042:	f7fc fcc9 	bl	80009d8 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004052:	4293      	cmp	r3, r2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e2c4      	b.n	80045e4 <HAL_RCC_OscConfig+0x106c>
 800405a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004062:	2202      	movs	r2, #2
 8004064:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800406a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	fa93 f2a3 	rbit	r2, r3
 8004074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004078:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004082:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004086:	2202      	movs	r2, #2
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800408e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	fa93 f2a3 	rbit	r2, r3
 8004098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800409c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80040a0:	601a      	str	r2, [r3, #0]
  return result;
 80040a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80040aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ac:	fab3 f383 	clz	r3, r3
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	095b      	lsrs	r3, r3, #5
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	f043 0302 	orr.w	r3, r3, #2
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d102      	bne.n	80040c6 <HAL_RCC_OscConfig+0xb4e>
 80040c0:	4b43      	ldr	r3, [pc, #268]	; (80041d0 <HAL_RCC_OscConfig+0xc58>)
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	e013      	b.n	80040ee <HAL_RCC_OscConfig+0xb76>
 80040c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80040ce:	2202      	movs	r2, #2
 80040d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	fa93 f2a3 	rbit	r2, r3
 80040e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040e4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	4b39      	ldr	r3, [pc, #228]	; (80041d0 <HAL_RCC_OscConfig+0xc58>)
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040f2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80040f6:	2102      	movs	r1, #2
 80040f8:	6011      	str	r1, [r2, #0]
 80040fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040fe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004102:	6812      	ldr	r2, [r2, #0]
 8004104:	fa92 f1a2 	rbit	r1, r2
 8004108:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800410c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004110:	6011      	str	r1, [r2, #0]
  return result;
 8004112:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004116:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	fab2 f282 	clz	r2, r2
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	f002 021f 	and.w	r2, r2, #31
 800412c:	2101      	movs	r1, #1
 800412e:	fa01 f202 	lsl.w	r2, r1, r2
 8004132:	4013      	ands	r3, r2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d184      	bne.n	8004042 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004138:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800413c:	2b01      	cmp	r3, #1
 800413e:	d105      	bne.n	800414c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004140:	4b23      	ldr	r3, [pc, #140]	; (80041d0 <HAL_RCC_OscConfig+0xc58>)
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	4a22      	ldr	r2, [pc, #136]	; (80041d0 <HAL_RCC_OscConfig+0xc58>)
 8004146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800414a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800414c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004150:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 8242 	beq.w	80045e2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800415e:	4b1c      	ldr	r3, [pc, #112]	; (80041d0 <HAL_RCC_OscConfig+0xc58>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f003 030c 	and.w	r3, r3, #12
 8004166:	2b08      	cmp	r3, #8
 8004168:	f000 8213 	beq.w	8004592 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800416c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004170:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	2b02      	cmp	r3, #2
 800417a:	f040 8162 	bne.w	8004442 <HAL_RCC_OscConfig+0xeca>
 800417e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004182:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004186:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800418a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004190:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	fa93 f2a3 	rbit	r2, r3
 800419a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800419e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80041a2:	601a      	str	r2, [r3, #0]
  return result;
 80041a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80041ac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ae:	fab3 f383 	clz	r3, r3
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	461a      	mov	r2, r3
 80041c0:	2300      	movs	r3, #0
 80041c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c4:	f7fc fc08 	bl	80009d8 <HAL_GetTick>
 80041c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041cc:	e00c      	b.n	80041e8 <HAL_RCC_OscConfig+0xc70>
 80041ce:	bf00      	nop
 80041d0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041d4:	f7fc fc00 	bl	80009d8 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e1fd      	b.n	80045e4 <HAL_RCC_OscConfig+0x106c>
 80041e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80041f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041fa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	fa93 f2a3 	rbit	r2, r3
 8004204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004208:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800420c:	601a      	str	r2, [r3, #0]
  return result;
 800420e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004212:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004216:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004218:	fab3 f383 	clz	r3, r3
 800421c:	b2db      	uxtb	r3, r3
 800421e:	095b      	lsrs	r3, r3, #5
 8004220:	b2db      	uxtb	r3, r3
 8004222:	f043 0301 	orr.w	r3, r3, #1
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b01      	cmp	r3, #1
 800422a:	d102      	bne.n	8004232 <HAL_RCC_OscConfig+0xcba>
 800422c:	4bb0      	ldr	r3, [pc, #704]	; (80044f0 <HAL_RCC_OscConfig+0xf78>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	e027      	b.n	8004282 <HAL_RCC_OscConfig+0xd0a>
 8004232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004236:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800423a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800423e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004244:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	fa93 f2a3 	rbit	r2, r3
 800424e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004252:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800425c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004260:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800426a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	fa93 f2a3 	rbit	r2, r3
 8004274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004278:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	4b9c      	ldr	r3, [pc, #624]	; (80044f0 <HAL_RCC_OscConfig+0xf78>)
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004286:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800428a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800428e:	6011      	str	r1, [r2, #0]
 8004290:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004294:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004298:	6812      	ldr	r2, [r2, #0]
 800429a:	fa92 f1a2 	rbit	r1, r2
 800429e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042a2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80042a6:	6011      	str	r1, [r2, #0]
  return result;
 80042a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042ac:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80042b0:	6812      	ldr	r2, [r2, #0]
 80042b2:	fab2 f282 	clz	r2, r2
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	f042 0220 	orr.w	r2, r2, #32
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	f002 021f 	and.w	r2, r2, #31
 80042c2:	2101      	movs	r1, #1
 80042c4:	fa01 f202 	lsl.w	r2, r1, r2
 80042c8:	4013      	ands	r3, r2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d182      	bne.n	80041d4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042ce:	4b88      	ldr	r3, [pc, #544]	; (80044f0 <HAL_RCC_OscConfig+0xf78>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80042d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80042e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	430b      	orrs	r3, r1
 80042f0:	497f      	ldr	r1, [pc, #508]	; (80044f0 <HAL_RCC_OscConfig+0xf78>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	604b      	str	r3, [r1, #4]
 80042f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042fa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80042fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004302:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004308:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	fa93 f2a3 	rbit	r2, r3
 8004312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004316:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800431a:	601a      	str	r2, [r3, #0]
  return result;
 800431c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004320:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004324:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004326:	fab3 f383 	clz	r3, r3
 800432a:	b2db      	uxtb	r3, r3
 800432c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004330:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	461a      	mov	r2, r3
 8004338:	2301      	movs	r3, #1
 800433a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433c:	f7fc fb4c 	bl	80009d8 <HAL_GetTick>
 8004340:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004344:	e009      	b.n	800435a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004346:	f7fc fb47 	bl	80009d8 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e144      	b.n	80045e4 <HAL_RCC_OscConfig+0x106c>
 800435a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800435e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004362:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004366:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800436c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	fa93 f2a3 	rbit	r2, r3
 8004376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800437a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800437e:	601a      	str	r2, [r3, #0]
  return result;
 8004380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004384:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004388:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800438a:	fab3 f383 	clz	r3, r3
 800438e:	b2db      	uxtb	r3, r3
 8004390:	095b      	lsrs	r3, r3, #5
 8004392:	b2db      	uxtb	r3, r3
 8004394:	f043 0301 	orr.w	r3, r3, #1
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b01      	cmp	r3, #1
 800439c:	d102      	bne.n	80043a4 <HAL_RCC_OscConfig+0xe2c>
 800439e:	4b54      	ldr	r3, [pc, #336]	; (80044f0 <HAL_RCC_OscConfig+0xf78>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	e027      	b.n	80043f4 <HAL_RCC_OscConfig+0xe7c>
 80043a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80043ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	fa93 f2a3 	rbit	r2, r3
 80043c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ce:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80043d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043dc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	fa93 f2a3 	rbit	r2, r3
 80043e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ea:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	4b3f      	ldr	r3, [pc, #252]	; (80044f0 <HAL_RCC_OscConfig+0xf78>)
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043f8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80043fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004400:	6011      	str	r1, [r2, #0]
 8004402:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004406:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800440a:	6812      	ldr	r2, [r2, #0]
 800440c:	fa92 f1a2 	rbit	r1, r2
 8004410:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004414:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004418:	6011      	str	r1, [r2, #0]
  return result;
 800441a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800441e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004422:	6812      	ldr	r2, [r2, #0]
 8004424:	fab2 f282 	clz	r2, r2
 8004428:	b2d2      	uxtb	r2, r2
 800442a:	f042 0220 	orr.w	r2, r2, #32
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	f002 021f 	and.w	r2, r2, #31
 8004434:	2101      	movs	r1, #1
 8004436:	fa01 f202 	lsl.w	r2, r1, r2
 800443a:	4013      	ands	r3, r2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d082      	beq.n	8004346 <HAL_RCC_OscConfig+0xdce>
 8004440:	e0cf      	b.n	80045e2 <HAL_RCC_OscConfig+0x106a>
 8004442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004446:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800444a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800444e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004454:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	fa93 f2a3 	rbit	r2, r3
 800445e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004462:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004466:	601a      	str	r2, [r3, #0]
  return result;
 8004468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800446c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004470:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004472:	fab3 f383 	clz	r3, r3
 8004476:	b2db      	uxtb	r3, r3
 8004478:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800447c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	461a      	mov	r2, r3
 8004484:	2300      	movs	r3, #0
 8004486:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004488:	f7fc faa6 	bl	80009d8 <HAL_GetTick>
 800448c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004490:	e009      	b.n	80044a6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004492:	f7fc faa1 	bl	80009d8 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e09e      	b.n	80045e4 <HAL_RCC_OscConfig+0x106c>
 80044a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044aa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80044ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	fa93 f2a3 	rbit	r2, r3
 80044c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044c6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80044ca:	601a      	str	r2, [r3, #0]
  return result;
 80044cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044d0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80044d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044d6:	fab3 f383 	clz	r3, r3
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	095b      	lsrs	r3, r3, #5
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	f043 0301 	orr.w	r3, r3, #1
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d104      	bne.n	80044f4 <HAL_RCC_OscConfig+0xf7c>
 80044ea:	4b01      	ldr	r3, [pc, #4]	; (80044f0 <HAL_RCC_OscConfig+0xf78>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	e029      	b.n	8004544 <HAL_RCC_OscConfig+0xfcc>
 80044f0:	40021000 	.word	0x40021000
 80044f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044f8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80044fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004500:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004506:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	fa93 f2a3 	rbit	r2, r3
 8004510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004514:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800451e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004522:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800452c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	fa93 f2a3 	rbit	r2, r3
 8004536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800453a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	4b2b      	ldr	r3, [pc, #172]	; (80045f0 <HAL_RCC_OscConfig+0x1078>)
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004548:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800454c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004550:	6011      	str	r1, [r2, #0]
 8004552:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004556:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800455a:	6812      	ldr	r2, [r2, #0]
 800455c:	fa92 f1a2 	rbit	r1, r2
 8004560:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004564:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004568:	6011      	str	r1, [r2, #0]
  return result;
 800456a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800456e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004572:	6812      	ldr	r2, [r2, #0]
 8004574:	fab2 f282 	clz	r2, r2
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	f042 0220 	orr.w	r2, r2, #32
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	f002 021f 	and.w	r2, r2, #31
 8004584:	2101      	movs	r1, #1
 8004586:	fa01 f202 	lsl.w	r2, r1, r2
 800458a:	4013      	ands	r3, r2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d180      	bne.n	8004492 <HAL_RCC_OscConfig+0xf1a>
 8004590:	e027      	b.n	80045e2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004596:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d101      	bne.n	80045a6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e01e      	b.n	80045e4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80045a6:	4b12      	ldr	r3, [pc, #72]	; (80045f0 <HAL_RCC_OscConfig+0x1078>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80045ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80045b2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80045b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d10b      	bne.n	80045de <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80045c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80045ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80045ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80045da:	429a      	cmp	r2, r3
 80045dc:	d001      	beq.n	80045e2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	40021000 	.word	0x40021000

080045f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b09e      	sub	sp, #120	; 0x78
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e162      	b.n	80048d2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800460c:	4b90      	ldr	r3, [pc, #576]	; (8004850 <HAL_RCC_ClockConfig+0x25c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	429a      	cmp	r2, r3
 8004618:	d910      	bls.n	800463c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800461a:	4b8d      	ldr	r3, [pc, #564]	; (8004850 <HAL_RCC_ClockConfig+0x25c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f023 0207 	bic.w	r2, r3, #7
 8004622:	498b      	ldr	r1, [pc, #556]	; (8004850 <HAL_RCC_ClockConfig+0x25c>)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	4313      	orrs	r3, r2
 8004628:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800462a:	4b89      	ldr	r3, [pc, #548]	; (8004850 <HAL_RCC_ClockConfig+0x25c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	429a      	cmp	r2, r3
 8004636:	d001      	beq.n	800463c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e14a      	b.n	80048d2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d008      	beq.n	800465a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004648:	4b82      	ldr	r3, [pc, #520]	; (8004854 <HAL_RCC_ClockConfig+0x260>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	497f      	ldr	r1, [pc, #508]	; (8004854 <HAL_RCC_ClockConfig+0x260>)
 8004656:	4313      	orrs	r3, r2
 8004658:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 80dc 	beq.w	8004820 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d13c      	bne.n	80046ea <HAL_RCC_ClockConfig+0xf6>
 8004670:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004674:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004676:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004678:	fa93 f3a3 	rbit	r3, r3
 800467c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800467e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004680:	fab3 f383 	clz	r3, r3
 8004684:	b2db      	uxtb	r3, r3
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	b2db      	uxtb	r3, r3
 800468a:	f043 0301 	orr.w	r3, r3, #1
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b01      	cmp	r3, #1
 8004692:	d102      	bne.n	800469a <HAL_RCC_ClockConfig+0xa6>
 8004694:	4b6f      	ldr	r3, [pc, #444]	; (8004854 <HAL_RCC_ClockConfig+0x260>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	e00f      	b.n	80046ba <HAL_RCC_ClockConfig+0xc6>
 800469a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800469e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046a2:	fa93 f3a3 	rbit	r3, r3
 80046a6:	667b      	str	r3, [r7, #100]	; 0x64
 80046a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046ac:	663b      	str	r3, [r7, #96]	; 0x60
 80046ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046b0:	fa93 f3a3 	rbit	r3, r3
 80046b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046b6:	4b67      	ldr	r3, [pc, #412]	; (8004854 <HAL_RCC_ClockConfig+0x260>)
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046be:	65ba      	str	r2, [r7, #88]	; 0x58
 80046c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046c2:	fa92 f2a2 	rbit	r2, r2
 80046c6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80046c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80046ca:	fab2 f282 	clz	r2, r2
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	f042 0220 	orr.w	r2, r2, #32
 80046d4:	b2d2      	uxtb	r2, r2
 80046d6:	f002 021f 	and.w	r2, r2, #31
 80046da:	2101      	movs	r1, #1
 80046dc:	fa01 f202 	lsl.w	r2, r1, r2
 80046e0:	4013      	ands	r3, r2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d17b      	bne.n	80047de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e0f3      	b.n	80048d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d13c      	bne.n	800476c <HAL_RCC_ClockConfig+0x178>
 80046f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046fa:	fa93 f3a3 	rbit	r3, r3
 80046fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004702:	fab3 f383 	clz	r3, r3
 8004706:	b2db      	uxtb	r3, r3
 8004708:	095b      	lsrs	r3, r3, #5
 800470a:	b2db      	uxtb	r3, r3
 800470c:	f043 0301 	orr.w	r3, r3, #1
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b01      	cmp	r3, #1
 8004714:	d102      	bne.n	800471c <HAL_RCC_ClockConfig+0x128>
 8004716:	4b4f      	ldr	r3, [pc, #316]	; (8004854 <HAL_RCC_ClockConfig+0x260>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	e00f      	b.n	800473c <HAL_RCC_ClockConfig+0x148>
 800471c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004720:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004724:	fa93 f3a3 	rbit	r3, r3
 8004728:	647b      	str	r3, [r7, #68]	; 0x44
 800472a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800472e:	643b      	str	r3, [r7, #64]	; 0x40
 8004730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004732:	fa93 f3a3 	rbit	r3, r3
 8004736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004738:	4b46      	ldr	r3, [pc, #280]	; (8004854 <HAL_RCC_ClockConfig+0x260>)
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004740:	63ba      	str	r2, [r7, #56]	; 0x38
 8004742:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004744:	fa92 f2a2 	rbit	r2, r2
 8004748:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800474a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800474c:	fab2 f282 	clz	r2, r2
 8004750:	b2d2      	uxtb	r2, r2
 8004752:	f042 0220 	orr.w	r2, r2, #32
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	f002 021f 	and.w	r2, r2, #31
 800475c:	2101      	movs	r1, #1
 800475e:	fa01 f202 	lsl.w	r2, r1, r2
 8004762:	4013      	ands	r3, r2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d13a      	bne.n	80047de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e0b2      	b.n	80048d2 <HAL_RCC_ClockConfig+0x2de>
 800476c:	2302      	movs	r3, #2
 800476e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004772:	fa93 f3a3 	rbit	r3, r3
 8004776:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800477a:	fab3 f383 	clz	r3, r3
 800477e:	b2db      	uxtb	r3, r3
 8004780:	095b      	lsrs	r3, r3, #5
 8004782:	b2db      	uxtb	r3, r3
 8004784:	f043 0301 	orr.w	r3, r3, #1
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b01      	cmp	r3, #1
 800478c:	d102      	bne.n	8004794 <HAL_RCC_ClockConfig+0x1a0>
 800478e:	4b31      	ldr	r3, [pc, #196]	; (8004854 <HAL_RCC_ClockConfig+0x260>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	e00d      	b.n	80047b0 <HAL_RCC_ClockConfig+0x1bc>
 8004794:	2302      	movs	r3, #2
 8004796:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	fa93 f3a3 	rbit	r3, r3
 800479e:	627b      	str	r3, [r7, #36]	; 0x24
 80047a0:	2302      	movs	r3, #2
 80047a2:	623b      	str	r3, [r7, #32]
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	fa93 f3a3 	rbit	r3, r3
 80047aa:	61fb      	str	r3, [r7, #28]
 80047ac:	4b29      	ldr	r3, [pc, #164]	; (8004854 <HAL_RCC_ClockConfig+0x260>)
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	2202      	movs	r2, #2
 80047b2:	61ba      	str	r2, [r7, #24]
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	fa92 f2a2 	rbit	r2, r2
 80047ba:	617a      	str	r2, [r7, #20]
  return result;
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	fab2 f282 	clz	r2, r2
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	f042 0220 	orr.w	r2, r2, #32
 80047c8:	b2d2      	uxtb	r2, r2
 80047ca:	f002 021f 	and.w	r2, r2, #31
 80047ce:	2101      	movs	r1, #1
 80047d0:	fa01 f202 	lsl.w	r2, r1, r2
 80047d4:	4013      	ands	r3, r2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e079      	b.n	80048d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047de:	4b1d      	ldr	r3, [pc, #116]	; (8004854 <HAL_RCC_ClockConfig+0x260>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f023 0203 	bic.w	r2, r3, #3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	491a      	ldr	r1, [pc, #104]	; (8004854 <HAL_RCC_ClockConfig+0x260>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047f0:	f7fc f8f2 	bl	80009d8 <HAL_GetTick>
 80047f4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f6:	e00a      	b.n	800480e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f8:	f7fc f8ee 	bl	80009d8 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	f241 3288 	movw	r2, #5000	; 0x1388
 8004806:	4293      	cmp	r3, r2
 8004808:	d901      	bls.n	800480e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e061      	b.n	80048d2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480e:	4b11      	ldr	r3, [pc, #68]	; (8004854 <HAL_RCC_ClockConfig+0x260>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f003 020c 	and.w	r2, r3, #12
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	429a      	cmp	r2, r3
 800481e:	d1eb      	bne.n	80047f8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004820:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <HAL_RCC_ClockConfig+0x25c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d214      	bcs.n	8004858 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482e:	4b08      	ldr	r3, [pc, #32]	; (8004850 <HAL_RCC_ClockConfig+0x25c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f023 0207 	bic.w	r2, r3, #7
 8004836:	4906      	ldr	r1, [pc, #24]	; (8004850 <HAL_RCC_ClockConfig+0x25c>)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	4313      	orrs	r3, r2
 800483c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800483e:	4b04      	ldr	r3, [pc, #16]	; (8004850 <HAL_RCC_ClockConfig+0x25c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d005      	beq.n	8004858 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e040      	b.n	80048d2 <HAL_RCC_ClockConfig+0x2de>
 8004850:	40022000 	.word	0x40022000
 8004854:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	d008      	beq.n	8004876 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004864:	4b1d      	ldr	r3, [pc, #116]	; (80048dc <HAL_RCC_ClockConfig+0x2e8>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	491a      	ldr	r1, [pc, #104]	; (80048dc <HAL_RCC_ClockConfig+0x2e8>)
 8004872:	4313      	orrs	r3, r2
 8004874:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b00      	cmp	r3, #0
 8004880:	d009      	beq.n	8004896 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004882:	4b16      	ldr	r3, [pc, #88]	; (80048dc <HAL_RCC_ClockConfig+0x2e8>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	4912      	ldr	r1, [pc, #72]	; (80048dc <HAL_RCC_ClockConfig+0x2e8>)
 8004892:	4313      	orrs	r3, r2
 8004894:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004896:	f000 f829 	bl	80048ec <HAL_RCC_GetSysClockFreq>
 800489a:	4601      	mov	r1, r0
 800489c:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <HAL_RCC_ClockConfig+0x2e8>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048a4:	22f0      	movs	r2, #240	; 0xf0
 80048a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	fa92 f2a2 	rbit	r2, r2
 80048ae:	60fa      	str	r2, [r7, #12]
  return result;
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	fab2 f282 	clz	r2, r2
 80048b6:	b2d2      	uxtb	r2, r2
 80048b8:	40d3      	lsrs	r3, r2
 80048ba:	4a09      	ldr	r2, [pc, #36]	; (80048e0 <HAL_RCC_ClockConfig+0x2ec>)
 80048bc:	5cd3      	ldrb	r3, [r2, r3]
 80048be:	fa21 f303 	lsr.w	r3, r1, r3
 80048c2:	4a08      	ldr	r2, [pc, #32]	; (80048e4 <HAL_RCC_ClockConfig+0x2f0>)
 80048c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80048c6:	4b08      	ldr	r3, [pc, #32]	; (80048e8 <HAL_RCC_ClockConfig+0x2f4>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fc f840 	bl	8000950 <HAL_InitTick>
  
  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3778      	adds	r7, #120	; 0x78
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40021000 	.word	0x40021000
 80048e0:	0800a060 	.word	0x0800a060
 80048e4:	20000000 	.word	0x20000000
 80048e8:	20000004 	.word	0x20000004

080048ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b08b      	sub	sp, #44	; 0x2c
 80048f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61fb      	str	r3, [r7, #28]
 80048f6:	2300      	movs	r3, #0
 80048f8:	61bb      	str	r3, [r7, #24]
 80048fa:	2300      	movs	r3, #0
 80048fc:	627b      	str	r3, [r7, #36]	; 0x24
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004906:	4b29      	ldr	r3, [pc, #164]	; (80049ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	f003 030c 	and.w	r3, r3, #12
 8004912:	2b04      	cmp	r3, #4
 8004914:	d002      	beq.n	800491c <HAL_RCC_GetSysClockFreq+0x30>
 8004916:	2b08      	cmp	r3, #8
 8004918:	d003      	beq.n	8004922 <HAL_RCC_GetSysClockFreq+0x36>
 800491a:	e03c      	b.n	8004996 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800491c:	4b24      	ldr	r3, [pc, #144]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800491e:	623b      	str	r3, [r7, #32]
      break;
 8004920:	e03c      	b.n	800499c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004928:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800492c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	fa92 f2a2 	rbit	r2, r2
 8004934:	607a      	str	r2, [r7, #4]
  return result;
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	fab2 f282 	clz	r2, r2
 800493c:	b2d2      	uxtb	r2, r2
 800493e:	40d3      	lsrs	r3, r2
 8004940:	4a1c      	ldr	r2, [pc, #112]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004942:	5cd3      	ldrb	r3, [r2, r3]
 8004944:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004946:	4b19      	ldr	r3, [pc, #100]	; (80049ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8004948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	220f      	movs	r2, #15
 8004950:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	fa92 f2a2 	rbit	r2, r2
 8004958:	60fa      	str	r2, [r7, #12]
  return result;
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	fab2 f282 	clz	r2, r2
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	40d3      	lsrs	r3, r2
 8004964:	4a14      	ldr	r2, [pc, #80]	; (80049b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004966:	5cd3      	ldrb	r3, [r2, r3]
 8004968:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d008      	beq.n	8004986 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004974:	4a0e      	ldr	r2, [pc, #56]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	fbb2 f2f3 	udiv	r2, r2, r3
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	fb02 f303 	mul.w	r3, r2, r3
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
 8004984:	e004      	b.n	8004990 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	4a0c      	ldr	r2, [pc, #48]	; (80049bc <HAL_RCC_GetSysClockFreq+0xd0>)
 800498a:	fb02 f303 	mul.w	r3, r2, r3
 800498e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	623b      	str	r3, [r7, #32]
      break;
 8004994:	e002      	b.n	800499c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004996:	4b06      	ldr	r3, [pc, #24]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004998:	623b      	str	r3, [r7, #32]
      break;
 800499a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800499c:	6a3b      	ldr	r3, [r7, #32]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	372c      	adds	r7, #44	; 0x2c
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40021000 	.word	0x40021000
 80049b0:	007a1200 	.word	0x007a1200
 80049b4:	0800a070 	.word	0x0800a070
 80049b8:	0800a080 	.word	0x0800a080
 80049bc:	003d0900 	.word	0x003d0900

080049c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b092      	sub	sp, #72	; 0x48
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80049d0:	2300      	movs	r3, #0
 80049d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 80d4 	beq.w	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049e4:	4b4e      	ldr	r3, [pc, #312]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10e      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049f0:	4b4b      	ldr	r3, [pc, #300]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	4a4a      	ldr	r2, [pc, #296]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049fa:	61d3      	str	r3, [r2, #28]
 80049fc:	4b48      	ldr	r3, [pc, #288]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a04:	60bb      	str	r3, [r7, #8]
 8004a06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a0e:	4b45      	ldr	r3, [pc, #276]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d118      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a1a:	4b42      	ldr	r3, [pc, #264]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a41      	ldr	r2, [pc, #260]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a26:	f7fb ffd7 	bl	80009d8 <HAL_GetTick>
 8004a2a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a2c:	e008      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a2e:	f7fb ffd3 	bl	80009d8 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b64      	cmp	r3, #100	; 0x64
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e169      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a40:	4b38      	ldr	r3, [pc, #224]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0f0      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a4c:	4b34      	ldr	r3, [pc, #208]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a54:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 8084 	beq.w	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d07c      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a6c:	4b2c      	ldr	r3, [pc, #176]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7e:	fa93 f3a3 	rbit	r3, r3
 8004a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a86:	fab3 f383 	clz	r3, r3
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	4b26      	ldr	r3, [pc, #152]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a90:	4413      	add	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	461a      	mov	r2, r3
 8004a96:	2301      	movs	r3, #1
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa2:	fa93 f3a3 	rbit	r3, r3
 8004aa6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004aaa:	fab3 f383 	clz	r3, r3
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	4b1d      	ldr	r3, [pc, #116]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ab4:	4413      	add	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	461a      	mov	r2, r3
 8004aba:	2300      	movs	r3, #0
 8004abc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004abe:	4a18      	ldr	r2, [pc, #96]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d04b      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ace:	f7fb ff83 	bl	80009d8 <HAL_GetTick>
 8004ad2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad4:	e00a      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ad6:	f7fb ff7f 	bl	80009d8 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e113      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004aec:	2302      	movs	r3, #2
 8004aee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af2:	fa93 f3a3 	rbit	r3, r3
 8004af6:	627b      	str	r3, [r7, #36]	; 0x24
 8004af8:	2302      	movs	r3, #2
 8004afa:	623b      	str	r3, [r7, #32]
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	fa93 f3a3 	rbit	r3, r3
 8004b02:	61fb      	str	r3, [r7, #28]
  return result;
 8004b04:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b06:	fab3 f383 	clz	r3, r3
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	095b      	lsrs	r3, r3, #5
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	f043 0302 	orr.w	r3, r3, #2
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d108      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004b1a:	4b01      	ldr	r3, [pc, #4]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	e00d      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004b20:	40021000 	.word	0x40021000
 8004b24:	40007000 	.word	0x40007000
 8004b28:	10908100 	.word	0x10908100
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	fa93 f3a3 	rbit	r3, r3
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	4b78      	ldr	r3, [pc, #480]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	613a      	str	r2, [r7, #16]
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	fa92 f2a2 	rbit	r2, r2
 8004b46:	60fa      	str	r2, [r7, #12]
  return result;
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	fab2 f282 	clz	r2, r2
 8004b4e:	b2d2      	uxtb	r2, r2
 8004b50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b54:	b2d2      	uxtb	r2, r2
 8004b56:	f002 021f 	and.w	r2, r2, #31
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b60:	4013      	ands	r3, r2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0b7      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004b66:	4b6d      	ldr	r3, [pc, #436]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	496a      	ldr	r1, [pc, #424]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d105      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b80:	4b66      	ldr	r3, [pc, #408]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	4a65      	ldr	r2, [pc, #404]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b8a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d008      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b98:	4b60      	ldr	r3, [pc, #384]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9c:	f023 0203 	bic.w	r2, r3, #3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	495d      	ldr	r1, [pc, #372]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d008      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bb6:	4b59      	ldr	r3, [pc, #356]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	4956      	ldr	r1, [pc, #344]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d008      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bd4:	4b51      	ldr	r3, [pc, #324]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	494e      	ldr	r1, [pc, #312]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d008      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bf2:	4b4a      	ldr	r3, [pc, #296]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf6:	f023 0210 	bic.w	r2, r3, #16
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	4947      	ldr	r1, [pc, #284]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d008      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004c10:	4b42      	ldr	r3, [pc, #264]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	493f      	ldr	r1, [pc, #252]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d008      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c2e:	4b3b      	ldr	r3, [pc, #236]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	f023 0220 	bic.w	r2, r3, #32
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	4938      	ldr	r1, [pc, #224]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0308 	and.w	r3, r3, #8
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d008      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c4c:	4b33      	ldr	r3, [pc, #204]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	4930      	ldr	r1, [pc, #192]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0310 	and.w	r3, r3, #16
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d008      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c6a:	4b2c      	ldr	r3, [pc, #176]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	4929      	ldr	r1, [pc, #164]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d008      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c88:	4b24      	ldr	r3, [pc, #144]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	4921      	ldr	r1, [pc, #132]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d008      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ca6:	4b1d      	ldr	r3, [pc, #116]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004caa:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	491a      	ldr	r1, [pc, #104]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d008      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004cc4:	4b15      	ldr	r3, [pc, #84]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd0:	4912      	ldr	r1, [pc, #72]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d008      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004ce2:	4b0e      	ldr	r3, [pc, #56]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cee:	490b      	ldr	r1, [pc, #44]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d008      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004d00:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d04:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0c:	4903      	ldr	r1, [pc, #12]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3748      	adds	r7, #72	; 0x48
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	40021000 	.word	0x40021000

08004d20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e049      	b.n	8004dc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d106      	bne.n	8004d4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7fb fd26 	bl	8000798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4610      	mov	r0, r2
 8004d60:	f000 f9aa 	bl	80050b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b082      	sub	sp, #8
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e049      	b.n	8004e74 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d106      	bne.n	8004dfa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f841 	bl	8004e7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3304      	adds	r3, #4
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	4610      	mov	r0, r2
 8004e0e:	f000 f953 	bl	80050b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d101      	bne.n	8004eae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	e0ff      	b.n	80050ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b14      	cmp	r3, #20
 8004eba:	f200 80f0 	bhi.w	800509e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ebe:	a201      	add	r2, pc, #4	; (adr r2, 8004ec4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec4:	08004f19 	.word	0x08004f19
 8004ec8:	0800509f 	.word	0x0800509f
 8004ecc:	0800509f 	.word	0x0800509f
 8004ed0:	0800509f 	.word	0x0800509f
 8004ed4:	08004f59 	.word	0x08004f59
 8004ed8:	0800509f 	.word	0x0800509f
 8004edc:	0800509f 	.word	0x0800509f
 8004ee0:	0800509f 	.word	0x0800509f
 8004ee4:	08004f9b 	.word	0x08004f9b
 8004ee8:	0800509f 	.word	0x0800509f
 8004eec:	0800509f 	.word	0x0800509f
 8004ef0:	0800509f 	.word	0x0800509f
 8004ef4:	08004fdb 	.word	0x08004fdb
 8004ef8:	0800509f 	.word	0x0800509f
 8004efc:	0800509f 	.word	0x0800509f
 8004f00:	0800509f 	.word	0x0800509f
 8004f04:	0800501d 	.word	0x0800501d
 8004f08:	0800509f 	.word	0x0800509f
 8004f0c:	0800509f 	.word	0x0800509f
 8004f10:	0800509f 	.word	0x0800509f
 8004f14:	0800505d 	.word	0x0800505d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68b9      	ldr	r1, [r7, #8]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 f95a 	bl	80051d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699a      	ldr	r2, [r3, #24]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0208 	orr.w	r2, r2, #8
 8004f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699a      	ldr	r2, [r3, #24]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 0204 	bic.w	r2, r2, #4
 8004f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6999      	ldr	r1, [r3, #24]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	691a      	ldr	r2, [r3, #16]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	619a      	str	r2, [r3, #24]
      break;
 8004f56:	e0a5      	b.n	80050a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68b9      	ldr	r1, [r7, #8]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 f9ca 	bl	80052f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699a      	ldr	r2, [r3, #24]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699a      	ldr	r2, [r3, #24]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6999      	ldr	r1, [r3, #24]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	021a      	lsls	r2, r3, #8
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	619a      	str	r2, [r3, #24]
      break;
 8004f98:	e084      	b.n	80050a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68b9      	ldr	r1, [r7, #8]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 fa33 	bl	800540c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69da      	ldr	r2, [r3, #28]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0208 	orr.w	r2, r2, #8
 8004fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69da      	ldr	r2, [r3, #28]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0204 	bic.w	r2, r2, #4
 8004fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69d9      	ldr	r1, [r3, #28]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	691a      	ldr	r2, [r3, #16]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	61da      	str	r2, [r3, #28]
      break;
 8004fd8:	e064      	b.n	80050a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68b9      	ldr	r1, [r7, #8]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 fa9b 	bl	800551c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69da      	ldr	r2, [r3, #28]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69da      	ldr	r2, [r3, #28]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69d9      	ldr	r1, [r3, #28]
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	021a      	lsls	r2, r3, #8
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	61da      	str	r2, [r3, #28]
      break;
 800501a:	e043      	b.n	80050a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68b9      	ldr	r1, [r7, #8]
 8005022:	4618      	mov	r0, r3
 8005024:	f000 fae4 	bl	80055f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f042 0208 	orr.w	r2, r2, #8
 8005036:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 0204 	bic.w	r2, r2, #4
 8005046:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	691a      	ldr	r2, [r3, #16]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800505a:	e023      	b.n	80050a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68b9      	ldr	r1, [r7, #8]
 8005062:	4618      	mov	r0, r3
 8005064:	f000 fb28 	bl	80056b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005076:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005086:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	021a      	lsls	r2, r3, #8
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800509c:	e002      	b.n	80050a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	75fb      	strb	r3, [r7, #23]
      break;
 80050a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop

080050b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a3c      	ldr	r2, [pc, #240]	; (80051bc <TIM_Base_SetConfig+0x104>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d00f      	beq.n	80050f0 <TIM_Base_SetConfig+0x38>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d6:	d00b      	beq.n	80050f0 <TIM_Base_SetConfig+0x38>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a39      	ldr	r2, [pc, #228]	; (80051c0 <TIM_Base_SetConfig+0x108>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d007      	beq.n	80050f0 <TIM_Base_SetConfig+0x38>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a38      	ldr	r2, [pc, #224]	; (80051c4 <TIM_Base_SetConfig+0x10c>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d003      	beq.n	80050f0 <TIM_Base_SetConfig+0x38>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a37      	ldr	r2, [pc, #220]	; (80051c8 <TIM_Base_SetConfig+0x110>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d108      	bne.n	8005102 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	4313      	orrs	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a2d      	ldr	r2, [pc, #180]	; (80051bc <TIM_Base_SetConfig+0x104>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d01b      	beq.n	8005142 <TIM_Base_SetConfig+0x8a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005110:	d017      	beq.n	8005142 <TIM_Base_SetConfig+0x8a>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a2a      	ldr	r2, [pc, #168]	; (80051c0 <TIM_Base_SetConfig+0x108>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d013      	beq.n	8005142 <TIM_Base_SetConfig+0x8a>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a29      	ldr	r2, [pc, #164]	; (80051c4 <TIM_Base_SetConfig+0x10c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d00f      	beq.n	8005142 <TIM_Base_SetConfig+0x8a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a28      	ldr	r2, [pc, #160]	; (80051c8 <TIM_Base_SetConfig+0x110>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d00b      	beq.n	8005142 <TIM_Base_SetConfig+0x8a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a27      	ldr	r2, [pc, #156]	; (80051cc <TIM_Base_SetConfig+0x114>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d007      	beq.n	8005142 <TIM_Base_SetConfig+0x8a>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a26      	ldr	r2, [pc, #152]	; (80051d0 <TIM_Base_SetConfig+0x118>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d003      	beq.n	8005142 <TIM_Base_SetConfig+0x8a>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a25      	ldr	r2, [pc, #148]	; (80051d4 <TIM_Base_SetConfig+0x11c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d108      	bne.n	8005154 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	4313      	orrs	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a10      	ldr	r2, [pc, #64]	; (80051bc <TIM_Base_SetConfig+0x104>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d00f      	beq.n	80051a0 <TIM_Base_SetConfig+0xe8>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a11      	ldr	r2, [pc, #68]	; (80051c8 <TIM_Base_SetConfig+0x110>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d00b      	beq.n	80051a0 <TIM_Base_SetConfig+0xe8>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a10      	ldr	r2, [pc, #64]	; (80051cc <TIM_Base_SetConfig+0x114>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d007      	beq.n	80051a0 <TIM_Base_SetConfig+0xe8>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a0f      	ldr	r2, [pc, #60]	; (80051d0 <TIM_Base_SetConfig+0x118>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d003      	beq.n	80051a0 <TIM_Base_SetConfig+0xe8>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a0e      	ldr	r2, [pc, #56]	; (80051d4 <TIM_Base_SetConfig+0x11c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d103      	bne.n	80051a8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	691a      	ldr	r2, [r3, #16]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	615a      	str	r2, [r3, #20]
}
 80051ae:	bf00      	nop
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	40012c00 	.word	0x40012c00
 80051c0:	40000400 	.word	0x40000400
 80051c4:	40000800 	.word	0x40000800
 80051c8:	40013400 	.word	0x40013400
 80051cc:	40014000 	.word	0x40014000
 80051d0:	40014400 	.word	0x40014400
 80051d4:	40014800 	.word	0x40014800

080051d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	f023 0201 	bic.w	r2, r3, #1
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 0303 	bic.w	r3, r3, #3
 8005212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	4313      	orrs	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f023 0302 	bic.w	r3, r3, #2
 8005224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4313      	orrs	r3, r2
 800522e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a2c      	ldr	r2, [pc, #176]	; (80052e4 <TIM_OC1_SetConfig+0x10c>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00f      	beq.n	8005258 <TIM_OC1_SetConfig+0x80>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a2b      	ldr	r2, [pc, #172]	; (80052e8 <TIM_OC1_SetConfig+0x110>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d00b      	beq.n	8005258 <TIM_OC1_SetConfig+0x80>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a2a      	ldr	r2, [pc, #168]	; (80052ec <TIM_OC1_SetConfig+0x114>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d007      	beq.n	8005258 <TIM_OC1_SetConfig+0x80>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a29      	ldr	r2, [pc, #164]	; (80052f0 <TIM_OC1_SetConfig+0x118>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d003      	beq.n	8005258 <TIM_OC1_SetConfig+0x80>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a28      	ldr	r2, [pc, #160]	; (80052f4 <TIM_OC1_SetConfig+0x11c>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d10c      	bne.n	8005272 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f023 0308 	bic.w	r3, r3, #8
 800525e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	4313      	orrs	r3, r2
 8005268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f023 0304 	bic.w	r3, r3, #4
 8005270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a1b      	ldr	r2, [pc, #108]	; (80052e4 <TIM_OC1_SetConfig+0x10c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00f      	beq.n	800529a <TIM_OC1_SetConfig+0xc2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a1a      	ldr	r2, [pc, #104]	; (80052e8 <TIM_OC1_SetConfig+0x110>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d00b      	beq.n	800529a <TIM_OC1_SetConfig+0xc2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a19      	ldr	r2, [pc, #100]	; (80052ec <TIM_OC1_SetConfig+0x114>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d007      	beq.n	800529a <TIM_OC1_SetConfig+0xc2>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a18      	ldr	r2, [pc, #96]	; (80052f0 <TIM_OC1_SetConfig+0x118>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d003      	beq.n	800529a <TIM_OC1_SetConfig+0xc2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a17      	ldr	r2, [pc, #92]	; (80052f4 <TIM_OC1_SetConfig+0x11c>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d111      	bne.n	80052be <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	621a      	str	r2, [r3, #32]
}
 80052d8:	bf00      	nop
 80052da:	371c      	adds	r7, #28
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	40012c00 	.word	0x40012c00
 80052e8:	40013400 	.word	0x40013400
 80052ec:	40014000 	.word	0x40014000
 80052f0:	40014400 	.word	0x40014400
 80052f4:	40014800 	.word	0x40014800

080052f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	f023 0210 	bic.w	r2, r3, #16
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800532a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	021b      	lsls	r3, r3, #8
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4313      	orrs	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f023 0320 	bic.w	r3, r3, #32
 8005346:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	4313      	orrs	r3, r2
 8005352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a28      	ldr	r2, [pc, #160]	; (80053f8 <TIM_OC2_SetConfig+0x100>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d003      	beq.n	8005364 <TIM_OC2_SetConfig+0x6c>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a27      	ldr	r2, [pc, #156]	; (80053fc <TIM_OC2_SetConfig+0x104>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d10d      	bne.n	8005380 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800536a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	4313      	orrs	r3, r2
 8005376:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800537e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a1d      	ldr	r2, [pc, #116]	; (80053f8 <TIM_OC2_SetConfig+0x100>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d00f      	beq.n	80053a8 <TIM_OC2_SetConfig+0xb0>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a1c      	ldr	r2, [pc, #112]	; (80053fc <TIM_OC2_SetConfig+0x104>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d00b      	beq.n	80053a8 <TIM_OC2_SetConfig+0xb0>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a1b      	ldr	r2, [pc, #108]	; (8005400 <TIM_OC2_SetConfig+0x108>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d007      	beq.n	80053a8 <TIM_OC2_SetConfig+0xb0>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a1a      	ldr	r2, [pc, #104]	; (8005404 <TIM_OC2_SetConfig+0x10c>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d003      	beq.n	80053a8 <TIM_OC2_SetConfig+0xb0>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a19      	ldr	r2, [pc, #100]	; (8005408 <TIM_OC2_SetConfig+0x110>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d113      	bne.n	80053d0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053ae:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053b6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	621a      	str	r2, [r3, #32]
}
 80053ea:	bf00      	nop
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	40012c00 	.word	0x40012c00
 80053fc:	40013400 	.word	0x40013400
 8005400:	40014000 	.word	0x40014000
 8005404:	40014400 	.word	0x40014400
 8005408:	40014800 	.word	0x40014800

0800540c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800543a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0303 	bic.w	r3, r3, #3
 8005446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	021b      	lsls	r3, r3, #8
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a27      	ldr	r2, [pc, #156]	; (8005508 <TIM_OC3_SetConfig+0xfc>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d003      	beq.n	8005476 <TIM_OC3_SetConfig+0x6a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a26      	ldr	r2, [pc, #152]	; (800550c <TIM_OC3_SetConfig+0x100>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d10d      	bne.n	8005492 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800547c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	021b      	lsls	r3, r3, #8
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	4313      	orrs	r3, r2
 8005488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005490:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a1c      	ldr	r2, [pc, #112]	; (8005508 <TIM_OC3_SetConfig+0xfc>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d00f      	beq.n	80054ba <TIM_OC3_SetConfig+0xae>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a1b      	ldr	r2, [pc, #108]	; (800550c <TIM_OC3_SetConfig+0x100>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d00b      	beq.n	80054ba <TIM_OC3_SetConfig+0xae>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a1a      	ldr	r2, [pc, #104]	; (8005510 <TIM_OC3_SetConfig+0x104>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d007      	beq.n	80054ba <TIM_OC3_SetConfig+0xae>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a19      	ldr	r2, [pc, #100]	; (8005514 <TIM_OC3_SetConfig+0x108>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d003      	beq.n	80054ba <TIM_OC3_SetConfig+0xae>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a18      	ldr	r2, [pc, #96]	; (8005518 <TIM_OC3_SetConfig+0x10c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d113      	bne.n	80054e2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	011b      	lsls	r3, r3, #4
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	621a      	str	r2, [r3, #32]
}
 80054fc:	bf00      	nop
 80054fe:	371c      	adds	r7, #28
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	40012c00 	.word	0x40012c00
 800550c:	40013400 	.word	0x40013400
 8005510:	40014000 	.word	0x40014000
 8005514:	40014400 	.word	0x40014400
 8005518:	40014800 	.word	0x40014800

0800551c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800554a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	021b      	lsls	r3, r3, #8
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	4313      	orrs	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800556a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	031b      	lsls	r3, r3, #12
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	4313      	orrs	r3, r2
 8005576:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a18      	ldr	r2, [pc, #96]	; (80055dc <TIM_OC4_SetConfig+0xc0>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d00f      	beq.n	80055a0 <TIM_OC4_SetConfig+0x84>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a17      	ldr	r2, [pc, #92]	; (80055e0 <TIM_OC4_SetConfig+0xc4>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d00b      	beq.n	80055a0 <TIM_OC4_SetConfig+0x84>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a16      	ldr	r2, [pc, #88]	; (80055e4 <TIM_OC4_SetConfig+0xc8>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d007      	beq.n	80055a0 <TIM_OC4_SetConfig+0x84>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a15      	ldr	r2, [pc, #84]	; (80055e8 <TIM_OC4_SetConfig+0xcc>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d003      	beq.n	80055a0 <TIM_OC4_SetConfig+0x84>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a14      	ldr	r2, [pc, #80]	; (80055ec <TIM_OC4_SetConfig+0xd0>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d109      	bne.n	80055b4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	019b      	lsls	r3, r3, #6
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	621a      	str	r2, [r3, #32]
}
 80055ce:	bf00      	nop
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	40012c00 	.word	0x40012c00
 80055e0:	40013400 	.word	0x40013400
 80055e4:	40014000 	.word	0x40014000
 80055e8:	40014400 	.word	0x40014400
 80055ec:	40014800 	.word	0x40014800

080055f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b087      	sub	sp, #28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800561e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4313      	orrs	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005634:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	041b      	lsls	r3, r3, #16
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	4313      	orrs	r3, r2
 8005640:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a17      	ldr	r2, [pc, #92]	; (80056a4 <TIM_OC5_SetConfig+0xb4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d00f      	beq.n	800566a <TIM_OC5_SetConfig+0x7a>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a16      	ldr	r2, [pc, #88]	; (80056a8 <TIM_OC5_SetConfig+0xb8>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d00b      	beq.n	800566a <TIM_OC5_SetConfig+0x7a>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a15      	ldr	r2, [pc, #84]	; (80056ac <TIM_OC5_SetConfig+0xbc>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d007      	beq.n	800566a <TIM_OC5_SetConfig+0x7a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a14      	ldr	r2, [pc, #80]	; (80056b0 <TIM_OC5_SetConfig+0xc0>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d003      	beq.n	800566a <TIM_OC5_SetConfig+0x7a>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a13      	ldr	r2, [pc, #76]	; (80056b4 <TIM_OC5_SetConfig+0xc4>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d109      	bne.n	800567e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005670:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	021b      	lsls	r3, r3, #8
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	621a      	str	r2, [r3, #32]
}
 8005698:	bf00      	nop
 800569a:	371c      	adds	r7, #28
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	40012c00 	.word	0x40012c00
 80056a8:	40013400 	.word	0x40013400
 80056ac:	40014000 	.word	0x40014000
 80056b0:	40014400 	.word	0x40014400
 80056b4:	40014800 	.word	0x40014800

080056b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	021b      	lsls	r3, r3, #8
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	051b      	lsls	r3, r3, #20
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	4313      	orrs	r3, r2
 800570a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a18      	ldr	r2, [pc, #96]	; (8005770 <TIM_OC6_SetConfig+0xb8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d00f      	beq.n	8005734 <TIM_OC6_SetConfig+0x7c>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a17      	ldr	r2, [pc, #92]	; (8005774 <TIM_OC6_SetConfig+0xbc>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d00b      	beq.n	8005734 <TIM_OC6_SetConfig+0x7c>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a16      	ldr	r2, [pc, #88]	; (8005778 <TIM_OC6_SetConfig+0xc0>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d007      	beq.n	8005734 <TIM_OC6_SetConfig+0x7c>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a15      	ldr	r2, [pc, #84]	; (800577c <TIM_OC6_SetConfig+0xc4>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d003      	beq.n	8005734 <TIM_OC6_SetConfig+0x7c>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a14      	ldr	r2, [pc, #80]	; (8005780 <TIM_OC6_SetConfig+0xc8>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d109      	bne.n	8005748 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800573a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	029b      	lsls	r3, r3, #10
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	4313      	orrs	r3, r2
 8005746:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	621a      	str	r2, [r3, #32]
}
 8005762:	bf00      	nop
 8005764:	371c      	adds	r7, #28
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	40012c00 	.word	0x40012c00
 8005774:	40013400 	.word	0x40013400
 8005778:	40014000 	.word	0x40014000
 800577c:	40014400 	.word	0x40014400
 8005780:	40014800 	.word	0x40014800

08005784 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005798:	2b01      	cmp	r3, #1
 800579a:	d101      	bne.n	80057a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800579c:	2302      	movs	r3, #2
 800579e:	e065      	b.n	800586c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4313      	orrs	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005806:	4313      	orrs	r3, r2
 8005808:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	041b      	lsls	r3, r3, #16
 8005816:	4313      	orrs	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a16      	ldr	r2, [pc, #88]	; (8005878 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d004      	beq.n	800582e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a14      	ldr	r2, [pc, #80]	; (800587c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d115      	bne.n	800585a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005838:	051b      	lsls	r3, r3, #20
 800583a:	4313      	orrs	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	4313      	orrs	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	40012c00 	.word	0x40012c00
 800587c:	40013400 	.word	0x40013400

08005880 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005890:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005894:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	b29a      	uxth	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b085      	sub	sp, #20
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80058b6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80058ba:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	43db      	mvns	r3, r3
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	4013      	ands	r3, r2
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80058e4:	b084      	sub	sp, #16
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	f107 0014 	add.w	r0, r7, #20
 80058f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	b004      	add	sp, #16
 8005924:	4770      	bx	lr
	...

08005928 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005928:	b480      	push	{r7}
 800592a:	b09d      	sub	sp, #116	; 0x74
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	881b      	ldrh	r3, [r3, #0]
 8005944:	b29b      	uxth	r3, r3
 8005946:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800594a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	78db      	ldrb	r3, [r3, #3]
 8005956:	2b03      	cmp	r3, #3
 8005958:	d81f      	bhi.n	800599a <USB_ActivateEndpoint+0x72>
 800595a:	a201      	add	r2, pc, #4	; (adr r2, 8005960 <USB_ActivateEndpoint+0x38>)
 800595c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005960:	08005971 	.word	0x08005971
 8005964:	0800598d 	.word	0x0800598d
 8005968:	080059a3 	.word	0x080059a3
 800596c:	0800597f 	.word	0x0800597f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005970:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005974:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005978:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800597c:	e012      	b.n	80059a4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800597e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005982:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005986:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800598a:	e00b      	b.n	80059a4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800598c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005990:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005994:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005998:	e004      	b.n	80059a4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80059a0:	e000      	b.n	80059a4 <USB_ActivateEndpoint+0x7c>
      break;
 80059a2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	441a      	add	r2, r3
 80059ae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80059b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	b21b      	sxth	r3, r3
 80059d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059de:	b21a      	sxth	r2, r3
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	b21b      	sxth	r3, r3
 80059e6:	4313      	orrs	r3, r2
 80059e8:	b21b      	sxth	r3, r3
 80059ea:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	441a      	add	r2, r3
 80059f8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80059fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	7b1b      	ldrb	r3, [r3, #12]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f040 8178 	bne.w	8005d0a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	785b      	ldrb	r3, [r3, #1]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 8084 	beq.w	8005b2c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	61bb      	str	r3, [r7, #24]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	461a      	mov	r2, r3
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	4413      	add	r3, r2
 8005a36:	61bb      	str	r3, [r7, #24]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	011a      	lsls	r2, r3, #4
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a46:	617b      	str	r3, [r7, #20]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	88db      	ldrh	r3, [r3, #6]
 8005a4c:	085b      	lsrs	r3, r3, #1
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	827b      	strh	r3, [r7, #18]
 8005a66:	8a7b      	ldrh	r3, [r7, #18]
 8005a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01b      	beq.n	8005aa8 <USB_ActivateEndpoint+0x180>
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a86:	823b      	strh	r3, [r7, #16]
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	441a      	add	r2, r3
 8005a92:	8a3b      	ldrh	r3, [r7, #16]
 8005a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aa0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	78db      	ldrb	r3, [r3, #3]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d020      	beq.n	8005af2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	881b      	ldrh	r3, [r3, #0]
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ac2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ac6:	81bb      	strh	r3, [r7, #12]
 8005ac8:	89bb      	ldrh	r3, [r7, #12]
 8005aca:	f083 0320 	eor.w	r3, r3, #32
 8005ace:	81bb      	strh	r3, [r7, #12]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	441a      	add	r2, r3
 8005ada:	89bb      	ldrh	r3, [r7, #12]
 8005adc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ae0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	8013      	strh	r3, [r2, #0]
 8005af0:	e2d5      	b.n	800609e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b08:	81fb      	strh	r3, [r7, #14]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	441a      	add	r2, r3
 8005b14:	89fb      	ldrh	r3, [r7, #14]
 8005b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	8013      	strh	r3, [r2, #0]
 8005b2a:	e2b8      	b.n	800609e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	633b      	str	r3, [r7, #48]	; 0x30
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	461a      	mov	r2, r3
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3c:	4413      	add	r3, r2
 8005b3e:	633b      	str	r3, [r7, #48]	; 0x30
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	011a      	lsls	r2, r3, #4
 8005b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	88db      	ldrh	r3, [r3, #6]
 8005b54:	085b      	lsrs	r3, r3, #1
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b70:	4413      	add	r3, r2
 8005b72:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	011a      	lsls	r2, r3, #4
 8005b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b82:	627b      	str	r3, [r7, #36]	; 0x24
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	801a      	strh	r2, [r3, #0]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	2b3e      	cmp	r3, #62	; 0x3e
 8005b9a:	d91d      	bls.n	8005bd8 <USB_ActivateEndpoint+0x2b0>
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	095b      	lsrs	r3, r3, #5
 8005ba2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	f003 031f 	and.w	r3, r3, #31
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d102      	bne.n	8005bb6 <USB_ActivateEndpoint+0x28e>
 8005bb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	029b      	lsls	r3, r3, #10
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	801a      	strh	r2, [r3, #0]
 8005bd6:	e026      	b.n	8005c26 <USB_ActivateEndpoint+0x2fe>
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10a      	bne.n	8005bf6 <USB_ActivateEndpoint+0x2ce>
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	801a      	strh	r2, [r3, #0]
 8005bf4:	e017      	b.n	8005c26 <USB_ActivateEndpoint+0x2fe>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	085b      	lsrs	r3, r3, #1
 8005bfc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <USB_ActivateEndpoint+0x2e8>
 8005c0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	881b      	ldrh	r3, [r3, #0]
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	029b      	lsls	r3, r3, #10
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	847b      	strh	r3, [r7, #34]	; 0x22
 8005c34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d01b      	beq.n	8005c76 <USB_ActivateEndpoint+0x34e>
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c54:	843b      	strh	r3, [r7, #32]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	441a      	add	r2, r3
 8005c60:	8c3b      	ldrh	r3, [r7, #32]
 8005c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d124      	bne.n	8005cc8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c94:	83bb      	strh	r3, [r7, #28]
 8005c96:	8bbb      	ldrh	r3, [r7, #28]
 8005c98:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c9c:	83bb      	strh	r3, [r7, #28]
 8005c9e:	8bbb      	ldrh	r3, [r7, #28]
 8005ca0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ca4:	83bb      	strh	r3, [r7, #28]
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	441a      	add	r2, r3
 8005cb0:	8bbb      	ldrh	r3, [r7, #28]
 8005cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	8013      	strh	r3, [r2, #0]
 8005cc6:	e1ea      	b.n	800609e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cde:	83fb      	strh	r3, [r7, #30]
 8005ce0:	8bfb      	ldrh	r3, [r7, #30]
 8005ce2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ce6:	83fb      	strh	r3, [r7, #30]
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	441a      	add	r2, r3
 8005cf2:	8bfb      	ldrh	r3, [r7, #30]
 8005cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	8013      	strh	r3, [r2, #0]
 8005d08:	e1c9      	b.n	800609e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	78db      	ldrb	r3, [r3, #3]
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d11e      	bne.n	8005d50 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d28:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	441a      	add	r2, r3
 8005d36:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005d3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d42:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	8013      	strh	r3, [r2, #0]
 8005d4e:	e01d      	b.n	8005d8c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	881b      	ldrh	r3, [r3, #0]
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d66:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	441a      	add	r2, r3
 8005d74:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005d78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	461a      	mov	r2, r3
 8005d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d9c:	4413      	add	r3, r2
 8005d9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	011a      	lsls	r2, r3, #4
 8005da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dae:	65bb      	str	r3, [r7, #88]	; 0x58
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	891b      	ldrh	r3, [r3, #8]
 8005db4:	085b      	lsrs	r3, r3, #1
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dbe:	801a      	strh	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	657b      	str	r3, [r7, #84]	; 0x54
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	461a      	mov	r2, r3
 8005dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dd0:	4413      	add	r3, r2
 8005dd2:	657b      	str	r3, [r7, #84]	; 0x54
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	011a      	lsls	r2, r3, #4
 8005dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005de2:	653b      	str	r3, [r7, #80]	; 0x50
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	895b      	ldrh	r3, [r3, #10]
 8005de8:	085b      	lsrs	r3, r3, #1
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005df2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	785b      	ldrb	r3, [r3, #1]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f040 8093 	bne.w	8005f24 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005e0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d01b      	beq.n	8005e52 <USB_ActivateEndpoint+0x52a>
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e30:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	441a      	add	r2, r3
 8005e3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005e60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d01b      	beq.n	8005ea2 <USB_ActivateEndpoint+0x57a>
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	881b      	ldrh	r3, [r3, #0]
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e80:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	441a      	add	r2, r3
 8005e8c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb8:	873b      	strh	r3, [r7, #56]	; 0x38
 8005eba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ebc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ec0:	873b      	strh	r3, [r7, #56]	; 0x38
 8005ec2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ec4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ec8:	873b      	strh	r3, [r7, #56]	; 0x38
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	441a      	add	r2, r3
 8005ed4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f00:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	441a      	add	r2, r3
 8005f0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	8013      	strh	r3, [r2, #0]
 8005f22:	e0bc      	b.n	800609e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	881b      	ldrh	r3, [r3, #0]
 8005f30:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005f34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d01d      	beq.n	8005f7c <USB_ActivateEndpoint+0x654>
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	881b      	ldrh	r3, [r3, #0]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f56:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	441a      	add	r2, r3
 8005f64:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005f8c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d01d      	beq.n	8005fd4 <USB_ActivateEndpoint+0x6ac>
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	881b      	ldrh	r3, [r3, #0]
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	441a      	add	r2, r3
 8005fbc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005fc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	78db      	ldrb	r3, [r3, #3]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d024      	beq.n	8006026 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ff2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005ff6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005ffa:	f083 0320 	eor.w	r3, r3, #32
 8005ffe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	441a      	add	r2, r3
 800600c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006010:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006014:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800601c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006020:	b29b      	uxth	r3, r3
 8006022:	8013      	strh	r3, [r2, #0]
 8006024:	e01d      	b.n	8006062 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	b29b      	uxth	r3, r3
 8006034:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800603c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	441a      	add	r2, r3
 800604a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800604e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800605a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800605e:	b29b      	uxth	r3, r3
 8006060:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	b29b      	uxth	r3, r3
 8006070:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006078:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	441a      	add	r2, r3
 8006086:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800608a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800608e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800609a:	b29b      	uxth	r3, r3
 800609c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800609e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3774      	adds	r7, #116	; 0x74
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop

080060b0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b08d      	sub	sp, #52	; 0x34
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	7b1b      	ldrb	r3, [r3, #12]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f040 808e 	bne.w	80061e0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	785b      	ldrb	r3, [r3, #1]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d044      	beq.n	8006156 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	81bb      	strh	r3, [r7, #12]
 80060da:	89bb      	ldrh	r3, [r7, #12]
 80060dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d01b      	beq.n	800611c <USB_DeactivateEndpoint+0x6c>
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	881b      	ldrh	r3, [r3, #0]
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060fa:	817b      	strh	r3, [r7, #10]
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	441a      	add	r2, r3
 8006106:	897b      	ldrh	r3, [r7, #10]
 8006108:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800610c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006114:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006118:	b29b      	uxth	r3, r3
 800611a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	b29b      	uxth	r3, r3
 800612a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800612e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006132:	813b      	strh	r3, [r7, #8]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	441a      	add	r2, r3
 800613e:	893b      	ldrh	r3, [r7, #8]
 8006140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800614c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006150:	b29b      	uxth	r3, r3
 8006152:	8013      	strh	r3, [r2, #0]
 8006154:	e192      	b.n	800647c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	827b      	strh	r3, [r7, #18]
 8006164:	8a7b      	ldrh	r3, [r7, #18]
 8006166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d01b      	beq.n	80061a6 <USB_DeactivateEndpoint+0xf6>
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	b29b      	uxth	r3, r3
 800617c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006184:	823b      	strh	r3, [r7, #16]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	441a      	add	r2, r3
 8006190:	8a3b      	ldrh	r3, [r7, #16]
 8006192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800619a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800619e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061bc:	81fb      	strh	r3, [r7, #14]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	441a      	add	r2, r3
 80061c8:	89fb      	ldrh	r3, [r7, #14]
 80061ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061da:	b29b      	uxth	r3, r3
 80061dc:	8013      	strh	r3, [r2, #0]
 80061de:	e14d      	b.n	800647c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	785b      	ldrb	r3, [r3, #1]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f040 80a5 	bne.w	8006334 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4413      	add	r3, r2
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	843b      	strh	r3, [r7, #32]
 80061f8:	8c3b      	ldrh	r3, [r7, #32]
 80061fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d01b      	beq.n	800623a <USB_DeactivateEndpoint+0x18a>
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	4413      	add	r3, r2
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	b29b      	uxth	r3, r3
 8006210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006218:	83fb      	strh	r3, [r7, #30]
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	441a      	add	r2, r3
 8006224:	8bfb      	ldrh	r3, [r7, #30]
 8006226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800622a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800622e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006236:	b29b      	uxth	r3, r3
 8006238:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	83bb      	strh	r3, [r7, #28]
 8006248:	8bbb      	ldrh	r3, [r7, #28]
 800624a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800624e:	2b00      	cmp	r3, #0
 8006250:	d01b      	beq.n	800628a <USB_DeactivateEndpoint+0x1da>
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	4413      	add	r3, r2
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	b29b      	uxth	r3, r3
 8006260:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006268:	837b      	strh	r3, [r7, #26]
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	441a      	add	r2, r3
 8006274:	8b7b      	ldrh	r3, [r7, #26]
 8006276:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800627a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800627e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006282:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006286:	b29b      	uxth	r3, r3
 8006288:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4413      	add	r3, r2
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	b29b      	uxth	r3, r3
 8006298:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800629c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a0:	833b      	strh	r3, [r7, #24]
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	441a      	add	r2, r3
 80062ac:	8b3b      	ldrh	r3, [r7, #24]
 80062ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062be:	b29b      	uxth	r3, r3
 80062c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	881b      	ldrh	r3, [r3, #0]
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d8:	82fb      	strh	r3, [r7, #22]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	441a      	add	r2, r3
 80062e4:	8afb      	ldrh	r3, [r7, #22]
 80062e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4413      	add	r3, r2
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	b29b      	uxth	r3, r3
 8006308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800630c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006310:	82bb      	strh	r3, [r7, #20]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	441a      	add	r2, r3
 800631c:	8abb      	ldrh	r3, [r7, #20]
 800631e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800632a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800632e:	b29b      	uxth	r3, r3
 8006330:	8013      	strh	r3, [r2, #0]
 8006332:	e0a3      	b.n	800647c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006342:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d01b      	beq.n	8006384 <USB_DeactivateEndpoint+0x2d4>
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	b29b      	uxth	r3, r3
 800635a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800635e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006362:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	441a      	add	r2, r3
 800636e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006370:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006374:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006378:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800637c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006380:	b29b      	uxth	r3, r3
 8006382:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4413      	add	r3, r2
 800638e:	881b      	ldrh	r3, [r3, #0]
 8006390:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006392:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006398:	2b00      	cmp	r3, #0
 800639a:	d01b      	beq.n	80063d4 <USB_DeactivateEndpoint+0x324>
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4413      	add	r3, r2
 80063a6:	881b      	ldrh	r3, [r3, #0]
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b2:	853b      	strh	r3, [r7, #40]	; 0x28
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	441a      	add	r2, r3
 80063be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80063c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4413      	add	r3, r2
 80063de:	881b      	ldrh	r3, [r3, #0]
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ea:	84fb      	strh	r3, [r7, #38]	; 0x26
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	441a      	add	r2, r3
 80063f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006400:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006408:	b29b      	uxth	r3, r3
 800640a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	881b      	ldrh	r3, [r3, #0]
 8006418:	b29b      	uxth	r3, r3
 800641a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800641e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006422:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	441a      	add	r2, r3
 800642e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006430:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006434:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800643c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006440:	b29b      	uxth	r3, r3
 8006442:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	881b      	ldrh	r3, [r3, #0]
 8006450:	b29b      	uxth	r3, r3
 8006452:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645a:	847b      	strh	r3, [r7, #34]	; 0x22
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	441a      	add	r2, r3
 8006466:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800646c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006478:	b29b      	uxth	r3, r3
 800647a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3734      	adds	r7, #52	; 0x34
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b0c2      	sub	sp, #264	; 0x108
 800648e:	af00      	add	r7, sp, #0
 8006490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006494:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006498:	6018      	str	r0, [r3, #0]
 800649a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800649e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064a2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	785b      	ldrb	r3, [r3, #1]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	f040 86b7 	bne.w	8007224 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80064b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	699a      	ldr	r2, [r3, #24]
 80064c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d908      	bls.n	80064e4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80064d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064e2:	e007      	b.n	80064f4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80064e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80064f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	7b1b      	ldrb	r3, [r3, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d13a      	bne.n	800657a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6959      	ldr	r1, [r3, #20]
 8006510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	88da      	ldrh	r2, [r3, #6]
 800651c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006520:	b29b      	uxth	r3, r3
 8006522:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006526:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800652a:	6800      	ldr	r0, [r0, #0]
 800652c:	f001 fc8c 	bl	8007e48 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006534:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	613b      	str	r3, [r7, #16]
 800653c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006540:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800654a:	b29b      	uxth	r3, r3
 800654c:	461a      	mov	r2, r3
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	4413      	add	r3, r2
 8006552:	613b      	str	r3, [r7, #16]
 8006554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006558:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	011a      	lsls	r2, r3, #4
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	4413      	add	r3, r2
 8006566:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800656a:	60fb      	str	r3, [r7, #12]
 800656c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	801a      	strh	r2, [r3, #0]
 8006576:	f000 be1f 	b.w	80071b8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800657a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	78db      	ldrb	r3, [r3, #3]
 8006586:	2b02      	cmp	r3, #2
 8006588:	f040 8462 	bne.w	8006e50 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800658c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6a1a      	ldr	r2, [r3, #32]
 8006598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800659c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	f240 83df 	bls.w	8006d68 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80065aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80065d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	441a      	add	r2, r3
 80065ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80065f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065fa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80065fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006602:	b29b      	uxth	r3, r3
 8006604:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800660a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6a1a      	ldr	r2, [r3, #32]
 8006612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006616:	1ad2      	subs	r2, r2, r3
 8006618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800661c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006628:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	b29b      	uxth	r3, r3
 8006642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006646:	2b00      	cmp	r3, #0
 8006648:	f000 81c7 	beq.w	80069da <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800664c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006650:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	633b      	str	r3, [r7, #48]	; 0x30
 8006658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800665c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	785b      	ldrb	r3, [r3, #1]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d177      	bne.n	8006758 <USB_EPStartXfer+0x2ce>
 8006668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800666c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	62bb      	str	r3, [r7, #40]	; 0x28
 8006674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006678:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006682:	b29b      	uxth	r3, r3
 8006684:	461a      	mov	r2, r3
 8006686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006688:	4413      	add	r3, r2
 800668a:	62bb      	str	r3, [r7, #40]	; 0x28
 800668c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	011a      	lsls	r2, r3, #4
 800669a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669c:	4413      	add	r3, r2
 800669e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066a2:	627b      	str	r3, [r7, #36]	; 0x24
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	881b      	ldrh	r3, [r3, #0]
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	801a      	strh	r2, [r3, #0]
 80066b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066b8:	2b3e      	cmp	r3, #62	; 0x3e
 80066ba:	d921      	bls.n	8006700 <USB_EPStartXfer+0x276>
 80066bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c0:	095b      	lsrs	r3, r3, #5
 80066c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80066c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ca:	f003 031f 	and.w	r3, r3, #31
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d104      	bne.n	80066dc <USB_EPStartXfer+0x252>
 80066d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80066d6:	3b01      	subs	r3, #1
 80066d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	029b      	lsls	r3, r3, #10
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	4313      	orrs	r3, r2
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fc:	801a      	strh	r2, [r3, #0]
 80066fe:	e050      	b.n	80067a2 <USB_EPStartXfer+0x318>
 8006700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10a      	bne.n	800671e <USB_EPStartXfer+0x294>
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	b29b      	uxth	r3, r3
 800670e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006716:	b29a      	uxth	r2, r3
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	801a      	strh	r2, [r3, #0]
 800671c:	e041      	b.n	80067a2 <USB_EPStartXfer+0x318>
 800671e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006722:	085b      	lsrs	r3, r3, #1
 8006724:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	2b00      	cmp	r3, #0
 8006732:	d004      	beq.n	800673e <USB_EPStartXfer+0x2b4>
 8006734:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006738:	3301      	adds	r3, #1
 800673a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006740:	881b      	ldrh	r3, [r3, #0]
 8006742:	b29a      	uxth	r2, r3
 8006744:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006748:	b29b      	uxth	r3, r3
 800674a:	029b      	lsls	r3, r3, #10
 800674c:	b29b      	uxth	r3, r3
 800674e:	4313      	orrs	r3, r2
 8006750:	b29a      	uxth	r2, r3
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	801a      	strh	r2, [r3, #0]
 8006756:	e024      	b.n	80067a2 <USB_EPStartXfer+0x318>
 8006758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	785b      	ldrb	r3, [r3, #1]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d11c      	bne.n	80067a2 <USB_EPStartXfer+0x318>
 8006768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800676c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006776:	b29b      	uxth	r3, r3
 8006778:	461a      	mov	r2, r3
 800677a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677c:	4413      	add	r3, r2
 800677e:	633b      	str	r3, [r7, #48]	; 0x30
 8006780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	011a      	lsls	r2, r3, #4
 800678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006790:	4413      	add	r3, r2
 8006792:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800679c:	b29a      	uxth	r2, r3
 800679e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80067a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	895b      	ldrh	r3, [r3, #10]
 80067ae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6959      	ldr	r1, [r3, #20]
 80067be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80067c8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80067cc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80067d0:	6800      	ldr	r0, [r0, #0]
 80067d2:	f001 fb39 	bl	8007e48 <USB_WritePMA>
            ep->xfer_buff += len;
 80067d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	695a      	ldr	r2, [r3, #20]
 80067e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067e6:	441a      	add	r2, r3
 80067e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80067f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6a1a      	ldr	r2, [r3, #32]
 8006800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	429a      	cmp	r2, r3
 800680e:	d90f      	bls.n	8006830 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6a1a      	ldr	r2, [r3, #32]
 800681c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006820:	1ad2      	subs	r2, r2, r3
 8006822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	621a      	str	r2, [r3, #32]
 800682e:	e00e      	b.n	800684e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6a1b      	ldr	r3, [r3, #32]
 800683c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2200      	movs	r2, #0
 800684c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800684e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	785b      	ldrb	r3, [r3, #1]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d177      	bne.n	800694e <USB_EPStartXfer+0x4c4>
 800685e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006862:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	61bb      	str	r3, [r7, #24]
 800686a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800686e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006878:	b29b      	uxth	r3, r3
 800687a:	461a      	mov	r2, r3
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	4413      	add	r3, r2
 8006880:	61bb      	str	r3, [r7, #24]
 8006882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006886:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	011a      	lsls	r2, r3, #4
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	4413      	add	r3, r2
 8006894:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006898:	617b      	str	r3, [r7, #20]
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	881b      	ldrh	r3, [r3, #0]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	801a      	strh	r2, [r3, #0]
 80068aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ae:	2b3e      	cmp	r3, #62	; 0x3e
 80068b0:	d921      	bls.n	80068f6 <USB_EPStartXfer+0x46c>
 80068b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068b6:	095b      	lsrs	r3, r3, #5
 80068b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80068bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068c0:	f003 031f 	and.w	r3, r3, #31
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d104      	bne.n	80068d2 <USB_EPStartXfer+0x448>
 80068c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068cc:	3b01      	subs	r3, #1
 80068ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	881b      	ldrh	r3, [r3, #0]
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068dc:	b29b      	uxth	r3, r3
 80068de:	029b      	lsls	r3, r3, #10
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	4313      	orrs	r3, r2
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	801a      	strh	r2, [r3, #0]
 80068f4:	e056      	b.n	80069a4 <USB_EPStartXfer+0x51a>
 80068f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10a      	bne.n	8006914 <USB_EPStartXfer+0x48a>
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	b29b      	uxth	r3, r3
 8006904:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006908:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800690c:	b29a      	uxth	r2, r3
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	801a      	strh	r2, [r3, #0]
 8006912:	e047      	b.n	80069a4 <USB_EPStartXfer+0x51a>
 8006914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006918:	085b      	lsrs	r3, r3, #1
 800691a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800691e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	2b00      	cmp	r3, #0
 8006928:	d004      	beq.n	8006934 <USB_EPStartXfer+0x4aa>
 800692a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800692e:	3301      	adds	r3, #1
 8006930:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	b29a      	uxth	r2, r3
 800693a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800693e:	b29b      	uxth	r3, r3
 8006940:	029b      	lsls	r3, r3, #10
 8006942:	b29b      	uxth	r3, r3
 8006944:	4313      	orrs	r3, r2
 8006946:	b29a      	uxth	r2, r3
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	801a      	strh	r2, [r3, #0]
 800694c:	e02a      	b.n	80069a4 <USB_EPStartXfer+0x51a>
 800694e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	785b      	ldrb	r3, [r3, #1]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d122      	bne.n	80069a4 <USB_EPStartXfer+0x51a>
 800695e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006962:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	623b      	str	r3, [r7, #32]
 800696a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800696e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006978:	b29b      	uxth	r3, r3
 800697a:	461a      	mov	r2, r3
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	4413      	add	r3, r2
 8006980:	623b      	str	r3, [r7, #32]
 8006982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006986:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	011a      	lsls	r2, r3, #4
 8006990:	6a3b      	ldr	r3, [r7, #32]
 8006992:	4413      	add	r3, r2
 8006994:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006998:	61fb      	str	r3, [r7, #28]
 800699a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800699e:	b29a      	uxth	r2, r3
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80069a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	891b      	ldrh	r3, [r3, #8]
 80069b0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6959      	ldr	r1, [r3, #20]
 80069c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80069ca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80069ce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80069d2:	6800      	ldr	r0, [r0, #0]
 80069d4:	f001 fa38 	bl	8007e48 <USB_WritePMA>
 80069d8:	e3ee      	b.n	80071b8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	785b      	ldrb	r3, [r3, #1]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d177      	bne.n	8006ada <USB_EPStartXfer+0x650>
 80069ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80069f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	461a      	mov	r2, r3
 8006a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a0a:	4413      	add	r3, r2
 8006a0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	011a      	lsls	r2, r3, #4
 8006a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a1e:	4413      	add	r3, r2
 8006a20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a24:	647b      	str	r3, [r7, #68]	; 0x44
 8006a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a34:	801a      	strh	r2, [r3, #0]
 8006a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a3a:	2b3e      	cmp	r3, #62	; 0x3e
 8006a3c:	d921      	bls.n	8006a82 <USB_EPStartXfer+0x5f8>
 8006a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a42:	095b      	lsrs	r3, r3, #5
 8006a44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a4c:	f003 031f 	and.w	r3, r3, #31
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d104      	bne.n	8006a5e <USB_EPStartXfer+0x5d4>
 8006a54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	029b      	lsls	r3, r3, #10
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a7e:	801a      	strh	r2, [r3, #0]
 8006a80:	e056      	b.n	8006b30 <USB_EPStartXfer+0x6a6>
 8006a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10a      	bne.n	8006aa0 <USB_EPStartXfer+0x616>
 8006a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a9c:	801a      	strh	r2, [r3, #0]
 8006a9e:	e047      	b.n	8006b30 <USB_EPStartXfer+0x6a6>
 8006aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aa4:	085b      	lsrs	r3, r3, #1
 8006aa6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d004      	beq.n	8006ac0 <USB_EPStartXfer+0x636>
 8006ab6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006aba:	3301      	adds	r3, #1
 8006abc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	029b      	lsls	r3, r3, #10
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ad6:	801a      	strh	r2, [r3, #0]
 8006ad8:	e02a      	b.n	8006b30 <USB_EPStartXfer+0x6a6>
 8006ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	785b      	ldrb	r3, [r3, #1]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d122      	bne.n	8006b30 <USB_EPStartXfer+0x6a6>
 8006aea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	653b      	str	r3, [r7, #80]	; 0x50
 8006af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006afa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	461a      	mov	r2, r3
 8006b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b0a:	4413      	add	r3, r2
 8006b0c:	653b      	str	r3, [r7, #80]	; 0x50
 8006b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	011a      	lsls	r2, r3, #4
 8006b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b1e:	4413      	add	r3, r2
 8006b20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b2e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	891b      	ldrh	r3, [r3, #8]
 8006b3c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6959      	ldr	r1, [r3, #20]
 8006b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006b56:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006b5a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006b5e:	6800      	ldr	r0, [r0, #0]
 8006b60:	f001 f972 	bl	8007e48 <USB_WritePMA>
            ep->xfer_buff += len;
 8006b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	695a      	ldr	r2, [r3, #20]
 8006b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b74:	441a      	add	r2, r3
 8006b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6a1a      	ldr	r2, [r3, #32]
 8006b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d90f      	bls.n	8006bbe <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6a1a      	ldr	r2, [r3, #32]
 8006baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bae:	1ad2      	subs	r2, r2, r3
 8006bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	621a      	str	r2, [r3, #32]
 8006bbc:	e00e      	b.n	8006bdc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006be0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	643b      	str	r3, [r7, #64]	; 0x40
 8006be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	785b      	ldrb	r3, [r3, #1]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d177      	bne.n	8006ce8 <USB_EPStartXfer+0x85e>
 8006bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	461a      	mov	r2, r3
 8006c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c18:	4413      	add	r3, r2
 8006c1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	011a      	lsls	r2, r3, #4
 8006c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c32:	637b      	str	r3, [r7, #52]	; 0x34
 8006c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c42:	801a      	strh	r2, [r3, #0]
 8006c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c48:	2b3e      	cmp	r3, #62	; 0x3e
 8006c4a:	d921      	bls.n	8006c90 <USB_EPStartXfer+0x806>
 8006c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c50:	095b      	lsrs	r3, r3, #5
 8006c52:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c5a:	f003 031f 	and.w	r3, r3, #31
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d104      	bne.n	8006c6c <USB_EPStartXfer+0x7e2>
 8006c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c66:	3b01      	subs	r3, #1
 8006c68:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	029b      	lsls	r3, r3, #10
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8c:	801a      	strh	r2, [r3, #0]
 8006c8e:	e050      	b.n	8006d32 <USB_EPStartXfer+0x8a8>
 8006c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10a      	bne.n	8006cae <USB_EPStartXfer+0x824>
 8006c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c9a:	881b      	ldrh	r3, [r3, #0]
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006caa:	801a      	strh	r2, [r3, #0]
 8006cac:	e041      	b.n	8006d32 <USB_EPStartXfer+0x8a8>
 8006cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cb2:	085b      	lsrs	r3, r3, #1
 8006cb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d004      	beq.n	8006cce <USB_EPStartXfer+0x844>
 8006cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc8:	3301      	adds	r3, #1
 8006cca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd0:	881b      	ldrh	r3, [r3, #0]
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	029b      	lsls	r3, r3, #10
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce4:	801a      	strh	r2, [r3, #0]
 8006ce6:	e024      	b.n	8006d32 <USB_EPStartXfer+0x8a8>
 8006ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	785b      	ldrb	r3, [r3, #1]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d11c      	bne.n	8006d32 <USB_EPStartXfer+0x8a8>
 8006cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	461a      	mov	r2, r3
 8006d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d0c:	4413      	add	r3, r2
 8006d0e:	643b      	str	r3, [r7, #64]	; 0x40
 8006d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	011a      	lsls	r2, r3, #4
 8006d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d20:	4413      	add	r3, r2
 8006d22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d30:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	895b      	ldrh	r3, [r3, #10]
 8006d3e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6959      	ldr	r1, [r3, #20]
 8006d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006d58:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006d5c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006d60:	6800      	ldr	r0, [r0, #0]
 8006d62:	f001 f871 	bl	8007e48 <USB_WritePMA>
 8006d66:	e227      	b.n	80071b8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	6a1b      	ldr	r3, [r3, #32]
 8006d74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	881b      	ldrh	r3, [r3, #0]
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d9e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006da2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	441a      	add	r2, r3
 8006dbc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006dc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006de0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	461a      	mov	r2, r3
 8006df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006df4:	4413      	add	r3, r2
 8006df6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	011a      	lsls	r2, r3, #4
 8006e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e08:	4413      	add	r3, r2
 8006e0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e18:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	891b      	ldrh	r3, [r3, #8]
 8006e26:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6959      	ldr	r1, [r3, #20]
 8006e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e40:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006e44:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006e48:	6800      	ldr	r0, [r0, #0]
 8006e4a:	f000 fffd 	bl	8007e48 <USB_WritePMA>
 8006e4e:	e1b3      	b.n	80071b8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	6a1a      	ldr	r2, [r3, #32]
 8006e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e60:	1ad2      	subs	r2, r2, r3
 8006e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	881b      	ldrh	r3, [r3, #0]
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 80c6 	beq.w	8007022 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	673b      	str	r3, [r7, #112]	; 0x70
 8006ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	785b      	ldrb	r3, [r3, #1]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d177      	bne.n	8006fa2 <USB_EPStartXfer+0xb18>
 8006eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	461a      	mov	r2, r3
 8006ed0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ed2:	4413      	add	r3, r2
 8006ed4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	011a      	lsls	r2, r3, #4
 8006ee4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006eec:	667b      	str	r3, [r7, #100]	; 0x64
 8006eee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006efc:	801a      	strh	r2, [r3, #0]
 8006efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f02:	2b3e      	cmp	r3, #62	; 0x3e
 8006f04:	d921      	bls.n	8006f4a <USB_EPStartXfer+0xac0>
 8006f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f0a:	095b      	lsrs	r3, r3, #5
 8006f0c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f14:	f003 031f 	and.w	r3, r3, #31
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d104      	bne.n	8006f26 <USB_EPStartXfer+0xa9c>
 8006f1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f20:	3b01      	subs	r3, #1
 8006f22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	029b      	lsls	r3, r3, #10
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	4313      	orrs	r3, r2
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f46:	801a      	strh	r2, [r3, #0]
 8006f48:	e050      	b.n	8006fec <USB_EPStartXfer+0xb62>
 8006f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10a      	bne.n	8006f68 <USB_EPStartXfer+0xade>
 8006f52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f54:	881b      	ldrh	r3, [r3, #0]
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f64:	801a      	strh	r2, [r3, #0]
 8006f66:	e041      	b.n	8006fec <USB_EPStartXfer+0xb62>
 8006f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f6c:	085b      	lsrs	r3, r3, #1
 8006f6e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d004      	beq.n	8006f88 <USB_EPStartXfer+0xafe>
 8006f7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f82:	3301      	adds	r3, #1
 8006f84:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f8a:	881b      	ldrh	r3, [r3, #0]
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	029b      	lsls	r3, r3, #10
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f9e:	801a      	strh	r2, [r3, #0]
 8006fa0:	e024      	b.n	8006fec <USB_EPStartXfer+0xb62>
 8006fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	785b      	ldrb	r3, [r3, #1]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d11c      	bne.n	8006fec <USB_EPStartXfer+0xb62>
 8006fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fc6:	4413      	add	r3, r2
 8006fc8:	673b      	str	r3, [r7, #112]	; 0x70
 8006fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	011a      	lsls	r2, r3, #4
 8006fd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fda:	4413      	add	r3, r2
 8006fdc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006fe0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	895b      	ldrh	r3, [r3, #10]
 8006ff8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6959      	ldr	r1, [r3, #20]
 8007008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800700c:	b29b      	uxth	r3, r3
 800700e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007012:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007016:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800701a:	6800      	ldr	r0, [r0, #0]
 800701c:	f000 ff14 	bl	8007e48 <USB_WritePMA>
 8007020:	e0ca      	b.n	80071b8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	785b      	ldrb	r3, [r3, #1]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d177      	bne.n	8007122 <USB_EPStartXfer+0xc98>
 8007032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007036:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800703e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007042:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800704c:	b29b      	uxth	r3, r3
 800704e:	461a      	mov	r2, r3
 8007050:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007052:	4413      	add	r3, r2
 8007054:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800705a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	011a      	lsls	r2, r3, #4
 8007064:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007066:	4413      	add	r3, r2
 8007068:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800706c:	67bb      	str	r3, [r7, #120]	; 0x78
 800706e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	b29b      	uxth	r3, r3
 8007074:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007078:	b29a      	uxth	r2, r3
 800707a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800707c:	801a      	strh	r2, [r3, #0]
 800707e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007082:	2b3e      	cmp	r3, #62	; 0x3e
 8007084:	d921      	bls.n	80070ca <USB_EPStartXfer+0xc40>
 8007086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800708a:	095b      	lsrs	r3, r3, #5
 800708c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007094:	f003 031f 	and.w	r3, r3, #31
 8007098:	2b00      	cmp	r3, #0
 800709a:	d104      	bne.n	80070a6 <USB_EPStartXfer+0xc1c>
 800709c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80070a0:	3b01      	subs	r3, #1
 80070a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80070a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070a8:	881b      	ldrh	r3, [r3, #0]
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	029b      	lsls	r3, r3, #10
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	4313      	orrs	r3, r2
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070c6:	801a      	strh	r2, [r3, #0]
 80070c8:	e05c      	b.n	8007184 <USB_EPStartXfer+0xcfa>
 80070ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10a      	bne.n	80070e8 <USB_EPStartXfer+0xc5e>
 80070d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070d4:	881b      	ldrh	r3, [r3, #0]
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070e4:	801a      	strh	r2, [r3, #0]
 80070e6:	e04d      	b.n	8007184 <USB_EPStartXfer+0xcfa>
 80070e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ec:	085b      	lsrs	r3, r3, #1
 80070ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80070f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d004      	beq.n	8007108 <USB_EPStartXfer+0xc7e>
 80070fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007102:	3301      	adds	r3, #1
 8007104:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007108:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800710a:	881b      	ldrh	r3, [r3, #0]
 800710c:	b29a      	uxth	r2, r3
 800710e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007112:	b29b      	uxth	r3, r3
 8007114:	029b      	lsls	r3, r3, #10
 8007116:	b29b      	uxth	r3, r3
 8007118:	4313      	orrs	r3, r2
 800711a:	b29a      	uxth	r2, r3
 800711c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800711e:	801a      	strh	r2, [r3, #0]
 8007120:	e030      	b.n	8007184 <USB_EPStartXfer+0xcfa>
 8007122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	785b      	ldrb	r3, [r3, #1]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d128      	bne.n	8007184 <USB_EPStartXfer+0xcfa>
 8007132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007136:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007144:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800714e:	b29b      	uxth	r3, r3
 8007150:	461a      	mov	r2, r3
 8007152:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007156:	4413      	add	r3, r2
 8007158:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800715c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	011a      	lsls	r2, r3, #4
 800716a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800716e:	4413      	add	r3, r2
 8007170:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007174:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007178:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800717c:	b29a      	uxth	r2, r3
 800717e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007182:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	891b      	ldrh	r3, [r3, #8]
 8007190:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007198:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	6959      	ldr	r1, [r3, #20]
 80071a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80071aa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80071ae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80071b2:	6800      	ldr	r0, [r0, #0]
 80071b4:	f000 fe48 	bl	8007e48 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80071b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4413      	add	r3, r2
 80071d2:	881b      	ldrh	r3, [r3, #0]
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071de:	817b      	strh	r3, [r7, #10]
 80071e0:	897b      	ldrh	r3, [r7, #10]
 80071e2:	f083 0310 	eor.w	r3, r3, #16
 80071e6:	817b      	strh	r3, [r7, #10]
 80071e8:	897b      	ldrh	r3, [r7, #10]
 80071ea:	f083 0320 	eor.w	r3, r3, #32
 80071ee:	817b      	strh	r3, [r7, #10]
 80071f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	441a      	add	r2, r3
 800720a:	897b      	ldrh	r3, [r7, #10]
 800720c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800721c:	b29b      	uxth	r3, r3
 800721e:	8013      	strh	r3, [r2, #0]
 8007220:	f000 bcde 	b.w	8007be0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	7b1b      	ldrb	r3, [r3, #12]
 8007230:	2b00      	cmp	r3, #0
 8007232:	f040 80bb 	bne.w	80073ac <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800723a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	699a      	ldr	r2, [r3, #24]
 8007242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	429a      	cmp	r2, r3
 8007250:	d917      	bls.n	8007282 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	699a      	ldr	r2, [r3, #24]
 800726e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007272:	1ad2      	subs	r2, r2, r3
 8007274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	619a      	str	r2, [r3, #24]
 8007280:	e00e      	b.n	80072a0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2200      	movs	r2, #0
 800729e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80072a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072bc:	b29b      	uxth	r3, r3
 80072be:	461a      	mov	r2, r3
 80072c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072c4:	4413      	add	r3, r2
 80072c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	011a      	lsls	r2, r3, #4
 80072d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072dc:	4413      	add	r3, r2
 80072de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80072e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072ea:	881b      	ldrh	r3, [r3, #0]
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072f8:	801a      	strh	r2, [r3, #0]
 80072fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072fe:	2b3e      	cmp	r3, #62	; 0x3e
 8007300:	d924      	bls.n	800734c <USB_EPStartXfer+0xec2>
 8007302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007306:	095b      	lsrs	r3, r3, #5
 8007308:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800730c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007310:	f003 031f 	and.w	r3, r3, #31
 8007314:	2b00      	cmp	r3, #0
 8007316:	d104      	bne.n	8007322 <USB_EPStartXfer+0xe98>
 8007318:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800731c:	3b01      	subs	r3, #1
 800731e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007322:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	b29a      	uxth	r2, r3
 800732a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800732e:	b29b      	uxth	r3, r3
 8007330:	029b      	lsls	r3, r3, #10
 8007332:	b29b      	uxth	r3, r3
 8007334:	4313      	orrs	r3, r2
 8007336:	b29b      	uxth	r3, r3
 8007338:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800733c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007340:	b29a      	uxth	r2, r3
 8007342:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007346:	801a      	strh	r2, [r3, #0]
 8007348:	f000 bc10 	b.w	8007b6c <USB_EPStartXfer+0x16e2>
 800734c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007350:	2b00      	cmp	r3, #0
 8007352:	d10c      	bne.n	800736e <USB_EPStartXfer+0xee4>
 8007354:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007358:	881b      	ldrh	r3, [r3, #0]
 800735a:	b29b      	uxth	r3, r3
 800735c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007364:	b29a      	uxth	r2, r3
 8007366:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800736a:	801a      	strh	r2, [r3, #0]
 800736c:	e3fe      	b.n	8007b6c <USB_EPStartXfer+0x16e2>
 800736e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007372:	085b      	lsrs	r3, r3, #1
 8007374:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800737c:	f003 0301 	and.w	r3, r3, #1
 8007380:	2b00      	cmp	r3, #0
 8007382:	d004      	beq.n	800738e <USB_EPStartXfer+0xf04>
 8007384:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007388:	3301      	adds	r3, #1
 800738a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800738e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007392:	881b      	ldrh	r3, [r3, #0]
 8007394:	b29a      	uxth	r2, r3
 8007396:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800739a:	b29b      	uxth	r3, r3
 800739c:	029b      	lsls	r3, r3, #10
 800739e:	b29b      	uxth	r3, r3
 80073a0:	4313      	orrs	r3, r2
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073a8:	801a      	strh	r2, [r3, #0]
 80073aa:	e3df      	b.n	8007b6c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80073ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	78db      	ldrb	r3, [r3, #3]
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	f040 8218 	bne.w	80077ee <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80073be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	785b      	ldrb	r3, [r3, #1]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f040 809d 	bne.w	800750a <USB_EPStartXfer+0x1080>
 80073d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80073de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	461a      	mov	r2, r3
 80073f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073f4:	4413      	add	r3, r2
 80073f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80073fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	011a      	lsls	r2, r3, #4
 8007408:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800740c:	4413      	add	r3, r2
 800740e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007412:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007416:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800741a:	881b      	ldrh	r3, [r3, #0]
 800741c:	b29b      	uxth	r3, r3
 800741e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007422:	b29a      	uxth	r2, r3
 8007424:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007428:	801a      	strh	r2, [r3, #0]
 800742a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800742e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	2b3e      	cmp	r3, #62	; 0x3e
 8007438:	d92b      	bls.n	8007492 <USB_EPStartXfer+0x1008>
 800743a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800743e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	095b      	lsrs	r3, r3, #5
 8007448:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800744c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	f003 031f 	and.w	r3, r3, #31
 800745c:	2b00      	cmp	r3, #0
 800745e:	d104      	bne.n	800746a <USB_EPStartXfer+0xfe0>
 8007460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007464:	3b01      	subs	r3, #1
 8007466:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800746a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800746e:	881b      	ldrh	r3, [r3, #0]
 8007470:	b29a      	uxth	r2, r3
 8007472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007476:	b29b      	uxth	r3, r3
 8007478:	029b      	lsls	r3, r3, #10
 800747a:	b29b      	uxth	r3, r3
 800747c:	4313      	orrs	r3, r2
 800747e:	b29b      	uxth	r3, r3
 8007480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007488:	b29a      	uxth	r2, r3
 800748a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800748e:	801a      	strh	r2, [r3, #0]
 8007490:	e070      	b.n	8007574 <USB_EPStartXfer+0x10ea>
 8007492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10c      	bne.n	80074bc <USB_EPStartXfer+0x1032>
 80074a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074b8:	801a      	strh	r2, [r3, #0]
 80074ba:	e05b      	b.n	8007574 <USB_EPStartXfer+0x10ea>
 80074bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	085b      	lsrs	r3, r3, #1
 80074ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80074ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d004      	beq.n	80074ec <USB_EPStartXfer+0x1062>
 80074e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074e6:	3301      	adds	r3, #1
 80074e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80074ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074f0:	881b      	ldrh	r3, [r3, #0]
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	029b      	lsls	r3, r3, #10
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	4313      	orrs	r3, r2
 8007500:	b29a      	uxth	r2, r3
 8007502:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007506:	801a      	strh	r2, [r3, #0]
 8007508:	e034      	b.n	8007574 <USB_EPStartXfer+0x10ea>
 800750a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800750e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	785b      	ldrb	r3, [r3, #1]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d12c      	bne.n	8007574 <USB_EPStartXfer+0x10ea>
 800751a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800751e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800752c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007536:	b29b      	uxth	r3, r3
 8007538:	461a      	mov	r2, r3
 800753a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800753e:	4413      	add	r3, r2
 8007540:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	011a      	lsls	r2, r3, #4
 8007552:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007556:	4413      	add	r3, r2
 8007558:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800755c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	b29a      	uxth	r2, r3
 800756e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007572:	801a      	strh	r2, [r3, #0]
 8007574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007578:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	785b      	ldrb	r3, [r3, #1]
 800758e:	2b00      	cmp	r3, #0
 8007590:	f040 809d 	bne.w	80076ce <USB_EPStartXfer+0x1244>
 8007594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007598:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	461a      	mov	r2, r3
 80075b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075b8:	4413      	add	r3, r2
 80075ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	011a      	lsls	r2, r3, #4
 80075cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075d0:	4413      	add	r3, r2
 80075d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075de:	881b      	ldrh	r3, [r3, #0]
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075ec:	801a      	strh	r2, [r3, #0]
 80075ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	2b3e      	cmp	r3, #62	; 0x3e
 80075fc:	d92b      	bls.n	8007656 <USB_EPStartXfer+0x11cc>
 80075fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007602:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	095b      	lsrs	r3, r3, #5
 800760c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	f003 031f 	and.w	r3, r3, #31
 8007620:	2b00      	cmp	r3, #0
 8007622:	d104      	bne.n	800762e <USB_EPStartXfer+0x11a4>
 8007624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007628:	3b01      	subs	r3, #1
 800762a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800762e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007632:	881b      	ldrh	r3, [r3, #0]
 8007634:	b29a      	uxth	r2, r3
 8007636:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800763a:	b29b      	uxth	r3, r3
 800763c:	029b      	lsls	r3, r3, #10
 800763e:	b29b      	uxth	r3, r3
 8007640:	4313      	orrs	r3, r2
 8007642:	b29b      	uxth	r3, r3
 8007644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800764c:	b29a      	uxth	r2, r3
 800764e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007652:	801a      	strh	r2, [r3, #0]
 8007654:	e069      	b.n	800772a <USB_EPStartXfer+0x12a0>
 8007656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800765a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10c      	bne.n	8007680 <USB_EPStartXfer+0x11f6>
 8007666:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800766a:	881b      	ldrh	r3, [r3, #0]
 800766c:	b29b      	uxth	r3, r3
 800766e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007676:	b29a      	uxth	r2, r3
 8007678:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800767c:	801a      	strh	r2, [r3, #0]
 800767e:	e054      	b.n	800772a <USB_EPStartXfer+0x12a0>
 8007680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007684:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	085b      	lsrs	r3, r3, #1
 800768e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d004      	beq.n	80076b0 <USB_EPStartXfer+0x1226>
 80076a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076aa:	3301      	adds	r3, #1
 80076ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80076b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076b4:	881b      	ldrh	r3, [r3, #0]
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076bc:	b29b      	uxth	r3, r3
 80076be:	029b      	lsls	r3, r3, #10
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	4313      	orrs	r3, r2
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076ca:	801a      	strh	r2, [r3, #0]
 80076cc:	e02d      	b.n	800772a <USB_EPStartXfer+0x12a0>
 80076ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	785b      	ldrb	r3, [r3, #1]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d125      	bne.n	800772a <USB_EPStartXfer+0x12a0>
 80076de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	461a      	mov	r2, r3
 80076f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80076f4:	4413      	add	r3, r2
 80076f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80076fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	011a      	lsls	r2, r3, #4
 8007708:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800770c:	4413      	add	r3, r2
 800770e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007712:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800771a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	b29a      	uxth	r2, r3
 8007724:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007728:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800772a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800772e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	69db      	ldr	r3, [r3, #28]
 8007736:	2b00      	cmp	r3, #0
 8007738:	f000 8218 	beq.w	8007b6c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800773c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007740:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800774a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	4413      	add	r3, r2
 8007756:	881b      	ldrh	r3, [r3, #0]
 8007758:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800775c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007764:	2b00      	cmp	r3, #0
 8007766:	d005      	beq.n	8007774 <USB_EPStartXfer+0x12ea>
 8007768:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800776c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10d      	bne.n	8007790 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007774:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800777c:	2b00      	cmp	r3, #0
 800777e:	f040 81f5 	bne.w	8007b6c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007782:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800778a:	2b00      	cmp	r3, #0
 800778c:	f040 81ee 	bne.w	8007b6c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007794:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800779e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4413      	add	r3, r2
 80077aa:	881b      	ldrh	r3, [r3, #0]
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80077ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	441a      	add	r2, r3
 80077d4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80077d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	8013      	strh	r3, [r2, #0]
 80077ec:	e1be      	b.n	8007b6c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80077ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	78db      	ldrb	r3, [r3, #3]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	f040 81b4 	bne.w	8007b68 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	699a      	ldr	r2, [r3, #24]
 800780c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	429a      	cmp	r2, r3
 800781a:	d917      	bls.n	800784c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800781c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800782c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	699a      	ldr	r2, [r3, #24]
 8007838:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800783c:	1ad2      	subs	r2, r2, r3
 800783e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	619a      	str	r2, [r3, #24]
 800784a:	e00e      	b.n	800786a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800784c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	699b      	ldr	r3, [r3, #24]
 8007858:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800785c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2200      	movs	r2, #0
 8007868:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800786a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800786e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	785b      	ldrb	r3, [r3, #1]
 8007876:	2b00      	cmp	r3, #0
 8007878:	f040 8085 	bne.w	8007986 <USB_EPStartXfer+0x14fc>
 800787c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007880:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800788a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800788e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007898:	b29b      	uxth	r3, r3
 800789a:	461a      	mov	r2, r3
 800789c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80078a0:	4413      	add	r3, r2
 80078a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80078a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	011a      	lsls	r2, r3, #4
 80078b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80078b8:	4413      	add	r3, r2
 80078ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078c6:	881b      	ldrh	r3, [r3, #0]
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078d4:	801a      	strh	r2, [r3, #0]
 80078d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078da:	2b3e      	cmp	r3, #62	; 0x3e
 80078dc:	d923      	bls.n	8007926 <USB_EPStartXfer+0x149c>
 80078de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078e2:	095b      	lsrs	r3, r3, #5
 80078e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80078e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ec:	f003 031f 	and.w	r3, r3, #31
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d104      	bne.n	80078fe <USB_EPStartXfer+0x1474>
 80078f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078f8:	3b01      	subs	r3, #1
 80078fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80078fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007902:	881b      	ldrh	r3, [r3, #0]
 8007904:	b29a      	uxth	r2, r3
 8007906:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800790a:	b29b      	uxth	r3, r3
 800790c:	029b      	lsls	r3, r3, #10
 800790e:	b29b      	uxth	r3, r3
 8007910:	4313      	orrs	r3, r2
 8007912:	b29b      	uxth	r3, r3
 8007914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800791c:	b29a      	uxth	r2, r3
 800791e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007922:	801a      	strh	r2, [r3, #0]
 8007924:	e060      	b.n	80079e8 <USB_EPStartXfer+0x155e>
 8007926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10c      	bne.n	8007948 <USB_EPStartXfer+0x14be>
 800792e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007932:	881b      	ldrh	r3, [r3, #0]
 8007934:	b29b      	uxth	r3, r3
 8007936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800793a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800793e:	b29a      	uxth	r2, r3
 8007940:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007944:	801a      	strh	r2, [r3, #0]
 8007946:	e04f      	b.n	80079e8 <USB_EPStartXfer+0x155e>
 8007948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800794c:	085b      	lsrs	r3, r3, #1
 800794e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007956:	f003 0301 	and.w	r3, r3, #1
 800795a:	2b00      	cmp	r3, #0
 800795c:	d004      	beq.n	8007968 <USB_EPStartXfer+0x14de>
 800795e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007962:	3301      	adds	r3, #1
 8007964:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007968:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800796c:	881b      	ldrh	r3, [r3, #0]
 800796e:	b29a      	uxth	r2, r3
 8007970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007974:	b29b      	uxth	r3, r3
 8007976:	029b      	lsls	r3, r3, #10
 8007978:	b29b      	uxth	r3, r3
 800797a:	4313      	orrs	r3, r2
 800797c:	b29a      	uxth	r2, r3
 800797e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007982:	801a      	strh	r2, [r3, #0]
 8007984:	e030      	b.n	80079e8 <USB_EPStartXfer+0x155e>
 8007986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800798a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	785b      	ldrb	r3, [r3, #1]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d128      	bne.n	80079e8 <USB_EPStartXfer+0x155e>
 8007996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800799a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80079a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	461a      	mov	r2, r3
 80079b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079ba:	4413      	add	r3, r2
 80079bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80079c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	011a      	lsls	r2, r3, #4
 80079ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079d2:	4413      	add	r3, r2
 80079d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80079e6:	801a      	strh	r2, [r3, #0]
 80079e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	785b      	ldrb	r3, [r3, #1]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f040 8085 	bne.w	8007b12 <USB_EPStartXfer+0x1688>
 8007a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007a16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	461a      	mov	r2, r3
 8007a28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007a32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	011a      	lsls	r2, r3, #4
 8007a40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a44:	4413      	add	r3, r2
 8007a46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a52:	881b      	ldrh	r3, [r3, #0]
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a60:	801a      	strh	r2, [r3, #0]
 8007a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a66:	2b3e      	cmp	r3, #62	; 0x3e
 8007a68:	d923      	bls.n	8007ab2 <USB_EPStartXfer+0x1628>
 8007a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a6e:	095b      	lsrs	r3, r3, #5
 8007a70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a78:	f003 031f 	and.w	r3, r3, #31
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d104      	bne.n	8007a8a <USB_EPStartXfer+0x1600>
 8007a80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a84:	3b01      	subs	r3, #1
 8007a86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a8e:	881b      	ldrh	r3, [r3, #0]
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	029b      	lsls	r3, r3, #10
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007aae:	801a      	strh	r2, [r3, #0]
 8007ab0:	e05c      	b.n	8007b6c <USB_EPStartXfer+0x16e2>
 8007ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d10c      	bne.n	8007ad4 <USB_EPStartXfer+0x164a>
 8007aba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007abe:	881b      	ldrh	r3, [r3, #0]
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ac6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ad0:	801a      	strh	r2, [r3, #0]
 8007ad2:	e04b      	b.n	8007b6c <USB_EPStartXfer+0x16e2>
 8007ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ad8:	085b      	lsrs	r3, r3, #1
 8007ada:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ae2:	f003 0301 	and.w	r3, r3, #1
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d004      	beq.n	8007af4 <USB_EPStartXfer+0x166a>
 8007aea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007aee:	3301      	adds	r3, #1
 8007af0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007af4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007af8:	881b      	ldrh	r3, [r3, #0]
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	029b      	lsls	r3, r3, #10
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	4313      	orrs	r3, r2
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b0e:	801a      	strh	r2, [r3, #0]
 8007b10:	e02c      	b.n	8007b6c <USB_EPStartXfer+0x16e2>
 8007b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	785b      	ldrb	r3, [r3, #1]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d124      	bne.n	8007b6c <USB_EPStartXfer+0x16e2>
 8007b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	461a      	mov	r2, r3
 8007b34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007b38:	4413      	add	r3, r2
 8007b3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	011a      	lsls	r2, r3, #4
 8007b4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007b50:	4413      	add	r3, r2
 8007b52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b64:	801a      	strh	r2, [r3, #0]
 8007b66:	e001      	b.n	8007b6c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e03a      	b.n	8007be2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b92:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007b96:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007b9a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b9e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007ba2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007ba6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007baa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	441a      	add	r2, r3
 8007bc8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	785b      	ldrb	r3, [r3, #1]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d020      	beq.n	8007c40 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4413      	add	r3, r2
 8007c08:	881b      	ldrh	r3, [r3, #0]
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c14:	81bb      	strh	r3, [r7, #12]
 8007c16:	89bb      	ldrh	r3, [r7, #12]
 8007c18:	f083 0310 	eor.w	r3, r3, #16
 8007c1c:	81bb      	strh	r3, [r7, #12]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	441a      	add	r2, r3
 8007c28:	89bb      	ldrh	r3, [r7, #12]
 8007c2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	8013      	strh	r3, [r2, #0]
 8007c3e:	e01f      	b.n	8007c80 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	881b      	ldrh	r3, [r3, #0]
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c56:	81fb      	strh	r3, [r7, #14]
 8007c58:	89fb      	ldrh	r3, [r7, #14]
 8007c5a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007c5e:	81fb      	strh	r3, [r7, #14]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	441a      	add	r2, r3
 8007c6a:	89fb      	ldrh	r3, [r7, #14]
 8007c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b087      	sub	sp, #28
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	7b1b      	ldrb	r3, [r3, #12]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f040 809d 	bne.w	8007ddc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	785b      	ldrb	r3, [r3, #1]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d04c      	beq.n	8007d44 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	4413      	add	r3, r2
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	823b      	strh	r3, [r7, #16]
 8007cb8:	8a3b      	ldrh	r3, [r7, #16]
 8007cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d01b      	beq.n	8007cfa <USB_EPClearStall+0x6c>
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	4413      	add	r3, r2
 8007ccc:	881b      	ldrh	r3, [r3, #0]
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd8:	81fb      	strh	r3, [r7, #14]
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	441a      	add	r2, r3
 8007ce4:	89fb      	ldrh	r3, [r7, #14]
 8007ce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cf2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	78db      	ldrb	r3, [r3, #3]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d06c      	beq.n	8007ddc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	881b      	ldrh	r3, [r3, #0]
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d18:	81bb      	strh	r3, [r7, #12]
 8007d1a:	89bb      	ldrh	r3, [r7, #12]
 8007d1c:	f083 0320 	eor.w	r3, r3, #32
 8007d20:	81bb      	strh	r3, [r7, #12]
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	441a      	add	r2, r3
 8007d2c:	89bb      	ldrh	r3, [r7, #12]
 8007d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	8013      	strh	r3, [r2, #0]
 8007d42:	e04b      	b.n	8007ddc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	881b      	ldrh	r3, [r3, #0]
 8007d50:	82fb      	strh	r3, [r7, #22]
 8007d52:	8afb      	ldrh	r3, [r7, #22]
 8007d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d01b      	beq.n	8007d94 <USB_EPClearStall+0x106>
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	4413      	add	r3, r2
 8007d66:	881b      	ldrh	r3, [r3, #0]
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d72:	82bb      	strh	r3, [r7, #20]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	441a      	add	r2, r3
 8007d7e:	8abb      	ldrh	r3, [r7, #20]
 8007d80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	4413      	add	r3, r2
 8007d9e:	881b      	ldrh	r3, [r3, #0]
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007daa:	827b      	strh	r3, [r7, #18]
 8007dac:	8a7b      	ldrh	r3, [r7, #18]
 8007dae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007db2:	827b      	strh	r3, [r7, #18]
 8007db4:	8a7b      	ldrh	r3, [r7, #18]
 8007db6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007dba:	827b      	strh	r3, [r7, #18]
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	441a      	add	r2, r3
 8007dc6:	8a7b      	ldrh	r3, [r7, #18]
 8007dc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	371c      	adds	r7, #28
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b083      	sub	sp, #12
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
 8007df2:	460b      	mov	r3, r1
 8007df4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007df6:	78fb      	ldrb	r3, [r7, #3]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d103      	bne.n	8007e04 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2280      	movs	r2, #128	; 0x80
 8007e00:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	370c      	adds	r7, #12
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b083      	sub	sp, #12
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3714      	adds	r7, #20
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b08b      	sub	sp, #44	; 0x2c
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	4611      	mov	r1, r2
 8007e54:	461a      	mov	r2, r3
 8007e56:	460b      	mov	r3, r1
 8007e58:	80fb      	strh	r3, [r7, #6]
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007e5e:	88bb      	ldrh	r3, [r7, #4]
 8007e60:	3301      	adds	r3, #1
 8007e62:	085b      	lsrs	r3, r3, #1
 8007e64:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e6e:	88fb      	ldrh	r3, [r7, #6]
 8007e70:	005a      	lsls	r2, r3, #1
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	4413      	add	r3, r2
 8007e76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e7a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8007e80:	e01e      	b.n	8007ec0 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	021b      	lsls	r3, r3, #8
 8007e90:	b21a      	sxth	r2, r3
 8007e92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	b21b      	sxth	r3, r3
 8007e9a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007e9c:	6a3b      	ldr	r3, [r7, #32]
 8007e9e:	8a7a      	ldrh	r2, [r7, #18]
 8007ea0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007ea2:	6a3b      	ldr	r3, [r7, #32]
 8007ea4:	3302      	adds	r3, #2
 8007ea6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007ea8:	6a3b      	ldr	r3, [r7, #32]
 8007eaa:	3302      	adds	r3, #2
 8007eac:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1dd      	bne.n	8007e82 <USB_WritePMA+0x3a>
  }
}
 8007ec6:	bf00      	nop
 8007ec8:	bf00      	nop
 8007eca:	372c      	adds	r7, #44	; 0x2c
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b08b      	sub	sp, #44	; 0x2c
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	4611      	mov	r1, r2
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	80fb      	strh	r3, [r7, #6]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007eea:	88bb      	ldrh	r3, [r7, #4]
 8007eec:	085b      	lsrs	r3, r3, #1
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007efa:	88fb      	ldrh	r3, [r7, #6]
 8007efc:	005a      	lsls	r2, r3, #1
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f06:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8007f0c:	e01b      	b.n	8007f46 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	881b      	ldrh	r3, [r3, #0]
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007f16:	6a3b      	ldr	r3, [r7, #32]
 8007f18:	3302      	adds	r3, #2
 8007f1a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	b2da      	uxtb	r2, r3
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	3301      	adds	r3, #1
 8007f28:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	0a1b      	lsrs	r3, r3, #8
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	3301      	adds	r3, #1
 8007f38:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007f3a:	6a3b      	ldr	r3, [r7, #32]
 8007f3c:	3302      	adds	r3, #2
 8007f3e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	3b01      	subs	r3, #1
 8007f44:	627b      	str	r3, [r7, #36]	; 0x24
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1e0      	bne.n	8007f0e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007f4c:	88bb      	ldrh	r3, [r7, #4]
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d007      	beq.n	8007f68 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007f58:	6a3b      	ldr	r3, [r7, #32]
 8007f5a:	881b      	ldrh	r3, [r3, #0]
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	701a      	strb	r2, [r3, #0]
  }
}
 8007f68:	bf00      	nop
 8007f6a:	372c      	adds	r7, #44	; 0x2c
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <constructor>:
#include "helper.h"

Pin_struct constructor(GPIO_TypeDef* gpio,uint16_t cislo)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b087      	sub	sp, #28
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	4613      	mov	r3, r2
 8007f80:	80fb      	strh	r3, [r7, #6]
	Pin_struct ret;
	ret.sbernice=gpio;
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	613b      	str	r3, [r7, #16]
	ret.pin=cislo;
 8007f86:	88fb      	ldrh	r3, [r7, #6]
 8007f88:	82bb      	strh	r3, [r7, #20]

	return ret;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	f107 0310 	add.w	r3, r7, #16
 8007f92:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007f96:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	371c      	adds	r7, #28
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr

08007fa6 <pisPin>:

void pisPin(Pin_struct kam,_Bool hodnota)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b084      	sub	sp, #16
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	f107 0308 	add.w	r3, r7, #8
 8007fb0:	e883 0003 	stmia.w	r3, {r0, r1}
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(kam.sbernice,kam.pin,hodnota);
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	89b9      	ldrh	r1, [r7, #12]
 8007fbc:	79fa      	ldrb	r2, [r7, #7]
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7f9 fde8 	bl	8001b94 <HAL_GPIO_WritePin>
}
 8007fc4:	bf00      	nop
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	7c1b      	ldrb	r3, [r3, #16]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d115      	bne.n	8008010 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fe8:	2202      	movs	r2, #2
 8007fea:	2181      	movs	r1, #129	; 0x81
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f001 fe62 	bl	8009cb6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007ff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ffc:	2202      	movs	r2, #2
 8007ffe:	2101      	movs	r1, #1
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f001 fe58 	bl	8009cb6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800800e:	e012      	b.n	8008036 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008010:	2340      	movs	r3, #64	; 0x40
 8008012:	2202      	movs	r2, #2
 8008014:	2181      	movs	r1, #129	; 0x81
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f001 fe4d 	bl	8009cb6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008022:	2340      	movs	r3, #64	; 0x40
 8008024:	2202      	movs	r2, #2
 8008026:	2101      	movs	r1, #1
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f001 fe44 	bl	8009cb6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2201      	movs	r2, #1
 8008032:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008036:	2308      	movs	r3, #8
 8008038:	2203      	movs	r2, #3
 800803a:	2182      	movs	r1, #130	; 0x82
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f001 fe3a 	bl	8009cb6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2201      	movs	r2, #1
 8008046:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008048:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800804c:	f001 ff5c 	bl	8009f08 <USBD_static_malloc>
 8008050:	4602      	mov	r2, r0
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800805e:	2b00      	cmp	r3, #0
 8008060:	d102      	bne.n	8008068 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008062:	2301      	movs	r3, #1
 8008064:	73fb      	strb	r3, [r7, #15]
 8008066:	e026      	b.n	80080b6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800806e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	2200      	movs	r2, #0
 800807e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	2200      	movs	r2, #0
 8008086:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	7c1b      	ldrb	r3, [r3, #16]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d109      	bne.n	80080a6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008098:	f44f 7300 	mov.w	r3, #512	; 0x200
 800809c:	2101      	movs	r1, #1
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f001 fefb 	bl	8009e9a <USBD_LL_PrepareReceive>
 80080a4:	e007      	b.n	80080b6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080ac:	2340      	movs	r3, #64	; 0x40
 80080ae:	2101      	movs	r1, #1
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f001 fef2 	bl	8009e9a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80080b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	460b      	mov	r3, r1
 80080ca:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80080cc:	2300      	movs	r3, #0
 80080ce:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80080d0:	2181      	movs	r1, #129	; 0x81
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f001 fe15 	bl	8009d02 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80080de:	2101      	movs	r1, #1
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f001 fe0e 	bl	8009d02 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80080ee:	2182      	movs	r1, #130	; 0x82
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f001 fe06 	bl	8009d02 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00e      	beq.n	8008124 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008116:	4618      	mov	r0, r3
 8008118:	f001 ff04 	bl	8009f24 <USBD_static_free>
    pdev->pClassData = NULL;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008124:	7bfb      	ldrb	r3, [r7, #15]
}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b086      	sub	sp, #24
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
 8008136:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800813e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008140:	2300      	movs	r3, #0
 8008142:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008144:	2300      	movs	r3, #0
 8008146:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008148:	2300      	movs	r3, #0
 800814a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008154:	2b00      	cmp	r3, #0
 8008156:	d039      	beq.n	80081cc <USBD_CDC_Setup+0x9e>
 8008158:	2b20      	cmp	r3, #32
 800815a:	d17f      	bne.n	800825c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	88db      	ldrh	r3, [r3, #6]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d029      	beq.n	80081b8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	b25b      	sxtb	r3, r3
 800816a:	2b00      	cmp	r3, #0
 800816c:	da11      	bge.n	8008192 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800817a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800817c:	683a      	ldr	r2, [r7, #0]
 800817e:	88d2      	ldrh	r2, [r2, #6]
 8008180:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008182:	6939      	ldr	r1, [r7, #16]
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	88db      	ldrh	r3, [r3, #6]
 8008188:	461a      	mov	r2, r3
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f001 f9e3 	bl	8009556 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008190:	e06b      	b.n	800826a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	785a      	ldrb	r2, [r3, #1]
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	88db      	ldrh	r3, [r3, #6]
 80081a0:	b2da      	uxtb	r2, r3
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80081a8:	6939      	ldr	r1, [r7, #16]
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	88db      	ldrh	r3, [r3, #6]
 80081ae:	461a      	mov	r2, r3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f001 f9fe 	bl	80095b2 <USBD_CtlPrepareRx>
      break;
 80081b6:	e058      	b.n	800826a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	683a      	ldr	r2, [r7, #0]
 80081c2:	7850      	ldrb	r0, [r2, #1]
 80081c4:	2200      	movs	r2, #0
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	4798      	blx	r3
      break;
 80081ca:	e04e      	b.n	800826a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	785b      	ldrb	r3, [r3, #1]
 80081d0:	2b0b      	cmp	r3, #11
 80081d2:	d02e      	beq.n	8008232 <USBD_CDC_Setup+0x104>
 80081d4:	2b0b      	cmp	r3, #11
 80081d6:	dc38      	bgt.n	800824a <USBD_CDC_Setup+0x11c>
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d002      	beq.n	80081e2 <USBD_CDC_Setup+0xb4>
 80081dc:	2b0a      	cmp	r3, #10
 80081de:	d014      	beq.n	800820a <USBD_CDC_Setup+0xdc>
 80081e0:	e033      	b.n	800824a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081e8:	2b03      	cmp	r3, #3
 80081ea:	d107      	bne.n	80081fc <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80081ec:	f107 030c 	add.w	r3, r7, #12
 80081f0:	2202      	movs	r2, #2
 80081f2:	4619      	mov	r1, r3
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f001 f9ae 	bl	8009556 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081fa:	e02e      	b.n	800825a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f001 f93e 	bl	8009480 <USBD_CtlError>
            ret = USBD_FAIL;
 8008204:	2302      	movs	r3, #2
 8008206:	75fb      	strb	r3, [r7, #23]
          break;
 8008208:	e027      	b.n	800825a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008210:	2b03      	cmp	r3, #3
 8008212:	d107      	bne.n	8008224 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008214:	f107 030f 	add.w	r3, r7, #15
 8008218:	2201      	movs	r2, #1
 800821a:	4619      	mov	r1, r3
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f001 f99a 	bl	8009556 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008222:	e01a      	b.n	800825a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f001 f92a 	bl	8009480 <USBD_CtlError>
            ret = USBD_FAIL;
 800822c:	2302      	movs	r3, #2
 800822e:	75fb      	strb	r3, [r7, #23]
          break;
 8008230:	e013      	b.n	800825a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008238:	2b03      	cmp	r3, #3
 800823a:	d00d      	beq.n	8008258 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f001 f91e 	bl	8009480 <USBD_CtlError>
            ret = USBD_FAIL;
 8008244:	2302      	movs	r3, #2
 8008246:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008248:	e006      	b.n	8008258 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800824a:	6839      	ldr	r1, [r7, #0]
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f001 f917 	bl	8009480 <USBD_CtlError>
          ret = USBD_FAIL;
 8008252:	2302      	movs	r3, #2
 8008254:	75fb      	strb	r3, [r7, #23]
          break;
 8008256:	e000      	b.n	800825a <USBD_CDC_Setup+0x12c>
          break;
 8008258:	bf00      	nop
      }
      break;
 800825a:	e006      	b.n	800826a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800825c:	6839      	ldr	r1, [r7, #0]
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f001 f90e 	bl	8009480 <USBD_CtlError>
      ret = USBD_FAIL;
 8008264:	2302      	movs	r3, #2
 8008266:	75fb      	strb	r3, [r7, #23]
      break;
 8008268:	bf00      	nop
  }

  return ret;
 800826a:	7dfb      	ldrb	r3, [r7, #23]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3718      	adds	r7, #24
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	460b      	mov	r3, r1
 800827e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008286:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800828e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008296:	2b00      	cmp	r3, #0
 8008298:	d03a      	beq.n	8008310 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800829a:	78fa      	ldrb	r2, [r7, #3]
 800829c:	6879      	ldr	r1, [r7, #4]
 800829e:	4613      	mov	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	4413      	add	r3, r2
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	440b      	add	r3, r1
 80082a8:	331c      	adds	r3, #28
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d029      	beq.n	8008304 <USBD_CDC_DataIn+0x90>
 80082b0:	78fa      	ldrb	r2, [r7, #3]
 80082b2:	6879      	ldr	r1, [r7, #4]
 80082b4:	4613      	mov	r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4413      	add	r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	440b      	add	r3, r1
 80082be:	331c      	adds	r3, #28
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	78f9      	ldrb	r1, [r7, #3]
 80082c4:	68b8      	ldr	r0, [r7, #8]
 80082c6:	460b      	mov	r3, r1
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	440b      	add	r3, r1
 80082cc:	00db      	lsls	r3, r3, #3
 80082ce:	4403      	add	r3, r0
 80082d0:	3338      	adds	r3, #56	; 0x38
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80082d8:	fb01 f303 	mul.w	r3, r1, r3
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d110      	bne.n	8008304 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80082e2:	78fa      	ldrb	r2, [r7, #3]
 80082e4:	6879      	ldr	r1, [r7, #4]
 80082e6:	4613      	mov	r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	4413      	add	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	440b      	add	r3, r1
 80082f0:	331c      	adds	r3, #28
 80082f2:	2200      	movs	r2, #0
 80082f4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80082f6:	78f9      	ldrb	r1, [r7, #3]
 80082f8:	2300      	movs	r3, #0
 80082fa:	2200      	movs	r2, #0
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f001 fda9 	bl	8009e54 <USBD_LL_Transmit>
 8008302:	e003      	b.n	800830c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2200      	movs	r2, #0
 8008308:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800830c:	2300      	movs	r3, #0
 800830e:	e000      	b.n	8008312 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008310:	2302      	movs	r3, #2
  }
}
 8008312:	4618      	mov	r0, r3
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b084      	sub	sp, #16
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	460b      	mov	r3, r1
 8008324:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800832c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800832e:	78fb      	ldrb	r3, [r7, #3]
 8008330:	4619      	mov	r1, r3
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f001 fdd4 	bl	8009ee0 <USBD_LL_GetRxDataSize>
 8008338:	4602      	mov	r2, r0
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00d      	beq.n	8008366 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800835e:	4611      	mov	r1, r2
 8008360:	4798      	blx	r3

    return USBD_OK;
 8008362:	2300      	movs	r3, #0
 8008364:	e000      	b.n	8008368 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008366:	2302      	movs	r3, #2
  }
}
 8008368:	4618      	mov	r0, r3
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800837e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008386:	2b00      	cmp	r3, #0
 8008388:	d015      	beq.n	80083b6 <USBD_CDC_EP0_RxReady+0x46>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008390:	2bff      	cmp	r3, #255	; 0xff
 8008392:	d010      	beq.n	80083b6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80083a2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80083aa:	b292      	uxth	r2, r2
 80083ac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	22ff      	movs	r2, #255	; 0xff
 80083b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2243      	movs	r2, #67	; 0x43
 80083cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80083ce:	4b03      	ldr	r3, [pc, #12]	; (80083dc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	20000094 	.word	0x20000094

080083e0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2243      	movs	r2, #67	; 0x43
 80083ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80083ee:	4b03      	ldr	r3, [pc, #12]	; (80083fc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	20000050 	.word	0x20000050

08008400 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2243      	movs	r2, #67	; 0x43
 800840c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800840e:	4b03      	ldr	r3, [pc, #12]	; (800841c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008410:	4618      	mov	r0, r3
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr
 800841c:	200000d8 	.word	0x200000d8

08008420 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	220a      	movs	r2, #10
 800842c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800842e:	4b03      	ldr	r3, [pc, #12]	; (800843c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008430:	4618      	mov	r0, r3
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr
 800843c:	2000000c 	.word	0x2000000c

08008440 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008440:	b480      	push	{r7}
 8008442:	b085      	sub	sp, #20
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800844a:	2302      	movs	r3, #2
 800844c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d005      	beq.n	8008460 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800845c:	2300      	movs	r3, #0
 800845e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008460:	7bfb      	ldrb	r3, [r7, #15]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3714      	adds	r7, #20
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr

0800846e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800846e:	b480      	push	{r7}
 8008470:	b087      	sub	sp, #28
 8008472:	af00      	add	r7, sp, #0
 8008474:	60f8      	str	r0, [r7, #12]
 8008476:	60b9      	str	r1, [r7, #8]
 8008478:	4613      	mov	r3, r2
 800847a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008482:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800848c:	88fa      	ldrh	r2, [r7, #6]
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	371c      	adds	r7, #28
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr

080084a2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b085      	sub	sp, #20
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
 80084aa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084b2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr

080084ca <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b084      	sub	sp, #16
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084d8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d017      	beq.n	8008514 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	7c1b      	ldrb	r3, [r3, #16]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d109      	bne.n	8008500 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084f6:	2101      	movs	r1, #1
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f001 fcce 	bl	8009e9a <USBD_LL_PrepareReceive>
 80084fe:	e007      	b.n	8008510 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008506:	2340      	movs	r3, #64	; 0x40
 8008508:	2101      	movs	r1, #1
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f001 fcc5 	bl	8009e9a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008510:	2300      	movs	r3, #0
 8008512:	e000      	b.n	8008516 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008514:	2302      	movs	r3, #2
  }
}
 8008516:	4618      	mov	r0, r3
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b084      	sub	sp, #16
 8008522:	af00      	add	r7, sp, #0
 8008524:	60f8      	str	r0, [r7, #12]
 8008526:	60b9      	str	r1, [r7, #8]
 8008528:	4613      	mov	r3, r2
 800852a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008532:	2302      	movs	r3, #2
 8008534:	e01a      	b.n	800856c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800853c:	2b00      	cmp	r3, #0
 800853e:	d003      	beq.n	8008548 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d003      	beq.n	8008556 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2201      	movs	r2, #1
 800855a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	79fa      	ldrb	r2, [r7, #7]
 8008562:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f001 fb31 	bl	8009bcc <USBD_LL_Init>

  return USBD_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800857e:	2300      	movs	r3, #0
 8008580:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d006      	beq.n	8008596 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	683a      	ldr	r2, [r7, #0]
 800858c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008590:	2300      	movs	r3, #0
 8008592:	73fb      	strb	r3, [r7, #15]
 8008594:	e001      	b.n	800859a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008596:	2302      	movs	r3, #2
 8008598:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800859a:	7bfb      	ldrb	r3, [r7, #15]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f001 fb65 	bl	8009c80 <USBD_LL_Start>

  return USBD_OK;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	370c      	adds	r7, #12
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b084      	sub	sp, #16
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
 80085de:	460b      	mov	r3, r1
 80085e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80085e2:	2302      	movs	r3, #2
 80085e4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00c      	beq.n	800860a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	78fa      	ldrb	r2, [r7, #3]
 80085fa:	4611      	mov	r1, r2
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	4798      	blx	r3
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d101      	bne.n	800860a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008606:	2300      	movs	r3, #0
 8008608:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800860a:	7bfb      	ldrb	r3, [r7, #15]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	460b      	mov	r3, r1
 800861e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	78fa      	ldrb	r2, [r7, #3]
 800862a:	4611      	mov	r1, r2
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	4798      	blx	r3

  return USBD_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b082      	sub	sp, #8
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800864a:	6839      	ldr	r1, [r7, #0]
 800864c:	4618      	mov	r0, r3
 800864e:	f000 feda 	bl	8009406 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2201      	movs	r2, #1
 8008656:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008660:	461a      	mov	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800866e:	f003 031f 	and.w	r3, r3, #31
 8008672:	2b02      	cmp	r3, #2
 8008674:	d016      	beq.n	80086a4 <USBD_LL_SetupStage+0x6a>
 8008676:	2b02      	cmp	r3, #2
 8008678:	d81c      	bhi.n	80086b4 <USBD_LL_SetupStage+0x7a>
 800867a:	2b00      	cmp	r3, #0
 800867c:	d002      	beq.n	8008684 <USBD_LL_SetupStage+0x4a>
 800867e:	2b01      	cmp	r3, #1
 8008680:	d008      	beq.n	8008694 <USBD_LL_SetupStage+0x5a>
 8008682:	e017      	b.n	80086b4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800868a:	4619      	mov	r1, r3
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f9cd 	bl	8008a2c <USBD_StdDevReq>
      break;
 8008692:	e01a      	b.n	80086ca <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800869a:	4619      	mov	r1, r3
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fa2f 	bl	8008b00 <USBD_StdItfReq>
      break;
 80086a2:	e012      	b.n	80086ca <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80086aa:	4619      	mov	r1, r3
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fa6f 	bl	8008b90 <USBD_StdEPReq>
      break;
 80086b2:	e00a      	b.n	80086ca <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80086ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	4619      	mov	r1, r3
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f001 fb3c 	bl	8009d40 <USBD_LL_StallEP>
      break;
 80086c8:	bf00      	nop
  }

  return USBD_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b086      	sub	sp, #24
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	460b      	mov	r3, r1
 80086de:	607a      	str	r2, [r7, #4]
 80086e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80086e2:	7afb      	ldrb	r3, [r7, #11]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d14b      	bne.n	8008780 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80086ee:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086f6:	2b03      	cmp	r3, #3
 80086f8:	d134      	bne.n	8008764 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	68da      	ldr	r2, [r3, #12]
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	429a      	cmp	r2, r3
 8008704:	d919      	bls.n	800873a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	68da      	ldr	r2, [r3, #12]
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	1ad2      	subs	r2, r2, r3
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	68da      	ldr	r2, [r3, #12]
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800871c:	429a      	cmp	r2, r3
 800871e:	d203      	bcs.n	8008728 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008724:	b29b      	uxth	r3, r3
 8008726:	e002      	b.n	800872e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800872c:	b29b      	uxth	r3, r3
 800872e:	461a      	mov	r2, r3
 8008730:	6879      	ldr	r1, [r7, #4]
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f000 ff5b 	bl	80095ee <USBD_CtlContinueRx>
 8008738:	e038      	b.n	80087ac <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00a      	beq.n	800875c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800874c:	2b03      	cmp	r3, #3
 800874e:	d105      	bne.n	800875c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008756:	691b      	ldr	r3, [r3, #16]
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f000 ff58 	bl	8009612 <USBD_CtlSendStatus>
 8008762:	e023      	b.n	80087ac <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800876a:	2b05      	cmp	r3, #5
 800876c:	d11e      	bne.n	80087ac <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008776:	2100      	movs	r1, #0
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f001 fae1 	bl	8009d40 <USBD_LL_StallEP>
 800877e:	e015      	b.n	80087ac <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008786:	699b      	ldr	r3, [r3, #24]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00d      	beq.n	80087a8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008792:	2b03      	cmp	r3, #3
 8008794:	d108      	bne.n	80087a8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	7afa      	ldrb	r2, [r7, #11]
 80087a0:	4611      	mov	r1, r2
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	4798      	blx	r3
 80087a6:	e001      	b.n	80087ac <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80087a8:	2302      	movs	r3, #2
 80087aa:	e000      	b.n	80087ae <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3718      	adds	r7, #24
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b086      	sub	sp, #24
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	60f8      	str	r0, [r7, #12]
 80087be:	460b      	mov	r3, r1
 80087c0:	607a      	str	r2, [r7, #4]
 80087c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80087c4:	7afb      	ldrb	r3, [r7, #11]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d17f      	bne.n	80088ca <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	3314      	adds	r3, #20
 80087ce:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d15c      	bne.n	8008894 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	68da      	ldr	r2, [r3, #12]
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d915      	bls.n	8008812 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	68da      	ldr	r2, [r3, #12]
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	1ad2      	subs	r2, r2, r3
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	461a      	mov	r2, r3
 80087fc:	6879      	ldr	r1, [r7, #4]
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f000 fec5 	bl	800958e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008804:	2300      	movs	r3, #0
 8008806:	2200      	movs	r2, #0
 8008808:	2100      	movs	r1, #0
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f001 fb45 	bl	8009e9a <USBD_LL_PrepareReceive>
 8008810:	e04e      	b.n	80088b0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	6912      	ldr	r2, [r2, #16]
 800881a:	fbb3 f1f2 	udiv	r1, r3, r2
 800881e:	fb01 f202 	mul.w	r2, r1, r2
 8008822:	1a9b      	subs	r3, r3, r2
 8008824:	2b00      	cmp	r3, #0
 8008826:	d11c      	bne.n	8008862 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	689a      	ldr	r2, [r3, #8]
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008830:	429a      	cmp	r2, r3
 8008832:	d316      	bcc.n	8008862 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	689a      	ldr	r2, [r3, #8]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800883e:	429a      	cmp	r2, r3
 8008840:	d20f      	bcs.n	8008862 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008842:	2200      	movs	r2, #0
 8008844:	2100      	movs	r1, #0
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f000 fea1 	bl	800958e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008854:	2300      	movs	r3, #0
 8008856:	2200      	movs	r2, #0
 8008858:	2100      	movs	r1, #0
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f001 fb1d 	bl	8009e9a <USBD_LL_PrepareReceive>
 8008860:	e026      	b.n	80088b0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00a      	beq.n	8008884 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008874:	2b03      	cmp	r3, #3
 8008876:	d105      	bne.n	8008884 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008884:	2180      	movs	r1, #128	; 0x80
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f001 fa5a 	bl	8009d40 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f000 fed3 	bl	8009638 <USBD_CtlReceiveStatus>
 8008892:	e00d      	b.n	80088b0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800889a:	2b04      	cmp	r3, #4
 800889c:	d004      	beq.n	80088a8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d103      	bne.n	80088b0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80088a8:	2180      	movs	r1, #128	; 0x80
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	f001 fa48 	bl	8009d40 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d11d      	bne.n	80088f6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f7ff fe80 	bl	80085c0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80088c8:	e015      	b.n	80088f6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088d0:	695b      	ldr	r3, [r3, #20]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00d      	beq.n	80088f2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80088dc:	2b03      	cmp	r3, #3
 80088de:	d108      	bne.n	80088f2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088e6:	695b      	ldr	r3, [r3, #20]
 80088e8:	7afa      	ldrb	r2, [r7, #11]
 80088ea:	4611      	mov	r1, r2
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	4798      	blx	r3
 80088f0:	e001      	b.n	80088f6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80088f2:	2302      	movs	r3, #2
 80088f4:	e000      	b.n	80088f8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3718      	adds	r7, #24
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008908:	2340      	movs	r3, #64	; 0x40
 800890a:	2200      	movs	r2, #0
 800890c:	2100      	movs	r1, #0
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f001 f9d1 	bl	8009cb6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2240      	movs	r2, #64	; 0x40
 8008920:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008924:	2340      	movs	r3, #64	; 0x40
 8008926:	2200      	movs	r2, #0
 8008928:	2180      	movs	r1, #128	; 0x80
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f001 f9c3 	bl	8009cb6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2240      	movs	r2, #64	; 0x40
 800893a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008960:	2b00      	cmp	r3, #0
 8008962:	d009      	beq.n	8008978 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	6852      	ldr	r2, [r2, #4]
 8008970:	b2d2      	uxtb	r2, r2
 8008972:	4611      	mov	r1, r2
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	4798      	blx	r3
  }

  return USBD_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008982:	b480      	push	{r7}
 8008984:	b083      	sub	sp, #12
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
 800898a:	460b      	mov	r3, r1
 800898c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	78fa      	ldrb	r2, [r7, #3]
 8008992:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr

080089a2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80089a2:	b480      	push	{r7}
 80089a4:	b083      	sub	sp, #12
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2204      	movs	r2, #4
 80089ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089da:	2b04      	cmp	r3, #4
 80089dc:	d105      	bne.n	80089ea <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a06:	2b03      	cmp	r3, #3
 8008a08:	d10b      	bne.n	8008a22 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a10:	69db      	ldr	r3, [r3, #28]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d005      	beq.n	8008a22 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a1c:	69db      	ldr	r3, [r3, #28]
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3708      	adds	r7, #8
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a36:	2300      	movs	r3, #0
 8008a38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a42:	2b40      	cmp	r3, #64	; 0x40
 8008a44:	d005      	beq.n	8008a52 <USBD_StdDevReq+0x26>
 8008a46:	2b40      	cmp	r3, #64	; 0x40
 8008a48:	d84f      	bhi.n	8008aea <USBD_StdDevReq+0xbe>
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d009      	beq.n	8008a62 <USBD_StdDevReq+0x36>
 8008a4e:	2b20      	cmp	r3, #32
 8008a50:	d14b      	bne.n	8008aea <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	4798      	blx	r3
      break;
 8008a60:	e048      	b.n	8008af4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	785b      	ldrb	r3, [r3, #1]
 8008a66:	2b09      	cmp	r3, #9
 8008a68:	d839      	bhi.n	8008ade <USBD_StdDevReq+0xb2>
 8008a6a:	a201      	add	r2, pc, #4	; (adr r2, 8008a70 <USBD_StdDevReq+0x44>)
 8008a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a70:	08008ac1 	.word	0x08008ac1
 8008a74:	08008ad5 	.word	0x08008ad5
 8008a78:	08008adf 	.word	0x08008adf
 8008a7c:	08008acb 	.word	0x08008acb
 8008a80:	08008adf 	.word	0x08008adf
 8008a84:	08008aa3 	.word	0x08008aa3
 8008a88:	08008a99 	.word	0x08008a99
 8008a8c:	08008adf 	.word	0x08008adf
 8008a90:	08008ab7 	.word	0x08008ab7
 8008a94:	08008aad 	.word	0x08008aad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a98:	6839      	ldr	r1, [r7, #0]
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f9dc 	bl	8008e58 <USBD_GetDescriptor>
          break;
 8008aa0:	e022      	b.n	8008ae8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fb3f 	bl	8009128 <USBD_SetAddress>
          break;
 8008aaa:	e01d      	b.n	8008ae8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008aac:	6839      	ldr	r1, [r7, #0]
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fb7e 	bl	80091b0 <USBD_SetConfig>
          break;
 8008ab4:	e018      	b.n	8008ae8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fc07 	bl	80092cc <USBD_GetConfig>
          break;
 8008abe:	e013      	b.n	8008ae8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008ac0:	6839      	ldr	r1, [r7, #0]
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 fc37 	bl	8009336 <USBD_GetStatus>
          break;
 8008ac8:	e00e      	b.n	8008ae8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008aca:	6839      	ldr	r1, [r7, #0]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 fc65 	bl	800939c <USBD_SetFeature>
          break;
 8008ad2:	e009      	b.n	8008ae8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fc74 	bl	80093c4 <USBD_ClrFeature>
          break;
 8008adc:	e004      	b.n	8008ae8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008ade:	6839      	ldr	r1, [r7, #0]
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 fccd 	bl	8009480 <USBD_CtlError>
          break;
 8008ae6:	bf00      	nop
      }
      break;
 8008ae8:	e004      	b.n	8008af4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fcc7 	bl	8009480 <USBD_CtlError>
      break;
 8008af2:	bf00      	nop
  }

  return ret;
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop

08008b00 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b16:	2b40      	cmp	r3, #64	; 0x40
 8008b18:	d005      	beq.n	8008b26 <USBD_StdItfReq+0x26>
 8008b1a:	2b40      	cmp	r3, #64	; 0x40
 8008b1c:	d82e      	bhi.n	8008b7c <USBD_StdItfReq+0x7c>
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d001      	beq.n	8008b26 <USBD_StdItfReq+0x26>
 8008b22:	2b20      	cmp	r3, #32
 8008b24:	d12a      	bne.n	8008b7c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d81d      	bhi.n	8008b6e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	889b      	ldrh	r3, [r3, #4]
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d813      	bhi.n	8008b64 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	6839      	ldr	r1, [r7, #0]
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	4798      	blx	r3
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	88db      	ldrh	r3, [r3, #6]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d110      	bne.n	8008b78 <USBD_StdItfReq+0x78>
 8008b56:	7bfb      	ldrb	r3, [r7, #15]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d10d      	bne.n	8008b78 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fd58 	bl	8009612 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b62:	e009      	b.n	8008b78 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008b64:	6839      	ldr	r1, [r7, #0]
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 fc8a 	bl	8009480 <USBD_CtlError>
          break;
 8008b6c:	e004      	b.n	8008b78 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008b6e:	6839      	ldr	r1, [r7, #0]
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fc85 	bl	8009480 <USBD_CtlError>
          break;
 8008b76:	e000      	b.n	8008b7a <USBD_StdItfReq+0x7a>
          break;
 8008b78:	bf00      	nop
      }
      break;
 8008b7a:	e004      	b.n	8008b86 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008b7c:	6839      	ldr	r1, [r7, #0]
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 fc7e 	bl	8009480 <USBD_CtlError>
      break;
 8008b84:	bf00      	nop
  }

  return USBD_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	889b      	ldrh	r3, [r3, #4]
 8008ba2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bac:	2b40      	cmp	r3, #64	; 0x40
 8008bae:	d007      	beq.n	8008bc0 <USBD_StdEPReq+0x30>
 8008bb0:	2b40      	cmp	r3, #64	; 0x40
 8008bb2:	f200 8146 	bhi.w	8008e42 <USBD_StdEPReq+0x2b2>
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00a      	beq.n	8008bd0 <USBD_StdEPReq+0x40>
 8008bba:	2b20      	cmp	r3, #32
 8008bbc:	f040 8141 	bne.w	8008e42 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	6839      	ldr	r1, [r7, #0]
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	4798      	blx	r3
      break;
 8008bce:	e13d      	b.n	8008e4c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bd8:	2b20      	cmp	r3, #32
 8008bda:	d10a      	bne.n	8008bf2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	6839      	ldr	r1, [r7, #0]
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	4798      	blx	r3
 8008bea:	4603      	mov	r3, r0
 8008bec:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008bee:	7bfb      	ldrb	r3, [r7, #15]
 8008bf0:	e12d      	b.n	8008e4e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	785b      	ldrb	r3, [r3, #1]
 8008bf6:	2b03      	cmp	r3, #3
 8008bf8:	d007      	beq.n	8008c0a <USBD_StdEPReq+0x7a>
 8008bfa:	2b03      	cmp	r3, #3
 8008bfc:	f300 811b 	bgt.w	8008e36 <USBD_StdEPReq+0x2a6>
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d072      	beq.n	8008cea <USBD_StdEPReq+0x15a>
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d03a      	beq.n	8008c7e <USBD_StdEPReq+0xee>
 8008c08:	e115      	b.n	8008e36 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d002      	beq.n	8008c1a <USBD_StdEPReq+0x8a>
 8008c14:	2b03      	cmp	r3, #3
 8008c16:	d015      	beq.n	8008c44 <USBD_StdEPReq+0xb4>
 8008c18:	e02b      	b.n	8008c72 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c1a:	7bbb      	ldrb	r3, [r7, #14]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00c      	beq.n	8008c3a <USBD_StdEPReq+0xaa>
 8008c20:	7bbb      	ldrb	r3, [r7, #14]
 8008c22:	2b80      	cmp	r3, #128	; 0x80
 8008c24:	d009      	beq.n	8008c3a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008c26:	7bbb      	ldrb	r3, [r7, #14]
 8008c28:	4619      	mov	r1, r3
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f001 f888 	bl	8009d40 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008c30:	2180      	movs	r1, #128	; 0x80
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f001 f884 	bl	8009d40 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c38:	e020      	b.n	8008c7c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008c3a:	6839      	ldr	r1, [r7, #0]
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fc1f 	bl	8009480 <USBD_CtlError>
              break;
 8008c42:	e01b      	b.n	8008c7c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	885b      	ldrh	r3, [r3, #2]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d10e      	bne.n	8008c6a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008c4c:	7bbb      	ldrb	r3, [r7, #14]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00b      	beq.n	8008c6a <USBD_StdEPReq+0xda>
 8008c52:	7bbb      	ldrb	r3, [r7, #14]
 8008c54:	2b80      	cmp	r3, #128	; 0x80
 8008c56:	d008      	beq.n	8008c6a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	88db      	ldrh	r3, [r3, #6]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d104      	bne.n	8008c6a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008c60:	7bbb      	ldrb	r3, [r7, #14]
 8008c62:	4619      	mov	r1, r3
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f001 f86b 	bl	8009d40 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fcd1 	bl	8009612 <USBD_CtlSendStatus>

              break;
 8008c70:	e004      	b.n	8008c7c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 fc03 	bl	8009480 <USBD_CtlError>
              break;
 8008c7a:	bf00      	nop
          }
          break;
 8008c7c:	e0e0      	b.n	8008e40 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d002      	beq.n	8008c8e <USBD_StdEPReq+0xfe>
 8008c88:	2b03      	cmp	r3, #3
 8008c8a:	d015      	beq.n	8008cb8 <USBD_StdEPReq+0x128>
 8008c8c:	e026      	b.n	8008cdc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c8e:	7bbb      	ldrb	r3, [r7, #14]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00c      	beq.n	8008cae <USBD_StdEPReq+0x11e>
 8008c94:	7bbb      	ldrb	r3, [r7, #14]
 8008c96:	2b80      	cmp	r3, #128	; 0x80
 8008c98:	d009      	beq.n	8008cae <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008c9a:	7bbb      	ldrb	r3, [r7, #14]
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f001 f84e 	bl	8009d40 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008ca4:	2180      	movs	r1, #128	; 0x80
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f001 f84a 	bl	8009d40 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008cac:	e01c      	b.n	8008ce8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008cae:	6839      	ldr	r1, [r7, #0]
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 fbe5 	bl	8009480 <USBD_CtlError>
              break;
 8008cb6:	e017      	b.n	8008ce8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	885b      	ldrh	r3, [r3, #2]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d112      	bne.n	8008ce6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008cc0:	7bbb      	ldrb	r3, [r7, #14]
 8008cc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d004      	beq.n	8008cd4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008cca:	7bbb      	ldrb	r3, [r7, #14]
 8008ccc:	4619      	mov	r1, r3
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f001 f855 	bl	8009d7e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fc9c 	bl	8009612 <USBD_CtlSendStatus>
              }
              break;
 8008cda:	e004      	b.n	8008ce6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008cdc:	6839      	ldr	r1, [r7, #0]
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 fbce 	bl	8009480 <USBD_CtlError>
              break;
 8008ce4:	e000      	b.n	8008ce8 <USBD_StdEPReq+0x158>
              break;
 8008ce6:	bf00      	nop
          }
          break;
 8008ce8:	e0aa      	b.n	8008e40 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d002      	beq.n	8008cfa <USBD_StdEPReq+0x16a>
 8008cf4:	2b03      	cmp	r3, #3
 8008cf6:	d032      	beq.n	8008d5e <USBD_StdEPReq+0x1ce>
 8008cf8:	e097      	b.n	8008e2a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cfa:	7bbb      	ldrb	r3, [r7, #14]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d007      	beq.n	8008d10 <USBD_StdEPReq+0x180>
 8008d00:	7bbb      	ldrb	r3, [r7, #14]
 8008d02:	2b80      	cmp	r3, #128	; 0x80
 8008d04:	d004      	beq.n	8008d10 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008d06:	6839      	ldr	r1, [r7, #0]
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fbb9 	bl	8009480 <USBD_CtlError>
                break;
 8008d0e:	e091      	b.n	8008e34 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	da0b      	bge.n	8008d30 <USBD_StdEPReq+0x1a0>
 8008d18:	7bbb      	ldrb	r3, [r7, #14]
 8008d1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d1e:	4613      	mov	r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	4413      	add	r3, r2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	3310      	adds	r3, #16
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	e00b      	b.n	8008d48 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d30:	7bbb      	ldrb	r3, [r7, #14]
 8008d32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d36:	4613      	mov	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4413      	add	r3, r2
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	4413      	add	r3, r2
 8008d46:	3304      	adds	r3, #4
 8008d48:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	2202      	movs	r2, #2
 8008d54:	4619      	mov	r1, r3
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fbfd 	bl	8009556 <USBD_CtlSendData>
              break;
 8008d5c:	e06a      	b.n	8008e34 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	da11      	bge.n	8008d8a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d66:	7bbb      	ldrb	r3, [r7, #14]
 8008d68:	f003 020f 	and.w	r2, r3, #15
 8008d6c:	6879      	ldr	r1, [r7, #4]
 8008d6e:	4613      	mov	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	4413      	add	r3, r2
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	440b      	add	r3, r1
 8008d78:	3318      	adds	r3, #24
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d117      	bne.n	8008db0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008d80:	6839      	ldr	r1, [r7, #0]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fb7c 	bl	8009480 <USBD_CtlError>
                  break;
 8008d88:	e054      	b.n	8008e34 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d8a:	7bbb      	ldrb	r3, [r7, #14]
 8008d8c:	f003 020f 	and.w	r2, r3, #15
 8008d90:	6879      	ldr	r1, [r7, #4]
 8008d92:	4613      	mov	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	4413      	add	r3, r2
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	440b      	add	r3, r1
 8008d9c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d104      	bne.n	8008db0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008da6:	6839      	ldr	r1, [r7, #0]
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 fb69 	bl	8009480 <USBD_CtlError>
                  break;
 8008dae:	e041      	b.n	8008e34 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008db0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	da0b      	bge.n	8008dd0 <USBD_StdEPReq+0x240>
 8008db8:	7bbb      	ldrb	r3, [r7, #14]
 8008dba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	4413      	add	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	3310      	adds	r3, #16
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	4413      	add	r3, r2
 8008dcc:	3304      	adds	r3, #4
 8008dce:	e00b      	b.n	8008de8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008dd0:	7bbb      	ldrb	r3, [r7, #14]
 8008dd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4413      	add	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	4413      	add	r3, r2
 8008de6:	3304      	adds	r3, #4
 8008de8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008dea:	7bbb      	ldrb	r3, [r7, #14]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d002      	beq.n	8008df6 <USBD_StdEPReq+0x266>
 8008df0:	7bbb      	ldrb	r3, [r7, #14]
 8008df2:	2b80      	cmp	r3, #128	; 0x80
 8008df4:	d103      	bne.n	8008dfe <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	601a      	str	r2, [r3, #0]
 8008dfc:	e00e      	b.n	8008e1c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008dfe:	7bbb      	ldrb	r3, [r7, #14]
 8008e00:	4619      	mov	r1, r3
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 ffda 	bl	8009dbc <USBD_LL_IsStallEP>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d003      	beq.n	8008e16 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	2201      	movs	r2, #1
 8008e12:	601a      	str	r2, [r3, #0]
 8008e14:	e002      	b.n	8008e1c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	2202      	movs	r2, #2
 8008e20:	4619      	mov	r1, r3
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 fb97 	bl	8009556 <USBD_CtlSendData>
              break;
 8008e28:	e004      	b.n	8008e34 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008e2a:	6839      	ldr	r1, [r7, #0]
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 fb27 	bl	8009480 <USBD_CtlError>
              break;
 8008e32:	bf00      	nop
          }
          break;
 8008e34:	e004      	b.n	8008e40 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008e36:	6839      	ldr	r1, [r7, #0]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 fb21 	bl	8009480 <USBD_CtlError>
          break;
 8008e3e:	bf00      	nop
      }
      break;
 8008e40:	e004      	b.n	8008e4c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008e42:	6839      	ldr	r1, [r7, #0]
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 fb1b 	bl	8009480 <USBD_CtlError>
      break;
 8008e4a:	bf00      	nop
  }

  return ret;
 8008e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
	...

08008e58 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e62:	2300      	movs	r3, #0
 8008e64:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e66:	2300      	movs	r3, #0
 8008e68:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	885b      	ldrh	r3, [r3, #2]
 8008e72:	0a1b      	lsrs	r3, r3, #8
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	3b01      	subs	r3, #1
 8008e78:	2b06      	cmp	r3, #6
 8008e7a:	f200 8128 	bhi.w	80090ce <USBD_GetDescriptor+0x276>
 8008e7e:	a201      	add	r2, pc, #4	; (adr r2, 8008e84 <USBD_GetDescriptor+0x2c>)
 8008e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e84:	08008ea1 	.word	0x08008ea1
 8008e88:	08008eb9 	.word	0x08008eb9
 8008e8c:	08008ef9 	.word	0x08008ef9
 8008e90:	080090cf 	.word	0x080090cf
 8008e94:	080090cf 	.word	0x080090cf
 8008e98:	0800906f 	.word	0x0800906f
 8008e9c:	0800909b 	.word	0x0800909b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	7c12      	ldrb	r2, [r2, #16]
 8008eac:	f107 0108 	add.w	r1, r7, #8
 8008eb0:	4610      	mov	r0, r2
 8008eb2:	4798      	blx	r3
 8008eb4:	60f8      	str	r0, [r7, #12]
      break;
 8008eb6:	e112      	b.n	80090de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	7c1b      	ldrb	r3, [r3, #16]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10d      	bne.n	8008edc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec8:	f107 0208 	add.w	r2, r7, #8
 8008ecc:	4610      	mov	r0, r2
 8008ece:	4798      	blx	r3
 8008ed0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	2202      	movs	r2, #2
 8008ed8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008eda:	e100      	b.n	80090de <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee4:	f107 0208 	add.w	r2, r7, #8
 8008ee8:	4610      	mov	r0, r2
 8008eea:	4798      	blx	r3
 8008eec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	2202      	movs	r2, #2
 8008ef4:	701a      	strb	r2, [r3, #0]
      break;
 8008ef6:	e0f2      	b.n	80090de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	885b      	ldrh	r3, [r3, #2]
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	2b05      	cmp	r3, #5
 8008f00:	f200 80ac 	bhi.w	800905c <USBD_GetDescriptor+0x204>
 8008f04:	a201      	add	r2, pc, #4	; (adr r2, 8008f0c <USBD_GetDescriptor+0xb4>)
 8008f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f0a:	bf00      	nop
 8008f0c:	08008f25 	.word	0x08008f25
 8008f10:	08008f59 	.word	0x08008f59
 8008f14:	08008f8d 	.word	0x08008f8d
 8008f18:	08008fc1 	.word	0x08008fc1
 8008f1c:	08008ff5 	.word	0x08008ff5
 8008f20:	08009029 	.word	0x08009029
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00b      	beq.n	8008f48 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	7c12      	ldrb	r2, [r2, #16]
 8008f3c:	f107 0108 	add.w	r1, r7, #8
 8008f40:	4610      	mov	r0, r2
 8008f42:	4798      	blx	r3
 8008f44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f46:	e091      	b.n	800906c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f48:	6839      	ldr	r1, [r7, #0]
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fa98 	bl	8009480 <USBD_CtlError>
            err++;
 8008f50:	7afb      	ldrb	r3, [r7, #11]
 8008f52:	3301      	adds	r3, #1
 8008f54:	72fb      	strb	r3, [r7, #11]
          break;
 8008f56:	e089      	b.n	800906c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00b      	beq.n	8008f7c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	7c12      	ldrb	r2, [r2, #16]
 8008f70:	f107 0108 	add.w	r1, r7, #8
 8008f74:	4610      	mov	r0, r2
 8008f76:	4798      	blx	r3
 8008f78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f7a:	e077      	b.n	800906c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f7c:	6839      	ldr	r1, [r7, #0]
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 fa7e 	bl	8009480 <USBD_CtlError>
            err++;
 8008f84:	7afb      	ldrb	r3, [r7, #11]
 8008f86:	3301      	adds	r3, #1
 8008f88:	72fb      	strb	r3, [r7, #11]
          break;
 8008f8a:	e06f      	b.n	800906c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00b      	beq.n	8008fb0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	7c12      	ldrb	r2, [r2, #16]
 8008fa4:	f107 0108 	add.w	r1, r7, #8
 8008fa8:	4610      	mov	r0, r2
 8008faa:	4798      	blx	r3
 8008fac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fae:	e05d      	b.n	800906c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fb0:	6839      	ldr	r1, [r7, #0]
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 fa64 	bl	8009480 <USBD_CtlError>
            err++;
 8008fb8:	7afb      	ldrb	r3, [r7, #11]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	72fb      	strb	r3, [r7, #11]
          break;
 8008fbe:	e055      	b.n	800906c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fc6:	691b      	ldr	r3, [r3, #16]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d00b      	beq.n	8008fe4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	7c12      	ldrb	r2, [r2, #16]
 8008fd8:	f107 0108 	add.w	r1, r7, #8
 8008fdc:	4610      	mov	r0, r2
 8008fde:	4798      	blx	r3
 8008fe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fe2:	e043      	b.n	800906c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fe4:	6839      	ldr	r1, [r7, #0]
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fa4a 	bl	8009480 <USBD_CtlError>
            err++;
 8008fec:	7afb      	ldrb	r3, [r7, #11]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ff2:	e03b      	b.n	800906c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ffa:	695b      	ldr	r3, [r3, #20]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00b      	beq.n	8009018 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009006:	695b      	ldr	r3, [r3, #20]
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	7c12      	ldrb	r2, [r2, #16]
 800900c:	f107 0108 	add.w	r1, r7, #8
 8009010:	4610      	mov	r0, r2
 8009012:	4798      	blx	r3
 8009014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009016:	e029      	b.n	800906c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009018:	6839      	ldr	r1, [r7, #0]
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 fa30 	bl	8009480 <USBD_CtlError>
            err++;
 8009020:	7afb      	ldrb	r3, [r7, #11]
 8009022:	3301      	adds	r3, #1
 8009024:	72fb      	strb	r3, [r7, #11]
          break;
 8009026:	e021      	b.n	800906c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800902e:	699b      	ldr	r3, [r3, #24]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00b      	beq.n	800904c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	7c12      	ldrb	r2, [r2, #16]
 8009040:	f107 0108 	add.w	r1, r7, #8
 8009044:	4610      	mov	r0, r2
 8009046:	4798      	blx	r3
 8009048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800904a:	e00f      	b.n	800906c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800904c:	6839      	ldr	r1, [r7, #0]
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 fa16 	bl	8009480 <USBD_CtlError>
            err++;
 8009054:	7afb      	ldrb	r3, [r7, #11]
 8009056:	3301      	adds	r3, #1
 8009058:	72fb      	strb	r3, [r7, #11]
          break;
 800905a:	e007      	b.n	800906c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fa0e 	bl	8009480 <USBD_CtlError>
          err++;
 8009064:	7afb      	ldrb	r3, [r7, #11]
 8009066:	3301      	adds	r3, #1
 8009068:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800906a:	e038      	b.n	80090de <USBD_GetDescriptor+0x286>
 800906c:	e037      	b.n	80090de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	7c1b      	ldrb	r3, [r3, #16]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d109      	bne.n	800908a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800907c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800907e:	f107 0208 	add.w	r2, r7, #8
 8009082:	4610      	mov	r0, r2
 8009084:	4798      	blx	r3
 8009086:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009088:	e029      	b.n	80090de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800908a:	6839      	ldr	r1, [r7, #0]
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 f9f7 	bl	8009480 <USBD_CtlError>
        err++;
 8009092:	7afb      	ldrb	r3, [r7, #11]
 8009094:	3301      	adds	r3, #1
 8009096:	72fb      	strb	r3, [r7, #11]
      break;
 8009098:	e021      	b.n	80090de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	7c1b      	ldrb	r3, [r3, #16]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10d      	bne.n	80090be <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090aa:	f107 0208 	add.w	r2, r7, #8
 80090ae:	4610      	mov	r0, r2
 80090b0:	4798      	blx	r3
 80090b2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	3301      	adds	r3, #1
 80090b8:	2207      	movs	r2, #7
 80090ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090bc:	e00f      	b.n	80090de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80090be:	6839      	ldr	r1, [r7, #0]
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f9dd 	bl	8009480 <USBD_CtlError>
        err++;
 80090c6:	7afb      	ldrb	r3, [r7, #11]
 80090c8:	3301      	adds	r3, #1
 80090ca:	72fb      	strb	r3, [r7, #11]
      break;
 80090cc:	e007      	b.n	80090de <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80090ce:	6839      	ldr	r1, [r7, #0]
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 f9d5 	bl	8009480 <USBD_CtlError>
      err++;
 80090d6:	7afb      	ldrb	r3, [r7, #11]
 80090d8:	3301      	adds	r3, #1
 80090da:	72fb      	strb	r3, [r7, #11]
      break;
 80090dc:	bf00      	nop
  }

  if (err != 0U)
 80090de:	7afb      	ldrb	r3, [r7, #11]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d11c      	bne.n	800911e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80090e4:	893b      	ldrh	r3, [r7, #8]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d011      	beq.n	800910e <USBD_GetDescriptor+0x2b6>
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	88db      	ldrh	r3, [r3, #6]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00d      	beq.n	800910e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	88da      	ldrh	r2, [r3, #6]
 80090f6:	893b      	ldrh	r3, [r7, #8]
 80090f8:	4293      	cmp	r3, r2
 80090fa:	bf28      	it	cs
 80090fc:	4613      	movcs	r3, r2
 80090fe:	b29b      	uxth	r3, r3
 8009100:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009102:	893b      	ldrh	r3, [r7, #8]
 8009104:	461a      	mov	r2, r3
 8009106:	68f9      	ldr	r1, [r7, #12]
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 fa24 	bl	8009556 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	88db      	ldrh	r3, [r3, #6]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d104      	bne.n	8009120 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fa7b 	bl	8009612 <USBD_CtlSendStatus>
 800911c:	e000      	b.n	8009120 <USBD_GetDescriptor+0x2c8>
    return;
 800911e:	bf00      	nop
    }
  }
}
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop

08009128 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	889b      	ldrh	r3, [r3, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d130      	bne.n	800919c <USBD_SetAddress+0x74>
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	88db      	ldrh	r3, [r3, #6]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d12c      	bne.n	800919c <USBD_SetAddress+0x74>
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	885b      	ldrh	r3, [r3, #2]
 8009146:	2b7f      	cmp	r3, #127	; 0x7f
 8009148:	d828      	bhi.n	800919c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	885b      	ldrh	r3, [r3, #2]
 800914e:	b2db      	uxtb	r3, r3
 8009150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009154:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800915c:	2b03      	cmp	r3, #3
 800915e:	d104      	bne.n	800916a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009160:	6839      	ldr	r1, [r7, #0]
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f98c 	bl	8009480 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009168:	e01d      	b.n	80091a6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	7bfa      	ldrb	r2, [r7, #15]
 800916e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009172:	7bfb      	ldrb	r3, [r7, #15]
 8009174:	4619      	mov	r1, r3
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 fe4d 	bl	8009e16 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fa48 	bl	8009612 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009182:	7bfb      	ldrb	r3, [r7, #15]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d004      	beq.n	8009192 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2202      	movs	r2, #2
 800918c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009190:	e009      	b.n	80091a6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2201      	movs	r2, #1
 8009196:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800919a:	e004      	b.n	80091a6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800919c:	6839      	ldr	r1, [r7, #0]
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f96e 	bl	8009480 <USBD_CtlError>
  }
}
 80091a4:	bf00      	nop
 80091a6:	bf00      	nop
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
	...

080091b0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	885b      	ldrh	r3, [r3, #2]
 80091be:	b2da      	uxtb	r2, r3
 80091c0:	4b41      	ldr	r3, [pc, #260]	; (80092c8 <USBD_SetConfig+0x118>)
 80091c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80091c4:	4b40      	ldr	r3, [pc, #256]	; (80092c8 <USBD_SetConfig+0x118>)
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d904      	bls.n	80091d6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80091cc:	6839      	ldr	r1, [r7, #0]
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f956 	bl	8009480 <USBD_CtlError>
 80091d4:	e075      	b.n	80092c2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091dc:	2b02      	cmp	r3, #2
 80091de:	d002      	beq.n	80091e6 <USBD_SetConfig+0x36>
 80091e0:	2b03      	cmp	r3, #3
 80091e2:	d023      	beq.n	800922c <USBD_SetConfig+0x7c>
 80091e4:	e062      	b.n	80092ac <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80091e6:	4b38      	ldr	r3, [pc, #224]	; (80092c8 <USBD_SetConfig+0x118>)
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d01a      	beq.n	8009224 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80091ee:	4b36      	ldr	r3, [pc, #216]	; (80092c8 <USBD_SetConfig+0x118>)
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	461a      	mov	r2, r3
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2203      	movs	r2, #3
 80091fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009200:	4b31      	ldr	r3, [pc, #196]	; (80092c8 <USBD_SetConfig+0x118>)
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	4619      	mov	r1, r3
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f7ff f9e5 	bl	80085d6 <USBD_SetClassConfig>
 800920c:	4603      	mov	r3, r0
 800920e:	2b02      	cmp	r3, #2
 8009210:	d104      	bne.n	800921c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009212:	6839      	ldr	r1, [r7, #0]
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 f933 	bl	8009480 <USBD_CtlError>
            return;
 800921a:	e052      	b.n	80092c2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 f9f8 	bl	8009612 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009222:	e04e      	b.n	80092c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 f9f4 	bl	8009612 <USBD_CtlSendStatus>
        break;
 800922a:	e04a      	b.n	80092c2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800922c:	4b26      	ldr	r3, [pc, #152]	; (80092c8 <USBD_SetConfig+0x118>)
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d112      	bne.n	800925a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2202      	movs	r2, #2
 8009238:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800923c:	4b22      	ldr	r3, [pc, #136]	; (80092c8 <USBD_SetConfig+0x118>)
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	461a      	mov	r2, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009246:	4b20      	ldr	r3, [pc, #128]	; (80092c8 <USBD_SetConfig+0x118>)
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	4619      	mov	r1, r3
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f7ff f9e1 	bl	8008614 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 f9dd 	bl	8009612 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009258:	e033      	b.n	80092c2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800925a:	4b1b      	ldr	r3, [pc, #108]	; (80092c8 <USBD_SetConfig+0x118>)
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	461a      	mov	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	429a      	cmp	r2, r3
 8009266:	d01d      	beq.n	80092a4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	b2db      	uxtb	r3, r3
 800926e:	4619      	mov	r1, r3
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f7ff f9cf 	bl	8008614 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009276:	4b14      	ldr	r3, [pc, #80]	; (80092c8 <USBD_SetConfig+0x118>)
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	461a      	mov	r2, r3
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009280:	4b11      	ldr	r3, [pc, #68]	; (80092c8 <USBD_SetConfig+0x118>)
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	4619      	mov	r1, r3
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f7ff f9a5 	bl	80085d6 <USBD_SetClassConfig>
 800928c:	4603      	mov	r3, r0
 800928e:	2b02      	cmp	r3, #2
 8009290:	d104      	bne.n	800929c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009292:	6839      	ldr	r1, [r7, #0]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 f8f3 	bl	8009480 <USBD_CtlError>
            return;
 800929a:	e012      	b.n	80092c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 f9b8 	bl	8009612 <USBD_CtlSendStatus>
        break;
 80092a2:	e00e      	b.n	80092c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 f9b4 	bl	8009612 <USBD_CtlSendStatus>
        break;
 80092aa:	e00a      	b.n	80092c2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 f8e6 	bl	8009480 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80092b4:	4b04      	ldr	r3, [pc, #16]	; (80092c8 <USBD_SetConfig+0x118>)
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	4619      	mov	r1, r3
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7ff f9aa 	bl	8008614 <USBD_ClrClassConfig>
        break;
 80092c0:	bf00      	nop
    }
  }
}
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	20000288 	.word	0x20000288

080092cc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	88db      	ldrh	r3, [r3, #6]
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d004      	beq.n	80092e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80092de:	6839      	ldr	r1, [r7, #0]
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 f8cd 	bl	8009480 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80092e6:	e022      	b.n	800932e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	dc02      	bgt.n	80092f8 <USBD_GetConfig+0x2c>
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	dc03      	bgt.n	80092fe <USBD_GetConfig+0x32>
 80092f6:	e015      	b.n	8009324 <USBD_GetConfig+0x58>
 80092f8:	2b03      	cmp	r3, #3
 80092fa:	d00b      	beq.n	8009314 <USBD_GetConfig+0x48>
 80092fc:	e012      	b.n	8009324 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	3308      	adds	r3, #8
 8009308:	2201      	movs	r2, #1
 800930a:	4619      	mov	r1, r3
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 f922 	bl	8009556 <USBD_CtlSendData>
        break;
 8009312:	e00c      	b.n	800932e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	3304      	adds	r3, #4
 8009318:	2201      	movs	r2, #1
 800931a:	4619      	mov	r1, r3
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f91a 	bl	8009556 <USBD_CtlSendData>
        break;
 8009322:	e004      	b.n	800932e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009324:	6839      	ldr	r1, [r7, #0]
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f8aa 	bl	8009480 <USBD_CtlError>
        break;
 800932c:	bf00      	nop
}
 800932e:	bf00      	nop
 8009330:	3708      	adds	r7, #8
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b082      	sub	sp, #8
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009346:	3b01      	subs	r3, #1
 8009348:	2b02      	cmp	r3, #2
 800934a:	d81e      	bhi.n	800938a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	88db      	ldrh	r3, [r3, #6]
 8009350:	2b02      	cmp	r3, #2
 8009352:	d004      	beq.n	800935e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f892 	bl	8009480 <USBD_CtlError>
        break;
 800935c:	e01a      	b.n	8009394 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2201      	movs	r2, #1
 8009362:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800936a:	2b00      	cmp	r3, #0
 800936c:	d005      	beq.n	800937a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	f043 0202 	orr.w	r2, r3, #2
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	330c      	adds	r3, #12
 800937e:	2202      	movs	r2, #2
 8009380:	4619      	mov	r1, r3
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f8e7 	bl	8009556 <USBD_CtlSendData>
      break;
 8009388:	e004      	b.n	8009394 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800938a:	6839      	ldr	r1, [r7, #0]
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f877 	bl	8009480 <USBD_CtlError>
      break;
 8009392:	bf00      	nop
  }
}
 8009394:	bf00      	nop
 8009396:	3708      	adds	r7, #8
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	885b      	ldrh	r3, [r3, #2]
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d106      	bne.n	80093bc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2201      	movs	r2, #1
 80093b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f92b 	bl	8009612 <USBD_CtlSendStatus>
  }
}
 80093bc:	bf00      	nop
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093d4:	3b01      	subs	r3, #1
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	d80b      	bhi.n	80093f2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	885b      	ldrh	r3, [r3, #2]
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d10c      	bne.n	80093fc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f911 	bl	8009612 <USBD_CtlSendStatus>
      }
      break;
 80093f0:	e004      	b.n	80093fc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80093f2:	6839      	ldr	r1, [r7, #0]
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 f843 	bl	8009480 <USBD_CtlError>
      break;
 80093fa:	e000      	b.n	80093fe <USBD_ClrFeature+0x3a>
      break;
 80093fc:	bf00      	nop
  }
}
 80093fe:	bf00      	nop
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009406:	b480      	push	{r7}
 8009408:	b083      	sub	sp, #12
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
 800940e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	781a      	ldrb	r2, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	785a      	ldrb	r2, [r3, #1]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	3302      	adds	r3, #2
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	b29a      	uxth	r2, r3
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	3303      	adds	r3, #3
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	b29b      	uxth	r3, r3
 8009430:	021b      	lsls	r3, r3, #8
 8009432:	b29b      	uxth	r3, r3
 8009434:	4413      	add	r3, r2
 8009436:	b29a      	uxth	r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	3304      	adds	r3, #4
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	b29a      	uxth	r2, r3
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	3305      	adds	r3, #5
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	b29b      	uxth	r3, r3
 800944c:	021b      	lsls	r3, r3, #8
 800944e:	b29b      	uxth	r3, r3
 8009450:	4413      	add	r3, r2
 8009452:	b29a      	uxth	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	3306      	adds	r3, #6
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	b29a      	uxth	r2, r3
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	3307      	adds	r3, #7
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	b29b      	uxth	r3, r3
 8009468:	021b      	lsls	r3, r3, #8
 800946a:	b29b      	uxth	r3, r3
 800946c:	4413      	add	r3, r2
 800946e:	b29a      	uxth	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	80da      	strh	r2, [r3, #6]

}
 8009474:	bf00      	nop
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800948a:	2180      	movs	r1, #128	; 0x80
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 fc57 	bl	8009d40 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009492:	2100      	movs	r1, #0
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fc53 	bl	8009d40 <USBD_LL_StallEP>
}
 800949a:	bf00      	nop
 800949c:	3708      	adds	r7, #8
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b086      	sub	sp, #24
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	60f8      	str	r0, [r7, #12]
 80094aa:	60b9      	str	r1, [r7, #8]
 80094ac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80094ae:	2300      	movs	r3, #0
 80094b0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d032      	beq.n	800951e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f000 f834 	bl	8009526 <USBD_GetLen>
 80094be:	4603      	mov	r3, r0
 80094c0:	3301      	adds	r3, #1
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	005b      	lsls	r3, r3, #1
 80094c6:	b29a      	uxth	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80094cc:	7dfb      	ldrb	r3, [r7, #23]
 80094ce:	1c5a      	adds	r2, r3, #1
 80094d0:	75fa      	strb	r2, [r7, #23]
 80094d2:	461a      	mov	r2, r3
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	4413      	add	r3, r2
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	7812      	ldrb	r2, [r2, #0]
 80094dc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80094de:	7dfb      	ldrb	r3, [r7, #23]
 80094e0:	1c5a      	adds	r2, r3, #1
 80094e2:	75fa      	strb	r2, [r7, #23]
 80094e4:	461a      	mov	r2, r3
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	4413      	add	r3, r2
 80094ea:	2203      	movs	r2, #3
 80094ec:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80094ee:	e012      	b.n	8009516 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	1c5a      	adds	r2, r3, #1
 80094f4:	60fa      	str	r2, [r7, #12]
 80094f6:	7dfa      	ldrb	r2, [r7, #23]
 80094f8:	1c51      	adds	r1, r2, #1
 80094fa:	75f9      	strb	r1, [r7, #23]
 80094fc:	4611      	mov	r1, r2
 80094fe:	68ba      	ldr	r2, [r7, #8]
 8009500:	440a      	add	r2, r1
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009506:	7dfb      	ldrb	r3, [r7, #23]
 8009508:	1c5a      	adds	r2, r3, #1
 800950a:	75fa      	strb	r2, [r7, #23]
 800950c:	461a      	mov	r2, r3
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	4413      	add	r3, r2
 8009512:	2200      	movs	r2, #0
 8009514:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1e8      	bne.n	80094f0 <USBD_GetString+0x4e>
    }
  }
}
 800951e:	bf00      	nop
 8009520:	3718      	adds	r7, #24
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009526:	b480      	push	{r7}
 8009528:	b085      	sub	sp, #20
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800952e:	2300      	movs	r3, #0
 8009530:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009532:	e005      	b.n	8009540 <USBD_GetLen+0x1a>
  {
    len++;
 8009534:	7bfb      	ldrb	r3, [r7, #15]
 8009536:	3301      	adds	r3, #1
 8009538:	73fb      	strb	r3, [r7, #15]
    buf++;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	3301      	adds	r3, #1
 800953e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1f5      	bne.n	8009534 <USBD_GetLen+0xe>
  }

  return len;
 8009548:	7bfb      	ldrb	r3, [r7, #15]
}
 800954a:	4618      	mov	r0, r3
 800954c:	3714      	adds	r7, #20
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b084      	sub	sp, #16
 800955a:	af00      	add	r7, sp, #0
 800955c:	60f8      	str	r0, [r7, #12]
 800955e:	60b9      	str	r1, [r7, #8]
 8009560:	4613      	mov	r3, r2
 8009562:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2202      	movs	r2, #2
 8009568:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800956c:	88fa      	ldrh	r2, [r7, #6]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009572:	88fa      	ldrh	r2, [r7, #6]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009578:	88fb      	ldrh	r3, [r7, #6]
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	2100      	movs	r1, #0
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	f000 fc68 	bl	8009e54 <USBD_LL_Transmit>

  return USBD_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b084      	sub	sp, #16
 8009592:	af00      	add	r7, sp, #0
 8009594:	60f8      	str	r0, [r7, #12]
 8009596:	60b9      	str	r1, [r7, #8]
 8009598:	4613      	mov	r3, r2
 800959a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800959c:	88fb      	ldrh	r3, [r7, #6]
 800959e:	68ba      	ldr	r2, [r7, #8]
 80095a0:	2100      	movs	r1, #0
 80095a2:	68f8      	ldr	r0, [r7, #12]
 80095a4:	f000 fc56 	bl	8009e54 <USBD_LL_Transmit>

  return USBD_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b084      	sub	sp, #16
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	60f8      	str	r0, [r7, #12]
 80095ba:	60b9      	str	r1, [r7, #8]
 80095bc:	4613      	mov	r3, r2
 80095be:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2203      	movs	r2, #3
 80095c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80095c8:	88fa      	ldrh	r2, [r7, #6]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80095d0:	88fa      	ldrh	r2, [r7, #6]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095d8:	88fb      	ldrh	r3, [r7, #6]
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	2100      	movs	r1, #0
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	f000 fc5b 	bl	8009e9a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b084      	sub	sp, #16
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	60f8      	str	r0, [r7, #12]
 80095f6:	60b9      	str	r1, [r7, #8]
 80095f8:	4613      	mov	r3, r2
 80095fa:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095fc:	88fb      	ldrh	r3, [r7, #6]
 80095fe:	68ba      	ldr	r2, [r7, #8]
 8009600:	2100      	movs	r1, #0
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	f000 fc49 	bl	8009e9a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b082      	sub	sp, #8
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2204      	movs	r2, #4
 800961e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009622:	2300      	movs	r3, #0
 8009624:	2200      	movs	r2, #0
 8009626:	2100      	movs	r1, #0
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 fc13 	bl	8009e54 <USBD_LL_Transmit>

  return USBD_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2205      	movs	r2, #5
 8009644:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009648:	2300      	movs	r3, #0
 800964a:	2200      	movs	r2, #0
 800964c:	2100      	movs	r1, #0
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 fc23 	bl	8009e9a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
	...

08009660 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009664:	2200      	movs	r2, #0
 8009666:	4912      	ldr	r1, [pc, #72]	; (80096b0 <MX_USB_DEVICE_Init+0x50>)
 8009668:	4812      	ldr	r0, [pc, #72]	; (80096b4 <MX_USB_DEVICE_Init+0x54>)
 800966a:	f7fe ff58 	bl	800851e <USBD_Init>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009674:	f7f6 fffc 	bl	8000670 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009678:	490f      	ldr	r1, [pc, #60]	; (80096b8 <MX_USB_DEVICE_Init+0x58>)
 800967a:	480e      	ldr	r0, [pc, #56]	; (80096b4 <MX_USB_DEVICE_Init+0x54>)
 800967c:	f7fe ff7a 	bl	8008574 <USBD_RegisterClass>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d001      	beq.n	800968a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009686:	f7f6 fff3 	bl	8000670 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800968a:	490c      	ldr	r1, [pc, #48]	; (80096bc <MX_USB_DEVICE_Init+0x5c>)
 800968c:	4809      	ldr	r0, [pc, #36]	; (80096b4 <MX_USB_DEVICE_Init+0x54>)
 800968e:	f7fe fed7 	bl	8008440 <USBD_CDC_RegisterInterface>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d001      	beq.n	800969c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009698:	f7f6 ffea 	bl	8000670 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800969c:	4805      	ldr	r0, [pc, #20]	; (80096b4 <MX_USB_DEVICE_Init+0x54>)
 800969e:	f7fe ff83 	bl	80085a8 <USBD_Start>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d001      	beq.n	80096ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80096a8:	f7f6 ffe2 	bl	8000670 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80096ac:	bf00      	nop
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	2000012c 	.word	0x2000012c
 80096b4:	2000028c 	.word	0x2000028c
 80096b8:	20000018 	.word	0x20000018
 80096bc:	2000011c 	.word	0x2000011c

080096c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80096c4:	2200      	movs	r2, #0
 80096c6:	4905      	ldr	r1, [pc, #20]	; (80096dc <CDC_Init_FS+0x1c>)
 80096c8:	4805      	ldr	r0, [pc, #20]	; (80096e0 <CDC_Init_FS+0x20>)
 80096ca:	f7fe fed0 	bl	800846e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80096ce:	4905      	ldr	r1, [pc, #20]	; (80096e4 <CDC_Init_FS+0x24>)
 80096d0:	4803      	ldr	r0, [pc, #12]	; (80096e0 <CDC_Init_FS+0x20>)
 80096d2:	f7fe fee6 	bl	80084a2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80096d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80096d8:	4618      	mov	r0, r3
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	20000950 	.word	0x20000950
 80096e0:	2000028c 	.word	0x2000028c
 80096e4:	20000550 	.word	0x20000550

080096e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80096e8:	b480      	push	{r7}
 80096ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80096ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	4603      	mov	r3, r0
 8009700:	6039      	str	r1, [r7, #0]
 8009702:	71fb      	strb	r3, [r7, #7]
 8009704:	4613      	mov	r3, r2
 8009706:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009708:	79fb      	ldrb	r3, [r7, #7]
 800970a:	2b23      	cmp	r3, #35	; 0x23
 800970c:	d84a      	bhi.n	80097a4 <CDC_Control_FS+0xac>
 800970e:	a201      	add	r2, pc, #4	; (adr r2, 8009714 <CDC_Control_FS+0x1c>)
 8009710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009714:	080097a5 	.word	0x080097a5
 8009718:	080097a5 	.word	0x080097a5
 800971c:	080097a5 	.word	0x080097a5
 8009720:	080097a5 	.word	0x080097a5
 8009724:	080097a5 	.word	0x080097a5
 8009728:	080097a5 	.word	0x080097a5
 800972c:	080097a5 	.word	0x080097a5
 8009730:	080097a5 	.word	0x080097a5
 8009734:	080097a5 	.word	0x080097a5
 8009738:	080097a5 	.word	0x080097a5
 800973c:	080097a5 	.word	0x080097a5
 8009740:	080097a5 	.word	0x080097a5
 8009744:	080097a5 	.word	0x080097a5
 8009748:	080097a5 	.word	0x080097a5
 800974c:	080097a5 	.word	0x080097a5
 8009750:	080097a5 	.word	0x080097a5
 8009754:	080097a5 	.word	0x080097a5
 8009758:	080097a5 	.word	0x080097a5
 800975c:	080097a5 	.word	0x080097a5
 8009760:	080097a5 	.word	0x080097a5
 8009764:	080097a5 	.word	0x080097a5
 8009768:	080097a5 	.word	0x080097a5
 800976c:	080097a5 	.word	0x080097a5
 8009770:	080097a5 	.word	0x080097a5
 8009774:	080097a5 	.word	0x080097a5
 8009778:	080097a5 	.word	0x080097a5
 800977c:	080097a5 	.word	0x080097a5
 8009780:	080097a5 	.word	0x080097a5
 8009784:	080097a5 	.word	0x080097a5
 8009788:	080097a5 	.word	0x080097a5
 800978c:	080097a5 	.word	0x080097a5
 8009790:	080097a5 	.word	0x080097a5
 8009794:	080097a5 	.word	0x080097a5
 8009798:	080097a5 	.word	0x080097a5
 800979c:	080097a5 	.word	0x080097a5
 80097a0:	080097a5 	.word	0x080097a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80097a4:	bf00      	nop
  }

  return (USBD_OK);
 80097a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	370c      	adds	r7, #12
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80097be:	6879      	ldr	r1, [r7, #4]
 80097c0:	4805      	ldr	r0, [pc, #20]	; (80097d8 <CDC_Receive_FS+0x24>)
 80097c2:	f7fe fe6e 	bl	80084a2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80097c6:	4804      	ldr	r0, [pc, #16]	; (80097d8 <CDC_Receive_FS+0x24>)
 80097c8:	f7fe fe7f 	bl	80084ca <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80097cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3708      	adds	r7, #8
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	2000028c 	.word	0x2000028c

080097dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	4603      	mov	r3, r0
 80097e4:	6039      	str	r1, [r7, #0]
 80097e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	2212      	movs	r2, #18
 80097ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80097ee:	4b03      	ldr	r3, [pc, #12]	; (80097fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr
 80097fc:	20000148 	.word	0x20000148

08009800 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	4603      	mov	r3, r0
 8009808:	6039      	str	r1, [r7, #0]
 800980a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	2204      	movs	r2, #4
 8009810:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009812:	4b03      	ldr	r3, [pc, #12]	; (8009820 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009814:	4618      	mov	r0, r3
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr
 8009820:	2000015c 	.word	0x2000015c

08009824 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	4603      	mov	r3, r0
 800982c:	6039      	str	r1, [r7, #0]
 800982e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009830:	79fb      	ldrb	r3, [r7, #7]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d105      	bne.n	8009842 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	4907      	ldr	r1, [pc, #28]	; (8009858 <USBD_FS_ProductStrDescriptor+0x34>)
 800983a:	4808      	ldr	r0, [pc, #32]	; (800985c <USBD_FS_ProductStrDescriptor+0x38>)
 800983c:	f7ff fe31 	bl	80094a2 <USBD_GetString>
 8009840:	e004      	b.n	800984c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	4904      	ldr	r1, [pc, #16]	; (8009858 <USBD_FS_ProductStrDescriptor+0x34>)
 8009846:	4805      	ldr	r0, [pc, #20]	; (800985c <USBD_FS_ProductStrDescriptor+0x38>)
 8009848:	f7ff fe2b 	bl	80094a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800984c:	4b02      	ldr	r3, [pc, #8]	; (8009858 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800984e:	4618      	mov	r0, r3
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	20000d50 	.word	0x20000d50
 800985c:	0800a018 	.word	0x0800a018

08009860 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	4603      	mov	r3, r0
 8009868:	6039      	str	r1, [r7, #0]
 800986a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800986c:	683a      	ldr	r2, [r7, #0]
 800986e:	4904      	ldr	r1, [pc, #16]	; (8009880 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009870:	4804      	ldr	r0, [pc, #16]	; (8009884 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009872:	f7ff fe16 	bl	80094a2 <USBD_GetString>
  return USBD_StrDesc;
 8009876:	4b02      	ldr	r3, [pc, #8]	; (8009880 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009878:	4618      	mov	r0, r3
 800987a:	3708      	adds	r7, #8
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}
 8009880:	20000d50 	.word	0x20000d50
 8009884:	0800a030 	.word	0x0800a030

08009888 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	4603      	mov	r3, r0
 8009890:	6039      	str	r1, [r7, #0]
 8009892:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	221a      	movs	r2, #26
 8009898:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800989a:	f000 f843 	bl	8009924 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800989e:	4b02      	ldr	r3, [pc, #8]	; (80098a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3708      	adds	r7, #8
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	20000160 	.word	0x20000160

080098ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	4603      	mov	r3, r0
 80098b4:	6039      	str	r1, [r7, #0]
 80098b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80098b8:	79fb      	ldrb	r3, [r7, #7]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d105      	bne.n	80098ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098be:	683a      	ldr	r2, [r7, #0]
 80098c0:	4907      	ldr	r1, [pc, #28]	; (80098e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098c2:	4808      	ldr	r0, [pc, #32]	; (80098e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80098c4:	f7ff fded 	bl	80094a2 <USBD_GetString>
 80098c8:	e004      	b.n	80098d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098ca:	683a      	ldr	r2, [r7, #0]
 80098cc:	4904      	ldr	r1, [pc, #16]	; (80098e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098ce:	4805      	ldr	r0, [pc, #20]	; (80098e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80098d0:	f7ff fde7 	bl	80094a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098d4:	4b02      	ldr	r3, [pc, #8]	; (80098e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	20000d50 	.word	0x20000d50
 80098e4:	0800a044 	.word	0x0800a044

080098e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	4603      	mov	r3, r0
 80098f0:	6039      	str	r1, [r7, #0]
 80098f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80098f4:	79fb      	ldrb	r3, [r7, #7]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d105      	bne.n	8009906 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80098fa:	683a      	ldr	r2, [r7, #0]
 80098fc:	4907      	ldr	r1, [pc, #28]	; (800991c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80098fe:	4808      	ldr	r0, [pc, #32]	; (8009920 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009900:	f7ff fdcf 	bl	80094a2 <USBD_GetString>
 8009904:	e004      	b.n	8009910 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009906:	683a      	ldr	r2, [r7, #0]
 8009908:	4904      	ldr	r1, [pc, #16]	; (800991c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800990a:	4805      	ldr	r0, [pc, #20]	; (8009920 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800990c:	f7ff fdc9 	bl	80094a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009910:	4b02      	ldr	r3, [pc, #8]	; (800991c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009912:	4618      	mov	r0, r3
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	20000d50 	.word	0x20000d50
 8009920:	0800a050 	.word	0x0800a050

08009924 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800992a:	4b0f      	ldr	r3, [pc, #60]	; (8009968 <Get_SerialNum+0x44>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009930:	4b0e      	ldr	r3, [pc, #56]	; (800996c <Get_SerialNum+0x48>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009936:	4b0e      	ldr	r3, [pc, #56]	; (8009970 <Get_SerialNum+0x4c>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800993c:	68fa      	ldr	r2, [r7, #12]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	4413      	add	r3, r2
 8009942:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d009      	beq.n	800995e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800994a:	2208      	movs	r2, #8
 800994c:	4909      	ldr	r1, [pc, #36]	; (8009974 <Get_SerialNum+0x50>)
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f000 f814 	bl	800997c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009954:	2204      	movs	r2, #4
 8009956:	4908      	ldr	r1, [pc, #32]	; (8009978 <Get_SerialNum+0x54>)
 8009958:	68b8      	ldr	r0, [r7, #8]
 800995a:	f000 f80f 	bl	800997c <IntToUnicode>
  }
}
 800995e:	bf00      	nop
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	1ffff7ac 	.word	0x1ffff7ac
 800996c:	1ffff7b0 	.word	0x1ffff7b0
 8009970:	1ffff7b4 	.word	0x1ffff7b4
 8009974:	20000162 	.word	0x20000162
 8009978:	20000172 	.word	0x20000172

0800997c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800997c:	b480      	push	{r7}
 800997e:	b087      	sub	sp, #28
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	4613      	mov	r3, r2
 8009988:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800998a:	2300      	movs	r3, #0
 800998c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800998e:	2300      	movs	r3, #0
 8009990:	75fb      	strb	r3, [r7, #23]
 8009992:	e027      	b.n	80099e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	0f1b      	lsrs	r3, r3, #28
 8009998:	2b09      	cmp	r3, #9
 800999a:	d80b      	bhi.n	80099b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	0f1b      	lsrs	r3, r3, #28
 80099a0:	b2da      	uxtb	r2, r3
 80099a2:	7dfb      	ldrb	r3, [r7, #23]
 80099a4:	005b      	lsls	r3, r3, #1
 80099a6:	4619      	mov	r1, r3
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	440b      	add	r3, r1
 80099ac:	3230      	adds	r2, #48	; 0x30
 80099ae:	b2d2      	uxtb	r2, r2
 80099b0:	701a      	strb	r2, [r3, #0]
 80099b2:	e00a      	b.n	80099ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	0f1b      	lsrs	r3, r3, #28
 80099b8:	b2da      	uxtb	r2, r3
 80099ba:	7dfb      	ldrb	r3, [r7, #23]
 80099bc:	005b      	lsls	r3, r3, #1
 80099be:	4619      	mov	r1, r3
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	440b      	add	r3, r1
 80099c4:	3237      	adds	r2, #55	; 0x37
 80099c6:	b2d2      	uxtb	r2, r2
 80099c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	011b      	lsls	r3, r3, #4
 80099ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80099d0:	7dfb      	ldrb	r3, [r7, #23]
 80099d2:	005b      	lsls	r3, r3, #1
 80099d4:	3301      	adds	r3, #1
 80099d6:	68ba      	ldr	r2, [r7, #8]
 80099d8:	4413      	add	r3, r2
 80099da:	2200      	movs	r2, #0
 80099dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80099de:	7dfb      	ldrb	r3, [r7, #23]
 80099e0:	3301      	adds	r3, #1
 80099e2:	75fb      	strb	r3, [r7, #23]
 80099e4:	7dfa      	ldrb	r2, [r7, #23]
 80099e6:	79fb      	ldrb	r3, [r7, #7]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d3d3      	bcc.n	8009994 <IntToUnicode+0x18>
  }
}
 80099ec:	bf00      	nop
 80099ee:	bf00      	nop
 80099f0:	371c      	adds	r7, #28
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
	...

080099fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b08a      	sub	sp, #40	; 0x28
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a04:	f107 0314 	add.w	r3, r7, #20
 8009a08:	2200      	movs	r2, #0
 8009a0a:	601a      	str	r2, [r3, #0]
 8009a0c:	605a      	str	r2, [r3, #4]
 8009a0e:	609a      	str	r2, [r3, #8]
 8009a10:	60da      	str	r2, [r3, #12]
 8009a12:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a1c      	ldr	r2, [pc, #112]	; (8009a8c <HAL_PCD_MspInit+0x90>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d131      	bne.n	8009a82 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a1e:	4b1c      	ldr	r3, [pc, #112]	; (8009a90 <HAL_PCD_MspInit+0x94>)
 8009a20:	695b      	ldr	r3, [r3, #20]
 8009a22:	4a1b      	ldr	r2, [pc, #108]	; (8009a90 <HAL_PCD_MspInit+0x94>)
 8009a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a28:	6153      	str	r3, [r2, #20]
 8009a2a:	4b19      	ldr	r3, [pc, #100]	; (8009a90 <HAL_PCD_MspInit+0x94>)
 8009a2c:	695b      	ldr	r3, [r3, #20]
 8009a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a32:	613b      	str	r3, [r7, #16]
 8009a34:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8009a36:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a3c:	2302      	movs	r3, #2
 8009a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a40:	2300      	movs	r3, #0
 8009a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009a44:	2303      	movs	r3, #3
 8009a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8009a48:	230e      	movs	r3, #14
 8009a4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a4c:	f107 0314 	add.w	r3, r7, #20
 8009a50:	4619      	mov	r1, r3
 8009a52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009a56:	f7f7 ff23 	bl	80018a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009a5a:	4b0d      	ldr	r3, [pc, #52]	; (8009a90 <HAL_PCD_MspInit+0x94>)
 8009a5c:	69db      	ldr	r3, [r3, #28]
 8009a5e:	4a0c      	ldr	r2, [pc, #48]	; (8009a90 <HAL_PCD_MspInit+0x94>)
 8009a60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009a64:	61d3      	str	r3, [r2, #28]
 8009a66:	4b0a      	ldr	r3, [pc, #40]	; (8009a90 <HAL_PCD_MspInit+0x94>)
 8009a68:	69db      	ldr	r3, [r3, #28]
 8009a6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a6e:	60fb      	str	r3, [r7, #12]
 8009a70:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8009a72:	2200      	movs	r2, #0
 8009a74:	2100      	movs	r1, #0
 8009a76:	2014      	movs	r0, #20
 8009a78:	f7f7 fedb 	bl	8001832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8009a7c:	2014      	movs	r0, #20
 8009a7e:	f7f7 fef4 	bl	800186a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009a82:	bf00      	nop
 8009a84:	3728      	adds	r7, #40	; 0x28
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	40005c00 	.word	0x40005c00
 8009a90:	40021000 	.word	0x40021000

08009a94 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	4610      	mov	r0, r2
 8009aac:	f7fe fdc5 	bl	800863a <USBD_LL_SetupStage>
}
 8009ab0:	bf00      	nop
 8009ab2:	3708      	adds	r7, #8
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009aca:	78fa      	ldrb	r2, [r7, #3]
 8009acc:	6879      	ldr	r1, [r7, #4]
 8009ace:	4613      	mov	r3, r2
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	4413      	add	r3, r2
 8009ad4:	00db      	lsls	r3, r3, #3
 8009ad6:	440b      	add	r3, r1
 8009ad8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	78fb      	ldrb	r3, [r7, #3]
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	f7fe fdf7 	bl	80086d4 <USBD_LL_DataOutStage>
}
 8009ae6:	bf00      	nop
 8009ae8:	3708      	adds	r7, #8
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b082      	sub	sp, #8
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
 8009af6:	460b      	mov	r3, r1
 8009af8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009b00:	78fa      	ldrb	r2, [r7, #3]
 8009b02:	6879      	ldr	r1, [r7, #4]
 8009b04:	4613      	mov	r3, r2
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	4413      	add	r3, r2
 8009b0a:	00db      	lsls	r3, r3, #3
 8009b0c:	440b      	add	r3, r1
 8009b0e:	333c      	adds	r3, #60	; 0x3c
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	78fb      	ldrb	r3, [r7, #3]
 8009b14:	4619      	mov	r1, r3
 8009b16:	f7fe fe4e 	bl	80087b6 <USBD_LL_DataInStage>
}
 8009b1a:	bf00      	nop
 8009b1c:	3708      	adds	r7, #8
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b082      	sub	sp, #8
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7fe ff61 	bl	80089f8 <USBD_LL_SOF>
}
 8009b36:	bf00      	nop
 8009b38:	3708      	adds	r7, #8
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b084      	sub	sp, #16
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009b46:	2301      	movs	r3, #1
 8009b48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	689b      	ldr	r3, [r3, #8]
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	d001      	beq.n	8009b56 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009b52:	f7f6 fd8d 	bl	8000670 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009b5c:	7bfa      	ldrb	r2, [r7, #15]
 8009b5e:	4611      	mov	r1, r2
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7fe ff0e 	bl	8008982 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f7fe fec7 	bl	8008900 <USBD_LL_Reset>
}
 8009b72:	bf00      	nop
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
	...

08009b7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7fe ff09 	bl	80089a2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	699b      	ldr	r3, [r3, #24]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d005      	beq.n	8009ba4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b98:	4b04      	ldr	r3, [pc, #16]	; (8009bac <HAL_PCD_SuspendCallback+0x30>)
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	4a03      	ldr	r2, [pc, #12]	; (8009bac <HAL_PCD_SuspendCallback+0x30>)
 8009b9e:	f043 0306 	orr.w	r3, r3, #6
 8009ba2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009ba4:	bf00      	nop
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	e000ed00 	.word	0xe000ed00

08009bb0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7fe ff04 	bl	80089cc <USBD_LL_Resume>
}
 8009bc4:	bf00      	nop
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009bd4:	4a28      	ldr	r2, [pc, #160]	; (8009c78 <USBD_LL_Init+0xac>)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	4a26      	ldr	r2, [pc, #152]	; (8009c78 <USBD_LL_Init+0xac>)
 8009be0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009be4:	4b24      	ldr	r3, [pc, #144]	; (8009c78 <USBD_LL_Init+0xac>)
 8009be6:	4a25      	ldr	r2, [pc, #148]	; (8009c7c <USBD_LL_Init+0xb0>)
 8009be8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009bea:	4b23      	ldr	r3, [pc, #140]	; (8009c78 <USBD_LL_Init+0xac>)
 8009bec:	2208      	movs	r2, #8
 8009bee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009bf0:	4b21      	ldr	r3, [pc, #132]	; (8009c78 <USBD_LL_Init+0xac>)
 8009bf2:	2202      	movs	r2, #2
 8009bf4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009bf6:	4b20      	ldr	r3, [pc, #128]	; (8009c78 <USBD_LL_Init+0xac>)
 8009bf8:	2202      	movs	r2, #2
 8009bfa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009bfc:	4b1e      	ldr	r3, [pc, #120]	; (8009c78 <USBD_LL_Init+0xac>)
 8009bfe:	2200      	movs	r2, #0
 8009c00:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009c02:	4b1d      	ldr	r3, [pc, #116]	; (8009c78 <USBD_LL_Init+0xac>)
 8009c04:	2200      	movs	r2, #0
 8009c06:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009c08:	481b      	ldr	r0, [pc, #108]	; (8009c78 <USBD_LL_Init+0xac>)
 8009c0a:	f7f7 ffdb 	bl	8001bc4 <HAL_PCD_Init>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d001      	beq.n	8009c18 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009c14:	f7f6 fd2c 	bl	8000670 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c1e:	2318      	movs	r3, #24
 8009c20:	2200      	movs	r2, #0
 8009c22:	2100      	movs	r1, #0
 8009c24:	f7f9 fc64 	bl	80034f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c2e:	2358      	movs	r3, #88	; 0x58
 8009c30:	2200      	movs	r2, #0
 8009c32:	2180      	movs	r1, #128	; 0x80
 8009c34:	f7f9 fc5c 	bl	80034f0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c3e:	23c0      	movs	r3, #192	; 0xc0
 8009c40:	2200      	movs	r2, #0
 8009c42:	2181      	movs	r1, #129	; 0x81
 8009c44:	f7f9 fc54 	bl	80034f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c4e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009c52:	2200      	movs	r2, #0
 8009c54:	2101      	movs	r1, #1
 8009c56:	f7f9 fc4b 	bl	80034f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c64:	2200      	movs	r2, #0
 8009c66:	2182      	movs	r1, #130	; 0x82
 8009c68:	f7f9 fc42 	bl	80034f0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3708      	adds	r7, #8
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	20000f50 	.word	0x20000f50
 8009c7c:	40005c00 	.word	0x40005c00

08009c80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7f8 f866 	bl	8001d68 <HAL_PCD_Start>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ca0:	7bfb      	ldrb	r3, [r7, #15]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f000 f954 	bl	8009f50 <USBD_Get_USB_Status>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cac:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3710      	adds	r7, #16
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b084      	sub	sp, #16
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
 8009cbe:	4608      	mov	r0, r1
 8009cc0:	4611      	mov	r1, r2
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	70fb      	strb	r3, [r7, #3]
 8009cc8:	460b      	mov	r3, r1
 8009cca:	70bb      	strb	r3, [r7, #2]
 8009ccc:	4613      	mov	r3, r2
 8009cce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009cde:	78bb      	ldrb	r3, [r7, #2]
 8009ce0:	883a      	ldrh	r2, [r7, #0]
 8009ce2:	78f9      	ldrb	r1, [r7, #3]
 8009ce4:	f7f8 f95f 	bl	8001fa6 <HAL_PCD_EP_Open>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cec:	7bfb      	ldrb	r3, [r7, #15]
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f000 f92e 	bl	8009f50 <USBD_Get_USB_Status>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b084      	sub	sp, #16
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d12:	2300      	movs	r3, #0
 8009d14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d1c:	78fa      	ldrb	r2, [r7, #3]
 8009d1e:	4611      	mov	r1, r2
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7f8 f99d 	bl	8002060 <HAL_PCD_EP_Close>
 8009d26:	4603      	mov	r3, r0
 8009d28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d2a:	7bfb      	ldrb	r3, [r7, #15]
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f000 f90f 	bl	8009f50 <USBD_Get_USB_Status>
 8009d32:	4603      	mov	r3, r0
 8009d34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d36:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	460b      	mov	r3, r1
 8009d4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d50:	2300      	movs	r3, #0
 8009d52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d5a:	78fa      	ldrb	r2, [r7, #3]
 8009d5c:	4611      	mov	r1, r2
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7f8 fa46 	bl	80021f0 <HAL_PCD_EP_SetStall>
 8009d64:	4603      	mov	r3, r0
 8009d66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d68:	7bfb      	ldrb	r3, [r7, #15]
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f000 f8f0 	bl	8009f50 <USBD_Get_USB_Status>
 8009d70:	4603      	mov	r3, r0
 8009d72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d74:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b084      	sub	sp, #16
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
 8009d86:	460b      	mov	r3, r1
 8009d88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d98:	78fa      	ldrb	r2, [r7, #3]
 8009d9a:	4611      	mov	r1, r2
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f7f8 fa79 	bl	8002294 <HAL_PCD_EP_ClrStall>
 8009da2:	4603      	mov	r3, r0
 8009da4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009da6:	7bfb      	ldrb	r3, [r7, #15]
 8009da8:	4618      	mov	r0, r3
 8009daa:	f000 f8d1 	bl	8009f50 <USBD_Get_USB_Status>
 8009dae:	4603      	mov	r3, r0
 8009db0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009db2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3710      	adds	r7, #16
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009dce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009dd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	da0c      	bge.n	8009df2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009dd8:	78fb      	ldrb	r3, [r7, #3]
 8009dda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dde:	68f9      	ldr	r1, [r7, #12]
 8009de0:	1c5a      	adds	r2, r3, #1
 8009de2:	4613      	mov	r3, r2
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	4413      	add	r3, r2
 8009de8:	00db      	lsls	r3, r3, #3
 8009dea:	440b      	add	r3, r1
 8009dec:	3302      	adds	r3, #2
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	e00b      	b.n	8009e0a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009df2:	78fb      	ldrb	r3, [r7, #3]
 8009df4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009df8:	68f9      	ldr	r1, [r7, #12]
 8009dfa:	4613      	mov	r3, r2
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	4413      	add	r3, r2
 8009e00:	00db      	lsls	r3, r3, #3
 8009e02:	440b      	add	r3, r1
 8009e04:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009e08:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3714      	adds	r7, #20
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr

08009e16 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b084      	sub	sp, #16
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
 8009e1e:	460b      	mov	r3, r1
 8009e20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e22:	2300      	movs	r3, #0
 8009e24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e26:	2300      	movs	r3, #0
 8009e28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e30:	78fa      	ldrb	r2, [r7, #3]
 8009e32:	4611      	mov	r1, r2
 8009e34:	4618      	mov	r0, r3
 8009e36:	f7f8 f891 	bl	8001f5c <HAL_PCD_SetAddress>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e3e:	7bfb      	ldrb	r3, [r7, #15]
 8009e40:	4618      	mov	r0, r3
 8009e42:	f000 f885 	bl	8009f50 <USBD_Get_USB_Status>
 8009e46:	4603      	mov	r3, r0
 8009e48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3710      	adds	r7, #16
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	607a      	str	r2, [r7, #4]
 8009e5e:	461a      	mov	r2, r3
 8009e60:	460b      	mov	r3, r1
 8009e62:	72fb      	strb	r3, [r7, #11]
 8009e64:	4613      	mov	r3, r2
 8009e66:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009e76:	893b      	ldrh	r3, [r7, #8]
 8009e78:	7af9      	ldrb	r1, [r7, #11]
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	f7f8 f981 	bl	8002182 <HAL_PCD_EP_Transmit>
 8009e80:	4603      	mov	r3, r0
 8009e82:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e84:	7dfb      	ldrb	r3, [r7, #23]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f000 f862 	bl	8009f50 <USBD_Get_USB_Status>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e90:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3718      	adds	r7, #24
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b086      	sub	sp, #24
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	60f8      	str	r0, [r7, #12]
 8009ea2:	607a      	str	r2, [r7, #4]
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	72fb      	strb	r3, [r7, #11]
 8009eaa:	4613      	mov	r3, r2
 8009eac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009ebc:	893b      	ldrh	r3, [r7, #8]
 8009ebe:	7af9      	ldrb	r1, [r7, #11]
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	f7f8 f915 	bl	80020f0 <HAL_PCD_EP_Receive>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009eca:	7dfb      	ldrb	r3, [r7, #23]
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f000 f83f 	bl	8009f50 <USBD_Get_USB_Status>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ed6:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3718      	adds	r7, #24
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	460b      	mov	r3, r1
 8009eea:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ef2:	78fa      	ldrb	r2, [r7, #3]
 8009ef4:	4611      	mov	r1, r2
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7f8 f92b 	bl	8002152 <HAL_PCD_EP_GetRxCount>
 8009efc:	4603      	mov	r3, r0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3708      	adds	r7, #8
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
	...

08009f08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009f10:	4b03      	ldr	r3, [pc, #12]	; (8009f20 <USBD_static_malloc+0x18>)
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	370c      	adds	r7, #12
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	2000123c 	.word	0x2000123c

08009f24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]

}
 8009f2c:	bf00      	nop
 8009f2e:	370c      	adds	r7, #12
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	460b      	mov	r3, r1
 8009f42:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009f44:	bf00      	nop
 8009f46:	370c      	adds	r7, #12
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr

08009f50 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	4603      	mov	r3, r0
 8009f58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f5e:	79fb      	ldrb	r3, [r7, #7]
 8009f60:	2b03      	cmp	r3, #3
 8009f62:	d817      	bhi.n	8009f94 <USBD_Get_USB_Status+0x44>
 8009f64:	a201      	add	r2, pc, #4	; (adr r2, 8009f6c <USBD_Get_USB_Status+0x1c>)
 8009f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6a:	bf00      	nop
 8009f6c:	08009f7d 	.word	0x08009f7d
 8009f70:	08009f83 	.word	0x08009f83
 8009f74:	08009f89 	.word	0x08009f89
 8009f78:	08009f8f 	.word	0x08009f8f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8009f80:	e00b      	b.n	8009f9a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f82:	2302      	movs	r3, #2
 8009f84:	73fb      	strb	r3, [r7, #15]
    break;
 8009f86:	e008      	b.n	8009f9a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f8c:	e005      	b.n	8009f9a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f8e:	2302      	movs	r3, #2
 8009f90:	73fb      	strb	r3, [r7, #15]
    break;
 8009f92:	e002      	b.n	8009f9a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009f94:	2302      	movs	r3, #2
 8009f96:	73fb      	strb	r3, [r7, #15]
    break;
 8009f98:	bf00      	nop
  }
  return usb_status;
 8009f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3714      	adds	r7, #20
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <memset>:
 8009fa8:	4402      	add	r2, r0
 8009faa:	4603      	mov	r3, r0
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d100      	bne.n	8009fb2 <memset+0xa>
 8009fb0:	4770      	bx	lr
 8009fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8009fb6:	e7f9      	b.n	8009fac <memset+0x4>

08009fb8 <__libc_init_array>:
 8009fb8:	b570      	push	{r4, r5, r6, lr}
 8009fba:	4d0d      	ldr	r5, [pc, #52]	; (8009ff0 <__libc_init_array+0x38>)
 8009fbc:	4c0d      	ldr	r4, [pc, #52]	; (8009ff4 <__libc_init_array+0x3c>)
 8009fbe:	1b64      	subs	r4, r4, r5
 8009fc0:	10a4      	asrs	r4, r4, #2
 8009fc2:	2600      	movs	r6, #0
 8009fc4:	42a6      	cmp	r6, r4
 8009fc6:	d109      	bne.n	8009fdc <__libc_init_array+0x24>
 8009fc8:	4d0b      	ldr	r5, [pc, #44]	; (8009ff8 <__libc_init_array+0x40>)
 8009fca:	4c0c      	ldr	r4, [pc, #48]	; (8009ffc <__libc_init_array+0x44>)
 8009fcc:	f000 f818 	bl	800a000 <_init>
 8009fd0:	1b64      	subs	r4, r4, r5
 8009fd2:	10a4      	asrs	r4, r4, #2
 8009fd4:	2600      	movs	r6, #0
 8009fd6:	42a6      	cmp	r6, r4
 8009fd8:	d105      	bne.n	8009fe6 <__libc_init_array+0x2e>
 8009fda:	bd70      	pop	{r4, r5, r6, pc}
 8009fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fe0:	4798      	blx	r3
 8009fe2:	3601      	adds	r6, #1
 8009fe4:	e7ee      	b.n	8009fc4 <__libc_init_array+0xc>
 8009fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fea:	4798      	blx	r3
 8009fec:	3601      	adds	r6, #1
 8009fee:	e7f2      	b.n	8009fd6 <__libc_init_array+0x1e>
 8009ff0:	0800a090 	.word	0x0800a090
 8009ff4:	0800a090 	.word	0x0800a090
 8009ff8:	0800a090 	.word	0x0800a090
 8009ffc:	0800a094 	.word	0x0800a094

0800a000 <_init>:
 800a000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a002:	bf00      	nop
 800a004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a006:	bc08      	pop	{r3}
 800a008:	469e      	mov	lr, r3
 800a00a:	4770      	bx	lr

0800a00c <_fini>:
 800a00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a00e:	bf00      	nop
 800a010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a012:	bc08      	pop	{r3}
 800a014:	469e      	mov	lr, r3
 800a016:	4770      	bx	lr
