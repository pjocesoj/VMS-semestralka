
VMS semestralka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd58  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800bee0  0800bee0  0001bee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf60  0800bf60  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800bf60  0800bf60  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bf60  0800bf60  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf60  0800bf60  0001bf60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf64  0800bf64  0001bf64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800bf68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020180  2**0
                  CONTENTS
 10 .bss          000013cc  20000180  20000180  00020180  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000154c  2000154c  00020180  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000163c0  00000000  00000000  000201f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003995  00000000  00000000  000365b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001310  00000000  00000000  00039f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e7e  00000000  00000000  0003b258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002154c  00000000  00000000  0003c0d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019d2e  00000000  00000000  0005d622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bfb40  00000000  00000000  00077350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004e58  00000000  00000000  00136e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0013bce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bec8 	.word	0x0800bec8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	0800bec8 	.word	0x0800bec8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
	if (htim == &htim17)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4a0c      	ldr	r2, [pc, #48]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d105      	bne.n	80001f4 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		//TIM17_monitor();
		otocKruhem(smer_otaceni);
 80001e8:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80001ea:	f993 3000 	ldrsb.w	r3, [r3]
 80001ee:	4618      	mov	r0, r3
 80001f0:	f009 fd52 	bl	8009c98 <otocKruhem>
	}
	if (htim == &htim16)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4a09      	ldr	r2, [pc, #36]	; (800021c <HAL_TIM_PeriodElapsedCallback+0x44>)
 80001f8:	4293      	cmp	r3, r2
 80001fa:	d106      	bne.n	800020a <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		//TIM16_monitor();
		RPM=pulsu;
 80001fc:	4b08      	ldr	r3, [pc, #32]	; (8000220 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80001fe:	881a      	ldrh	r2, [r3, #0]
 8000200:	4b08      	ldr	r3, [pc, #32]	; (8000224 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000202:	801a      	strh	r2, [r3, #0]
		pulsu=0;
 8000204:	4b06      	ldr	r3, [pc, #24]	; (8000220 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000206:	2200      	movs	r2, #0
 8000208:	801a      	strh	r2, [r3, #0]
	}
	if (htim == &htim2)
	{
		//TIM2_monitor();
	}
}
 800020a:	bf00      	nop
 800020c:	3708      	adds	r7, #8
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	200002d8 	.word	0x200002d8
 8000218:	20000000 	.word	0x20000000
 800021c:	2000028c 	.word	0x2000028c
 8000220:	20000328 	.word	0x20000328
 8000224:	2000032a 	.word	0x2000032a

08000228 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
	//PWM_monitor(htim);
}
 8000230:	bf00      	nop
 8000232:	370c      	adds	r7, #12
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr

0800023c <dutyCycle>:

uint16_t dutyCycle(uint8_t adc, uint16_t period)
{
 800023c:	b480      	push	{r7}
 800023e:	b087      	sub	sp, #28
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	460a      	mov	r2, r1
 8000246:	71fb      	strb	r3, [r7, #7]
 8000248:	4613      	mov	r3, r2
 800024a:	80bb      	strh	r3, [r7, #4]
	uint8_t min = 211;
 800024c:	23d3      	movs	r3, #211	; 0xd3
 800024e:	74fb      	strb	r3, [r7, #19]
	float max = 255 - min;
 8000250:	7cfb      	ldrb	r3, [r7, #19]
 8000252:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8000256:	ee07 3a90 	vmov	s15, r3
 800025a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800025e:	edc7 7a03 	vstr	s15, [r7, #12]
	float val = adc - min;
 8000262:	79fa      	ldrb	r2, [r7, #7]
 8000264:	7cfb      	ldrb	r3, [r7, #19]
 8000266:	1ad3      	subs	r3, r2, r3
 8000268:	ee07 3a90 	vmov	s15, r3
 800026c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000270:	edc7 7a05 	vstr	s15, [r7, #20]

	if (val < 0){val = 0;}
 8000274:	edd7 7a05 	vldr	s15, [r7, #20]
 8000278:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800027c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000280:	d502      	bpl.n	8000288 <dutyCycle+0x4c>
 8000282:	f04f 0300 	mov.w	r3, #0
 8000286:	617b      	str	r3, [r7, #20]
	if (adc >= 252){val = max;} //pri spatnem kontaktu nedosahne na max
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	2bfb      	cmp	r3, #251	; 0xfb
 800028c:	d901      	bls.n	8000292 <dutyCycle+0x56>
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	617b      	str	r3, [r7, #20]

	float proc = val / max;
 8000292:	edd7 6a05 	vldr	s13, [r7, #20]
 8000296:	ed97 7a03 	vldr	s14, [r7, #12]
 800029a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800029e:	edc7 7a02 	vstr	s15, [r7, #8]
	p = proc * 100;
 80002a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80002a6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80002dc <dutyCycle+0xa0>
 80002aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80002ae:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <dutyCycle+0xa4>)
 80002b0:	edc3 7a00 	vstr	s15, [r3]
	return proc * period;
 80002b4:	88bb      	ldrh	r3, [r7, #4]
 80002b6:	ee07 3a90 	vmov	s15, r3
 80002ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80002be:	edd7 7a02 	vldr	s15, [r7, #8]
 80002c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80002c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80002ca:	ee17 3a90 	vmov	r3, s15
 80002ce:	b29b      	uxth	r3, r3
}
 80002d0:	4618      	mov	r0, r3
 80002d2:	371c      	adds	r7, #28
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	42c80000 	.word	0x42c80000
 80002e0:	20000330 	.word	0x20000330

080002e4 <updateDuty>:

void updateDuty(uint16_t duty)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	80fb      	strh	r3, [r7, #6]
	if (smer_otaceni == DOPRAVA)
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <updateDuty+0x44>)
 80002f0:	f993 3000 	ldrsb.w	r3, [r3]
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d108      	bne.n	800030a <updateDuty+0x26>
	{
		__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_2,duty);
 80002f8:	4b0c      	ldr	r3, [pc, #48]	; (800032c <updateDuty+0x48>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	88fa      	ldrh	r2, [r7, #6]
 80002fe:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_4,0);
 8000300:	4b0a      	ldr	r3, [pc, #40]	; (800032c <updateDuty+0x48>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2200      	movs	r2, #0
 8000306:	641a      	str	r2, [r3, #64]	; 0x40
	else
	{
		__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_2,0);
		__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_4,duty);
	}
}
 8000308:	e007      	b.n	800031a <updateDuty+0x36>
		__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_2,0);
 800030a:	4b08      	ldr	r3, [pc, #32]	; (800032c <updateDuty+0x48>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	2200      	movs	r2, #0
 8000310:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_4,duty);
 8000312:	4b06      	ldr	r3, [pc, #24]	; (800032c <updateDuty+0x48>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	88fa      	ldrh	r2, [r7, #6]
 8000318:	641a      	str	r2, [r3, #64]	; 0x40
}
 800031a:	bf00      	nop
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	20000000 	.word	0x20000000
 800032c:	20000240 	.word	0x20000240

08000330 <zmenSmer>:
void zmenSmer()
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	if (smer_otaceni == DOPRAVA)
 8000334:	4b09      	ldr	r3, [pc, #36]	; (800035c <zmenSmer+0x2c>)
 8000336:	f993 3000 	ldrsb.w	r3, [r3]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d103      	bne.n	8000346 <zmenSmer+0x16>
	{
		smer_otaceni = DOLEVA;
 800033e:	4b07      	ldr	r3, [pc, #28]	; (800035c <zmenSmer+0x2c>)
 8000340:	22ff      	movs	r2, #255	; 0xff
 8000342:	701a      	strb	r2, [r3, #0]
 8000344:	e002      	b.n	800034c <zmenSmer+0x1c>
	}
	else
	{
		smer_otaceni = DOPRAVA;
 8000346:	4b05      	ldr	r3, [pc, #20]	; (800035c <zmenSmer+0x2c>)
 8000348:	2201      	movs	r2, #1
 800034a:	701a      	strb	r2, [r3, #0]
	}

	updateDuty(duty);
 800034c:	4b04      	ldr	r3, [pc, #16]	; (8000360 <zmenSmer+0x30>)
 800034e:	881b      	ldrh	r3, [r3, #0]
 8000350:	4618      	mov	r0, r3
 8000352:	f7ff ffc7 	bl	80002e4 <updateDuty>
}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	20000000 	.word	0x20000000
 8000360:	2000032e 	.word	0x2000032e

08000364 <zpracuj_ADC3>:

void zpracuj_ADC3(uint16_t val)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	80fb      	strh	r3, [r7, #6]
	//uint16_t puls_new=HAL_ADC_GetValue(&hadc3);

	if(val>200){puls_new=1;}
 800036e:	88fb      	ldrh	r3, [r7, #6]
 8000370:	2bc8      	cmp	r3, #200	; 0xc8
 8000372:	d903      	bls.n	800037c <zpracuj_ADC3+0x18>
 8000374:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <zpracuj_ADC3+0x50>)
 8000376:	2201      	movs	r2, #1
 8000378:	801a      	strh	r2, [r3, #0]
 800037a:	e002      	b.n	8000382 <zpracuj_ADC3+0x1e>
	else {puls_new=0;}
 800037c:	4b0d      	ldr	r3, [pc, #52]	; (80003b4 <zpracuj_ADC3+0x50>)
 800037e:	2200      	movs	r2, #0
 8000380:	801a      	strh	r2, [r3, #0]

	if(puls_old<puls_new)
 8000382:	4b0d      	ldr	r3, [pc, #52]	; (80003b8 <zpracuj_ADC3+0x54>)
 8000384:	881a      	ldrh	r2, [r3, #0]
 8000386:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <zpracuj_ADC3+0x50>)
 8000388:	881b      	ldrh	r3, [r3, #0]
 800038a:	429a      	cmp	r2, r3
 800038c:	d205      	bcs.n	800039a <zpracuj_ADC3+0x36>
	{
		pulsu++;
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <zpracuj_ADC3+0x58>)
 8000390:	881b      	ldrh	r3, [r3, #0]
 8000392:	3301      	adds	r3, #1
 8000394:	b29a      	uxth	r2, r3
 8000396:	4b09      	ldr	r3, [pc, #36]	; (80003bc <zpracuj_ADC3+0x58>)
 8000398:	801a      	strh	r2, [r3, #0]
	}

	puls_old=puls_new;
 800039a:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <zpracuj_ADC3+0x50>)
 800039c:	881a      	ldrh	r2, [r3, #0]
 800039e:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <zpracuj_ADC3+0x54>)
 80003a0:	801a      	strh	r2, [r3, #0]
	adc3_old=val;
 80003a2:	4a07      	ldr	r2, [pc, #28]	; (80003c0 <zpracuj_ADC3+0x5c>)
 80003a4:	88fb      	ldrh	r3, [r7, #6]
 80003a6:	8013      	strh	r3, [r2, #0]
}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr
 80003b4:	20000326 	.word	0x20000326
 80003b8:	20000324 	.word	0x20000324
 80003bc:	20000328 	.word	0x20000328
 80003c0:	2000019e 	.word	0x2000019e

080003c4 <cti_ADC>:

uint16_t cti_ADC(ADC_HandleTypeDef* hadc)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	uint16_t ret=0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	81fb      	strh	r3, [r7, #14]
	HAL_ADC_Start(hadc);
 80003d0:	6878      	ldr	r0, [r7, #4]
 80003d2:	f000 ff73 	bl	80012bc <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK)
 80003d6:	210a      	movs	r1, #10
 80003d8:	6878      	ldr	r0, [r7, #4]
 80003da:	f001 f8bb 	bl	8001554 <HAL_ADC_PollForConversion>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d104      	bne.n	80003ee <cti_ADC+0x2a>
	{
		ret = HAL_ADC_GetValue(hadc);
 80003e4:	6878      	ldr	r0, [r7, #4]
 80003e6:	f001 f9b7 	bl	8001758 <HAL_ADC_GetValue>
 80003ea:	4603      	mov	r3, r0
 80003ec:	81fb      	strh	r3, [r7, #14]
	}
	HAL_ADC_Stop(hadc);
 80003ee:	6878      	ldr	r0, [r7, #4]
 80003f0:	f001 f87a 	bl	80014e8 <HAL_ADC_Stop>

	return ret;
 80003f4:	89fb      	ldrh	r3, [r7, #14]
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}

080003fe <spocitejPerioduTIM>:
void spocitejPerioduTIM(TIM_HandleTypeDef* htim)
{
 80003fe:	b580      	push	{r7, lr}
 8000400:	b086      	sub	sp, #24
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]
	uint32_t APB2=HAL_RCC_GetPCLK2Freq();
 8000406:	f005 fbfd 	bl	8005c04 <HAL_RCC_GetPCLK2Freq>
 800040a:	6178      	str	r0, [r7, #20]
	//uint32_t tim16_psc=&htim16.Instance->PSC; //z nejakeho duvodu vrací jinou hodnotu než debug
	uint32_t psc=htim->Instance->PSC; //musí být pointer jinak vrací adresy (nebo co to je)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000412:	613b      	str	r3, [r7, #16]
	uint32_t arr=__HAL_TIM_GET_AUTORELOAD(htim);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800041a:	60fb      	str	r3, [r7, #12]

	uint32_t speed=APB2/(psc*arr);//Hz
 800041c:	693b      	ldr	r3, [r7, #16]
 800041e:	68fa      	ldr	r2, [r7, #12]
 8000420:	fb02 f303 	mul.w	r3, r2, r3
 8000424:	697a      	ldr	r2, [r7, #20]
 8000426:	fbb2 f3f3 	udiv	r3, r2, r3
 800042a:	60bb      	str	r3, [r7, #8]
}
 800042c:	bf00      	nop
 800042e:	3718      	adds	r7, #24
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}

08000434 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800043a:	f000 fcdb 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800043e:	f000 f87b 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000442:	f000 fa8f 	bl	8000964 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000446:	f000 f8db 	bl	8000600 <MX_ADC1_Init>
  MX_ADC3_Init();
 800044a:	f000 f949 	bl	80006e0 <MX_ADC3_Init>
  MX_TIM17_Init();
 800044e:	f000 fa61 	bl	8000914 <MX_TIM17_Init>
  MX_USB_DEVICE_Init();
 8000452:	f00b f843 	bl	800b4dc <MX_USB_DEVICE_Init>
  MX_TIM16_Init();
 8000456:	f000 fa35 	bl	80008c4 <MX_TIM16_Init>
  MX_TIM2_Init();
 800045a:	f000 f9b1 	bl	80007c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  defineKruh();
 800045e:	f009 fb99 	bl	8009b94 <defineKruh>
  spocitejPerioduTIM(&htim16);
 8000462:	482d      	ldr	r0, [pc, #180]	; (8000518 <main+0xe4>)
 8000464:	f7ff ffcb 	bl	80003fe <spocitejPerioduTIM>

  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 8000468:	2104      	movs	r1, #4
 800046a:	482c      	ldr	r0, [pc, #176]	; (800051c <main+0xe8>)
 800046c:	f005 fec0 	bl	80061f0 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4);
 8000470:	210c      	movs	r1, #12
 8000472:	482a      	ldr	r0, [pc, #168]	; (800051c <main+0xe8>)
 8000474:	f005 febc 	bl	80061f0 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2); //pro kontrolu
 8000478:	4828      	ldr	r0, [pc, #160]	; (800051c <main+0xe8>)
 800047a:	f005 fded 	bl	8006058 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim17);
 800047e:	4828      	ldr	r0, [pc, #160]	; (8000520 <main+0xec>)
 8000480:	f005 fdea 	bl	8006058 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 8000484:	4824      	ldr	r0, [pc, #144]	; (8000518 <main+0xe4>)
 8000486:	f005 fde7 	bl	8006058 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
	//HAL_StatusTypeDef s=HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);

	while (1)
	{
		adc_hod=cti_ADC(&hadc1);
 800048a:	4826      	ldr	r0, [pc, #152]	; (8000524 <main+0xf0>)
 800048c:	f7ff ff9a 	bl	80003c4 <cti_ADC>
 8000490:	4603      	mov	r3, r0
 8000492:	b2da      	uxtb	r2, r3
 8000494:	4b24      	ldr	r3, [pc, #144]	; (8000528 <main+0xf4>)
 8000496:	701a      	strb	r2, [r3, #0]
		duty = dutyCycle(adc_hod, 1000);
 8000498:	4b23      	ldr	r3, [pc, #140]	; (8000528 <main+0xf4>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff fecb 	bl	800023c <dutyCycle>
 80004a6:	4603      	mov	r3, r0
 80004a8:	461a      	mov	r2, r3
 80004aa:	4b20      	ldr	r3, [pc, #128]	; (800052c <main+0xf8>)
 80004ac:	801a      	strh	r2, [r3, #0]
		updateDuty(duty);
 80004ae:	4b1f      	ldr	r3, [pc, #124]	; (800052c <main+0xf8>)
 80004b0:	881b      	ldrh	r3, [r3, #0]
 80004b2:	4618      	mov	r0, r3
 80004b4:	f7ff ff16 	bl	80002e4 <updateDuty>

		adc3_new=cti_ADC(&hadc3);
 80004b8:	481d      	ldr	r0, [pc, #116]	; (8000530 <main+0xfc>)
 80004ba:	f7ff ff83 	bl	80003c4 <cti_ADC>
 80004be:	4603      	mov	r3, r0
 80004c0:	461a      	mov	r2, r3
 80004c2:	4b1c      	ldr	r3, [pc, #112]	; (8000534 <main+0x100>)
 80004c4:	801a      	strh	r2, [r3, #0]
		zpracuj_ADC3(adc3_new);
 80004c6:	4b1b      	ldr	r3, [pc, #108]	; (8000534 <main+0x100>)
 80004c8:	881b      	ldrh	r3, [r3, #0]
 80004ca:	4618      	mov	r0, r3
 80004cc:	f7ff ff4a 	bl	8000364 <zpracuj_ADC3>

		char bufferADC[4]={1,1,1,1};
 80004d0:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 80004d4:	60fb      	str	r3, [r7, #12]
		dec_ascii(adc_hod, bufferADC,4);
 80004d6:	4b14      	ldr	r3, [pc, #80]	; (8000528 <main+0xf4>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	b29b      	uxth	r3, r3
 80004dc:	f107 010c 	add.w	r1, r7, #12
 80004e0:	2204      	movs	r2, #4
 80004e2:	4618      	mov	r0, r3
 80004e4:	f009 fc32 	bl	8009d4c <dec_ascii>
		uint8_t bufferADC_[6]={bufferADC[0],bufferADC[1],bufferADC[2],bufferADC[3],'\r','\n'};
 80004e8:	7b3b      	ldrb	r3, [r7, #12]
 80004ea:	713b      	strb	r3, [r7, #4]
 80004ec:	7b7b      	ldrb	r3, [r7, #13]
 80004ee:	717b      	strb	r3, [r7, #5]
 80004f0:	7bbb      	ldrb	r3, [r7, #14]
 80004f2:	71bb      	strb	r3, [r7, #6]
 80004f4:	7bfb      	ldrb	r3, [r7, #15]
 80004f6:	71fb      	strb	r3, [r7, #7]
 80004f8:	230d      	movs	r3, #13
 80004fa:	723b      	strb	r3, [r7, #8]
 80004fc:	230a      	movs	r3, #10
 80004fe:	727b      	strb	r3, [r7, #9]
		//uint8_t bufferADC_[5]="ABC\r\n";
		CDC_Transmit_FS(bufferADC_,strlen(bufferADC_));
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff fe60 	bl	80001c8 <strlen>
 8000508:	4602      	mov	r2, r0
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	4611      	mov	r1, r2
 800050e:	4618      	mov	r0, r3
 8000510:	f00b f8a2 	bl	800b658 <CDC_Transmit_FS>
	{
 8000514:	e7b9      	b.n	800048a <main+0x56>
 8000516:	bf00      	nop
 8000518:	2000028c 	.word	0x2000028c
 800051c:	20000240 	.word	0x20000240
 8000520:	200002d8 	.word	0x200002d8
 8000524:	200001a0 	.word	0x200001a0
 8000528:	2000032c 	.word	0x2000032c
 800052c:	2000032e 	.word	0x2000032e
 8000530:	200001f0 	.word	0x200001f0
 8000534:	2000019c 	.word	0x2000019c

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b09e      	sub	sp, #120	; 0x78
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000542:	2228      	movs	r2, #40	; 0x28
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f00b fc92 	bl	800be70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800055c:	463b      	mov	r3, r7
 800055e:	223c      	movs	r2, #60	; 0x3c
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f00b fc84 	bl	800be70 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000568:	2301      	movs	r3, #1
 800056a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800056c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000570:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000576:	2301      	movs	r3, #1
 8000578:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000582:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000584:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000588:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800058e:	4618      	mov	r0, r3
 8000590:	f004 f908 	bl	80047a4 <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800059a:	f000 fa5d 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2302      	movs	r3, #2
 80005a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005b8:	2101      	movs	r1, #1
 80005ba:	4618      	mov	r0, r3
 80005bc:	f005 f930 	bl	8005820 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x92>
  {
    Error_Handler();
 80005c6:	f000 fa47 	bl	8000a58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC12
 80005ca:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <SystemClock_Config+0xc4>)
 80005cc:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80005ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005d2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80005d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005d8:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80005da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e0:	463b      	mov	r3, r7
 80005e2:	4618      	mov	r0, r3
 80005e4:	f005 fb30 	bl	8005c48 <HAL_RCCEx_PeriphCLKConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80005ee:	f000 fa33 	bl	8000a58 <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3778      	adds	r7, #120	; 0x78
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	00020180 	.word	0x00020180

08000600 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08a      	sub	sp, #40	; 0x28
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
 8000620:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000622:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <MX_ADC1_Init+0xdc>)
 8000624:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000628:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800062a:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <MX_ADC1_Init+0xdc>)
 800062c:	2200      	movs	r2, #0
 800062e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000630:	4b2a      	ldr	r3, [pc, #168]	; (80006dc <MX_ADC1_Init+0xdc>)
 8000632:	2210      	movs	r2, #16
 8000634:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <MX_ADC1_Init+0xdc>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800063c:	4b27      	ldr	r3, [pc, #156]	; (80006dc <MX_ADC1_Init+0xdc>)
 800063e:	2200      	movs	r2, #0
 8000640:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <MX_ADC1_Init+0xdc>)
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800064a:	4b24      	ldr	r3, [pc, #144]	; (80006dc <MX_ADC1_Init+0xdc>)
 800064c:	2200      	movs	r2, #0
 800064e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000650:	4b22      	ldr	r3, [pc, #136]	; (80006dc <MX_ADC1_Init+0xdc>)
 8000652:	2201      	movs	r2, #1
 8000654:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000656:	4b21      	ldr	r3, [pc, #132]	; (80006dc <MX_ADC1_Init+0xdc>)
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <MX_ADC1_Init+0xdc>)
 800065e:	2201      	movs	r2, #1
 8000660:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000662:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <MX_ADC1_Init+0xdc>)
 8000664:	2200      	movs	r2, #0
 8000666:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <MX_ADC1_Init+0xdc>)
 800066c:	2204      	movs	r2, #4
 800066e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <MX_ADC1_Init+0xdc>)
 8000672:	2200      	movs	r2, #0
 8000674:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <MX_ADC1_Init+0xdc>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800067c:	4817      	ldr	r0, [pc, #92]	; (80006dc <MX_ADC1_Init+0xdc>)
 800067e:	f000 fc3d 	bl	8000efc <HAL_ADC_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000688:	f000 f9e6 	bl	8000a58 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4619      	mov	r1, r3
 8000696:	4811      	ldr	r0, [pc, #68]	; (80006dc <MX_ADC1_Init+0xdc>)
 8000698:	f001 fe64 	bl	8002364 <HAL_ADCEx_MultiModeConfigChannel>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80006a2:	f000 f9d9 	bl	8000a58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4619      	mov	r1, r3
 80006c2:	4806      	ldr	r0, [pc, #24]	; (80006dc <MX_ADC1_Init+0xdc>)
 80006c4:	f001 fb64 	bl	8001d90 <HAL_ADC_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80006ce:	f000 f9c3 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	3728      	adds	r7, #40	; 0x28
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	200001a0 	.word	0x200001a0

080006e0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
 8000700:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000702:	4b2d      	ldr	r3, [pc, #180]	; (80007b8 <MX_ADC3_Init+0xd8>)
 8000704:	4a2d      	ldr	r2, [pc, #180]	; (80007bc <MX_ADC3_Init+0xdc>)
 8000706:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000708:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <MX_ADC3_Init+0xd8>)
 800070a:	2200      	movs	r2, #0
 800070c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800070e:	4b2a      	ldr	r3, [pc, #168]	; (80007b8 <MX_ADC3_Init+0xd8>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000714:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <MX_ADC3_Init+0xd8>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800071a:	4b27      	ldr	r3, [pc, #156]	; (80007b8 <MX_ADC3_Init+0xd8>)
 800071c:	2200      	movs	r2, #0
 800071e:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000720:	4b25      	ldr	r3, [pc, #148]	; (80007b8 <MX_ADC3_Init+0xd8>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000728:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <MX_ADC3_Init+0xd8>)
 800072a:	2200      	movs	r2, #0
 800072c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800072e:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <MX_ADC3_Init+0xd8>)
 8000730:	2201      	movs	r2, #1
 8000732:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000734:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <MX_ADC3_Init+0xd8>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800073a:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <MX_ADC3_Init+0xd8>)
 800073c:	2201      	movs	r2, #1
 800073e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000740:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <MX_ADC3_Init+0xd8>)
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_ADC3_Init+0xd8>)
 800074a:	2204      	movs	r2, #4
 800074c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_ADC3_Init+0xd8>)
 8000750:	2200      	movs	r2, #0
 8000752:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_ADC3_Init+0xd8>)
 8000756:	2200      	movs	r2, #0
 8000758:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800075a:	4817      	ldr	r0, [pc, #92]	; (80007b8 <MX_ADC3_Init+0xd8>)
 800075c:	f000 fbce 	bl	8000efc <HAL_ADC_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8000766:	f000 f977 	bl	8000a58 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	4619      	mov	r1, r3
 8000774:	4810      	ldr	r0, [pc, #64]	; (80007b8 <MX_ADC3_Init+0xd8>)
 8000776:	f001 fdf5 	bl	8002364 <HAL_ADCEx_MultiModeConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8000780:	f000 f96a 	bl	8000a58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000784:	2301      	movs	r3, #1
 8000786:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000788:	2301      	movs	r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	4619      	mov	r1, r3
 80007a0:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_ADC3_Init+0xd8>)
 80007a2:	f001 faf5 	bl	8001d90 <HAL_ADC_ConfigChannel>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80007ac:	f000 f954 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	3728      	adds	r7, #40	; 0x28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	200001f0 	.word	0x200001f0
 80007bc:	50000400 	.word	0x50000400

080007c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08e      	sub	sp, #56	; 0x38
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007e0:	463b      	mov	r3, r7
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
 80007ee:	615a      	str	r2, [r3, #20]
 80007f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f2:	4b33      	ldr	r3, [pc, #204]	; (80008c0 <MX_TIM2_Init+0x100>)
 80007f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000;
 80007fa:	4b31      	ldr	r3, [pc, #196]	; (80008c0 <MX_TIM2_Init+0x100>)
 80007fc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000800:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000802:	4b2f      	ldr	r3, [pc, #188]	; (80008c0 <MX_TIM2_Init+0x100>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000808:	4b2d      	ldr	r3, [pc, #180]	; (80008c0 <MX_TIM2_Init+0x100>)
 800080a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800080e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000810:	4b2b      	ldr	r3, [pc, #172]	; (80008c0 <MX_TIM2_Init+0x100>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000816:	4b2a      	ldr	r3, [pc, #168]	; (80008c0 <MX_TIM2_Init+0x100>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800081c:	4828      	ldr	r0, [pc, #160]	; (80008c0 <MX_TIM2_Init+0x100>)
 800081e:	f005 fbc3 	bl	8005fa8 <HAL_TIM_Base_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000828:	f000 f916 	bl	8000a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000832:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000836:	4619      	mov	r1, r3
 8000838:	4821      	ldr	r0, [pc, #132]	; (80008c0 <MX_TIM2_Init+0x100>)
 800083a:	f006 f859 	bl	80068f0 <HAL_TIM_ConfigClockSource>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000844:	f000 f908 	bl	8000a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000848:	481d      	ldr	r0, [pc, #116]	; (80008c0 <MX_TIM2_Init+0x100>)
 800084a:	f005 fc6f 	bl	800612c <HAL_TIM_PWM_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000854:	f000 f900 	bl	8000a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	4816      	ldr	r0, [pc, #88]	; (80008c0 <MX_TIM2_Init+0x100>)
 8000868:	f006 fd50 	bl	800730c <HAL_TIMEx_MasterConfigSynchronization>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000872:	f000 f8f1 	bl	8000a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000876:	2360      	movs	r3, #96	; 0x60
 8000878:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000886:	463b      	mov	r3, r7
 8000888:	2204      	movs	r2, #4
 800088a:	4619      	mov	r1, r3
 800088c:	480c      	ldr	r0, [pc, #48]	; (80008c0 <MX_TIM2_Init+0x100>)
 800088e:	f005 ff1b 	bl	80066c8 <HAL_TIM_PWM_ConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000898:	f000 f8de 	bl	8000a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800089c:	463b      	mov	r3, r7
 800089e:	220c      	movs	r2, #12
 80008a0:	4619      	mov	r1, r3
 80008a2:	4807      	ldr	r0, [pc, #28]	; (80008c0 <MX_TIM2_Init+0x100>)
 80008a4:	f005 ff10 	bl	80066c8 <HAL_TIM_PWM_ConfigChannel>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80008ae:	f000 f8d3 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008b2:	4803      	ldr	r0, [pc, #12]	; (80008c0 <MX_TIM2_Init+0x100>)
 80008b4:	f000 f9c8 	bl	8000c48 <HAL_TIM_MspPostInit>

}
 80008b8:	bf00      	nop
 80008ba:	3738      	adds	r7, #56	; 0x38
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000240 	.word	0x20000240

080008c4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80008c8:	4b10      	ldr	r3, [pc, #64]	; (800090c <MX_TIM16_Init+0x48>)
 80008ca:	4a11      	ldr	r2, [pc, #68]	; (8000910 <MX_TIM16_Init+0x4c>)
 80008cc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48000;
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_TIM16_Init+0x48>)
 80008d0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80008d4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <MX_TIM16_Init+0x48>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 500;
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_TIM16_Init+0x48>)
 80008de:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80008e2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_TIM16_Init+0x48>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_TIM16_Init+0x48>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_TIM16_Init+0x48>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_TIM16_Init+0x48>)
 80008f8:	f005 fb56 	bl	8005fa8 <HAL_TIM_Base_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000902:	f000 f8a9 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	2000028c 	.word	0x2000028c
 8000910:	40014400 	.word	0x40014400

08000914 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000918:	4b10      	ldr	r3, [pc, #64]	; (800095c <MX_TIM17_Init+0x48>)
 800091a:	4a11      	ldr	r2, [pc, #68]	; (8000960 <MX_TIM17_Init+0x4c>)
 800091c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48000;
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_TIM17_Init+0x48>)
 8000920:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000924:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <MX_TIM17_Init+0x48>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 800092c:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_TIM17_Init+0x48>)
 800092e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000932:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_TIM17_Init+0x48>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_TIM17_Init+0x48>)
 800093c:	2200      	movs	r2, #0
 800093e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_TIM17_Init+0x48>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_TIM17_Init+0x48>)
 8000948:	f005 fb2e 	bl	8005fa8 <HAL_TIM_Base_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8000952:	f000 f881 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200002d8 	.word	0x200002d8
 8000960:	40014800 	.word	0x40014800

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800097a:	4b35      	ldr	r3, [pc, #212]	; (8000a50 <MX_GPIO_Init+0xec>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	4a34      	ldr	r2, [pc, #208]	; (8000a50 <MX_GPIO_Init+0xec>)
 8000980:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000984:	6153      	str	r3, [r2, #20]
 8000986:	4b32      	ldr	r3, [pc, #200]	; (8000a50 <MX_GPIO_Init+0xec>)
 8000988:	695b      	ldr	r3, [r3, #20]
 800098a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b2f      	ldr	r3, [pc, #188]	; (8000a50 <MX_GPIO_Init+0xec>)
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	4a2e      	ldr	r2, [pc, #184]	; (8000a50 <MX_GPIO_Init+0xec>)
 8000998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099c:	6153      	str	r3, [r2, #20]
 800099e:	4b2c      	ldr	r3, [pc, #176]	; (8000a50 <MX_GPIO_Init+0xec>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	4b29      	ldr	r3, [pc, #164]	; (8000a50 <MX_GPIO_Init+0xec>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	4a28      	ldr	r2, [pc, #160]	; (8000a50 <MX_GPIO_Init+0xec>)
 80009b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b4:	6153      	str	r3, [r2, #20]
 80009b6:	4b26      	ldr	r3, [pc, #152]	; (8000a50 <MX_GPIO_Init+0xec>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009c2:	4b23      	ldr	r3, [pc, #140]	; (8000a50 <MX_GPIO_Init+0xec>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	4a22      	ldr	r2, [pc, #136]	; (8000a50 <MX_GPIO_Init+0xec>)
 80009c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009cc:	6153      	str	r3, [r2, #20]
 80009ce:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <MX_GPIO_Init+0xec>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009da:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <MX_GPIO_Init+0xec>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	4a1c      	ldr	r2, [pc, #112]	; (8000a50 <MX_GPIO_Init+0xec>)
 80009e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009e4:	6153      	str	r3, [r2, #20]
 80009e6:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <MX_GPIO_Init+0xec>)
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80009f8:	4816      	ldr	r0, [pc, #88]	; (8000a54 <MX_GPIO_Init+0xf0>)
 80009fa:	f002 f9c9 	bl	8002d90 <HAL_GPIO_WritePin>
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009fe:	2301      	movs	r3, #1
 8000a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4619      	mov	r1, r3
 8000a12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a16:	f002 f829 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD7_Pin
                           LD9_Pin LD10_Pin LD8_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 8000a1a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000a1e:	617b      	str	r3, [r7, #20]
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	4808      	ldr	r0, [pc, #32]	; (8000a54 <MX_GPIO_Init+0xf0>)
 8000a34:	f002 f81a 	bl	8002a6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2006      	movs	r0, #6
 8000a3e:	f001 ffde 	bl	80029fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a42:	2006      	movs	r0, #6
 8000a44:	f001 fff7 	bl	8002a36 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a48:	bf00      	nop
 8000a4a:	3728      	adds	r7, #40	; 0x28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40021000 	.word	0x40021000
 8000a54:	48001000 	.word	0x48001000

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a60:	e7fe      	b.n	8000a60 <Error_Handler+0x8>
	...

08000a64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	4a0e      	ldr	r2, [pc, #56]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6193      	str	r3, [r2, #24]
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	4a08      	ldr	r2, [pc, #32]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	61d3      	str	r3, [r2, #28]
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_MspInit+0x44>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a9a:	2007      	movs	r0, #7
 8000a9c:	f001 ffa4 	bl	80029e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40021000 	.word	0x40021000

08000aac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08c      	sub	sp, #48	; 0x30
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000acc:	d125      	bne.n	8000b1a <HAL_ADC_MspInit+0x6e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ace:	4b2d      	ldr	r3, [pc, #180]	; (8000b84 <HAL_ADC_MspInit+0xd8>)
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	4a2c      	ldr	r2, [pc, #176]	; (8000b84 <HAL_ADC_MspInit+0xd8>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	6153      	str	r3, [r2, #20]
 8000ada:	4b2a      	ldr	r3, [pc, #168]	; (8000b84 <HAL_ADC_MspInit+0xd8>)
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	61bb      	str	r3, [r7, #24]
 8000ae4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <HAL_ADC_MspInit+0xd8>)
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	4a26      	ldr	r2, [pc, #152]	; (8000b84 <HAL_ADC_MspInit+0xd8>)
 8000aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af0:	6153      	str	r3, [r2, #20]
 8000af2:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <HAL_ADC_MspInit+0xd8>)
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b02:	2303      	movs	r3, #3
 8000b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b14:	f001 ffaa 	bl	8002a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000b18:	e030      	b.n	8000b7c <HAL_ADC_MspInit+0xd0>
  else if(hadc->Instance==ADC3)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a1a      	ldr	r2, [pc, #104]	; (8000b88 <HAL_ADC_MspInit+0xdc>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d12b      	bne.n	8000b7c <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <HAL_ADC_MspInit+0xd8>)
 8000b26:	695b      	ldr	r3, [r3, #20]
 8000b28:	4a16      	ldr	r2, [pc, #88]	; (8000b84 <HAL_ADC_MspInit+0xd8>)
 8000b2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b2e:	6153      	str	r3, [r2, #20]
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_ADC_MspInit+0xd8>)
 8000b32:	695b      	ldr	r3, [r3, #20]
 8000b34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <HAL_ADC_MspInit+0xd8>)
 8000b3e:	695b      	ldr	r3, [r3, #20]
 8000b40:	4a10      	ldr	r2, [pc, #64]	; (8000b84 <HAL_ADC_MspInit+0xd8>)
 8000b42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b46:	6153      	str	r3, [r2, #20]
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_ADC_MspInit+0xd8>)
 8000b4a:	695b      	ldr	r3, [r3, #20]
 8000b4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b54:	2302      	movs	r3, #2
 8000b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	4809      	ldr	r0, [pc, #36]	; (8000b8c <HAL_ADC_MspInit+0xe0>)
 8000b68:	f001 ff80 	bl	8002a6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2100      	movs	r1, #0
 8000b70:	202f      	movs	r0, #47	; 0x2f
 8000b72:	f001 ff44 	bl	80029fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000b76:	202f      	movs	r0, #47	; 0x2f
 8000b78:	f001 ff5d 	bl	8002a36 <HAL_NVIC_EnableIRQ>
}
 8000b7c:	bf00      	nop
 8000b7e:	3730      	adds	r7, #48	; 0x30
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40021000 	.word	0x40021000
 8000b88:	50000400 	.word	0x50000400
 8000b8c:	48000400 	.word	0x48000400

08000b90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ba0:	d114      	bne.n	8000bcc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ba2:	4b26      	ldr	r3, [pc, #152]	; (8000c3c <HAL_TIM_Base_MspInit+0xac>)
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	4a25      	ldr	r2, [pc, #148]	; (8000c3c <HAL_TIM_Base_MspInit+0xac>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	61d3      	str	r3, [r2, #28]
 8000bae:	4b23      	ldr	r3, [pc, #140]	; (8000c3c <HAL_TIM_Base_MspInit+0xac>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	201c      	movs	r0, #28
 8000bc0:	f001 ff1d 	bl	80029fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bc4:	201c      	movs	r0, #28
 8000bc6:	f001 ff36 	bl	8002a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000bca:	e032      	b.n	8000c32 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a1b      	ldr	r2, [pc, #108]	; (8000c40 <HAL_TIM_Base_MspInit+0xb0>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d114      	bne.n	8000c00 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000bd6:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <HAL_TIM_Base_MspInit+0xac>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	4a18      	ldr	r2, [pc, #96]	; (8000c3c <HAL_TIM_Base_MspInit+0xac>)
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be0:	6193      	str	r3, [r2, #24]
 8000be2:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <HAL_TIM_Base_MspInit+0xac>)
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2019      	movs	r0, #25
 8000bf4:	f001 ff03 	bl	80029fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000bf8:	2019      	movs	r0, #25
 8000bfa:	f001 ff1c 	bl	8002a36 <HAL_NVIC_EnableIRQ>
}
 8000bfe:	e018      	b.n	8000c32 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM17)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a0f      	ldr	r2, [pc, #60]	; (8000c44 <HAL_TIM_Base_MspInit+0xb4>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d113      	bne.n	8000c32 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <HAL_TIM_Base_MspInit+0xac>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <HAL_TIM_Base_MspInit+0xac>)
 8000c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c14:	6193      	str	r3, [r2, #24]
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <HAL_TIM_Base_MspInit+0xac>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	201a      	movs	r0, #26
 8000c28:	f001 fee9 	bl	80029fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000c2c:	201a      	movs	r0, #26
 8000c2e:	f001 ff02 	bl	8002a36 <HAL_NVIC_EnableIRQ>
}
 8000c32:	bf00      	nop
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40014400 	.word	0x40014400
 8000c44:	40014800 	.word	0x40014800

08000c48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c68:	d11b      	bne.n	8000ca2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <HAL_TIM_MspPostInit+0x64>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	4a0f      	ldr	r2, [pc, #60]	; (8000cac <HAL_TIM_MspPostInit+0x64>)
 8000c70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c74:	6153      	str	r3, [r2, #20]
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <HAL_TIM_MspPostInit+0x64>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PD4     ------> TIM2_CH2
    PD6     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000c82:	2350      	movs	r3, #80	; 0x50
 8000c84:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000c92:	2302      	movs	r3, #2
 8000c94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c96:	f107 030c 	add.w	r3, r7, #12
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <HAL_TIM_MspPostInit+0x68>)
 8000c9e:	f001 fee5 	bl	8002a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ca2:	bf00      	nop
 8000ca4:	3720      	adds	r7, #32
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	48000c00 	.word	0x48000c00

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <NMI_Handler+0x4>

08000cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d00:	f000 f8be 	bl	8000e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f002 f857 	bl	8002dc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d1c:	4802      	ldr	r0, [pc, #8]	; (8000d28 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000d1e:	f002 f95f 	bl	8002fe0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20001040 	.word	0x20001040

08000d2c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000d32:	f005 fba9 	bl	8006488 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	2000028c 	.word	0x2000028c

08000d40 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000d44:	4802      	ldr	r0, [pc, #8]	; (8000d50 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000d46:	f005 fb9f 	bl	8006488 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200002d8 	.word	0x200002d8

08000d54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <TIM2_IRQHandler+0x10>)
 8000d5a:	f005 fb95 	bl	8006488 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000240 	.word	0x20000240

08000d68 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <ADC3_IRQHandler+0x10>)
 8000d6e:	f000 fd01 	bl	8001774 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200001f0 	.word	0x200001f0

08000d7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <SystemInit+0x20>)
 8000d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <SystemInit+0x20>)
 8000d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000da4:	f7ff ffea 	bl	8000d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <LoopForever+0x6>)
  ldr r1, =_edata
 8000daa:	490d      	ldr	r1, [pc, #52]	; (8000de0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dac:	4a0d      	ldr	r2, [pc, #52]	; (8000de4 <LoopForever+0xe>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc0:	4c0a      	ldr	r4, [pc, #40]	; (8000dec <LoopForever+0x16>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dce:	f00b f857 	bl	800be80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dd2:	f7ff fb2f 	bl	8000434 <main>

08000dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000dd6:	e7fe      	b.n	8000dd6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dd8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000de4:	0800bf68 	.word	0x0800bf68
  ldr r2, =_sbss
 8000de8:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000dec:	2000154c 	.word	0x2000154c

08000df0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC1_2_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_Init+0x28>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_Init+0x28>)
 8000dfe:	f043 0310 	orr.w	r3, r3, #16
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f001 fdef 	bl	80029e8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f000 f808 	bl	8000e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e10:	f7ff fe28 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40022000 	.word	0x40022000

08000e20 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <HAL_InitTick+0x54>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x58>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 fe07 	bl	8002a52 <HAL_SYSTICK_Config>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00e      	b.n	8000e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b0f      	cmp	r3, #15
 8000e52:	d80a      	bhi.n	8000e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e54:	2200      	movs	r2, #0
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f001 fdcf 	bl	80029fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e60:	4a06      	ldr	r2, [pc, #24]	; (8000e7c <HAL_InitTick+0x5c>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e000      	b.n	8000e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000004 	.word	0x20000004
 8000e78:	2000000c 	.word	0x2000000c
 8000e7c:	20000008 	.word	0x20000008

08000e80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	2000000c 	.word	0x2000000c
 8000ea4:	20000334 	.word	0x20000334

08000ea8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;  
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_GetTick+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000334 	.word	0x20000334

08000ec0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b09a      	sub	sp, #104	; 0x68
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d101      	bne.n	8000f1c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e1c9      	b.n	80012b0 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	f003 0310 	and.w	r3, r3, #16
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d176      	bne.n	800101c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d152      	bne.n	8000fdc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff fdab 	bl	8000aac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d13b      	bne.n	8000fdc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f001 fb53 	bl	8002610 <ADC_Disable>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	f003 0310 	and.w	r3, r3, #16
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d12f      	bne.n	8000fdc <HAL_ADC_Init+0xe0>
 8000f7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d12b      	bne.n	8000fdc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f8c:	f023 0302 	bic.w	r3, r3, #2
 8000f90:	f043 0202 	orr.w	r2, r3, #2
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000fa6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fb6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fb8:	4b86      	ldr	r3, [pc, #536]	; (80011d4 <HAL_ADC_Init+0x2d8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a86      	ldr	r2, [pc, #536]	; (80011d8 <HAL_ADC_Init+0x2dc>)
 8000fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc2:	0c9a      	lsrs	r2, r3, #18
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fce:	e002      	b.n	8000fd6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1f9      	bne.n	8000fd0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d007      	beq.n	8000ffa <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ff8:	d110      	bne.n	800101c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f023 0312 	bic.w	r3, r3, #18
 8001002:	f043 0210 	orr.w	r2, r3, #16
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f043 0201 	orr.w	r2, r3, #1
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	f003 0310 	and.w	r3, r3, #16
 8001024:	2b00      	cmp	r3, #0
 8001026:	f040 8136 	bne.w	8001296 <HAL_ADC_Init+0x39a>
 800102a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800102e:	2b00      	cmp	r3, #0
 8001030:	f040 8131 	bne.w	8001296 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800103e:	2b00      	cmp	r3, #0
 8001040:	f040 8129 	bne.w	8001296 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001048:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800104c:	f043 0202 	orr.w	r2, r3, #2
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800105c:	d004      	beq.n	8001068 <HAL_ADC_Init+0x16c>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a5e      	ldr	r2, [pc, #376]	; (80011dc <HAL_ADC_Init+0x2e0>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d101      	bne.n	800106c <HAL_ADC_Init+0x170>
 8001068:	4b5d      	ldr	r3, [pc, #372]	; (80011e0 <HAL_ADC_Init+0x2e4>)
 800106a:	e000      	b.n	800106e <HAL_ADC_Init+0x172>
 800106c:	4b5d      	ldr	r3, [pc, #372]	; (80011e4 <HAL_ADC_Init+0x2e8>)
 800106e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001078:	d102      	bne.n	8001080 <HAL_ADC_Init+0x184>
 800107a:	4b58      	ldr	r3, [pc, #352]	; (80011dc <HAL_ADC_Init+0x2e0>)
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	e01a      	b.n	80010b6 <HAL_ADC_Init+0x1ba>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a55      	ldr	r2, [pc, #340]	; (80011dc <HAL_ADC_Init+0x2e0>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d103      	bne.n	8001092 <HAL_ADC_Init+0x196>
 800108a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	e011      	b.n	80010b6 <HAL_ADC_Init+0x1ba>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a54      	ldr	r2, [pc, #336]	; (80011e8 <HAL_ADC_Init+0x2ec>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d102      	bne.n	80010a2 <HAL_ADC_Init+0x1a6>
 800109c:	4b53      	ldr	r3, [pc, #332]	; (80011ec <HAL_ADC_Init+0x2f0>)
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	e009      	b.n	80010b6 <HAL_ADC_Init+0x1ba>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a51      	ldr	r2, [pc, #324]	; (80011ec <HAL_ADC_Init+0x2f0>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d102      	bne.n	80010b2 <HAL_ADC_Init+0x1b6>
 80010ac:	4b4e      	ldr	r3, [pc, #312]	; (80011e8 <HAL_ADC_Init+0x2ec>)
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	e001      	b.n	80010b6 <HAL_ADC_Init+0x1ba>
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d108      	bne.n	80010d6 <HAL_ADC_Init+0x1da>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d101      	bne.n	80010d6 <HAL_ADC_Init+0x1da>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <HAL_ADC_Init+0x1dc>
 80010d6:	2300      	movs	r3, #0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d11c      	bne.n	8001116 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80010dc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d010      	beq.n	8001104 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d107      	bne.n	80010fe <HAL_ADC_Init+0x202>
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d101      	bne.n	80010fe <HAL_ADC_Init+0x202>
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <HAL_ADC_Init+0x204>
 80010fe:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001100:	2b00      	cmp	r3, #0
 8001102:	d108      	bne.n	8001116 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	431a      	orrs	r2, r3
 8001112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001114:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	7e5b      	ldrb	r3, [r3, #25]
 800111a:	035b      	lsls	r3, r3, #13
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001120:	2a01      	cmp	r2, #1
 8001122:	d002      	beq.n	800112a <HAL_ADC_Init+0x22e>
 8001124:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001128:	e000      	b.n	800112c <HAL_ADC_Init+0x230>
 800112a:	2200      	movs	r2, #0
 800112c:	431a      	orrs	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	431a      	orrs	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	4313      	orrs	r3, r2
 800113a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800113c:	4313      	orrs	r3, r2
 800113e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d11b      	bne.n	8001182 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	7e5b      	ldrb	r3, [r3, #25]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d109      	bne.n	8001166 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	3b01      	subs	r3, #1
 8001158:	045a      	lsls	r2, r3, #17
 800115a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800115c:	4313      	orrs	r3, r2
 800115e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001162:	663b      	str	r3, [r7, #96]	; 0x60
 8001164:	e00d      	b.n	8001182 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800116e:	f043 0220 	orr.w	r2, r3, #32
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	f043 0201 	orr.w	r2, r3, #1
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001186:	2b01      	cmp	r3, #1
 8001188:	d03a      	beq.n	8001200 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a16      	ldr	r2, [pc, #88]	; (80011e8 <HAL_ADC_Init+0x2ec>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d004      	beq.n	800119e <HAL_ADC_Init+0x2a2>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a14      	ldr	r2, [pc, #80]	; (80011ec <HAL_ADC_Init+0x2f0>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d128      	bne.n	80011f0 <HAL_ADC_Init+0x2f4>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a2:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80011a6:	d012      	beq.n	80011ce <HAL_ADC_Init+0x2d2>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011b0:	d00a      	beq.n	80011c8 <HAL_ADC_Init+0x2cc>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80011ba:	d002      	beq.n	80011c2 <HAL_ADC_Init+0x2c6>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c0:	e018      	b.n	80011f4 <HAL_ADC_Init+0x2f8>
 80011c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011c6:	e015      	b.n	80011f4 <HAL_ADC_Init+0x2f8>
 80011c8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80011cc:	e012      	b.n	80011f4 <HAL_ADC_Init+0x2f8>
 80011ce:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80011d2:	e00f      	b.n	80011f4 <HAL_ADC_Init+0x2f8>
 80011d4:	20000004 	.word	0x20000004
 80011d8:	431bde83 	.word	0x431bde83
 80011dc:	50000100 	.word	0x50000100
 80011e0:	50000300 	.word	0x50000300
 80011e4:	50000700 	.word	0x50000700
 80011e8:	50000400 	.word	0x50000400
 80011ec:	50000500 	.word	0x50000500
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80011f8:	4313      	orrs	r3, r2
 80011fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011fc:	4313      	orrs	r3, r2
 80011fe:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 030c 	and.w	r3, r3, #12
 800120a:	2b00      	cmp	r3, #0
 800120c:	d114      	bne.n	8001238 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	6812      	ldr	r2, [r2, #0]
 8001218:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800121c:	f023 0302 	bic.w	r3, r3, #2
 8001220:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	7e1b      	ldrb	r3, [r3, #24]
 8001226:	039a      	lsls	r2, r3, #14
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4313      	orrs	r3, r2
 8001232:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001234:	4313      	orrs	r3, r2
 8001236:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68da      	ldr	r2, [r3, #12]
 800123e:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <HAL_ADC_Init+0x3bc>)
 8001240:	4013      	ands	r3, r2
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	6812      	ldr	r2, [r2, #0]
 8001246:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001248:	430b      	orrs	r3, r1
 800124a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d10c      	bne.n	800126e <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f023 010f 	bic.w	r1, r3, #15
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	1e5a      	subs	r2, r3, #1
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	430a      	orrs	r2, r1
 800126a:	631a      	str	r2, [r3, #48]	; 0x30
 800126c:	e007      	b.n	800127e <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 020f 	bic.w	r2, r2, #15
 800127c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	f023 0303 	bic.w	r3, r3, #3
 800128c:	f043 0201 	orr.w	r2, r3, #1
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	641a      	str	r2, [r3, #64]	; 0x40
 8001294:	e00a      	b.n	80012ac <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	f023 0312 	bic.w	r3, r3, #18
 800129e:	f043 0210 	orr.w	r2, r3, #16
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80012a6:	2301      	movs	r3, #1
 80012a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80012ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3768      	adds	r7, #104	; 0x68
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	fff0c007 	.word	0xfff0c007

080012bc <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f040 80f9 	bne.w	80014ca <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d101      	bne.n	80012e6 <HAL_ADC_Start+0x2a>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e0f4      	b.n	80014d0 <HAL_ADC_Start+0x214>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f001 f92a 	bl	8002548 <ADC_Enable>
 80012f4:	4603      	mov	r3, r0
 80012f6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f040 80e0 	bne.w	80014c0 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001308:	f023 0301 	bic.w	r3, r3, #1
 800130c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800131c:	d004      	beq.n	8001328 <HAL_ADC_Start+0x6c>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a6d      	ldr	r2, [pc, #436]	; (80014d8 <HAL_ADC_Start+0x21c>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d106      	bne.n	8001336 <HAL_ADC_Start+0x7a>
 8001328:	4b6c      	ldr	r3, [pc, #432]	; (80014dc <HAL_ADC_Start+0x220>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f003 031f 	and.w	r3, r3, #31
 8001330:	2b00      	cmp	r3, #0
 8001332:	d010      	beq.n	8001356 <HAL_ADC_Start+0x9a>
 8001334:	e005      	b.n	8001342 <HAL_ADC_Start+0x86>
 8001336:	4b6a      	ldr	r3, [pc, #424]	; (80014e0 <HAL_ADC_Start+0x224>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 031f 	and.w	r3, r3, #31
 800133e:	2b00      	cmp	r3, #0
 8001340:	d009      	beq.n	8001356 <HAL_ADC_Start+0x9a>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800134a:	d004      	beq.n	8001356 <HAL_ADC_Start+0x9a>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a64      	ldr	r2, [pc, #400]	; (80014e4 <HAL_ADC_Start+0x228>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d115      	bne.n	8001382 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d036      	beq.n	80013de <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001378:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001380:	e02d      	b.n	80013de <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001396:	d004      	beq.n	80013a2 <HAL_ADC_Start+0xe6>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a4e      	ldr	r2, [pc, #312]	; (80014d8 <HAL_ADC_Start+0x21c>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d10a      	bne.n	80013b8 <HAL_ADC_Start+0xfc>
 80013a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	bf14      	ite	ne
 80013b0:	2301      	movne	r3, #1
 80013b2:	2300      	moveq	r3, #0
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	e008      	b.n	80013ca <HAL_ADC_Start+0x10e>
 80013b8:	4b4a      	ldr	r3, [pc, #296]	; (80014e4 <HAL_ADC_Start+0x228>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	bf14      	ite	ne
 80013c4:	2301      	movne	r3, #1
 80013c6:	2300      	moveq	r3, #0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d007      	beq.n	80013de <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013ea:	d106      	bne.n	80013fa <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f0:	f023 0206 	bic.w	r2, r3, #6
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	645a      	str	r2, [r3, #68]	; 0x44
 80013f8:	e002      	b.n	8001400 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	221c      	movs	r2, #28
 800140e:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001418:	d004      	beq.n	8001424 <HAL_ADC_Start+0x168>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a2e      	ldr	r2, [pc, #184]	; (80014d8 <HAL_ADC_Start+0x21c>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d106      	bne.n	8001432 <HAL_ADC_Start+0x176>
 8001424:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <HAL_ADC_Start+0x220>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f003 031f 	and.w	r3, r3, #31
 800142c:	2b00      	cmp	r3, #0
 800142e:	d03e      	beq.n	80014ae <HAL_ADC_Start+0x1f2>
 8001430:	e005      	b.n	800143e <HAL_ADC_Start+0x182>
 8001432:	4b2b      	ldr	r3, [pc, #172]	; (80014e0 <HAL_ADC_Start+0x224>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 031f 	and.w	r3, r3, #31
 800143a:	2b00      	cmp	r3, #0
 800143c:	d037      	beq.n	80014ae <HAL_ADC_Start+0x1f2>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001446:	d004      	beq.n	8001452 <HAL_ADC_Start+0x196>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a22      	ldr	r2, [pc, #136]	; (80014d8 <HAL_ADC_Start+0x21c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d106      	bne.n	8001460 <HAL_ADC_Start+0x1a4>
 8001452:	4b22      	ldr	r3, [pc, #136]	; (80014dc <HAL_ADC_Start+0x220>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 031f 	and.w	r3, r3, #31
 800145a:	2b05      	cmp	r3, #5
 800145c:	d027      	beq.n	80014ae <HAL_ADC_Start+0x1f2>
 800145e:	e005      	b.n	800146c <HAL_ADC_Start+0x1b0>
 8001460:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <HAL_ADC_Start+0x224>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 031f 	and.w	r3, r3, #31
 8001468:	2b05      	cmp	r3, #5
 800146a:	d020      	beq.n	80014ae <HAL_ADC_Start+0x1f2>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001474:	d004      	beq.n	8001480 <HAL_ADC_Start+0x1c4>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <HAL_ADC_Start+0x21c>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d106      	bne.n	800148e <HAL_ADC_Start+0x1d2>
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <HAL_ADC_Start+0x220>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 031f 	and.w	r3, r3, #31
 8001488:	2b09      	cmp	r3, #9
 800148a:	d010      	beq.n	80014ae <HAL_ADC_Start+0x1f2>
 800148c:	e005      	b.n	800149a <HAL_ADC_Start+0x1de>
 800148e:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <HAL_ADC_Start+0x224>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 031f 	and.w	r3, r3, #31
 8001496:	2b09      	cmp	r3, #9
 8001498:	d009      	beq.n	80014ae <HAL_ADC_Start+0x1f2>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014a2:	d004      	beq.n	80014ae <HAL_ADC_Start+0x1f2>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <HAL_ADC_Start+0x228>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d10f      	bne.n	80014ce <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f042 0204 	orr.w	r2, r2, #4
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	e006      	b.n	80014ce <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80014c8:	e001      	b.n	80014ce <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014ca:	2302      	movs	r3, #2
 80014cc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	50000100 	.word	0x50000100
 80014dc:	50000300 	.word	0x50000300
 80014e0:	50000700 	.word	0x50000700
 80014e4:	50000400 	.word	0x50000400

080014e8 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014f0:	2300      	movs	r3, #0
 80014f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d101      	bne.n	8001502 <HAL_ADC_Stop+0x1a>
 80014fe:	2302      	movs	r3, #2
 8001500:	e023      	b.n	800154a <HAL_ADC_Stop+0x62>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800150a:	216c      	movs	r1, #108	; 0x6c
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f001 f8e5 	bl	80026dc <ADC_ConversionStop>
 8001512:	4603      	mov	r3, r0
 8001514:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d111      	bne.n	8001540 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f001 f877 	bl	8002610 <ADC_Disable>
 8001522:	4603      	mov	r3, r0
 8001524:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d109      	bne.n	8001540 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001534:	f023 0301 	bic.w	r3, r3, #1
 8001538:	f043 0201 	orr.w	r2, r3, #1
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001548:	7bfb      	ldrb	r3, [r7, #15]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	2b08      	cmp	r3, #8
 8001568:	d102      	bne.n	8001570 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800156a:	2308      	movs	r3, #8
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	e03a      	b.n	80015e6 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001578:	d004      	beq.n	8001584 <HAL_ADC_PollForConversion+0x30>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a72      	ldr	r2, [pc, #456]	; (8001748 <HAL_ADC_PollForConversion+0x1f4>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d101      	bne.n	8001588 <HAL_ADC_PollForConversion+0x34>
 8001584:	4b71      	ldr	r3, [pc, #452]	; (800174c <HAL_ADC_PollForConversion+0x1f8>)
 8001586:	e000      	b.n	800158a <HAL_ADC_PollForConversion+0x36>
 8001588:	4b71      	ldr	r3, [pc, #452]	; (8001750 <HAL_ADC_PollForConversion+0x1fc>)
 800158a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f003 031f 	and.w	r3, r3, #31
 8001594:	2b00      	cmp	r3, #0
 8001596:	d112      	bne.n	80015be <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d11d      	bne.n	80015e2 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f043 0220 	orr.w	r2, r3, #32
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e0bf      	b.n	800173e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00b      	beq.n	80015e2 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f043 0220 	orr.w	r2, r3, #32
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e0ad      	b.n	800173e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80015e2:	230c      	movs	r3, #12
 80015e4:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015ee:	d004      	beq.n	80015fa <HAL_ADC_PollForConversion+0xa6>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a54      	ldr	r2, [pc, #336]	; (8001748 <HAL_ADC_PollForConversion+0x1f4>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d106      	bne.n	8001608 <HAL_ADC_PollForConversion+0xb4>
 80015fa:	4b54      	ldr	r3, [pc, #336]	; (800174c <HAL_ADC_PollForConversion+0x1f8>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 031f 	and.w	r3, r3, #31
 8001602:	2b00      	cmp	r3, #0
 8001604:	d010      	beq.n	8001628 <HAL_ADC_PollForConversion+0xd4>
 8001606:	e005      	b.n	8001614 <HAL_ADC_PollForConversion+0xc0>
 8001608:	4b51      	ldr	r3, [pc, #324]	; (8001750 <HAL_ADC_PollForConversion+0x1fc>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 031f 	and.w	r3, r3, #31
 8001610:	2b00      	cmp	r3, #0
 8001612:	d009      	beq.n	8001628 <HAL_ADC_PollForConversion+0xd4>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800161c:	d004      	beq.n	8001628 <HAL_ADC_PollForConversion+0xd4>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a4c      	ldr	r2, [pc, #304]	; (8001754 <HAL_ADC_PollForConversion+0x200>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d104      	bne.n	8001632 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	e00f      	b.n	8001652 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800163a:	d004      	beq.n	8001646 <HAL_ADC_PollForConversion+0xf2>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a41      	ldr	r2, [pc, #260]	; (8001748 <HAL_ADC_PollForConversion+0x1f4>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d102      	bne.n	800164c <HAL_ADC_PollForConversion+0xf8>
 8001646:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800164a:	e000      	b.n	800164e <HAL_ADC_PollForConversion+0xfa>
 800164c:	4b41      	ldr	r3, [pc, #260]	; (8001754 <HAL_ADC_PollForConversion+0x200>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001652:	f7ff fc29 	bl	8000ea8 <HAL_GetTick>
 8001656:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001658:	e021      	b.n	800169e <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001660:	d01d      	beq.n	800169e <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d007      	beq.n	8001678 <HAL_ADC_PollForConversion+0x124>
 8001668:	f7ff fc1e 	bl	8000ea8 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d212      	bcs.n	800169e <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	4013      	ands	r3, r2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10b      	bne.n	800169e <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f043 0204 	orr.w	r2, r3, #4
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e04f      	b.n	800173e <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	4013      	ands	r3, r2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0d6      	beq.n	800165a <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d131      	bne.n	800172a <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d12c      	bne.n	800172a <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d125      	bne.n	800172a <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d112      	bne.n	8001712 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d112      	bne.n	800172a <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	f043 0201 	orr.w	r2, r3, #1
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	641a      	str	r2, [r3, #64]	; 0x40
 8001710:	e00b      	b.n	800172a <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f043 0220 	orr.w	r2, r3, #32
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	f043 0201 	orr.w	r2, r3, #1
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d103      	bne.n	800173c <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	50000100 	.word	0x50000100
 800174c:	50000300 	.word	0x50000300
 8001750:	50000700 	.word	0x50000700
 8001754:	50000400 	.word	0x50000400

08001758 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001780:	2300      	movs	r3, #0
 8001782:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d004      	beq.n	80017ac <HAL_ADC_IRQHandler+0x38>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10b      	bne.n	80017c4 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 80bc 	beq.w	8001930 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 80b6 	beq.w	8001930 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d105      	bne.n	80017dc <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017e4:	d004      	beq.n	80017f0 <HAL_ADC_IRQHandler+0x7c>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a90      	ldr	r2, [pc, #576]	; (8001a2c <HAL_ADC_IRQHandler+0x2b8>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d106      	bne.n	80017fe <HAL_ADC_IRQHandler+0x8a>
 80017f0:	4b8f      	ldr	r3, [pc, #572]	; (8001a30 <HAL_ADC_IRQHandler+0x2bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 031f 	and.w	r3, r3, #31
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d03e      	beq.n	800187a <HAL_ADC_IRQHandler+0x106>
 80017fc:	e005      	b.n	800180a <HAL_ADC_IRQHandler+0x96>
 80017fe:	4b8d      	ldr	r3, [pc, #564]	; (8001a34 <HAL_ADC_IRQHandler+0x2c0>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 031f 	and.w	r3, r3, #31
 8001806:	2b00      	cmp	r3, #0
 8001808:	d037      	beq.n	800187a <HAL_ADC_IRQHandler+0x106>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001812:	d004      	beq.n	800181e <HAL_ADC_IRQHandler+0xaa>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a84      	ldr	r2, [pc, #528]	; (8001a2c <HAL_ADC_IRQHandler+0x2b8>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d106      	bne.n	800182c <HAL_ADC_IRQHandler+0xb8>
 800181e:	4b84      	ldr	r3, [pc, #528]	; (8001a30 <HAL_ADC_IRQHandler+0x2bc>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 031f 	and.w	r3, r3, #31
 8001826:	2b05      	cmp	r3, #5
 8001828:	d027      	beq.n	800187a <HAL_ADC_IRQHandler+0x106>
 800182a:	e005      	b.n	8001838 <HAL_ADC_IRQHandler+0xc4>
 800182c:	4b81      	ldr	r3, [pc, #516]	; (8001a34 <HAL_ADC_IRQHandler+0x2c0>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 031f 	and.w	r3, r3, #31
 8001834:	2b05      	cmp	r3, #5
 8001836:	d020      	beq.n	800187a <HAL_ADC_IRQHandler+0x106>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001840:	d004      	beq.n	800184c <HAL_ADC_IRQHandler+0xd8>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a79      	ldr	r2, [pc, #484]	; (8001a2c <HAL_ADC_IRQHandler+0x2b8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d106      	bne.n	800185a <HAL_ADC_IRQHandler+0xe6>
 800184c:	4b78      	ldr	r3, [pc, #480]	; (8001a30 <HAL_ADC_IRQHandler+0x2bc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 031f 	and.w	r3, r3, #31
 8001854:	2b09      	cmp	r3, #9
 8001856:	d010      	beq.n	800187a <HAL_ADC_IRQHandler+0x106>
 8001858:	e005      	b.n	8001866 <HAL_ADC_IRQHandler+0xf2>
 800185a:	4b76      	ldr	r3, [pc, #472]	; (8001a34 <HAL_ADC_IRQHandler+0x2c0>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 031f 	and.w	r3, r3, #31
 8001862:	2b09      	cmp	r3, #9
 8001864:	d009      	beq.n	800187a <HAL_ADC_IRQHandler+0x106>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800186e:	d004      	beq.n	800187a <HAL_ADC_IRQHandler+0x106>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a70      	ldr	r2, [pc, #448]	; (8001a38 <HAL_ADC_IRQHandler+0x2c4>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d104      	bne.n	8001884 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	61bb      	str	r3, [r7, #24]
 8001882:	e00f      	b.n	80018a4 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800188c:	d004      	beq.n	8001898 <HAL_ADC_IRQHandler+0x124>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a66      	ldr	r2, [pc, #408]	; (8001a2c <HAL_ADC_IRQHandler+0x2b8>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d102      	bne.n	800189e <HAL_ADC_IRQHandler+0x12a>
 8001898:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800189c:	e000      	b.n	80018a0 <HAL_ADC_IRQHandler+0x12c>
 800189e:	4b66      	ldr	r3, [pc, #408]	; (8001a38 <HAL_ADC_IRQHandler+0x2c4>)
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d137      	bne.n	8001922 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d132      	bne.n	8001922 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d02d      	beq.n	8001922 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d11a      	bne.n	800190a <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 020c 	bic.w	r2, r2, #12
 80018e2:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d112      	bne.n	8001922 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	f043 0201 	orr.w	r2, r3, #1
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	641a      	str	r2, [r3, #64]	; 0x40
 8001908:	e00b      	b.n	8001922 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f043 0210 	orr.w	r2, r3, #16
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f043 0201 	orr.w	r2, r3, #1
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff facc 	bl	8000ec0 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	220c      	movs	r2, #12
 800192e:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	f003 0320 	and.w	r3, r3, #32
 8001936:	2b00      	cmp	r3, #0
 8001938:	d004      	beq.n	8001944 <HAL_ADC_IRQHandler+0x1d0>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f003 0320 	and.w	r3, r3, #32
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10b      	bne.n	800195c <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 8138 	beq.w	8001bc0 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 8132 	beq.w	8001bc0 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001970:	d004      	beq.n	800197c <HAL_ADC_IRQHandler+0x208>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a2d      	ldr	r2, [pc, #180]	; (8001a2c <HAL_ADC_IRQHandler+0x2b8>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d106      	bne.n	800198a <HAL_ADC_IRQHandler+0x216>
 800197c:	4b2c      	ldr	r3, [pc, #176]	; (8001a30 <HAL_ADC_IRQHandler+0x2bc>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 031f 	and.w	r3, r3, #31
 8001984:	2b00      	cmp	r3, #0
 8001986:	d03e      	beq.n	8001a06 <HAL_ADC_IRQHandler+0x292>
 8001988:	e005      	b.n	8001996 <HAL_ADC_IRQHandler+0x222>
 800198a:	4b2a      	ldr	r3, [pc, #168]	; (8001a34 <HAL_ADC_IRQHandler+0x2c0>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 031f 	and.w	r3, r3, #31
 8001992:	2b00      	cmp	r3, #0
 8001994:	d037      	beq.n	8001a06 <HAL_ADC_IRQHandler+0x292>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800199e:	d004      	beq.n	80019aa <HAL_ADC_IRQHandler+0x236>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a21      	ldr	r2, [pc, #132]	; (8001a2c <HAL_ADC_IRQHandler+0x2b8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d106      	bne.n	80019b8 <HAL_ADC_IRQHandler+0x244>
 80019aa:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <HAL_ADC_IRQHandler+0x2bc>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 031f 	and.w	r3, r3, #31
 80019b2:	2b05      	cmp	r3, #5
 80019b4:	d027      	beq.n	8001a06 <HAL_ADC_IRQHandler+0x292>
 80019b6:	e005      	b.n	80019c4 <HAL_ADC_IRQHandler+0x250>
 80019b8:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <HAL_ADC_IRQHandler+0x2c0>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 031f 	and.w	r3, r3, #31
 80019c0:	2b05      	cmp	r3, #5
 80019c2:	d020      	beq.n	8001a06 <HAL_ADC_IRQHandler+0x292>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019cc:	d004      	beq.n	80019d8 <HAL_ADC_IRQHandler+0x264>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a16      	ldr	r2, [pc, #88]	; (8001a2c <HAL_ADC_IRQHandler+0x2b8>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d106      	bne.n	80019e6 <HAL_ADC_IRQHandler+0x272>
 80019d8:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <HAL_ADC_IRQHandler+0x2bc>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 031f 	and.w	r3, r3, #31
 80019e0:	2b09      	cmp	r3, #9
 80019e2:	d010      	beq.n	8001a06 <HAL_ADC_IRQHandler+0x292>
 80019e4:	e005      	b.n	80019f2 <HAL_ADC_IRQHandler+0x27e>
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <HAL_ADC_IRQHandler+0x2c0>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 031f 	and.w	r3, r3, #31
 80019ee:	2b09      	cmp	r3, #9
 80019f0:	d009      	beq.n	8001a06 <HAL_ADC_IRQHandler+0x292>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019fa:	d004      	beq.n	8001a06 <HAL_ADC_IRQHandler+0x292>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0d      	ldr	r2, [pc, #52]	; (8001a38 <HAL_ADC_IRQHandler+0x2c4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d104      	bne.n	8001a10 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	61bb      	str	r3, [r7, #24]
 8001a0e:	e018      	b.n	8001a42 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a18:	d004      	beq.n	8001a24 <HAL_ADC_IRQHandler+0x2b0>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a03      	ldr	r2, [pc, #12]	; (8001a2c <HAL_ADC_IRQHandler+0x2b8>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d10b      	bne.n	8001a3c <HAL_ADC_IRQHandler+0x2c8>
 8001a24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a28:	e009      	b.n	8001a3e <HAL_ADC_IRQHandler+0x2ca>
 8001a2a:	bf00      	nop
 8001a2c:	50000100 	.word	0x50000100
 8001a30:	50000300 	.word	0x50000300
 8001a34:	50000700 	.word	0x50000700
 8001a38:	50000400 	.word	0x50000400
 8001a3c:	4b92      	ldr	r3, [pc, #584]	; (8001c88 <HAL_ADC_IRQHandler+0x514>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a48:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f040 80b0 	bne.w	8001bb2 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00d      	beq.n	8001a78 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f040 80a3 	bne.w	8001bb2 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f040 809d 	bne.w	8001bb2 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8097 	beq.w	8001bb2 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a8c:	d004      	beq.n	8001a98 <HAL_ADC_IRQHandler+0x324>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a7e      	ldr	r2, [pc, #504]	; (8001c8c <HAL_ADC_IRQHandler+0x518>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d106      	bne.n	8001aa6 <HAL_ADC_IRQHandler+0x332>
 8001a98:	4b7d      	ldr	r3, [pc, #500]	; (8001c90 <HAL_ADC_IRQHandler+0x51c>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 031f 	and.w	r3, r3, #31
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d03e      	beq.n	8001b22 <HAL_ADC_IRQHandler+0x3ae>
 8001aa4:	e005      	b.n	8001ab2 <HAL_ADC_IRQHandler+0x33e>
 8001aa6:	4b7b      	ldr	r3, [pc, #492]	; (8001c94 <HAL_ADC_IRQHandler+0x520>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 031f 	and.w	r3, r3, #31
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d037      	beq.n	8001b22 <HAL_ADC_IRQHandler+0x3ae>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001aba:	d004      	beq.n	8001ac6 <HAL_ADC_IRQHandler+0x352>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a72      	ldr	r2, [pc, #456]	; (8001c8c <HAL_ADC_IRQHandler+0x518>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d106      	bne.n	8001ad4 <HAL_ADC_IRQHandler+0x360>
 8001ac6:	4b72      	ldr	r3, [pc, #456]	; (8001c90 <HAL_ADC_IRQHandler+0x51c>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 031f 	and.w	r3, r3, #31
 8001ace:	2b06      	cmp	r3, #6
 8001ad0:	d027      	beq.n	8001b22 <HAL_ADC_IRQHandler+0x3ae>
 8001ad2:	e005      	b.n	8001ae0 <HAL_ADC_IRQHandler+0x36c>
 8001ad4:	4b6f      	ldr	r3, [pc, #444]	; (8001c94 <HAL_ADC_IRQHandler+0x520>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 031f 	and.w	r3, r3, #31
 8001adc:	2b06      	cmp	r3, #6
 8001ade:	d020      	beq.n	8001b22 <HAL_ADC_IRQHandler+0x3ae>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ae8:	d004      	beq.n	8001af4 <HAL_ADC_IRQHandler+0x380>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a67      	ldr	r2, [pc, #412]	; (8001c8c <HAL_ADC_IRQHandler+0x518>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d106      	bne.n	8001b02 <HAL_ADC_IRQHandler+0x38e>
 8001af4:	4b66      	ldr	r3, [pc, #408]	; (8001c90 <HAL_ADC_IRQHandler+0x51c>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 031f 	and.w	r3, r3, #31
 8001afc:	2b07      	cmp	r3, #7
 8001afe:	d010      	beq.n	8001b22 <HAL_ADC_IRQHandler+0x3ae>
 8001b00:	e005      	b.n	8001b0e <HAL_ADC_IRQHandler+0x39a>
 8001b02:	4b64      	ldr	r3, [pc, #400]	; (8001c94 <HAL_ADC_IRQHandler+0x520>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 031f 	and.w	r3, r3, #31
 8001b0a:	2b07      	cmp	r3, #7
 8001b0c:	d009      	beq.n	8001b22 <HAL_ADC_IRQHandler+0x3ae>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b16:	d004      	beq.n	8001b22 <HAL_ADC_IRQHandler+0x3ae>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a5a      	ldr	r2, [pc, #360]	; (8001c88 <HAL_ADC_IRQHandler+0x514>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d104      	bne.n	8001b2c <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	e00f      	b.n	8001b4c <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b34:	d004      	beq.n	8001b40 <HAL_ADC_IRQHandler+0x3cc>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a54      	ldr	r2, [pc, #336]	; (8001c8c <HAL_ADC_IRQHandler+0x518>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d102      	bne.n	8001b46 <HAL_ADC_IRQHandler+0x3d2>
 8001b40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b44:	e000      	b.n	8001b48 <HAL_ADC_IRQHandler+0x3d4>
 8001b46:	4b50      	ldr	r3, [pc, #320]	; (8001c88 <HAL_ADC_IRQHandler+0x514>)
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d12d      	bne.n	8001bb2 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d11a      	bne.n	8001b9a <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b72:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b78:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d112      	bne.n	8001bb2 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	f043 0201 	orr.w	r2, r3, #1
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	641a      	str	r2, [r3, #64]	; 0x40
 8001b98:	e00b      	b.n	8001bb2 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f043 0210 	orr.w	r2, r3, #16
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	f043 0201 	orr.w	r2, r3, #1
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f8c4 	bl	8001d40 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2260      	movs	r2, #96	; 0x60
 8001bbe:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d011      	beq.n	8001bee <HAL_ADC_IRQHandler+0x47a>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00c      	beq.n	8001bee <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff f977 	bl	8000ed4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2280      	movs	r2, #128	; 0x80
 8001bec:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d012      	beq.n	8001c1e <HAL_ADC_IRQHandler+0x4aa>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00d      	beq.n	8001c1e <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f8aa 	bl	8001d68 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c1c:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d012      	beq.n	8001c4e <HAL_ADC_IRQHandler+0x4da>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00d      	beq.n	8001c4e <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f89c 	bl	8001d7c <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c4c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d04f      	beq.n	8001cf8 <HAL_ADC_IRQHandler+0x584>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0310 	and.w	r3, r3, #16
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d04a      	beq.n	8001cf8 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d102      	bne.n	8001c70 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	e02d      	b.n	8001ccc <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c78:	d004      	beq.n	8001c84 <HAL_ADC_IRQHandler+0x510>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a03      	ldr	r2, [pc, #12]	; (8001c8c <HAL_ADC_IRQHandler+0x518>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d109      	bne.n	8001c98 <HAL_ADC_IRQHandler+0x524>
 8001c84:	4b02      	ldr	r3, [pc, #8]	; (8001c90 <HAL_ADC_IRQHandler+0x51c>)
 8001c86:	e008      	b.n	8001c9a <HAL_ADC_IRQHandler+0x526>
 8001c88:	50000400 	.word	0x50000400
 8001c8c:	50000100 	.word	0x50000100
 8001c90:	50000300 	.word	0x50000300
 8001c94:	50000700 	.word	0x50000700
 8001c98:	4b28      	ldr	r3, [pc, #160]	; (8001d3c <HAL_ADC_IRQHandler+0x5c8>)
 8001c9a:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 031f 	and.w	r3, r3, #31
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d109      	bne.n	8001cbc <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d10a      	bne.n	8001ccc <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	e007      	b.n	8001ccc <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001cc8:	2301      	movs	r3, #1
 8001cca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d10e      	bne.n	8001cf0 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f043 0202 	orr.w	r2, r3, #2
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff f8fc 	bl	8000ee8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2210      	movs	r2, #16
 8001cf6:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d018      	beq.n	8001d34 <HAL_ADC_IRQHandler+0x5c0>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d013      	beq.n	8001d34 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1c:	f043 0208 	orr.w	r2, r3, #8
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d2c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f810 	bl	8001d54 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001d34:	bf00      	nop
 8001d36:	3720      	adds	r7, #32
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	50000700 	.word	0x50000700

08001d40 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b09b      	sub	sp, #108	; 0x6c
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x22>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e2c8      	b.n	8002344 <HAL_ADC_ConfigChannel+0x5b4>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f040 82ac 	bne.w	8002322 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d81c      	bhi.n	8001e0c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	461a      	mov	r2, r3
 8001de6:	231f      	movs	r3, #31
 8001de8:	4093      	lsls	r3, r2
 8001dea:	43db      	mvns	r3, r3
 8001dec:	4019      	ands	r1, r3
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	fa00 f203 	lsl.w	r2, r0, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	631a      	str	r2, [r3, #48]	; 0x30
 8001e0a:	e063      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b09      	cmp	r3, #9
 8001e12:	d81e      	bhi.n	8001e52 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	4413      	add	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	3b1e      	subs	r3, #30
 8001e28:	221f      	movs	r2, #31
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	4019      	ands	r1, r3
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	6818      	ldr	r0, [r3, #0]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	3b1e      	subs	r3, #30
 8001e44:	fa00 f203 	lsl.w	r2, r0, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	635a      	str	r2, [r3, #52]	; 0x34
 8001e50:	e040      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b0e      	cmp	r3, #14
 8001e58:	d81e      	bhi.n	8001e98 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	3b3c      	subs	r3, #60	; 0x3c
 8001e6e:	221f      	movs	r2, #31
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	4019      	ands	r1, r3
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4413      	add	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	3b3c      	subs	r3, #60	; 0x3c
 8001e8a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	639a      	str	r2, [r3, #56]	; 0x38
 8001e96:	e01d      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4413      	add	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	3b5a      	subs	r3, #90	; 0x5a
 8001eac:	221f      	movs	r2, #31
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	4019      	ands	r1, r3
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4413      	add	r3, r2
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	3b5a      	subs	r3, #90	; 0x5a
 8001ec8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f040 80e5 	bne.w	80020ae <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b09      	cmp	r3, #9
 8001eea:	d91c      	bls.n	8001f26 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6999      	ldr	r1, [r3, #24]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	3b1e      	subs	r3, #30
 8001efe:	2207      	movs	r2, #7
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	4019      	ands	r1, r3
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	6898      	ldr	r0, [r3, #8]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4613      	mov	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4413      	add	r3, r2
 8001f16:	3b1e      	subs	r3, #30
 8001f18:	fa00 f203 	lsl.w	r2, r0, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	619a      	str	r2, [r3, #24]
 8001f24:	e019      	b.n	8001f5a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6959      	ldr	r1, [r3, #20]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4613      	mov	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	2207      	movs	r2, #7
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	4019      	ands	r1, r3
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	6898      	ldr	r0, [r3, #8]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4413      	add	r3, r2
 8001f4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	695a      	ldr	r2, [r3, #20]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	08db      	lsrs	r3, r3, #3
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d84f      	bhi.n	800201c <HAL_ADC_ConfigChannel+0x28c>
 8001f7c:	a201      	add	r2, pc, #4	; (adr r2, 8001f84 <HAL_ADC_ConfigChannel+0x1f4>)
 8001f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f82:	bf00      	nop
 8001f84:	08001f95 	.word	0x08001f95
 8001f88:	08001fb7 	.word	0x08001fb7
 8001f8c:	08001fd9 	.word	0x08001fd9
 8001f90:	08001ffb 	.word	0x08001ffb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f9a:	4b99      	ldr	r3, [pc, #612]	; (8002200 <HAL_ADC_ConfigChannel+0x470>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	6812      	ldr	r2, [r2, #0]
 8001fa2:	0691      	lsls	r1, r2, #26
 8001fa4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001fb2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001fb4:	e07b      	b.n	80020ae <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001fbc:	4b90      	ldr	r3, [pc, #576]	; (8002200 <HAL_ADC_ConfigChannel+0x470>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	0691      	lsls	r1, r2, #26
 8001fc6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001fd4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001fd6:	e06a      	b.n	80020ae <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001fde:	4b88      	ldr	r3, [pc, #544]	; (8002200 <HAL_ADC_ConfigChannel+0x470>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	0691      	lsls	r1, r2, #26
 8001fe8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001fea:	430a      	orrs	r2, r1
 8001fec:	431a      	orrs	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ff6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ff8:	e059      	b.n	80020ae <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002000:	4b7f      	ldr	r3, [pc, #508]	; (8002200 <HAL_ADC_ConfigChannel+0x470>)
 8002002:	4013      	ands	r3, r2
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	0691      	lsls	r1, r2, #26
 800200a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800200c:	430a      	orrs	r2, r1
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002018:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800201a:	e048      	b.n	80020ae <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002022:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	069b      	lsls	r3, r3, #26
 800202c:	429a      	cmp	r2, r3
 800202e:	d107      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800203e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002046:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	069b      	lsls	r3, r3, #26
 8002050:	429a      	cmp	r2, r3
 8002052:	d107      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002062:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800206a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	069b      	lsls	r3, r3, #26
 8002074:	429a      	cmp	r2, r3
 8002076:	d107      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002086:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800208e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	069b      	lsls	r3, r3, #26
 8002098:	429a      	cmp	r2, r3
 800209a:	d107      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020aa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80020ac:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d108      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x33e>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x33e>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x340>
 80020ce:	2300      	movs	r3, #0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f040 8131 	bne.w	8002338 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d00f      	beq.n	80020fe <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2201      	movs	r2, #1
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43da      	mvns	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	400a      	ands	r2, r1
 80020f8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80020fc:	e049      	b.n	8002192 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2201      	movs	r2, #1
 800210c:	409a      	lsls	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b09      	cmp	r3, #9
 800211e:	d91c      	bls.n	800215a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6999      	ldr	r1, [r3, #24]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4613      	mov	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4413      	add	r3, r2
 8002130:	3b1b      	subs	r3, #27
 8002132:	2207      	movs	r2, #7
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	4019      	ands	r1, r3
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	6898      	ldr	r0, [r3, #8]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4613      	mov	r3, r2
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	4413      	add	r3, r2
 800214a:	3b1b      	subs	r3, #27
 800214c:	fa00 f203 	lsl.w	r2, r0, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	619a      	str	r2, [r3, #24]
 8002158:	e01b      	b.n	8002192 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6959      	ldr	r1, [r3, #20]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	4613      	mov	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	2207      	movs	r2, #7
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	4019      	ands	r1, r3
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	6898      	ldr	r0, [r3, #8]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	4613      	mov	r3, r2
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4413      	add	r3, r2
 8002186:	fa00 f203 	lsl.w	r2, r0, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800219a:	d004      	beq.n	80021a6 <HAL_ADC_ConfigChannel+0x416>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a18      	ldr	r2, [pc, #96]	; (8002204 <HAL_ADC_ConfigChannel+0x474>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d101      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x41a>
 80021a6:	4b18      	ldr	r3, [pc, #96]	; (8002208 <HAL_ADC_ConfigChannel+0x478>)
 80021a8:	e000      	b.n	80021ac <HAL_ADC_ConfigChannel+0x41c>
 80021aa:	4b18      	ldr	r3, [pc, #96]	; (800220c <HAL_ADC_ConfigChannel+0x47c>)
 80021ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b10      	cmp	r3, #16
 80021b4:	d105      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80021b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d015      	beq.n	80021ee <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80021c6:	2b11      	cmp	r3, #17
 80021c8:	d105      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80021ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00b      	beq.n	80021ee <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80021da:	2b12      	cmp	r3, #18
 80021dc:	f040 80ac 	bne.w	8002338 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80021e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f040 80a5 	bne.w	8002338 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021f6:	d10b      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x480>
 80021f8:	4b02      	ldr	r3, [pc, #8]	; (8002204 <HAL_ADC_ConfigChannel+0x474>)
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	e023      	b.n	8002246 <HAL_ADC_ConfigChannel+0x4b6>
 80021fe:	bf00      	nop
 8002200:	83fff000 	.word	0x83fff000
 8002204:	50000100 	.word	0x50000100
 8002208:	50000300 	.word	0x50000300
 800220c:	50000700 	.word	0x50000700
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a4e      	ldr	r2, [pc, #312]	; (8002350 <HAL_ADC_ConfigChannel+0x5c0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d103      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x492>
 800221a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	e011      	b.n	8002246 <HAL_ADC_ConfigChannel+0x4b6>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a4b      	ldr	r2, [pc, #300]	; (8002354 <HAL_ADC_ConfigChannel+0x5c4>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d102      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x4a2>
 800222c:	4b4a      	ldr	r3, [pc, #296]	; (8002358 <HAL_ADC_ConfigChannel+0x5c8>)
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	e009      	b.n	8002246 <HAL_ADC_ConfigChannel+0x4b6>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a48      	ldr	r2, [pc, #288]	; (8002358 <HAL_ADC_ConfigChannel+0x5c8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d102      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x4b2>
 800223c:	4b45      	ldr	r3, [pc, #276]	; (8002354 <HAL_ADC_ConfigChannel+0x5c4>)
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	e001      	b.n	8002246 <HAL_ADC_ConfigChannel+0x4b6>
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	2b01      	cmp	r3, #1
 8002252:	d108      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x4d6>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x4d6>
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <HAL_ADC_ConfigChannel+0x4d8>
 8002266:	2300      	movs	r3, #0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d150      	bne.n	800230e <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800226c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800226e:	2b00      	cmp	r3, #0
 8002270:	d010      	beq.n	8002294 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b01      	cmp	r3, #1
 800227c:	d107      	bne.n	800228e <HAL_ADC_ConfigChannel+0x4fe>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_ADC_ConfigChannel+0x4fe>
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <HAL_ADC_ConfigChannel+0x500>
 800228e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002290:	2b00      	cmp	r3, #0
 8002292:	d13c      	bne.n	800230e <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b10      	cmp	r3, #16
 800229a:	d11d      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x548>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022a4:	d118      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80022a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022b0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022b2:	4b2a      	ldr	r3, [pc, #168]	; (800235c <HAL_ADC_ConfigChannel+0x5cc>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a2a      	ldr	r2, [pc, #168]	; (8002360 <HAL_ADC_ConfigChannel+0x5d0>)
 80022b8:	fba2 2303 	umull	r2, r3, r2, r3
 80022bc:	0c9a      	lsrs	r2, r3, #18
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022c8:	e002      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	3b01      	subs	r3, #1
 80022ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f9      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022d6:	e02e      	b.n	8002336 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b11      	cmp	r3, #17
 80022de:	d10b      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x568>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022e8:	d106      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80022ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80022f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022f4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022f6:	e01e      	b.n	8002336 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b12      	cmp	r3, #18
 80022fe:	d11a      	bne.n	8002336 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002300:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800230a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800230c:	e013      	b.n	8002336 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f043 0220 	orr.w	r2, r3, #32
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002320:	e00a      	b.n	8002338 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f043 0220 	orr.w	r2, r3, #32
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002334:	e000      	b.n	8002338 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002336:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002340:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002344:	4618      	mov	r0, r3
 8002346:	376c      	adds	r7, #108	; 0x6c
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	50000100 	.word	0x50000100
 8002354:	50000400 	.word	0x50000400
 8002358:	50000500 	.word	0x50000500
 800235c:	20000004 	.word	0x20000004
 8002360:	431bde83 	.word	0x431bde83

08002364 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002364:	b480      	push	{r7}
 8002366:	b099      	sub	sp, #100	; 0x64
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800237c:	d102      	bne.n	8002384 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800237e:	4b6d      	ldr	r3, [pc, #436]	; (8002534 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	e01a      	b.n	80023ba <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a6a      	ldr	r2, [pc, #424]	; (8002534 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d103      	bne.n	8002396 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800238e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	e011      	b.n	80023ba <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a67      	ldr	r2, [pc, #412]	; (8002538 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d102      	bne.n	80023a6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80023a0:	4b66      	ldr	r3, [pc, #408]	; (800253c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80023a2:	60bb      	str	r3, [r7, #8]
 80023a4:	e009      	b.n	80023ba <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a64      	ldr	r2, [pc, #400]	; (800253c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d102      	bne.n	80023b6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80023b0:	4b61      	ldr	r3, [pc, #388]	; (8002538 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	e001      	b.n	80023ba <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80023b6:	2300      	movs	r3, #0
 80023b8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0b0      	b.n	8002526 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d101      	bne.n	80023d2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e0a9      	b.n	8002526 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f040 808d 	bne.w	8002504 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f040 8086 	bne.w	8002504 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002400:	d004      	beq.n	800240c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a4b      	ldr	r2, [pc, #300]	; (8002534 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d101      	bne.n	8002410 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800240c:	4b4c      	ldr	r3, [pc, #304]	; (8002540 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800240e:	e000      	b.n	8002412 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002410:	4b4c      	ldr	r3, [pc, #304]	; (8002544 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002412:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d040      	beq.n	800249e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800241c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	6859      	ldr	r1, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800242e:	035b      	lsls	r3, r3, #13
 8002430:	430b      	orrs	r3, r1
 8002432:	431a      	orrs	r2, r3
 8002434:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002436:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	2b01      	cmp	r3, #1
 8002444:	d108      	bne.n	8002458 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002458:	2300      	movs	r3, #0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d15c      	bne.n	8002518 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	2b01      	cmp	r3, #1
 8002468:	d107      	bne.n	800247a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800247a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800247c:	2b00      	cmp	r3, #0
 800247e:	d14b      	bne.n	8002518 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002480:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002488:	f023 030f 	bic.w	r3, r3, #15
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	6811      	ldr	r1, [r2, #0]
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	6892      	ldr	r2, [r2, #8]
 8002494:	430a      	orrs	r2, r1
 8002496:	431a      	orrs	r2, r3
 8002498:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800249a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800249c:	e03c      	b.n	8002518 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800249e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024a8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d108      	bne.n	80024ca <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80024ca:	2300      	movs	r3, #0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d123      	bne.n	8002518 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d107      	bne.n	80024ec <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80024ec:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d112      	bne.n	8002518 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80024f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024fa:	f023 030f 	bic.w	r3, r3, #15
 80024fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002500:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002502:	e009      	b.n	8002518 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	f043 0220 	orr.w	r2, r3, #32
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002516:	e000      	b.n	800251a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002518:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002522:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002526:	4618      	mov	r0, r3
 8002528:	3764      	adds	r7, #100	; 0x64
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	50000100 	.word	0x50000100
 8002538:	50000400 	.word	0x50000400
 800253c:	50000500 	.word	0x50000500
 8002540:	50000300 	.word	0x50000300
 8002544:	50000700 	.word	0x50000700

08002548 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	2b01      	cmp	r3, #1
 8002560:	d108      	bne.n	8002574 <ADC_Enable+0x2c>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <ADC_Enable+0x2c>
 8002570:	2301      	movs	r3, #1
 8002572:	e000      	b.n	8002576 <ADC_Enable+0x2e>
 8002574:	2300      	movs	r3, #0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d143      	bne.n	8002602 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	4b22      	ldr	r3, [pc, #136]	; (800260c <ADC_Enable+0xc4>)
 8002582:	4013      	ands	r3, r2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00d      	beq.n	80025a4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	f043 0210 	orr.w	r2, r3, #16
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002598:	f043 0201 	orr.w	r2, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e02f      	b.n	8002604 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0201 	orr.w	r2, r2, #1
 80025b2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80025b4:	f7fe fc78 	bl	8000ea8 <HAL_GetTick>
 80025b8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025ba:	e01b      	b.n	80025f4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025bc:	f7fe fc74 	bl	8000ea8 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d914      	bls.n	80025f4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d00d      	beq.n	80025f4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	f043 0210 	orr.w	r2, r3, #16
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e8:	f043 0201 	orr.w	r2, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e007      	b.n	8002604 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d1dc      	bne.n	80025bc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	8000003f 	.word	0x8000003f

08002610 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b01      	cmp	r3, #1
 8002628:	d108      	bne.n	800263c <ADC_Disable+0x2c>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <ADC_Disable+0x2c>
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <ADC_Disable+0x2e>
 800263c:	2300      	movs	r3, #0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d047      	beq.n	80026d2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 030d 	and.w	r3, r3, #13
 800264c:	2b01      	cmp	r3, #1
 800264e:	d10f      	bne.n	8002670 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0202 	orr.w	r2, r2, #2
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2203      	movs	r2, #3
 8002666:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002668:	f7fe fc1e 	bl	8000ea8 <HAL_GetTick>
 800266c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800266e:	e029      	b.n	80026c4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	f043 0210 	orr.w	r2, r3, #16
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002680:	f043 0201 	orr.w	r2, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e023      	b.n	80026d4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800268c:	f7fe fc0c 	bl	8000ea8 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d914      	bls.n	80026c4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d10d      	bne.n	80026c4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	f043 0210 	orr.w	r2, r3, #16
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b8:	f043 0201 	orr.w	r2, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e007      	b.n	80026d4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d0dc      	beq.n	800268c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 030c 	and.w	r3, r3, #12
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 809b 	beq.w	8002838 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002710:	d12a      	bne.n	8002768 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002716:	2b01      	cmp	r3, #1
 8002718:	d126      	bne.n	8002768 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800271e:	2b01      	cmp	r3, #1
 8002720:	d122      	bne.n	8002768 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8002722:	230c      	movs	r3, #12
 8002724:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002726:	e014      	b.n	8002752 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4a46      	ldr	r2, [pc, #280]	; (8002844 <ADC_ConversionStop+0x168>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d90d      	bls.n	800274c <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	f043 0210 	orr.w	r2, r3, #16
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002740:	f043 0201 	orr.w	r2, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e076      	b.n	800283a <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	3301      	adds	r3, #1
 8002750:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275c:	2b40      	cmp	r3, #64	; 0x40
 800275e:	d1e3      	bne.n	8002728 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2240      	movs	r2, #64	; 0x40
 8002766:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	2b60      	cmp	r3, #96	; 0x60
 800276c:	d015      	beq.n	800279a <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b04      	cmp	r3, #4
 800277a:	d10e      	bne.n	800279a <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002786:	2b00      	cmp	r3, #0
 8002788:	d107      	bne.n	800279a <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 0210 	orr.w	r2, r2, #16
 8002798:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b0c      	cmp	r3, #12
 800279e:	d015      	beq.n	80027cc <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d10e      	bne.n	80027cc <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d107      	bne.n	80027cc <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0220 	orr.w	r2, r2, #32
 80027ca:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	2b60      	cmp	r3, #96	; 0x60
 80027d0:	d005      	beq.n	80027de <ADC_ConversionStop+0x102>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2b6c      	cmp	r3, #108	; 0x6c
 80027d6:	d105      	bne.n	80027e4 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80027d8:	230c      	movs	r3, #12
 80027da:	617b      	str	r3, [r7, #20]
        break;
 80027dc:	e005      	b.n	80027ea <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80027de:	2308      	movs	r3, #8
 80027e0:	617b      	str	r3, [r7, #20]
        break;
 80027e2:	e002      	b.n	80027ea <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80027e4:	2304      	movs	r3, #4
 80027e6:	617b      	str	r3, [r7, #20]
        break;
 80027e8:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80027ea:	f7fe fb5d 	bl	8000ea8 <HAL_GetTick>
 80027ee:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80027f0:	e01b      	b.n	800282a <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80027f2:	f7fe fb59 	bl	8000ea8 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b0b      	cmp	r3, #11
 80027fe:	d914      	bls.n	800282a <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	4013      	ands	r3, r2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00d      	beq.n	800282a <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f043 0210 	orr.w	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	f043 0201 	orr.w	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e007      	b.n	800283a <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	4013      	ands	r3, r2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1dc      	bne.n	80027f2 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	000993ff 	.word	0x000993ff

08002848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <__NVIC_SetPriorityGrouping+0x44>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002864:	4013      	ands	r3, r2
 8002866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002870:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800287a:	4a04      	ldr	r2, [pc, #16]	; (800288c <__NVIC_SetPriorityGrouping+0x44>)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	60d3      	str	r3, [r2, #12]
}
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002894:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	0a1b      	lsrs	r3, r3, #8
 800289a:	f003 0307 	and.w	r3, r3, #7
}
 800289e:	4618      	mov	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	e000ed00 	.word	0xe000ed00

080028ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	db0b      	blt.n	80028d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	f003 021f 	and.w	r2, r3, #31
 80028c4:	4907      	ldr	r1, [pc, #28]	; (80028e4 <__NVIC_EnableIRQ+0x38>)
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	2001      	movs	r0, #1
 80028ce:	fa00 f202 	lsl.w	r2, r0, r2
 80028d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	e000e100 	.word	0xe000e100

080028e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	6039      	str	r1, [r7, #0]
 80028f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	db0a      	blt.n	8002912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	490c      	ldr	r1, [pc, #48]	; (8002934 <__NVIC_SetPriority+0x4c>)
 8002902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002906:	0112      	lsls	r2, r2, #4
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	440b      	add	r3, r1
 800290c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002910:	e00a      	b.n	8002928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	b2da      	uxtb	r2, r3
 8002916:	4908      	ldr	r1, [pc, #32]	; (8002938 <__NVIC_SetPriority+0x50>)
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	3b04      	subs	r3, #4
 8002920:	0112      	lsls	r2, r2, #4
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	440b      	add	r3, r1
 8002926:	761a      	strb	r2, [r3, #24]
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	e000e100 	.word	0xe000e100
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800293c:	b480      	push	{r7}
 800293e:	b089      	sub	sp, #36	; 0x24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f1c3 0307 	rsb	r3, r3, #7
 8002956:	2b04      	cmp	r3, #4
 8002958:	bf28      	it	cs
 800295a:	2304      	movcs	r3, #4
 800295c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	3304      	adds	r3, #4
 8002962:	2b06      	cmp	r3, #6
 8002964:	d902      	bls.n	800296c <NVIC_EncodePriority+0x30>
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	3b03      	subs	r3, #3
 800296a:	e000      	b.n	800296e <NVIC_EncodePriority+0x32>
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002970:	f04f 32ff 	mov.w	r2, #4294967295
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43da      	mvns	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	401a      	ands	r2, r3
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002984:	f04f 31ff 	mov.w	r1, #4294967295
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	fa01 f303 	lsl.w	r3, r1, r3
 800298e:	43d9      	mvns	r1, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002994:	4313      	orrs	r3, r2
         );
}
 8002996:	4618      	mov	r0, r3
 8002998:	3724      	adds	r7, #36	; 0x24
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b4:	d301      	bcc.n	80029ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029b6:	2301      	movs	r3, #1
 80029b8:	e00f      	b.n	80029da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ba:	4a0a      	ldr	r2, [pc, #40]	; (80029e4 <SysTick_Config+0x40>)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3b01      	subs	r3, #1
 80029c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029c2:	210f      	movs	r1, #15
 80029c4:	f04f 30ff 	mov.w	r0, #4294967295
 80029c8:	f7ff ff8e 	bl	80028e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029cc:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <SysTick_Config+0x40>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029d2:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <SysTick_Config+0x40>)
 80029d4:	2207      	movs	r2, #7
 80029d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	e000e010 	.word	0xe000e010

080029e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7ff ff29 	bl	8002848 <__NVIC_SetPriorityGrouping>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b086      	sub	sp, #24
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	4603      	mov	r3, r0
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	607a      	str	r2, [r7, #4]
 8002a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a10:	f7ff ff3e 	bl	8002890 <__NVIC_GetPriorityGrouping>
 8002a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	68b9      	ldr	r1, [r7, #8]
 8002a1a:	6978      	ldr	r0, [r7, #20]
 8002a1c:	f7ff ff8e 	bl	800293c <NVIC_EncodePriority>
 8002a20:	4602      	mov	r2, r0
 8002a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a26:	4611      	mov	r1, r2
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff ff5d 	bl	80028e8 <__NVIC_SetPriority>
}
 8002a2e:	bf00      	nop
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff ff31 	bl	80028ac <__NVIC_EnableIRQ>
}
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff ffa2 	bl	80029a4 <SysTick_Config>
 8002a60:	4603      	mov	r3, r0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a7a:	e154      	b.n	8002d26 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	2101      	movs	r1, #1
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	fa01 f303 	lsl.w	r3, r1, r3
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 8146 	beq.w	8002d20 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d005      	beq.n	8002aac <HAL_GPIO_Init+0x40>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d130      	bne.n	8002b0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4013      	ands	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	091b      	lsrs	r3, r3, #4
 8002af8:	f003 0201 	and.w	r2, r3, #1
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d017      	beq.n	8002b4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	2203      	movs	r2, #3
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d123      	bne.n	8002b9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	08da      	lsrs	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3208      	adds	r2, #8
 8002b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	220f      	movs	r2, #15
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4013      	ands	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	691a      	ldr	r2, [r3, #16]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	08da      	lsrs	r2, r3, #3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3208      	adds	r2, #8
 8002b98:	6939      	ldr	r1, [r7, #16]
 8002b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	2203      	movs	r2, #3
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 0203 	and.w	r2, r3, #3
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 80a0 	beq.w	8002d20 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be0:	4b58      	ldr	r3, [pc, #352]	; (8002d44 <HAL_GPIO_Init+0x2d8>)
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	4a57      	ldr	r2, [pc, #348]	; (8002d44 <HAL_GPIO_Init+0x2d8>)
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	6193      	str	r3, [r2, #24]
 8002bec:	4b55      	ldr	r3, [pc, #340]	; (8002d44 <HAL_GPIO_Init+0x2d8>)
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bf8:	4a53      	ldr	r2, [pc, #332]	; (8002d48 <HAL_GPIO_Init+0x2dc>)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	089b      	lsrs	r3, r3, #2
 8002bfe:	3302      	adds	r3, #2
 8002c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	220f      	movs	r2, #15
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c22:	d019      	beq.n	8002c58 <HAL_GPIO_Init+0x1ec>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a49      	ldr	r2, [pc, #292]	; (8002d4c <HAL_GPIO_Init+0x2e0>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d013      	beq.n	8002c54 <HAL_GPIO_Init+0x1e8>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a48      	ldr	r2, [pc, #288]	; (8002d50 <HAL_GPIO_Init+0x2e4>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d00d      	beq.n	8002c50 <HAL_GPIO_Init+0x1e4>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a47      	ldr	r2, [pc, #284]	; (8002d54 <HAL_GPIO_Init+0x2e8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d007      	beq.n	8002c4c <HAL_GPIO_Init+0x1e0>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a46      	ldr	r2, [pc, #280]	; (8002d58 <HAL_GPIO_Init+0x2ec>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d101      	bne.n	8002c48 <HAL_GPIO_Init+0x1dc>
 8002c44:	2304      	movs	r3, #4
 8002c46:	e008      	b.n	8002c5a <HAL_GPIO_Init+0x1ee>
 8002c48:	2305      	movs	r3, #5
 8002c4a:	e006      	b.n	8002c5a <HAL_GPIO_Init+0x1ee>
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e004      	b.n	8002c5a <HAL_GPIO_Init+0x1ee>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e002      	b.n	8002c5a <HAL_GPIO_Init+0x1ee>
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <HAL_GPIO_Init+0x1ee>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	f002 0203 	and.w	r2, r2, #3
 8002c60:	0092      	lsls	r2, r2, #2
 8002c62:	4093      	lsls	r3, r2
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c6a:	4937      	ldr	r1, [pc, #220]	; (8002d48 <HAL_GPIO_Init+0x2dc>)
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	089b      	lsrs	r3, r3, #2
 8002c70:	3302      	adds	r3, #2
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c78:	4b38      	ldr	r3, [pc, #224]	; (8002d5c <HAL_GPIO_Init+0x2f0>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	43db      	mvns	r3, r3
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4013      	ands	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c9c:	4a2f      	ldr	r2, [pc, #188]	; (8002d5c <HAL_GPIO_Init+0x2f0>)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ca2:	4b2e      	ldr	r3, [pc, #184]	; (8002d5c <HAL_GPIO_Init+0x2f0>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	43db      	mvns	r3, r3
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002cc6:	4a25      	ldr	r2, [pc, #148]	; (8002d5c <HAL_GPIO_Init+0x2f0>)
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ccc:	4b23      	ldr	r3, [pc, #140]	; (8002d5c <HAL_GPIO_Init+0x2f0>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002cf0:	4a1a      	ldr	r2, [pc, #104]	; (8002d5c <HAL_GPIO_Init+0x2f0>)
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cf6:	4b19      	ldr	r3, [pc, #100]	; (8002d5c <HAL_GPIO_Init+0x2f0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	4013      	ands	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d1a:	4a10      	ldr	r2, [pc, #64]	; (8002d5c <HAL_GPIO_Init+0x2f0>)
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	3301      	adds	r3, #1
 8002d24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f47f aea3 	bne.w	8002a7c <HAL_GPIO_Init+0x10>
  }
}
 8002d36:	bf00      	nop
 8002d38:	bf00      	nop
 8002d3a:	371c      	adds	r7, #28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40010000 	.word	0x40010000
 8002d4c:	48000400 	.word	0x48000400
 8002d50:	48000800 	.word	0x48000800
 8002d54:	48000c00 	.word	0x48000c00
 8002d58:	48001000 	.word	0x48001000
 8002d5c:	40010400 	.word	0x40010400

08002d60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	887b      	ldrh	r3, [r7, #2]
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	73fb      	strb	r3, [r7, #15]
 8002d7c:	e001      	b.n	8002d82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	807b      	strh	r3, [r7, #2]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002da0:	787b      	ldrb	r3, [r7, #1]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002da6:	887a      	ldrh	r2, [r7, #2]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dac:	e002      	b.n	8002db4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dae:	887a      	ldrh	r2, [r7, #2]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002dca:	4b08      	ldr	r3, [pc, #32]	; (8002dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d006      	beq.n	8002de4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dd6:	4a05      	ldr	r2, [pc, #20]	; (8002dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dd8:	88fb      	ldrh	r3, [r7, #6]
 8002dda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f006 ff9e 	bl	8009d20 <HAL_GPIO_EXTI_Callback>
  }
}
 8002de4:	bf00      	nop
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40010400 	.word	0x40010400

08002df0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002df2:	b08b      	sub	sp, #44	; 0x2c
 8002df4:	af06      	add	r7, sp, #24
 8002df6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e0c4      	b.n	8002f8c <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d106      	bne.n	8002e1c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f008 fd54 	bl	800b8c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2203      	movs	r2, #3
 8002e20:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f004 fb24 	bl	8007476 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e2e:	2300      	movs	r3, #0
 8002e30:	73fb      	strb	r3, [r7, #15]
 8002e32:	e040      	b.n	8002eb6 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	440b      	add	r3, r1
 8002e44:	3301      	adds	r3, #1
 8002e46:	2201      	movs	r2, #1
 8002e48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	440b      	add	r3, r1
 8002e5a:	7bfa      	ldrb	r2, [r7, #15]
 8002e5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	440b      	add	r3, r1
 8002e6e:	3303      	adds	r3, #3
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e74:	7bfa      	ldrb	r2, [r7, #15]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	440b      	add	r3, r1
 8002e82:	3338      	adds	r3, #56	; 0x38
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e88:	7bfa      	ldrb	r2, [r7, #15]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	440b      	add	r3, r1
 8002e96:	333c      	adds	r3, #60	; 0x3c
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e9c:	7bfa      	ldrb	r2, [r7, #15]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	440b      	add	r3, r1
 8002eaa:	3340      	adds	r3, #64	; 0x40
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	73fb      	strb	r3, [r7, #15]
 8002eb6:	7bfa      	ldrb	r2, [r7, #15]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d3b9      	bcc.n	8002e34 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	73fb      	strb	r3, [r7, #15]
 8002ec4:	e044      	b.n	8002f50 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ec6:	7bfa      	ldrb	r2, [r7, #15]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	440b      	add	r3, r1
 8002ed4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002ed8:	2200      	movs	r2, #0
 8002eda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002edc:	7bfa      	ldrb	r2, [r7, #15]
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	440b      	add	r3, r1
 8002eea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002eee:	7bfa      	ldrb	r2, [r7, #15]
 8002ef0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ef2:	7bfa      	ldrb	r2, [r7, #15]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	440b      	add	r3, r1
 8002f00:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002f04:	2200      	movs	r2, #0
 8002f06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f08:	7bfa      	ldrb	r2, [r7, #15]
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	440b      	add	r3, r1
 8002f16:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f1e:	7bfa      	ldrb	r2, [r7, #15]
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	440b      	add	r3, r1
 8002f2c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f34:	7bfa      	ldrb	r2, [r7, #15]
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	440b      	add	r3, r1
 8002f42:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
 8002f50:	7bfa      	ldrb	r2, [r7, #15]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d3b5      	bcc.n	8002ec6 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	687e      	ldr	r6, [r7, #4]
 8002f62:	466d      	mov	r5, sp
 8002f64:	f106 0410 	add.w	r4, r6, #16
 8002f68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f6c:	6823      	ldr	r3, [r4, #0]
 8002f6e:	602b      	str	r3, [r5, #0]
 8002f70:	1d33      	adds	r3, r6, #4
 8002f72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f74:	6838      	ldr	r0, [r7, #0]
 8002f76:	f004 fa99 	bl	80074ac <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f94 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_PCD_Start+0x16>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e016      	b.n	8002fd8 <HAL_PCD_Start+0x44>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f004 fa46 	bl	8007448 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f008 ff1e 	bl	800be00 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f006 fd06 	bl	80099da <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f006 fcff 	bl	80099f0 <USB_ReadInterrupts>
 8002ff2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fab2 	bl	8003568 <PCD_EP_ISR_Handler>

    return;
 8003004:	e0bd      	b.n	8003182 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300c:	2b00      	cmp	r3, #0
 800300e:	d013      	beq.n	8003038 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003018:	b29a      	uxth	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003022:	b292      	uxth	r2, r2
 8003024:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f008 fcec 	bl	800ba06 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800302e:	2100      	movs	r1, #0
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f8a9 	bl	8003188 <HAL_PCD_SetAddress>

    return;
 8003036:	e0a4      	b.n	8003182 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00c      	beq.n	800305c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800304a:	b29a      	uxth	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003054:	b292      	uxth	r2, r2
 8003056:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800305a:	e092      	b.n	8003182 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00c      	beq.n	8003080 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800306e:	b29a      	uxth	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003078:	b292      	uxth	r2, r2
 800307a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800307e:	e080      	b.n	8003182 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d027      	beq.n	80030da <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003092:	b29a      	uxth	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0204 	bic.w	r2, r2, #4
 800309c:	b292      	uxth	r2, r2
 800309e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0208 	bic.w	r2, r2, #8
 80030b4:	b292      	uxth	r2, r2
 80030b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f008 fcdc 	bl	800ba78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030d2:	b292      	uxth	r2, r2
 80030d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80030d8:	e053      	b.n	8003182 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d027      	beq.n	8003134 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0208 	orr.w	r2, r2, #8
 80030f6:	b292      	uxth	r2, r2
 80030f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003104:	b29a      	uxth	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800310e:	b292      	uxth	r2, r2
 8003110:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800311c:	b29a      	uxth	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0204 	orr.w	r2, r2, #4
 8003126:	b292      	uxth	r2, r2
 8003128:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f008 fc89 	bl	800ba44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003132:	e026      	b.n	8003182 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00f      	beq.n	800315e <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003146:	b29a      	uxth	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003150:	b292      	uxth	r2, r2
 8003152:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f008 fc47 	bl	800b9ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800315c:	e011      	b.n	8003182 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00c      	beq.n	8003182 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003170:	b29a      	uxth	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800317a:	b292      	uxth	r2, r2
 800317c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003180:	bf00      	nop
  }
}
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_PCD_SetAddress+0x1a>
 800319e:	2302      	movs	r3, #2
 80031a0:	e013      	b.n	80031ca <HAL_PCD_SetAddress+0x42>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	78fa      	ldrb	r2, [r7, #3]
 80031b8:	4611      	mov	r1, r2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f006 fbf9 	bl	80099b2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b084      	sub	sp, #16
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	4608      	mov	r0, r1
 80031dc:	4611      	mov	r1, r2
 80031de:	461a      	mov	r2, r3
 80031e0:	4603      	mov	r3, r0
 80031e2:	70fb      	strb	r3, [r7, #3]
 80031e4:	460b      	mov	r3, r1
 80031e6:	803b      	strh	r3, [r7, #0]
 80031e8:	4613      	mov	r3, r2
 80031ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	da0e      	bge.n	8003216 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	4413      	add	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	705a      	strb	r2, [r3, #1]
 8003214:	e00e      	b.n	8003234 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003216:	78fb      	ldrb	r3, [r7, #3]
 8003218:	f003 0207 	and.w	r2, r3, #7
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	4413      	add	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	b2da      	uxtb	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003240:	883a      	ldrh	r2, [r7, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	78ba      	ldrb	r2, [r7, #2]
 800324a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800324c:	78bb      	ldrb	r3, [r7, #2]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d102      	bne.n	8003258 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_PCD_EP_Open+0x94>
 8003262:	2302      	movs	r3, #2
 8003264:	e00e      	b.n	8003284 <HAL_PCD_EP_Open+0xb2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68f9      	ldr	r1, [r7, #12]
 8003274:	4618      	mov	r0, r3
 8003276:	f004 f93b 	bl	80074f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003282:	7afb      	ldrb	r3, [r7, #11]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003298:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800329c:	2b00      	cmp	r3, #0
 800329e:	da0e      	bge.n	80032be <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032a0:	78fb      	ldrb	r3, [r7, #3]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	4413      	add	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2201      	movs	r2, #1
 80032ba:	705a      	strb	r2, [r3, #1]
 80032bc:	e00e      	b.n	80032dc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032be:	78fb      	ldrb	r3, [r7, #3]
 80032c0:	f003 0207 	and.w	r2, r3, #7
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	4413      	add	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80032dc:	78fb      	ldrb	r3, [r7, #3]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_PCD_EP_Close+0x6a>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e00e      	b.n	8003314 <HAL_PCD_EP_Close+0x88>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68f9      	ldr	r1, [r7, #12]
 8003304:	4618      	mov	r0, r3
 8003306:	f004 fcb7 	bl	8007c78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	607a      	str	r2, [r7, #4]
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	460b      	mov	r3, r1
 800332a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800332c:	7afb      	ldrb	r3, [r7, #11]
 800332e:	f003 0207 	and.w	r2, r3, #7
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4413      	add	r3, r2
 8003342:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	2200      	movs	r2, #0
 8003354:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2200      	movs	r2, #0
 800335a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800335c:	7afb      	ldrb	r3, [r7, #11]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	b2da      	uxtb	r2, r3
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6979      	ldr	r1, [r7, #20]
 800336e:	4618      	mov	r0, r3
 8003370:	f004 fe6f 	bl	8008052 <USB_EPStartXfer>

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	460b      	mov	r3, r1
 8003388:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	f003 0207 	and.w	r2, r3, #7
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	440b      	add	r3, r1
 800339c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80033a0:	681b      	ldr	r3, [r3, #0]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b086      	sub	sp, #24
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	607a      	str	r2, [r7, #4]
 80033b8:	603b      	str	r3, [r7, #0]
 80033ba:	460b      	mov	r3, r1
 80033bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033be:	7afb      	ldrb	r3, [r7, #11]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	4413      	add	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2200      	movs	r2, #0
 80033f2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	2201      	movs	r2, #1
 80033f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033fa:	7afb      	ldrb	r3, [r7, #11]
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	b2da      	uxtb	r2, r3
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6979      	ldr	r1, [r7, #20]
 800340c:	4618      	mov	r0, r3
 800340e:	f004 fe20 	bl	8008052 <USB_EPStartXfer>

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003428:	78fb      	ldrb	r3, [r7, #3]
 800342a:	f003 0207 	and.w	r2, r3, #7
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	429a      	cmp	r2, r3
 8003434:	d901      	bls.n	800343a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e03e      	b.n	80034b8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800343a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800343e:	2b00      	cmp	r3, #0
 8003440:	da0e      	bge.n	8003460 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003442:	78fb      	ldrb	r3, [r7, #3]
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	4413      	add	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2201      	movs	r2, #1
 800345c:	705a      	strb	r2, [r3, #1]
 800345e:	e00c      	b.n	800347a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003460:	78fa      	ldrb	r2, [r7, #3]
 8003462:	4613      	mov	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	4413      	add	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2201      	movs	r2, #1
 800347e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	b2da      	uxtb	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003492:	2b01      	cmp	r3, #1
 8003494:	d101      	bne.n	800349a <HAL_PCD_EP_SetStall+0x7e>
 8003496:	2302      	movs	r3, #2
 8003498:	e00e      	b.n	80034b8 <HAL_PCD_EP_SetStall+0x9c>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68f9      	ldr	r1, [r7, #12]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f006 f983 	bl	80097b4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	f003 020f 	and.w	r2, r3, #15
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d901      	bls.n	80034de <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e040      	b.n	8003560 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	da0e      	bge.n	8003504 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034e6:	78fb      	ldrb	r3, [r7, #3]
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	4413      	add	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2201      	movs	r2, #1
 8003500:	705a      	strb	r2, [r3, #1]
 8003502:	e00e      	b.n	8003522 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	f003 0207 	and.w	r2, r3, #7
 800350a:	4613      	mov	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	4413      	add	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	b2da      	uxtb	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800353a:	2b01      	cmp	r3, #1
 800353c:	d101      	bne.n	8003542 <HAL_PCD_EP_ClrStall+0x82>
 800353e:	2302      	movs	r3, #2
 8003540:	e00e      	b.n	8003560 <HAL_PCD_EP_ClrStall+0xa0>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68f9      	ldr	r1, [r7, #12]
 8003550:	4618      	mov	r0, r3
 8003552:	f006 f980 	bl	8009856 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b096      	sub	sp, #88	; 0x58
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003570:	e3bf      	b.n	8003cf2 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800357a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800357e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003582:	b2db      	uxtb	r3, r3
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800358c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003590:	2b00      	cmp	r3, #0
 8003592:	f040 8179 	bne.w	8003888 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003596:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800359a:	f003 0310 	and.w	r3, r3, #16
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d152      	bne.n	8003648 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80035ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b2:	81fb      	strh	r3, [r7, #14]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	89fb      	ldrh	r3, [r7, #14]
 80035ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3328      	adds	r3, #40	; 0x28
 80035ca:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	461a      	mov	r2, r3
 80035d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	4413      	add	r3, r2
 80035e0:	3302      	adds	r3, #2
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6812      	ldr	r2, [r2, #0]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035f6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80035f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035fa:	695a      	ldr	r2, [r3, #20]
 80035fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035fe:	69db      	ldr	r3, [r3, #28]
 8003600:	441a      	add	r2, r3
 8003602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003604:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003606:	2100      	movs	r1, #0
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f008 f9d4 	bl	800b9b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 836b 	beq.w	8003cf2 <PCD_EP_ISR_Handler+0x78a>
 800361c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	2b00      	cmp	r3, #0
 8003622:	f040 8366 	bne.w	8003cf2 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003632:	b2da      	uxtb	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	b292      	uxth	r2, r2
 800363a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003646:	e354      	b.n	8003cf2 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800364e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800365a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800365e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003662:	2b00      	cmp	r3, #0
 8003664:	d034      	beq.n	80036d0 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800366e:	b29b      	uxth	r3, r3
 8003670:	461a      	mov	r2, r3
 8003672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	4413      	add	r3, r2
 800367a:	3306      	adds	r3, #6
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6812      	ldr	r2, [r2, #0]
 8003682:	4413      	add	r3, r2
 8003684:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800368e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003690:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6818      	ldr	r0, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800369c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800369e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80036a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	f006 f9f9 	bl	8009a9c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80036b6:	4013      	ands	r3, r2
 80036b8:	823b      	strh	r3, [r7, #16]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	8a3a      	ldrh	r2, [r7, #16]
 80036c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036c4:	b292      	uxth	r2, r2
 80036c6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f008 f947 	bl	800b95c <HAL_PCD_SetupStageCallback>
 80036ce:	e310      	b.n	8003cf2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80036d0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f280 830c 	bge.w	8003cf2 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80036e6:	4013      	ands	r3, r2
 80036e8:	83fb      	strh	r3, [r7, #30]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	8bfa      	ldrh	r2, [r7, #30]
 80036f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036f4:	b292      	uxth	r2, r2
 80036f6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003700:	b29b      	uxth	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	4413      	add	r3, r2
 800370c:	3306      	adds	r3, #6
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6812      	ldr	r2, [r2, #0]
 8003714:	4413      	add	r3, r2
 8003716:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003722:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d019      	beq.n	8003760 <PCD_EP_ISR_Handler+0x1f8>
 800372c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d015      	beq.n	8003760 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6818      	ldr	r0, [r3, #0]
 8003738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800373a:	6959      	ldr	r1, [r3, #20]
 800373c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800373e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003742:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003744:	b29b      	uxth	r3, r3
 8003746:	f006 f9a9 	bl	8009a9c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800374a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	441a      	add	r2, r3
 8003754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003756:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003758:	2100      	movs	r1, #0
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f008 f910 	bl	800b980 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800376a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800376e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003772:	2b00      	cmp	r3, #0
 8003774:	f040 82bd 	bne.w	8003cf2 <PCD_EP_ISR_Handler+0x78a>
 8003778:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800377c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003780:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003784:	f000 82b5 	beq.w	8003cf2 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	61bb      	str	r3, [r7, #24]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003796:	b29b      	uxth	r3, r3
 8003798:	461a      	mov	r2, r3
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	4413      	add	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	881b      	ldrh	r3, [r3, #0]
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	801a      	strh	r2, [r3, #0]
 80037b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	2b3e      	cmp	r3, #62	; 0x3e
 80037be:	d91d      	bls.n	80037fc <PCD_EP_ISR_Handler+0x294>
 80037c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	647b      	str	r3, [r7, #68]	; 0x44
 80037c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	f003 031f 	and.w	r3, r3, #31
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d102      	bne.n	80037da <PCD_EP_ISR_Handler+0x272>
 80037d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037d6:	3b01      	subs	r3, #1
 80037d8:	647b      	str	r3, [r7, #68]	; 0x44
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	b29a      	uxth	r2, r3
 80037e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	029b      	lsls	r3, r3, #10
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	4313      	orrs	r3, r2
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	801a      	strh	r2, [r3, #0]
 80037fa:	e026      	b.n	800384a <PCD_EP_ISR_Handler+0x2e2>
 80037fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10a      	bne.n	800381a <PCD_EP_ISR_Handler+0x2b2>
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	b29b      	uxth	r3, r3
 800380a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800380e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003812:	b29a      	uxth	r2, r3
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	801a      	strh	r2, [r3, #0]
 8003818:	e017      	b.n	800384a <PCD_EP_ISR_Handler+0x2e2>
 800381a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	085b      	lsrs	r3, r3, #1
 8003820:	647b      	str	r3, [r7, #68]	; 0x44
 8003822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <PCD_EP_ISR_Handler+0x2cc>
 800382e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003830:	3301      	adds	r3, #1
 8003832:	647b      	str	r3, [r7, #68]	; 0x44
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	b29a      	uxth	r2, r3
 800383a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800383c:	b29b      	uxth	r3, r3
 800383e:	029b      	lsls	r3, r3, #10
 8003840:	b29b      	uxth	r3, r3
 8003842:	4313      	orrs	r3, r2
 8003844:	b29a      	uxth	r2, r3
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	b29b      	uxth	r3, r3
 8003852:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385a:	827b      	strh	r3, [r7, #18]
 800385c:	8a7b      	ldrh	r3, [r7, #18]
 800385e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003862:	827b      	strh	r3, [r7, #18]
 8003864:	8a7b      	ldrh	r3, [r7, #18]
 8003866:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800386a:	827b      	strh	r3, [r7, #18]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	8a7b      	ldrh	r3, [r7, #18]
 8003872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800387a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800387e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003882:	b29b      	uxth	r3, r3
 8003884:	8013      	strh	r3, [r2, #0]
 8003886:	e234      	b.n	8003cf2 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800389c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f280 80fc 	bge.w	8003a9e <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80038bc:	4013      	ands	r3, r2
 80038be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	461a      	mov	r2, r3
 80038c8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80038d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038d8:	b292      	uxth	r2, r2
 80038da:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80038dc:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80038e0:	4613      	mov	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	4413      	add	r3, r2
 80038f0:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80038f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038f4:	7b1b      	ldrb	r3, [r3, #12]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d125      	bne.n	8003946 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003902:	b29b      	uxth	r3, r3
 8003904:	461a      	mov	r2, r3
 8003906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	4413      	add	r3, r2
 800390e:	3306      	adds	r3, #6
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6812      	ldr	r2, [r2, #0]
 8003916:	4413      	add	r3, r2
 8003918:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003922:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003926:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 8092 	beq.w	8003a54 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6818      	ldr	r0, [r3, #0]
 8003934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003936:	6959      	ldr	r1, [r3, #20]
 8003938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800393a:	88da      	ldrh	r2, [r3, #6]
 800393c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003940:	f006 f8ac 	bl	8009a9c <USB_ReadPMA>
 8003944:	e086      	b.n	8003a54 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003948:	78db      	ldrb	r3, [r3, #3]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d10a      	bne.n	8003964 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800394e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003952:	461a      	mov	r2, r3
 8003954:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f9d9 	bl	8003d0e <HAL_PCD_EP_DB_Receive>
 800395c:	4603      	mov	r3, r0
 800395e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003962:	e077      	b.n	8003a54 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	461a      	mov	r2, r3
 800396a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	b29b      	uxth	r3, r3
 8003976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800397a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	441a      	add	r2, r3
 8003990:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003994:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003998:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800399c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	461a      	mov	r2, r3
 80039ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d024      	beq.n	8003a0c <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	461a      	mov	r2, r3
 80039ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	4413      	add	r3, r2
 80039d6:	3302      	adds	r3, #2
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6812      	ldr	r2, [r2, #0]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039ea:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80039ee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d02e      	beq.n	8003a54 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039fc:	6959      	ldr	r1, [r3, #20]
 80039fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a00:	891a      	ldrh	r2, [r3, #8]
 8003a02:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003a06:	f006 f849 	bl	8009a9c <USB_ReadPMA>
 8003a0a:	e023      	b.n	8003a54 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	461a      	mov	r2, r3
 8003a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	4413      	add	r3, r2
 8003a20:	3306      	adds	r3, #6
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6812      	ldr	r2, [r2, #0]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a34:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003a38:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d009      	beq.n	8003a54 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a46:	6959      	ldr	r1, [r3, #20]
 8003a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a4a:	895a      	ldrh	r2, [r3, #10]
 8003a4c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003a50:	f006 f824 	bl	8009a9c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a56:	69da      	ldr	r2, [r3, #28]
 8003a58:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003a5c:	441a      	add	r2, r3
 8003a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a60:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a64:	695a      	ldr	r2, [r3, #20]
 8003a66:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003a6a:	441a      	add	r2, r3
 8003a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a6e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <PCD_EP_ISR_Handler+0x51c>
 8003a78:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d206      	bcs.n	8003a92 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	4619      	mov	r1, r3
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f007 ff78 	bl	800b980 <HAL_PCD_DataOutStageCallback>
 8003a90:	e005      	b.n	8003a9e <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f004 fada 	bl	8008052 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003a9e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 8123 	beq.w	8003cf2 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8003aac:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003ab0:	1c5a      	adds	r2, r3, #1
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	4413      	add	r3, r2
 8003abe:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	881b      	ldrh	r3, [r3, #0]
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ada:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	441a      	add	r2, r3
 8003aec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003af0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003af4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003afe:	78db      	ldrb	r3, [r3, #3]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	f040 80a2 	bne.w	8003c4a <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8003b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b08:	2200      	movs	r2, #0
 8003b0a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b0e:	7b1b      	ldrb	r3, [r3, #12]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 8093 	beq.w	8003c3c <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b16:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d046      	beq.n	8003bb0 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b24:	785b      	ldrb	r3, [r3, #1]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d126      	bne.n	8003b78 <PCD_EP_ISR_Handler+0x610>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	4413      	add	r3, r2
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
 8003b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	011a      	lsls	r2, r3, #4
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b50:	623b      	str	r3, [r7, #32]
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	801a      	strh	r2, [r3, #0]
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	801a      	strh	r2, [r3, #0]
 8003b76:	e061      	b.n	8003c3c <PCD_EP_ISR_Handler+0x6d4>
 8003b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b7a:	785b      	ldrb	r3, [r3, #1]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d15d      	bne.n	8003c3c <PCD_EP_ISR_Handler+0x6d4>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	461a      	mov	r2, r3
 8003b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b94:	4413      	add	r3, r2
 8003b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	011a      	lsls	r2, r3, #4
 8003b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ba6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003baa:	2200      	movs	r2, #0
 8003bac:	801a      	strh	r2, [r3, #0]
 8003bae:	e045      	b.n	8003c3c <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bb8:	785b      	ldrb	r3, [r3, #1]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d126      	bne.n	8003c0c <PCD_EP_ISR_Handler+0x6a4>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	461a      	mov	r2, r3
 8003bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd2:	4413      	add	r3, r2
 8003bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8003bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	011a      	lsls	r2, r3, #4
 8003bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bde:	4413      	add	r3, r2
 8003be0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003be4:	633b      	str	r3, [r7, #48]	; 0x30
 8003be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	801a      	strh	r2, [r3, #0]
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c08:	801a      	strh	r2, [r3, #0]
 8003c0a:	e017      	b.n	8003c3c <PCD_EP_ISR_Handler+0x6d4>
 8003c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c0e:	785b      	ldrb	r3, [r3, #1]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d113      	bne.n	8003c3c <PCD_EP_ISR_Handler+0x6d4>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	461a      	mov	r2, r3
 8003c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c22:	4413      	add	r3, r2
 8003c24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	011a      	lsls	r2, r3, #4
 8003c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c2e:	4413      	add	r3, r2
 8003c30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c34:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c38:	2200      	movs	r2, #0
 8003c3a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	4619      	mov	r1, r3
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f007 feb7 	bl	800b9b6 <HAL_PCD_DataInStageCallback>
 8003c48:	e053      	b.n	8003cf2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003c4a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d146      	bne.n	8003ce4 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	461a      	mov	r2, r3
 8003c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	4413      	add	r3, r2
 8003c6a:	3302      	adds	r3, #2
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6812      	ldr	r2, [r2, #0]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c84:	699a      	ldr	r2, [r3, #24]
 8003c86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d907      	bls.n	8003c9e <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8003c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c90:	699a      	ldr	r2, [r3, #24]
 8003c92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c96:	1ad2      	subs	r2, r2, r3
 8003c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c9a:	619a      	str	r2, [r3, #24]
 8003c9c:	e002      	b.n	8003ca4 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8003c9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d106      	bne.n	8003cba <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f007 fe7f 	bl	800b9b6 <HAL_PCD_DataInStageCallback>
 8003cb8:	e01b      	b.n	8003cf2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cbc:	695a      	ldr	r2, [r3, #20]
 8003cbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003cc2:	441a      	add	r2, r3
 8003cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cc6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003cd0:	441a      	add	r2, r3
 8003cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cd4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f004 f9b8 	bl	8008052 <USB_EPStartXfer>
 8003ce2:	e006      	b.n	8003cf2 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003ce4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ce8:	461a      	mov	r2, r3
 8003cea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f91b 	bl	8003f28 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	b21b      	sxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f6ff ac37 	blt.w	8003572 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3758      	adds	r7, #88	; 0x58
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b088      	sub	sp, #32
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d1c:	88fb      	ldrh	r3, [r7, #6]
 8003d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d07e      	beq.n	8003e24 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	461a      	mov	r2, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	4413      	add	r3, r2
 8003d3a:	3302      	adds	r3, #2
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	6812      	ldr	r2, [r2, #0]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d4e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	699a      	ldr	r2, [r3, #24]
 8003d54:	8b7b      	ldrh	r3, [r7, #26]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d306      	bcc.n	8003d68 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	699a      	ldr	r2, [r3, #24]
 8003d5e:	8b7b      	ldrh	r3, [r7, #26]
 8003d60:	1ad2      	subs	r2, r2, r3
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	619a      	str	r2, [r3, #24]
 8003d66:	e002      	b.n	8003d6e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d123      	bne.n	8003dbe <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d90:	833b      	strh	r3, [r7, #24]
 8003d92:	8b3b      	ldrh	r3, [r7, #24]
 8003d94:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d98:	833b      	strh	r3, [r7, #24]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	441a      	add	r2, r3
 8003da8:	8b3b      	ldrh	r3, [r7, #24]
 8003daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003dbe:	88fb      	ldrh	r3, [r7, #6]
 8003dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d01f      	beq.n	8003e08 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de2:	82fb      	strh	r3, [r7, #22]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	441a      	add	r2, r3
 8003df2:	8afb      	ldrh	r3, [r7, #22]
 8003df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003e08:	8b7b      	ldrh	r3, [r7, #26]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 8087 	beq.w	8003f1e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	6959      	ldr	r1, [r3, #20]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	891a      	ldrh	r2, [r3, #8]
 8003e1c:	8b7b      	ldrh	r3, [r7, #26]
 8003e1e:	f005 fe3d 	bl	8009a9c <USB_ReadPMA>
 8003e22:	e07c      	b.n	8003f1e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	461a      	mov	r2, r3
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	4413      	add	r3, r2
 8003e38:	3306      	adds	r3, #6
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	6812      	ldr	r2, [r2, #0]
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e4c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	699a      	ldr	r2, [r3, #24]
 8003e52:	8b7b      	ldrh	r3, [r7, #26]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d306      	bcc.n	8003e66 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	699a      	ldr	r2, [r3, #24]
 8003e5c:	8b7b      	ldrh	r3, [r7, #26]
 8003e5e:	1ad2      	subs	r2, r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	619a      	str	r2, [r3, #24]
 8003e64:	e002      	b.n	8003e6c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d123      	bne.n	8003ebc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8e:	83fb      	strh	r3, [r7, #30]
 8003e90:	8bfb      	ldrh	r3, [r7, #30]
 8003e92:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003e96:	83fb      	strh	r3, [r7, #30]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	441a      	add	r2, r3
 8003ea6:	8bfb      	ldrh	r3, [r7, #30]
 8003ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003ebc:	88fb      	ldrh	r3, [r7, #6]
 8003ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d11f      	bne.n	8003f06 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee0:	83bb      	strh	r3, [r7, #28]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	441a      	add	r2, r3
 8003ef0:	8bbb      	ldrh	r3, [r7, #28]
 8003ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003efe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003f06:	8b7b      	ldrh	r3, [r7, #26]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d008      	beq.n	8003f1e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	6959      	ldr	r1, [r3, #20]
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	895a      	ldrh	r2, [r3, #10]
 8003f18:	8b7b      	ldrh	r3, [r7, #26]
 8003f1a:	f005 fdbf 	bl	8009a9c <USB_ReadPMA>
    }
  }

  return count;
 8003f1e:	8b7b      	ldrh	r3, [r7, #26]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3720      	adds	r7, #32
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b0a4      	sub	sp, #144	; 0x90
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	4613      	mov	r3, r2
 8003f34:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f36:	88fb      	ldrh	r3, [r7, #6]
 8003f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 81dd 	beq.w	80042fc <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	4413      	add	r3, r2
 8003f56:	3302      	adds	r3, #2
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	6812      	ldr	r2, [r2, #0]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f6a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	699a      	ldr	r2, [r3, #24]
 8003f72:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d907      	bls.n	8003f8a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	699a      	ldr	r2, [r3, #24]
 8003f7e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003f82:	1ad2      	subs	r2, r2, r3
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	619a      	str	r2, [r3, #24]
 8003f88:	e002      	b.n	8003f90 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f040 80b9 	bne.w	800410c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	785b      	ldrb	r3, [r3, #1]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d126      	bne.n	8003ff0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb6:	4413      	add	r3, r2
 8003fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	011a      	lsls	r2, r3, #4
 8003fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd8:	801a      	strh	r2, [r3, #0]
 8003fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fec:	801a      	strh	r2, [r3, #0]
 8003fee:	e01a      	b.n	8004026 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	785b      	ldrb	r3, [r3, #1]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d116      	bne.n	8004026 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	637b      	str	r3, [r7, #52]	; 0x34
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004006:	b29b      	uxth	r3, r3
 8004008:	461a      	mov	r2, r3
 800400a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800400c:	4413      	add	r3, r2
 800400e:	637b      	str	r3, [r7, #52]	; 0x34
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	011a      	lsls	r2, r3, #4
 8004016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004018:	4413      	add	r3, r2
 800401a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800401e:	633b      	str	r3, [r7, #48]	; 0x30
 8004020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004022:	2200      	movs	r2, #0
 8004024:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	785b      	ldrb	r3, [r3, #1]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d126      	bne.n	8004082 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	61fb      	str	r3, [r7, #28]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004042:	b29b      	uxth	r3, r3
 8004044:	461a      	mov	r2, r3
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	4413      	add	r3, r2
 800404a:	61fb      	str	r3, [r7, #28]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	011a      	lsls	r2, r3, #4
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	4413      	add	r3, r2
 8004056:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800405a:	61bb      	str	r3, [r7, #24]
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	b29b      	uxth	r3, r3
 8004062:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004066:	b29a      	uxth	r2, r3
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	801a      	strh	r2, [r3, #0]
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	b29b      	uxth	r3, r3
 8004072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800407a:	b29a      	uxth	r2, r3
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	801a      	strh	r2, [r3, #0]
 8004080:	e017      	b.n	80040b2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	785b      	ldrb	r3, [r3, #1]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d113      	bne.n	80040b2 <HAL_PCD_EP_DB_Transmit+0x18a>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004092:	b29b      	uxth	r3, r3
 8004094:	461a      	mov	r2, r3
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	4413      	add	r3, r2
 800409a:	627b      	str	r3, [r7, #36]	; 0x24
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	011a      	lsls	r2, r3, #4
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	4413      	add	r3, r2
 80040a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040aa:	623b      	str	r3, [r7, #32]
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	2200      	movs	r2, #0
 80040b0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	4619      	mov	r1, r3
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f007 fc7c 	bl	800b9b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80040be:	88fb      	ldrh	r3, [r7, #6]
 80040c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 82fc 	beq.w	80046c2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	461a      	mov	r2, r3
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e4:	82fb      	strh	r3, [r7, #22]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	441a      	add	r2, r3
 80040f4:	8afb      	ldrh	r3, [r7, #22]
 80040f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004106:	b29b      	uxth	r3, r3
 8004108:	8013      	strh	r3, [r2, #0]
 800410a:	e2da      	b.n	80046c2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800410c:	88fb      	ldrh	r3, [r7, #6]
 800410e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d021      	beq.n	800415a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	461a      	mov	r2, r3
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	b29b      	uxth	r3, r3
 8004128:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800412c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004130:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	461a      	mov	r2, r3
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	441a      	add	r2, r3
 8004142:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800414a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800414e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004156:	b29b      	uxth	r3, r3
 8004158:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004160:	2b01      	cmp	r3, #1
 8004162:	f040 82ae 	bne.w	80046c2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	695a      	ldr	r2, [r3, #20]
 800416a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800416e:	441a      	add	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	69da      	ldr	r2, [r3, #28]
 8004178:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800417c:	441a      	add	r2, r3
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	6a1a      	ldr	r2, [r3, #32]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	429a      	cmp	r2, r3
 800418c:	d30b      	bcc.n	80041a6 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	6a1a      	ldr	r2, [r3, #32]
 800419a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800419e:	1ad2      	subs	r2, r2, r3
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	621a      	str	r2, [r3, #32]
 80041a4:	e017      	b.n	80041d6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d108      	bne.n	80041c0 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80041ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80041b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80041be:	e00a      	b.n	80041d6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2200      	movs	r2, #0
 80041d4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	785b      	ldrb	r3, [r3, #1]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d165      	bne.n	80042aa <HAL_PCD_EP_DB_Transmit+0x382>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	461a      	mov	r2, r3
 80041f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f2:	4413      	add	r3, r2
 80041f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	011a      	lsls	r2, r3, #4
 80041fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041fe:	4413      	add	r3, r2
 8004200:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004204:	63bb      	str	r3, [r7, #56]	; 0x38
 8004206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	b29b      	uxth	r3, r3
 800420c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004210:	b29a      	uxth	r2, r3
 8004212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004214:	801a      	strh	r2, [r3, #0]
 8004216:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800421a:	2b3e      	cmp	r3, #62	; 0x3e
 800421c:	d91d      	bls.n	800425a <HAL_PCD_EP_DB_Transmit+0x332>
 800421e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	64bb      	str	r3, [r7, #72]	; 0x48
 8004226:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800422a:	f003 031f 	and.w	r3, r3, #31
 800422e:	2b00      	cmp	r3, #0
 8004230:	d102      	bne.n	8004238 <HAL_PCD_EP_DB_Transmit+0x310>
 8004232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004234:	3b01      	subs	r3, #1
 8004236:	64bb      	str	r3, [r7, #72]	; 0x48
 8004238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	b29a      	uxth	r2, r3
 800423e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004240:	b29b      	uxth	r3, r3
 8004242:	029b      	lsls	r3, r3, #10
 8004244:	b29b      	uxth	r3, r3
 8004246:	4313      	orrs	r3, r2
 8004248:	b29b      	uxth	r3, r3
 800424a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800424e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004252:	b29a      	uxth	r2, r3
 8004254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004256:	801a      	strh	r2, [r3, #0]
 8004258:	e044      	b.n	80042e4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800425a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10a      	bne.n	8004278 <HAL_PCD_EP_DB_Transmit+0x350>
 8004262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	b29b      	uxth	r3, r3
 8004268:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800426c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004270:	b29a      	uxth	r2, r3
 8004272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004274:	801a      	strh	r2, [r3, #0]
 8004276:	e035      	b.n	80042e4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004278:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800427c:	085b      	lsrs	r3, r3, #1
 800427e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004280:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <HAL_PCD_EP_DB_Transmit+0x36a>
 800428c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800428e:	3301      	adds	r3, #1
 8004290:	64bb      	str	r3, [r7, #72]	; 0x48
 8004292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	b29a      	uxth	r2, r3
 8004298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800429a:	b29b      	uxth	r3, r3
 800429c:	029b      	lsls	r3, r3, #10
 800429e:	b29b      	uxth	r3, r3
 80042a0:	4313      	orrs	r3, r2
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a6:	801a      	strh	r2, [r3, #0]
 80042a8:	e01c      	b.n	80042e4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	785b      	ldrb	r3, [r3, #1]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d118      	bne.n	80042e4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	647b      	str	r3, [r7, #68]	; 0x44
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	461a      	mov	r2, r3
 80042c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c6:	4413      	add	r3, r2
 80042c8:	647b      	str	r3, [r7, #68]	; 0x44
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	011a      	lsls	r2, r3, #4
 80042d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042d2:	4413      	add	r3, r2
 80042d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042d8:	643b      	str	r3, [r7, #64]	; 0x40
 80042da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042de:	b29a      	uxth	r2, r3
 80042e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042e2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6818      	ldr	r0, [r3, #0]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	6959      	ldr	r1, [r3, #20]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	891a      	ldrh	r2, [r3, #8]
 80042f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	f005 fb8b 	bl	8009a10 <USB_WritePMA>
 80042fa:	e1e2      	b.n	80046c2 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004304:	b29b      	uxth	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	4413      	add	r3, r2
 8004310:	3306      	adds	r3, #6
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	6812      	ldr	r2, [r2, #0]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004324:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	699a      	ldr	r2, [r3, #24]
 800432c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004330:	429a      	cmp	r2, r3
 8004332:	d307      	bcc.n	8004344 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	699a      	ldr	r2, [r3, #24]
 8004338:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800433c:	1ad2      	subs	r2, r2, r3
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	619a      	str	r2, [r3, #24]
 8004342:	e002      	b.n	800434a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2200      	movs	r2, #0
 8004348:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	2b00      	cmp	r3, #0
 8004350:	f040 80c0 	bne.w	80044d4 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	785b      	ldrb	r3, [r3, #1]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d126      	bne.n	80043aa <HAL_PCD_EP_DB_Transmit+0x482>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800436a:	b29b      	uxth	r3, r3
 800436c:	461a      	mov	r2, r3
 800436e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004370:	4413      	add	r3, r2
 8004372:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	011a      	lsls	r2, r3, #4
 800437a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800437c:	4413      	add	r3, r2
 800437e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004382:	67bb      	str	r3, [r7, #120]	; 0x78
 8004384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	b29b      	uxth	r3, r3
 800438a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800438e:	b29a      	uxth	r2, r3
 8004390:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004392:	801a      	strh	r2, [r3, #0]
 8004394:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	b29b      	uxth	r3, r3
 800439a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800439e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043a6:	801a      	strh	r2, [r3, #0]
 80043a8:	e01a      	b.n	80043e0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	785b      	ldrb	r3, [r3, #1]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d116      	bne.n	80043e0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	667b      	str	r3, [r7, #100]	; 0x64
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	461a      	mov	r2, r3
 80043c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043c6:	4413      	add	r3, r2
 80043c8:	667b      	str	r3, [r7, #100]	; 0x64
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	011a      	lsls	r2, r3, #4
 80043d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043d2:	4413      	add	r3, r2
 80043d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043d8:	663b      	str	r3, [r7, #96]	; 0x60
 80043da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043dc:	2200      	movs	r2, #0
 80043de:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	677b      	str	r3, [r7, #116]	; 0x74
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	785b      	ldrb	r3, [r3, #1]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d12b      	bne.n	8004446 <HAL_PCD_EP_DB_Transmit+0x51e>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	461a      	mov	r2, r3
 8004400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004402:	4413      	add	r3, r2
 8004404:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	011a      	lsls	r2, r3, #4
 800440c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800440e:	4413      	add	r3, r2
 8004410:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004414:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004418:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	b29b      	uxth	r3, r3
 8004420:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004424:	b29a      	uxth	r2, r3
 8004426:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800442a:	801a      	strh	r2, [r3, #0]
 800442c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	b29b      	uxth	r3, r3
 8004434:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004438:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800443c:	b29a      	uxth	r2, r3
 800443e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004442:	801a      	strh	r2, [r3, #0]
 8004444:	e017      	b.n	8004476 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	785b      	ldrb	r3, [r3, #1]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d113      	bne.n	8004476 <HAL_PCD_EP_DB_Transmit+0x54e>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004456:	b29b      	uxth	r3, r3
 8004458:	461a      	mov	r2, r3
 800445a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800445c:	4413      	add	r3, r2
 800445e:	677b      	str	r3, [r7, #116]	; 0x74
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	011a      	lsls	r2, r3, #4
 8004466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004468:	4413      	add	r3, r2
 800446a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800446e:	673b      	str	r3, [r7, #112]	; 0x70
 8004470:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004472:	2200      	movs	r2, #0
 8004474:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	4619      	mov	r1, r3
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f007 fa9a 	bl	800b9b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004482:	88fb      	ldrh	r3, [r7, #6]
 8004484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004488:	2b00      	cmp	r3, #0
 800448a:	f040 811a 	bne.w	80046c2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	b29b      	uxth	r3, r3
 80044a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	461a      	mov	r2, r3
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	441a      	add	r2, r3
 80044ba:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80044be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	8013      	strh	r3, [r2, #0]
 80044d2:	e0f6      	b.n	80046c2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80044d4:	88fb      	ldrh	r3, [r7, #6]
 80044d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d121      	bne.n	8004522 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	461a      	mov	r2, r3
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	881b      	ldrh	r3, [r3, #0]
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	461a      	mov	r2, r3
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	441a      	add	r2, r3
 800450a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800450e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004512:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004516:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800451a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800451e:	b29b      	uxth	r3, r3
 8004520:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004528:	2b01      	cmp	r3, #1
 800452a:	f040 80ca 	bne.w	80046c2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	695a      	ldr	r2, [r3, #20]
 8004532:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004536:	441a      	add	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	69da      	ldr	r2, [r3, #28]
 8004540:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004544:	441a      	add	r2, r3
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	6a1a      	ldr	r2, [r3, #32]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	429a      	cmp	r2, r3
 8004554:	d30b      	bcc.n	800456e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	6a1a      	ldr	r2, [r3, #32]
 8004562:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004566:	1ad2      	subs	r2, r2, r3
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	621a      	str	r2, [r3, #32]
 800456c:	e017      	b.n	800459e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d108      	bne.n	8004588 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004576:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800457a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004586:	e00a      	b.n	800459e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2200      	movs	r2, #0
 8004594:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	657b      	str	r3, [r7, #84]	; 0x54
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	785b      	ldrb	r3, [r3, #1]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d165      	bne.n	8004678 <HAL_PCD_EP_DB_Transmit+0x750>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	461a      	mov	r2, r3
 80045be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045c0:	4413      	add	r3, r2
 80045c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	011a      	lsls	r2, r3, #4
 80045ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045cc:	4413      	add	r3, r2
 80045ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80045d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	b29b      	uxth	r3, r3
 80045da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045de:	b29a      	uxth	r2, r3
 80045e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045e2:	801a      	strh	r2, [r3, #0]
 80045e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045e8:	2b3e      	cmp	r3, #62	; 0x3e
 80045ea:	d91d      	bls.n	8004628 <HAL_PCD_EP_DB_Transmit+0x700>
 80045ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045f0:	095b      	lsrs	r3, r3, #5
 80045f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80045f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045f8:	f003 031f 	and.w	r3, r3, #31
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d102      	bne.n	8004606 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004600:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004602:	3b01      	subs	r3, #1
 8004604:	66bb      	str	r3, [r7, #104]	; 0x68
 8004606:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	b29a      	uxth	r2, r3
 800460c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800460e:	b29b      	uxth	r3, r3
 8004610:	029b      	lsls	r3, r3, #10
 8004612:	b29b      	uxth	r3, r3
 8004614:	4313      	orrs	r3, r2
 8004616:	b29b      	uxth	r3, r3
 8004618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800461c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004620:	b29a      	uxth	r2, r3
 8004622:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004624:	801a      	strh	r2, [r3, #0]
 8004626:	e041      	b.n	80046ac <HAL_PCD_EP_DB_Transmit+0x784>
 8004628:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10a      	bne.n	8004646 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004630:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	b29b      	uxth	r3, r3
 8004636:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800463a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800463e:	b29a      	uxth	r2, r3
 8004640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004642:	801a      	strh	r2, [r3, #0]
 8004644:	e032      	b.n	80046ac <HAL_PCD_EP_DB_Transmit+0x784>
 8004646:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800464a:	085b      	lsrs	r3, r3, #1
 800464c:	66bb      	str	r3, [r7, #104]	; 0x68
 800464e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d002      	beq.n	8004660 <HAL_PCD_EP_DB_Transmit+0x738>
 800465a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800465c:	3301      	adds	r3, #1
 800465e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004660:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	b29a      	uxth	r2, r3
 8004666:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004668:	b29b      	uxth	r3, r3
 800466a:	029b      	lsls	r3, r3, #10
 800466c:	b29b      	uxth	r3, r3
 800466e:	4313      	orrs	r3, r2
 8004670:	b29a      	uxth	r2, r3
 8004672:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004674:	801a      	strh	r2, [r3, #0]
 8004676:	e019      	b.n	80046ac <HAL_PCD_EP_DB_Transmit+0x784>
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	785b      	ldrb	r3, [r3, #1]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d115      	bne.n	80046ac <HAL_PCD_EP_DB_Transmit+0x784>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004688:	b29b      	uxth	r3, r3
 800468a:	461a      	mov	r2, r3
 800468c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800468e:	4413      	add	r3, r2
 8004690:	657b      	str	r3, [r7, #84]	; 0x54
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	011a      	lsls	r2, r3, #4
 8004698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800469a:	4413      	add	r3, r2
 800469c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046a0:	653b      	str	r3, [r7, #80]	; 0x50
 80046a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046aa:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6818      	ldr	r0, [r3, #0]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	6959      	ldr	r1, [r3, #20]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	895a      	ldrh	r2, [r3, #10]
 80046b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046bc:	b29b      	uxth	r3, r3
 80046be:	f005 f9a7 	bl	8009a10 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	461a      	mov	r2, r3
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046dc:	82bb      	strh	r3, [r7, #20]
 80046de:	8abb      	ldrh	r3, [r7, #20]
 80046e0:	f083 0310 	eor.w	r3, r3, #16
 80046e4:	82bb      	strh	r3, [r7, #20]
 80046e6:	8abb      	ldrh	r3, [r7, #20]
 80046e8:	f083 0320 	eor.w	r3, r3, #32
 80046ec:	82bb      	strh	r3, [r7, #20]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	441a      	add	r2, r3
 80046fc:	8abb      	ldrh	r3, [r7, #20]
 80046fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800470a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800470e:	b29b      	uxth	r3, r3
 8004710:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3790      	adds	r7, #144	; 0x90
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800471c:	b480      	push	{r7}
 800471e:	b087      	sub	sp, #28
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	607b      	str	r3, [r7, #4]
 8004726:	460b      	mov	r3, r1
 8004728:	817b      	strh	r3, [r7, #10]
 800472a:	4613      	mov	r3, r2
 800472c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800472e:	897b      	ldrh	r3, [r7, #10]
 8004730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00b      	beq.n	8004752 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800473a:	897b      	ldrh	r3, [r7, #10]
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	4613      	mov	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	4413      	add	r3, r2
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	e009      	b.n	8004766 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004752:	897a      	ldrh	r2, [r7, #10]
 8004754:	4613      	mov	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	4413      	add	r3, r2
 8004764:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004766:	893b      	ldrh	r3, [r7, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d107      	bne.n	800477c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	2200      	movs	r2, #0
 8004770:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	b29a      	uxth	r2, r3
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	80da      	strh	r2, [r3, #6]
 800477a:	e00b      	b.n	8004794 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	2201      	movs	r2, #1
 8004780:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	b29a      	uxth	r2, r3
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	0c1b      	lsrs	r3, r3, #16
 800478e:	b29a      	uxth	r2, r3
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	371c      	adds	r7, #28
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
	...

080047a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047b4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d102      	bne.n	80047ca <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	f001 b823 	b.w	8005810 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 817d 	beq.w	8004ada <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80047e0:	4bbc      	ldr	r3, [pc, #752]	; (8004ad4 <HAL_RCC_OscConfig+0x330>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f003 030c 	and.w	r3, r3, #12
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d00c      	beq.n	8004806 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047ec:	4bb9      	ldr	r3, [pc, #740]	; (8004ad4 <HAL_RCC_OscConfig+0x330>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f003 030c 	and.w	r3, r3, #12
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d15c      	bne.n	80048b2 <HAL_RCC_OscConfig+0x10e>
 80047f8:	4bb6      	ldr	r3, [pc, #728]	; (8004ad4 <HAL_RCC_OscConfig+0x330>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004804:	d155      	bne.n	80048b2 <HAL_RCC_OscConfig+0x10e>
 8004806:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800480a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004812:	fa93 f3a3 	rbit	r3, r3
 8004816:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800481a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800481e:	fab3 f383 	clz	r3, r3
 8004822:	b2db      	uxtb	r3, r3
 8004824:	095b      	lsrs	r3, r3, #5
 8004826:	b2db      	uxtb	r3, r3
 8004828:	f043 0301 	orr.w	r3, r3, #1
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b01      	cmp	r3, #1
 8004830:	d102      	bne.n	8004838 <HAL_RCC_OscConfig+0x94>
 8004832:	4ba8      	ldr	r3, [pc, #672]	; (8004ad4 <HAL_RCC_OscConfig+0x330>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	e015      	b.n	8004864 <HAL_RCC_OscConfig+0xc0>
 8004838:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800483c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004840:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004844:	fa93 f3a3 	rbit	r3, r3
 8004848:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800484c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004850:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004854:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004858:	fa93 f3a3 	rbit	r3, r3
 800485c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004860:	4b9c      	ldr	r3, [pc, #624]	; (8004ad4 <HAL_RCC_OscConfig+0x330>)
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004868:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800486c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004870:	fa92 f2a2 	rbit	r2, r2
 8004874:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004878:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800487c:	fab2 f282 	clz	r2, r2
 8004880:	b2d2      	uxtb	r2, r2
 8004882:	f042 0220 	orr.w	r2, r2, #32
 8004886:	b2d2      	uxtb	r2, r2
 8004888:	f002 021f 	and.w	r2, r2, #31
 800488c:	2101      	movs	r1, #1
 800488e:	fa01 f202 	lsl.w	r2, r1, r2
 8004892:	4013      	ands	r3, r2
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 811f 	beq.w	8004ad8 <HAL_RCC_OscConfig+0x334>
 800489a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800489e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f040 8116 	bne.w	8004ad8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	f000 bfaf 	b.w	8005810 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c2:	d106      	bne.n	80048d2 <HAL_RCC_OscConfig+0x12e>
 80048c4:	4b83      	ldr	r3, [pc, #524]	; (8004ad4 <HAL_RCC_OscConfig+0x330>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a82      	ldr	r2, [pc, #520]	; (8004ad4 <HAL_RCC_OscConfig+0x330>)
 80048ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	e036      	b.n	8004940 <HAL_RCC_OscConfig+0x19c>
 80048d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10c      	bne.n	80048fc <HAL_RCC_OscConfig+0x158>
 80048e2:	4b7c      	ldr	r3, [pc, #496]	; (8004ad4 <HAL_RCC_OscConfig+0x330>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a7b      	ldr	r2, [pc, #492]	; (8004ad4 <HAL_RCC_OscConfig+0x330>)
 80048e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	4b79      	ldr	r3, [pc, #484]	; (8004ad4 <HAL_RCC_OscConfig+0x330>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a78      	ldr	r2, [pc, #480]	; (8004ad4 <HAL_RCC_OscConfig+0x330>)
 80048f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	e021      	b.n	8004940 <HAL_RCC_OscConfig+0x19c>
 80048fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004900:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800490c:	d10c      	bne.n	8004928 <HAL_RCC_OscConfig+0x184>
 800490e:	4b71      	ldr	r3, [pc, #452]	; (8004ad4 <HAL_RCC_OscConfig+0x330>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a70      	ldr	r2, [pc, #448]	; (8004ad4 <HAL_RCC_OscConfig+0x330>)
 8004914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	4b6e      	ldr	r3, [pc, #440]	; (8004ad4 <HAL_RCC_OscConfig+0x330>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a6d      	ldr	r2, [pc, #436]	; (8004ad4 <HAL_RCC_OscConfig+0x330>)
 8004920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	e00b      	b.n	8004940 <HAL_RCC_OscConfig+0x19c>
 8004928:	4b6a      	ldr	r3, [pc, #424]	; (8004ad4 <HAL_RCC_OscConfig+0x330>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a69      	ldr	r2, [pc, #420]	; (8004ad4 <HAL_RCC_OscConfig+0x330>)
 800492e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	4b67      	ldr	r3, [pc, #412]	; (8004ad4 <HAL_RCC_OscConfig+0x330>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a66      	ldr	r2, [pc, #408]	; (8004ad4 <HAL_RCC_OscConfig+0x330>)
 800493a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800493e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004940:	4b64      	ldr	r3, [pc, #400]	; (8004ad4 <HAL_RCC_OscConfig+0x330>)
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	f023 020f 	bic.w	r2, r3, #15
 8004948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800494c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	495f      	ldr	r1, [pc, #380]	; (8004ad4 <HAL_RCC_OscConfig+0x330>)
 8004956:	4313      	orrs	r3, r2
 8004958:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800495a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800495e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d059      	beq.n	8004a1e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496a:	f7fc fa9d 	bl	8000ea8 <HAL_GetTick>
 800496e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004972:	e00a      	b.n	800498a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004974:	f7fc fa98 	bl	8000ea8 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b64      	cmp	r3, #100	; 0x64
 8004982:	d902      	bls.n	800498a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	f000 bf43 	b.w	8005810 <HAL_RCC_OscConfig+0x106c>
 800498a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800498e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004992:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004996:	fa93 f3a3 	rbit	r3, r3
 800499a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800499e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049a2:	fab3 f383 	clz	r3, r3
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	095b      	lsrs	r3, r3, #5
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	f043 0301 	orr.w	r3, r3, #1
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d102      	bne.n	80049bc <HAL_RCC_OscConfig+0x218>
 80049b6:	4b47      	ldr	r3, [pc, #284]	; (8004ad4 <HAL_RCC_OscConfig+0x330>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	e015      	b.n	80049e8 <HAL_RCC_OscConfig+0x244>
 80049bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049c0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80049c8:	fa93 f3a3 	rbit	r3, r3
 80049cc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80049d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049d4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80049d8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80049dc:	fa93 f3a3 	rbit	r3, r3
 80049e0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80049e4:	4b3b      	ldr	r3, [pc, #236]	; (8004ad4 <HAL_RCC_OscConfig+0x330>)
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049ec:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80049f0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80049f4:	fa92 f2a2 	rbit	r2, r2
 80049f8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80049fc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004a00:	fab2 f282 	clz	r2, r2
 8004a04:	b2d2      	uxtb	r2, r2
 8004a06:	f042 0220 	orr.w	r2, r2, #32
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	f002 021f 	and.w	r2, r2, #31
 8004a10:	2101      	movs	r1, #1
 8004a12:	fa01 f202 	lsl.w	r2, r1, r2
 8004a16:	4013      	ands	r3, r2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0ab      	beq.n	8004974 <HAL_RCC_OscConfig+0x1d0>
 8004a1c:	e05d      	b.n	8004ada <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1e:	f7fc fa43 	bl	8000ea8 <HAL_GetTick>
 8004a22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a26:	e00a      	b.n	8004a3e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a28:	f7fc fa3e 	bl	8000ea8 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b64      	cmp	r3, #100	; 0x64
 8004a36:	d902      	bls.n	8004a3e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	f000 bee9 	b.w	8005810 <HAL_RCC_OscConfig+0x106c>
 8004a3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a42:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a46:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004a4a:	fa93 f3a3 	rbit	r3, r3
 8004a4e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004a52:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a56:	fab3 f383 	clz	r3, r3
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	f043 0301 	orr.w	r3, r3, #1
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d102      	bne.n	8004a70 <HAL_RCC_OscConfig+0x2cc>
 8004a6a:	4b1a      	ldr	r3, [pc, #104]	; (8004ad4 <HAL_RCC_OscConfig+0x330>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	e015      	b.n	8004a9c <HAL_RCC_OscConfig+0x2f8>
 8004a70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a74:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a78:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004a7c:	fa93 f3a3 	rbit	r3, r3
 8004a80:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a88:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004a8c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004a90:	fa93 f3a3 	rbit	r3, r3
 8004a94:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004a98:	4b0e      	ldr	r3, [pc, #56]	; (8004ad4 <HAL_RCC_OscConfig+0x330>)
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004aa0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004aa4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004aa8:	fa92 f2a2 	rbit	r2, r2
 8004aac:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004ab0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004ab4:	fab2 f282 	clz	r2, r2
 8004ab8:	b2d2      	uxtb	r2, r2
 8004aba:	f042 0220 	orr.w	r2, r2, #32
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	f002 021f 	and.w	r2, r2, #31
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8004aca:	4013      	ands	r3, r2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1ab      	bne.n	8004a28 <HAL_RCC_OscConfig+0x284>
 8004ad0:	e003      	b.n	8004ada <HAL_RCC_OscConfig+0x336>
 8004ad2:	bf00      	nop
 8004ad4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ade:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f000 817d 	beq.w	8004dea <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004af0:	4ba6      	ldr	r3, [pc, #664]	; (8004d8c <HAL_RCC_OscConfig+0x5e8>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 030c 	and.w	r3, r3, #12
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00b      	beq.n	8004b14 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004afc:	4ba3      	ldr	r3, [pc, #652]	; (8004d8c <HAL_RCC_OscConfig+0x5e8>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f003 030c 	and.w	r3, r3, #12
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d172      	bne.n	8004bee <HAL_RCC_OscConfig+0x44a>
 8004b08:	4ba0      	ldr	r3, [pc, #640]	; (8004d8c <HAL_RCC_OscConfig+0x5e8>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d16c      	bne.n	8004bee <HAL_RCC_OscConfig+0x44a>
 8004b14:	2302      	movs	r3, #2
 8004b16:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004b1e:	fa93 f3a3 	rbit	r3, r3
 8004b22:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004b26:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b2a:	fab3 f383 	clz	r3, r3
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	095b      	lsrs	r3, r3, #5
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	f043 0301 	orr.w	r3, r3, #1
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d102      	bne.n	8004b44 <HAL_RCC_OscConfig+0x3a0>
 8004b3e:	4b93      	ldr	r3, [pc, #588]	; (8004d8c <HAL_RCC_OscConfig+0x5e8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	e013      	b.n	8004b6c <HAL_RCC_OscConfig+0x3c8>
 8004b44:	2302      	movs	r3, #2
 8004b46:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b4a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004b4e:	fa93 f3a3 	rbit	r3, r3
 8004b52:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004b56:	2302      	movs	r3, #2
 8004b58:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004b5c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004b60:	fa93 f3a3 	rbit	r3, r3
 8004b64:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004b68:	4b88      	ldr	r3, [pc, #544]	; (8004d8c <HAL_RCC_OscConfig+0x5e8>)
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004b72:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004b76:	fa92 f2a2 	rbit	r2, r2
 8004b7a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004b7e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004b82:	fab2 f282 	clz	r2, r2
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	f042 0220 	orr.w	r2, r2, #32
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	f002 021f 	and.w	r2, r2, #31
 8004b92:	2101      	movs	r1, #1
 8004b94:	fa01 f202 	lsl.w	r2, r1, r2
 8004b98:	4013      	ands	r3, r2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x410>
 8004b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ba2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d002      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	f000 be2e 	b.w	8005810 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb4:	4b75      	ldr	r3, [pc, #468]	; (8004d8c <HAL_RCC_OscConfig+0x5e8>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	21f8      	movs	r1, #248	; 0xf8
 8004bca:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bce:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004bd2:	fa91 f1a1 	rbit	r1, r1
 8004bd6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004bda:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004bde:	fab1 f181 	clz	r1, r1
 8004be2:	b2c9      	uxtb	r1, r1
 8004be4:	408b      	lsls	r3, r1
 8004be6:	4969      	ldr	r1, [pc, #420]	; (8004d8c <HAL_RCC_OscConfig+0x5e8>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bec:	e0fd      	b.n	8004dea <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 8088 	beq.w	8004d10 <HAL_RCC_OscConfig+0x56c>
 8004c00:	2301      	movs	r3, #1
 8004c02:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c06:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004c0a:	fa93 f3a3 	rbit	r3, r3
 8004c0e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004c12:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c16:	fab3 f383 	clz	r3, r3
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	461a      	mov	r2, r3
 8004c28:	2301      	movs	r3, #1
 8004c2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c2c:	f7fc f93c 	bl	8000ea8 <HAL_GetTick>
 8004c30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c34:	e00a      	b.n	8004c4c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c36:	f7fc f937 	bl	8000ea8 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d902      	bls.n	8004c4c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	f000 bde2 	b.w	8005810 <HAL_RCC_OscConfig+0x106c>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c52:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004c56:	fa93 f3a3 	rbit	r3, r3
 8004c5a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004c5e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c62:	fab3 f383 	clz	r3, r3
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	f043 0301 	orr.w	r3, r3, #1
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d102      	bne.n	8004c7c <HAL_RCC_OscConfig+0x4d8>
 8004c76:	4b45      	ldr	r3, [pc, #276]	; (8004d8c <HAL_RCC_OscConfig+0x5e8>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	e013      	b.n	8004ca4 <HAL_RCC_OscConfig+0x500>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c82:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004c86:	fa93 f3a3 	rbit	r3, r3
 8004c8a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004c8e:	2302      	movs	r3, #2
 8004c90:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004c94:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004c98:	fa93 f3a3 	rbit	r3, r3
 8004c9c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004ca0:	4b3a      	ldr	r3, [pc, #232]	; (8004d8c <HAL_RCC_OscConfig+0x5e8>)
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004caa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004cae:	fa92 f2a2 	rbit	r2, r2
 8004cb2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004cb6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004cba:	fab2 f282 	clz	r2, r2
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	f042 0220 	orr.w	r2, r2, #32
 8004cc4:	b2d2      	uxtb	r2, r2
 8004cc6:	f002 021f 	and.w	r2, r2, #31
 8004cca:	2101      	movs	r1, #1
 8004ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0af      	beq.n	8004c36 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cd6:	4b2d      	ldr	r3, [pc, #180]	; (8004d8c <HAL_RCC_OscConfig+0x5e8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ce2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	21f8      	movs	r1, #248	; 0xf8
 8004cec:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004cf4:	fa91 f1a1 	rbit	r1, r1
 8004cf8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004cfc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004d00:	fab1 f181 	clz	r1, r1
 8004d04:	b2c9      	uxtb	r1, r1
 8004d06:	408b      	lsls	r3, r1
 8004d08:	4920      	ldr	r1, [pc, #128]	; (8004d8c <HAL_RCC_OscConfig+0x5e8>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	600b      	str	r3, [r1, #0]
 8004d0e:	e06c      	b.n	8004dea <HAL_RCC_OscConfig+0x646>
 8004d10:	2301      	movs	r3, #1
 8004d12:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d16:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004d1a:	fa93 f3a3 	rbit	r3, r3
 8004d1e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004d22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d26:	fab3 f383 	clz	r3, r3
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	461a      	mov	r2, r3
 8004d38:	2300      	movs	r3, #0
 8004d3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3c:	f7fc f8b4 	bl	8000ea8 <HAL_GetTick>
 8004d40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d44:	e00a      	b.n	8004d5c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d46:	f7fc f8af 	bl	8000ea8 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d902      	bls.n	8004d5c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	f000 bd5a 	b.w	8005810 <HAL_RCC_OscConfig+0x106c>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d62:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d66:	fa93 f3a3 	rbit	r3, r3
 8004d6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d72:	fab3 f383 	clz	r3, r3
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	095b      	lsrs	r3, r3, #5
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	f043 0301 	orr.w	r3, r3, #1
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d104      	bne.n	8004d90 <HAL_RCC_OscConfig+0x5ec>
 8004d86:	4b01      	ldr	r3, [pc, #4]	; (8004d8c <HAL_RCC_OscConfig+0x5e8>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	e015      	b.n	8004db8 <HAL_RCC_OscConfig+0x614>
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	2302      	movs	r3, #2
 8004d92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d9a:	fa93 f3a3 	rbit	r3, r3
 8004d9e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004da2:	2302      	movs	r3, #2
 8004da4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004da8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004dac:	fa93 f3a3 	rbit	r3, r3
 8004db0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004db4:	4bc8      	ldr	r3, [pc, #800]	; (80050d8 <HAL_RCC_OscConfig+0x934>)
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	2202      	movs	r2, #2
 8004dba:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004dbe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004dc2:	fa92 f2a2 	rbit	r2, r2
 8004dc6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004dca:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004dce:	fab2 f282 	clz	r2, r2
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	f042 0220 	orr.w	r2, r2, #32
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	f002 021f 	and.w	r2, r2, #31
 8004dde:	2101      	movs	r1, #1
 8004de0:	fa01 f202 	lsl.w	r2, r1, r2
 8004de4:	4013      	ands	r3, r2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1ad      	bne.n	8004d46 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 8110 	beq.w	8005020 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d079      	beq.n	8004f04 <HAL_RCC_OscConfig+0x760>
 8004e10:	2301      	movs	r3, #1
 8004e12:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e16:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004e1a:	fa93 f3a3 	rbit	r3, r3
 8004e1e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e26:	fab3 f383 	clz	r3, r3
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	4bab      	ldr	r3, [pc, #684]	; (80050dc <HAL_RCC_OscConfig+0x938>)
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	461a      	mov	r2, r3
 8004e36:	2301      	movs	r3, #1
 8004e38:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e3a:	f7fc f835 	bl	8000ea8 <HAL_GetTick>
 8004e3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e42:	e00a      	b.n	8004e5a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e44:	f7fc f830 	bl	8000ea8 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d902      	bls.n	8004e5a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	f000 bcdb 	b.w	8005810 <HAL_RCC_OscConfig+0x106c>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e64:	fa93 f3a3 	rbit	r3, r3
 8004e68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e70:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004e74:	2202      	movs	r2, #2
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e7c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	fa93 f2a3 	rbit	r2, r3
 8004e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e98:	2202      	movs	r2, #2
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ea0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	fa93 f2a3 	rbit	r2, r3
 8004eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004eb2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eb4:	4b88      	ldr	r3, [pc, #544]	; (80050d8 <HAL_RCC_OscConfig+0x934>)
 8004eb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ebc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004ec0:	2102      	movs	r1, #2
 8004ec2:	6019      	str	r1, [r3, #0]
 8004ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ec8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	fa93 f1a3 	rbit	r1, r3
 8004ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ed6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004eda:	6019      	str	r1, [r3, #0]
  return result;
 8004edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	fab3 f383 	clz	r3, r3
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	f003 031f 	and.w	r3, r3, #31
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8004efc:	4013      	ands	r3, r2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d0a0      	beq.n	8004e44 <HAL_RCC_OscConfig+0x6a0>
 8004f02:	e08d      	b.n	8005020 <HAL_RCC_OscConfig+0x87c>
 8004f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f08:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f14:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	fa93 f2a3 	rbit	r2, r3
 8004f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f22:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004f26:	601a      	str	r2, [r3, #0]
  return result;
 8004f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f2c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004f30:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f32:	fab3 f383 	clz	r3, r3
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	461a      	mov	r2, r3
 8004f3a:	4b68      	ldr	r3, [pc, #416]	; (80050dc <HAL_RCC_OscConfig+0x938>)
 8004f3c:	4413      	add	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	461a      	mov	r2, r3
 8004f42:	2300      	movs	r3, #0
 8004f44:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f46:	f7fb ffaf 	bl	8000ea8 <HAL_GetTick>
 8004f4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f4e:	e00a      	b.n	8004f66 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f50:	f7fb ffaa 	bl	8000ea8 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d902      	bls.n	8004f66 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	f000 bc55 	b.w	8005810 <HAL_RCC_OscConfig+0x106c>
 8004f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f6a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004f6e:	2202      	movs	r2, #2
 8004f70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f76:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	fa93 f2a3 	rbit	r2, r3
 8004f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f84:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f8e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004f92:	2202      	movs	r2, #2
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f9a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	fa93 f2a3 	rbit	r2, r3
 8004fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fa8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	fa93 f2a3 	rbit	r2, r3
 8004fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fcc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004fd0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fd2:	4b41      	ldr	r3, [pc, #260]	; (80050d8 <HAL_RCC_OscConfig+0x934>)
 8004fd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fda:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004fde:	2102      	movs	r1, #2
 8004fe0:	6019      	str	r1, [r3, #0]
 8004fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fe6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	fa93 f1a3 	rbit	r1, r3
 8004ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ff4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004ff8:	6019      	str	r1, [r3, #0]
  return result;
 8004ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ffe:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	fab3 f383 	clz	r3, r3
 8005008:	b2db      	uxtb	r3, r3
 800500a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800500e:	b2db      	uxtb	r3, r3
 8005010:	f003 031f 	and.w	r3, r3, #31
 8005014:	2101      	movs	r1, #1
 8005016:	fa01 f303 	lsl.w	r3, r1, r3
 800501a:	4013      	ands	r3, r2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d197      	bne.n	8004f50 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005024:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 81a1 	beq.w	8005378 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005036:	2300      	movs	r3, #0
 8005038:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800503c:	4b26      	ldr	r3, [pc, #152]	; (80050d8 <HAL_RCC_OscConfig+0x934>)
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d116      	bne.n	8005076 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005048:	4b23      	ldr	r3, [pc, #140]	; (80050d8 <HAL_RCC_OscConfig+0x934>)
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	4a22      	ldr	r2, [pc, #136]	; (80050d8 <HAL_RCC_OscConfig+0x934>)
 800504e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005052:	61d3      	str	r3, [r2, #28]
 8005054:	4b20      	ldr	r3, [pc, #128]	; (80050d8 <HAL_RCC_OscConfig+0x934>)
 8005056:	69db      	ldr	r3, [r3, #28]
 8005058:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800505c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005060:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800506a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800506e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005070:	2301      	movs	r3, #1
 8005072:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005076:	4b1a      	ldr	r3, [pc, #104]	; (80050e0 <HAL_RCC_OscConfig+0x93c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800507e:	2b00      	cmp	r3, #0
 8005080:	d11a      	bne.n	80050b8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005082:	4b17      	ldr	r3, [pc, #92]	; (80050e0 <HAL_RCC_OscConfig+0x93c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a16      	ldr	r2, [pc, #88]	; (80050e0 <HAL_RCC_OscConfig+0x93c>)
 8005088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800508c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800508e:	f7fb ff0b 	bl	8000ea8 <HAL_GetTick>
 8005092:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005096:	e009      	b.n	80050ac <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005098:	f7fb ff06 	bl	8000ea8 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b64      	cmp	r3, #100	; 0x64
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e3b1      	b.n	8005810 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ac:	4b0c      	ldr	r3, [pc, #48]	; (80050e0 <HAL_RCC_OscConfig+0x93c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0ef      	beq.n	8005098 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d10d      	bne.n	80050e4 <HAL_RCC_OscConfig+0x940>
 80050c8:	4b03      	ldr	r3, [pc, #12]	; (80050d8 <HAL_RCC_OscConfig+0x934>)
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	4a02      	ldr	r2, [pc, #8]	; (80050d8 <HAL_RCC_OscConfig+0x934>)
 80050ce:	f043 0301 	orr.w	r3, r3, #1
 80050d2:	6213      	str	r3, [r2, #32]
 80050d4:	e03c      	b.n	8005150 <HAL_RCC_OscConfig+0x9ac>
 80050d6:	bf00      	nop
 80050d8:	40021000 	.word	0x40021000
 80050dc:	10908120 	.word	0x10908120
 80050e0:	40007000 	.word	0x40007000
 80050e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10c      	bne.n	800510e <HAL_RCC_OscConfig+0x96a>
 80050f4:	4bc1      	ldr	r3, [pc, #772]	; (80053fc <HAL_RCC_OscConfig+0xc58>)
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	4ac0      	ldr	r2, [pc, #768]	; (80053fc <HAL_RCC_OscConfig+0xc58>)
 80050fa:	f023 0301 	bic.w	r3, r3, #1
 80050fe:	6213      	str	r3, [r2, #32]
 8005100:	4bbe      	ldr	r3, [pc, #760]	; (80053fc <HAL_RCC_OscConfig+0xc58>)
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	4abd      	ldr	r2, [pc, #756]	; (80053fc <HAL_RCC_OscConfig+0xc58>)
 8005106:	f023 0304 	bic.w	r3, r3, #4
 800510a:	6213      	str	r3, [r2, #32]
 800510c:	e020      	b.n	8005150 <HAL_RCC_OscConfig+0x9ac>
 800510e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005112:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	2b05      	cmp	r3, #5
 800511c:	d10c      	bne.n	8005138 <HAL_RCC_OscConfig+0x994>
 800511e:	4bb7      	ldr	r3, [pc, #732]	; (80053fc <HAL_RCC_OscConfig+0xc58>)
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	4ab6      	ldr	r2, [pc, #728]	; (80053fc <HAL_RCC_OscConfig+0xc58>)
 8005124:	f043 0304 	orr.w	r3, r3, #4
 8005128:	6213      	str	r3, [r2, #32]
 800512a:	4bb4      	ldr	r3, [pc, #720]	; (80053fc <HAL_RCC_OscConfig+0xc58>)
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	4ab3      	ldr	r2, [pc, #716]	; (80053fc <HAL_RCC_OscConfig+0xc58>)
 8005130:	f043 0301 	orr.w	r3, r3, #1
 8005134:	6213      	str	r3, [r2, #32]
 8005136:	e00b      	b.n	8005150 <HAL_RCC_OscConfig+0x9ac>
 8005138:	4bb0      	ldr	r3, [pc, #704]	; (80053fc <HAL_RCC_OscConfig+0xc58>)
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	4aaf      	ldr	r2, [pc, #700]	; (80053fc <HAL_RCC_OscConfig+0xc58>)
 800513e:	f023 0301 	bic.w	r3, r3, #1
 8005142:	6213      	str	r3, [r2, #32]
 8005144:	4bad      	ldr	r3, [pc, #692]	; (80053fc <HAL_RCC_OscConfig+0xc58>)
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	4aac      	ldr	r2, [pc, #688]	; (80053fc <HAL_RCC_OscConfig+0xc58>)
 800514a:	f023 0304 	bic.w	r3, r3, #4
 800514e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005154:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 8081 	beq.w	8005264 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005162:	f7fb fea1 	bl	8000ea8 <HAL_GetTick>
 8005166:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800516a:	e00b      	b.n	8005184 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800516c:	f7fb fe9c 	bl	8000ea8 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	f241 3288 	movw	r2, #5000	; 0x1388
 800517c:	4293      	cmp	r3, r2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e345      	b.n	8005810 <HAL_RCC_OscConfig+0x106c>
 8005184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005188:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800518c:	2202      	movs	r2, #2
 800518e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005194:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	fa93 f2a3 	rbit	r2, r3
 800519e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051a2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80051b0:	2202      	movs	r2, #2
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051b8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	fa93 f2a3 	rbit	r2, r3
 80051c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051c6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80051ca:	601a      	str	r2, [r3, #0]
  return result;
 80051cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051d0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80051d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d6:	fab3 f383 	clz	r3, r3
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	f043 0302 	orr.w	r3, r3, #2
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d102      	bne.n	80051f0 <HAL_RCC_OscConfig+0xa4c>
 80051ea:	4b84      	ldr	r3, [pc, #528]	; (80053fc <HAL_RCC_OscConfig+0xc58>)
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	e013      	b.n	8005218 <HAL_RCC_OscConfig+0xa74>
 80051f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051f4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80051f8:	2202      	movs	r2, #2
 80051fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005200:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	fa93 f2a3 	rbit	r2, r3
 800520a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800520e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	4b79      	ldr	r3, [pc, #484]	; (80053fc <HAL_RCC_OscConfig+0xc58>)
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800521c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005220:	2102      	movs	r1, #2
 8005222:	6011      	str	r1, [r2, #0]
 8005224:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005228:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800522c:	6812      	ldr	r2, [r2, #0]
 800522e:	fa92 f1a2 	rbit	r1, r2
 8005232:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005236:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800523a:	6011      	str	r1, [r2, #0]
  return result;
 800523c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005240:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005244:	6812      	ldr	r2, [r2, #0]
 8005246:	fab2 f282 	clz	r2, r2
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005250:	b2d2      	uxtb	r2, r2
 8005252:	f002 021f 	and.w	r2, r2, #31
 8005256:	2101      	movs	r1, #1
 8005258:	fa01 f202 	lsl.w	r2, r1, r2
 800525c:	4013      	ands	r3, r2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d084      	beq.n	800516c <HAL_RCC_OscConfig+0x9c8>
 8005262:	e07f      	b.n	8005364 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005264:	f7fb fe20 	bl	8000ea8 <HAL_GetTick>
 8005268:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800526c:	e00b      	b.n	8005286 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800526e:	f7fb fe1b 	bl	8000ea8 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	f241 3288 	movw	r2, #5000	; 0x1388
 800527e:	4293      	cmp	r3, r2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e2c4      	b.n	8005810 <HAL_RCC_OscConfig+0x106c>
 8005286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800528a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800528e:	2202      	movs	r2, #2
 8005290:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005296:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	fa93 f2a3 	rbit	r2, r3
 80052a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052a4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80052b2:	2202      	movs	r2, #2
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	fa93 f2a3 	rbit	r2, r3
 80052c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052c8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80052cc:	601a      	str	r2, [r3, #0]
  return result;
 80052ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052d2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80052d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052d8:	fab3 f383 	clz	r3, r3
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	095b      	lsrs	r3, r3, #5
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	f043 0302 	orr.w	r3, r3, #2
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d102      	bne.n	80052f2 <HAL_RCC_OscConfig+0xb4e>
 80052ec:	4b43      	ldr	r3, [pc, #268]	; (80053fc <HAL_RCC_OscConfig+0xc58>)
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	e013      	b.n	800531a <HAL_RCC_OscConfig+0xb76>
 80052f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80052fa:	2202      	movs	r2, #2
 80052fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005302:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	fa93 f2a3 	rbit	r2, r3
 800530c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005310:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	4b39      	ldr	r3, [pc, #228]	; (80053fc <HAL_RCC_OscConfig+0xc58>)
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800531e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005322:	2102      	movs	r1, #2
 8005324:	6011      	str	r1, [r2, #0]
 8005326:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800532a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800532e:	6812      	ldr	r2, [r2, #0]
 8005330:	fa92 f1a2 	rbit	r1, r2
 8005334:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005338:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800533c:	6011      	str	r1, [r2, #0]
  return result;
 800533e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005342:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005346:	6812      	ldr	r2, [r2, #0]
 8005348:	fab2 f282 	clz	r2, r2
 800534c:	b2d2      	uxtb	r2, r2
 800534e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	f002 021f 	and.w	r2, r2, #31
 8005358:	2101      	movs	r1, #1
 800535a:	fa01 f202 	lsl.w	r2, r1, r2
 800535e:	4013      	ands	r3, r2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d184      	bne.n	800526e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005364:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005368:	2b01      	cmp	r3, #1
 800536a:	d105      	bne.n	8005378 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800536c:	4b23      	ldr	r3, [pc, #140]	; (80053fc <HAL_RCC_OscConfig+0xc58>)
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	4a22      	ldr	r2, [pc, #136]	; (80053fc <HAL_RCC_OscConfig+0xc58>)
 8005372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005376:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800537c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69db      	ldr	r3, [r3, #28]
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 8242 	beq.w	800580e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800538a:	4b1c      	ldr	r3, [pc, #112]	; (80053fc <HAL_RCC_OscConfig+0xc58>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f003 030c 	and.w	r3, r3, #12
 8005392:	2b08      	cmp	r3, #8
 8005394:	f000 8213 	beq.w	80057be <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800539c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	f040 8162 	bne.w	800566e <HAL_RCC_OscConfig+0xeca>
 80053aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ae:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80053b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053bc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	fa93 f2a3 	rbit	r2, r3
 80053c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ca:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80053ce:	601a      	str	r2, [r3, #0]
  return result;
 80053d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053d4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80053d8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053da:	fab3 f383 	clz	r3, r3
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80053e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	461a      	mov	r2, r3
 80053ec:	2300      	movs	r3, #0
 80053ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f0:	f7fb fd5a 	bl	8000ea8 <HAL_GetTick>
 80053f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053f8:	e00c      	b.n	8005414 <HAL_RCC_OscConfig+0xc70>
 80053fa:	bf00      	nop
 80053fc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005400:	f7fb fd52 	bl	8000ea8 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	2b02      	cmp	r3, #2
 800540e:	d901      	bls.n	8005414 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e1fd      	b.n	8005810 <HAL_RCC_OscConfig+0x106c>
 8005414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005418:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800541c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005420:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005426:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	fa93 f2a3 	rbit	r2, r3
 8005430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005434:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005438:	601a      	str	r2, [r3, #0]
  return result;
 800543a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800543e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005442:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005444:	fab3 f383 	clz	r3, r3
 8005448:	b2db      	uxtb	r3, r3
 800544a:	095b      	lsrs	r3, r3, #5
 800544c:	b2db      	uxtb	r3, r3
 800544e:	f043 0301 	orr.w	r3, r3, #1
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b01      	cmp	r3, #1
 8005456:	d102      	bne.n	800545e <HAL_RCC_OscConfig+0xcba>
 8005458:	4bb0      	ldr	r3, [pc, #704]	; (800571c <HAL_RCC_OscConfig+0xf78>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	e027      	b.n	80054ae <HAL_RCC_OscConfig+0xd0a>
 800545e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005462:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005466:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800546a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800546c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005470:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	fa93 f2a3 	rbit	r2, r3
 800547a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800547e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005488:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800548c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005496:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	fa93 f2a3 	rbit	r2, r3
 80054a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054a4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	4b9c      	ldr	r3, [pc, #624]	; (800571c <HAL_RCC_OscConfig+0xf78>)
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054b2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80054b6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80054ba:	6011      	str	r1, [r2, #0]
 80054bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054c0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80054c4:	6812      	ldr	r2, [r2, #0]
 80054c6:	fa92 f1a2 	rbit	r1, r2
 80054ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054ce:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80054d2:	6011      	str	r1, [r2, #0]
  return result;
 80054d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054d8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80054dc:	6812      	ldr	r2, [r2, #0]
 80054de:	fab2 f282 	clz	r2, r2
 80054e2:	b2d2      	uxtb	r2, r2
 80054e4:	f042 0220 	orr.w	r2, r2, #32
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	f002 021f 	and.w	r2, r2, #31
 80054ee:	2101      	movs	r1, #1
 80054f0:	fa01 f202 	lsl.w	r2, r1, r2
 80054f4:	4013      	ands	r3, r2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d182      	bne.n	8005400 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054fa:	4b88      	ldr	r3, [pc, #544]	; (800571c <HAL_RCC_OscConfig+0xf78>)
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005506:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800550e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005512:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	430b      	orrs	r3, r1
 800551c:	497f      	ldr	r1, [pc, #508]	; (800571c <HAL_RCC_OscConfig+0xf78>)
 800551e:	4313      	orrs	r3, r2
 8005520:	604b      	str	r3, [r1, #4]
 8005522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005526:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800552a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800552e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005534:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	fa93 f2a3 	rbit	r2, r3
 800553e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005542:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005546:	601a      	str	r2, [r3, #0]
  return result;
 8005548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800554c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005550:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005552:	fab3 f383 	clz	r3, r3
 8005556:	b2db      	uxtb	r3, r3
 8005558:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800555c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	461a      	mov	r2, r3
 8005564:	2301      	movs	r3, #1
 8005566:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005568:	f7fb fc9e 	bl	8000ea8 <HAL_GetTick>
 800556c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005570:	e009      	b.n	8005586 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005572:	f7fb fc99 	bl	8000ea8 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e144      	b.n	8005810 <HAL_RCC_OscConfig+0x106c>
 8005586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800558a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800558e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005592:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005598:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	fa93 f2a3 	rbit	r2, r3
 80055a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055a6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80055aa:	601a      	str	r2, [r3, #0]
  return result;
 80055ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055b0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80055b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055b6:	fab3 f383 	clz	r3, r3
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	095b      	lsrs	r3, r3, #5
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	f043 0301 	orr.w	r3, r3, #1
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d102      	bne.n	80055d0 <HAL_RCC_OscConfig+0xe2c>
 80055ca:	4b54      	ldr	r3, [pc, #336]	; (800571c <HAL_RCC_OscConfig+0xf78>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	e027      	b.n	8005620 <HAL_RCC_OscConfig+0xe7c>
 80055d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055d4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80055d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055e2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	fa93 f2a3 	rbit	r2, r3
 80055ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055f0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055fa:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80055fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005608:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	fa93 f2a3 	rbit	r2, r3
 8005612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005616:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	4b3f      	ldr	r3, [pc, #252]	; (800571c <HAL_RCC_OscConfig+0xf78>)
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005624:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005628:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800562c:	6011      	str	r1, [r2, #0]
 800562e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005632:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005636:	6812      	ldr	r2, [r2, #0]
 8005638:	fa92 f1a2 	rbit	r1, r2
 800563c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005640:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005644:	6011      	str	r1, [r2, #0]
  return result;
 8005646:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800564a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800564e:	6812      	ldr	r2, [r2, #0]
 8005650:	fab2 f282 	clz	r2, r2
 8005654:	b2d2      	uxtb	r2, r2
 8005656:	f042 0220 	orr.w	r2, r2, #32
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	f002 021f 	and.w	r2, r2, #31
 8005660:	2101      	movs	r1, #1
 8005662:	fa01 f202 	lsl.w	r2, r1, r2
 8005666:	4013      	ands	r3, r2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d082      	beq.n	8005572 <HAL_RCC_OscConfig+0xdce>
 800566c:	e0cf      	b.n	800580e <HAL_RCC_OscConfig+0x106a>
 800566e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005672:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005676:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800567a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800567c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005680:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	fa93 f2a3 	rbit	r2, r3
 800568a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800568e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005692:	601a      	str	r2, [r3, #0]
  return result;
 8005694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005698:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800569c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800569e:	fab3 f383 	clz	r3, r3
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80056a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	461a      	mov	r2, r3
 80056b0:	2300      	movs	r3, #0
 80056b2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b4:	f7fb fbf8 	bl	8000ea8 <HAL_GetTick>
 80056b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056bc:	e009      	b.n	80056d2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056be:	f7fb fbf3 	bl	8000ea8 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d901      	bls.n	80056d2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e09e      	b.n	8005810 <HAL_RCC_OscConfig+0x106c>
 80056d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056d6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80056da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056e4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	fa93 f2a3 	rbit	r2, r3
 80056ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056f2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80056f6:	601a      	str	r2, [r3, #0]
  return result;
 80056f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056fc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005700:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005702:	fab3 f383 	clz	r3, r3
 8005706:	b2db      	uxtb	r3, r3
 8005708:	095b      	lsrs	r3, r3, #5
 800570a:	b2db      	uxtb	r3, r3
 800570c:	f043 0301 	orr.w	r3, r3, #1
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b01      	cmp	r3, #1
 8005714:	d104      	bne.n	8005720 <HAL_RCC_OscConfig+0xf7c>
 8005716:	4b01      	ldr	r3, [pc, #4]	; (800571c <HAL_RCC_OscConfig+0xf78>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	e029      	b.n	8005770 <HAL_RCC_OscConfig+0xfcc>
 800571c:	40021000 	.word	0x40021000
 8005720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005724:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005728:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800572c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800572e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005732:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	fa93 f2a3 	rbit	r2, r3
 800573c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005740:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800574a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800574e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005758:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	fa93 f2a3 	rbit	r2, r3
 8005762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005766:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	4b2b      	ldr	r3, [pc, #172]	; (800581c <HAL_RCC_OscConfig+0x1078>)
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005774:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005778:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800577c:	6011      	str	r1, [r2, #0]
 800577e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005782:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005786:	6812      	ldr	r2, [r2, #0]
 8005788:	fa92 f1a2 	rbit	r1, r2
 800578c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005790:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005794:	6011      	str	r1, [r2, #0]
  return result;
 8005796:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800579a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800579e:	6812      	ldr	r2, [r2, #0]
 80057a0:	fab2 f282 	clz	r2, r2
 80057a4:	b2d2      	uxtb	r2, r2
 80057a6:	f042 0220 	orr.w	r2, r2, #32
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	f002 021f 	and.w	r2, r2, #31
 80057b0:	2101      	movs	r1, #1
 80057b2:	fa01 f202 	lsl.w	r2, r1, r2
 80057b6:	4013      	ands	r3, r2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d180      	bne.n	80056be <HAL_RCC_OscConfig+0xf1a>
 80057bc:	e027      	b.n	800580e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d101      	bne.n	80057d2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e01e      	b.n	8005810 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80057d2:	4b12      	ldr	r3, [pc, #72]	; (800581c <HAL_RCC_OscConfig+0x1078>)
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80057da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80057de:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80057e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d10b      	bne.n	800580a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80057f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80057f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80057fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005806:	429a      	cmp	r2, r3
 8005808:	d001      	beq.n	800580e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e000      	b.n	8005810 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	40021000 	.word	0x40021000

08005820 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b09e      	sub	sp, #120	; 0x78
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800582a:	2300      	movs	r3, #0
 800582c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e162      	b.n	8005afe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005838:	4b90      	ldr	r3, [pc, #576]	; (8005a7c <HAL_RCC_ClockConfig+0x25c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0307 	and.w	r3, r3, #7
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	429a      	cmp	r2, r3
 8005844:	d910      	bls.n	8005868 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005846:	4b8d      	ldr	r3, [pc, #564]	; (8005a7c <HAL_RCC_ClockConfig+0x25c>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f023 0207 	bic.w	r2, r3, #7
 800584e:	498b      	ldr	r1, [pc, #556]	; (8005a7c <HAL_RCC_ClockConfig+0x25c>)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	4313      	orrs	r3, r2
 8005854:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005856:	4b89      	ldr	r3, [pc, #548]	; (8005a7c <HAL_RCC_ClockConfig+0x25c>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0307 	and.w	r3, r3, #7
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	429a      	cmp	r2, r3
 8005862:	d001      	beq.n	8005868 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e14a      	b.n	8005afe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0302 	and.w	r3, r3, #2
 8005870:	2b00      	cmp	r3, #0
 8005872:	d008      	beq.n	8005886 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005874:	4b82      	ldr	r3, [pc, #520]	; (8005a80 <HAL_RCC_ClockConfig+0x260>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	497f      	ldr	r1, [pc, #508]	; (8005a80 <HAL_RCC_ClockConfig+0x260>)
 8005882:	4313      	orrs	r3, r2
 8005884:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 80dc 	beq.w	8005a4c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d13c      	bne.n	8005916 <HAL_RCC_ClockConfig+0xf6>
 800589c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058a0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058a4:	fa93 f3a3 	rbit	r3, r3
 80058a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80058aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ac:	fab3 f383 	clz	r3, r3
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	095b      	lsrs	r3, r3, #5
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	f043 0301 	orr.w	r3, r3, #1
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d102      	bne.n	80058c6 <HAL_RCC_ClockConfig+0xa6>
 80058c0:	4b6f      	ldr	r3, [pc, #444]	; (8005a80 <HAL_RCC_ClockConfig+0x260>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	e00f      	b.n	80058e6 <HAL_RCC_ClockConfig+0xc6>
 80058c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058ce:	fa93 f3a3 	rbit	r3, r3
 80058d2:	667b      	str	r3, [r7, #100]	; 0x64
 80058d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058d8:	663b      	str	r3, [r7, #96]	; 0x60
 80058da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058dc:	fa93 f3a3 	rbit	r3, r3
 80058e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058e2:	4b67      	ldr	r3, [pc, #412]	; (8005a80 <HAL_RCC_ClockConfig+0x260>)
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80058ea:	65ba      	str	r2, [r7, #88]	; 0x58
 80058ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058ee:	fa92 f2a2 	rbit	r2, r2
 80058f2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80058f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058f6:	fab2 f282 	clz	r2, r2
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	f042 0220 	orr.w	r2, r2, #32
 8005900:	b2d2      	uxtb	r2, r2
 8005902:	f002 021f 	and.w	r2, r2, #31
 8005906:	2101      	movs	r1, #1
 8005908:	fa01 f202 	lsl.w	r2, r1, r2
 800590c:	4013      	ands	r3, r2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d17b      	bne.n	8005a0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e0f3      	b.n	8005afe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	2b02      	cmp	r3, #2
 800591c:	d13c      	bne.n	8005998 <HAL_RCC_ClockConfig+0x178>
 800591e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005922:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005926:	fa93 f3a3 	rbit	r3, r3
 800592a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800592c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800592e:	fab3 f383 	clz	r3, r3
 8005932:	b2db      	uxtb	r3, r3
 8005934:	095b      	lsrs	r3, r3, #5
 8005936:	b2db      	uxtb	r3, r3
 8005938:	f043 0301 	orr.w	r3, r3, #1
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b01      	cmp	r3, #1
 8005940:	d102      	bne.n	8005948 <HAL_RCC_ClockConfig+0x128>
 8005942:	4b4f      	ldr	r3, [pc, #316]	; (8005a80 <HAL_RCC_ClockConfig+0x260>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	e00f      	b.n	8005968 <HAL_RCC_ClockConfig+0x148>
 8005948:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800594c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800594e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005950:	fa93 f3a3 	rbit	r3, r3
 8005954:	647b      	str	r3, [r7, #68]	; 0x44
 8005956:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800595a:	643b      	str	r3, [r7, #64]	; 0x40
 800595c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800595e:	fa93 f3a3 	rbit	r3, r3
 8005962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005964:	4b46      	ldr	r3, [pc, #280]	; (8005a80 <HAL_RCC_ClockConfig+0x260>)
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800596c:	63ba      	str	r2, [r7, #56]	; 0x38
 800596e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005970:	fa92 f2a2 	rbit	r2, r2
 8005974:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005978:	fab2 f282 	clz	r2, r2
 800597c:	b2d2      	uxtb	r2, r2
 800597e:	f042 0220 	orr.w	r2, r2, #32
 8005982:	b2d2      	uxtb	r2, r2
 8005984:	f002 021f 	and.w	r2, r2, #31
 8005988:	2101      	movs	r1, #1
 800598a:	fa01 f202 	lsl.w	r2, r1, r2
 800598e:	4013      	ands	r3, r2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d13a      	bne.n	8005a0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e0b2      	b.n	8005afe <HAL_RCC_ClockConfig+0x2de>
 8005998:	2302      	movs	r3, #2
 800599a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800599c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599e:	fa93 f3a3 	rbit	r3, r3
 80059a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80059a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059a6:	fab3 f383 	clz	r3, r3
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	095b      	lsrs	r3, r3, #5
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	f043 0301 	orr.w	r3, r3, #1
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d102      	bne.n	80059c0 <HAL_RCC_ClockConfig+0x1a0>
 80059ba:	4b31      	ldr	r3, [pc, #196]	; (8005a80 <HAL_RCC_ClockConfig+0x260>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	e00d      	b.n	80059dc <HAL_RCC_ClockConfig+0x1bc>
 80059c0:	2302      	movs	r3, #2
 80059c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c6:	fa93 f3a3 	rbit	r3, r3
 80059ca:	627b      	str	r3, [r7, #36]	; 0x24
 80059cc:	2302      	movs	r3, #2
 80059ce:	623b      	str	r3, [r7, #32]
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	fa93 f3a3 	rbit	r3, r3
 80059d6:	61fb      	str	r3, [r7, #28]
 80059d8:	4b29      	ldr	r3, [pc, #164]	; (8005a80 <HAL_RCC_ClockConfig+0x260>)
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	2202      	movs	r2, #2
 80059de:	61ba      	str	r2, [r7, #24]
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	fa92 f2a2 	rbit	r2, r2
 80059e6:	617a      	str	r2, [r7, #20]
  return result;
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	fab2 f282 	clz	r2, r2
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	f042 0220 	orr.w	r2, r2, #32
 80059f4:	b2d2      	uxtb	r2, r2
 80059f6:	f002 021f 	and.w	r2, r2, #31
 80059fa:	2101      	movs	r1, #1
 80059fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005a00:	4013      	ands	r3, r2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e079      	b.n	8005afe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a0a:	4b1d      	ldr	r3, [pc, #116]	; (8005a80 <HAL_RCC_ClockConfig+0x260>)
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f023 0203 	bic.w	r2, r3, #3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	491a      	ldr	r1, [pc, #104]	; (8005a80 <HAL_RCC_ClockConfig+0x260>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a1c:	f7fb fa44 	bl	8000ea8 <HAL_GetTick>
 8005a20:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a22:	e00a      	b.n	8005a3a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a24:	f7fb fa40 	bl	8000ea8 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d901      	bls.n	8005a3a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e061      	b.n	8005afe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a3a:	4b11      	ldr	r3, [pc, #68]	; (8005a80 <HAL_RCC_ClockConfig+0x260>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f003 020c 	and.w	r2, r3, #12
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d1eb      	bne.n	8005a24 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a4c:	4b0b      	ldr	r3, [pc, #44]	; (8005a7c <HAL_RCC_ClockConfig+0x25c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0307 	and.w	r3, r3, #7
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d214      	bcs.n	8005a84 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a5a:	4b08      	ldr	r3, [pc, #32]	; (8005a7c <HAL_RCC_ClockConfig+0x25c>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f023 0207 	bic.w	r2, r3, #7
 8005a62:	4906      	ldr	r1, [pc, #24]	; (8005a7c <HAL_RCC_ClockConfig+0x25c>)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a6a:	4b04      	ldr	r3, [pc, #16]	; (8005a7c <HAL_RCC_ClockConfig+0x25c>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0307 	and.w	r3, r3, #7
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d005      	beq.n	8005a84 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e040      	b.n	8005afe <HAL_RCC_ClockConfig+0x2de>
 8005a7c:	40022000 	.word	0x40022000
 8005a80:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0304 	and.w	r3, r3, #4
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d008      	beq.n	8005aa2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a90:	4b1d      	ldr	r3, [pc, #116]	; (8005b08 <HAL_RCC_ClockConfig+0x2e8>)
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	491a      	ldr	r1, [pc, #104]	; (8005b08 <HAL_RCC_ClockConfig+0x2e8>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0308 	and.w	r3, r3, #8
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d009      	beq.n	8005ac2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aae:	4b16      	ldr	r3, [pc, #88]	; (8005b08 <HAL_RCC_ClockConfig+0x2e8>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	4912      	ldr	r1, [pc, #72]	; (8005b08 <HAL_RCC_ClockConfig+0x2e8>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005ac2:	f000 f829 	bl	8005b18 <HAL_RCC_GetSysClockFreq>
 8005ac6:	4601      	mov	r1, r0
 8005ac8:	4b0f      	ldr	r3, [pc, #60]	; (8005b08 <HAL_RCC_ClockConfig+0x2e8>)
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ad0:	22f0      	movs	r2, #240	; 0xf0
 8005ad2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	fa92 f2a2 	rbit	r2, r2
 8005ada:	60fa      	str	r2, [r7, #12]
  return result;
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	fab2 f282 	clz	r2, r2
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	40d3      	lsrs	r3, r2
 8005ae6:	4a09      	ldr	r2, [pc, #36]	; (8005b0c <HAL_RCC_ClockConfig+0x2ec>)
 8005ae8:	5cd3      	ldrb	r3, [r2, r3]
 8005aea:	fa21 f303 	lsr.w	r3, r1, r3
 8005aee:	4a08      	ldr	r2, [pc, #32]	; (8005b10 <HAL_RCC_ClockConfig+0x2f0>)
 8005af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005af2:	4b08      	ldr	r3, [pc, #32]	; (8005b14 <HAL_RCC_ClockConfig+0x2f4>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fb f992 	bl	8000e20 <HAL_InitTick>
  
  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3778      	adds	r7, #120	; 0x78
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	40021000 	.word	0x40021000
 8005b0c:	0800bf28 	.word	0x0800bf28
 8005b10:	20000004 	.word	0x20000004
 8005b14:	20000008 	.word	0x20000008

08005b18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b08b      	sub	sp, #44	; 0x2c
 8005b1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	61fb      	str	r3, [r7, #28]
 8005b22:	2300      	movs	r3, #0
 8005b24:	61bb      	str	r3, [r7, #24]
 8005b26:	2300      	movs	r3, #0
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005b32:	4b29      	ldr	r3, [pc, #164]	; (8005bd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	f003 030c 	and.w	r3, r3, #12
 8005b3e:	2b04      	cmp	r3, #4
 8005b40:	d002      	beq.n	8005b48 <HAL_RCC_GetSysClockFreq+0x30>
 8005b42:	2b08      	cmp	r3, #8
 8005b44:	d003      	beq.n	8005b4e <HAL_RCC_GetSysClockFreq+0x36>
 8005b46:	e03c      	b.n	8005bc2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b48:	4b24      	ldr	r3, [pc, #144]	; (8005bdc <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b4a:	623b      	str	r3, [r7, #32]
      break;
 8005b4c:	e03c      	b.n	8005bc8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005b54:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005b58:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	fa92 f2a2 	rbit	r2, r2
 8005b60:	607a      	str	r2, [r7, #4]
  return result;
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	fab2 f282 	clz	r2, r2
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	40d3      	lsrs	r3, r2
 8005b6c:	4a1c      	ldr	r2, [pc, #112]	; (8005be0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005b6e:	5cd3      	ldrb	r3, [r2, r3]
 8005b70:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005b72:	4b19      	ldr	r3, [pc, #100]	; (8005bd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	220f      	movs	r2, #15
 8005b7c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	fa92 f2a2 	rbit	r2, r2
 8005b84:	60fa      	str	r2, [r7, #12]
  return result;
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	fab2 f282 	clz	r2, r2
 8005b8c:	b2d2      	uxtb	r2, r2
 8005b8e:	40d3      	lsrs	r3, r2
 8005b90:	4a14      	ldr	r2, [pc, #80]	; (8005be4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005b92:	5cd3      	ldrb	r3, [r2, r3]
 8005b94:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d008      	beq.n	8005bb2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005ba0:	4a0e      	ldr	r2, [pc, #56]	; (8005bdc <HAL_RCC_GetSysClockFreq+0xc4>)
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	fb02 f303 	mul.w	r3, r2, r3
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb0:	e004      	b.n	8005bbc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	4a0c      	ldr	r2, [pc, #48]	; (8005be8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005bb6:	fb02 f303 	mul.w	r3, r2, r3
 8005bba:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	623b      	str	r3, [r7, #32]
      break;
 8005bc0:	e002      	b.n	8005bc8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005bc2:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <HAL_RCC_GetSysClockFreq+0xc4>)
 8005bc4:	623b      	str	r3, [r7, #32]
      break;
 8005bc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	372c      	adds	r7, #44	; 0x2c
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	40021000 	.word	0x40021000
 8005bdc:	007a1200 	.word	0x007a1200
 8005be0:	0800bf40 	.word	0x0800bf40
 8005be4:	0800bf50 	.word	0x0800bf50
 8005be8:	003d0900 	.word	0x003d0900

08005bec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bec:	b480      	push	{r7}
 8005bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bf0:	4b03      	ldr	r3, [pc, #12]	; (8005c00 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	20000004 	.word	0x20000004

08005c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005c0a:	f7ff ffef 	bl	8005bec <HAL_RCC_GetHCLKFreq>
 8005c0e:	4601      	mov	r1, r0
 8005c10:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005c18:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005c1c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	fa92 f2a2 	rbit	r2, r2
 8005c24:	603a      	str	r2, [r7, #0]
  return result;
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	fab2 f282 	clz	r2, r2
 8005c2c:	b2d2      	uxtb	r2, r2
 8005c2e:	40d3      	lsrs	r3, r2
 8005c30:	4a04      	ldr	r2, [pc, #16]	; (8005c44 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005c32:	5cd3      	ldrb	r3, [r2, r3]
 8005c34:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	40021000 	.word	0x40021000
 8005c44:	0800bf38 	.word	0x0800bf38

08005c48 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b092      	sub	sp, #72	; 0x48
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 80d4 	beq.w	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c6c:	4b4e      	ldr	r3, [pc, #312]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c6e:	69db      	ldr	r3, [r3, #28]
 8005c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10e      	bne.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c78:	4b4b      	ldr	r3, [pc, #300]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	4a4a      	ldr	r2, [pc, #296]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c82:	61d3      	str	r3, [r2, #28]
 8005c84:	4b48      	ldr	r3, [pc, #288]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c8c:	60bb      	str	r3, [r7, #8]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c90:	2301      	movs	r3, #1
 8005c92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c96:	4b45      	ldr	r3, [pc, #276]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d118      	bne.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ca2:	4b42      	ldr	r3, [pc, #264]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a41      	ldr	r2, [pc, #260]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cae:	f7fb f8fb 	bl	8000ea8 <HAL_GetTick>
 8005cb2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb4:	e008      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cb6:	f7fb f8f7 	bl	8000ea8 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	2b64      	cmp	r3, #100	; 0x64
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e169      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cc8:	4b38      	ldr	r3, [pc, #224]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d0f0      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cd4:	4b34      	ldr	r3, [pc, #208]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 8084 	beq.w	8005dee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d07c      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cf4:	4b2c      	ldr	r3, [pc, #176]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d06:	fa93 f3a3 	rbit	r3, r3
 8005d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d0e:	fab3 f383 	clz	r3, r3
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	461a      	mov	r2, r3
 8005d16:	4b26      	ldr	r3, [pc, #152]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d18:	4413      	add	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	2301      	movs	r3, #1
 8005d20:	6013      	str	r3, [r2, #0]
 8005d22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2a:	fa93 f3a3 	rbit	r3, r3
 8005d2e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d32:	fab3 f383 	clz	r3, r3
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	461a      	mov	r2, r3
 8005d3a:	4b1d      	ldr	r3, [pc, #116]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d3c:	4413      	add	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	461a      	mov	r2, r3
 8005d42:	2300      	movs	r3, #0
 8005d44:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005d46:	4a18      	ldr	r2, [pc, #96]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d4a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d04b      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d56:	f7fb f8a7 	bl	8000ea8 <HAL_GetTick>
 8005d5a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d5c:	e00a      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d5e:	f7fb f8a3 	bl	8000ea8 <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d901      	bls.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e113      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005d74:	2302      	movs	r3, #2
 8005d76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7a:	fa93 f3a3 	rbit	r3, r3
 8005d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d80:	2302      	movs	r3, #2
 8005d82:	623b      	str	r3, [r7, #32]
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	fa93 f3a3 	rbit	r3, r3
 8005d8a:	61fb      	str	r3, [r7, #28]
  return result;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d8e:	fab3 f383 	clz	r3, r3
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	095b      	lsrs	r3, r3, #5
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	f043 0302 	orr.w	r3, r3, #2
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d108      	bne.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005da2:	4b01      	ldr	r3, [pc, #4]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	e00d      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005da8:	40021000 	.word	0x40021000
 8005dac:	40007000 	.word	0x40007000
 8005db0:	10908100 	.word	0x10908100
 8005db4:	2302      	movs	r3, #2
 8005db6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	fa93 f3a3 	rbit	r3, r3
 8005dbe:	617b      	str	r3, [r7, #20]
 8005dc0:	4b78      	ldr	r3, [pc, #480]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	613a      	str	r2, [r7, #16]
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	fa92 f2a2 	rbit	r2, r2
 8005dce:	60fa      	str	r2, [r7, #12]
  return result;
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	fab2 f282 	clz	r2, r2
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ddc:	b2d2      	uxtb	r2, r2
 8005dde:	f002 021f 	and.w	r2, r2, #31
 8005de2:	2101      	movs	r1, #1
 8005de4:	fa01 f202 	lsl.w	r2, r1, r2
 8005de8:	4013      	ands	r3, r2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d0b7      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005dee:	4b6d      	ldr	r3, [pc, #436]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	496a      	ldr	r1, [pc, #424]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d105      	bne.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e08:	4b66      	ldr	r3, [pc, #408]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e0a:	69db      	ldr	r3, [r3, #28]
 8005e0c:	4a65      	ldr	r2, [pc, #404]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d008      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e20:	4b60      	ldr	r3, [pc, #384]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e24:	f023 0203 	bic.w	r2, r3, #3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	495d      	ldr	r1, [pc, #372]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d008      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e3e:	4b59      	ldr	r3, [pc, #356]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	4956      	ldr	r1, [pc, #344]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0304 	and.w	r3, r3, #4
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d008      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e5c:	4b51      	ldr	r3, [pc, #324]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	494e      	ldr	r1, [pc, #312]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0320 	and.w	r3, r3, #32
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d008      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e7a:	4b4a      	ldr	r3, [pc, #296]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7e:	f023 0210 	bic.w	r2, r3, #16
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	4947      	ldr	r1, [pc, #284]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d008      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005e98:	4b42      	ldr	r3, [pc, #264]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea4:	493f      	ldr	r1, [pc, #252]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d008      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005eb6:	4b3b      	ldr	r3, [pc, #236]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eba:	f023 0220 	bic.w	r2, r3, #32
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	4938      	ldr	r1, [pc, #224]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0308 	and.w	r3, r3, #8
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d008      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ed4:	4b33      	ldr	r3, [pc, #204]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	4930      	ldr	r1, [pc, #192]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0310 	and.w	r3, r3, #16
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d008      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005ef2:	4b2c      	ldr	r3, [pc, #176]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	4929      	ldr	r1, [pc, #164]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d008      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f10:	4b24      	ldr	r3, [pc, #144]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1c:	4921      	ldr	r1, [pc, #132]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d008      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f2e:	4b1d      	ldr	r3, [pc, #116]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f32:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3a:	491a      	ldr	r1, [pc, #104]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d008      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005f4c:	4b15      	ldr	r3, [pc, #84]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f58:	4912      	ldr	r1, [pc, #72]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d008      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005f6a:	4b0e      	ldr	r3, [pc, #56]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f76:	490b      	ldr	r1, [pc, #44]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d008      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005f88:	4b06      	ldr	r3, [pc, #24]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f94:	4903      	ldr	r1, [pc, #12]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3748      	adds	r7, #72	; 0x48
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	40021000 	.word	0x40021000

08005fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e049      	b.n	800604e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d106      	bne.n	8005fd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7fa fdde 	bl	8000b90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	4610      	mov	r0, r2
 8005fe8:	f000 fd6a 	bl	8006ac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
	...

08006058 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b01      	cmp	r3, #1
 800606a:	d001      	beq.n	8006070 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e04a      	b.n	8006106 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2202      	movs	r2, #2
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68da      	ldr	r2, [r3, #12]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 0201 	orr.w	r2, r2, #1
 8006086:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a21      	ldr	r2, [pc, #132]	; (8006114 <HAL_TIM_Base_Start_IT+0xbc>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d018      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x6c>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800609a:	d013      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x6c>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a1d      	ldr	r2, [pc, #116]	; (8006118 <HAL_TIM_Base_Start_IT+0xc0>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00e      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x6c>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a1c      	ldr	r2, [pc, #112]	; (800611c <HAL_TIM_Base_Start_IT+0xc4>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d009      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x6c>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a1a      	ldr	r2, [pc, #104]	; (8006120 <HAL_TIM_Base_Start_IT+0xc8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d004      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x6c>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a19      	ldr	r2, [pc, #100]	; (8006124 <HAL_TIM_Base_Start_IT+0xcc>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d115      	bne.n	80060f0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689a      	ldr	r2, [r3, #8]
 80060ca:	4b17      	ldr	r3, [pc, #92]	; (8006128 <HAL_TIM_Base_Start_IT+0xd0>)
 80060cc:	4013      	ands	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2b06      	cmp	r3, #6
 80060d4:	d015      	beq.n	8006102 <HAL_TIM_Base_Start_IT+0xaa>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060dc:	d011      	beq.n	8006102 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f042 0201 	orr.w	r2, r2, #1
 80060ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ee:	e008      	b.n	8006102 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0201 	orr.w	r2, r2, #1
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	e000      	b.n	8006104 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006102:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	40012c00 	.word	0x40012c00
 8006118:	40000400 	.word	0x40000400
 800611c:	40000800 	.word	0x40000800
 8006120:	40013400 	.word	0x40013400
 8006124:	40014000 	.word	0x40014000
 8006128:	00010007 	.word	0x00010007

0800612c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e049      	b.n	80061d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d106      	bne.n	8006158 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f841 	bl	80061da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2202      	movs	r2, #2
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3304      	adds	r3, #4
 8006168:	4619      	mov	r1, r3
 800616a:	4610      	mov	r0, r2
 800616c:	f000 fca8 	bl	8006ac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061e2:	bf00      	nop
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
	...

080061f0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061fa:	2300      	movs	r3, #0
 80061fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d109      	bne.n	8006218 <HAL_TIM_PWM_Start_IT+0x28>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b01      	cmp	r3, #1
 800620e:	bf14      	ite	ne
 8006210:	2301      	movne	r3, #1
 8006212:	2300      	moveq	r3, #0
 8006214:	b2db      	uxtb	r3, r3
 8006216:	e03c      	b.n	8006292 <HAL_TIM_PWM_Start_IT+0xa2>
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	2b04      	cmp	r3, #4
 800621c:	d109      	bne.n	8006232 <HAL_TIM_PWM_Start_IT+0x42>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b01      	cmp	r3, #1
 8006228:	bf14      	ite	ne
 800622a:	2301      	movne	r3, #1
 800622c:	2300      	moveq	r3, #0
 800622e:	b2db      	uxtb	r3, r3
 8006230:	e02f      	b.n	8006292 <HAL_TIM_PWM_Start_IT+0xa2>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b08      	cmp	r3, #8
 8006236:	d109      	bne.n	800624c <HAL_TIM_PWM_Start_IT+0x5c>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b01      	cmp	r3, #1
 8006242:	bf14      	ite	ne
 8006244:	2301      	movne	r3, #1
 8006246:	2300      	moveq	r3, #0
 8006248:	b2db      	uxtb	r3, r3
 800624a:	e022      	b.n	8006292 <HAL_TIM_PWM_Start_IT+0xa2>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b0c      	cmp	r3, #12
 8006250:	d109      	bne.n	8006266 <HAL_TIM_PWM_Start_IT+0x76>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b01      	cmp	r3, #1
 800625c:	bf14      	ite	ne
 800625e:	2301      	movne	r3, #1
 8006260:	2300      	moveq	r3, #0
 8006262:	b2db      	uxtb	r3, r3
 8006264:	e015      	b.n	8006292 <HAL_TIM_PWM_Start_IT+0xa2>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2b10      	cmp	r3, #16
 800626a:	d109      	bne.n	8006280 <HAL_TIM_PWM_Start_IT+0x90>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b01      	cmp	r3, #1
 8006276:	bf14      	ite	ne
 8006278:	2301      	movne	r3, #1
 800627a:	2300      	moveq	r3, #0
 800627c:	b2db      	uxtb	r3, r3
 800627e:	e008      	b.n	8006292 <HAL_TIM_PWM_Start_IT+0xa2>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b01      	cmp	r3, #1
 800628a:	bf14      	ite	ne
 800628c:	2301      	movne	r3, #1
 800628e:	2300      	moveq	r3, #0
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e0e2      	b.n	8006460 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d104      	bne.n	80062aa <HAL_TIM_PWM_Start_IT+0xba>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062a8:	e023      	b.n	80062f2 <HAL_TIM_PWM_Start_IT+0x102>
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	2b04      	cmp	r3, #4
 80062ae:	d104      	bne.n	80062ba <HAL_TIM_PWM_Start_IT+0xca>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2202      	movs	r2, #2
 80062b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062b8:	e01b      	b.n	80062f2 <HAL_TIM_PWM_Start_IT+0x102>
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b08      	cmp	r3, #8
 80062be:	d104      	bne.n	80062ca <HAL_TIM_PWM_Start_IT+0xda>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2202      	movs	r2, #2
 80062c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062c8:	e013      	b.n	80062f2 <HAL_TIM_PWM_Start_IT+0x102>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b0c      	cmp	r3, #12
 80062ce:	d104      	bne.n	80062da <HAL_TIM_PWM_Start_IT+0xea>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062d8:	e00b      	b.n	80062f2 <HAL_TIM_PWM_Start_IT+0x102>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b10      	cmp	r3, #16
 80062de:	d104      	bne.n	80062ea <HAL_TIM_PWM_Start_IT+0xfa>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2202      	movs	r2, #2
 80062e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062e8:	e003      	b.n	80062f2 <HAL_TIM_PWM_Start_IT+0x102>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2202      	movs	r2, #2
 80062ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b0c      	cmp	r3, #12
 80062f6:	d841      	bhi.n	800637c <HAL_TIM_PWM_Start_IT+0x18c>
 80062f8:	a201      	add	r2, pc, #4	; (adr r2, 8006300 <HAL_TIM_PWM_Start_IT+0x110>)
 80062fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fe:	bf00      	nop
 8006300:	08006335 	.word	0x08006335
 8006304:	0800637d 	.word	0x0800637d
 8006308:	0800637d 	.word	0x0800637d
 800630c:	0800637d 	.word	0x0800637d
 8006310:	08006347 	.word	0x08006347
 8006314:	0800637d 	.word	0x0800637d
 8006318:	0800637d 	.word	0x0800637d
 800631c:	0800637d 	.word	0x0800637d
 8006320:	08006359 	.word	0x08006359
 8006324:	0800637d 	.word	0x0800637d
 8006328:	0800637d 	.word	0x0800637d
 800632c:	0800637d 	.word	0x0800637d
 8006330:	0800636b 	.word	0x0800636b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0202 	orr.w	r2, r2, #2
 8006342:	60da      	str	r2, [r3, #12]
      break;
 8006344:	e01d      	b.n	8006382 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68da      	ldr	r2, [r3, #12]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f042 0204 	orr.w	r2, r2, #4
 8006354:	60da      	str	r2, [r3, #12]
      break;
 8006356:	e014      	b.n	8006382 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68da      	ldr	r2, [r3, #12]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0208 	orr.w	r2, r2, #8
 8006366:	60da      	str	r2, [r3, #12]
      break;
 8006368:	e00b      	b.n	8006382 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68da      	ldr	r2, [r3, #12]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f042 0210 	orr.w	r2, r2, #16
 8006378:	60da      	str	r2, [r3, #12]
      break;
 800637a:	e002      	b.n	8006382 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	73fb      	strb	r3, [r7, #15]
      break;
 8006380:	bf00      	nop
  }

  if (status == HAL_OK)
 8006382:	7bfb      	ldrb	r3, [r7, #15]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d16a      	bne.n	800645e <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2201      	movs	r2, #1
 800638e:	6839      	ldr	r1, [r7, #0]
 8006390:	4618      	mov	r0, r3
 8006392:	f000 ff95 	bl	80072c0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a33      	ldr	r2, [pc, #204]	; (8006468 <HAL_TIM_PWM_Start_IT+0x278>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d013      	beq.n	80063c8 <HAL_TIM_PWM_Start_IT+0x1d8>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a31      	ldr	r2, [pc, #196]	; (800646c <HAL_TIM_PWM_Start_IT+0x27c>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d00e      	beq.n	80063c8 <HAL_TIM_PWM_Start_IT+0x1d8>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a30      	ldr	r2, [pc, #192]	; (8006470 <HAL_TIM_PWM_Start_IT+0x280>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d009      	beq.n	80063c8 <HAL_TIM_PWM_Start_IT+0x1d8>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a2e      	ldr	r2, [pc, #184]	; (8006474 <HAL_TIM_PWM_Start_IT+0x284>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d004      	beq.n	80063c8 <HAL_TIM_PWM_Start_IT+0x1d8>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a2d      	ldr	r2, [pc, #180]	; (8006478 <HAL_TIM_PWM_Start_IT+0x288>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d101      	bne.n	80063cc <HAL_TIM_PWM_Start_IT+0x1dc>
 80063c8:	2301      	movs	r3, #1
 80063ca:	e000      	b.n	80063ce <HAL_TIM_PWM_Start_IT+0x1de>
 80063cc:	2300      	movs	r3, #0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d007      	beq.n	80063e2 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a20      	ldr	r2, [pc, #128]	; (8006468 <HAL_TIM_PWM_Start_IT+0x278>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d018      	beq.n	800641e <HAL_TIM_PWM_Start_IT+0x22e>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063f4:	d013      	beq.n	800641e <HAL_TIM_PWM_Start_IT+0x22e>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a20      	ldr	r2, [pc, #128]	; (800647c <HAL_TIM_PWM_Start_IT+0x28c>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d00e      	beq.n	800641e <HAL_TIM_PWM_Start_IT+0x22e>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a1e      	ldr	r2, [pc, #120]	; (8006480 <HAL_TIM_PWM_Start_IT+0x290>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d009      	beq.n	800641e <HAL_TIM_PWM_Start_IT+0x22e>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a17      	ldr	r2, [pc, #92]	; (800646c <HAL_TIM_PWM_Start_IT+0x27c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d004      	beq.n	800641e <HAL_TIM_PWM_Start_IT+0x22e>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a15      	ldr	r2, [pc, #84]	; (8006470 <HAL_TIM_PWM_Start_IT+0x280>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d115      	bne.n	800644a <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	689a      	ldr	r2, [r3, #8]
 8006424:	4b17      	ldr	r3, [pc, #92]	; (8006484 <HAL_TIM_PWM_Start_IT+0x294>)
 8006426:	4013      	ands	r3, r2
 8006428:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2b06      	cmp	r3, #6
 800642e:	d015      	beq.n	800645c <HAL_TIM_PWM_Start_IT+0x26c>
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006436:	d011      	beq.n	800645c <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0201 	orr.w	r2, r2, #1
 8006446:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006448:	e008      	b.n	800645c <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f042 0201 	orr.w	r2, r2, #1
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	e000      	b.n	800645e <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800645c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800645e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006460:	4618      	mov	r0, r3
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	40012c00 	.word	0x40012c00
 800646c:	40013400 	.word	0x40013400
 8006470:	40014000 	.word	0x40014000
 8006474:	40014400 	.word	0x40014400
 8006478:	40014800 	.word	0x40014800
 800647c:	40000400 	.word	0x40000400
 8006480:	40000800 	.word	0x40000800
 8006484:	00010007 	.word	0x00010007

08006488 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b02      	cmp	r3, #2
 800649c:	d122      	bne.n	80064e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d11b      	bne.n	80064e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f06f 0202 	mvn.w	r2, #2
 80064b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2201      	movs	r2, #1
 80064ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	f003 0303 	and.w	r3, r3, #3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fae3 	bl	8006a96 <HAL_TIM_IC_CaptureCallback>
 80064d0:	e005      	b.n	80064de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fad5 	bl	8006a82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7f9 fea5 	bl	8000228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	f003 0304 	and.w	r3, r3, #4
 80064ee:	2b04      	cmp	r3, #4
 80064f0:	d122      	bne.n	8006538 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	f003 0304 	and.w	r3, r3, #4
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d11b      	bne.n	8006538 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f06f 0204 	mvn.w	r2, #4
 8006508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2202      	movs	r2, #2
 800650e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800651a:	2b00      	cmp	r3, #0
 800651c:	d003      	beq.n	8006526 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fab9 	bl	8006a96 <HAL_TIM_IC_CaptureCallback>
 8006524:	e005      	b.n	8006532 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 faab 	bl	8006a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7f9 fe7b 	bl	8000228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	f003 0308 	and.w	r3, r3, #8
 8006542:	2b08      	cmp	r3, #8
 8006544:	d122      	bne.n	800658c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	f003 0308 	and.w	r3, r3, #8
 8006550:	2b08      	cmp	r3, #8
 8006552:	d11b      	bne.n	800658c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f06f 0208 	mvn.w	r2, #8
 800655c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2204      	movs	r2, #4
 8006562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	69db      	ldr	r3, [r3, #28]
 800656a:	f003 0303 	and.w	r3, r3, #3
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fa8f 	bl	8006a96 <HAL_TIM_IC_CaptureCallback>
 8006578:	e005      	b.n	8006586 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fa81 	bl	8006a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f7f9 fe51 	bl	8000228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	f003 0310 	and.w	r3, r3, #16
 8006596:	2b10      	cmp	r3, #16
 8006598:	d122      	bne.n	80065e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	f003 0310 	and.w	r3, r3, #16
 80065a4:	2b10      	cmp	r3, #16
 80065a6:	d11b      	bne.n	80065e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f06f 0210 	mvn.w	r2, #16
 80065b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2208      	movs	r2, #8
 80065b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fa65 	bl	8006a96 <HAL_TIM_IC_CaptureCallback>
 80065cc:	e005      	b.n	80065da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 fa57 	bl	8006a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f7f9 fe27 	bl	8000228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d10e      	bne.n	800660c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d107      	bne.n	800660c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f06f 0201 	mvn.w	r2, #1
 8006604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7f9 fde6 	bl	80001d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006616:	2b80      	cmp	r3, #128	; 0x80
 8006618:	d10e      	bne.n	8006638 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006624:	2b80      	cmp	r3, #128	; 0x80
 8006626:	d107      	bne.n	8006638 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fef4 	bl	8007420 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006646:	d10e      	bne.n	8006666 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006652:	2b80      	cmp	r3, #128	; 0x80
 8006654:	d107      	bne.n	8006666 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800665e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 fee7 	bl	8007434 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006670:	2b40      	cmp	r3, #64	; 0x40
 8006672:	d10e      	bne.n	8006692 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667e:	2b40      	cmp	r3, #64	; 0x40
 8006680:	d107      	bne.n	8006692 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800668a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 fa0c 	bl	8006aaa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	f003 0320 	and.w	r3, r3, #32
 800669c:	2b20      	cmp	r3, #32
 800669e:	d10e      	bne.n	80066be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f003 0320 	and.w	r3, r3, #32
 80066aa:	2b20      	cmp	r3, #32
 80066ac:	d107      	bne.n	80066be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f06f 0220 	mvn.w	r2, #32
 80066b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fea7 	bl	800740c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066be:	bf00      	nop
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
	...

080066c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066d4:	2300      	movs	r3, #0
 80066d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d101      	bne.n	80066e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066e2:	2302      	movs	r3, #2
 80066e4:	e0ff      	b.n	80068e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b14      	cmp	r3, #20
 80066f2:	f200 80f0 	bhi.w	80068d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80066f6:	a201      	add	r2, pc, #4	; (adr r2, 80066fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fc:	08006751 	.word	0x08006751
 8006700:	080068d7 	.word	0x080068d7
 8006704:	080068d7 	.word	0x080068d7
 8006708:	080068d7 	.word	0x080068d7
 800670c:	08006791 	.word	0x08006791
 8006710:	080068d7 	.word	0x080068d7
 8006714:	080068d7 	.word	0x080068d7
 8006718:	080068d7 	.word	0x080068d7
 800671c:	080067d3 	.word	0x080067d3
 8006720:	080068d7 	.word	0x080068d7
 8006724:	080068d7 	.word	0x080068d7
 8006728:	080068d7 	.word	0x080068d7
 800672c:	08006813 	.word	0x08006813
 8006730:	080068d7 	.word	0x080068d7
 8006734:	080068d7 	.word	0x080068d7
 8006738:	080068d7 	.word	0x080068d7
 800673c:	08006855 	.word	0x08006855
 8006740:	080068d7 	.word	0x080068d7
 8006744:	080068d7 	.word	0x080068d7
 8006748:	080068d7 	.word	0x080068d7
 800674c:	08006895 	.word	0x08006895
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68b9      	ldr	r1, [r7, #8]
 8006756:	4618      	mov	r0, r3
 8006758:	f000 fa42 	bl	8006be0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	699a      	ldr	r2, [r3, #24]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f042 0208 	orr.w	r2, r2, #8
 800676a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	699a      	ldr	r2, [r3, #24]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f022 0204 	bic.w	r2, r2, #4
 800677a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6999      	ldr	r1, [r3, #24]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	691a      	ldr	r2, [r3, #16]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	430a      	orrs	r2, r1
 800678c:	619a      	str	r2, [r3, #24]
      break;
 800678e:	e0a5      	b.n	80068dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68b9      	ldr	r1, [r7, #8]
 8006796:	4618      	mov	r0, r3
 8006798:	f000 fab2 	bl	8006d00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	699a      	ldr	r2, [r3, #24]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	699a      	ldr	r2, [r3, #24]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6999      	ldr	r1, [r3, #24]
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	021a      	lsls	r2, r3, #8
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	430a      	orrs	r2, r1
 80067ce:	619a      	str	r2, [r3, #24]
      break;
 80067d0:	e084      	b.n	80068dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68b9      	ldr	r1, [r7, #8]
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 fb1b 	bl	8006e14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69da      	ldr	r2, [r3, #28]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f042 0208 	orr.w	r2, r2, #8
 80067ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	69da      	ldr	r2, [r3, #28]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 0204 	bic.w	r2, r2, #4
 80067fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	69d9      	ldr	r1, [r3, #28]
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	691a      	ldr	r2, [r3, #16]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	430a      	orrs	r2, r1
 800680e:	61da      	str	r2, [r3, #28]
      break;
 8006810:	e064      	b.n	80068dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68b9      	ldr	r1, [r7, #8]
 8006818:	4618      	mov	r0, r3
 800681a:	f000 fb83 	bl	8006f24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	69da      	ldr	r2, [r3, #28]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800682c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	69da      	ldr	r2, [r3, #28]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800683c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	69d9      	ldr	r1, [r3, #28]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	021a      	lsls	r2, r3, #8
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	430a      	orrs	r2, r1
 8006850:	61da      	str	r2, [r3, #28]
      break;
 8006852:	e043      	b.n	80068dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68b9      	ldr	r1, [r7, #8]
 800685a:	4618      	mov	r0, r3
 800685c:	f000 fbcc 	bl	8006ff8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0208 	orr.w	r2, r2, #8
 800686e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0204 	bic.w	r2, r2, #4
 800687e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	691a      	ldr	r2, [r3, #16]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006892:	e023      	b.n	80068dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68b9      	ldr	r1, [r7, #8]
 800689a:	4618      	mov	r0, r3
 800689c:	f000 fc10 	bl	80070c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	021a      	lsls	r2, r3, #8
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068d4:	e002      	b.n	80068dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	75fb      	strb	r3, [r7, #23]
      break;
 80068da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3718      	adds	r7, #24
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop

080068f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006904:	2b01      	cmp	r3, #1
 8006906:	d101      	bne.n	800690c <HAL_TIM_ConfigClockSource+0x1c>
 8006908:	2302      	movs	r3, #2
 800690a:	e0b6      	b.n	8006a7a <HAL_TIM_ConfigClockSource+0x18a>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800692a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800692e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006936:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006948:	d03e      	beq.n	80069c8 <HAL_TIM_ConfigClockSource+0xd8>
 800694a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800694e:	f200 8087 	bhi.w	8006a60 <HAL_TIM_ConfigClockSource+0x170>
 8006952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006956:	f000 8086 	beq.w	8006a66 <HAL_TIM_ConfigClockSource+0x176>
 800695a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800695e:	d87f      	bhi.n	8006a60 <HAL_TIM_ConfigClockSource+0x170>
 8006960:	2b70      	cmp	r3, #112	; 0x70
 8006962:	d01a      	beq.n	800699a <HAL_TIM_ConfigClockSource+0xaa>
 8006964:	2b70      	cmp	r3, #112	; 0x70
 8006966:	d87b      	bhi.n	8006a60 <HAL_TIM_ConfigClockSource+0x170>
 8006968:	2b60      	cmp	r3, #96	; 0x60
 800696a:	d050      	beq.n	8006a0e <HAL_TIM_ConfigClockSource+0x11e>
 800696c:	2b60      	cmp	r3, #96	; 0x60
 800696e:	d877      	bhi.n	8006a60 <HAL_TIM_ConfigClockSource+0x170>
 8006970:	2b50      	cmp	r3, #80	; 0x50
 8006972:	d03c      	beq.n	80069ee <HAL_TIM_ConfigClockSource+0xfe>
 8006974:	2b50      	cmp	r3, #80	; 0x50
 8006976:	d873      	bhi.n	8006a60 <HAL_TIM_ConfigClockSource+0x170>
 8006978:	2b40      	cmp	r3, #64	; 0x40
 800697a:	d058      	beq.n	8006a2e <HAL_TIM_ConfigClockSource+0x13e>
 800697c:	2b40      	cmp	r3, #64	; 0x40
 800697e:	d86f      	bhi.n	8006a60 <HAL_TIM_ConfigClockSource+0x170>
 8006980:	2b30      	cmp	r3, #48	; 0x30
 8006982:	d064      	beq.n	8006a4e <HAL_TIM_ConfigClockSource+0x15e>
 8006984:	2b30      	cmp	r3, #48	; 0x30
 8006986:	d86b      	bhi.n	8006a60 <HAL_TIM_ConfigClockSource+0x170>
 8006988:	2b20      	cmp	r3, #32
 800698a:	d060      	beq.n	8006a4e <HAL_TIM_ConfigClockSource+0x15e>
 800698c:	2b20      	cmp	r3, #32
 800698e:	d867      	bhi.n	8006a60 <HAL_TIM_ConfigClockSource+0x170>
 8006990:	2b00      	cmp	r3, #0
 8006992:	d05c      	beq.n	8006a4e <HAL_TIM_ConfigClockSource+0x15e>
 8006994:	2b10      	cmp	r3, #16
 8006996:	d05a      	beq.n	8006a4e <HAL_TIM_ConfigClockSource+0x15e>
 8006998:	e062      	b.n	8006a60 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069aa:	f000 fc69 	bl	8007280 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	609a      	str	r2, [r3, #8]
      break;
 80069c6:	e04f      	b.n	8006a68 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069d8:	f000 fc52 	bl	8007280 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689a      	ldr	r2, [r3, #8]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069ea:	609a      	str	r2, [r3, #8]
      break;
 80069ec:	e03c      	b.n	8006a68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069fa:	461a      	mov	r2, r3
 80069fc:	f000 fbc6 	bl	800718c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2150      	movs	r1, #80	; 0x50
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 fc1f 	bl	800724a <TIM_ITRx_SetConfig>
      break;
 8006a0c:	e02c      	b.n	8006a68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	f000 fbe5 	bl	80071ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2160      	movs	r1, #96	; 0x60
 8006a26:	4618      	mov	r0, r3
 8006a28:	f000 fc0f 	bl	800724a <TIM_ITRx_SetConfig>
      break;
 8006a2c:	e01c      	b.n	8006a68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	f000 fba6 	bl	800718c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2140      	movs	r1, #64	; 0x40
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 fbff 	bl	800724a <TIM_ITRx_SetConfig>
      break;
 8006a4c:	e00c      	b.n	8006a68 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4619      	mov	r1, r3
 8006a58:	4610      	mov	r0, r2
 8006a5a:	f000 fbf6 	bl	800724a <TIM_ITRx_SetConfig>
      break;
 8006a5e:	e003      	b.n	8006a68 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	73fb      	strb	r3, [r7, #15]
      break;
 8006a64:	e000      	b.n	8006a68 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006a66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a82:	b480      	push	{r7}
 8006a84:	b083      	sub	sp, #12
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a8a:	bf00      	nop
 8006a8c:	370c      	adds	r7, #12
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a96:	b480      	push	{r7}
 8006a98:	b083      	sub	sp, #12
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a9e:	bf00      	nop
 8006aa0:	370c      	adds	r7, #12
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b083      	sub	sp, #12
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ab2:	bf00      	nop
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
	...

08006ac0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a3c      	ldr	r2, [pc, #240]	; (8006bc4 <TIM_Base_SetConfig+0x104>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d00f      	beq.n	8006af8 <TIM_Base_SetConfig+0x38>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ade:	d00b      	beq.n	8006af8 <TIM_Base_SetConfig+0x38>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a39      	ldr	r2, [pc, #228]	; (8006bc8 <TIM_Base_SetConfig+0x108>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d007      	beq.n	8006af8 <TIM_Base_SetConfig+0x38>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a38      	ldr	r2, [pc, #224]	; (8006bcc <TIM_Base_SetConfig+0x10c>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d003      	beq.n	8006af8 <TIM_Base_SetConfig+0x38>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a37      	ldr	r2, [pc, #220]	; (8006bd0 <TIM_Base_SetConfig+0x110>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d108      	bne.n	8006b0a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006afe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a2d      	ldr	r2, [pc, #180]	; (8006bc4 <TIM_Base_SetConfig+0x104>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d01b      	beq.n	8006b4a <TIM_Base_SetConfig+0x8a>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b18:	d017      	beq.n	8006b4a <TIM_Base_SetConfig+0x8a>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a2a      	ldr	r2, [pc, #168]	; (8006bc8 <TIM_Base_SetConfig+0x108>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d013      	beq.n	8006b4a <TIM_Base_SetConfig+0x8a>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a29      	ldr	r2, [pc, #164]	; (8006bcc <TIM_Base_SetConfig+0x10c>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d00f      	beq.n	8006b4a <TIM_Base_SetConfig+0x8a>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a28      	ldr	r2, [pc, #160]	; (8006bd0 <TIM_Base_SetConfig+0x110>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d00b      	beq.n	8006b4a <TIM_Base_SetConfig+0x8a>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a27      	ldr	r2, [pc, #156]	; (8006bd4 <TIM_Base_SetConfig+0x114>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d007      	beq.n	8006b4a <TIM_Base_SetConfig+0x8a>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a26      	ldr	r2, [pc, #152]	; (8006bd8 <TIM_Base_SetConfig+0x118>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d003      	beq.n	8006b4a <TIM_Base_SetConfig+0x8a>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a25      	ldr	r2, [pc, #148]	; (8006bdc <TIM_Base_SetConfig+0x11c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d108      	bne.n	8006b5c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	689a      	ldr	r2, [r3, #8]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a10      	ldr	r2, [pc, #64]	; (8006bc4 <TIM_Base_SetConfig+0x104>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d00f      	beq.n	8006ba8 <TIM_Base_SetConfig+0xe8>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a11      	ldr	r2, [pc, #68]	; (8006bd0 <TIM_Base_SetConfig+0x110>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d00b      	beq.n	8006ba8 <TIM_Base_SetConfig+0xe8>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a10      	ldr	r2, [pc, #64]	; (8006bd4 <TIM_Base_SetConfig+0x114>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d007      	beq.n	8006ba8 <TIM_Base_SetConfig+0xe8>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a0f      	ldr	r2, [pc, #60]	; (8006bd8 <TIM_Base_SetConfig+0x118>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d003      	beq.n	8006ba8 <TIM_Base_SetConfig+0xe8>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a0e      	ldr	r2, [pc, #56]	; (8006bdc <TIM_Base_SetConfig+0x11c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d103      	bne.n	8006bb0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	691a      	ldr	r2, [r3, #16]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	615a      	str	r2, [r3, #20]
}
 8006bb6:	bf00      	nop
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	40012c00 	.word	0x40012c00
 8006bc8:	40000400 	.word	0x40000400
 8006bcc:	40000800 	.word	0x40000800
 8006bd0:	40013400 	.word	0x40013400
 8006bd4:	40014000 	.word	0x40014000
 8006bd8:	40014400 	.word	0x40014400
 8006bdc:	40014800 	.word	0x40014800

08006be0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b087      	sub	sp, #28
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	f023 0201 	bic.w	r2, r3, #1
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f023 0303 	bic.w	r3, r3, #3
 8006c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f023 0302 	bic.w	r3, r3, #2
 8006c2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a2c      	ldr	r2, [pc, #176]	; (8006cec <TIM_OC1_SetConfig+0x10c>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d00f      	beq.n	8006c60 <TIM_OC1_SetConfig+0x80>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a2b      	ldr	r2, [pc, #172]	; (8006cf0 <TIM_OC1_SetConfig+0x110>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d00b      	beq.n	8006c60 <TIM_OC1_SetConfig+0x80>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a2a      	ldr	r2, [pc, #168]	; (8006cf4 <TIM_OC1_SetConfig+0x114>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d007      	beq.n	8006c60 <TIM_OC1_SetConfig+0x80>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a29      	ldr	r2, [pc, #164]	; (8006cf8 <TIM_OC1_SetConfig+0x118>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d003      	beq.n	8006c60 <TIM_OC1_SetConfig+0x80>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a28      	ldr	r2, [pc, #160]	; (8006cfc <TIM_OC1_SetConfig+0x11c>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d10c      	bne.n	8006c7a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	f023 0308 	bic.w	r3, r3, #8
 8006c66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f023 0304 	bic.w	r3, r3, #4
 8006c78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a1b      	ldr	r2, [pc, #108]	; (8006cec <TIM_OC1_SetConfig+0x10c>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d00f      	beq.n	8006ca2 <TIM_OC1_SetConfig+0xc2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a1a      	ldr	r2, [pc, #104]	; (8006cf0 <TIM_OC1_SetConfig+0x110>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d00b      	beq.n	8006ca2 <TIM_OC1_SetConfig+0xc2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a19      	ldr	r2, [pc, #100]	; (8006cf4 <TIM_OC1_SetConfig+0x114>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d007      	beq.n	8006ca2 <TIM_OC1_SetConfig+0xc2>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a18      	ldr	r2, [pc, #96]	; (8006cf8 <TIM_OC1_SetConfig+0x118>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d003      	beq.n	8006ca2 <TIM_OC1_SetConfig+0xc2>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a17      	ldr	r2, [pc, #92]	; (8006cfc <TIM_OC1_SetConfig+0x11c>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d111      	bne.n	8006cc6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ca8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	621a      	str	r2, [r3, #32]
}
 8006ce0:	bf00      	nop
 8006ce2:	371c      	adds	r7, #28
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	40012c00 	.word	0x40012c00
 8006cf0:	40013400 	.word	0x40013400
 8006cf4:	40014000 	.word	0x40014000
 8006cf8:	40014400 	.word	0x40014400
 8006cfc:	40014800 	.word	0x40014800

08006d00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	f023 0210 	bic.w	r2, r3, #16
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	021b      	lsls	r3, r3, #8
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	f023 0320 	bic.w	r3, r3, #32
 8006d4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	011b      	lsls	r3, r3, #4
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a28      	ldr	r2, [pc, #160]	; (8006e00 <TIM_OC2_SetConfig+0x100>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d003      	beq.n	8006d6c <TIM_OC2_SetConfig+0x6c>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a27      	ldr	r2, [pc, #156]	; (8006e04 <TIM_OC2_SetConfig+0x104>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d10d      	bne.n	8006d88 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	011b      	lsls	r3, r3, #4
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a1d      	ldr	r2, [pc, #116]	; (8006e00 <TIM_OC2_SetConfig+0x100>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d00f      	beq.n	8006db0 <TIM_OC2_SetConfig+0xb0>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a1c      	ldr	r2, [pc, #112]	; (8006e04 <TIM_OC2_SetConfig+0x104>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d00b      	beq.n	8006db0 <TIM_OC2_SetConfig+0xb0>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a1b      	ldr	r2, [pc, #108]	; (8006e08 <TIM_OC2_SetConfig+0x108>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d007      	beq.n	8006db0 <TIM_OC2_SetConfig+0xb0>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a1a      	ldr	r2, [pc, #104]	; (8006e0c <TIM_OC2_SetConfig+0x10c>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d003      	beq.n	8006db0 <TIM_OC2_SetConfig+0xb0>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a19      	ldr	r2, [pc, #100]	; (8006e10 <TIM_OC2_SetConfig+0x110>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d113      	bne.n	8006dd8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006db6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dbe:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	695b      	ldr	r3, [r3, #20]
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	685a      	ldr	r2, [r3, #4]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	621a      	str	r2, [r3, #32]
}
 8006df2:	bf00      	nop
 8006df4:	371c      	adds	r7, #28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	40012c00 	.word	0x40012c00
 8006e04:	40013400 	.word	0x40013400
 8006e08:	40014000 	.word	0x40014000
 8006e0c:	40014400 	.word	0x40014400
 8006e10:	40014800 	.word	0x40014800

08006e14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b087      	sub	sp, #28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a1b      	ldr	r3, [r3, #32]
 8006e22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f023 0303 	bic.w	r3, r3, #3
 8006e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	021b      	lsls	r3, r3, #8
 8006e68:	697a      	ldr	r2, [r7, #20]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a27      	ldr	r2, [pc, #156]	; (8006f10 <TIM_OC3_SetConfig+0xfc>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d003      	beq.n	8006e7e <TIM_OC3_SetConfig+0x6a>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a26      	ldr	r2, [pc, #152]	; (8006f14 <TIM_OC3_SetConfig+0x100>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d10d      	bne.n	8006e9a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	021b      	lsls	r3, r3, #8
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e98:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a1c      	ldr	r2, [pc, #112]	; (8006f10 <TIM_OC3_SetConfig+0xfc>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d00f      	beq.n	8006ec2 <TIM_OC3_SetConfig+0xae>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a1b      	ldr	r2, [pc, #108]	; (8006f14 <TIM_OC3_SetConfig+0x100>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d00b      	beq.n	8006ec2 <TIM_OC3_SetConfig+0xae>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a1a      	ldr	r2, [pc, #104]	; (8006f18 <TIM_OC3_SetConfig+0x104>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d007      	beq.n	8006ec2 <TIM_OC3_SetConfig+0xae>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a19      	ldr	r2, [pc, #100]	; (8006f1c <TIM_OC3_SetConfig+0x108>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d003      	beq.n	8006ec2 <TIM_OC3_SetConfig+0xae>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a18      	ldr	r2, [pc, #96]	; (8006f20 <TIM_OC3_SetConfig+0x10c>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d113      	bne.n	8006eea <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	011b      	lsls	r3, r3, #4
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	011b      	lsls	r3, r3, #4
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	621a      	str	r2, [r3, #32]
}
 8006f04:	bf00      	nop
 8006f06:	371c      	adds	r7, #28
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	40012c00 	.word	0x40012c00
 8006f14:	40013400 	.word	0x40013400
 8006f18:	40014000 	.word	0x40014000
 8006f1c:	40014400 	.word	0x40014400
 8006f20:	40014800 	.word	0x40014800

08006f24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	021b      	lsls	r3, r3, #8
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	031b      	lsls	r3, r3, #12
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a18      	ldr	r2, [pc, #96]	; (8006fe4 <TIM_OC4_SetConfig+0xc0>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d00f      	beq.n	8006fa8 <TIM_OC4_SetConfig+0x84>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a17      	ldr	r2, [pc, #92]	; (8006fe8 <TIM_OC4_SetConfig+0xc4>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d00b      	beq.n	8006fa8 <TIM_OC4_SetConfig+0x84>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a16      	ldr	r2, [pc, #88]	; (8006fec <TIM_OC4_SetConfig+0xc8>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d007      	beq.n	8006fa8 <TIM_OC4_SetConfig+0x84>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a15      	ldr	r2, [pc, #84]	; (8006ff0 <TIM_OC4_SetConfig+0xcc>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d003      	beq.n	8006fa8 <TIM_OC4_SetConfig+0x84>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a14      	ldr	r2, [pc, #80]	; (8006ff4 <TIM_OC4_SetConfig+0xd0>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d109      	bne.n	8006fbc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	019b      	lsls	r3, r3, #6
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	621a      	str	r2, [r3, #32]
}
 8006fd6:	bf00      	nop
 8006fd8:	371c      	adds	r7, #28
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	40012c00 	.word	0x40012c00
 8006fe8:	40013400 	.word	0x40013400
 8006fec:	40014000 	.word	0x40014000
 8006ff0:	40014400 	.word	0x40014400
 8006ff4:	40014800 	.word	0x40014800

08006ff8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800701e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800702a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	4313      	orrs	r3, r2
 8007034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800703c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	041b      	lsls	r3, r3, #16
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	4313      	orrs	r3, r2
 8007048:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a17      	ldr	r2, [pc, #92]	; (80070ac <TIM_OC5_SetConfig+0xb4>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d00f      	beq.n	8007072 <TIM_OC5_SetConfig+0x7a>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a16      	ldr	r2, [pc, #88]	; (80070b0 <TIM_OC5_SetConfig+0xb8>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d00b      	beq.n	8007072 <TIM_OC5_SetConfig+0x7a>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a15      	ldr	r2, [pc, #84]	; (80070b4 <TIM_OC5_SetConfig+0xbc>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d007      	beq.n	8007072 <TIM_OC5_SetConfig+0x7a>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a14      	ldr	r2, [pc, #80]	; (80070b8 <TIM_OC5_SetConfig+0xc0>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d003      	beq.n	8007072 <TIM_OC5_SetConfig+0x7a>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a13      	ldr	r2, [pc, #76]	; (80070bc <TIM_OC5_SetConfig+0xc4>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d109      	bne.n	8007086 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007078:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	021b      	lsls	r3, r3, #8
 8007080:	697a      	ldr	r2, [r7, #20]
 8007082:	4313      	orrs	r3, r2
 8007084:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	621a      	str	r2, [r3, #32]
}
 80070a0:	bf00      	nop
 80070a2:	371c      	adds	r7, #28
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	40012c00 	.word	0x40012c00
 80070b0:	40013400 	.word	0x40013400
 80070b4:	40014000 	.word	0x40014000
 80070b8:	40014400 	.word	0x40014400
 80070bc:	40014800 	.word	0x40014800

080070c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b087      	sub	sp, #28
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	021b      	lsls	r3, r3, #8
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007106:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	051b      	lsls	r3, r3, #20
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	4313      	orrs	r3, r2
 8007112:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a18      	ldr	r2, [pc, #96]	; (8007178 <TIM_OC6_SetConfig+0xb8>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d00f      	beq.n	800713c <TIM_OC6_SetConfig+0x7c>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a17      	ldr	r2, [pc, #92]	; (800717c <TIM_OC6_SetConfig+0xbc>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d00b      	beq.n	800713c <TIM_OC6_SetConfig+0x7c>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a16      	ldr	r2, [pc, #88]	; (8007180 <TIM_OC6_SetConfig+0xc0>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d007      	beq.n	800713c <TIM_OC6_SetConfig+0x7c>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a15      	ldr	r2, [pc, #84]	; (8007184 <TIM_OC6_SetConfig+0xc4>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d003      	beq.n	800713c <TIM_OC6_SetConfig+0x7c>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a14      	ldr	r2, [pc, #80]	; (8007188 <TIM_OC6_SetConfig+0xc8>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d109      	bne.n	8007150 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007142:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	695b      	ldr	r3, [r3, #20]
 8007148:	029b      	lsls	r3, r3, #10
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	4313      	orrs	r3, r2
 800714e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	621a      	str	r2, [r3, #32]
}
 800716a:	bf00      	nop
 800716c:	371c      	adds	r7, #28
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	40012c00 	.word	0x40012c00
 800717c:	40013400 	.word	0x40013400
 8007180:	40014000 	.word	0x40014000
 8007184:	40014400 	.word	0x40014400
 8007188:	40014800 	.word	0x40014800

0800718c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6a1b      	ldr	r3, [r3, #32]
 800719c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	f023 0201 	bic.w	r2, r3, #1
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	011b      	lsls	r3, r3, #4
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	4313      	orrs	r3, r2
 80071c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	f023 030a 	bic.w	r3, r3, #10
 80071c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	621a      	str	r2, [r3, #32]
}
 80071de:	bf00      	nop
 80071e0:	371c      	adds	r7, #28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b087      	sub	sp, #28
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	60f8      	str	r0, [r7, #12]
 80071f2:	60b9      	str	r1, [r7, #8]
 80071f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	f023 0210 	bic.w	r2, r3, #16
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6a1b      	ldr	r3, [r3, #32]
 800720c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007214:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	031b      	lsls	r3, r3, #12
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	4313      	orrs	r3, r2
 800721e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007226:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	011b      	lsls	r3, r3, #4
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	4313      	orrs	r3, r2
 8007230:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	621a      	str	r2, [r3, #32]
}
 800723e:	bf00      	nop
 8007240:	371c      	adds	r7, #28
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800724a:	b480      	push	{r7}
 800724c:	b085      	sub	sp, #20
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
 8007252:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007260:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	4313      	orrs	r3, r2
 8007268:	f043 0307 	orr.w	r3, r3, #7
 800726c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	609a      	str	r2, [r3, #8]
}
 8007274:	bf00      	nop
 8007276:	3714      	adds	r7, #20
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007280:	b480      	push	{r7}
 8007282:	b087      	sub	sp, #28
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
 800728c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800729a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	021a      	lsls	r2, r3, #8
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	431a      	orrs	r2, r3
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	609a      	str	r2, [r3, #8]
}
 80072b4:	bf00      	nop
 80072b6:	371c      	adds	r7, #28
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f003 031f 	and.w	r3, r3, #31
 80072d2:	2201      	movs	r2, #1
 80072d4:	fa02 f303 	lsl.w	r3, r2, r3
 80072d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6a1a      	ldr	r2, [r3, #32]
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	43db      	mvns	r3, r3
 80072e2:	401a      	ands	r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6a1a      	ldr	r2, [r3, #32]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	f003 031f 	and.w	r3, r3, #31
 80072f2:	6879      	ldr	r1, [r7, #4]
 80072f4:	fa01 f303 	lsl.w	r3, r1, r3
 80072f8:	431a      	orrs	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	621a      	str	r2, [r3, #32]
}
 80072fe:	bf00      	nop
 8007300:	371c      	adds	r7, #28
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
	...

0800730c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800731c:	2b01      	cmp	r3, #1
 800731e:	d101      	bne.n	8007324 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007320:	2302      	movs	r3, #2
 8007322:	e063      	b.n	80073ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a2b      	ldr	r2, [pc, #172]	; (80073f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d004      	beq.n	8007358 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a2a      	ldr	r2, [pc, #168]	; (80073fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d108      	bne.n	800736a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800735e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	4313      	orrs	r3, r2
 8007368:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007370:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	4313      	orrs	r3, r2
 800737a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a1b      	ldr	r2, [pc, #108]	; (80073f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d018      	beq.n	80073c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007396:	d013      	beq.n	80073c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a18      	ldr	r2, [pc, #96]	; (8007400 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d00e      	beq.n	80073c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a17      	ldr	r2, [pc, #92]	; (8007404 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d009      	beq.n	80073c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a12      	ldr	r2, [pc, #72]	; (80073fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d004      	beq.n	80073c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a13      	ldr	r2, [pc, #76]	; (8007408 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d10c      	bne.n	80073da <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3714      	adds	r7, #20
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr
 80073f8:	40012c00 	.word	0x40012c00
 80073fc:	40013400 	.word	0x40013400
 8007400:	40000400 	.word	0x40000400
 8007404:	40000800 	.word	0x40000800
 8007408:	40014000 	.word	0x40014000

0800740c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007428:	bf00      	nop
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007458:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800745c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	b29a      	uxth	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007476:	b480      	push	{r7}
 8007478:	b085      	sub	sp, #20
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800747e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007482:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800748a:	b29a      	uxth	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	b29b      	uxth	r3, r3
 8007490:	43db      	mvns	r3, r3
 8007492:	b29b      	uxth	r3, r3
 8007494:	4013      	ands	r3, r2
 8007496:	b29a      	uxth	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80074ac:	b084      	sub	sp, #16
 80074ae:	b480      	push	{r7}
 80074b0:	b083      	sub	sp, #12
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	f107 0014 	add.w	r0, r7, #20
 80074ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	b004      	add	sp, #16
 80074ec:	4770      	bx	lr
	...

080074f0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b09d      	sub	sp, #116	; 0x74
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80074fa:	2300      	movs	r3, #0
 80074fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	b29b      	uxth	r3, r3
 800750e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007516:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	78db      	ldrb	r3, [r3, #3]
 800751e:	2b03      	cmp	r3, #3
 8007520:	d81f      	bhi.n	8007562 <USB_ActivateEndpoint+0x72>
 8007522:	a201      	add	r2, pc, #4	; (adr r2, 8007528 <USB_ActivateEndpoint+0x38>)
 8007524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007528:	08007539 	.word	0x08007539
 800752c:	08007555 	.word	0x08007555
 8007530:	0800756b 	.word	0x0800756b
 8007534:	08007547 	.word	0x08007547
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007538:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800753c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007540:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007544:	e012      	b.n	800756c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007546:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800754a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800754e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007552:	e00b      	b.n	800756c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007554:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007558:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800755c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007560:	e004      	b.n	800756c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007568:	e000      	b.n	800756c <USB_ActivateEndpoint+0x7c>
      break;
 800756a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	441a      	add	r2, r3
 8007576:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800757a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800757e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800758a:	b29b      	uxth	r3, r3
 800758c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4413      	add	r3, r2
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	b29b      	uxth	r3, r3
 800759c:	b21b      	sxth	r3, r3
 800759e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a6:	b21a      	sxth	r2, r3
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	b21b      	sxth	r3, r3
 80075ae:	4313      	orrs	r3, r2
 80075b0:	b21b      	sxth	r3, r3
 80075b2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	441a      	add	r2, r3
 80075c0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80075c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	7b1b      	ldrb	r3, [r3, #12]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f040 8178 	bne.w	80078d2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	785b      	ldrb	r3, [r3, #1]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f000 8084 	beq.w	80076f4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	61bb      	str	r3, [r7, #24]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	461a      	mov	r2, r3
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	4413      	add	r3, r2
 80075fe:	61bb      	str	r3, [r7, #24]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	011a      	lsls	r2, r3, #4
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	4413      	add	r3, r2
 800760a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800760e:	617b      	str	r3, [r7, #20]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	88db      	ldrh	r3, [r3, #6]
 8007614:	085b      	lsrs	r3, r3, #1
 8007616:	b29b      	uxth	r3, r3
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	b29a      	uxth	r2, r3
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	4413      	add	r3, r2
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	827b      	strh	r3, [r7, #18]
 800762e:	8a7b      	ldrh	r3, [r7, #18]
 8007630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007634:	2b00      	cmp	r3, #0
 8007636:	d01b      	beq.n	8007670 <USB_ActivateEndpoint+0x180>
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4413      	add	r3, r2
 8007642:	881b      	ldrh	r3, [r3, #0]
 8007644:	b29b      	uxth	r3, r3
 8007646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800764a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800764e:	823b      	strh	r3, [r7, #16]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	441a      	add	r2, r3
 800765a:	8a3b      	ldrh	r3, [r7, #16]
 800765c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007660:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007668:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800766c:	b29b      	uxth	r3, r3
 800766e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	78db      	ldrb	r3, [r3, #3]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d020      	beq.n	80076ba <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4413      	add	r3, r2
 8007682:	881b      	ldrh	r3, [r3, #0]
 8007684:	b29b      	uxth	r3, r3
 8007686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800768a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800768e:	81bb      	strh	r3, [r7, #12]
 8007690:	89bb      	ldrh	r3, [r7, #12]
 8007692:	f083 0320 	eor.w	r3, r3, #32
 8007696:	81bb      	strh	r3, [r7, #12]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	441a      	add	r2, r3
 80076a2:	89bb      	ldrh	r3, [r7, #12]
 80076a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	8013      	strh	r3, [r2, #0]
 80076b8:	e2d5      	b.n	8007c66 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4413      	add	r3, r2
 80076c4:	881b      	ldrh	r3, [r3, #0]
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076d0:	81fb      	strh	r3, [r7, #14]
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	441a      	add	r2, r3
 80076dc:	89fb      	ldrh	r3, [r7, #14]
 80076de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	8013      	strh	r3, [r2, #0]
 80076f2:	e2b8      	b.n	8007c66 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	633b      	str	r3, [r7, #48]	; 0x30
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076fe:	b29b      	uxth	r3, r3
 8007700:	461a      	mov	r2, r3
 8007702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007704:	4413      	add	r3, r2
 8007706:	633b      	str	r3, [r7, #48]	; 0x30
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	011a      	lsls	r2, r3, #4
 800770e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007710:	4413      	add	r3, r2
 8007712:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007716:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	88db      	ldrh	r3, [r3, #6]
 800771c:	085b      	lsrs	r3, r3, #1
 800771e:	b29b      	uxth	r3, r3
 8007720:	005b      	lsls	r3, r3, #1
 8007722:	b29a      	uxth	r2, r3
 8007724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007726:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	62bb      	str	r3, [r7, #40]	; 0x28
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007732:	b29b      	uxth	r3, r3
 8007734:	461a      	mov	r2, r3
 8007736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007738:	4413      	add	r3, r2
 800773a:	62bb      	str	r3, [r7, #40]	; 0x28
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	011a      	lsls	r2, r3, #4
 8007742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007744:	4413      	add	r3, r2
 8007746:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800774a:	627b      	str	r3, [r7, #36]	; 0x24
 800774c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774e:	881b      	ldrh	r3, [r3, #0]
 8007750:	b29b      	uxth	r3, r3
 8007752:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007756:	b29a      	uxth	r2, r3
 8007758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775a:	801a      	strh	r2, [r3, #0]
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	2b3e      	cmp	r3, #62	; 0x3e
 8007762:	d91d      	bls.n	80077a0 <USB_ActivateEndpoint+0x2b0>
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	095b      	lsrs	r3, r3, #5
 800776a:	66bb      	str	r3, [r7, #104]	; 0x68
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	f003 031f 	and.w	r3, r3, #31
 8007774:	2b00      	cmp	r3, #0
 8007776:	d102      	bne.n	800777e <USB_ActivateEndpoint+0x28e>
 8007778:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800777a:	3b01      	subs	r3, #1
 800777c:	66bb      	str	r3, [r7, #104]	; 0x68
 800777e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007780:	881b      	ldrh	r3, [r3, #0]
 8007782:	b29a      	uxth	r2, r3
 8007784:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007786:	b29b      	uxth	r3, r3
 8007788:	029b      	lsls	r3, r3, #10
 800778a:	b29b      	uxth	r3, r3
 800778c:	4313      	orrs	r3, r2
 800778e:	b29b      	uxth	r3, r3
 8007790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007798:	b29a      	uxth	r2, r3
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	801a      	strh	r2, [r3, #0]
 800779e:	e026      	b.n	80077ee <USB_ActivateEndpoint+0x2fe>
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10a      	bne.n	80077be <USB_ActivateEndpoint+0x2ce>
 80077a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077aa:	881b      	ldrh	r3, [r3, #0]
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	801a      	strh	r2, [r3, #0]
 80077bc:	e017      	b.n	80077ee <USB_ActivateEndpoint+0x2fe>
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	085b      	lsrs	r3, r3, #1
 80077c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d002      	beq.n	80077d8 <USB_ActivateEndpoint+0x2e8>
 80077d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077d4:	3301      	adds	r3, #1
 80077d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	881b      	ldrh	r3, [r3, #0]
 80077dc:	b29a      	uxth	r2, r3
 80077de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	029b      	lsls	r3, r3, #10
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	4313      	orrs	r3, r2
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4413      	add	r3, r2
 80077f8:	881b      	ldrh	r3, [r3, #0]
 80077fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80077fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80077fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007802:	2b00      	cmp	r3, #0
 8007804:	d01b      	beq.n	800783e <USB_ActivateEndpoint+0x34e>
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	4413      	add	r3, r2
 8007810:	881b      	ldrh	r3, [r3, #0]
 8007812:	b29b      	uxth	r3, r3
 8007814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800781c:	843b      	strh	r3, [r7, #32]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	441a      	add	r2, r3
 8007828:	8c3b      	ldrh	r3, [r7, #32]
 800782a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800782e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007832:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800783a:	b29b      	uxth	r3, r3
 800783c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d124      	bne.n	8007890 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	4413      	add	r3, r2
 8007850:	881b      	ldrh	r3, [r3, #0]
 8007852:	b29b      	uxth	r3, r3
 8007854:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800785c:	83bb      	strh	r3, [r7, #28]
 800785e:	8bbb      	ldrh	r3, [r7, #28]
 8007860:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007864:	83bb      	strh	r3, [r7, #28]
 8007866:	8bbb      	ldrh	r3, [r7, #28]
 8007868:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800786c:	83bb      	strh	r3, [r7, #28]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	441a      	add	r2, r3
 8007878:	8bbb      	ldrh	r3, [r7, #28]
 800787a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800787e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800788a:	b29b      	uxth	r3, r3
 800788c:	8013      	strh	r3, [r2, #0]
 800788e:	e1ea      	b.n	8007c66 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	b29b      	uxth	r3, r3
 800789e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a6:	83fb      	strh	r3, [r7, #30]
 80078a8:	8bfb      	ldrh	r3, [r7, #30]
 80078aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80078ae:	83fb      	strh	r3, [r7, #30]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	441a      	add	r2, r3
 80078ba:	8bfb      	ldrh	r3, [r7, #30]
 80078bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	8013      	strh	r3, [r2, #0]
 80078d0:	e1c9      	b.n	8007c66 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	78db      	ldrb	r3, [r3, #3]
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d11e      	bne.n	8007918 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	4413      	add	r3, r2
 80078e4:	881b      	ldrh	r3, [r3, #0]
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	441a      	add	r2, r3
 80078fe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800790a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800790e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007912:	b29b      	uxth	r3, r3
 8007914:	8013      	strh	r3, [r2, #0]
 8007916:	e01d      	b.n	8007954 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4413      	add	r3, r2
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	b29b      	uxth	r3, r3
 8007926:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800792a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800792e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	441a      	add	r2, r3
 800793c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800794c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007950:	b29b      	uxth	r3, r3
 8007952:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800795e:	b29b      	uxth	r3, r3
 8007960:	461a      	mov	r2, r3
 8007962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007964:	4413      	add	r3, r2
 8007966:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	011a      	lsls	r2, r3, #4
 800796e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007970:	4413      	add	r3, r2
 8007972:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007976:	65bb      	str	r3, [r7, #88]	; 0x58
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	891b      	ldrh	r3, [r3, #8]
 800797c:	085b      	lsrs	r3, r3, #1
 800797e:	b29b      	uxth	r3, r3
 8007980:	005b      	lsls	r3, r3, #1
 8007982:	b29a      	uxth	r2, r3
 8007984:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007986:	801a      	strh	r2, [r3, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	657b      	str	r3, [r7, #84]	; 0x54
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007992:	b29b      	uxth	r3, r3
 8007994:	461a      	mov	r2, r3
 8007996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007998:	4413      	add	r3, r2
 800799a:	657b      	str	r3, [r7, #84]	; 0x54
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	011a      	lsls	r2, r3, #4
 80079a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079a4:	4413      	add	r3, r2
 80079a6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80079aa:	653b      	str	r3, [r7, #80]	; 0x50
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	895b      	ldrh	r3, [r3, #10]
 80079b0:	085b      	lsrs	r3, r3, #1
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	005b      	lsls	r3, r3, #1
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079ba:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	785b      	ldrb	r3, [r3, #1]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f040 8093 	bne.w	8007aec <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4413      	add	r3, r2
 80079d0:	881b      	ldrh	r3, [r3, #0]
 80079d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80079d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80079da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d01b      	beq.n	8007a1a <USB_ActivateEndpoint+0x52a>
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	881b      	ldrh	r3, [r3, #0]
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	441a      	add	r2, r3
 8007a04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4413      	add	r3, r2
 8007a24:	881b      	ldrh	r3, [r3, #0]
 8007a26:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007a28:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d01b      	beq.n	8007a6a <USB_ActivateEndpoint+0x57a>
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4413      	add	r3, r2
 8007a3c:	881b      	ldrh	r3, [r3, #0]
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a48:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	441a      	add	r2, r3
 8007a54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	4413      	add	r3, r2
 8007a74:	881b      	ldrh	r3, [r3, #0]
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a80:	873b      	strh	r3, [r7, #56]	; 0x38
 8007a82:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007a84:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a88:	873b      	strh	r3, [r7, #56]	; 0x38
 8007a8a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007a8c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a90:	873b      	strh	r3, [r7, #56]	; 0x38
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	441a      	add	r2, r3
 8007a9c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007a9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	4413      	add	r3, r2
 8007abc:	881b      	ldrh	r3, [r3, #0]
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ac8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	441a      	add	r2, r3
 8007ad4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	8013      	strh	r3, [r2, #0]
 8007aea:	e0bc      	b.n	8007c66 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	4413      	add	r3, r2
 8007af6:	881b      	ldrh	r3, [r3, #0]
 8007af8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007afc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d01d      	beq.n	8007b44 <USB_ActivateEndpoint+0x654>
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4413      	add	r3, r2
 8007b12:	881b      	ldrh	r3, [r3, #0]
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b1e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	441a      	add	r2, r3
 8007b2c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007b30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4413      	add	r3, r2
 8007b4e:	881b      	ldrh	r3, [r3, #0]
 8007b50:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007b54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d01d      	beq.n	8007b9c <USB_ActivateEndpoint+0x6ac>
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	881b      	ldrh	r3, [r3, #0]
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b76:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	441a      	add	r2, r3
 8007b84:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	78db      	ldrb	r3, [r3, #3]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d024      	beq.n	8007bee <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	4413      	add	r3, r2
 8007bae:	881b      	ldrh	r3, [r3, #0]
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007bbe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007bc2:	f083 0320 	eor.w	r3, r3, #32
 8007bc6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	441a      	add	r2, r3
 8007bd4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007bd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	8013      	strh	r3, [r2, #0]
 8007bec:	e01d      	b.n	8007c2a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	881b      	ldrh	r3, [r3, #0]
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c04:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	441a      	add	r2, r3
 8007c12:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	441a      	add	r2, r3
 8007c4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007c66:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3774      	adds	r7, #116	; 0x74
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop

08007c78 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b08d      	sub	sp, #52	; 0x34
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	7b1b      	ldrb	r3, [r3, #12]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f040 808e 	bne.w	8007da8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	785b      	ldrb	r3, [r3, #1]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d044      	beq.n	8007d1e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	81bb      	strh	r3, [r7, #12]
 8007ca2:	89bb      	ldrh	r3, [r7, #12]
 8007ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d01b      	beq.n	8007ce4 <USB_DeactivateEndpoint+0x6c>
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4413      	add	r3, r2
 8007cb6:	881b      	ldrh	r3, [r3, #0]
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cc2:	817b      	strh	r3, [r7, #10]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	441a      	add	r2, r3
 8007cce:	897b      	ldrh	r3, [r7, #10]
 8007cd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cdc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	4413      	add	r3, r2
 8007cee:	881b      	ldrh	r3, [r3, #0]
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cfa:	813b      	strh	r3, [r7, #8]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	441a      	add	r2, r3
 8007d06:	893b      	ldrh	r3, [r7, #8]
 8007d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	8013      	strh	r3, [r2, #0]
 8007d1c:	e192      	b.n	8008044 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	4413      	add	r3, r2
 8007d28:	881b      	ldrh	r3, [r3, #0]
 8007d2a:	827b      	strh	r3, [r7, #18]
 8007d2c:	8a7b      	ldrh	r3, [r7, #18]
 8007d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d01b      	beq.n	8007d6e <USB_DeactivateEndpoint+0xf6>
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	4413      	add	r3, r2
 8007d40:	881b      	ldrh	r3, [r3, #0]
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d4c:	823b      	strh	r3, [r7, #16]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	441a      	add	r2, r3
 8007d58:	8a3b      	ldrh	r3, [r7, #16]
 8007d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	4413      	add	r3, r2
 8007d78:	881b      	ldrh	r3, [r3, #0]
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d84:	81fb      	strh	r3, [r7, #14]
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	441a      	add	r2, r3
 8007d90:	89fb      	ldrh	r3, [r7, #14]
 8007d92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	8013      	strh	r3, [r2, #0]
 8007da6:	e14d      	b.n	8008044 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	785b      	ldrb	r3, [r3, #1]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f040 80a5 	bne.w	8007efc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	4413      	add	r3, r2
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	843b      	strh	r3, [r7, #32]
 8007dc0:	8c3b      	ldrh	r3, [r7, #32]
 8007dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d01b      	beq.n	8007e02 <USB_DeactivateEndpoint+0x18a>
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4413      	add	r3, r2
 8007dd4:	881b      	ldrh	r3, [r3, #0]
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007de0:	83fb      	strh	r3, [r7, #30]
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	441a      	add	r2, r3
 8007dec:	8bfb      	ldrh	r3, [r7, #30]
 8007dee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007df2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007df6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	4413      	add	r3, r2
 8007e0c:	881b      	ldrh	r3, [r3, #0]
 8007e0e:	83bb      	strh	r3, [r7, #28]
 8007e10:	8bbb      	ldrh	r3, [r7, #28]
 8007e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d01b      	beq.n	8007e52 <USB_DeactivateEndpoint+0x1da>
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4413      	add	r3, r2
 8007e24:	881b      	ldrh	r3, [r3, #0]
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e30:	837b      	strh	r3, [r7, #26]
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	441a      	add	r2, r3
 8007e3c:	8b7b      	ldrh	r3, [r7, #26]
 8007e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	881b      	ldrh	r3, [r3, #0]
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e68:	833b      	strh	r3, [r7, #24]
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	441a      	add	r2, r3
 8007e74:	8b3b      	ldrh	r3, [r7, #24]
 8007e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4413      	add	r3, r2
 8007e94:	881b      	ldrh	r3, [r3, #0]
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ea0:	82fb      	strh	r3, [r7, #22]
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	441a      	add	r2, r3
 8007eac:	8afb      	ldrh	r3, [r7, #22]
 8007eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	881b      	ldrh	r3, [r3, #0]
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ed4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ed8:	82bb      	strh	r3, [r7, #20]
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	441a      	add	r2, r3
 8007ee4:	8abb      	ldrh	r3, [r7, #20]
 8007ee6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	8013      	strh	r3, [r2, #0]
 8007efa:	e0a3      	b.n	8008044 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	881b      	ldrh	r3, [r3, #0]
 8007f08:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007f0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007f0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d01b      	beq.n	8007f4c <USB_DeactivateEndpoint+0x2d4>
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4413      	add	r3, r2
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f2a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	441a      	add	r2, r3
 8007f36:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007f38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	4413      	add	r3, r2
 8007f56:	881b      	ldrh	r3, [r3, #0]
 8007f58:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007f5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d01b      	beq.n	8007f9c <USB_DeactivateEndpoint+0x324>
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	881b      	ldrh	r3, [r3, #0]
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f7a:	853b      	strh	r3, [r7, #40]	; 0x28
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	441a      	add	r2, r3
 8007f86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	4413      	add	r3, r2
 8007fa6:	881b      	ldrh	r3, [r3, #0]
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fb2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	441a      	add	r2, r3
 8007fbe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007fc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4413      	add	r3, r2
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fea:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	441a      	add	r2, r3
 8007ff6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ffc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008008:	b29b      	uxth	r3, r3
 800800a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	881b      	ldrh	r3, [r3, #0]
 8008018:	b29b      	uxth	r3, r3
 800801a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800801e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008022:	847b      	strh	r3, [r7, #34]	; 0x22
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	441a      	add	r2, r3
 800802e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008038:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800803c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008040:	b29b      	uxth	r3, r3
 8008042:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3734      	adds	r7, #52	; 0x34
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr

08008052 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b0c2      	sub	sp, #264	; 0x108
 8008056:	af00      	add	r7, sp, #0
 8008058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800805c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008060:	6018      	str	r0, [r3, #0]
 8008062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800806a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800806c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008070:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	785b      	ldrb	r3, [r3, #1]
 8008078:	2b01      	cmp	r3, #1
 800807a:	f040 86b7 	bne.w	8008dec <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800807e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	699a      	ldr	r2, [r3, #24]
 800808a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800808e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	429a      	cmp	r2, r3
 8008098:	d908      	bls.n	80080ac <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800809a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800809e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80080aa:	e007      	b.n	80080bc <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80080ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80080bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	7b1b      	ldrb	r3, [r3, #12]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d13a      	bne.n	8008142 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80080cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	6959      	ldr	r1, [r3, #20]
 80080d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	88da      	ldrh	r2, [r3, #6]
 80080e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80080ee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80080f2:	6800      	ldr	r0, [r0, #0]
 80080f4:	f001 fc8c 	bl	8009a10 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80080f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	613b      	str	r3, [r7, #16]
 8008104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008108:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008112:	b29b      	uxth	r3, r3
 8008114:	461a      	mov	r2, r3
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	4413      	add	r3, r2
 800811a:	613b      	str	r3, [r7, #16]
 800811c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	011a      	lsls	r2, r3, #4
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	4413      	add	r3, r2
 800812e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008132:	60fb      	str	r3, [r7, #12]
 8008134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008138:	b29a      	uxth	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	801a      	strh	r2, [r3, #0]
 800813e:	f000 be1f 	b.w	8008d80 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	78db      	ldrb	r3, [r3, #3]
 800814e:	2b02      	cmp	r3, #2
 8008150:	f040 8462 	bne.w	8008a18 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	6a1a      	ldr	r2, [r3, #32]
 8008160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	429a      	cmp	r2, r3
 800816e:	f240 83df 	bls.w	8008930 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008176:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	4413      	add	r3, r2
 800818c:	881b      	ldrh	r3, [r3, #0]
 800818e:	b29b      	uxth	r3, r3
 8008190:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008198:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800819c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	441a      	add	r2, r3
 80081b6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80081ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081c2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80081c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80081ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	6a1a      	ldr	r2, [r3, #32]
 80081da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081de:	1ad2      	subs	r2, r2, r3
 80081e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80081ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4413      	add	r3, r2
 8008206:	881b      	ldrh	r3, [r3, #0]
 8008208:	b29b      	uxth	r3, r3
 800820a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800820e:	2b00      	cmp	r3, #0
 8008210:	f000 81c7 	beq.w	80085a2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008218:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	633b      	str	r3, [r7, #48]	; 0x30
 8008220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	785b      	ldrb	r3, [r3, #1]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d177      	bne.n	8008320 <USB_EPStartXfer+0x2ce>
 8008230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008234:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	62bb      	str	r3, [r7, #40]	; 0x28
 800823c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008240:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800824a:	b29b      	uxth	r3, r3
 800824c:	461a      	mov	r2, r3
 800824e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008250:	4413      	add	r3, r2
 8008252:	62bb      	str	r3, [r7, #40]	; 0x28
 8008254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008258:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	011a      	lsls	r2, r3, #4
 8008262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008264:	4413      	add	r3, r2
 8008266:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800826a:	627b      	str	r3, [r7, #36]	; 0x24
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826e:	881b      	ldrh	r3, [r3, #0]
 8008270:	b29b      	uxth	r3, r3
 8008272:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008276:	b29a      	uxth	r2, r3
 8008278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827a:	801a      	strh	r2, [r3, #0]
 800827c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008280:	2b3e      	cmp	r3, #62	; 0x3e
 8008282:	d921      	bls.n	80082c8 <USB_EPStartXfer+0x276>
 8008284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008288:	095b      	lsrs	r3, r3, #5
 800828a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800828e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008292:	f003 031f 	and.w	r3, r3, #31
 8008296:	2b00      	cmp	r3, #0
 8008298:	d104      	bne.n	80082a4 <USB_EPStartXfer+0x252>
 800829a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800829e:	3b01      	subs	r3, #1
 80082a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80082a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a6:	881b      	ldrh	r3, [r3, #0]
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	029b      	lsls	r3, r3, #10
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	4313      	orrs	r3, r2
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c4:	801a      	strh	r2, [r3, #0]
 80082c6:	e050      	b.n	800836a <USB_EPStartXfer+0x318>
 80082c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d10a      	bne.n	80082e6 <USB_EPStartXfer+0x294>
 80082d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d2:	881b      	ldrh	r3, [r3, #0]
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082de:	b29a      	uxth	r2, r3
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	801a      	strh	r2, [r3, #0]
 80082e4:	e041      	b.n	800836a <USB_EPStartXfer+0x318>
 80082e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ea:	085b      	lsrs	r3, r3, #1
 80082ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80082f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082f4:	f003 0301 	and.w	r3, r3, #1
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d004      	beq.n	8008306 <USB_EPStartXfer+0x2b4>
 80082fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008300:	3301      	adds	r3, #1
 8008302:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008308:	881b      	ldrh	r3, [r3, #0]
 800830a:	b29a      	uxth	r2, r3
 800830c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008310:	b29b      	uxth	r3, r3
 8008312:	029b      	lsls	r3, r3, #10
 8008314:	b29b      	uxth	r3, r3
 8008316:	4313      	orrs	r3, r2
 8008318:	b29a      	uxth	r2, r3
 800831a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831c:	801a      	strh	r2, [r3, #0]
 800831e:	e024      	b.n	800836a <USB_EPStartXfer+0x318>
 8008320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	785b      	ldrb	r3, [r3, #1]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d11c      	bne.n	800836a <USB_EPStartXfer+0x318>
 8008330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008334:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800833e:	b29b      	uxth	r3, r3
 8008340:	461a      	mov	r2, r3
 8008342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008344:	4413      	add	r3, r2
 8008346:	633b      	str	r3, [r7, #48]	; 0x30
 8008348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800834c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	011a      	lsls	r2, r3, #4
 8008356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008358:	4413      	add	r3, r2
 800835a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800835e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008364:	b29a      	uxth	r2, r3
 8008366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008368:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800836a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800836e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	895b      	ldrh	r3, [r3, #10]
 8008376:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800837a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800837e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	6959      	ldr	r1, [r3, #20]
 8008386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800838a:	b29b      	uxth	r3, r3
 800838c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008390:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008394:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008398:	6800      	ldr	r0, [r0, #0]
 800839a:	f001 fb39 	bl	8009a10 <USB_WritePMA>
            ep->xfer_buff += len;
 800839e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	695a      	ldr	r2, [r3, #20]
 80083aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ae:	441a      	add	r2, r3
 80083b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80083bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	6a1a      	ldr	r2, [r3, #32]
 80083c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d90f      	bls.n	80083f8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80083d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	6a1a      	ldr	r2, [r3, #32]
 80083e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083e8:	1ad2      	subs	r2, r2, r3
 80083ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	621a      	str	r2, [r3, #32]
 80083f6:	e00e      	b.n	8008416 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80083f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	6a1b      	ldr	r3, [r3, #32]
 8008404:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800840c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2200      	movs	r2, #0
 8008414:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800841a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	785b      	ldrb	r3, [r3, #1]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d177      	bne.n	8008516 <USB_EPStartXfer+0x4c4>
 8008426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800842a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	61bb      	str	r3, [r7, #24]
 8008432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008436:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008440:	b29b      	uxth	r3, r3
 8008442:	461a      	mov	r2, r3
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	4413      	add	r3, r2
 8008448:	61bb      	str	r3, [r7, #24]
 800844a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800844e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	011a      	lsls	r2, r3, #4
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	4413      	add	r3, r2
 800845c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008460:	617b      	str	r3, [r7, #20]
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	881b      	ldrh	r3, [r3, #0]
 8008466:	b29b      	uxth	r3, r3
 8008468:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800846c:	b29a      	uxth	r2, r3
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	801a      	strh	r2, [r3, #0]
 8008472:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008476:	2b3e      	cmp	r3, #62	; 0x3e
 8008478:	d921      	bls.n	80084be <USB_EPStartXfer+0x46c>
 800847a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800847e:	095b      	lsrs	r3, r3, #5
 8008480:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008488:	f003 031f 	and.w	r3, r3, #31
 800848c:	2b00      	cmp	r3, #0
 800848e:	d104      	bne.n	800849a <USB_EPStartXfer+0x448>
 8008490:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008494:	3b01      	subs	r3, #1
 8008496:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	881b      	ldrh	r3, [r3, #0]
 800849e:	b29a      	uxth	r2, r3
 80084a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	029b      	lsls	r3, r3, #10
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	4313      	orrs	r3, r2
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	801a      	strh	r2, [r3, #0]
 80084bc:	e056      	b.n	800856c <USB_EPStartXfer+0x51a>
 80084be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10a      	bne.n	80084dc <USB_EPStartXfer+0x48a>
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	881b      	ldrh	r3, [r3, #0]
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	801a      	strh	r2, [r3, #0]
 80084da:	e047      	b.n	800856c <USB_EPStartXfer+0x51a>
 80084dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084e0:	085b      	lsrs	r3, r3, #1
 80084e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80084e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084ea:	f003 0301 	and.w	r3, r3, #1
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d004      	beq.n	80084fc <USB_EPStartXfer+0x4aa>
 80084f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084f6:	3301      	adds	r3, #1
 80084f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	881b      	ldrh	r3, [r3, #0]
 8008500:	b29a      	uxth	r2, r3
 8008502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008506:	b29b      	uxth	r3, r3
 8008508:	029b      	lsls	r3, r3, #10
 800850a:	b29b      	uxth	r3, r3
 800850c:	4313      	orrs	r3, r2
 800850e:	b29a      	uxth	r2, r3
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	801a      	strh	r2, [r3, #0]
 8008514:	e02a      	b.n	800856c <USB_EPStartXfer+0x51a>
 8008516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800851a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	785b      	ldrb	r3, [r3, #1]
 8008522:	2b01      	cmp	r3, #1
 8008524:	d122      	bne.n	800856c <USB_EPStartXfer+0x51a>
 8008526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800852a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	623b      	str	r3, [r7, #32]
 8008532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008536:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008540:	b29b      	uxth	r3, r3
 8008542:	461a      	mov	r2, r3
 8008544:	6a3b      	ldr	r3, [r7, #32]
 8008546:	4413      	add	r3, r2
 8008548:	623b      	str	r3, [r7, #32]
 800854a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800854e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	011a      	lsls	r2, r3, #4
 8008558:	6a3b      	ldr	r3, [r7, #32]
 800855a:	4413      	add	r3, r2
 800855c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008560:	61fb      	str	r3, [r7, #28]
 8008562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008566:	b29a      	uxth	r2, r3
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800856c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	891b      	ldrh	r3, [r3, #8]
 8008578:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800857c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	6959      	ldr	r1, [r3, #20]
 8008588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800858c:	b29b      	uxth	r3, r3
 800858e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008592:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008596:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800859a:	6800      	ldr	r0, [r0, #0]
 800859c:	f001 fa38 	bl	8009a10 <USB_WritePMA>
 80085a0:	e3ee      	b.n	8008d80 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80085a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	785b      	ldrb	r3, [r3, #1]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d177      	bne.n	80086a2 <USB_EPStartXfer+0x650>
 80085b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80085be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	461a      	mov	r2, r3
 80085d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085d2:	4413      	add	r3, r2
 80085d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80085d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	011a      	lsls	r2, r3, #4
 80085e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085e6:	4413      	add	r3, r2
 80085e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80085ec:	647b      	str	r3, [r7, #68]	; 0x44
 80085ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085f0:	881b      	ldrh	r3, [r3, #0]
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085fc:	801a      	strh	r2, [r3, #0]
 80085fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008602:	2b3e      	cmp	r3, #62	; 0x3e
 8008604:	d921      	bls.n	800864a <USB_EPStartXfer+0x5f8>
 8008606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800860a:	095b      	lsrs	r3, r3, #5
 800860c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008614:	f003 031f 	and.w	r3, r3, #31
 8008618:	2b00      	cmp	r3, #0
 800861a:	d104      	bne.n	8008626 <USB_EPStartXfer+0x5d4>
 800861c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008620:	3b01      	subs	r3, #1
 8008622:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008628:	881b      	ldrh	r3, [r3, #0]
 800862a:	b29a      	uxth	r2, r3
 800862c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008630:	b29b      	uxth	r3, r3
 8008632:	029b      	lsls	r3, r3, #10
 8008634:	b29b      	uxth	r3, r3
 8008636:	4313      	orrs	r3, r2
 8008638:	b29b      	uxth	r3, r3
 800863a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800863e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008642:	b29a      	uxth	r2, r3
 8008644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008646:	801a      	strh	r2, [r3, #0]
 8008648:	e056      	b.n	80086f8 <USB_EPStartXfer+0x6a6>
 800864a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800864e:	2b00      	cmp	r3, #0
 8008650:	d10a      	bne.n	8008668 <USB_EPStartXfer+0x616>
 8008652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008654:	881b      	ldrh	r3, [r3, #0]
 8008656:	b29b      	uxth	r3, r3
 8008658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800865c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008660:	b29a      	uxth	r2, r3
 8008662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008664:	801a      	strh	r2, [r3, #0]
 8008666:	e047      	b.n	80086f8 <USB_EPStartXfer+0x6a6>
 8008668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800866c:	085b      	lsrs	r3, r3, #1
 800866e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008676:	f003 0301 	and.w	r3, r3, #1
 800867a:	2b00      	cmp	r3, #0
 800867c:	d004      	beq.n	8008688 <USB_EPStartXfer+0x636>
 800867e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008682:	3301      	adds	r3, #1
 8008684:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800868a:	881b      	ldrh	r3, [r3, #0]
 800868c:	b29a      	uxth	r2, r3
 800868e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008692:	b29b      	uxth	r3, r3
 8008694:	029b      	lsls	r3, r3, #10
 8008696:	b29b      	uxth	r3, r3
 8008698:	4313      	orrs	r3, r2
 800869a:	b29a      	uxth	r2, r3
 800869c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800869e:	801a      	strh	r2, [r3, #0]
 80086a0:	e02a      	b.n	80086f8 <USB_EPStartXfer+0x6a6>
 80086a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	785b      	ldrb	r3, [r3, #1]
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d122      	bne.n	80086f8 <USB_EPStartXfer+0x6a6>
 80086b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	653b      	str	r3, [r7, #80]	; 0x50
 80086be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	461a      	mov	r2, r3
 80086d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086d2:	4413      	add	r3, r2
 80086d4:	653b      	str	r3, [r7, #80]	; 0x50
 80086d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	011a      	lsls	r2, r3, #4
 80086e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086e6:	4413      	add	r3, r2
 80086e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80086ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80086f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	891b      	ldrh	r3, [r3, #8]
 8008704:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800870c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	6959      	ldr	r1, [r3, #20]
 8008714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008718:	b29b      	uxth	r3, r3
 800871a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800871e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008722:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008726:	6800      	ldr	r0, [r0, #0]
 8008728:	f001 f972 	bl	8009a10 <USB_WritePMA>
            ep->xfer_buff += len;
 800872c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	695a      	ldr	r2, [r3, #20]
 8008738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800873c:	441a      	add	r2, r3
 800873e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800874a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800874e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	6a1a      	ldr	r2, [r3, #32]
 8008756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800875a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	429a      	cmp	r2, r3
 8008764:	d90f      	bls.n	8008786 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800876a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	6a1a      	ldr	r2, [r3, #32]
 8008772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008776:	1ad2      	subs	r2, r2, r3
 8008778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800877c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	621a      	str	r2, [r3, #32]
 8008784:	e00e      	b.n	80087a4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800878a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800879a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2200      	movs	r2, #0
 80087a2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80087a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	643b      	str	r3, [r7, #64]	; 0x40
 80087b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	785b      	ldrb	r3, [r3, #1]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d177      	bne.n	80088b0 <USB_EPStartXfer+0x85e>
 80087c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80087cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087da:	b29b      	uxth	r3, r3
 80087dc:	461a      	mov	r2, r3
 80087de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e0:	4413      	add	r3, r2
 80087e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80087e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	011a      	lsls	r2, r3, #4
 80087f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f4:	4413      	add	r3, r2
 80087f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80087fa:	637b      	str	r3, [r7, #52]	; 0x34
 80087fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087fe:	881b      	ldrh	r3, [r3, #0]
 8008800:	b29b      	uxth	r3, r3
 8008802:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008806:	b29a      	uxth	r2, r3
 8008808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800880a:	801a      	strh	r2, [r3, #0]
 800880c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008810:	2b3e      	cmp	r3, #62	; 0x3e
 8008812:	d921      	bls.n	8008858 <USB_EPStartXfer+0x806>
 8008814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008818:	095b      	lsrs	r3, r3, #5
 800881a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800881e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008822:	f003 031f 	and.w	r3, r3, #31
 8008826:	2b00      	cmp	r3, #0
 8008828:	d104      	bne.n	8008834 <USB_EPStartXfer+0x7e2>
 800882a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800882e:	3b01      	subs	r3, #1
 8008830:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008836:	881b      	ldrh	r3, [r3, #0]
 8008838:	b29a      	uxth	r2, r3
 800883a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800883e:	b29b      	uxth	r3, r3
 8008840:	029b      	lsls	r3, r3, #10
 8008842:	b29b      	uxth	r3, r3
 8008844:	4313      	orrs	r3, r2
 8008846:	b29b      	uxth	r3, r3
 8008848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800884c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008850:	b29a      	uxth	r2, r3
 8008852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008854:	801a      	strh	r2, [r3, #0]
 8008856:	e050      	b.n	80088fa <USB_EPStartXfer+0x8a8>
 8008858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10a      	bne.n	8008876 <USB_EPStartXfer+0x824>
 8008860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008862:	881b      	ldrh	r3, [r3, #0]
 8008864:	b29b      	uxth	r3, r3
 8008866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800886a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800886e:	b29a      	uxth	r2, r3
 8008870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008872:	801a      	strh	r2, [r3, #0]
 8008874:	e041      	b.n	80088fa <USB_EPStartXfer+0x8a8>
 8008876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800887a:	085b      	lsrs	r3, r3, #1
 800887c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008884:	f003 0301 	and.w	r3, r3, #1
 8008888:	2b00      	cmp	r3, #0
 800888a:	d004      	beq.n	8008896 <USB_EPStartXfer+0x844>
 800888c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008890:	3301      	adds	r3, #1
 8008892:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008898:	881b      	ldrh	r3, [r3, #0]
 800889a:	b29a      	uxth	r2, r3
 800889c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	029b      	lsls	r3, r3, #10
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	4313      	orrs	r3, r2
 80088a8:	b29a      	uxth	r2, r3
 80088aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ac:	801a      	strh	r2, [r3, #0]
 80088ae:	e024      	b.n	80088fa <USB_EPStartXfer+0x8a8>
 80088b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	785b      	ldrb	r3, [r3, #1]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d11c      	bne.n	80088fa <USB_EPStartXfer+0x8a8>
 80088c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	461a      	mov	r2, r3
 80088d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088d4:	4413      	add	r3, r2
 80088d6:	643b      	str	r3, [r7, #64]	; 0x40
 80088d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	011a      	lsls	r2, r3, #4
 80088e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088e8:	4413      	add	r3, r2
 80088ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80088fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	895b      	ldrh	r3, [r3, #10]
 8008906:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800890a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800890e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	6959      	ldr	r1, [r3, #20]
 8008916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800891a:	b29b      	uxth	r3, r3
 800891c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008920:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008924:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008928:	6800      	ldr	r0, [r0, #0]
 800892a:	f001 f871 	bl	8009a10 <USB_WritePMA>
 800892e:	e227      	b.n	8008d80 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	6a1b      	ldr	r3, [r3, #32]
 800893c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008944:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800894e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	4413      	add	r3, r2
 800895a:	881b      	ldrh	r3, [r3, #0]
 800895c:	b29b      	uxth	r3, r3
 800895e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008966:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800896a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800896e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	441a      	add	r2, r3
 8008984:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008988:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800898c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008998:	b29b      	uxth	r3, r3
 800899a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800899c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	461a      	mov	r2, r3
 80089ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089bc:	4413      	add	r3, r2
 80089be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	011a      	lsls	r2, r3, #4
 80089ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089d0:	4413      	add	r3, r2
 80089d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80089d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80089d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089dc:	b29a      	uxth	r2, r3
 80089de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089e0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80089e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	891b      	ldrh	r3, [r3, #8]
 80089ee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6959      	ldr	r1, [r3, #20]
 80089fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008a08:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008a0c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008a10:	6800      	ldr	r0, [r0, #0]
 8008a12:	f000 fffd 	bl	8009a10 <USB_WritePMA>
 8008a16:	e1b3      	b.n	8008d80 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	6a1a      	ldr	r2, [r3, #32]
 8008a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a28:	1ad2      	subs	r2, r2, r3
 8008a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	4413      	add	r3, r2
 8008a50:	881b      	ldrh	r3, [r3, #0]
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 80c6 	beq.w	8008bea <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	673b      	str	r3, [r7, #112]	; 0x70
 8008a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	785b      	ldrb	r3, [r3, #1]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d177      	bne.n	8008b6a <USB_EPStartXfer+0xb18>
 8008a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	461a      	mov	r2, r3
 8008a98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a9a:	4413      	add	r3, r2
 8008a9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	011a      	lsls	r2, r3, #4
 8008aac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008aae:	4413      	add	r3, r2
 8008ab0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008ab4:	667b      	str	r3, [r7, #100]	; 0x64
 8008ab6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ab8:	881b      	ldrh	r3, [r3, #0]
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ac4:	801a      	strh	r2, [r3, #0]
 8008ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aca:	2b3e      	cmp	r3, #62	; 0x3e
 8008acc:	d921      	bls.n	8008b12 <USB_EPStartXfer+0xac0>
 8008ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ad2:	095b      	lsrs	r3, r3, #5
 8008ad4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008adc:	f003 031f 	and.w	r3, r3, #31
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d104      	bne.n	8008aee <USB_EPStartXfer+0xa9c>
 8008ae4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008aee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008af0:	881b      	ldrh	r3, [r3, #0]
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	029b      	lsls	r3, r3, #10
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	4313      	orrs	r3, r2
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b0e:	801a      	strh	r2, [r3, #0]
 8008b10:	e050      	b.n	8008bb4 <USB_EPStartXfer+0xb62>
 8008b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d10a      	bne.n	8008b30 <USB_EPStartXfer+0xade>
 8008b1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b1c:	881b      	ldrh	r3, [r3, #0]
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b2c:	801a      	strh	r2, [r3, #0]
 8008b2e:	e041      	b.n	8008bb4 <USB_EPStartXfer+0xb62>
 8008b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b34:	085b      	lsrs	r3, r3, #1
 8008b36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b3e:	f003 0301 	and.w	r3, r3, #1
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d004      	beq.n	8008b50 <USB_EPStartXfer+0xafe>
 8008b46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008b50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b52:	881b      	ldrh	r3, [r3, #0]
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	029b      	lsls	r3, r3, #10
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	4313      	orrs	r3, r2
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b66:	801a      	strh	r2, [r3, #0]
 8008b68:	e024      	b.n	8008bb4 <USB_EPStartXfer+0xb62>
 8008b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	785b      	ldrb	r3, [r3, #1]
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d11c      	bne.n	8008bb4 <USB_EPStartXfer+0xb62>
 8008b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b8e:	4413      	add	r3, r2
 8008b90:	673b      	str	r3, [r7, #112]	; 0x70
 8008b92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	011a      	lsls	r2, r3, #4
 8008ba0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ba2:	4413      	add	r3, r2
 8008ba4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008ba8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bb2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	895b      	ldrh	r3, [r3, #10]
 8008bc0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	6959      	ldr	r1, [r3, #20]
 8008bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008bda:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008bde:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008be2:	6800      	ldr	r0, [r0, #0]
 8008be4:	f000 ff14 	bl	8009a10 <USB_WritePMA>
 8008be8:	e0ca      	b.n	8008d80 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	785b      	ldrb	r3, [r3, #1]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d177      	bne.n	8008cea <USB_EPStartXfer+0xc98>
 8008bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	461a      	mov	r2, r3
 8008c18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c1a:	4413      	add	r3, r2
 8008c1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	011a      	lsls	r2, r3, #4
 8008c2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c2e:	4413      	add	r3, r2
 8008c30:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c34:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c38:	881b      	ldrh	r3, [r3, #0]
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c40:	b29a      	uxth	r2, r3
 8008c42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c44:	801a      	strh	r2, [r3, #0]
 8008c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c4a:	2b3e      	cmp	r3, #62	; 0x3e
 8008c4c:	d921      	bls.n	8008c92 <USB_EPStartXfer+0xc40>
 8008c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c52:	095b      	lsrs	r3, r3, #5
 8008c54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c5c:	f003 031f 	and.w	r3, r3, #31
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d104      	bne.n	8008c6e <USB_EPStartXfer+0xc1c>
 8008c64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008c68:	3b01      	subs	r3, #1
 8008c6a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008c6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c70:	881b      	ldrh	r3, [r3, #0]
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	029b      	lsls	r3, r3, #10
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c8a:	b29a      	uxth	r2, r3
 8008c8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c8e:	801a      	strh	r2, [r3, #0]
 8008c90:	e05c      	b.n	8008d4c <USB_EPStartXfer+0xcfa>
 8008c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d10a      	bne.n	8008cb0 <USB_EPStartXfer+0xc5e>
 8008c9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c9c:	881b      	ldrh	r3, [r3, #0]
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ca8:	b29a      	uxth	r2, r3
 8008caa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cac:	801a      	strh	r2, [r3, #0]
 8008cae:	e04d      	b.n	8008d4c <USB_EPStartXfer+0xcfa>
 8008cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cb4:	085b      	lsrs	r3, r3, #1
 8008cb6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cbe:	f003 0301 	and.w	r3, r3, #1
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d004      	beq.n	8008cd0 <USB_EPStartXfer+0xc7e>
 8008cc6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008cca:	3301      	adds	r3, #1
 8008ccc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cd2:	881b      	ldrh	r3, [r3, #0]
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	029b      	lsls	r3, r3, #10
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ce6:	801a      	strh	r2, [r3, #0]
 8008ce8:	e030      	b.n	8008d4c <USB_EPStartXfer+0xcfa>
 8008cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	785b      	ldrb	r3, [r3, #1]
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d128      	bne.n	8008d4c <USB_EPStartXfer+0xcfa>
 8008cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	461a      	mov	r2, r3
 8008d1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d1e:	4413      	add	r3, r2
 8008d20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	011a      	lsls	r2, r3, #4
 8008d32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d36:	4413      	add	r3, r2
 8008d38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d4a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	891b      	ldrh	r3, [r3, #8]
 8008d58:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	6959      	ldr	r1, [r3, #20]
 8008d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008d72:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008d76:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008d7a:	6800      	ldr	r0, [r0, #0]
 8008d7c:	f000 fe48 	bl	8009a10 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	4413      	add	r3, r2
 8008d9a:	881b      	ldrh	r3, [r3, #0]
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008da2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008da6:	817b      	strh	r3, [r7, #10]
 8008da8:	897b      	ldrh	r3, [r7, #10]
 8008daa:	f083 0310 	eor.w	r3, r3, #16
 8008dae:	817b      	strh	r3, [r7, #10]
 8008db0:	897b      	ldrh	r3, [r7, #10]
 8008db2:	f083 0320 	eor.w	r3, r3, #32
 8008db6:	817b      	strh	r3, [r7, #10]
 8008db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	441a      	add	r2, r3
 8008dd2:	897b      	ldrh	r3, [r7, #10]
 8008dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	8013      	strh	r3, [r2, #0]
 8008de8:	f000 bcde 	b.w	80097a8 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	7b1b      	ldrb	r3, [r3, #12]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f040 80bb 	bne.w	8008f74 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	699a      	ldr	r2, [r3, #24]
 8008e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d917      	bls.n	8008e4a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008e2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	699a      	ldr	r2, [r3, #24]
 8008e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e3a:	1ad2      	subs	r2, r2, r3
 8008e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	619a      	str	r2, [r3, #24]
 8008e48:	e00e      	b.n	8008e68 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	699b      	ldr	r3, [r3, #24]
 8008e56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2200      	movs	r2, #0
 8008e66:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	461a      	mov	r2, r3
 8008e88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008e8c:	4413      	add	r3, r2
 8008e8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	011a      	lsls	r2, r3, #4
 8008ea0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ea4:	4413      	add	r3, r2
 8008ea6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008eaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008eae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008eb2:	881b      	ldrh	r3, [r3, #0]
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008eba:	b29a      	uxth	r2, r3
 8008ebc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ec0:	801a      	strh	r2, [r3, #0]
 8008ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ec6:	2b3e      	cmp	r3, #62	; 0x3e
 8008ec8:	d924      	bls.n	8008f14 <USB_EPStartXfer+0xec2>
 8008eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ece:	095b      	lsrs	r3, r3, #5
 8008ed0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ed8:	f003 031f 	and.w	r3, r3, #31
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d104      	bne.n	8008eea <USB_EPStartXfer+0xe98>
 8008ee0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008eee:	881b      	ldrh	r3, [r3, #0]
 8008ef0:	b29a      	uxth	r2, r3
 8008ef2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	029b      	lsls	r3, r3, #10
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	4313      	orrs	r3, r2
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f08:	b29a      	uxth	r2, r3
 8008f0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f0e:	801a      	strh	r2, [r3, #0]
 8008f10:	f000 bc10 	b.w	8009734 <USB_EPStartXfer+0x16e2>
 8008f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d10c      	bne.n	8008f36 <USB_EPStartXfer+0xee4>
 8008f1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f20:	881b      	ldrh	r3, [r3, #0]
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f2c:	b29a      	uxth	r2, r3
 8008f2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f32:	801a      	strh	r2, [r3, #0]
 8008f34:	e3fe      	b.n	8009734 <USB_EPStartXfer+0x16e2>
 8008f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f3a:	085b      	lsrs	r3, r3, #1
 8008f3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f44:	f003 0301 	and.w	r3, r3, #1
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d004      	beq.n	8008f56 <USB_EPStartXfer+0xf04>
 8008f4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008f50:	3301      	adds	r3, #1
 8008f52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008f56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f5a:	881b      	ldrh	r3, [r3, #0]
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	029b      	lsls	r3, r3, #10
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f70:	801a      	strh	r2, [r3, #0]
 8008f72:	e3df      	b.n	8009734 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	78db      	ldrb	r3, [r3, #3]
 8008f80:	2b02      	cmp	r3, #2
 8008f82:	f040 8218 	bne.w	80093b6 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	785b      	ldrb	r3, [r3, #1]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	f040 809d 	bne.w	80090d2 <USB_EPStartXfer+0x1080>
 8008f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008fa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008faa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008fbc:	4413      	add	r3, r2
 8008fbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	011a      	lsls	r2, r3, #4
 8008fd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008fd4:	4413      	add	r3, r2
 8008fd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008fda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008fde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008fe2:	881b      	ldrh	r3, [r3, #0]
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008ff0:	801a      	strh	r2, [r3, #0]
 8008ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	691b      	ldr	r3, [r3, #16]
 8008ffe:	2b3e      	cmp	r3, #62	; 0x3e
 8009000:	d92b      	bls.n	800905a <USB_EPStartXfer+0x1008>
 8009002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	691b      	ldr	r3, [r3, #16]
 800900e:	095b      	lsrs	r3, r3, #5
 8009010:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	f003 031f 	and.w	r3, r3, #31
 8009024:	2b00      	cmp	r3, #0
 8009026:	d104      	bne.n	8009032 <USB_EPStartXfer+0xfe0>
 8009028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800902c:	3b01      	subs	r3, #1
 800902e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009032:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009036:	881b      	ldrh	r3, [r3, #0]
 8009038:	b29a      	uxth	r2, r3
 800903a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800903e:	b29b      	uxth	r3, r3
 8009040:	029b      	lsls	r3, r3, #10
 8009042:	b29b      	uxth	r3, r3
 8009044:	4313      	orrs	r3, r2
 8009046:	b29b      	uxth	r3, r3
 8009048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800904c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009050:	b29a      	uxth	r2, r3
 8009052:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009056:	801a      	strh	r2, [r3, #0]
 8009058:	e070      	b.n	800913c <USB_EPStartXfer+0x10ea>
 800905a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800905e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d10c      	bne.n	8009084 <USB_EPStartXfer+0x1032>
 800906a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800906e:	881b      	ldrh	r3, [r3, #0]
 8009070:	b29b      	uxth	r3, r3
 8009072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800907a:	b29a      	uxth	r2, r3
 800907c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009080:	801a      	strh	r2, [r3, #0]
 8009082:	e05b      	b.n	800913c <USB_EPStartXfer+0x10ea>
 8009084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	085b      	lsrs	r3, r3, #1
 8009092:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800909a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	f003 0301 	and.w	r3, r3, #1
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d004      	beq.n	80090b4 <USB_EPStartXfer+0x1062>
 80090aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090ae:	3301      	adds	r3, #1
 80090b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80090b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80090b8:	881b      	ldrh	r3, [r3, #0]
 80090ba:	b29a      	uxth	r2, r3
 80090bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	029b      	lsls	r3, r3, #10
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	4313      	orrs	r3, r2
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80090ce:	801a      	strh	r2, [r3, #0]
 80090d0:	e034      	b.n	800913c <USB_EPStartXfer+0x10ea>
 80090d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	785b      	ldrb	r3, [r3, #1]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d12c      	bne.n	800913c <USB_EPStartXfer+0x10ea>
 80090e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80090f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090fe:	b29b      	uxth	r3, r3
 8009100:	461a      	mov	r2, r3
 8009102:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009106:	4413      	add	r3, r2
 8009108:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800910c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	011a      	lsls	r2, r3, #4
 800911a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800911e:	4413      	add	r3, r2
 8009120:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009124:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800912c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	b29a      	uxth	r2, r3
 8009136:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800913a:	801a      	strh	r2, [r3, #0]
 800913c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009140:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800914a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800914e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	785b      	ldrb	r3, [r3, #1]
 8009156:	2b00      	cmp	r3, #0
 8009158:	f040 809d 	bne.w	8009296 <USB_EPStartXfer+0x1244>
 800915c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009160:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800916a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800916e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009178:	b29b      	uxth	r3, r3
 800917a:	461a      	mov	r2, r3
 800917c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009180:	4413      	add	r3, r2
 8009182:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800918a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	011a      	lsls	r2, r3, #4
 8009194:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009198:	4413      	add	r3, r2
 800919a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800919e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80091a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091a6:	881b      	ldrh	r3, [r3, #0]
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091b4:	801a      	strh	r2, [r3, #0]
 80091b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	691b      	ldr	r3, [r3, #16]
 80091c2:	2b3e      	cmp	r3, #62	; 0x3e
 80091c4:	d92b      	bls.n	800921e <USB_EPStartXfer+0x11cc>
 80091c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	095b      	lsrs	r3, r3, #5
 80091d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80091d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	f003 031f 	and.w	r3, r3, #31
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d104      	bne.n	80091f6 <USB_EPStartXfer+0x11a4>
 80091ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091f0:	3b01      	subs	r3, #1
 80091f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80091f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091fa:	881b      	ldrh	r3, [r3, #0]
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009202:	b29b      	uxth	r3, r3
 8009204:	029b      	lsls	r3, r3, #10
 8009206:	b29b      	uxth	r3, r3
 8009208:	4313      	orrs	r3, r2
 800920a:	b29b      	uxth	r3, r3
 800920c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009214:	b29a      	uxth	r2, r3
 8009216:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800921a:	801a      	strh	r2, [r3, #0]
 800921c:	e069      	b.n	80092f2 <USB_EPStartXfer+0x12a0>
 800921e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009222:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10c      	bne.n	8009248 <USB_EPStartXfer+0x11f6>
 800922e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009232:	881b      	ldrh	r3, [r3, #0]
 8009234:	b29b      	uxth	r3, r3
 8009236:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800923a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800923e:	b29a      	uxth	r2, r3
 8009240:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009244:	801a      	strh	r2, [r3, #0]
 8009246:	e054      	b.n	80092f2 <USB_EPStartXfer+0x12a0>
 8009248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800924c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	085b      	lsrs	r3, r3, #1
 8009256:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800925a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800925e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	f003 0301 	and.w	r3, r3, #1
 800926a:	2b00      	cmp	r3, #0
 800926c:	d004      	beq.n	8009278 <USB_EPStartXfer+0x1226>
 800926e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009272:	3301      	adds	r3, #1
 8009274:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009278:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800927c:	881b      	ldrh	r3, [r3, #0]
 800927e:	b29a      	uxth	r2, r3
 8009280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009284:	b29b      	uxth	r3, r3
 8009286:	029b      	lsls	r3, r3, #10
 8009288:	b29b      	uxth	r3, r3
 800928a:	4313      	orrs	r3, r2
 800928c:	b29a      	uxth	r2, r3
 800928e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009292:	801a      	strh	r2, [r3, #0]
 8009294:	e02d      	b.n	80092f2 <USB_EPStartXfer+0x12a0>
 8009296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800929a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	785b      	ldrb	r3, [r3, #1]
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d125      	bne.n	80092f2 <USB_EPStartXfer+0x12a0>
 80092a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	461a      	mov	r2, r3
 80092b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80092bc:	4413      	add	r3, r2
 80092be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80092c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	011a      	lsls	r2, r3, #4
 80092d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80092d4:	4413      	add	r3, r2
 80092d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80092da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80092de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80092f0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80092f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	69db      	ldr	r3, [r3, #28]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	f000 8218 	beq.w	8009734 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009308:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	4413      	add	r3, r2
 800931e:	881b      	ldrh	r3, [r3, #0]
 8009320:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009324:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800932c:	2b00      	cmp	r3, #0
 800932e:	d005      	beq.n	800933c <USB_EPStartXfer+0x12ea>
 8009330:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009338:	2b00      	cmp	r3, #0
 800933a:	d10d      	bne.n	8009358 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800933c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009344:	2b00      	cmp	r3, #0
 8009346:	f040 81f5 	bne.w	8009734 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800934a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800934e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009352:	2b00      	cmp	r3, #0
 8009354:	f040 81ee 	bne.w	8009734 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800935c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	4413      	add	r3, r2
 8009372:	881b      	ldrh	r3, [r3, #0]
 8009374:	b29b      	uxth	r3, r3
 8009376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800937a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800937e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009386:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009390:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	441a      	add	r2, r3
 800939c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80093a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	8013      	strh	r3, [r2, #0]
 80093b4:	e1be      	b.n	8009734 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80093b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	78db      	ldrb	r3, [r3, #3]
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	f040 81b4 	bne.w	8009730 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80093c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	699a      	ldr	r2, [r3, #24]
 80093d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d917      	bls.n	8009414 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80093e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80093f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	699a      	ldr	r2, [r3, #24]
 8009400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009404:	1ad2      	subs	r2, r2, r3
 8009406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800940a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	619a      	str	r2, [r3, #24]
 8009412:	e00e      	b.n	8009432 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	699b      	ldr	r3, [r3, #24]
 8009420:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2200      	movs	r2, #0
 8009430:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	785b      	ldrb	r3, [r3, #1]
 800943e:	2b00      	cmp	r3, #0
 8009440:	f040 8085 	bne.w	800954e <USB_EPStartXfer+0x14fc>
 8009444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009448:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009456:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009460:	b29b      	uxth	r3, r3
 8009462:	461a      	mov	r2, r3
 8009464:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009468:	4413      	add	r3, r2
 800946a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800946e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	011a      	lsls	r2, r3, #4
 800947c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009480:	4413      	add	r3, r2
 8009482:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009486:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800948a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800948e:	881b      	ldrh	r3, [r3, #0]
 8009490:	b29b      	uxth	r3, r3
 8009492:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009496:	b29a      	uxth	r2, r3
 8009498:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800949c:	801a      	strh	r2, [r3, #0]
 800949e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094a2:	2b3e      	cmp	r3, #62	; 0x3e
 80094a4:	d923      	bls.n	80094ee <USB_EPStartXfer+0x149c>
 80094a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094aa:	095b      	lsrs	r3, r3, #5
 80094ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80094b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094b4:	f003 031f 	and.w	r3, r3, #31
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d104      	bne.n	80094c6 <USB_EPStartXfer+0x1474>
 80094bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094c0:	3b01      	subs	r3, #1
 80094c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80094c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094ca:	881b      	ldrh	r3, [r3, #0]
 80094cc:	b29a      	uxth	r2, r3
 80094ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	029b      	lsls	r3, r3, #10
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	4313      	orrs	r3, r2
 80094da:	b29b      	uxth	r3, r3
 80094dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094e4:	b29a      	uxth	r2, r3
 80094e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094ea:	801a      	strh	r2, [r3, #0]
 80094ec:	e060      	b.n	80095b0 <USB_EPStartXfer+0x155e>
 80094ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d10c      	bne.n	8009510 <USB_EPStartXfer+0x14be>
 80094f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094fa:	881b      	ldrh	r3, [r3, #0]
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009502:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009506:	b29a      	uxth	r2, r3
 8009508:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800950c:	801a      	strh	r2, [r3, #0]
 800950e:	e04f      	b.n	80095b0 <USB_EPStartXfer+0x155e>
 8009510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009514:	085b      	lsrs	r3, r3, #1
 8009516:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800951a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800951e:	f003 0301 	and.w	r3, r3, #1
 8009522:	2b00      	cmp	r3, #0
 8009524:	d004      	beq.n	8009530 <USB_EPStartXfer+0x14de>
 8009526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800952a:	3301      	adds	r3, #1
 800952c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009530:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009534:	881b      	ldrh	r3, [r3, #0]
 8009536:	b29a      	uxth	r2, r3
 8009538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800953c:	b29b      	uxth	r3, r3
 800953e:	029b      	lsls	r3, r3, #10
 8009540:	b29b      	uxth	r3, r3
 8009542:	4313      	orrs	r3, r2
 8009544:	b29a      	uxth	r2, r3
 8009546:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800954a:	801a      	strh	r2, [r3, #0]
 800954c:	e030      	b.n	80095b0 <USB_EPStartXfer+0x155e>
 800954e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	785b      	ldrb	r3, [r3, #1]
 800955a:	2b01      	cmp	r3, #1
 800955c:	d128      	bne.n	80095b0 <USB_EPStartXfer+0x155e>
 800955e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009562:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800956c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009570:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800957a:	b29b      	uxth	r3, r3
 800957c:	461a      	mov	r2, r3
 800957e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009582:	4413      	add	r3, r2
 8009584:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800958c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	011a      	lsls	r2, r3, #4
 8009596:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800959a:	4413      	add	r3, r2
 800959c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80095a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80095a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80095ae:	801a      	strh	r2, [r3, #0]
 80095b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80095be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	785b      	ldrb	r3, [r3, #1]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f040 8085 	bne.w	80096da <USB_EPStartXfer+0x1688>
 80095d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80095de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	461a      	mov	r2, r3
 80095f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80095f4:	4413      	add	r3, r2
 80095f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80095fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	011a      	lsls	r2, r3, #4
 8009608:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800960c:	4413      	add	r3, r2
 800960e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009612:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009616:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800961a:	881b      	ldrh	r3, [r3, #0]
 800961c:	b29b      	uxth	r3, r3
 800961e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009622:	b29a      	uxth	r2, r3
 8009624:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009628:	801a      	strh	r2, [r3, #0]
 800962a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800962e:	2b3e      	cmp	r3, #62	; 0x3e
 8009630:	d923      	bls.n	800967a <USB_EPStartXfer+0x1628>
 8009632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009636:	095b      	lsrs	r3, r3, #5
 8009638:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800963c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009640:	f003 031f 	and.w	r3, r3, #31
 8009644:	2b00      	cmp	r3, #0
 8009646:	d104      	bne.n	8009652 <USB_EPStartXfer+0x1600>
 8009648:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800964c:	3b01      	subs	r3, #1
 800964e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009652:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009656:	881b      	ldrh	r3, [r3, #0]
 8009658:	b29a      	uxth	r2, r3
 800965a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800965e:	b29b      	uxth	r3, r3
 8009660:	029b      	lsls	r3, r3, #10
 8009662:	b29b      	uxth	r3, r3
 8009664:	4313      	orrs	r3, r2
 8009666:	b29b      	uxth	r3, r3
 8009668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800966c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009670:	b29a      	uxth	r2, r3
 8009672:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009676:	801a      	strh	r2, [r3, #0]
 8009678:	e05c      	b.n	8009734 <USB_EPStartXfer+0x16e2>
 800967a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800967e:	2b00      	cmp	r3, #0
 8009680:	d10c      	bne.n	800969c <USB_EPStartXfer+0x164a>
 8009682:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009686:	881b      	ldrh	r3, [r3, #0]
 8009688:	b29b      	uxth	r3, r3
 800968a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800968e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009692:	b29a      	uxth	r2, r3
 8009694:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009698:	801a      	strh	r2, [r3, #0]
 800969a:	e04b      	b.n	8009734 <USB_EPStartXfer+0x16e2>
 800969c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096a0:	085b      	lsrs	r3, r3, #1
 80096a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80096a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096aa:	f003 0301 	and.w	r3, r3, #1
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d004      	beq.n	80096bc <USB_EPStartXfer+0x166a>
 80096b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096b6:	3301      	adds	r3, #1
 80096b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80096bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096c0:	881b      	ldrh	r3, [r3, #0]
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	029b      	lsls	r3, r3, #10
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	4313      	orrs	r3, r2
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096d6:	801a      	strh	r2, [r3, #0]
 80096d8:	e02c      	b.n	8009734 <USB_EPStartXfer+0x16e2>
 80096da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	785b      	ldrb	r3, [r3, #1]
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d124      	bne.n	8009734 <USB_EPStartXfer+0x16e2>
 80096ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	461a      	mov	r2, r3
 80096fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009700:	4413      	add	r3, r2
 8009702:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800970a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	011a      	lsls	r2, r3, #4
 8009714:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009718:	4413      	add	r3, r2
 800971a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800971e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009726:	b29a      	uxth	r2, r3
 8009728:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800972c:	801a      	strh	r2, [r3, #0]
 800972e:	e001      	b.n	8009734 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009730:	2301      	movs	r3, #1
 8009732:	e03a      	b.n	80097aa <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009738:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	4413      	add	r3, r2
 800974e:	881b      	ldrh	r3, [r3, #0]
 8009750:	b29b      	uxth	r3, r3
 8009752:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800975a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800975e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009762:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009766:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800976a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800976e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009772:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800977a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	441a      	add	r2, r3
 8009790:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009794:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009798:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800979c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	785b      	ldrb	r3, [r3, #1]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d020      	beq.n	8009808 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	4413      	add	r3, r2
 80097d0:	881b      	ldrh	r3, [r3, #0]
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097dc:	81bb      	strh	r3, [r7, #12]
 80097de:	89bb      	ldrh	r3, [r7, #12]
 80097e0:	f083 0310 	eor.w	r3, r3, #16
 80097e4:	81bb      	strh	r3, [r7, #12]
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	441a      	add	r2, r3
 80097f0:	89bb      	ldrh	r3, [r7, #12]
 80097f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009802:	b29b      	uxth	r3, r3
 8009804:	8013      	strh	r3, [r2, #0]
 8009806:	e01f      	b.n	8009848 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	4413      	add	r3, r2
 8009812:	881b      	ldrh	r3, [r3, #0]
 8009814:	b29b      	uxth	r3, r3
 8009816:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800981a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800981e:	81fb      	strh	r3, [r7, #14]
 8009820:	89fb      	ldrh	r3, [r7, #14]
 8009822:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009826:	81fb      	strh	r3, [r7, #14]
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	441a      	add	r2, r3
 8009832:	89fb      	ldrh	r3, [r7, #14]
 8009834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800983c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009844:	b29b      	uxth	r3, r3
 8009846:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3714      	adds	r7, #20
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr

08009856 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009856:	b480      	push	{r7}
 8009858:	b087      	sub	sp, #28
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
 800985e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	7b1b      	ldrb	r3, [r3, #12]
 8009864:	2b00      	cmp	r3, #0
 8009866:	f040 809d 	bne.w	80099a4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	785b      	ldrb	r3, [r3, #1]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d04c      	beq.n	800990c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	4413      	add	r3, r2
 800987c:	881b      	ldrh	r3, [r3, #0]
 800987e:	823b      	strh	r3, [r7, #16]
 8009880:	8a3b      	ldrh	r3, [r7, #16]
 8009882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009886:	2b00      	cmp	r3, #0
 8009888:	d01b      	beq.n	80098c2 <USB_EPClearStall+0x6c>
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	4413      	add	r3, r2
 8009894:	881b      	ldrh	r3, [r3, #0]
 8009896:	b29b      	uxth	r3, r3
 8009898:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800989c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098a0:	81fb      	strh	r3, [r7, #14]
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	441a      	add	r2, r3
 80098ac:	89fb      	ldrh	r3, [r7, #14]
 80098ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80098be:	b29b      	uxth	r3, r3
 80098c0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	78db      	ldrb	r3, [r3, #3]
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d06c      	beq.n	80099a4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	4413      	add	r3, r2
 80098d4:	881b      	ldrh	r3, [r3, #0]
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098e0:	81bb      	strh	r3, [r7, #12]
 80098e2:	89bb      	ldrh	r3, [r7, #12]
 80098e4:	f083 0320 	eor.w	r3, r3, #32
 80098e8:	81bb      	strh	r3, [r7, #12]
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	441a      	add	r2, r3
 80098f4:	89bb      	ldrh	r3, [r7, #12]
 80098f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009906:	b29b      	uxth	r3, r3
 8009908:	8013      	strh	r3, [r2, #0]
 800990a:	e04b      	b.n	80099a4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	4413      	add	r3, r2
 8009916:	881b      	ldrh	r3, [r3, #0]
 8009918:	82fb      	strh	r3, [r7, #22]
 800991a:	8afb      	ldrh	r3, [r7, #22]
 800991c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009920:	2b00      	cmp	r3, #0
 8009922:	d01b      	beq.n	800995c <USB_EPClearStall+0x106>
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	4413      	add	r3, r2
 800992e:	881b      	ldrh	r3, [r3, #0]
 8009930:	b29b      	uxth	r3, r3
 8009932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800993a:	82bb      	strh	r3, [r7, #20]
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	441a      	add	r2, r3
 8009946:	8abb      	ldrh	r3, [r7, #20]
 8009948:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800994c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009950:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009958:	b29b      	uxth	r3, r3
 800995a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	4413      	add	r3, r2
 8009966:	881b      	ldrh	r3, [r3, #0]
 8009968:	b29b      	uxth	r3, r3
 800996a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800996e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009972:	827b      	strh	r3, [r7, #18]
 8009974:	8a7b      	ldrh	r3, [r7, #18]
 8009976:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800997a:	827b      	strh	r3, [r7, #18]
 800997c:	8a7b      	ldrh	r3, [r7, #18]
 800997e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009982:	827b      	strh	r3, [r7, #18]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	441a      	add	r2, r3
 800998e:	8a7b      	ldrh	r3, [r7, #18]
 8009990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800999c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	371c      	adds	r7, #28
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr

080099b2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80099b2:	b480      	push	{r7}
 80099b4:	b083      	sub	sp, #12
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
 80099ba:	460b      	mov	r3, r1
 80099bc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80099be:	78fb      	ldrb	r3, [r7, #3]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d103      	bne.n	80099cc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2280      	movs	r2, #128	; 0x80
 80099c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	370c      	adds	r7, #12
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr

080099da <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80099da:	b480      	push	{r7}
 80099dc:	b083      	sub	sp, #12
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b085      	sub	sp, #20
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009a02:	68fb      	ldr	r3, [r7, #12]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3714      	adds	r7, #20
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b08b      	sub	sp, #44	; 0x2c
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	4611      	mov	r1, r2
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	460b      	mov	r3, r1
 8009a20:	80fb      	strh	r3, [r7, #6]
 8009a22:	4613      	mov	r3, r2
 8009a24:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009a26:	88bb      	ldrh	r3, [r7, #4]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	085b      	lsrs	r3, r3, #1
 8009a2c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009a36:	88fb      	ldrh	r3, [r7, #6]
 8009a38:	005a      	lsls	r2, r3, #1
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a42:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	627b      	str	r3, [r7, #36]	; 0x24
 8009a48:	e01e      	b.n	8009a88 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8009a4a:	69fb      	ldr	r3, [r7, #28]
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009a50:	69fb      	ldr	r3, [r7, #28]
 8009a52:	3301      	adds	r3, #1
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	021b      	lsls	r3, r3, #8
 8009a58:	b21a      	sxth	r2, r3
 8009a5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	b21b      	sxth	r3, r3
 8009a62:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009a64:	6a3b      	ldr	r3, [r7, #32]
 8009a66:	8a7a      	ldrh	r2, [r7, #18]
 8009a68:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009a6a:	6a3b      	ldr	r3, [r7, #32]
 8009a6c:	3302      	adds	r3, #2
 8009a6e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009a70:	6a3b      	ldr	r3, [r7, #32]
 8009a72:	3302      	adds	r3, #2
 8009a74:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a84:	3b01      	subs	r3, #1
 8009a86:	627b      	str	r3, [r7, #36]	; 0x24
 8009a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d1dd      	bne.n	8009a4a <USB_WritePMA+0x3a>
  }
}
 8009a8e:	bf00      	nop
 8009a90:	bf00      	nop
 8009a92:	372c      	adds	r7, #44	; 0x2c
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b08b      	sub	sp, #44	; 0x2c
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	4611      	mov	r1, r2
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	460b      	mov	r3, r1
 8009aac:	80fb      	strh	r3, [r7, #6]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009ab2:	88bb      	ldrh	r3, [r7, #4]
 8009ab4:	085b      	lsrs	r3, r3, #1
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009ac2:	88fb      	ldrh	r3, [r7, #6]
 8009ac4:	005a      	lsls	r2, r3, #1
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	4413      	add	r3, r2
 8009aca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ace:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009ad0:	69bb      	ldr	r3, [r7, #24]
 8009ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8009ad4:	e01b      	b.n	8009b0e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009ad6:	6a3b      	ldr	r3, [r7, #32]
 8009ad8:	881b      	ldrh	r3, [r3, #0]
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009ade:	6a3b      	ldr	r3, [r7, #32]
 8009ae0:	3302      	adds	r3, #2
 8009ae2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	b2da      	uxtb	r2, r3
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	3301      	adds	r3, #1
 8009af0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	0a1b      	lsrs	r3, r3, #8
 8009af6:	b2da      	uxtb	r2, r3
 8009af8:	69fb      	ldr	r3, [r7, #28]
 8009afa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	3301      	adds	r3, #1
 8009b00:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009b02:	6a3b      	ldr	r3, [r7, #32]
 8009b04:	3302      	adds	r3, #2
 8009b06:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8009b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d1e0      	bne.n	8009ad6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009b14:	88bb      	ldrh	r3, [r7, #4]
 8009b16:	f003 0301 	and.w	r3, r3, #1
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d007      	beq.n	8009b30 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8009b20:	6a3b      	ldr	r3, [r7, #32]
 8009b22:	881b      	ldrh	r3, [r3, #0]
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	b2da      	uxtb	r2, r3
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	701a      	strb	r2, [r3, #0]
  }
}
 8009b30:	bf00      	nop
 8009b32:	372c      	adds	r7, #44	; 0x2c
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <constructor>:
#include "GPIO_helper.h"

Pin_struct constructor(GPIO_TypeDef* gpio,uint16_t cislo)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b087      	sub	sp, #28
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	60b9      	str	r1, [r7, #8]
 8009b46:	4613      	mov	r3, r2
 8009b48:	80fb      	strh	r3, [r7, #6]
	Pin_struct ret;
	ret.sbernice=gpio;
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	613b      	str	r3, [r7, #16]
	ret.pin=cislo;
 8009b4e:	88fb      	ldrh	r3, [r7, #6]
 8009b50:	82bb      	strh	r3, [r7, #20]

	return ret;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	461a      	mov	r2, r3
 8009b56:	f107 0310 	add.w	r3, r7, #16
 8009b5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009b5e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	371c      	adds	r7, #28
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <pisPin>:

void pisPin(Pin_struct kam,_Bool hodnota)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b084      	sub	sp, #16
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	f107 0308 	add.w	r3, r7, #8
 8009b78:	e883 0003 	stmia.w	r3, {r0, r1}
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(kam.sbernice,kam.pin,hodnota);
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	89b9      	ldrh	r1, [r7, #12]
 8009b84:	79fa      	ldrb	r2, [r7, #7]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7f9 f902 	bl	8002d90 <HAL_GPIO_WritePin>
}
 8009b8c:	bf00      	nop
 8009b8e:	3710      	adds	r7, #16
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <defineKruh>:
}

Pin_struct kruh[8];
int8_t kruh_index=0;
void defineKruh()
{
 8009b94:	b590      	push	{r4, r7, lr}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
	kruh[0]=constructor(LD3_GPIO_Port, LD3_Pin);
 8009b9a:	4c3d      	ldr	r4, [pc, #244]	; (8009c90 <defineKruh+0xfc>)
 8009b9c:	463b      	mov	r3, r7
 8009b9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ba2:	493c      	ldr	r1, [pc, #240]	; (8009c94 <defineKruh+0x100>)
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f7ff ffc9 	bl	8009b3c <constructor>
 8009baa:	4622      	mov	r2, r4
 8009bac:	463b      	mov	r3, r7
 8009bae:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009bb2:	e882 0003 	stmia.w	r2, {r0, r1}
	kruh[1]=constructor(LD5_GPIO_Port, LD5_Pin);
 8009bb6:	4c36      	ldr	r4, [pc, #216]	; (8009c90 <defineKruh+0xfc>)
 8009bb8:	463b      	mov	r3, r7
 8009bba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009bbe:	4935      	ldr	r1, [pc, #212]	; (8009c94 <defineKruh+0x100>)
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7ff ffbb 	bl	8009b3c <constructor>
 8009bc6:	f104 0308 	add.w	r3, r4, #8
 8009bca:	463a      	mov	r2, r7
 8009bcc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009bd0:	e883 0003 	stmia.w	r3, {r0, r1}
	kruh[2]=constructor(LD7_GPIO_Port, LD7_Pin);
 8009bd4:	4c2e      	ldr	r4, [pc, #184]	; (8009c90 <defineKruh+0xfc>)
 8009bd6:	463b      	mov	r3, r7
 8009bd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009bdc:	492d      	ldr	r1, [pc, #180]	; (8009c94 <defineKruh+0x100>)
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7ff ffac 	bl	8009b3c <constructor>
 8009be4:	f104 0310 	add.w	r3, r4, #16
 8009be8:	463a      	mov	r2, r7
 8009bea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009bee:	e883 0003 	stmia.w	r3, {r0, r1}
	kruh[3]=constructor(LD9_GPIO_Port, LD9_Pin);
 8009bf2:	4c27      	ldr	r4, [pc, #156]	; (8009c90 <defineKruh+0xfc>)
 8009bf4:	463b      	mov	r3, r7
 8009bf6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009bfa:	4926      	ldr	r1, [pc, #152]	; (8009c94 <defineKruh+0x100>)
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7ff ff9d 	bl	8009b3c <constructor>
 8009c02:	f104 0318 	add.w	r3, r4, #24
 8009c06:	463a      	mov	r2, r7
 8009c08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c0c:	e883 0003 	stmia.w	r3, {r0, r1}
	kruh[4]=constructor(LD10_GPIO_Port, LD10_Pin);
 8009c10:	4c1f      	ldr	r4, [pc, #124]	; (8009c90 <defineKruh+0xfc>)
 8009c12:	463b      	mov	r3, r7
 8009c14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009c18:	491e      	ldr	r1, [pc, #120]	; (8009c94 <defineKruh+0x100>)
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7ff ff8e 	bl	8009b3c <constructor>
 8009c20:	f104 0320 	add.w	r3, r4, #32
 8009c24:	463a      	mov	r2, r7
 8009c26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c2a:	e883 0003 	stmia.w	r3, {r0, r1}
	kruh[5]=constructor(LD8_GPIO_Port, LD8_Pin);
 8009c2e:	4c18      	ldr	r4, [pc, #96]	; (8009c90 <defineKruh+0xfc>)
 8009c30:	463b      	mov	r3, r7
 8009c32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009c36:	4917      	ldr	r1, [pc, #92]	; (8009c94 <defineKruh+0x100>)
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7ff ff7f 	bl	8009b3c <constructor>
 8009c3e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8009c42:	463a      	mov	r2, r7
 8009c44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c48:	e883 0003 	stmia.w	r3, {r0, r1}
	kruh[6]=constructor(LD6_GPIO_Port, LD6_Pin);
 8009c4c:	4c10      	ldr	r4, [pc, #64]	; (8009c90 <defineKruh+0xfc>)
 8009c4e:	463b      	mov	r3, r7
 8009c50:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009c54:	490f      	ldr	r1, [pc, #60]	; (8009c94 <defineKruh+0x100>)
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7ff ff70 	bl	8009b3c <constructor>
 8009c5c:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8009c60:	463a      	mov	r2, r7
 8009c62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c66:	e883 0003 	stmia.w	r3, {r0, r1}
	kruh[7]=constructor(LD4_GPIO_Port, LD4_Pin);
 8009c6a:	4c09      	ldr	r4, [pc, #36]	; (8009c90 <defineKruh+0xfc>)
 8009c6c:	463b      	mov	r3, r7
 8009c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c72:	4908      	ldr	r1, [pc, #32]	; (8009c94 <defineKruh+0x100>)
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7ff ff61 	bl	8009b3c <constructor>
 8009c7a:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8009c7e:	463a      	mov	r2, r7
 8009c80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c84:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8009c88:	bf00      	nop
 8009c8a:	370c      	adds	r7, #12
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd90      	pop	{r4, r7, pc}
 8009c90:	20000338 	.word	0x20000338
 8009c94:	48001000 	.word	0x48001000

08009c98 <otocKruhem>:

void otocKruhem(int8_t smer)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	71fb      	strb	r3, [r7, #7]
	pisPin(kruh[kruh_index], 0);
 8009ca2:	4b1d      	ldr	r3, [pc, #116]	; (8009d18 <otocKruhem+0x80>)
 8009ca4:	f993 3000 	ldrsb.w	r3, [r3]
 8009ca8:	491c      	ldr	r1, [pc, #112]	; (8009d1c <otocKruhem+0x84>)
 8009caa:	2200      	movs	r2, #0
 8009cac:	00db      	lsls	r3, r3, #3
 8009cae:	440b      	add	r3, r1
 8009cb0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009cb4:	f7ff ff5b 	bl	8009b6e <pisPin>

	kruh_index+=smer;
 8009cb8:	4b17      	ldr	r3, [pc, #92]	; (8009d18 <otocKruhem+0x80>)
 8009cba:	f993 3000 	ldrsb.w	r3, [r3]
 8009cbe:	b2da      	uxtb	r2, r3
 8009cc0:	79fb      	ldrb	r3, [r7, #7]
 8009cc2:	4413      	add	r3, r2
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	b25a      	sxtb	r2, r3
 8009cc8:	4b13      	ldr	r3, [pc, #76]	; (8009d18 <otocKruhem+0x80>)
 8009cca:	701a      	strb	r2, [r3, #0]
	if(kruh_index>=8){kruh_index=0+smer-1;}
 8009ccc:	4b12      	ldr	r3, [pc, #72]	; (8009d18 <otocKruhem+0x80>)
 8009cce:	f993 3000 	ldrsb.w	r3, [r3]
 8009cd2:	2b07      	cmp	r3, #7
 8009cd4:	dd05      	ble.n	8009ce2 <otocKruhem+0x4a>
 8009cd6:	79fb      	ldrb	r3, [r7, #7]
 8009cd8:	3b01      	subs	r3, #1
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	b25a      	sxtb	r2, r3
 8009cde:	4b0e      	ldr	r3, [pc, #56]	; (8009d18 <otocKruhem+0x80>)
 8009ce0:	701a      	strb	r2, [r3, #0]
	if(kruh_index<0){kruh_index=7+(smer+1);}
 8009ce2:	4b0d      	ldr	r3, [pc, #52]	; (8009d18 <otocKruhem+0x80>)
 8009ce4:	f993 3000 	ldrsb.w	r3, [r3]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	da05      	bge.n	8009cf8 <otocKruhem+0x60>
 8009cec:	79fb      	ldrb	r3, [r7, #7]
 8009cee:	3308      	adds	r3, #8
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	b25a      	sxtb	r2, r3
 8009cf4:	4b08      	ldr	r3, [pc, #32]	; (8009d18 <otocKruhem+0x80>)
 8009cf6:	701a      	strb	r2, [r3, #0]

	pisPin(kruh[kruh_index], 1);
 8009cf8:	4b07      	ldr	r3, [pc, #28]	; (8009d18 <otocKruhem+0x80>)
 8009cfa:	f993 3000 	ldrsb.w	r3, [r3]
 8009cfe:	4907      	ldr	r1, [pc, #28]	; (8009d1c <otocKruhem+0x84>)
 8009d00:	2201      	movs	r2, #1
 8009d02:	00db      	lsls	r3, r3, #3
 8009d04:	440b      	add	r3, r1
 8009d06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009d0a:	f7ff ff30 	bl	8009b6e <pisPin>
}
 8009d0e:	bf00      	nop
 8009d10:	3708      	adds	r7, #8
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	20000378 	.word	0x20000378
 8009d1c:	20000338 	.word	0x20000338

08009d20 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	4603      	mov	r3, r0
 8009d28:	80fb      	strh	r3, [r7, #6]
	GPIO_PinState B1_old=HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8009d2a:	2101      	movs	r1, #1
 8009d2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009d30:	f7f9 f816 	bl	8002d60 <HAL_GPIO_ReadPin>
 8009d34:	4603      	mov	r3, r0
 8009d36:	73fb      	strb	r3, [r7, #15]
	if ( B1_old== 1)
 8009d38:	7bfb      	ldrb	r3, [r7, #15]
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d101      	bne.n	8009d42 <HAL_GPIO_EXTI_Callback+0x22>
	{
		zmenSmer();
 8009d3e:	f7f6 faf7 	bl	8000330 <zmenSmer>
	}
}
 8009d42:	bf00      	nop
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
	...

08009d4c <dec_ascii>:
#include "USB_helper.h"

void dec_ascii(uint16_t dec, char ret[],uint8_t len)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b087      	sub	sp, #28
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	4603      	mov	r3, r0
 8009d54:	6039      	str	r1, [r7, #0]
 8009d56:	80fb      	strh	r3, [r7, #6]
 8009d58:	4613      	mov	r3, r2
 8009d5a:	717b      	strb	r3, [r7, #5]
	uint16_t temp = dec;
 8009d5c:	88fb      	ldrh	r3, [r7, #6]
 8009d5e:	82fb      	strh	r3, [r7, #22]
	uint8_t a=0;
 8009d60:	2300      	movs	r3, #0
 8009d62:	73bb      	strb	r3, [r7, #14]
	uint16_t rad = 1;
 8009d64:	2301      	movs	r3, #1
 8009d66:	82bb      	strh	r3, [r7, #20]

	for(int i=1;i<len;i++){rad*=10;}
 8009d68:	2301      	movs	r3, #1
 8009d6a:	613b      	str	r3, [r7, #16]
 8009d6c:	e008      	b.n	8009d80 <dec_ascii+0x34>
 8009d6e:	8abb      	ldrh	r3, [r7, #20]
 8009d70:	461a      	mov	r2, r3
 8009d72:	0092      	lsls	r2, r2, #2
 8009d74:	4413      	add	r3, r2
 8009d76:	005b      	lsls	r3, r3, #1
 8009d78:	82bb      	strh	r3, [r7, #20]
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	613b      	str	r3, [r7, #16]
 8009d80:	797b      	ldrb	r3, [r7, #5]
 8009d82:	693a      	ldr	r2, [r7, #16]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	dbf2      	blt.n	8009d6e <dec_ascii+0x22>

	for(uint8_t i=0;i<len;i++)
 8009d88:	2300      	movs	r3, #0
 8009d8a:	73fb      	strb	r3, [r7, #15]
 8009d8c:	e01e      	b.n	8009dcc <dec_ascii+0x80>
	{
		a=temp/rad;
 8009d8e:	8afa      	ldrh	r2, [r7, #22]
 8009d90:	8abb      	ldrh	r3, [r7, #20]
 8009d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	73bb      	strb	r3, [r7, #14]
		ret[i]=a+48;//48 = '0' v ASCII
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
 8009d9c:	683a      	ldr	r2, [r7, #0]
 8009d9e:	4413      	add	r3, r2
 8009da0:	7bba      	ldrb	r2, [r7, #14]
 8009da2:	3230      	adds	r2, #48	; 0x30
 8009da4:	b2d2      	uxtb	r2, r2
 8009da6:	701a      	strb	r2, [r3, #0]
		temp=temp-a*rad;
 8009da8:	7bbb      	ldrb	r3, [r7, #14]
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	8aba      	ldrh	r2, [r7, #20]
 8009dae:	fb12 f303 	smulbb	r3, r2, r3
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	8afa      	ldrh	r2, [r7, #22]
 8009db6:	1ad3      	subs	r3, r2, r3
 8009db8:	82fb      	strh	r3, [r7, #22]

		rad/=10;
 8009dba:	8abb      	ldrh	r3, [r7, #20]
 8009dbc:	4a09      	ldr	r2, [pc, #36]	; (8009de4 <dec_ascii+0x98>)
 8009dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8009dc2:	08db      	lsrs	r3, r3, #3
 8009dc4:	82bb      	strh	r3, [r7, #20]
	for(uint8_t i=0;i<len;i++)
 8009dc6:	7bfb      	ldrb	r3, [r7, #15]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	73fb      	strb	r3, [r7, #15]
 8009dcc:	7bfa      	ldrb	r2, [r7, #15]
 8009dce:	797b      	ldrb	r3, [r7, #5]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d3dc      	bcc.n	8009d8e <dec_ascii+0x42>
	}
}
 8009dd4:	bf00      	nop
 8009dd6:	bf00      	nop
 8009dd8:	371c      	adds	r7, #28
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	cccccccd 	.word	0xcccccccd

08009de8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	460b      	mov	r3, r1
 8009df2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009df4:	2300      	movs	r3, #0
 8009df6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	7c1b      	ldrb	r3, [r3, #16]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d115      	bne.n	8009e2c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e04:	2202      	movs	r2, #2
 8009e06:	2181      	movs	r1, #129	; 0x81
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f001 feb8 	bl	800bb7e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2201      	movs	r2, #1
 8009e12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009e14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e18:	2202      	movs	r2, #2
 8009e1a:	2101      	movs	r1, #1
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f001 feae 	bl	800bb7e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2201      	movs	r2, #1
 8009e26:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009e2a:	e012      	b.n	8009e52 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009e2c:	2340      	movs	r3, #64	; 0x40
 8009e2e:	2202      	movs	r2, #2
 8009e30:	2181      	movs	r1, #129	; 0x81
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f001 fea3 	bl	800bb7e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009e3e:	2340      	movs	r3, #64	; 0x40
 8009e40:	2202      	movs	r2, #2
 8009e42:	2101      	movs	r1, #1
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f001 fe9a 	bl	800bb7e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009e52:	2308      	movs	r3, #8
 8009e54:	2203      	movs	r2, #3
 8009e56:	2182      	movs	r1, #130	; 0x82
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f001 fe90 	bl	800bb7e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2201      	movs	r2, #1
 8009e62:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009e64:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009e68:	f001 ffb2 	bl	800bdd0 <USBD_static_malloc>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d102      	bne.n	8009e84 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	73fb      	strb	r3, [r7, #15]
 8009e82:	e026      	b.n	8009ed2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e8a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	7c1b      	ldrb	r3, [r3, #16]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d109      	bne.n	8009ec2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009eb8:	2101      	movs	r1, #1
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f001 ff51 	bl	800bd62 <USBD_LL_PrepareReceive>
 8009ec0:	e007      	b.n	8009ed2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ec8:	2340      	movs	r3, #64	; 0x40
 8009eca:	2101      	movs	r1, #1
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f001 ff48 	bl	800bd62 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009eec:	2181      	movs	r1, #129	; 0x81
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f001 fe6b 	bl	800bbca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009efa:	2101      	movs	r1, #1
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f001 fe64 	bl	800bbca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009f0a:	2182      	movs	r1, #130	; 0x82
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f001 fe5c 	bl	800bbca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d00e      	beq.n	8009f40 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f32:	4618      	mov	r0, r3
 8009f34:	f001 ff5a 	bl	800bdec <USBD_static_free>
    pdev->pClassData = NULL;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3710      	adds	r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b086      	sub	sp, #24
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
 8009f52:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f5a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009f60:	2300      	movs	r3, #0
 8009f62:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009f64:	2300      	movs	r3, #0
 8009f66:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d039      	beq.n	8009fe8 <USBD_CDC_Setup+0x9e>
 8009f74:	2b20      	cmp	r3, #32
 8009f76:	d17f      	bne.n	800a078 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	88db      	ldrh	r3, [r3, #6]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d029      	beq.n	8009fd4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	b25b      	sxtb	r3, r3
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	da11      	bge.n	8009fae <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	683a      	ldr	r2, [r7, #0]
 8009f94:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009f96:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f98:	683a      	ldr	r2, [r7, #0]
 8009f9a:	88d2      	ldrh	r2, [r2, #6]
 8009f9c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009f9e:	6939      	ldr	r1, [r7, #16]
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	88db      	ldrh	r3, [r3, #6]
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f001 fa13 	bl	800b3d2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009fac:	e06b      	b.n	800a086 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	785a      	ldrb	r2, [r3, #1]
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	88db      	ldrh	r3, [r3, #6]
 8009fbc:	b2da      	uxtb	r2, r3
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009fc4:	6939      	ldr	r1, [r7, #16]
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	88db      	ldrh	r3, [r3, #6]
 8009fca:	461a      	mov	r2, r3
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f001 fa2e 	bl	800b42e <USBD_CtlPrepareRx>
      break;
 8009fd2:	e058      	b.n	800a086 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	683a      	ldr	r2, [r7, #0]
 8009fde:	7850      	ldrb	r0, [r2, #1]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	6839      	ldr	r1, [r7, #0]
 8009fe4:	4798      	blx	r3
      break;
 8009fe6:	e04e      	b.n	800a086 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	785b      	ldrb	r3, [r3, #1]
 8009fec:	2b0b      	cmp	r3, #11
 8009fee:	d02e      	beq.n	800a04e <USBD_CDC_Setup+0x104>
 8009ff0:	2b0b      	cmp	r3, #11
 8009ff2:	dc38      	bgt.n	800a066 <USBD_CDC_Setup+0x11c>
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d002      	beq.n	8009ffe <USBD_CDC_Setup+0xb4>
 8009ff8:	2b0a      	cmp	r3, #10
 8009ffa:	d014      	beq.n	800a026 <USBD_CDC_Setup+0xdc>
 8009ffc:	e033      	b.n	800a066 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a004:	2b03      	cmp	r3, #3
 800a006:	d107      	bne.n	800a018 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a008:	f107 030c 	add.w	r3, r7, #12
 800a00c:	2202      	movs	r2, #2
 800a00e:	4619      	mov	r1, r3
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f001 f9de 	bl	800b3d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a016:	e02e      	b.n	800a076 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a018:	6839      	ldr	r1, [r7, #0]
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f001 f96e 	bl	800b2fc <USBD_CtlError>
            ret = USBD_FAIL;
 800a020:	2302      	movs	r3, #2
 800a022:	75fb      	strb	r3, [r7, #23]
          break;
 800a024:	e027      	b.n	800a076 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a02c:	2b03      	cmp	r3, #3
 800a02e:	d107      	bne.n	800a040 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a030:	f107 030f 	add.w	r3, r7, #15
 800a034:	2201      	movs	r2, #1
 800a036:	4619      	mov	r1, r3
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f001 f9ca 	bl	800b3d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a03e:	e01a      	b.n	800a076 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a040:	6839      	ldr	r1, [r7, #0]
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f001 f95a 	bl	800b2fc <USBD_CtlError>
            ret = USBD_FAIL;
 800a048:	2302      	movs	r3, #2
 800a04a:	75fb      	strb	r3, [r7, #23]
          break;
 800a04c:	e013      	b.n	800a076 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a054:	2b03      	cmp	r3, #3
 800a056:	d00d      	beq.n	800a074 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a058:	6839      	ldr	r1, [r7, #0]
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f001 f94e 	bl	800b2fc <USBD_CtlError>
            ret = USBD_FAIL;
 800a060:	2302      	movs	r3, #2
 800a062:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a064:	e006      	b.n	800a074 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a066:	6839      	ldr	r1, [r7, #0]
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f001 f947 	bl	800b2fc <USBD_CtlError>
          ret = USBD_FAIL;
 800a06e:	2302      	movs	r3, #2
 800a070:	75fb      	strb	r3, [r7, #23]
          break;
 800a072:	e000      	b.n	800a076 <USBD_CDC_Setup+0x12c>
          break;
 800a074:	bf00      	nop
      }
      break;
 800a076:	e006      	b.n	800a086 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a078:	6839      	ldr	r1, [r7, #0]
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f001 f93e 	bl	800b2fc <USBD_CtlError>
      ret = USBD_FAIL;
 800a080:	2302      	movs	r3, #2
 800a082:	75fb      	strb	r3, [r7, #23]
      break;
 800a084:	bf00      	nop
  }

  return ret;
 800a086:	7dfb      	ldrb	r3, [r7, #23]
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3718      	adds	r7, #24
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	460b      	mov	r3, r1
 800a09a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0a2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0aa:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d03a      	beq.n	800a12c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a0b6:	78fa      	ldrb	r2, [r7, #3]
 800a0b8:	6879      	ldr	r1, [r7, #4]
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	4413      	add	r3, r2
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	440b      	add	r3, r1
 800a0c4:	331c      	adds	r3, #28
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d029      	beq.n	800a120 <USBD_CDC_DataIn+0x90>
 800a0cc:	78fa      	ldrb	r2, [r7, #3]
 800a0ce:	6879      	ldr	r1, [r7, #4]
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	4413      	add	r3, r2
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	440b      	add	r3, r1
 800a0da:	331c      	adds	r3, #28
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	78f9      	ldrb	r1, [r7, #3]
 800a0e0:	68b8      	ldr	r0, [r7, #8]
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	440b      	add	r3, r1
 800a0e8:	00db      	lsls	r3, r3, #3
 800a0ea:	4403      	add	r3, r0
 800a0ec:	3338      	adds	r3, #56	; 0x38
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	fbb2 f1f3 	udiv	r1, r2, r3
 800a0f4:	fb01 f303 	mul.w	r3, r1, r3
 800a0f8:	1ad3      	subs	r3, r2, r3
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d110      	bne.n	800a120 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a0fe:	78fa      	ldrb	r2, [r7, #3]
 800a100:	6879      	ldr	r1, [r7, #4]
 800a102:	4613      	mov	r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	4413      	add	r3, r2
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	440b      	add	r3, r1
 800a10c:	331c      	adds	r3, #28
 800a10e:	2200      	movs	r2, #0
 800a110:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a112:	78f9      	ldrb	r1, [r7, #3]
 800a114:	2300      	movs	r3, #0
 800a116:	2200      	movs	r2, #0
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f001 fdff 	bl	800bd1c <USBD_LL_Transmit>
 800a11e:	e003      	b.n	800a128 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2200      	movs	r2, #0
 800a124:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a128:	2300      	movs	r3, #0
 800a12a:	e000      	b.n	800a12e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a12c:	2302      	movs	r3, #2
  }
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3710      	adds	r7, #16
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a136:	b580      	push	{r7, lr}
 800a138:	b084      	sub	sp, #16
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
 800a13e:	460b      	mov	r3, r1
 800a140:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a148:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a14a:	78fb      	ldrb	r3, [r7, #3]
 800a14c:	4619      	mov	r1, r3
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f001 fe2a 	bl	800bda8 <USBD_LL_GetRxDataSize>
 800a154:	4602      	mov	r2, r0
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00d      	beq.n	800a182 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	68fa      	ldr	r2, [r7, #12]
 800a170:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a17a:	4611      	mov	r1, r2
 800a17c:	4798      	blx	r3

    return USBD_OK;
 800a17e:	2300      	movs	r3, #0
 800a180:	e000      	b.n	800a184 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a182:	2302      	movs	r3, #2
  }
}
 800a184:	4618      	mov	r0, r3
 800a186:	3710      	adds	r7, #16
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a19a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d015      	beq.n	800a1d2 <USBD_CDC_EP0_RxReady+0x46>
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a1ac:	2bff      	cmp	r3, #255	; 0xff
 800a1ae:	d010      	beq.n	800a1d2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a1be:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a1c0:	68fa      	ldr	r2, [r7, #12]
 800a1c2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a1c6:	b292      	uxth	r2, r2
 800a1c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	22ff      	movs	r2, #255	; 0xff
 800a1ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a1d2:	2300      	movs	r3, #0
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3710      	adds	r7, #16
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2243      	movs	r2, #67	; 0x43
 800a1e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a1ea:	4b03      	ldr	r3, [pc, #12]	; (800a1f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	370c      	adds	r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr
 800a1f8:	20000098 	.word	0x20000098

0800a1fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2243      	movs	r2, #67	; 0x43
 800a208:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a20a:	4b03      	ldr	r3, [pc, #12]	; (800a218 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr
 800a218:	20000054 	.word	0x20000054

0800a21c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2243      	movs	r2, #67	; 0x43
 800a228:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a22a:	4b03      	ldr	r3, [pc, #12]	; (800a238 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr
 800a238:	200000dc 	.word	0x200000dc

0800a23c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	220a      	movs	r2, #10
 800a248:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a24a:	4b03      	ldr	r3, [pc, #12]	; (800a258 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr
 800a258:	20000010 	.word	0x20000010

0800a25c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b085      	sub	sp, #20
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a266:	2302      	movs	r3, #2
 800a268:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d005      	beq.n	800a27c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	683a      	ldr	r2, [r7, #0]
 800a274:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a278:	2300      	movs	r3, #0
 800a27a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a27c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3714      	adds	r7, #20
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr

0800a28a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a28a:	b480      	push	{r7}
 800a28c:	b087      	sub	sp, #28
 800a28e:	af00      	add	r7, sp, #0
 800a290:	60f8      	str	r0, [r7, #12]
 800a292:	60b9      	str	r1, [r7, #8]
 800a294:	4613      	mov	r3, r2
 800a296:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a29e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	68ba      	ldr	r2, [r7, #8]
 800a2a4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a2a8:	88fa      	ldrh	r2, [r7, #6]
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a2b0:	2300      	movs	r3, #0
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	371c      	adds	r7, #28
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr

0800a2be <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a2be:	b480      	push	{r7}
 800a2c0:	b085      	sub	sp, #20
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
 800a2c6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2ce:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	683a      	ldr	r2, [r7, #0]
 800a2d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a2d8:	2300      	movs	r3, #0
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3714      	adds	r7, #20
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr

0800a2e6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b084      	sub	sp, #16
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d01c      	beq.n	800a33a <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a306:	2b00      	cmp	r3, #0
 800a308:	d115      	bne.n	800a336 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2201      	movs	r2, #1
 800a30e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a328:	b29b      	uxth	r3, r3
 800a32a:	2181      	movs	r1, #129	; 0x81
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f001 fcf5 	bl	800bd1c <USBD_LL_Transmit>

      return USBD_OK;
 800a332:	2300      	movs	r3, #0
 800a334:	e002      	b.n	800a33c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a336:	2301      	movs	r3, #1
 800a338:	e000      	b.n	800a33c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a33a:	2302      	movs	r3, #2
  }
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3710      	adds	r7, #16
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a352:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d017      	beq.n	800a38e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	7c1b      	ldrb	r3, [r3, #16]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d109      	bne.n	800a37a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a36c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a370:	2101      	movs	r1, #1
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f001 fcf5 	bl	800bd62 <USBD_LL_PrepareReceive>
 800a378:	e007      	b.n	800a38a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a380:	2340      	movs	r3, #64	; 0x40
 800a382:	2101      	movs	r1, #1
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f001 fcec 	bl	800bd62 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a38a:	2300      	movs	r3, #0
 800a38c:	e000      	b.n	800a390 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a38e:	2302      	movs	r3, #2
  }
}
 800a390:	4618      	mov	r0, r3
 800a392:	3710      	adds	r7, #16
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d101      	bne.n	800a3b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a3ac:	2302      	movs	r3, #2
 800a3ae:	e01a      	b.n	800a3e6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d003      	beq.n	800a3c2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d003      	beq.n	800a3d0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	68ba      	ldr	r2, [r7, #8]
 800a3cc:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	79fa      	ldrb	r2, [r7, #7]
 800a3dc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	f001 fb58 	bl	800ba94 <USBD_LL_Init>

  return USBD_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a3ee:	b480      	push	{r7}
 800a3f0:	b085      	sub	sp, #20
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
 800a3f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d006      	beq.n	800a410 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	683a      	ldr	r2, [r7, #0]
 800a406:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a40a:	2300      	movs	r3, #0
 800a40c:	73fb      	strb	r3, [r7, #15]
 800a40e:	e001      	b.n	800a414 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a410:	2302      	movs	r3, #2
 800a412:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a414:	7bfb      	ldrb	r3, [r7, #15]
}
 800a416:	4618      	mov	r0, r3
 800a418:	3714      	adds	r7, #20
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr

0800a422 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b082      	sub	sp, #8
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f001 fb8c 	bl	800bb48 <USBD_LL_Start>

  return USBD_OK;
 800a430:	2300      	movs	r3, #0
}
 800a432:	4618      	mov	r0, r3
 800a434:	3708      	adds	r7, #8
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}

0800a43a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a43a:	b480      	push	{r7}
 800a43c:	b083      	sub	sp, #12
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a442:	2300      	movs	r3, #0
}
 800a444:	4618      	mov	r0, r3
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	460b      	mov	r3, r1
 800a45a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a45c:	2302      	movs	r3, #2
 800a45e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00c      	beq.n	800a484 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	78fa      	ldrb	r2, [r7, #3]
 800a474:	4611      	mov	r1, r2
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	4798      	blx	r3
 800a47a:	4603      	mov	r3, r0
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d101      	bne.n	800a484 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a480:	2300      	movs	r3, #0
 800a482:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a484:	7bfb      	ldrb	r3, [r7, #15]
}
 800a486:	4618      	mov	r0, r3
 800a488:	3710      	adds	r7, #16
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b082      	sub	sp, #8
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
 800a496:	460b      	mov	r3, r1
 800a498:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	78fa      	ldrb	r2, [r7, #3]
 800a4a4:	4611      	mov	r1, r2
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	4798      	blx	r3

  return USBD_OK;
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3708      	adds	r7, #8
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a4c4:	6839      	ldr	r1, [r7, #0]
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f000 fedb 	bl	800b282 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a4da:	461a      	mov	r2, r3
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a4e8:	f003 031f 	and.w	r3, r3, #31
 800a4ec:	2b02      	cmp	r3, #2
 800a4ee:	d016      	beq.n	800a51e <USBD_LL_SetupStage+0x6a>
 800a4f0:	2b02      	cmp	r3, #2
 800a4f2:	d81c      	bhi.n	800a52e <USBD_LL_SetupStage+0x7a>
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d002      	beq.n	800a4fe <USBD_LL_SetupStage+0x4a>
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d008      	beq.n	800a50e <USBD_LL_SetupStage+0x5a>
 800a4fc:	e017      	b.n	800a52e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a504:	4619      	mov	r1, r3
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 f9ce 	bl	800a8a8 <USBD_StdDevReq>
      break;
 800a50c:	e01a      	b.n	800a544 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a514:	4619      	mov	r1, r3
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 fa30 	bl	800a97c <USBD_StdItfReq>
      break;
 800a51c:	e012      	b.n	800a544 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a524:	4619      	mov	r1, r3
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fa70 	bl	800aa0c <USBD_StdEPReq>
      break;
 800a52c:	e00a      	b.n	800a544 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a534:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	4619      	mov	r1, r3
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f001 fb63 	bl	800bc08 <USBD_LL_StallEP>
      break;
 800a542:	bf00      	nop
  }

  return USBD_OK;
 800a544:	2300      	movs	r3, #0
}
 800a546:	4618      	mov	r0, r3
 800a548:	3708      	adds	r7, #8
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b086      	sub	sp, #24
 800a552:	af00      	add	r7, sp, #0
 800a554:	60f8      	str	r0, [r7, #12]
 800a556:	460b      	mov	r3, r1
 800a558:	607a      	str	r2, [r7, #4]
 800a55a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a55c:	7afb      	ldrb	r3, [r7, #11]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d14b      	bne.n	800a5fa <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a568:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a570:	2b03      	cmp	r3, #3
 800a572:	d134      	bne.n	800a5de <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	68da      	ldr	r2, [r3, #12]
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	691b      	ldr	r3, [r3, #16]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d919      	bls.n	800a5b4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	68da      	ldr	r2, [r3, #12]
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	1ad2      	subs	r2, r2, r3
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	68da      	ldr	r2, [r3, #12]
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a596:	429a      	cmp	r2, r3
 800a598:	d203      	bcs.n	800a5a2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	e002      	b.n	800a5a8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	6879      	ldr	r1, [r7, #4]
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f000 ff5c 	bl	800b46a <USBD_CtlContinueRx>
 800a5b2:	e038      	b.n	800a626 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5ba:	691b      	ldr	r3, [r3, #16]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d00a      	beq.n	800a5d6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a5c6:	2b03      	cmp	r3, #3
 800a5c8:	d105      	bne.n	800a5d6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5d0:	691b      	ldr	r3, [r3, #16]
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f000 ff59 	bl	800b48e <USBD_CtlSendStatus>
 800a5dc:	e023      	b.n	800a626 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a5e4:	2b05      	cmp	r3, #5
 800a5e6:	d11e      	bne.n	800a626 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a5f0:	2100      	movs	r1, #0
 800a5f2:	68f8      	ldr	r0, [r7, #12]
 800a5f4:	f001 fb08 	bl	800bc08 <USBD_LL_StallEP>
 800a5f8:	e015      	b.n	800a626 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a600:	699b      	ldr	r3, [r3, #24]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d00d      	beq.n	800a622 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a60c:	2b03      	cmp	r3, #3
 800a60e:	d108      	bne.n	800a622 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a616:	699b      	ldr	r3, [r3, #24]
 800a618:	7afa      	ldrb	r2, [r7, #11]
 800a61a:	4611      	mov	r1, r2
 800a61c:	68f8      	ldr	r0, [r7, #12]
 800a61e:	4798      	blx	r3
 800a620:	e001      	b.n	800a626 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a622:	2302      	movs	r3, #2
 800a624:	e000      	b.n	800a628 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3718      	adds	r7, #24
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	460b      	mov	r3, r1
 800a63a:	607a      	str	r2, [r7, #4]
 800a63c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a63e:	7afb      	ldrb	r3, [r7, #11]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d17f      	bne.n	800a744 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	3314      	adds	r3, #20
 800a648:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a650:	2b02      	cmp	r3, #2
 800a652:	d15c      	bne.n	800a70e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	68da      	ldr	r2, [r3, #12]
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	691b      	ldr	r3, [r3, #16]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d915      	bls.n	800a68c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	68da      	ldr	r2, [r3, #12]
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	691b      	ldr	r3, [r3, #16]
 800a668:	1ad2      	subs	r2, r2, r3
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	b29b      	uxth	r3, r3
 800a674:	461a      	mov	r2, r3
 800a676:	6879      	ldr	r1, [r7, #4]
 800a678:	68f8      	ldr	r0, [r7, #12]
 800a67a:	f000 fec6 	bl	800b40a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a67e:	2300      	movs	r3, #0
 800a680:	2200      	movs	r2, #0
 800a682:	2100      	movs	r1, #0
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f001 fb6c 	bl	800bd62 <USBD_LL_PrepareReceive>
 800a68a:	e04e      	b.n	800a72a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	697a      	ldr	r2, [r7, #20]
 800a692:	6912      	ldr	r2, [r2, #16]
 800a694:	fbb3 f1f2 	udiv	r1, r3, r2
 800a698:	fb01 f202 	mul.w	r2, r1, r2
 800a69c:	1a9b      	subs	r3, r3, r2
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d11c      	bne.n	800a6dc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	689a      	ldr	r2, [r3, #8]
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d316      	bcc.n	800a6dc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	689a      	ldr	r2, [r3, #8]
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d20f      	bcs.n	800a6dc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a6bc:	2200      	movs	r2, #0
 800a6be:	2100      	movs	r1, #0
 800a6c0:	68f8      	ldr	r0, [r7, #12]
 800a6c2:	f000 fea2 	bl	800b40a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	f001 fb44 	bl	800bd62 <USBD_LL_PrepareReceive>
 800a6da:	e026      	b.n	800a72a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6e2:	68db      	ldr	r3, [r3, #12]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00a      	beq.n	800a6fe <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a6ee:	2b03      	cmp	r3, #3
 800a6f0:	d105      	bne.n	800a6fe <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	68f8      	ldr	r0, [r7, #12]
 800a6fc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a6fe:	2180      	movs	r1, #128	; 0x80
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f001 fa81 	bl	800bc08 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a706:	68f8      	ldr	r0, [r7, #12]
 800a708:	f000 fed4 	bl	800b4b4 <USBD_CtlReceiveStatus>
 800a70c:	e00d      	b.n	800a72a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a714:	2b04      	cmp	r3, #4
 800a716:	d004      	beq.n	800a722 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d103      	bne.n	800a72a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a722:	2180      	movs	r1, #128	; 0x80
 800a724:	68f8      	ldr	r0, [r7, #12]
 800a726:	f001 fa6f 	bl	800bc08 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a730:	2b01      	cmp	r3, #1
 800a732:	d11d      	bne.n	800a770 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a734:	68f8      	ldr	r0, [r7, #12]
 800a736:	f7ff fe80 	bl	800a43a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2200      	movs	r2, #0
 800a73e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a742:	e015      	b.n	800a770 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a74a:	695b      	ldr	r3, [r3, #20]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d00d      	beq.n	800a76c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a756:	2b03      	cmp	r3, #3
 800a758:	d108      	bne.n	800a76c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a760:	695b      	ldr	r3, [r3, #20]
 800a762:	7afa      	ldrb	r2, [r7, #11]
 800a764:	4611      	mov	r1, r2
 800a766:	68f8      	ldr	r0, [r7, #12]
 800a768:	4798      	blx	r3
 800a76a:	e001      	b.n	800a770 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a76c:	2302      	movs	r3, #2
 800a76e:	e000      	b.n	800a772 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3718      	adds	r7, #24
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b082      	sub	sp, #8
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a782:	2340      	movs	r3, #64	; 0x40
 800a784:	2200      	movs	r2, #0
 800a786:	2100      	movs	r1, #0
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f001 f9f8 	bl	800bb7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2201      	movs	r2, #1
 800a792:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2240      	movs	r2, #64	; 0x40
 800a79a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a79e:	2340      	movs	r3, #64	; 0x40
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	2180      	movs	r1, #128	; 0x80
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f001 f9ea 	bl	800bb7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2240      	movs	r2, #64	; 0x40
 800a7b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d009      	beq.n	800a7f2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	6852      	ldr	r2, [r2, #4]
 800a7ea:	b2d2      	uxtb	r2, r2
 800a7ec:	4611      	mov	r1, r2
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	4798      	blx	r3
  }

  return USBD_OK;
 800a7f2:	2300      	movs	r3, #0
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3708      	adds	r7, #8
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	460b      	mov	r3, r1
 800a806:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	78fa      	ldrb	r2, [r7, #3]
 800a80c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a80e:	2300      	movs	r3, #0
}
 800a810:	4618      	mov	r0, r3
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr

0800a81c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2204      	movs	r2, #4
 800a834:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a838:	2300      	movs	r3, #0
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	370c      	adds	r7, #12
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr

0800a846 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a846:	b480      	push	{r7}
 800a848:	b083      	sub	sp, #12
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a854:	2b04      	cmp	r3, #4
 800a856:	d105      	bne.n	800a864 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a864:	2300      	movs	r3, #0
}
 800a866:	4618      	mov	r0, r3
 800a868:	370c      	adds	r7, #12
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr

0800a872 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a872:	b580      	push	{r7, lr}
 800a874:	b082      	sub	sp, #8
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a880:	2b03      	cmp	r3, #3
 800a882:	d10b      	bne.n	800a89c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a88a:	69db      	ldr	r3, [r3, #28]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d005      	beq.n	800a89c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a896:	69db      	ldr	r3, [r3, #28]
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
	...

0800a8a8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8be:	2b40      	cmp	r3, #64	; 0x40
 800a8c0:	d005      	beq.n	800a8ce <USBD_StdDevReq+0x26>
 800a8c2:	2b40      	cmp	r3, #64	; 0x40
 800a8c4:	d84f      	bhi.n	800a966 <USBD_StdDevReq+0xbe>
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d009      	beq.n	800a8de <USBD_StdDevReq+0x36>
 800a8ca:	2b20      	cmp	r3, #32
 800a8cc:	d14b      	bne.n	800a966 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	6839      	ldr	r1, [r7, #0]
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	4798      	blx	r3
      break;
 800a8dc:	e048      	b.n	800a970 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	785b      	ldrb	r3, [r3, #1]
 800a8e2:	2b09      	cmp	r3, #9
 800a8e4:	d839      	bhi.n	800a95a <USBD_StdDevReq+0xb2>
 800a8e6:	a201      	add	r2, pc, #4	; (adr r2, 800a8ec <USBD_StdDevReq+0x44>)
 800a8e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ec:	0800a93d 	.word	0x0800a93d
 800a8f0:	0800a951 	.word	0x0800a951
 800a8f4:	0800a95b 	.word	0x0800a95b
 800a8f8:	0800a947 	.word	0x0800a947
 800a8fc:	0800a95b 	.word	0x0800a95b
 800a900:	0800a91f 	.word	0x0800a91f
 800a904:	0800a915 	.word	0x0800a915
 800a908:	0800a95b 	.word	0x0800a95b
 800a90c:	0800a933 	.word	0x0800a933
 800a910:	0800a929 	.word	0x0800a929
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a914:	6839      	ldr	r1, [r7, #0]
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 f9dc 	bl	800acd4 <USBD_GetDescriptor>
          break;
 800a91c:	e022      	b.n	800a964 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a91e:	6839      	ldr	r1, [r7, #0]
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 fb3f 	bl	800afa4 <USBD_SetAddress>
          break;
 800a926:	e01d      	b.n	800a964 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a928:	6839      	ldr	r1, [r7, #0]
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 fb7e 	bl	800b02c <USBD_SetConfig>
          break;
 800a930:	e018      	b.n	800a964 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a932:	6839      	ldr	r1, [r7, #0]
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 fc07 	bl	800b148 <USBD_GetConfig>
          break;
 800a93a:	e013      	b.n	800a964 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a93c:	6839      	ldr	r1, [r7, #0]
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 fc37 	bl	800b1b2 <USBD_GetStatus>
          break;
 800a944:	e00e      	b.n	800a964 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a946:	6839      	ldr	r1, [r7, #0]
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 fc65 	bl	800b218 <USBD_SetFeature>
          break;
 800a94e:	e009      	b.n	800a964 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a950:	6839      	ldr	r1, [r7, #0]
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 fc74 	bl	800b240 <USBD_ClrFeature>
          break;
 800a958:	e004      	b.n	800a964 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a95a:	6839      	ldr	r1, [r7, #0]
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 fccd 	bl	800b2fc <USBD_CtlError>
          break;
 800a962:	bf00      	nop
      }
      break;
 800a964:	e004      	b.n	800a970 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a966:	6839      	ldr	r1, [r7, #0]
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 fcc7 	bl	800b2fc <USBD_CtlError>
      break;
 800a96e:	bf00      	nop
  }

  return ret;
 800a970:	7bfb      	ldrb	r3, [r7, #15]
}
 800a972:	4618      	mov	r0, r3
 800a974:	3710      	adds	r7, #16
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop

0800a97c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a986:	2300      	movs	r3, #0
 800a988:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a992:	2b40      	cmp	r3, #64	; 0x40
 800a994:	d005      	beq.n	800a9a2 <USBD_StdItfReq+0x26>
 800a996:	2b40      	cmp	r3, #64	; 0x40
 800a998:	d82e      	bhi.n	800a9f8 <USBD_StdItfReq+0x7c>
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d001      	beq.n	800a9a2 <USBD_StdItfReq+0x26>
 800a99e:	2b20      	cmp	r3, #32
 800a9a0:	d12a      	bne.n	800a9f8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	2b02      	cmp	r3, #2
 800a9ac:	d81d      	bhi.n	800a9ea <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	889b      	ldrh	r3, [r3, #4]
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d813      	bhi.n	800a9e0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	6839      	ldr	r1, [r7, #0]
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	4798      	blx	r3
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	88db      	ldrh	r3, [r3, #6]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d110      	bne.n	800a9f4 <USBD_StdItfReq+0x78>
 800a9d2:	7bfb      	ldrb	r3, [r7, #15]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d10d      	bne.n	800a9f4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 fd58 	bl	800b48e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a9de:	e009      	b.n	800a9f4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a9e0:	6839      	ldr	r1, [r7, #0]
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 fc8a 	bl	800b2fc <USBD_CtlError>
          break;
 800a9e8:	e004      	b.n	800a9f4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a9ea:	6839      	ldr	r1, [r7, #0]
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f000 fc85 	bl	800b2fc <USBD_CtlError>
          break;
 800a9f2:	e000      	b.n	800a9f6 <USBD_StdItfReq+0x7a>
          break;
 800a9f4:	bf00      	nop
      }
      break;
 800a9f6:	e004      	b.n	800aa02 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a9f8:	6839      	ldr	r1, [r7, #0]
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 fc7e 	bl	800b2fc <USBD_CtlError>
      break;
 800aa00:	bf00      	nop
  }

  return USBD_OK;
 800aa02:	2300      	movs	r3, #0
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3710      	adds	r7, #16
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800aa16:	2300      	movs	r3, #0
 800aa18:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	889b      	ldrh	r3, [r3, #4]
 800aa1e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa28:	2b40      	cmp	r3, #64	; 0x40
 800aa2a:	d007      	beq.n	800aa3c <USBD_StdEPReq+0x30>
 800aa2c:	2b40      	cmp	r3, #64	; 0x40
 800aa2e:	f200 8146 	bhi.w	800acbe <USBD_StdEPReq+0x2b2>
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00a      	beq.n	800aa4c <USBD_StdEPReq+0x40>
 800aa36:	2b20      	cmp	r3, #32
 800aa38:	f040 8141 	bne.w	800acbe <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	6839      	ldr	r1, [r7, #0]
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	4798      	blx	r3
      break;
 800aa4a:	e13d      	b.n	800acc8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa54:	2b20      	cmp	r3, #32
 800aa56:	d10a      	bne.n	800aa6e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa5e:	689b      	ldr	r3, [r3, #8]
 800aa60:	6839      	ldr	r1, [r7, #0]
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	4798      	blx	r3
 800aa66:	4603      	mov	r3, r0
 800aa68:	73fb      	strb	r3, [r7, #15]

        return ret;
 800aa6a:	7bfb      	ldrb	r3, [r7, #15]
 800aa6c:	e12d      	b.n	800acca <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	785b      	ldrb	r3, [r3, #1]
 800aa72:	2b03      	cmp	r3, #3
 800aa74:	d007      	beq.n	800aa86 <USBD_StdEPReq+0x7a>
 800aa76:	2b03      	cmp	r3, #3
 800aa78:	f300 811b 	bgt.w	800acb2 <USBD_StdEPReq+0x2a6>
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d072      	beq.n	800ab66 <USBD_StdEPReq+0x15a>
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d03a      	beq.n	800aafa <USBD_StdEPReq+0xee>
 800aa84:	e115      	b.n	800acb2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa8c:	2b02      	cmp	r3, #2
 800aa8e:	d002      	beq.n	800aa96 <USBD_StdEPReq+0x8a>
 800aa90:	2b03      	cmp	r3, #3
 800aa92:	d015      	beq.n	800aac0 <USBD_StdEPReq+0xb4>
 800aa94:	e02b      	b.n	800aaee <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa96:	7bbb      	ldrb	r3, [r7, #14]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d00c      	beq.n	800aab6 <USBD_StdEPReq+0xaa>
 800aa9c:	7bbb      	ldrb	r3, [r7, #14]
 800aa9e:	2b80      	cmp	r3, #128	; 0x80
 800aaa0:	d009      	beq.n	800aab6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800aaa2:	7bbb      	ldrb	r3, [r7, #14]
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f001 f8ae 	bl	800bc08 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800aaac:	2180      	movs	r1, #128	; 0x80
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f001 f8aa 	bl	800bc08 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aab4:	e020      	b.n	800aaf8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800aab6:	6839      	ldr	r1, [r7, #0]
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 fc1f 	bl	800b2fc <USBD_CtlError>
              break;
 800aabe:	e01b      	b.n	800aaf8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	885b      	ldrh	r3, [r3, #2]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d10e      	bne.n	800aae6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800aac8:	7bbb      	ldrb	r3, [r7, #14]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d00b      	beq.n	800aae6 <USBD_StdEPReq+0xda>
 800aace:	7bbb      	ldrb	r3, [r7, #14]
 800aad0:	2b80      	cmp	r3, #128	; 0x80
 800aad2:	d008      	beq.n	800aae6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	88db      	ldrh	r3, [r3, #6]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d104      	bne.n	800aae6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800aadc:	7bbb      	ldrb	r3, [r7, #14]
 800aade:	4619      	mov	r1, r3
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f001 f891 	bl	800bc08 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 fcd1 	bl	800b48e <USBD_CtlSendStatus>

              break;
 800aaec:	e004      	b.n	800aaf8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800aaee:	6839      	ldr	r1, [r7, #0]
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 fc03 	bl	800b2fc <USBD_CtlError>
              break;
 800aaf6:	bf00      	nop
          }
          break;
 800aaf8:	e0e0      	b.n	800acbc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab00:	2b02      	cmp	r3, #2
 800ab02:	d002      	beq.n	800ab0a <USBD_StdEPReq+0xfe>
 800ab04:	2b03      	cmp	r3, #3
 800ab06:	d015      	beq.n	800ab34 <USBD_StdEPReq+0x128>
 800ab08:	e026      	b.n	800ab58 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab0a:	7bbb      	ldrb	r3, [r7, #14]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00c      	beq.n	800ab2a <USBD_StdEPReq+0x11e>
 800ab10:	7bbb      	ldrb	r3, [r7, #14]
 800ab12:	2b80      	cmp	r3, #128	; 0x80
 800ab14:	d009      	beq.n	800ab2a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ab16:	7bbb      	ldrb	r3, [r7, #14]
 800ab18:	4619      	mov	r1, r3
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f001 f874 	bl	800bc08 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ab20:	2180      	movs	r1, #128	; 0x80
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f001 f870 	bl	800bc08 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab28:	e01c      	b.n	800ab64 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800ab2a:	6839      	ldr	r1, [r7, #0]
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 fbe5 	bl	800b2fc <USBD_CtlError>
              break;
 800ab32:	e017      	b.n	800ab64 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	885b      	ldrh	r3, [r3, #2]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d112      	bne.n	800ab62 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ab3c:	7bbb      	ldrb	r3, [r7, #14]
 800ab3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d004      	beq.n	800ab50 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800ab46:	7bbb      	ldrb	r3, [r7, #14]
 800ab48:	4619      	mov	r1, r3
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f001 f87b 	bl	800bc46 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 fc9c 	bl	800b48e <USBD_CtlSendStatus>
              }
              break;
 800ab56:	e004      	b.n	800ab62 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800ab58:	6839      	ldr	r1, [r7, #0]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 fbce 	bl	800b2fc <USBD_CtlError>
              break;
 800ab60:	e000      	b.n	800ab64 <USBD_StdEPReq+0x158>
              break;
 800ab62:	bf00      	nop
          }
          break;
 800ab64:	e0aa      	b.n	800acbc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab6c:	2b02      	cmp	r3, #2
 800ab6e:	d002      	beq.n	800ab76 <USBD_StdEPReq+0x16a>
 800ab70:	2b03      	cmp	r3, #3
 800ab72:	d032      	beq.n	800abda <USBD_StdEPReq+0x1ce>
 800ab74:	e097      	b.n	800aca6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab76:	7bbb      	ldrb	r3, [r7, #14]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d007      	beq.n	800ab8c <USBD_StdEPReq+0x180>
 800ab7c:	7bbb      	ldrb	r3, [r7, #14]
 800ab7e:	2b80      	cmp	r3, #128	; 0x80
 800ab80:	d004      	beq.n	800ab8c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800ab82:	6839      	ldr	r1, [r7, #0]
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 fbb9 	bl	800b2fc <USBD_CtlError>
                break;
 800ab8a:	e091      	b.n	800acb0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	da0b      	bge.n	800abac <USBD_StdEPReq+0x1a0>
 800ab94:	7bbb      	ldrb	r3, [r7, #14]
 800ab96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	4413      	add	r3, r2
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	3310      	adds	r3, #16
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	4413      	add	r3, r2
 800aba8:	3304      	adds	r3, #4
 800abaa:	e00b      	b.n	800abc4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800abac:	7bbb      	ldrb	r3, [r7, #14]
 800abae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abb2:	4613      	mov	r3, r2
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	4413      	add	r3, r2
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	4413      	add	r3, r2
 800abc2:	3304      	adds	r3, #4
 800abc4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	2200      	movs	r2, #0
 800abca:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	2202      	movs	r2, #2
 800abd0:	4619      	mov	r1, r3
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 fbfd 	bl	800b3d2 <USBD_CtlSendData>
              break;
 800abd8:	e06a      	b.n	800acb0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800abda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	da11      	bge.n	800ac06 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800abe2:	7bbb      	ldrb	r3, [r7, #14]
 800abe4:	f003 020f 	and.w	r2, r3, #15
 800abe8:	6879      	ldr	r1, [r7, #4]
 800abea:	4613      	mov	r3, r2
 800abec:	009b      	lsls	r3, r3, #2
 800abee:	4413      	add	r3, r2
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	440b      	add	r3, r1
 800abf4:	3318      	adds	r3, #24
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d117      	bne.n	800ac2c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800abfc:	6839      	ldr	r1, [r7, #0]
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 fb7c 	bl	800b2fc <USBD_CtlError>
                  break;
 800ac04:	e054      	b.n	800acb0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ac06:	7bbb      	ldrb	r3, [r7, #14]
 800ac08:	f003 020f 	and.w	r2, r3, #15
 800ac0c:	6879      	ldr	r1, [r7, #4]
 800ac0e:	4613      	mov	r3, r2
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	4413      	add	r3, r2
 800ac14:	009b      	lsls	r3, r3, #2
 800ac16:	440b      	add	r3, r1
 800ac18:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d104      	bne.n	800ac2c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ac22:	6839      	ldr	r1, [r7, #0]
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 fb69 	bl	800b2fc <USBD_CtlError>
                  break;
 800ac2a:	e041      	b.n	800acb0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	da0b      	bge.n	800ac4c <USBD_StdEPReq+0x240>
 800ac34:	7bbb      	ldrb	r3, [r7, #14]
 800ac36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac3a:	4613      	mov	r3, r2
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	4413      	add	r3, r2
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	3310      	adds	r3, #16
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	4413      	add	r3, r2
 800ac48:	3304      	adds	r3, #4
 800ac4a:	e00b      	b.n	800ac64 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac4c:	7bbb      	ldrb	r3, [r7, #14]
 800ac4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac52:	4613      	mov	r3, r2
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	4413      	add	r3, r2
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	4413      	add	r3, r2
 800ac62:	3304      	adds	r3, #4
 800ac64:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ac66:	7bbb      	ldrb	r3, [r7, #14]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d002      	beq.n	800ac72 <USBD_StdEPReq+0x266>
 800ac6c:	7bbb      	ldrb	r3, [r7, #14]
 800ac6e:	2b80      	cmp	r3, #128	; 0x80
 800ac70:	d103      	bne.n	800ac7a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	2200      	movs	r2, #0
 800ac76:	601a      	str	r2, [r3, #0]
 800ac78:	e00e      	b.n	800ac98 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ac7a:	7bbb      	ldrb	r3, [r7, #14]
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f001 f800 	bl	800bc84 <USBD_LL_IsStallEP>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d003      	beq.n	800ac92 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	601a      	str	r2, [r3, #0]
 800ac90:	e002      	b.n	800ac98 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	2200      	movs	r2, #0
 800ac96:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	2202      	movs	r2, #2
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 fb97 	bl	800b3d2 <USBD_CtlSendData>
              break;
 800aca4:	e004      	b.n	800acb0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800aca6:	6839      	ldr	r1, [r7, #0]
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 fb27 	bl	800b2fc <USBD_CtlError>
              break;
 800acae:	bf00      	nop
          }
          break;
 800acb0:	e004      	b.n	800acbc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800acb2:	6839      	ldr	r1, [r7, #0]
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 fb21 	bl	800b2fc <USBD_CtlError>
          break;
 800acba:	bf00      	nop
      }
      break;
 800acbc:	e004      	b.n	800acc8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800acbe:	6839      	ldr	r1, [r7, #0]
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 fb1b 	bl	800b2fc <USBD_CtlError>
      break;
 800acc6:	bf00      	nop
  }

  return ret;
 800acc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800acca:	4618      	mov	r0, r3
 800accc:	3710      	adds	r7, #16
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
	...

0800acd4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b084      	sub	sp, #16
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800acde:	2300      	movs	r3, #0
 800ace0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ace2:	2300      	movs	r3, #0
 800ace4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ace6:	2300      	movs	r3, #0
 800ace8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	885b      	ldrh	r3, [r3, #2]
 800acee:	0a1b      	lsrs	r3, r3, #8
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	3b01      	subs	r3, #1
 800acf4:	2b06      	cmp	r3, #6
 800acf6:	f200 8128 	bhi.w	800af4a <USBD_GetDescriptor+0x276>
 800acfa:	a201      	add	r2, pc, #4	; (adr r2, 800ad00 <USBD_GetDescriptor+0x2c>)
 800acfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad00:	0800ad1d 	.word	0x0800ad1d
 800ad04:	0800ad35 	.word	0x0800ad35
 800ad08:	0800ad75 	.word	0x0800ad75
 800ad0c:	0800af4b 	.word	0x0800af4b
 800ad10:	0800af4b 	.word	0x0800af4b
 800ad14:	0800aeeb 	.word	0x0800aeeb
 800ad18:	0800af17 	.word	0x0800af17
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	7c12      	ldrb	r2, [r2, #16]
 800ad28:	f107 0108 	add.w	r1, r7, #8
 800ad2c:	4610      	mov	r0, r2
 800ad2e:	4798      	blx	r3
 800ad30:	60f8      	str	r0, [r7, #12]
      break;
 800ad32:	e112      	b.n	800af5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	7c1b      	ldrb	r3, [r3, #16]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d10d      	bne.n	800ad58 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad44:	f107 0208 	add.w	r2, r7, #8
 800ad48:	4610      	mov	r0, r2
 800ad4a:	4798      	blx	r3
 800ad4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	3301      	adds	r3, #1
 800ad52:	2202      	movs	r2, #2
 800ad54:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ad56:	e100      	b.n	800af5a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad60:	f107 0208 	add.w	r2, r7, #8
 800ad64:	4610      	mov	r0, r2
 800ad66:	4798      	blx	r3
 800ad68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	2202      	movs	r2, #2
 800ad70:	701a      	strb	r2, [r3, #0]
      break;
 800ad72:	e0f2      	b.n	800af5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	885b      	ldrh	r3, [r3, #2]
 800ad78:	b2db      	uxtb	r3, r3
 800ad7a:	2b05      	cmp	r3, #5
 800ad7c:	f200 80ac 	bhi.w	800aed8 <USBD_GetDescriptor+0x204>
 800ad80:	a201      	add	r2, pc, #4	; (adr r2, 800ad88 <USBD_GetDescriptor+0xb4>)
 800ad82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad86:	bf00      	nop
 800ad88:	0800ada1 	.word	0x0800ada1
 800ad8c:	0800add5 	.word	0x0800add5
 800ad90:	0800ae09 	.word	0x0800ae09
 800ad94:	0800ae3d 	.word	0x0800ae3d
 800ad98:	0800ae71 	.word	0x0800ae71
 800ad9c:	0800aea5 	.word	0x0800aea5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00b      	beq.n	800adc4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	7c12      	ldrb	r2, [r2, #16]
 800adb8:	f107 0108 	add.w	r1, r7, #8
 800adbc:	4610      	mov	r0, r2
 800adbe:	4798      	blx	r3
 800adc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adc2:	e091      	b.n	800aee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800adc4:	6839      	ldr	r1, [r7, #0]
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 fa98 	bl	800b2fc <USBD_CtlError>
            err++;
 800adcc:	7afb      	ldrb	r3, [r7, #11]
 800adce:	3301      	adds	r3, #1
 800add0:	72fb      	strb	r3, [r7, #11]
          break;
 800add2:	e089      	b.n	800aee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d00b      	beq.n	800adf8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	7c12      	ldrb	r2, [r2, #16]
 800adec:	f107 0108 	add.w	r1, r7, #8
 800adf0:	4610      	mov	r0, r2
 800adf2:	4798      	blx	r3
 800adf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adf6:	e077      	b.n	800aee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800adf8:	6839      	ldr	r1, [r7, #0]
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 fa7e 	bl	800b2fc <USBD_CtlError>
            err++;
 800ae00:	7afb      	ldrb	r3, [r7, #11]
 800ae02:	3301      	adds	r3, #1
 800ae04:	72fb      	strb	r3, [r7, #11]
          break;
 800ae06:	e06f      	b.n	800aee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae0e:	68db      	ldr	r3, [r3, #12]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d00b      	beq.n	800ae2c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae1a:	68db      	ldr	r3, [r3, #12]
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	7c12      	ldrb	r2, [r2, #16]
 800ae20:	f107 0108 	add.w	r1, r7, #8
 800ae24:	4610      	mov	r0, r2
 800ae26:	4798      	blx	r3
 800ae28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae2a:	e05d      	b.n	800aee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae2c:	6839      	ldr	r1, [r7, #0]
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 fa64 	bl	800b2fc <USBD_CtlError>
            err++;
 800ae34:	7afb      	ldrb	r3, [r7, #11]
 800ae36:	3301      	adds	r3, #1
 800ae38:	72fb      	strb	r3, [r7, #11]
          break;
 800ae3a:	e055      	b.n	800aee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae42:	691b      	ldr	r3, [r3, #16]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00b      	beq.n	800ae60 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae4e:	691b      	ldr	r3, [r3, #16]
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	7c12      	ldrb	r2, [r2, #16]
 800ae54:	f107 0108 	add.w	r1, r7, #8
 800ae58:	4610      	mov	r0, r2
 800ae5a:	4798      	blx	r3
 800ae5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae5e:	e043      	b.n	800aee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae60:	6839      	ldr	r1, [r7, #0]
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 fa4a 	bl	800b2fc <USBD_CtlError>
            err++;
 800ae68:	7afb      	ldrb	r3, [r7, #11]
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	72fb      	strb	r3, [r7, #11]
          break;
 800ae6e:	e03b      	b.n	800aee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae76:	695b      	ldr	r3, [r3, #20]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d00b      	beq.n	800ae94 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae82:	695b      	ldr	r3, [r3, #20]
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	7c12      	ldrb	r2, [r2, #16]
 800ae88:	f107 0108 	add.w	r1, r7, #8
 800ae8c:	4610      	mov	r0, r2
 800ae8e:	4798      	blx	r3
 800ae90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae92:	e029      	b.n	800aee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae94:	6839      	ldr	r1, [r7, #0]
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 fa30 	bl	800b2fc <USBD_CtlError>
            err++;
 800ae9c:	7afb      	ldrb	r3, [r7, #11]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	72fb      	strb	r3, [r7, #11]
          break;
 800aea2:	e021      	b.n	800aee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aeaa:	699b      	ldr	r3, [r3, #24]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d00b      	beq.n	800aec8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aeb6:	699b      	ldr	r3, [r3, #24]
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	7c12      	ldrb	r2, [r2, #16]
 800aebc:	f107 0108 	add.w	r1, r7, #8
 800aec0:	4610      	mov	r0, r2
 800aec2:	4798      	blx	r3
 800aec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aec6:	e00f      	b.n	800aee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aec8:	6839      	ldr	r1, [r7, #0]
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 fa16 	bl	800b2fc <USBD_CtlError>
            err++;
 800aed0:	7afb      	ldrb	r3, [r7, #11]
 800aed2:	3301      	adds	r3, #1
 800aed4:	72fb      	strb	r3, [r7, #11]
          break;
 800aed6:	e007      	b.n	800aee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800aed8:	6839      	ldr	r1, [r7, #0]
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 fa0e 	bl	800b2fc <USBD_CtlError>
          err++;
 800aee0:	7afb      	ldrb	r3, [r7, #11]
 800aee2:	3301      	adds	r3, #1
 800aee4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800aee6:	e038      	b.n	800af5a <USBD_GetDescriptor+0x286>
 800aee8:	e037      	b.n	800af5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	7c1b      	ldrb	r3, [r3, #16]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d109      	bne.n	800af06 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aefa:	f107 0208 	add.w	r2, r7, #8
 800aefe:	4610      	mov	r0, r2
 800af00:	4798      	blx	r3
 800af02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af04:	e029      	b.n	800af5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800af06:	6839      	ldr	r1, [r7, #0]
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 f9f7 	bl	800b2fc <USBD_CtlError>
        err++;
 800af0e:	7afb      	ldrb	r3, [r7, #11]
 800af10:	3301      	adds	r3, #1
 800af12:	72fb      	strb	r3, [r7, #11]
      break;
 800af14:	e021      	b.n	800af5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	7c1b      	ldrb	r3, [r3, #16]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d10d      	bne.n	800af3a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af26:	f107 0208 	add.w	r2, r7, #8
 800af2a:	4610      	mov	r0, r2
 800af2c:	4798      	blx	r3
 800af2e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	3301      	adds	r3, #1
 800af34:	2207      	movs	r2, #7
 800af36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af38:	e00f      	b.n	800af5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800af3a:	6839      	ldr	r1, [r7, #0]
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 f9dd 	bl	800b2fc <USBD_CtlError>
        err++;
 800af42:	7afb      	ldrb	r3, [r7, #11]
 800af44:	3301      	adds	r3, #1
 800af46:	72fb      	strb	r3, [r7, #11]
      break;
 800af48:	e007      	b.n	800af5a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800af4a:	6839      	ldr	r1, [r7, #0]
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 f9d5 	bl	800b2fc <USBD_CtlError>
      err++;
 800af52:	7afb      	ldrb	r3, [r7, #11]
 800af54:	3301      	adds	r3, #1
 800af56:	72fb      	strb	r3, [r7, #11]
      break;
 800af58:	bf00      	nop
  }

  if (err != 0U)
 800af5a:	7afb      	ldrb	r3, [r7, #11]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d11c      	bne.n	800af9a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800af60:	893b      	ldrh	r3, [r7, #8]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d011      	beq.n	800af8a <USBD_GetDescriptor+0x2b6>
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	88db      	ldrh	r3, [r3, #6]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00d      	beq.n	800af8a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	88da      	ldrh	r2, [r3, #6]
 800af72:	893b      	ldrh	r3, [r7, #8]
 800af74:	4293      	cmp	r3, r2
 800af76:	bf28      	it	cs
 800af78:	4613      	movcs	r3, r2
 800af7a:	b29b      	uxth	r3, r3
 800af7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800af7e:	893b      	ldrh	r3, [r7, #8]
 800af80:	461a      	mov	r2, r3
 800af82:	68f9      	ldr	r1, [r7, #12]
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f000 fa24 	bl	800b3d2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	88db      	ldrh	r3, [r3, #6]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d104      	bne.n	800af9c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 fa7b 	bl	800b48e <USBD_CtlSendStatus>
 800af98:	e000      	b.n	800af9c <USBD_GetDescriptor+0x2c8>
    return;
 800af9a:	bf00      	nop
    }
  }
}
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop

0800afa4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	889b      	ldrh	r3, [r3, #4]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d130      	bne.n	800b018 <USBD_SetAddress+0x74>
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	88db      	ldrh	r3, [r3, #6]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d12c      	bne.n	800b018 <USBD_SetAddress+0x74>
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	885b      	ldrh	r3, [r3, #2]
 800afc2:	2b7f      	cmp	r3, #127	; 0x7f
 800afc4:	d828      	bhi.n	800b018 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	885b      	ldrh	r3, [r3, #2]
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afd8:	2b03      	cmp	r3, #3
 800afda:	d104      	bne.n	800afe6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800afdc:	6839      	ldr	r1, [r7, #0]
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 f98c 	bl	800b2fc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afe4:	e01d      	b.n	800b022 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	7bfa      	ldrb	r2, [r7, #15]
 800afea:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800afee:	7bfb      	ldrb	r3, [r7, #15]
 800aff0:	4619      	mov	r1, r3
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 fe73 	bl	800bcde <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 fa48 	bl	800b48e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800affe:	7bfb      	ldrb	r3, [r7, #15]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d004      	beq.n	800b00e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2202      	movs	r2, #2
 800b008:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b00c:	e009      	b.n	800b022 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2201      	movs	r2, #1
 800b012:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b016:	e004      	b.n	800b022 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b018:	6839      	ldr	r1, [r7, #0]
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 f96e 	bl	800b2fc <USBD_CtlError>
  }
}
 800b020:	bf00      	nop
 800b022:	bf00      	nop
 800b024:	3710      	adds	r7, #16
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
	...

0800b02c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b082      	sub	sp, #8
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	885b      	ldrh	r3, [r3, #2]
 800b03a:	b2da      	uxtb	r2, r3
 800b03c:	4b41      	ldr	r3, [pc, #260]	; (800b144 <USBD_SetConfig+0x118>)
 800b03e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b040:	4b40      	ldr	r3, [pc, #256]	; (800b144 <USBD_SetConfig+0x118>)
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	2b01      	cmp	r3, #1
 800b046:	d904      	bls.n	800b052 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b048:	6839      	ldr	r1, [r7, #0]
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 f956 	bl	800b2fc <USBD_CtlError>
 800b050:	e075      	b.n	800b13e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b058:	2b02      	cmp	r3, #2
 800b05a:	d002      	beq.n	800b062 <USBD_SetConfig+0x36>
 800b05c:	2b03      	cmp	r3, #3
 800b05e:	d023      	beq.n	800b0a8 <USBD_SetConfig+0x7c>
 800b060:	e062      	b.n	800b128 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b062:	4b38      	ldr	r3, [pc, #224]	; (800b144 <USBD_SetConfig+0x118>)
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d01a      	beq.n	800b0a0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b06a:	4b36      	ldr	r3, [pc, #216]	; (800b144 <USBD_SetConfig+0x118>)
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	461a      	mov	r2, r3
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2203      	movs	r2, #3
 800b078:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b07c:	4b31      	ldr	r3, [pc, #196]	; (800b144 <USBD_SetConfig+0x118>)
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	4619      	mov	r1, r3
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f7ff f9e4 	bl	800a450 <USBD_SetClassConfig>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b02      	cmp	r3, #2
 800b08c:	d104      	bne.n	800b098 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b08e:	6839      	ldr	r1, [r7, #0]
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 f933 	bl	800b2fc <USBD_CtlError>
            return;
 800b096:	e052      	b.n	800b13e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f000 f9f8 	bl	800b48e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b09e:	e04e      	b.n	800b13e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 f9f4 	bl	800b48e <USBD_CtlSendStatus>
        break;
 800b0a6:	e04a      	b.n	800b13e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b0a8:	4b26      	ldr	r3, [pc, #152]	; (800b144 <USBD_SetConfig+0x118>)
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d112      	bne.n	800b0d6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2202      	movs	r2, #2
 800b0b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b0b8:	4b22      	ldr	r3, [pc, #136]	; (800b144 <USBD_SetConfig+0x118>)
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	461a      	mov	r2, r3
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b0c2:	4b20      	ldr	r3, [pc, #128]	; (800b144 <USBD_SetConfig+0x118>)
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f7ff f9e0 	bl	800a48e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 f9dd 	bl	800b48e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b0d4:	e033      	b.n	800b13e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b0d6:	4b1b      	ldr	r3, [pc, #108]	; (800b144 <USBD_SetConfig+0x118>)
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	461a      	mov	r2, r3
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d01d      	beq.n	800b120 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	b2db      	uxtb	r3, r3
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f7ff f9ce 	bl	800a48e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b0f2:	4b14      	ldr	r3, [pc, #80]	; (800b144 <USBD_SetConfig+0x118>)
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b0fc:	4b11      	ldr	r3, [pc, #68]	; (800b144 <USBD_SetConfig+0x118>)
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	4619      	mov	r1, r3
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f7ff f9a4 	bl	800a450 <USBD_SetClassConfig>
 800b108:	4603      	mov	r3, r0
 800b10a:	2b02      	cmp	r3, #2
 800b10c:	d104      	bne.n	800b118 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b10e:	6839      	ldr	r1, [r7, #0]
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 f8f3 	bl	800b2fc <USBD_CtlError>
            return;
 800b116:	e012      	b.n	800b13e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 f9b8 	bl	800b48e <USBD_CtlSendStatus>
        break;
 800b11e:	e00e      	b.n	800b13e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 f9b4 	bl	800b48e <USBD_CtlSendStatus>
        break;
 800b126:	e00a      	b.n	800b13e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b128:	6839      	ldr	r1, [r7, #0]
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 f8e6 	bl	800b2fc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b130:	4b04      	ldr	r3, [pc, #16]	; (800b144 <USBD_SetConfig+0x118>)
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	4619      	mov	r1, r3
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f7ff f9a9 	bl	800a48e <USBD_ClrClassConfig>
        break;
 800b13c:	bf00      	nop
    }
  }
}
 800b13e:	3708      	adds	r7, #8
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}
 800b144:	20000379 	.word	0x20000379

0800b148 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b082      	sub	sp, #8
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	88db      	ldrh	r3, [r3, #6]
 800b156:	2b01      	cmp	r3, #1
 800b158:	d004      	beq.n	800b164 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b15a:	6839      	ldr	r1, [r7, #0]
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 f8cd 	bl	800b2fc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b162:	e022      	b.n	800b1aa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b16a:	2b02      	cmp	r3, #2
 800b16c:	dc02      	bgt.n	800b174 <USBD_GetConfig+0x2c>
 800b16e:	2b00      	cmp	r3, #0
 800b170:	dc03      	bgt.n	800b17a <USBD_GetConfig+0x32>
 800b172:	e015      	b.n	800b1a0 <USBD_GetConfig+0x58>
 800b174:	2b03      	cmp	r3, #3
 800b176:	d00b      	beq.n	800b190 <USBD_GetConfig+0x48>
 800b178:	e012      	b.n	800b1a0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	3308      	adds	r3, #8
 800b184:	2201      	movs	r2, #1
 800b186:	4619      	mov	r1, r3
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 f922 	bl	800b3d2 <USBD_CtlSendData>
        break;
 800b18e:	e00c      	b.n	800b1aa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	3304      	adds	r3, #4
 800b194:	2201      	movs	r2, #1
 800b196:	4619      	mov	r1, r3
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 f91a 	bl	800b3d2 <USBD_CtlSendData>
        break;
 800b19e:	e004      	b.n	800b1aa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b1a0:	6839      	ldr	r1, [r7, #0]
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 f8aa 	bl	800b2fc <USBD_CtlError>
        break;
 800b1a8:	bf00      	nop
}
 800b1aa:	bf00      	nop
 800b1ac:	3708      	adds	r7, #8
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}

0800b1b2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1b2:	b580      	push	{r7, lr}
 800b1b4:	b082      	sub	sp, #8
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
 800b1ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1c2:	3b01      	subs	r3, #1
 800b1c4:	2b02      	cmp	r3, #2
 800b1c6:	d81e      	bhi.n	800b206 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	88db      	ldrh	r3, [r3, #6]
 800b1cc:	2b02      	cmp	r3, #2
 800b1ce:	d004      	beq.n	800b1da <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b1d0:	6839      	ldr	r1, [r7, #0]
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 f892 	bl	800b2fc <USBD_CtlError>
        break;
 800b1d8:	e01a      	b.n	800b210 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2201      	movs	r2, #1
 800b1de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d005      	beq.n	800b1f6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	f043 0202 	orr.w	r2, r3, #2
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	330c      	adds	r3, #12
 800b1fa:	2202      	movs	r2, #2
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 f8e7 	bl	800b3d2 <USBD_CtlSendData>
      break;
 800b204:	e004      	b.n	800b210 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b206:	6839      	ldr	r1, [r7, #0]
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 f877 	bl	800b2fc <USBD_CtlError>
      break;
 800b20e:	bf00      	nop
  }
}
 800b210:	bf00      	nop
 800b212:	3708      	adds	r7, #8
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	885b      	ldrh	r3, [r3, #2]
 800b226:	2b01      	cmp	r3, #1
 800b228:	d106      	bne.n	800b238 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2201      	movs	r2, #1
 800b22e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 f92b 	bl	800b48e <USBD_CtlSendStatus>
  }
}
 800b238:	bf00      	nop
 800b23a:	3708      	adds	r7, #8
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b250:	3b01      	subs	r3, #1
 800b252:	2b02      	cmp	r3, #2
 800b254:	d80b      	bhi.n	800b26e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	885b      	ldrh	r3, [r3, #2]
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d10c      	bne.n	800b278 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2200      	movs	r2, #0
 800b262:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 f911 	bl	800b48e <USBD_CtlSendStatus>
      }
      break;
 800b26c:	e004      	b.n	800b278 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b26e:	6839      	ldr	r1, [r7, #0]
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f000 f843 	bl	800b2fc <USBD_CtlError>
      break;
 800b276:	e000      	b.n	800b27a <USBD_ClrFeature+0x3a>
      break;
 800b278:	bf00      	nop
  }
}
 800b27a:	bf00      	nop
 800b27c:	3708      	adds	r7, #8
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}

0800b282 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b282:	b480      	push	{r7}
 800b284:	b083      	sub	sp, #12
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
 800b28a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	781a      	ldrb	r2, [r3, #0]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	785a      	ldrb	r2, [r3, #1]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	3302      	adds	r3, #2
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	b29a      	uxth	r2, r3
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	3303      	adds	r3, #3
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	021b      	lsls	r3, r3, #8
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	4413      	add	r3, r2
 800b2b2:	b29a      	uxth	r2, r3
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	3304      	adds	r3, #4
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	b29a      	uxth	r2, r3
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	3305      	adds	r3, #5
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	021b      	lsls	r3, r3, #8
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	4413      	add	r3, r2
 800b2ce:	b29a      	uxth	r2, r3
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	3306      	adds	r3, #6
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	b29a      	uxth	r2, r3
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	3307      	adds	r3, #7
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	b29b      	uxth	r3, r3
 800b2e4:	021b      	lsls	r3, r3, #8
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	4413      	add	r3, r2
 800b2ea:	b29a      	uxth	r2, r3
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	80da      	strh	r2, [r3, #6]

}
 800b2f0:	bf00      	nop
 800b2f2:	370c      	adds	r7, #12
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr

0800b2fc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b306:	2180      	movs	r1, #128	; 0x80
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 fc7d 	bl	800bc08 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b30e:	2100      	movs	r1, #0
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 fc79 	bl	800bc08 <USBD_LL_StallEP>
}
 800b316:	bf00      	nop
 800b318:	3708      	adds	r7, #8
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}

0800b31e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b31e:	b580      	push	{r7, lr}
 800b320:	b086      	sub	sp, #24
 800b322:	af00      	add	r7, sp, #0
 800b324:	60f8      	str	r0, [r7, #12]
 800b326:	60b9      	str	r1, [r7, #8]
 800b328:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b32a:	2300      	movs	r3, #0
 800b32c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d032      	beq.n	800b39a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b334:	68f8      	ldr	r0, [r7, #12]
 800b336:	f000 f834 	bl	800b3a2 <USBD_GetLen>
 800b33a:	4603      	mov	r3, r0
 800b33c:	3301      	adds	r3, #1
 800b33e:	b29b      	uxth	r3, r3
 800b340:	005b      	lsls	r3, r3, #1
 800b342:	b29a      	uxth	r2, r3
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b348:	7dfb      	ldrb	r3, [r7, #23]
 800b34a:	1c5a      	adds	r2, r3, #1
 800b34c:	75fa      	strb	r2, [r7, #23]
 800b34e:	461a      	mov	r2, r3
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	4413      	add	r3, r2
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	7812      	ldrb	r2, [r2, #0]
 800b358:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b35a:	7dfb      	ldrb	r3, [r7, #23]
 800b35c:	1c5a      	adds	r2, r3, #1
 800b35e:	75fa      	strb	r2, [r7, #23]
 800b360:	461a      	mov	r2, r3
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	4413      	add	r3, r2
 800b366:	2203      	movs	r2, #3
 800b368:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b36a:	e012      	b.n	800b392 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	1c5a      	adds	r2, r3, #1
 800b370:	60fa      	str	r2, [r7, #12]
 800b372:	7dfa      	ldrb	r2, [r7, #23]
 800b374:	1c51      	adds	r1, r2, #1
 800b376:	75f9      	strb	r1, [r7, #23]
 800b378:	4611      	mov	r1, r2
 800b37a:	68ba      	ldr	r2, [r7, #8]
 800b37c:	440a      	add	r2, r1
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b382:	7dfb      	ldrb	r3, [r7, #23]
 800b384:	1c5a      	adds	r2, r3, #1
 800b386:	75fa      	strb	r2, [r7, #23]
 800b388:	461a      	mov	r2, r3
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	4413      	add	r3, r2
 800b38e:	2200      	movs	r2, #0
 800b390:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d1e8      	bne.n	800b36c <USBD_GetString+0x4e>
    }
  }
}
 800b39a:	bf00      	nop
 800b39c:	3718      	adds	r7, #24
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b3a2:	b480      	push	{r7}
 800b3a4:	b085      	sub	sp, #20
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b3ae:	e005      	b.n	800b3bc <USBD_GetLen+0x1a>
  {
    len++;
 800b3b0:	7bfb      	ldrb	r3, [r7, #15]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d1f5      	bne.n	800b3b0 <USBD_GetLen+0xe>
  }

  return len;
 800b3c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3714      	adds	r7, #20
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr

0800b3d2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b3d2:	b580      	push	{r7, lr}
 800b3d4:	b084      	sub	sp, #16
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	60f8      	str	r0, [r7, #12]
 800b3da:	60b9      	str	r1, [r7, #8]
 800b3dc:	4613      	mov	r3, r2
 800b3de:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2202      	movs	r2, #2
 800b3e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b3e8:	88fa      	ldrh	r2, [r7, #6]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b3ee:	88fa      	ldrh	r2, [r7, #6]
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b3f4:	88fb      	ldrh	r3, [r7, #6]
 800b3f6:	68ba      	ldr	r2, [r7, #8]
 800b3f8:	2100      	movs	r1, #0
 800b3fa:	68f8      	ldr	r0, [r7, #12]
 800b3fc:	f000 fc8e 	bl	800bd1c <USBD_LL_Transmit>

  return USBD_OK;
 800b400:	2300      	movs	r3, #0
}
 800b402:	4618      	mov	r0, r3
 800b404:	3710      	adds	r7, #16
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}

0800b40a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b40a:	b580      	push	{r7, lr}
 800b40c:	b084      	sub	sp, #16
 800b40e:	af00      	add	r7, sp, #0
 800b410:	60f8      	str	r0, [r7, #12]
 800b412:	60b9      	str	r1, [r7, #8]
 800b414:	4613      	mov	r3, r2
 800b416:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b418:	88fb      	ldrh	r3, [r7, #6]
 800b41a:	68ba      	ldr	r2, [r7, #8]
 800b41c:	2100      	movs	r1, #0
 800b41e:	68f8      	ldr	r0, [r7, #12]
 800b420:	f000 fc7c 	bl	800bd1c <USBD_LL_Transmit>

  return USBD_OK;
 800b424:	2300      	movs	r3, #0
}
 800b426:	4618      	mov	r0, r3
 800b428:	3710      	adds	r7, #16
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}

0800b42e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b42e:	b580      	push	{r7, lr}
 800b430:	b084      	sub	sp, #16
 800b432:	af00      	add	r7, sp, #0
 800b434:	60f8      	str	r0, [r7, #12]
 800b436:	60b9      	str	r1, [r7, #8]
 800b438:	4613      	mov	r3, r2
 800b43a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2203      	movs	r2, #3
 800b440:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b444:	88fa      	ldrh	r2, [r7, #6]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b44c:	88fa      	ldrh	r2, [r7, #6]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b454:	88fb      	ldrh	r3, [r7, #6]
 800b456:	68ba      	ldr	r2, [r7, #8]
 800b458:	2100      	movs	r1, #0
 800b45a:	68f8      	ldr	r0, [r7, #12]
 800b45c:	f000 fc81 	bl	800bd62 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b460:	2300      	movs	r3, #0
}
 800b462:	4618      	mov	r0, r3
 800b464:	3710      	adds	r7, #16
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}

0800b46a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b46a:	b580      	push	{r7, lr}
 800b46c:	b084      	sub	sp, #16
 800b46e:	af00      	add	r7, sp, #0
 800b470:	60f8      	str	r0, [r7, #12]
 800b472:	60b9      	str	r1, [r7, #8]
 800b474:	4613      	mov	r3, r2
 800b476:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b478:	88fb      	ldrh	r3, [r7, #6]
 800b47a:	68ba      	ldr	r2, [r7, #8]
 800b47c:	2100      	movs	r1, #0
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	f000 fc6f 	bl	800bd62 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b484:	2300      	movs	r3, #0
}
 800b486:	4618      	mov	r0, r3
 800b488:	3710      	adds	r7, #16
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b48e:	b580      	push	{r7, lr}
 800b490:	b082      	sub	sp, #8
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2204      	movs	r2, #4
 800b49a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b49e:	2300      	movs	r3, #0
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 fc39 	bl	800bd1c <USBD_LL_Transmit>

  return USBD_OK;
 800b4aa:	2300      	movs	r3, #0
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3708      	adds	r7, #8
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b082      	sub	sp, #8
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2205      	movs	r2, #5
 800b4c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	2100      	movs	r1, #0
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 fc49 	bl	800bd62 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4d0:	2300      	movs	r3, #0
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3708      	adds	r7, #8
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
	...

0800b4dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	4912      	ldr	r1, [pc, #72]	; (800b52c <MX_USB_DEVICE_Init+0x50>)
 800b4e4:	4812      	ldr	r0, [pc, #72]	; (800b530 <MX_USB_DEVICE_Init+0x54>)
 800b4e6:	f7fe ff57 	bl	800a398 <USBD_Init>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d001      	beq.n	800b4f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b4f0:	f7f5 fab2 	bl	8000a58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b4f4:	490f      	ldr	r1, [pc, #60]	; (800b534 <MX_USB_DEVICE_Init+0x58>)
 800b4f6:	480e      	ldr	r0, [pc, #56]	; (800b530 <MX_USB_DEVICE_Init+0x54>)
 800b4f8:	f7fe ff79 	bl	800a3ee <USBD_RegisterClass>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d001      	beq.n	800b506 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b502:	f7f5 faa9 	bl	8000a58 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b506:	490c      	ldr	r1, [pc, #48]	; (800b538 <MX_USB_DEVICE_Init+0x5c>)
 800b508:	4809      	ldr	r0, [pc, #36]	; (800b530 <MX_USB_DEVICE_Init+0x54>)
 800b50a:	f7fe fea7 	bl	800a25c <USBD_CDC_RegisterInterface>
 800b50e:	4603      	mov	r3, r0
 800b510:	2b00      	cmp	r3, #0
 800b512:	d001      	beq.n	800b518 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b514:	f7f5 faa0 	bl	8000a58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b518:	4805      	ldr	r0, [pc, #20]	; (800b530 <MX_USB_DEVICE_Init+0x54>)
 800b51a:	f7fe ff82 	bl	800a422 <USBD_Start>
 800b51e:	4603      	mov	r3, r0
 800b520:	2b00      	cmp	r3, #0
 800b522:	d001      	beq.n	800b528 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b524:	f7f5 fa98 	bl	8000a58 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b528:	bf00      	nop
 800b52a:	bd80      	pop	{r7, pc}
 800b52c:	20000130 	.word	0x20000130
 800b530:	2000037c 	.word	0x2000037c
 800b534:	2000001c 	.word	0x2000001c
 800b538:	20000120 	.word	0x20000120

0800b53c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b540:	2200      	movs	r2, #0
 800b542:	4905      	ldr	r1, [pc, #20]	; (800b558 <CDC_Init_FS+0x1c>)
 800b544:	4805      	ldr	r0, [pc, #20]	; (800b55c <CDC_Init_FS+0x20>)
 800b546:	f7fe fea0 	bl	800a28a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b54a:	4905      	ldr	r1, [pc, #20]	; (800b560 <CDC_Init_FS+0x24>)
 800b54c:	4803      	ldr	r0, [pc, #12]	; (800b55c <CDC_Init_FS+0x20>)
 800b54e:	f7fe feb6 	bl	800a2be <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b552:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b554:	4618      	mov	r0, r3
 800b556:	bd80      	pop	{r7, pc}
 800b558:	20000a40 	.word	0x20000a40
 800b55c:	2000037c 	.word	0x2000037c
 800b560:	20000640 	.word	0x20000640

0800b564 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b564:	b480      	push	{r7}
 800b566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b568:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
 800b57a:	4603      	mov	r3, r0
 800b57c:	6039      	str	r1, [r7, #0]
 800b57e:	71fb      	strb	r3, [r7, #7]
 800b580:	4613      	mov	r3, r2
 800b582:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b584:	79fb      	ldrb	r3, [r7, #7]
 800b586:	2b23      	cmp	r3, #35	; 0x23
 800b588:	d84a      	bhi.n	800b620 <CDC_Control_FS+0xac>
 800b58a:	a201      	add	r2, pc, #4	; (adr r2, 800b590 <CDC_Control_FS+0x1c>)
 800b58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b590:	0800b621 	.word	0x0800b621
 800b594:	0800b621 	.word	0x0800b621
 800b598:	0800b621 	.word	0x0800b621
 800b59c:	0800b621 	.word	0x0800b621
 800b5a0:	0800b621 	.word	0x0800b621
 800b5a4:	0800b621 	.word	0x0800b621
 800b5a8:	0800b621 	.word	0x0800b621
 800b5ac:	0800b621 	.word	0x0800b621
 800b5b0:	0800b621 	.word	0x0800b621
 800b5b4:	0800b621 	.word	0x0800b621
 800b5b8:	0800b621 	.word	0x0800b621
 800b5bc:	0800b621 	.word	0x0800b621
 800b5c0:	0800b621 	.word	0x0800b621
 800b5c4:	0800b621 	.word	0x0800b621
 800b5c8:	0800b621 	.word	0x0800b621
 800b5cc:	0800b621 	.word	0x0800b621
 800b5d0:	0800b621 	.word	0x0800b621
 800b5d4:	0800b621 	.word	0x0800b621
 800b5d8:	0800b621 	.word	0x0800b621
 800b5dc:	0800b621 	.word	0x0800b621
 800b5e0:	0800b621 	.word	0x0800b621
 800b5e4:	0800b621 	.word	0x0800b621
 800b5e8:	0800b621 	.word	0x0800b621
 800b5ec:	0800b621 	.word	0x0800b621
 800b5f0:	0800b621 	.word	0x0800b621
 800b5f4:	0800b621 	.word	0x0800b621
 800b5f8:	0800b621 	.word	0x0800b621
 800b5fc:	0800b621 	.word	0x0800b621
 800b600:	0800b621 	.word	0x0800b621
 800b604:	0800b621 	.word	0x0800b621
 800b608:	0800b621 	.word	0x0800b621
 800b60c:	0800b621 	.word	0x0800b621
 800b610:	0800b621 	.word	0x0800b621
 800b614:	0800b621 	.word	0x0800b621
 800b618:	0800b621 	.word	0x0800b621
 800b61c:	0800b621 	.word	0x0800b621
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b620:	bf00      	nop
  }

  return (USBD_OK);
 800b622:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b624:	4618      	mov	r0, r3
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b63a:	6879      	ldr	r1, [r7, #4]
 800b63c:	4805      	ldr	r0, [pc, #20]	; (800b654 <CDC_Receive_FS+0x24>)
 800b63e:	f7fe fe3e 	bl	800a2be <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b642:	4804      	ldr	r0, [pc, #16]	; (800b654 <CDC_Receive_FS+0x24>)
 800b644:	f7fe fe7e 	bl	800a344 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b648:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3708      	adds	r7, #8
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	2000037c 	.word	0x2000037c

0800b658 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b084      	sub	sp, #16
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	460b      	mov	r3, r1
 800b662:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b664:	2300      	movs	r3, #0
 800b666:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b668:	4b0d      	ldr	r3, [pc, #52]	; (800b6a0 <CDC_Transmit_FS+0x48>)
 800b66a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b66e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b676:	2b00      	cmp	r3, #0
 800b678:	d001      	beq.n	800b67e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b67a:	2301      	movs	r3, #1
 800b67c:	e00b      	b.n	800b696 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b67e:	887b      	ldrh	r3, [r7, #2]
 800b680:	461a      	mov	r2, r3
 800b682:	6879      	ldr	r1, [r7, #4]
 800b684:	4806      	ldr	r0, [pc, #24]	; (800b6a0 <CDC_Transmit_FS+0x48>)
 800b686:	f7fe fe00 	bl	800a28a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b68a:	4805      	ldr	r0, [pc, #20]	; (800b6a0 <CDC_Transmit_FS+0x48>)
 800b68c:	f7fe fe2b 	bl	800a2e6 <USBD_CDC_TransmitPacket>
 800b690:	4603      	mov	r3, r0
 800b692:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b694:	7bfb      	ldrb	r3, [r7, #15]
}
 800b696:	4618      	mov	r0, r3
 800b698:	3710      	adds	r7, #16
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	2000037c 	.word	0x2000037c

0800b6a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b083      	sub	sp, #12
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	6039      	str	r1, [r7, #0]
 800b6ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	2212      	movs	r2, #18
 800b6b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b6b6:	4b03      	ldr	r3, [pc, #12]	; (800b6c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	370c      	adds	r7, #12
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr
 800b6c4:	2000014c 	.word	0x2000014c

0800b6c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b083      	sub	sp, #12
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	6039      	str	r1, [r7, #0]
 800b6d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	2204      	movs	r2, #4
 800b6d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b6da:	4b03      	ldr	r3, [pc, #12]	; (800b6e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	370c      	adds	r7, #12
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr
 800b6e8:	20000160 	.word	0x20000160

0800b6ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b082      	sub	sp, #8
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	6039      	str	r1, [r7, #0]
 800b6f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b6f8:	79fb      	ldrb	r3, [r7, #7]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d105      	bne.n	800b70a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b6fe:	683a      	ldr	r2, [r7, #0]
 800b700:	4907      	ldr	r1, [pc, #28]	; (800b720 <USBD_FS_ProductStrDescriptor+0x34>)
 800b702:	4808      	ldr	r0, [pc, #32]	; (800b724 <USBD_FS_ProductStrDescriptor+0x38>)
 800b704:	f7ff fe0b 	bl	800b31e <USBD_GetString>
 800b708:	e004      	b.n	800b714 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b70a:	683a      	ldr	r2, [r7, #0]
 800b70c:	4904      	ldr	r1, [pc, #16]	; (800b720 <USBD_FS_ProductStrDescriptor+0x34>)
 800b70e:	4805      	ldr	r0, [pc, #20]	; (800b724 <USBD_FS_ProductStrDescriptor+0x38>)
 800b710:	f7ff fe05 	bl	800b31e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b714:	4b02      	ldr	r3, [pc, #8]	; (800b720 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b716:	4618      	mov	r0, r3
 800b718:	3708      	adds	r7, #8
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	20000e40 	.word	0x20000e40
 800b724:	0800bee0 	.word	0x0800bee0

0800b728 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	4603      	mov	r3, r0
 800b730:	6039      	str	r1, [r7, #0]
 800b732:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b734:	683a      	ldr	r2, [r7, #0]
 800b736:	4904      	ldr	r1, [pc, #16]	; (800b748 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b738:	4804      	ldr	r0, [pc, #16]	; (800b74c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b73a:	f7ff fdf0 	bl	800b31e <USBD_GetString>
  return USBD_StrDesc;
 800b73e:	4b02      	ldr	r3, [pc, #8]	; (800b748 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b740:	4618      	mov	r0, r3
 800b742:	3708      	adds	r7, #8
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	20000e40 	.word	0x20000e40
 800b74c:	0800bef8 	.word	0x0800bef8

0800b750 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
 800b756:	4603      	mov	r3, r0
 800b758:	6039      	str	r1, [r7, #0]
 800b75a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	221a      	movs	r2, #26
 800b760:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b762:	f000 f843 	bl	800b7ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b766:	4b02      	ldr	r3, [pc, #8]	; (800b770 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3708      	adds	r7, #8
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}
 800b770:	20000164 	.word	0x20000164

0800b774 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	4603      	mov	r3, r0
 800b77c:	6039      	str	r1, [r7, #0]
 800b77e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b780:	79fb      	ldrb	r3, [r7, #7]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d105      	bne.n	800b792 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b786:	683a      	ldr	r2, [r7, #0]
 800b788:	4907      	ldr	r1, [pc, #28]	; (800b7a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b78a:	4808      	ldr	r0, [pc, #32]	; (800b7ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800b78c:	f7ff fdc7 	bl	800b31e <USBD_GetString>
 800b790:	e004      	b.n	800b79c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b792:	683a      	ldr	r2, [r7, #0]
 800b794:	4904      	ldr	r1, [pc, #16]	; (800b7a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b796:	4805      	ldr	r0, [pc, #20]	; (800b7ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800b798:	f7ff fdc1 	bl	800b31e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b79c:	4b02      	ldr	r3, [pc, #8]	; (800b7a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3708      	adds	r7, #8
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	20000e40 	.word	0x20000e40
 800b7ac:	0800bf0c 	.word	0x0800bf0c

0800b7b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	6039      	str	r1, [r7, #0]
 800b7ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b7bc:	79fb      	ldrb	r3, [r7, #7]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d105      	bne.n	800b7ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b7c2:	683a      	ldr	r2, [r7, #0]
 800b7c4:	4907      	ldr	r1, [pc, #28]	; (800b7e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b7c6:	4808      	ldr	r0, [pc, #32]	; (800b7e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b7c8:	f7ff fda9 	bl	800b31e <USBD_GetString>
 800b7cc:	e004      	b.n	800b7d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b7ce:	683a      	ldr	r2, [r7, #0]
 800b7d0:	4904      	ldr	r1, [pc, #16]	; (800b7e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b7d2:	4805      	ldr	r0, [pc, #20]	; (800b7e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b7d4:	f7ff fda3 	bl	800b31e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7d8:	4b02      	ldr	r3, [pc, #8]	; (800b7e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3708      	adds	r7, #8
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	20000e40 	.word	0x20000e40
 800b7e8:	0800bf18 	.word	0x0800bf18

0800b7ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b7f2:	4b0f      	ldr	r3, [pc, #60]	; (800b830 <Get_SerialNum+0x44>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b7f8:	4b0e      	ldr	r3, [pc, #56]	; (800b834 <Get_SerialNum+0x48>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b7fe:	4b0e      	ldr	r3, [pc, #56]	; (800b838 <Get_SerialNum+0x4c>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b804:	68fa      	ldr	r2, [r7, #12]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	4413      	add	r3, r2
 800b80a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d009      	beq.n	800b826 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b812:	2208      	movs	r2, #8
 800b814:	4909      	ldr	r1, [pc, #36]	; (800b83c <Get_SerialNum+0x50>)
 800b816:	68f8      	ldr	r0, [r7, #12]
 800b818:	f000 f814 	bl	800b844 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b81c:	2204      	movs	r2, #4
 800b81e:	4908      	ldr	r1, [pc, #32]	; (800b840 <Get_SerialNum+0x54>)
 800b820:	68b8      	ldr	r0, [r7, #8]
 800b822:	f000 f80f 	bl	800b844 <IntToUnicode>
  }
}
 800b826:	bf00      	nop
 800b828:	3710      	adds	r7, #16
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	1ffff7ac 	.word	0x1ffff7ac
 800b834:	1ffff7b0 	.word	0x1ffff7b0
 800b838:	1ffff7b4 	.word	0x1ffff7b4
 800b83c:	20000166 	.word	0x20000166
 800b840:	20000176 	.word	0x20000176

0800b844 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b844:	b480      	push	{r7}
 800b846:	b087      	sub	sp, #28
 800b848:	af00      	add	r7, sp, #0
 800b84a:	60f8      	str	r0, [r7, #12]
 800b84c:	60b9      	str	r1, [r7, #8]
 800b84e:	4613      	mov	r3, r2
 800b850:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b852:	2300      	movs	r3, #0
 800b854:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b856:	2300      	movs	r3, #0
 800b858:	75fb      	strb	r3, [r7, #23]
 800b85a:	e027      	b.n	800b8ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	0f1b      	lsrs	r3, r3, #28
 800b860:	2b09      	cmp	r3, #9
 800b862:	d80b      	bhi.n	800b87c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	0f1b      	lsrs	r3, r3, #28
 800b868:	b2da      	uxtb	r2, r3
 800b86a:	7dfb      	ldrb	r3, [r7, #23]
 800b86c:	005b      	lsls	r3, r3, #1
 800b86e:	4619      	mov	r1, r3
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	440b      	add	r3, r1
 800b874:	3230      	adds	r2, #48	; 0x30
 800b876:	b2d2      	uxtb	r2, r2
 800b878:	701a      	strb	r2, [r3, #0]
 800b87a:	e00a      	b.n	800b892 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	0f1b      	lsrs	r3, r3, #28
 800b880:	b2da      	uxtb	r2, r3
 800b882:	7dfb      	ldrb	r3, [r7, #23]
 800b884:	005b      	lsls	r3, r3, #1
 800b886:	4619      	mov	r1, r3
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	440b      	add	r3, r1
 800b88c:	3237      	adds	r2, #55	; 0x37
 800b88e:	b2d2      	uxtb	r2, r2
 800b890:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	011b      	lsls	r3, r3, #4
 800b896:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b898:	7dfb      	ldrb	r3, [r7, #23]
 800b89a:	005b      	lsls	r3, r3, #1
 800b89c:	3301      	adds	r3, #1
 800b89e:	68ba      	ldr	r2, [r7, #8]
 800b8a0:	4413      	add	r3, r2
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b8a6:	7dfb      	ldrb	r3, [r7, #23]
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	75fb      	strb	r3, [r7, #23]
 800b8ac:	7dfa      	ldrb	r2, [r7, #23]
 800b8ae:	79fb      	ldrb	r3, [r7, #7]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d3d3      	bcc.n	800b85c <IntToUnicode+0x18>
  }
}
 800b8b4:	bf00      	nop
 800b8b6:	bf00      	nop
 800b8b8:	371c      	adds	r7, #28
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr
	...

0800b8c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b08a      	sub	sp, #40	; 0x28
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b8cc:	f107 0314 	add.w	r3, r7, #20
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	601a      	str	r2, [r3, #0]
 800b8d4:	605a      	str	r2, [r3, #4]
 800b8d6:	609a      	str	r2, [r3, #8]
 800b8d8:	60da      	str	r2, [r3, #12]
 800b8da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4a1c      	ldr	r2, [pc, #112]	; (800b954 <HAL_PCD_MspInit+0x90>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d131      	bne.n	800b94a <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b8e6:	4b1c      	ldr	r3, [pc, #112]	; (800b958 <HAL_PCD_MspInit+0x94>)
 800b8e8:	695b      	ldr	r3, [r3, #20]
 800b8ea:	4a1b      	ldr	r2, [pc, #108]	; (800b958 <HAL_PCD_MspInit+0x94>)
 800b8ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8f0:	6153      	str	r3, [r2, #20]
 800b8f2:	4b19      	ldr	r3, [pc, #100]	; (800b958 <HAL_PCD_MspInit+0x94>)
 800b8f4:	695b      	ldr	r3, [r3, #20]
 800b8f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8fa:	613b      	str	r3, [r7, #16]
 800b8fc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800b8fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b904:	2302      	movs	r3, #2
 800b906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b908:	2300      	movs	r3, #0
 800b90a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b90c:	2303      	movs	r3, #3
 800b90e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800b910:	230e      	movs	r3, #14
 800b912:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b914:	f107 0314 	add.w	r3, r7, #20
 800b918:	4619      	mov	r1, r3
 800b91a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b91e:	f7f7 f8a5 	bl	8002a6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b922:	4b0d      	ldr	r3, [pc, #52]	; (800b958 <HAL_PCD_MspInit+0x94>)
 800b924:	69db      	ldr	r3, [r3, #28]
 800b926:	4a0c      	ldr	r2, [pc, #48]	; (800b958 <HAL_PCD_MspInit+0x94>)
 800b928:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b92c:	61d3      	str	r3, [r2, #28]
 800b92e:	4b0a      	ldr	r3, [pc, #40]	; (800b958 <HAL_PCD_MspInit+0x94>)
 800b930:	69db      	ldr	r3, [r3, #28]
 800b932:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b936:	60fb      	str	r3, [r7, #12]
 800b938:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800b93a:	2200      	movs	r2, #0
 800b93c:	2100      	movs	r1, #0
 800b93e:	2014      	movs	r0, #20
 800b940:	f7f7 f85d 	bl	80029fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800b944:	2014      	movs	r0, #20
 800b946:	f7f7 f876 	bl	8002a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b94a:	bf00      	nop
 800b94c:	3728      	adds	r7, #40	; 0x28
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
 800b952:	bf00      	nop
 800b954:	40005c00 	.word	0x40005c00
 800b958:	40021000 	.word	0x40021000

0800b95c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b970:	4619      	mov	r1, r3
 800b972:	4610      	mov	r0, r2
 800b974:	f7fe fd9e 	bl	800a4b4 <USBD_LL_SetupStage>
}
 800b978:	bf00      	nop
 800b97a:	3708      	adds	r7, #8
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}

0800b980 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	460b      	mov	r3, r1
 800b98a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b992:	78fa      	ldrb	r2, [r7, #3]
 800b994:	6879      	ldr	r1, [r7, #4]
 800b996:	4613      	mov	r3, r2
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	4413      	add	r3, r2
 800b99c:	00db      	lsls	r3, r3, #3
 800b99e:	440b      	add	r3, r1
 800b9a0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	78fb      	ldrb	r3, [r7, #3]
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	f7fe fdd0 	bl	800a54e <USBD_LL_DataOutStage>
}
 800b9ae:	bf00      	nop
 800b9b0:	3708      	adds	r7, #8
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b082      	sub	sp, #8
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
 800b9be:	460b      	mov	r3, r1
 800b9c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b9c8:	78fa      	ldrb	r2, [r7, #3]
 800b9ca:	6879      	ldr	r1, [r7, #4]
 800b9cc:	4613      	mov	r3, r2
 800b9ce:	009b      	lsls	r3, r3, #2
 800b9d0:	4413      	add	r3, r2
 800b9d2:	00db      	lsls	r3, r3, #3
 800b9d4:	440b      	add	r3, r1
 800b9d6:	333c      	adds	r3, #60	; 0x3c
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	78fb      	ldrb	r3, [r7, #3]
 800b9dc:	4619      	mov	r1, r3
 800b9de:	f7fe fe27 	bl	800a630 <USBD_LL_DataInStage>
}
 800b9e2:	bf00      	nop
 800b9e4:	3708      	adds	r7, #8
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b082      	sub	sp, #8
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7fe ff3a 	bl	800a872 <USBD_LL_SOF>
}
 800b9fe:	bf00      	nop
 800ba00:	3708      	adds	r7, #8
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b084      	sub	sp, #16
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ba0e:	2301      	movs	r3, #1
 800ba10:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	689b      	ldr	r3, [r3, #8]
 800ba16:	2b02      	cmp	r3, #2
 800ba18:	d001      	beq.n	800ba1e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ba1a:	f7f5 f81d 	bl	8000a58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ba24:	7bfa      	ldrb	r2, [r7, #15]
 800ba26:	4611      	mov	r1, r2
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7fe fee7 	bl	800a7fc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ba34:	4618      	mov	r0, r3
 800ba36:	f7fe fea0 	bl	800a77a <USBD_LL_Reset>
}
 800ba3a:	bf00      	nop
 800ba3c:	3710      	adds	r7, #16
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
	...

0800ba44 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fe fee2 	bl	800a81c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	699b      	ldr	r3, [r3, #24]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d005      	beq.n	800ba6c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba60:	4b04      	ldr	r3, [pc, #16]	; (800ba74 <HAL_PCD_SuspendCallback+0x30>)
 800ba62:	691b      	ldr	r3, [r3, #16]
 800ba64:	4a03      	ldr	r2, [pc, #12]	; (800ba74 <HAL_PCD_SuspendCallback+0x30>)
 800ba66:	f043 0306 	orr.w	r3, r3, #6
 800ba6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ba6c:	bf00      	nop
 800ba6e:	3708      	adds	r7, #8
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	e000ed00 	.word	0xe000ed00

0800ba78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7fe fedd 	bl	800a846 <USBD_LL_Resume>
}
 800ba8c:	bf00      	nop
 800ba8e:	3708      	adds	r7, #8
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ba9c:	4a28      	ldr	r2, [pc, #160]	; (800bb40 <USBD_LL_Init+0xac>)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	4a26      	ldr	r2, [pc, #152]	; (800bb40 <USBD_LL_Init+0xac>)
 800baa8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800baac:	4b24      	ldr	r3, [pc, #144]	; (800bb40 <USBD_LL_Init+0xac>)
 800baae:	4a25      	ldr	r2, [pc, #148]	; (800bb44 <USBD_LL_Init+0xb0>)
 800bab0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bab2:	4b23      	ldr	r3, [pc, #140]	; (800bb40 <USBD_LL_Init+0xac>)
 800bab4:	2208      	movs	r2, #8
 800bab6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bab8:	4b21      	ldr	r3, [pc, #132]	; (800bb40 <USBD_LL_Init+0xac>)
 800baba:	2202      	movs	r2, #2
 800babc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800babe:	4b20      	ldr	r3, [pc, #128]	; (800bb40 <USBD_LL_Init+0xac>)
 800bac0:	2202      	movs	r2, #2
 800bac2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bac4:	4b1e      	ldr	r3, [pc, #120]	; (800bb40 <USBD_LL_Init+0xac>)
 800bac6:	2200      	movs	r2, #0
 800bac8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800baca:	4b1d      	ldr	r3, [pc, #116]	; (800bb40 <USBD_LL_Init+0xac>)
 800bacc:	2200      	movs	r2, #0
 800bace:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bad0:	481b      	ldr	r0, [pc, #108]	; (800bb40 <USBD_LL_Init+0xac>)
 800bad2:	f7f7 f98d 	bl	8002df0 <HAL_PCD_Init>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d001      	beq.n	800bae0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800badc:	f7f4 ffbc 	bl	8000a58 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bae6:	2318      	movs	r3, #24
 800bae8:	2200      	movs	r2, #0
 800baea:	2100      	movs	r1, #0
 800baec:	f7f8 fe16 	bl	800471c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800baf6:	2358      	movs	r3, #88	; 0x58
 800baf8:	2200      	movs	r2, #0
 800bafa:	2180      	movs	r1, #128	; 0x80
 800bafc:	f7f8 fe0e 	bl	800471c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb06:	23c0      	movs	r3, #192	; 0xc0
 800bb08:	2200      	movs	r2, #0
 800bb0a:	2181      	movs	r1, #129	; 0x81
 800bb0c:	f7f8 fe06 	bl	800471c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb16:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	2101      	movs	r1, #1
 800bb1e:	f7f8 fdfd 	bl	800471c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb28:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	2182      	movs	r1, #130	; 0x82
 800bb30:	f7f8 fdf4 	bl	800471c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3708      	adds	r7, #8
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	20001040 	.word	0x20001040
 800bb44:	40005c00 	.word	0x40005c00

0800bb48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b084      	sub	sp, #16
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb50:	2300      	movs	r3, #0
 800bb52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb54:	2300      	movs	r3, #0
 800bb56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7f7 fa18 	bl	8002f94 <HAL_PCD_Start>
 800bb64:	4603      	mov	r3, r0
 800bb66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb68:	7bfb      	ldrb	r3, [r7, #15]
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f000 f954 	bl	800be18 <USBD_Get_USB_Status>
 800bb70:	4603      	mov	r3, r0
 800bb72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb74:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3710      	adds	r7, #16
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}

0800bb7e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bb7e:	b580      	push	{r7, lr}
 800bb80:	b084      	sub	sp, #16
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
 800bb86:	4608      	mov	r0, r1
 800bb88:	4611      	mov	r1, r2
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	70fb      	strb	r3, [r7, #3]
 800bb90:	460b      	mov	r3, r1
 800bb92:	70bb      	strb	r3, [r7, #2]
 800bb94:	4613      	mov	r3, r2
 800bb96:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bba6:	78bb      	ldrb	r3, [r7, #2]
 800bba8:	883a      	ldrh	r2, [r7, #0]
 800bbaa:	78f9      	ldrb	r1, [r7, #3]
 800bbac:	f7f7 fb11 	bl	80031d2 <HAL_PCD_EP_Open>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbb4:	7bfb      	ldrb	r3, [r7, #15]
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f000 f92e 	bl	800be18 <USBD_Get_USB_Status>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3710      	adds	r7, #16
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbca:	b580      	push	{r7, lr}
 800bbcc:	b084      	sub	sp, #16
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbe4:	78fa      	ldrb	r2, [r7, #3]
 800bbe6:	4611      	mov	r1, r2
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7f7 fb4f 	bl	800328c <HAL_PCD_EP_Close>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbf2:	7bfb      	ldrb	r3, [r7, #15]
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f000 f90f 	bl	800be18 <USBD_Get_USB_Status>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbfe:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3710      	adds	r7, #16
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	460b      	mov	r3, r1
 800bc12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc14:	2300      	movs	r3, #0
 800bc16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc22:	78fa      	ldrb	r2, [r7, #3]
 800bc24:	4611      	mov	r1, r2
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7f7 fbf8 	bl	800341c <HAL_PCD_EP_SetStall>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc30:	7bfb      	ldrb	r3, [r7, #15]
 800bc32:	4618      	mov	r0, r3
 800bc34:	f000 f8f0 	bl	800be18 <USBD_Get_USB_Status>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}

0800bc46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc46:	b580      	push	{r7, lr}
 800bc48:	b084      	sub	sp, #16
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	6078      	str	r0, [r7, #4]
 800bc4e:	460b      	mov	r3, r1
 800bc50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc52:	2300      	movs	r3, #0
 800bc54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc56:	2300      	movs	r3, #0
 800bc58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc60:	78fa      	ldrb	r2, [r7, #3]
 800bc62:	4611      	mov	r1, r2
 800bc64:	4618      	mov	r0, r3
 800bc66:	f7f7 fc2b 	bl	80034c0 <HAL_PCD_EP_ClrStall>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc6e:	7bfb      	ldrb	r3, [r7, #15]
 800bc70:	4618      	mov	r0, r3
 800bc72:	f000 f8d1 	bl	800be18 <USBD_Get_USB_Status>
 800bc76:	4603      	mov	r3, r0
 800bc78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3710      	adds	r7, #16
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b085      	sub	sp, #20
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	460b      	mov	r3, r1
 800bc8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc96:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bc98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	da0c      	bge.n	800bcba <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bca0:	78fb      	ldrb	r3, [r7, #3]
 800bca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bca6:	68f9      	ldr	r1, [r7, #12]
 800bca8:	1c5a      	adds	r2, r3, #1
 800bcaa:	4613      	mov	r3, r2
 800bcac:	009b      	lsls	r3, r3, #2
 800bcae:	4413      	add	r3, r2
 800bcb0:	00db      	lsls	r3, r3, #3
 800bcb2:	440b      	add	r3, r1
 800bcb4:	3302      	adds	r3, #2
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	e00b      	b.n	800bcd2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bcba:	78fb      	ldrb	r3, [r7, #3]
 800bcbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bcc0:	68f9      	ldr	r1, [r7, #12]
 800bcc2:	4613      	mov	r3, r2
 800bcc4:	009b      	lsls	r3, r3, #2
 800bcc6:	4413      	add	r3, r2
 800bcc8:	00db      	lsls	r3, r3, #3
 800bcca:	440b      	add	r3, r1
 800bccc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bcd0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3714      	adds	r7, #20
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr

0800bcde <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b084      	sub	sp, #16
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
 800bce6:	460b      	mov	r3, r1
 800bce8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcea:	2300      	movs	r3, #0
 800bcec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcf8:	78fa      	ldrb	r2, [r7, #3]
 800bcfa:	4611      	mov	r1, r2
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f7f7 fa43 	bl	8003188 <HAL_PCD_SetAddress>
 800bd02:	4603      	mov	r3, r0
 800bd04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd06:	7bfb      	ldrb	r3, [r7, #15]
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f000 f885 	bl	800be18 <USBD_Get_USB_Status>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd12:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3710      	adds	r7, #16
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b086      	sub	sp, #24
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	607a      	str	r2, [r7, #4]
 800bd26:	461a      	mov	r2, r3
 800bd28:	460b      	mov	r3, r1
 800bd2a:	72fb      	strb	r3, [r7, #11]
 800bd2c:	4613      	mov	r3, r2
 800bd2e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd30:	2300      	movs	r3, #0
 800bd32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd34:	2300      	movs	r3, #0
 800bd36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bd3e:	893b      	ldrh	r3, [r7, #8]
 800bd40:	7af9      	ldrb	r1, [r7, #11]
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	f7f7 fb33 	bl	80033ae <HAL_PCD_EP_Transmit>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd4c:	7dfb      	ldrb	r3, [r7, #23]
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f000 f862 	bl	800be18 <USBD_Get_USB_Status>
 800bd54:	4603      	mov	r3, r0
 800bd56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bd58:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3718      	adds	r7, #24
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}

0800bd62 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bd62:	b580      	push	{r7, lr}
 800bd64:	b086      	sub	sp, #24
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	60f8      	str	r0, [r7, #12]
 800bd6a:	607a      	str	r2, [r7, #4]
 800bd6c:	461a      	mov	r2, r3
 800bd6e:	460b      	mov	r3, r1
 800bd70:	72fb      	strb	r3, [r7, #11]
 800bd72:	4613      	mov	r3, r2
 800bd74:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd76:	2300      	movs	r3, #0
 800bd78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bd84:	893b      	ldrh	r3, [r7, #8]
 800bd86:	7af9      	ldrb	r1, [r7, #11]
 800bd88:	687a      	ldr	r2, [r7, #4]
 800bd8a:	f7f7 fac7 	bl	800331c <HAL_PCD_EP_Receive>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd92:	7dfb      	ldrb	r3, [r7, #23]
 800bd94:	4618      	mov	r0, r3
 800bd96:	f000 f83f 	bl	800be18 <USBD_Get_USB_Status>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bd9e:	7dbb      	ldrb	r3, [r7, #22]
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3718      	adds	r7, #24
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bdba:	78fa      	ldrb	r2, [r7, #3]
 800bdbc:	4611      	mov	r1, r2
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7f7 fadd 	bl	800337e <HAL_PCD_EP_GetRxCount>
 800bdc4:	4603      	mov	r3, r0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3708      	adds	r7, #8
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
	...

0800bdd0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b083      	sub	sp, #12
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bdd8:	4b03      	ldr	r3, [pc, #12]	; (800bde8 <USBD_static_malloc+0x18>)
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	370c      	adds	r7, #12
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr
 800bde6:	bf00      	nop
 800bde8:	2000132c 	.word	0x2000132c

0800bdec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]

}
 800bdf4:	bf00      	nop
 800bdf6:	370c      	adds	r7, #12
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr

0800be00 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be00:	b480      	push	{r7}
 800be02:	b083      	sub	sp, #12
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	460b      	mov	r3, r1
 800be0a:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800be0c:	bf00      	nop
 800be0e:	370c      	adds	r7, #12
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800be18:	b480      	push	{r7}
 800be1a:	b085      	sub	sp, #20
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	4603      	mov	r3, r0
 800be20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be22:	2300      	movs	r3, #0
 800be24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800be26:	79fb      	ldrb	r3, [r7, #7]
 800be28:	2b03      	cmp	r3, #3
 800be2a:	d817      	bhi.n	800be5c <USBD_Get_USB_Status+0x44>
 800be2c:	a201      	add	r2, pc, #4	; (adr r2, 800be34 <USBD_Get_USB_Status+0x1c>)
 800be2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be32:	bf00      	nop
 800be34:	0800be45 	.word	0x0800be45
 800be38:	0800be4b 	.word	0x0800be4b
 800be3c:	0800be51 	.word	0x0800be51
 800be40:	0800be57 	.word	0x0800be57
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800be44:	2300      	movs	r3, #0
 800be46:	73fb      	strb	r3, [r7, #15]
    break;
 800be48:	e00b      	b.n	800be62 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be4a:	2302      	movs	r3, #2
 800be4c:	73fb      	strb	r3, [r7, #15]
    break;
 800be4e:	e008      	b.n	800be62 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be50:	2301      	movs	r3, #1
 800be52:	73fb      	strb	r3, [r7, #15]
    break;
 800be54:	e005      	b.n	800be62 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be56:	2302      	movs	r3, #2
 800be58:	73fb      	strb	r3, [r7, #15]
    break;
 800be5a:	e002      	b.n	800be62 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800be5c:	2302      	movs	r3, #2
 800be5e:	73fb      	strb	r3, [r7, #15]
    break;
 800be60:	bf00      	nop
  }
  return usb_status;
 800be62:	7bfb      	ldrb	r3, [r7, #15]
}
 800be64:	4618      	mov	r0, r3
 800be66:	3714      	adds	r7, #20
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr

0800be70 <memset>:
 800be70:	4402      	add	r2, r0
 800be72:	4603      	mov	r3, r0
 800be74:	4293      	cmp	r3, r2
 800be76:	d100      	bne.n	800be7a <memset+0xa>
 800be78:	4770      	bx	lr
 800be7a:	f803 1b01 	strb.w	r1, [r3], #1
 800be7e:	e7f9      	b.n	800be74 <memset+0x4>

0800be80 <__libc_init_array>:
 800be80:	b570      	push	{r4, r5, r6, lr}
 800be82:	4d0d      	ldr	r5, [pc, #52]	; (800beb8 <__libc_init_array+0x38>)
 800be84:	4c0d      	ldr	r4, [pc, #52]	; (800bebc <__libc_init_array+0x3c>)
 800be86:	1b64      	subs	r4, r4, r5
 800be88:	10a4      	asrs	r4, r4, #2
 800be8a:	2600      	movs	r6, #0
 800be8c:	42a6      	cmp	r6, r4
 800be8e:	d109      	bne.n	800bea4 <__libc_init_array+0x24>
 800be90:	4d0b      	ldr	r5, [pc, #44]	; (800bec0 <__libc_init_array+0x40>)
 800be92:	4c0c      	ldr	r4, [pc, #48]	; (800bec4 <__libc_init_array+0x44>)
 800be94:	f000 f818 	bl	800bec8 <_init>
 800be98:	1b64      	subs	r4, r4, r5
 800be9a:	10a4      	asrs	r4, r4, #2
 800be9c:	2600      	movs	r6, #0
 800be9e:	42a6      	cmp	r6, r4
 800bea0:	d105      	bne.n	800beae <__libc_init_array+0x2e>
 800bea2:	bd70      	pop	{r4, r5, r6, pc}
 800bea4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bea8:	4798      	blx	r3
 800beaa:	3601      	adds	r6, #1
 800beac:	e7ee      	b.n	800be8c <__libc_init_array+0xc>
 800beae:	f855 3b04 	ldr.w	r3, [r5], #4
 800beb2:	4798      	blx	r3
 800beb4:	3601      	adds	r6, #1
 800beb6:	e7f2      	b.n	800be9e <__libc_init_array+0x1e>
 800beb8:	0800bf60 	.word	0x0800bf60
 800bebc:	0800bf60 	.word	0x0800bf60
 800bec0:	0800bf60 	.word	0x0800bf60
 800bec4:	0800bf64 	.word	0x0800bf64

0800bec8 <_init>:
 800bec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beca:	bf00      	nop
 800becc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bece:	bc08      	pop	{r3}
 800bed0:	469e      	mov	lr, r3
 800bed2:	4770      	bx	lr

0800bed4 <_fini>:
 800bed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bed6:	bf00      	nop
 800bed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beda:	bc08      	pop	{r3}
 800bedc:	469e      	mov	lr, r3
 800bede:	4770      	bx	lr
