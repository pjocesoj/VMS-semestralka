
VMS semestralka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc9c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800be24  0800be24  0001be24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bea4  0800bea4  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800bea4  0800bea4  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bea4  0800bea4  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bea4  0800bea4  0001bea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bea8  0800bea8  0001bea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800beac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020180  2**0
                  CONTENTS
 10 .bss          000013a4  20000180  20000180  00020180  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001524  20001524  00020180  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015f16  00000000  00000000  000201f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000036bd  00000000  00000000  00036109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001298  00000000  00000000  000397c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e2e  00000000  00000000  0003aa60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000210fc  00000000  00000000  0003b88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018c8f  00000000  00000000  0005c98a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bfa42  00000000  00000000  00075619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004cfc  00000000  00000000  0013505c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00139d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800be0c 	.word	0x0800be0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	0800be0c 	.word	0x0800be0c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
	if (htim == &htim17)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4a2a      	ldr	r2, [pc, #168]	; (800028c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d10d      	bne.n	8000204 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		HAL_GPIO_TogglePin(LD10_GPIO_Port, LD10_Pin);
 80001e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ec:	4828      	ldr	r0, [pc, #160]	; (8000290 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80001ee:	f002 fec5 	bl	8002f7c <HAL_GPIO_TogglePin>
		tim17 = HAL_GPIO_ReadPin(LD10_GPIO_Port, LD10_Pin);
 80001f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f6:	4826      	ldr	r0, [pc, #152]	; (8000290 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80001f8:	f002 fe90 	bl	8002f1c <HAL_GPIO_ReadPin>
 80001fc:	4603      	mov	r3, r0
 80001fe:	461a      	mov	r2, r3
 8000200:	4b24      	ldr	r3, [pc, #144]	; (8000294 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000202:	601a      	str	r2, [r3, #0]
	}
	if (htim == &htim16)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4a24      	ldr	r2, [pc, #144]	; (8000298 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000208:	4293      	cmp	r3, r2
 800020a:	d114      	bne.n	8000236 <HAL_TIM_PeriodElapsedCallback+0x5e>
	{
		HAL_GPIO_TogglePin(LD9_GPIO_Port, LD9_Pin);
 800020c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000210:	481f      	ldr	r0, [pc, #124]	; (8000290 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000212:	f002 feb3 	bl	8002f7c <HAL_GPIO_TogglePin>
		tim16 = HAL_GPIO_ReadPin(LD10_GPIO_Port, LD10_Pin);
 8000216:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800021a:	481d      	ldr	r0, [pc, #116]	; (8000290 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800021c:	f002 fe7e 	bl	8002f1c <HAL_GPIO_ReadPin>
 8000220:	4603      	mov	r3, r0
 8000222:	461a      	mov	r2, r3
 8000224:	4b1d      	ldr	r3, [pc, #116]	; (800029c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000226:	601a      	str	r2, [r3, #0]
		//tim16*=2000;
		RPM=pulsu;
 8000228:	4b1d      	ldr	r3, [pc, #116]	; (80002a0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800022a:	881a      	ldrh	r2, [r3, #0]
 800022c:	4b1d      	ldr	r3, [pc, #116]	; (80002a4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800022e:	801a      	strh	r2, [r3, #0]
		pulsu=0;
 8000230:	4b1b      	ldr	r3, [pc, #108]	; (80002a0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000232:	2200      	movs	r2, #0
 8000234:	801a      	strh	r2, [r3, #0]
	}
	if (htim == &htim2)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4a1b      	ldr	r2, [pc, #108]	; (80002a8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d122      	bne.n	8000284 <HAL_TIM_PeriodElapsedCallback+0xac>
	{
		HAL_GPIO_TogglePin(LD8_GPIO_Port, LD8_Pin);
 800023e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000242:	4813      	ldr	r0, [pc, #76]	; (8000290 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000244:	f002 fe9a 	bl	8002f7c <HAL_GPIO_TogglePin>
		tim2 = HAL_GPIO_ReadPin(LD8_GPIO_Port, LD8_Pin);
 8000248:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800024c:	4810      	ldr	r0, [pc, #64]	; (8000290 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800024e:	f002 fe65 	bl	8002f1c <HAL_GPIO_ReadPin>
 8000252:	4603      	mov	r3, r0
 8000254:	461a      	mov	r2, r3
 8000256:	4b15      	ldr	r3, [pc, #84]	; (80002ac <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000258:	601a      	str	r2, [r3, #0]
		tim2 += 9;
 800025a:	4b14      	ldr	r3, [pc, #80]	; (80002ac <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	3309      	adds	r3, #9
 8000260:	4a12      	ldr	r2, [pc, #72]	; (80002ac <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000262:	6013      	str	r3, [r2, #0]

		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000264:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000268:	4809      	ldr	r0, [pc, #36]	; (8000290 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800026a:	f002 fe87 	bl	8002f7c <HAL_GPIO_TogglePin>
		tim2_ch2 = 1 + 3;
 800026e:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000270:	2204      	movs	r2, #4
 8000272:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8000274:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000278:	4805      	ldr	r0, [pc, #20]	; (8000290 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800027a:	f002 fe7f 	bl	8002f7c <HAL_GPIO_TogglePin>
		tim2_ch4 = 1 + 6;
 800027e:	4b0d      	ldr	r3, [pc, #52]	; (80002b4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000280:	2207      	movs	r2, #7
 8000282:	601a      	str	r2, [r3, #0]
	}
}
 8000284:	bf00      	nop
 8000286:	3708      	adds	r7, #8
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	200002d4 	.word	0x200002d4
 8000290:	48001000 	.word	0x48001000
 8000294:	20000324 	.word	0x20000324
 8000298:	20000288 	.word	0x20000288
 800029c:	20000320 	.word	0x20000320
 80002a0:	2000033e 	.word	0x2000033e
 80002a4:	20000340 	.word	0x20000340
 80002a8:	2000023c 	.word	0x2000023c
 80002ac:	20000328 	.word	0x20000328
 80002b0:	2000032c 	.word	0x2000032c
 80002b4:	20000330 	.word	0x20000330

080002b8 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a0f      	ldr	r2, [pc, #60]	; (8000300 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d117      	bne.n	80002f8 <HAL_TIM_PWM_PulseFinishedCallback+0x40>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	7f1b      	ldrb	r3, [r3, #28]
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	d107      	bne.n	80002e0 <HAL_TIM_PWM_PulseFinishedCallback+0x28>
		{
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80002d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002d4:	480b      	ldr	r0, [pc, #44]	; (8000304 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 80002d6:	f002 fe51 	bl	8002f7c <HAL_GPIO_TogglePin>
			tim2_ch2 = 3;
 80002da:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 80002dc:	2203      	movs	r2, #3
 80002de:	601a      	str	r2, [r3, #0]
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	7f1b      	ldrb	r3, [r3, #28]
 80002e4:	2b08      	cmp	r3, #8
 80002e6:	d107      	bne.n	80002f8 <HAL_TIM_PWM_PulseFinishedCallback+0x40>
		{
			HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 80002e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002ec:	4805      	ldr	r0, [pc, #20]	; (8000304 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 80002ee:	f002 fe45 	bl	8002f7c <HAL_GPIO_TogglePin>
			tim2_ch4 = 6;
 80002f2:	4b06      	ldr	r3, [pc, #24]	; (800030c <HAL_TIM_PWM_PulseFinishedCallback+0x54>)
 80002f4:	2206      	movs	r2, #6
 80002f6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80002f8:	bf00      	nop
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	2000023c 	.word	0x2000023c
 8000304:	48001000 	.word	0x48001000
 8000308:	2000032c 	.word	0x2000032c
 800030c:	20000330 	.word	0x20000330

08000310 <dutyCycle>:

uint16_t dutyCycle(uint8_t adc, uint16_t period)
{
 8000310:	b480      	push	{r7}
 8000312:	b087      	sub	sp, #28
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	460a      	mov	r2, r1
 800031a:	71fb      	strb	r3, [r7, #7]
 800031c:	4613      	mov	r3, r2
 800031e:	80bb      	strh	r3, [r7, #4]
	uint8_t min = 211;
 8000320:	23d3      	movs	r3, #211	; 0xd3
 8000322:	74fb      	strb	r3, [r7, #19]
	float max = 255 - min;
 8000324:	7cfb      	ldrb	r3, [r7, #19]
 8000326:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800032a:	ee07 3a90 	vmov	s15, r3
 800032e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000332:	edc7 7a03 	vstr	s15, [r7, #12]
	float val = adc - min;
 8000336:	79fa      	ldrb	r2, [r7, #7]
 8000338:	7cfb      	ldrb	r3, [r7, #19]
 800033a:	1ad3      	subs	r3, r2, r3
 800033c:	ee07 3a90 	vmov	s15, r3
 8000340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000344:	edc7 7a05 	vstr	s15, [r7, #20]

	if (val < 0){val = 0;}
 8000348:	edd7 7a05 	vldr	s15, [r7, #20]
 800034c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000354:	d502      	bpl.n	800035c <dutyCycle+0x4c>
 8000356:	f04f 0300 	mov.w	r3, #0
 800035a:	617b      	str	r3, [r7, #20]
	if (adc >= 252){val = max;} //pri spatnem kontaktu nedosahne na max
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	2bfb      	cmp	r3, #251	; 0xfb
 8000360:	d901      	bls.n	8000366 <dutyCycle+0x56>
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	617b      	str	r3, [r7, #20]

	float proc = val / max;
 8000366:	edd7 6a05 	vldr	s13, [r7, #20]
 800036a:	ed97 7a03 	vldr	s14, [r7, #12]
 800036e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000372:	edc7 7a02 	vstr	s15, [r7, #8]
	p = proc * 100;
 8000376:	edd7 7a02 	vldr	s15, [r7, #8]
 800037a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80003b0 <dutyCycle+0xa0>
 800037e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000382:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <dutyCycle+0xa4>)
 8000384:	edc3 7a00 	vstr	s15, [r3]
	return proc * period;
 8000388:	88bb      	ldrh	r3, [r7, #4]
 800038a:	ee07 3a90 	vmov	s15, r3
 800038e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000392:	edd7 7a02 	vldr	s15, [r7, #8]
 8000396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800039a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800039e:	ee17 3a90 	vmov	r3, s15
 80003a2:	b29b      	uxth	r3, r3
}
 80003a4:	4618      	mov	r0, r3
 80003a6:	371c      	adds	r7, #28
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr
 80003b0:	42c80000 	.word	0x42c80000
 80003b4:	20000348 	.word	0x20000348

080003b8 <updateDuty>:

void updateDuty(uint16_t duty)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	80fb      	strh	r3, [r7, #6]
	if (smer_otaceni == DOPRAVA)
 80003c2:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <updateDuty+0x44>)
 80003c4:	f993 3000 	ldrsb.w	r3, [r3]
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d108      	bne.n	80003de <updateDuty+0x26>
	{
		__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_2,duty);
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <updateDuty+0x48>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	88fa      	ldrh	r2, [r7, #6]
 80003d2:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_4,0);
 80003d4:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <updateDuty+0x48>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	2200      	movs	r2, #0
 80003da:	641a      	str	r2, [r3, #64]	; 0x40
	else
	{
		__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_2,0);
		__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_4,duty);
	}
}
 80003dc:	e007      	b.n	80003ee <updateDuty+0x36>
		__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_2,0);
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <updateDuty+0x48>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	2200      	movs	r2, #0
 80003e4:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_4,duty);
 80003e6:	4b06      	ldr	r3, [pc, #24]	; (8000400 <updateDuty+0x48>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	88fa      	ldrh	r2, [r7, #6]
 80003ec:	641a      	str	r2, [r3, #64]	; 0x40
}
 80003ee:	bf00      	nop
 80003f0:	370c      	adds	r7, #12
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	20000000 	.word	0x20000000
 8000400:	2000023c 	.word	0x2000023c

08000404 <zmenSmer>:
void zmenSmer()
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	if (smer_otaceni == DOPRAVA)
 8000408:	4b09      	ldr	r3, [pc, #36]	; (8000430 <zmenSmer+0x2c>)
 800040a:	f993 3000 	ldrsb.w	r3, [r3]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d103      	bne.n	800041a <zmenSmer+0x16>
	{
		smer_otaceni = DOLEVA;
 8000412:	4b07      	ldr	r3, [pc, #28]	; (8000430 <zmenSmer+0x2c>)
 8000414:	22ff      	movs	r2, #255	; 0xff
 8000416:	701a      	strb	r2, [r3, #0]
 8000418:	e002      	b.n	8000420 <zmenSmer+0x1c>
	}
	else
	{
		smer_otaceni = DOPRAVA;
 800041a:	4b05      	ldr	r3, [pc, #20]	; (8000430 <zmenSmer+0x2c>)
 800041c:	2201      	movs	r2, #1
 800041e:	701a      	strb	r2, [r3, #0]
	}

	updateDuty(duty);
 8000420:	4b04      	ldr	r3, [pc, #16]	; (8000434 <zmenSmer+0x30>)
 8000422:	881b      	ldrh	r3, [r3, #0]
 8000424:	4618      	mov	r0, r3
 8000426:	f7ff ffc7 	bl	80003b8 <updateDuty>
}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	20000000 	.word	0x20000000
 8000434:	20000344 	.word	0x20000344

08000438 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	80fb      	strh	r3, [r7, #6]
	GPIO_PinState B1_old=HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000442:	2101      	movs	r1, #1
 8000444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000448:	f002 fd68 	bl	8002f1c <HAL_GPIO_ReadPin>
 800044c:	4603      	mov	r3, r0
 800044e:	73fb      	strb	r3, [r7, #15]
	if ( B1_old== 1)
 8000450:	7bfb      	ldrb	r3, [r7, #15]
 8000452:	2b01      	cmp	r3, #1
 8000454:	d101      	bne.n	800045a <HAL_GPIO_EXTI_Callback+0x22>
	{
		zmenSmer();
 8000456:	f7ff ffd5 	bl	8000404 <zmenSmer>
	}
}
 800045a:	bf00      	nop
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <dec_ascii>:

void dec_ascii(uint16_t dec, char ret[],uint8_t len)
{
 8000464:	b480      	push	{r7}
 8000466:	b087      	sub	sp, #28
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	6039      	str	r1, [r7, #0]
 800046e:	80fb      	strh	r3, [r7, #6]
 8000470:	4613      	mov	r3, r2
 8000472:	717b      	strb	r3, [r7, #5]
	uint16_t temp = dec;
 8000474:	88fb      	ldrh	r3, [r7, #6]
 8000476:	82fb      	strh	r3, [r7, #22]
	uint8_t a=0;
 8000478:	2300      	movs	r3, #0
 800047a:	73bb      	strb	r3, [r7, #14]
	uint16_t rad = 1;
 800047c:	2301      	movs	r3, #1
 800047e:	82bb      	strh	r3, [r7, #20]

	for(int i=1;i<len;i++){rad*=10;}
 8000480:	2301      	movs	r3, #1
 8000482:	613b      	str	r3, [r7, #16]
 8000484:	e008      	b.n	8000498 <dec_ascii+0x34>
 8000486:	8abb      	ldrh	r3, [r7, #20]
 8000488:	461a      	mov	r2, r3
 800048a:	0092      	lsls	r2, r2, #2
 800048c:	4413      	add	r3, r2
 800048e:	005b      	lsls	r3, r3, #1
 8000490:	82bb      	strh	r3, [r7, #20]
 8000492:	693b      	ldr	r3, [r7, #16]
 8000494:	3301      	adds	r3, #1
 8000496:	613b      	str	r3, [r7, #16]
 8000498:	797b      	ldrb	r3, [r7, #5]
 800049a:	693a      	ldr	r2, [r7, #16]
 800049c:	429a      	cmp	r2, r3
 800049e:	dbf2      	blt.n	8000486 <dec_ascii+0x22>

	for(uint8_t i=0;i<len;i++)
 80004a0:	2300      	movs	r3, #0
 80004a2:	73fb      	strb	r3, [r7, #15]
 80004a4:	e01e      	b.n	80004e4 <dec_ascii+0x80>
	{
		a=temp/rad;
 80004a6:	8afa      	ldrh	r2, [r7, #22]
 80004a8:	8abb      	ldrh	r3, [r7, #20]
 80004aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80004ae:	b29b      	uxth	r3, r3
 80004b0:	73bb      	strb	r3, [r7, #14]
		ret[i]=a+48;//48 = '0' v ASCII
 80004b2:	7bfb      	ldrb	r3, [r7, #15]
 80004b4:	683a      	ldr	r2, [r7, #0]
 80004b6:	4413      	add	r3, r2
 80004b8:	7bba      	ldrb	r2, [r7, #14]
 80004ba:	3230      	adds	r2, #48	; 0x30
 80004bc:	b2d2      	uxtb	r2, r2
 80004be:	701a      	strb	r2, [r3, #0]
		temp=temp-a*rad;
 80004c0:	7bbb      	ldrb	r3, [r7, #14]
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	8aba      	ldrh	r2, [r7, #20]
 80004c6:	fb12 f303 	smulbb	r3, r2, r3
 80004ca:	b29b      	uxth	r3, r3
 80004cc:	8afa      	ldrh	r2, [r7, #22]
 80004ce:	1ad3      	subs	r3, r2, r3
 80004d0:	82fb      	strh	r3, [r7, #22]

		rad/=10;
 80004d2:	8abb      	ldrh	r3, [r7, #20]
 80004d4:	4a09      	ldr	r2, [pc, #36]	; (80004fc <dec_ascii+0x98>)
 80004d6:	fba2 2303 	umull	r2, r3, r2, r3
 80004da:	08db      	lsrs	r3, r3, #3
 80004dc:	82bb      	strh	r3, [r7, #20]
	for(uint8_t i=0;i<len;i++)
 80004de:	7bfb      	ldrb	r3, [r7, #15]
 80004e0:	3301      	adds	r3, #1
 80004e2:	73fb      	strb	r3, [r7, #15]
 80004e4:	7bfa      	ldrb	r2, [r7, #15]
 80004e6:	797b      	ldrb	r3, [r7, #5]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d3dc      	bcc.n	80004a6 <dec_ascii+0x42>
	}
}
 80004ec:	bf00      	nop
 80004ee:	bf00      	nop
 80004f0:	371c      	adds	r7, #28
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	cccccccd 	.word	0xcccccccd

08000500 <zpracuj_ADC3>:

void zpracuj_ADC3(uint16_t val)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 800050a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800050e:	4817      	ldr	r0, [pc, #92]	; (800056c <zpracuj_ADC3+0x6c>)
 8000510:	f002 fd34 	bl	8002f7c <HAL_GPIO_TogglePin>
	adc_comp = HAL_GPIO_ReadPin(LD5_GPIO_Port, LD5_Pin)+12;
 8000514:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000518:	4814      	ldr	r0, [pc, #80]	; (800056c <zpracuj_ADC3+0x6c>)
 800051a:	f002 fcff 	bl	8002f1c <HAL_GPIO_ReadPin>
 800051e:	4603      	mov	r3, r0
 8000520:	330c      	adds	r3, #12
 8000522:	b2da      	uxtb	r2, r3
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <zpracuj_ADC3+0x70>)
 8000526:	701a      	strb	r2, [r3, #0]

	//uint16_t puls_new=HAL_ADC_GetValue(&hadc3);

	if(val<600){puls_new=1;}
 8000528:	88fb      	ldrh	r3, [r7, #6]
 800052a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800052e:	d203      	bcs.n	8000538 <zpracuj_ADC3+0x38>
 8000530:	4b10      	ldr	r3, [pc, #64]	; (8000574 <zpracuj_ADC3+0x74>)
 8000532:	2201      	movs	r2, #1
 8000534:	801a      	strh	r2, [r3, #0]
 8000536:	e002      	b.n	800053e <zpracuj_ADC3+0x3e>
	else {puls_new=0;}
 8000538:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <zpracuj_ADC3+0x74>)
 800053a:	2200      	movs	r2, #0
 800053c:	801a      	strh	r2, [r3, #0]

	if(puls_old<puls_new)
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <zpracuj_ADC3+0x78>)
 8000540:	881a      	ldrh	r2, [r3, #0]
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <zpracuj_ADC3+0x74>)
 8000544:	881b      	ldrh	r3, [r3, #0]
 8000546:	429a      	cmp	r2, r3
 8000548:	d205      	bcs.n	8000556 <zpracuj_ADC3+0x56>
	{
		pulsu++;
 800054a:	4b0c      	ldr	r3, [pc, #48]	; (800057c <zpracuj_ADC3+0x7c>)
 800054c:	881b      	ldrh	r3, [r3, #0]
 800054e:	3301      	adds	r3, #1
 8000550:	b29a      	uxth	r2, r3
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <zpracuj_ADC3+0x7c>)
 8000554:	801a      	strh	r2, [r3, #0]
	}

	puls_old=puls_new;
 8000556:	4b07      	ldr	r3, [pc, #28]	; (8000574 <zpracuj_ADC3+0x74>)
 8000558:	881a      	ldrh	r2, [r3, #0]
 800055a:	4b07      	ldr	r3, [pc, #28]	; (8000578 <zpracuj_ADC3+0x78>)
 800055c:	801a      	strh	r2, [r3, #0]
	adc3_old=val;
 800055e:	4a08      	ldr	r2, [pc, #32]	; (8000580 <zpracuj_ADC3+0x80>)
 8000560:	88fb      	ldrh	r3, [r7, #6]
 8000562:	8013      	strh	r3, [r2, #0]
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	48001000 	.word	0x48001000
 8000570:	20000338 	.word	0x20000338
 8000574:	2000033c 	.word	0x2000033c
 8000578:	2000033a 	.word	0x2000033a
 800057c:	2000033e 	.word	0x2000033e
 8000580:	20000336 	.word	0x20000336

08000584 <cti_ADC>:

uint16_t cti_ADC(ADC_HandleTypeDef* hadc)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	uint16_t ret=0;
 800058c:	2300      	movs	r3, #0
 800058e:	81fb      	strh	r3, [r7, #14]
	HAL_ADC_Start(hadc);
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f000 ff71 	bl	8001478 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK)
 8000596:	210a      	movs	r1, #10
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f001 f8b9 	bl	8001710 <HAL_ADC_PollForConversion>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d104      	bne.n	80005ae <cti_ADC+0x2a>
	{
		ret = HAL_ADC_GetValue(hadc);
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f001 f9b5 	bl	8001914 <HAL_ADC_GetValue>
 80005aa:	4603      	mov	r3, r0
 80005ac:	81fb      	strh	r3, [r7, #14]
	}
	HAL_ADC_Stop(hadc);
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f001 f878 	bl	80016a4 <HAL_ADC_Stop>

	return ret;
 80005b4:	89fb      	ldrh	r3, [r7, #14]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <spocitejPerioduTIM>:
void spocitejPerioduTIM(TIM_HandleTypeDef* htim)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	b086      	sub	sp, #24
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
	uint32_t APB2=HAL_RCC_GetPCLK2Freq();
 80005c6:	f005 fc15 	bl	8005df4 <HAL_RCC_GetPCLK2Freq>
 80005ca:	6178      	str	r0, [r7, #20]
	//uint32_t tim16_psc=&htim16.Instance->PSC; //z nejakeho duvodu vrací jinou hodnotu než debug
	uint32_t psc=48000;
 80005cc:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80005d0:	613b      	str	r3, [r7, #16]
	uint32_t arr=__HAL_TIM_GET_AUTORELOAD(htim);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005d8:	60fb      	str	r3, [r7, #12]

	uint32_t speed=APB2/(psc*arr);//Hz
 80005da:	693b      	ldr	r3, [r7, #16]
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	fb02 f303 	mul.w	r3, r2, r3
 80005e2:	697a      	ldr	r2, [r7, #20]
 80005e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e8:	60bb      	str	r3, [r7, #8]
}
 80005ea:	bf00      	nop
 80005ec:	3718      	adds	r7, #24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fcd9 	bl	8000fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f879 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 fa8d 	bl	8000b20 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000606:	f000 f8d9 	bl	80007bc <MX_ADC1_Init>
  MX_ADC3_Init();
 800060a:	f000 f947 	bl	800089c <MX_ADC3_Init>
  MX_TIM17_Init();
 800060e:	f000 fa5f 	bl	8000ad0 <MX_TIM17_Init>
  MX_USB_DEVICE_Init();
 8000612:	f00a ff05 	bl	800b420 <MX_USB_DEVICE_Init>
  MX_TIM16_Init();
 8000616:	f000 fa33 	bl	8000a80 <MX_TIM16_Init>
  MX_TIM2_Init();
 800061a:	f000 f9af 	bl	800097c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 800061e:	2104      	movs	r1, #4
 8000620:	482c      	ldr	r0, [pc, #176]	; (80006d4 <main+0xe0>)
 8000622:	f005 fedd 	bl	80063e0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4);
 8000626:	210c      	movs	r1, #12
 8000628:	482a      	ldr	r0, [pc, #168]	; (80006d4 <main+0xe0>)
 800062a:	f005 fed9 	bl	80063e0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2); //pro kontrolu
 800062e:	4829      	ldr	r0, [pc, #164]	; (80006d4 <main+0xe0>)
 8000630:	f005 fe0a 	bl	8006248 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim17);
 8000634:	4828      	ldr	r0, [pc, #160]	; (80006d8 <main+0xe4>)
 8000636:	f005 fe07 	bl	8006248 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim16);
 800063a:	4828      	ldr	r0, [pc, #160]	; (80006dc <main+0xe8>)
 800063c:	f005 fe04 	bl	8006248 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_StatusTypeDef s=HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);

	spocitejPerioduTIM(&htim16);
 8000640:	4826      	ldr	r0, [pc, #152]	; (80006dc <main+0xe8>)
 8000642:	f7ff ffbc 	bl	80005be <spocitejPerioduTIM>
		if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
		{
			adc_hod = HAL_ADC_GetValue(&hadc1);
		}
		HAL_ADC_Stop(&hadc1);*/
		adc_hod=cti_ADC(&hadc1);
 8000646:	4826      	ldr	r0, [pc, #152]	; (80006e0 <main+0xec>)
 8000648:	f7ff ff9c 	bl	8000584 <cti_ADC>
 800064c:	4603      	mov	r3, r0
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <main+0xf0>)
 8000652:	701a      	strb	r2, [r3, #0]
		duty = dutyCycle(adc_hod, 1000);
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <main+0xf0>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff fe57 	bl	8000310 <dutyCycle>
 8000662:	4603      	mov	r3, r0
 8000664:	461a      	mov	r2, r3
 8000666:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <main+0xf4>)
 8000668:	801a      	strh	r2, [r3, #0]
		updateDuty(duty);
 800066a:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <main+0xf4>)
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff fea2 	bl	80003b8 <updateDuty>

		adc3_new=cti_ADC(&hadc3);
 8000674:	481d      	ldr	r0, [pc, #116]	; (80006ec <main+0xf8>)
 8000676:	f7ff ff85 	bl	8000584 <cti_ADC>
 800067a:	4603      	mov	r3, r0
 800067c:	461a      	mov	r2, r3
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <main+0xfc>)
 8000680:	801a      	strh	r2, [r3, #0]
		zpracuj_ADC3(adc3_new);
 8000682:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <main+0xfc>)
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff ff3a 	bl	8000500 <zpracuj_ADC3>

		char bufferADC[4]={1,1,1,1};
 800068c:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 8000690:	60fb      	str	r3, [r7, #12]
		dec_ascii(adc_hod, bufferADC,4);
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <main+0xf0>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	b29b      	uxth	r3, r3
 8000698:	f107 010c 	add.w	r1, r7, #12
 800069c:	2204      	movs	r2, #4
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff fee0 	bl	8000464 <dec_ascii>
		uint8_t bufferADC_[6]={bufferADC[0],bufferADC[1],bufferADC[2],bufferADC[3],'\r','\n'};
 80006a4:	7b3b      	ldrb	r3, [r7, #12]
 80006a6:	713b      	strb	r3, [r7, #4]
 80006a8:	7b7b      	ldrb	r3, [r7, #13]
 80006aa:	717b      	strb	r3, [r7, #5]
 80006ac:	7bbb      	ldrb	r3, [r7, #14]
 80006ae:	71bb      	strb	r3, [r7, #6]
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
 80006b2:	71fb      	strb	r3, [r7, #7]
 80006b4:	230d      	movs	r3, #13
 80006b6:	723b      	strb	r3, [r7, #8]
 80006b8:	230a      	movs	r3, #10
 80006ba:	727b      	strb	r3, [r7, #9]
		//uint8_t bufferADC_[5]="ABC\r\n";
		CDC_Transmit_FS(bufferADC_,strlen(bufferADC_));
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff fd82 	bl	80001c8 <strlen>
 80006c4:	4602      	mov	r2, r0
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	4611      	mov	r1, r2
 80006ca:	4618      	mov	r0, r3
 80006cc:	f00a ff66 	bl	800b59c <CDC_Transmit_FS>
	{
 80006d0:	e7b9      	b.n	8000646 <main+0x52>
 80006d2:	bf00      	nop
 80006d4:	2000023c 	.word	0x2000023c
 80006d8:	200002d4 	.word	0x200002d4
 80006dc:	20000288 	.word	0x20000288
 80006e0:	2000019c 	.word	0x2000019c
 80006e4:	20000342 	.word	0x20000342
 80006e8:	20000344 	.word	0x20000344
 80006ec:	200001ec 	.word	0x200001ec
 80006f0:	20000334 	.word	0x20000334

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b09e      	sub	sp, #120	; 0x78
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006fe:	2228      	movs	r2, #40	; 0x28
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f00b fb56 	bl	800bdb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000718:	463b      	mov	r3, r7
 800071a:	223c      	movs	r2, #60	; 0x3c
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f00b fb48 	bl	800bdb4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000724:	2301      	movs	r3, #1
 8000726:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000728:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800072c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000732:	2301      	movs	r3, #1
 8000734:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000736:	2302      	movs	r3, #2
 8000738:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800073e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000740:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000744:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000746:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800074a:	4618      	mov	r0, r3
 800074c:	f004 f922 	bl	8004994 <HAL_RCC_OscConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000756:	f000 fa5d 	bl	8000c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	230f      	movs	r3, #15
 800075c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075e:	2302      	movs	r3, #2
 8000760:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800076a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000770:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000774:	2101      	movs	r1, #1
 8000776:	4618      	mov	r0, r3
 8000778:	f005 f94a 	bl	8005a10 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000782:	f000 fa47 	bl	8000c14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC12
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <SystemClock_Config+0xc4>)
 8000788:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800078a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000794:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000796:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800079a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800079c:	463b      	mov	r3, r7
 800079e:	4618      	mov	r0, r3
 80007a0:	f005 fb4a 	bl	8005e38 <HAL_RCCEx_PeriphCLKConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xba>
  {
    Error_Handler();
 80007aa:	f000 fa33 	bl	8000c14 <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	3778      	adds	r7, #120	; 0x78
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	00020180 	.word	0x00020180

080007bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
 80007dc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007de:	4b2e      	ldr	r3, [pc, #184]	; (8000898 <MX_ADC1_Init+0xdc>)
 80007e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007e6:	4b2c      	ldr	r3, [pc, #176]	; (8000898 <MX_ADC1_Init+0xdc>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80007ec:	4b2a      	ldr	r3, [pc, #168]	; (8000898 <MX_ADC1_Init+0xdc>)
 80007ee:	2210      	movs	r2, #16
 80007f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007f2:	4b29      	ldr	r3, [pc, #164]	; (8000898 <MX_ADC1_Init+0xdc>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f8:	4b27      	ldr	r3, [pc, #156]	; (8000898 <MX_ADC1_Init+0xdc>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007fe:	4b26      	ldr	r3, [pc, #152]	; (8000898 <MX_ADC1_Init+0xdc>)
 8000800:	2200      	movs	r2, #0
 8000802:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000806:	4b24      	ldr	r3, [pc, #144]	; (8000898 <MX_ADC1_Init+0xdc>)
 8000808:	2200      	movs	r2, #0
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800080c:	4b22      	ldr	r3, [pc, #136]	; (8000898 <MX_ADC1_Init+0xdc>)
 800080e:	2201      	movs	r2, #1
 8000810:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000812:	4b21      	ldr	r3, [pc, #132]	; (8000898 <MX_ADC1_Init+0xdc>)
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000818:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <MX_ADC1_Init+0xdc>)
 800081a:	2201      	movs	r2, #1
 800081c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800081e:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <MX_ADC1_Init+0xdc>)
 8000820:	2200      	movs	r2, #0
 8000822:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000826:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <MX_ADC1_Init+0xdc>)
 8000828:	2204      	movs	r2, #4
 800082a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800082c:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_ADC1_Init+0xdc>)
 800082e:	2200      	movs	r2, #0
 8000830:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000832:	4b19      	ldr	r3, [pc, #100]	; (8000898 <MX_ADC1_Init+0xdc>)
 8000834:	2200      	movs	r2, #0
 8000836:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000838:	4817      	ldr	r0, [pc, #92]	; (8000898 <MX_ADC1_Init+0xdc>)
 800083a:	f000 fc3d 	bl	80010b8 <HAL_ADC_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000844:	f000 f9e6 	bl	8000c14 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	4811      	ldr	r0, [pc, #68]	; (8000898 <MX_ADC1_Init+0xdc>)
 8000854:	f001 fe64 	bl	8002520 <HAL_ADCEx_MultiModeConfigChannel>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800085e:	f000 f9d9 	bl	8000c14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000862:	2302      	movs	r3, #2
 8000864:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000866:	2301      	movs	r3, #1
 8000868:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	4619      	mov	r1, r3
 800087e:	4806      	ldr	r0, [pc, #24]	; (8000898 <MX_ADC1_Init+0xdc>)
 8000880:	f001 fb64 	bl	8001f4c <HAL_ADC_ConfigChannel>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800088a:	f000 f9c3 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	3728      	adds	r7, #40	; 0x28
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	2000019c 	.word	0x2000019c

0800089c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
 80008bc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80008be:	4b2d      	ldr	r3, [pc, #180]	; (8000974 <MX_ADC3_Init+0xd8>)
 80008c0:	4a2d      	ldr	r2, [pc, #180]	; (8000978 <MX_ADC3_Init+0xdc>)
 80008c2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008c4:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <MX_ADC3_Init+0xd8>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80008ca:	4b2a      	ldr	r3, [pc, #168]	; (8000974 <MX_ADC3_Init+0xd8>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008d0:	4b28      	ldr	r3, [pc, #160]	; (8000974 <MX_ADC3_Init+0xd8>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80008d6:	4b27      	ldr	r3, [pc, #156]	; (8000974 <MX_ADC3_Init+0xd8>)
 80008d8:	2200      	movs	r2, #0
 80008da:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008dc:	4b25      	ldr	r3, [pc, #148]	; (8000974 <MX_ADC3_Init+0xd8>)
 80008de:	2200      	movs	r2, #0
 80008e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e4:	4b23      	ldr	r3, [pc, #140]	; (8000974 <MX_ADC3_Init+0xd8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ea:	4b22      	ldr	r3, [pc, #136]	; (8000974 <MX_ADC3_Init+0xd8>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008f0:	4b20      	ldr	r3, [pc, #128]	; (8000974 <MX_ADC3_Init+0xd8>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80008f6:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <MX_ADC3_Init+0xd8>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80008fc:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <MX_ADC3_Init+0xd8>)
 80008fe:	2200      	movs	r2, #0
 8000900:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <MX_ADC3_Init+0xd8>)
 8000906:	2204      	movs	r2, #4
 8000908:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_ADC3_Init+0xd8>)
 800090c:	2200      	movs	r2, #0
 800090e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000910:	4b18      	ldr	r3, [pc, #96]	; (8000974 <MX_ADC3_Init+0xd8>)
 8000912:	2200      	movs	r2, #0
 8000914:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000916:	4817      	ldr	r0, [pc, #92]	; (8000974 <MX_ADC3_Init+0xd8>)
 8000918:	f000 fbce 	bl	80010b8 <HAL_ADC_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8000922:	f000 f977 	bl	8000c14 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	4810      	ldr	r0, [pc, #64]	; (8000974 <MX_ADC3_Init+0xd8>)
 8000932:	f001 fdf5 	bl	8002520 <HAL_ADCEx_MultiModeConfigChannel>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 800093c:	f000 f96a 	bl	8000c14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000940:	2301      	movs	r3, #1
 8000942:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000944:	2301      	movs	r3, #1
 8000946:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000948:	2300      	movs	r3, #0
 800094a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_ADC3_Init+0xd8>)
 800095e:	f001 faf5 	bl	8001f4c <HAL_ADC_ConfigChannel>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000968:	f000 f954 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	3728      	adds	r7, #40	; 0x28
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	200001ec 	.word	0x200001ec
 8000978:	50000400 	.word	0x50000400

0800097c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08e      	sub	sp, #56	; 0x38
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000982:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800099c:	463b      	mov	r3, r7
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]
 80009aa:	615a      	str	r2, [r3, #20]
 80009ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009ae:	4b33      	ldr	r3, [pc, #204]	; (8000a7c <MX_TIM2_Init+0x100>)
 80009b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000;
 80009b6:	4b31      	ldr	r3, [pc, #196]	; (8000a7c <MX_TIM2_Init+0x100>)
 80009b8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80009bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009be:	4b2f      	ldr	r3, [pc, #188]	; (8000a7c <MX_TIM2_Init+0x100>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80009c4:	4b2d      	ldr	r3, [pc, #180]	; (8000a7c <MX_TIM2_Init+0x100>)
 80009c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009cc:	4b2b      	ldr	r3, [pc, #172]	; (8000a7c <MX_TIM2_Init+0x100>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d2:	4b2a      	ldr	r3, [pc, #168]	; (8000a7c <MX_TIM2_Init+0x100>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009d8:	4828      	ldr	r0, [pc, #160]	; (8000a7c <MX_TIM2_Init+0x100>)
 80009da:	f005 fbdd 	bl	8006198 <HAL_TIM_Base_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80009e4:	f000 f916 	bl	8000c14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4821      	ldr	r0, [pc, #132]	; (8000a7c <MX_TIM2_Init+0x100>)
 80009f6:	f006 f873 	bl	8006ae0 <HAL_TIM_ConfigClockSource>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000a00:	f000 f908 	bl	8000c14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a04:	481d      	ldr	r0, [pc, #116]	; (8000a7c <MX_TIM2_Init+0x100>)
 8000a06:	f005 fc89 	bl	800631c <HAL_TIM_PWM_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000a10:	f000 f900 	bl	8000c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	4816      	ldr	r0, [pc, #88]	; (8000a7c <MX_TIM2_Init+0x100>)
 8000a24:	f006 fd6a 	bl	80074fc <HAL_TIMEx_MasterConfigSynchronization>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000a2e:	f000 f8f1 	bl	8000c14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a32:	2360      	movs	r3, #96	; 0x60
 8000a34:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a42:	463b      	mov	r3, r7
 8000a44:	2204      	movs	r2, #4
 8000a46:	4619      	mov	r1, r3
 8000a48:	480c      	ldr	r0, [pc, #48]	; (8000a7c <MX_TIM2_Init+0x100>)
 8000a4a:	f005 ff35 	bl	80068b8 <HAL_TIM_PWM_ConfigChannel>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000a54:	f000 f8de 	bl	8000c14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a58:	463b      	mov	r3, r7
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4807      	ldr	r0, [pc, #28]	; (8000a7c <MX_TIM2_Init+0x100>)
 8000a60:	f005 ff2a 	bl	80068b8 <HAL_TIM_PWM_ConfigChannel>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000a6a:	f000 f8d3 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a6e:	4803      	ldr	r0, [pc, #12]	; (8000a7c <MX_TIM2_Init+0x100>)
 8000a70:	f000 f9c8 	bl	8000e04 <HAL_TIM_MspPostInit>

}
 8000a74:	bf00      	nop
 8000a76:	3738      	adds	r7, #56	; 0x38
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	2000023c 	.word	0x2000023c

08000a80 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a84:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <MX_TIM16_Init+0x48>)
 8000a86:	4a11      	ldr	r2, [pc, #68]	; (8000acc <MX_TIM16_Init+0x4c>)
 8000a88:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48000;
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_TIM16_Init+0x48>)
 8000a8c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000a90:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a92:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <MX_TIM16_Init+0x48>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 500;
 8000a98:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <MX_TIM16_Init+0x48>)
 8000a9a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a9e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_TIM16_Init+0x48>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <MX_TIM16_Init+0x48>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_TIM16_Init+0x48>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_TIM16_Init+0x48>)
 8000ab4:	f005 fb70 	bl	8006198 <HAL_TIM_Base_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000abe:	f000 f8a9 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000288 	.word	0x20000288
 8000acc:	40014400 	.word	0x40014400

08000ad0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <MX_TIM17_Init+0x48>)
 8000ad6:	4a11      	ldr	r2, [pc, #68]	; (8000b1c <MX_TIM17_Init+0x4c>)
 8000ad8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48000;
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_TIM17_Init+0x48>)
 8000adc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000ae0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <MX_TIM17_Init+0x48>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_TIM17_Init+0x48>)
 8000aea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aee:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_TIM17_Init+0x48>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <MX_TIM17_Init+0x48>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_TIM17_Init+0x48>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_TIM17_Init+0x48>)
 8000b04:	f005 fb48 	bl	8006198 <HAL_TIM_Base_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8000b0e:	f000 f881 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200002d4 	.word	0x200002d4
 8000b1c:	40014800 	.word	0x40014800

08000b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b36:	4b35      	ldr	r3, [pc, #212]	; (8000c0c <MX_GPIO_Init+0xec>)
 8000b38:	695b      	ldr	r3, [r3, #20]
 8000b3a:	4a34      	ldr	r2, [pc, #208]	; (8000c0c <MX_GPIO_Init+0xec>)
 8000b3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b40:	6153      	str	r3, [r2, #20]
 8000b42:	4b32      	ldr	r3, [pc, #200]	; (8000c0c <MX_GPIO_Init+0xec>)
 8000b44:	695b      	ldr	r3, [r3, #20]
 8000b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b2f      	ldr	r3, [pc, #188]	; (8000c0c <MX_GPIO_Init+0xec>)
 8000b50:	695b      	ldr	r3, [r3, #20]
 8000b52:	4a2e      	ldr	r2, [pc, #184]	; (8000c0c <MX_GPIO_Init+0xec>)
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b58:	6153      	str	r3, [r2, #20]
 8000b5a:	4b2c      	ldr	r3, [pc, #176]	; (8000c0c <MX_GPIO_Init+0xec>)
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <MX_GPIO_Init+0xec>)
 8000b68:	695b      	ldr	r3, [r3, #20]
 8000b6a:	4a28      	ldr	r2, [pc, #160]	; (8000c0c <MX_GPIO_Init+0xec>)
 8000b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b70:	6153      	str	r3, [r2, #20]
 8000b72:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <MX_GPIO_Init+0xec>)
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b7e:	4b23      	ldr	r3, [pc, #140]	; (8000c0c <MX_GPIO_Init+0xec>)
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	4a22      	ldr	r2, [pc, #136]	; (8000c0c <MX_GPIO_Init+0xec>)
 8000b84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b88:	6153      	str	r3, [r2, #20]
 8000b8a:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <MX_GPIO_Init+0xec>)
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b96:	4b1d      	ldr	r3, [pc, #116]	; (8000c0c <MX_GPIO_Init+0xec>)
 8000b98:	695b      	ldr	r3, [r3, #20]
 8000b9a:	4a1c      	ldr	r2, [pc, #112]	; (8000c0c <MX_GPIO_Init+0xec>)
 8000b9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ba0:	6153      	str	r3, [r2, #20]
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <MX_GPIO_Init+0xec>)
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000bb4:	4816      	ldr	r0, [pc, #88]	; (8000c10 <MX_GPIO_Init+0xf0>)
 8000bb6:	f002 f9c9 	bl	8002f4c <HAL_GPIO_WritePin>
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bbe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd2:	f002 f829 	bl	8002c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD7_Pin
                           LD9_Pin LD10_Pin LD8_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 8000bd6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000bda:	617b      	str	r3, [r7, #20]
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	4808      	ldr	r0, [pc, #32]	; (8000c10 <MX_GPIO_Init+0xf0>)
 8000bf0:	f002 f81a 	bl	8002c28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2006      	movs	r0, #6
 8000bfa:	f001 ffde 	bl	8002bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bfe:	2006      	movs	r0, #6
 8000c00:	f001 fff7 	bl	8002bf2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c04:	bf00      	nop
 8000c06:	3728      	adds	r7, #40	; 0x28
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	48001000 	.word	0x48001000

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c1c:	e7fe      	b.n	8000c1c <Error_Handler+0x8>
	...

08000c20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <HAL_MspInit+0x44>)
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <HAL_MspInit+0x44>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6193      	str	r3, [r2, #24]
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <HAL_MspInit+0x44>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <HAL_MspInit+0x44>)
 8000c40:	69db      	ldr	r3, [r3, #28]
 8000c42:	4a08      	ldr	r2, [pc, #32]	; (8000c64 <HAL_MspInit+0x44>)
 8000c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c48:	61d3      	str	r3, [r2, #28]
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_MspInit+0x44>)
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c56:	2007      	movs	r0, #7
 8000c58:	f001 ffa4 	bl	8002ba4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40021000 	.word	0x40021000

08000c68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08c      	sub	sp, #48	; 0x30
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c88:	d125      	bne.n	8000cd6 <HAL_ADC_MspInit+0x6e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c8a:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <HAL_ADC_MspInit+0xd8>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	4a2c      	ldr	r2, [pc, #176]	; (8000d40 <HAL_ADC_MspInit+0xd8>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c94:	6153      	str	r3, [r2, #20]
 8000c96:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <HAL_ADC_MspInit+0xd8>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	61bb      	str	r3, [r7, #24]
 8000ca0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	4b27      	ldr	r3, [pc, #156]	; (8000d40 <HAL_ADC_MspInit+0xd8>)
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	4a26      	ldr	r2, [pc, #152]	; (8000d40 <HAL_ADC_MspInit+0xd8>)
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cac:	6153      	str	r3, [r2, #20]
 8000cae:	4b24      	ldr	r3, [pc, #144]	; (8000d40 <HAL_ADC_MspInit+0xd8>)
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd0:	f001 ffaa 	bl	8002c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000cd4:	e030      	b.n	8000d38 <HAL_ADC_MspInit+0xd0>
  else if(hadc->Instance==ADC3)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a1a      	ldr	r2, [pc, #104]	; (8000d44 <HAL_ADC_MspInit+0xdc>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d12b      	bne.n	8000d38 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000ce0:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <HAL_ADC_MspInit+0xd8>)
 8000ce2:	695b      	ldr	r3, [r3, #20]
 8000ce4:	4a16      	ldr	r2, [pc, #88]	; (8000d40 <HAL_ADC_MspInit+0xd8>)
 8000ce6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000cea:	6153      	str	r3, [r2, #20]
 8000cec:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <HAL_ADC_MspInit+0xd8>)
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <HAL_ADC_MspInit+0xd8>)
 8000cfa:	695b      	ldr	r3, [r3, #20]
 8000cfc:	4a10      	ldr	r2, [pc, #64]	; (8000d40 <HAL_ADC_MspInit+0xd8>)
 8000cfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d02:	6153      	str	r3, [r2, #20]
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <HAL_ADC_MspInit+0xd8>)
 8000d06:	695b      	ldr	r3, [r3, #20]
 8000d08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d10:	2302      	movs	r3, #2
 8000d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d14:	2303      	movs	r3, #3
 8000d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1c:	f107 031c 	add.w	r3, r7, #28
 8000d20:	4619      	mov	r1, r3
 8000d22:	4809      	ldr	r0, [pc, #36]	; (8000d48 <HAL_ADC_MspInit+0xe0>)
 8000d24:	f001 ff80 	bl	8002c28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	202f      	movs	r0, #47	; 0x2f
 8000d2e:	f001 ff44 	bl	8002bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000d32:	202f      	movs	r0, #47	; 0x2f
 8000d34:	f001 ff5d 	bl	8002bf2 <HAL_NVIC_EnableIRQ>
}
 8000d38:	bf00      	nop
 8000d3a:	3730      	adds	r7, #48	; 0x30
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40021000 	.word	0x40021000
 8000d44:	50000400 	.word	0x50000400
 8000d48:	48000400 	.word	0x48000400

08000d4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d5c:	d114      	bne.n	8000d88 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d5e:	4b26      	ldr	r3, [pc, #152]	; (8000df8 <HAL_TIM_Base_MspInit+0xac>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	4a25      	ldr	r2, [pc, #148]	; (8000df8 <HAL_TIM_Base_MspInit+0xac>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	61d3      	str	r3, [r2, #28]
 8000d6a:	4b23      	ldr	r3, [pc, #140]	; (8000df8 <HAL_TIM_Base_MspInit+0xac>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2100      	movs	r1, #0
 8000d7a:	201c      	movs	r0, #28
 8000d7c:	f001 ff1d 	bl	8002bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d80:	201c      	movs	r0, #28
 8000d82:	f001 ff36 	bl	8002bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000d86:	e032      	b.n	8000dee <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a1b      	ldr	r2, [pc, #108]	; (8000dfc <HAL_TIM_Base_MspInit+0xb0>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d114      	bne.n	8000dbc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <HAL_TIM_Base_MspInit+0xac>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	4a18      	ldr	r2, [pc, #96]	; (8000df8 <HAL_TIM_Base_MspInit+0xac>)
 8000d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d9c:	6193      	str	r3, [r2, #24]
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <HAL_TIM_Base_MspInit+0xac>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2100      	movs	r1, #0
 8000dae:	2019      	movs	r0, #25
 8000db0:	f001 ff03 	bl	8002bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000db4:	2019      	movs	r0, #25
 8000db6:	f001 ff1c 	bl	8002bf2 <HAL_NVIC_EnableIRQ>
}
 8000dba:	e018      	b.n	8000dee <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM17)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0f      	ldr	r2, [pc, #60]	; (8000e00 <HAL_TIM_Base_MspInit+0xb4>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d113      	bne.n	8000dee <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <HAL_TIM_Base_MspInit+0xac>)
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	4a0b      	ldr	r2, [pc, #44]	; (8000df8 <HAL_TIM_Base_MspInit+0xac>)
 8000dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dd0:	6193      	str	r3, [r2, #24]
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <HAL_TIM_Base_MspInit+0xac>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	201a      	movs	r0, #26
 8000de4:	f001 fee9 	bl	8002bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000de8:	201a      	movs	r0, #26
 8000dea:	f001 ff02 	bl	8002bf2 <HAL_NVIC_EnableIRQ>
}
 8000dee:	bf00      	nop
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40014400 	.word	0x40014400
 8000e00:	40014800 	.word	0x40014800

08000e04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e24:	d11b      	bne.n	8000e5e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <HAL_TIM_MspPostInit+0x64>)
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	4a0f      	ldr	r2, [pc, #60]	; (8000e68 <HAL_TIM_MspPostInit+0x64>)
 8000e2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e30:	6153      	str	r3, [r2, #20]
 8000e32:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <HAL_TIM_MspPostInit+0x64>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PD4     ------> TIM2_CH2
    PD6     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000e3e:	2350      	movs	r3, #80	; 0x50
 8000e40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	4619      	mov	r1, r3
 8000e58:	4804      	ldr	r0, [pc, #16]	; (8000e6c <HAL_TIM_MspPostInit+0x68>)
 8000e5a:	f001 fee5 	bl	8002c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e5e:	bf00      	nop
 8000e60:	3720      	adds	r7, #32
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	48000c00 	.word	0x48000c00

08000e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <NMI_Handler+0x4>

08000e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <HardFault_Handler+0x4>

08000e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <MemManage_Handler+0x4>

08000e82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebc:	f000 f8be 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f002 f871 	bl	8002fb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ed8:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000eda:	f002 f979 	bl	80031d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20001018 	.word	0x20001018

08000ee8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000eee:	f005 fbc3 	bl	8006678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000288 	.word	0x20000288

08000efc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000f00:	4802      	ldr	r0, [pc, #8]	; (8000f0c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000f02:	f005 fbb9 	bl	8006678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200002d4 	.word	0x200002d4

08000f10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f14:	4802      	ldr	r0, [pc, #8]	; (8000f20 <TIM2_IRQHandler+0x10>)
 8000f16:	f005 fbaf 	bl	8006678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	2000023c 	.word	0x2000023c

08000f24 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <ADC3_IRQHandler+0x10>)
 8000f2a:	f000 fd01 	bl	8001930 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200001ec 	.word	0x200001ec

08000f38 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <SystemInit+0x20>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <SystemInit+0x20>)
 8000f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f94 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f60:	f7ff ffea 	bl	8000f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f64:	480c      	ldr	r0, [pc, #48]	; (8000f98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f66:	490d      	ldr	r1, [pc, #52]	; (8000f9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f68:	4a0d      	ldr	r2, [pc, #52]	; (8000fa0 <LoopForever+0xe>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f6c:	e002      	b.n	8000f74 <LoopCopyDataInit>

08000f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f72:	3304      	adds	r3, #4

08000f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f78:	d3f9      	bcc.n	8000f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f7c:	4c0a      	ldr	r4, [pc, #40]	; (8000fa8 <LoopForever+0x16>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f80:	e001      	b.n	8000f86 <LoopFillZerobss>

08000f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f84:	3204      	adds	r2, #4

08000f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f88:	d3fb      	bcc.n	8000f82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f8a:	f00a ff1b 	bl	800bdc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f8e:	f7ff fb31 	bl	80005f4 <main>

08000f92 <LoopForever>:

LoopForever:
    b LoopForever
 8000f92:	e7fe      	b.n	8000f92 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f94:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f9c:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000fa0:	0800beac 	.word	0x0800beac
  ldr r2, =_sbss
 8000fa4:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000fa8:	20001524 	.word	0x20001524

08000fac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fac:	e7fe      	b.n	8000fac <ADC1_2_IRQHandler>
	...

08000fb0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_Init+0x28>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_Init+0x28>)
 8000fba:	f043 0310 	orr.w	r3, r3, #16
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f001 fdef 	bl	8002ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f000 f808 	bl	8000fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fcc:	f7ff fe28 	bl	8000c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40022000 	.word	0x40022000

08000fdc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_InitTick+0x54>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x58>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f001 fe07 	bl	8002c0e <HAL_SYSTICK_Config>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e00e      	b.n	8001028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b0f      	cmp	r3, #15
 800100e:	d80a      	bhi.n	8001026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001010:	2200      	movs	r2, #0
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f001 fdcf 	bl	8002bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <HAL_InitTick+0x5c>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	e000      	b.n	8001028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000004 	.word	0x20000004
 8001034:	2000000c 	.word	0x2000000c
 8001038:	20000008 	.word	0x20000008

0800103c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	2000000c 	.word	0x2000000c
 8001060:	2000034c 	.word	0x2000034c

08001064 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;  
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	2000034c 	.word	0x2000034c

0800107c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b09a      	sub	sp, #104	; 0x68
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d101      	bne.n	80010d8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e1c9      	b.n	800146c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f003 0310 	and.w	r3, r3, #16
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d176      	bne.n	80011d8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d152      	bne.n	8001198 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff fdab 	bl	8000c68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d13b      	bne.n	8001198 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f001 fb53 	bl	80027cc <ADC_Disable>
 8001126:	4603      	mov	r3, r0
 8001128:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	f003 0310 	and.w	r3, r3, #16
 8001134:	2b00      	cmp	r3, #0
 8001136:	d12f      	bne.n	8001198 <HAL_ADC_Init+0xe0>
 8001138:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800113c:	2b00      	cmp	r3, #0
 800113e:	d12b      	bne.n	8001198 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001148:	f023 0302 	bic.w	r3, r3, #2
 800114c:	f043 0202 	orr.w	r2, r3, #2
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001162:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001172:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001174:	4b86      	ldr	r3, [pc, #536]	; (8001390 <HAL_ADC_Init+0x2d8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a86      	ldr	r2, [pc, #536]	; (8001394 <HAL_ADC_Init+0x2dc>)
 800117a:	fba2 2303 	umull	r2, r3, r2, r3
 800117e:	0c9a      	lsrs	r2, r3, #18
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800118a:	e002      	b.n	8001192 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	3b01      	subs	r3, #1
 8001190:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1f9      	bne.n	800118c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d007      	beq.n	80011b6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80011b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011b4:	d110      	bne.n	80011d8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f023 0312 	bic.w	r3, r3, #18
 80011be:	f043 0210 	orr.w	r2, r3, #16
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f043 0201 	orr.w	r2, r3, #1
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	f003 0310 	and.w	r3, r3, #16
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f040 8136 	bne.w	8001452 <HAL_ADC_Init+0x39a>
 80011e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f040 8131 	bne.w	8001452 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f040 8129 	bne.w	8001452 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001208:	f043 0202 	orr.w	r2, r3, #2
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001218:	d004      	beq.n	8001224 <HAL_ADC_Init+0x16c>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a5e      	ldr	r2, [pc, #376]	; (8001398 <HAL_ADC_Init+0x2e0>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d101      	bne.n	8001228 <HAL_ADC_Init+0x170>
 8001224:	4b5d      	ldr	r3, [pc, #372]	; (800139c <HAL_ADC_Init+0x2e4>)
 8001226:	e000      	b.n	800122a <HAL_ADC_Init+0x172>
 8001228:	4b5d      	ldr	r3, [pc, #372]	; (80013a0 <HAL_ADC_Init+0x2e8>)
 800122a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001234:	d102      	bne.n	800123c <HAL_ADC_Init+0x184>
 8001236:	4b58      	ldr	r3, [pc, #352]	; (8001398 <HAL_ADC_Init+0x2e0>)
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	e01a      	b.n	8001272 <HAL_ADC_Init+0x1ba>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a55      	ldr	r2, [pc, #340]	; (8001398 <HAL_ADC_Init+0x2e0>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d103      	bne.n	800124e <HAL_ADC_Init+0x196>
 8001246:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	e011      	b.n	8001272 <HAL_ADC_Init+0x1ba>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a54      	ldr	r2, [pc, #336]	; (80013a4 <HAL_ADC_Init+0x2ec>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d102      	bne.n	800125e <HAL_ADC_Init+0x1a6>
 8001258:	4b53      	ldr	r3, [pc, #332]	; (80013a8 <HAL_ADC_Init+0x2f0>)
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	e009      	b.n	8001272 <HAL_ADC_Init+0x1ba>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a51      	ldr	r2, [pc, #324]	; (80013a8 <HAL_ADC_Init+0x2f0>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d102      	bne.n	800126e <HAL_ADC_Init+0x1b6>
 8001268:	4b4e      	ldr	r3, [pc, #312]	; (80013a4 <HAL_ADC_Init+0x2ec>)
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	e001      	b.n	8001272 <HAL_ADC_Init+0x1ba>
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b01      	cmp	r3, #1
 800127e:	d108      	bne.n	8001292 <HAL_ADC_Init+0x1da>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	2b01      	cmp	r3, #1
 800128c:	d101      	bne.n	8001292 <HAL_ADC_Init+0x1da>
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <HAL_ADC_Init+0x1dc>
 8001292:	2300      	movs	r3, #0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d11c      	bne.n	80012d2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001298:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800129a:	2b00      	cmp	r3, #0
 800129c:	d010      	beq.n	80012c0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d107      	bne.n	80012ba <HAL_ADC_Init+0x202>
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d101      	bne.n	80012ba <HAL_ADC_Init+0x202>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <HAL_ADC_Init+0x204>
 80012ba:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d108      	bne.n	80012d2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80012c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	431a      	orrs	r2, r3
 80012ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012d0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7e5b      	ldrb	r3, [r3, #25]
 80012d6:	035b      	lsls	r3, r3, #13
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80012dc:	2a01      	cmp	r2, #1
 80012de:	d002      	beq.n	80012e6 <HAL_ADC_Init+0x22e>
 80012e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012e4:	e000      	b.n	80012e8 <HAL_ADC_Init+0x230>
 80012e6:	2200      	movs	r2, #0
 80012e8:	431a      	orrs	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	431a      	orrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012f8:	4313      	orrs	r3, r2
 80012fa:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d11b      	bne.n	800133e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	7e5b      	ldrb	r3, [r3, #25]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d109      	bne.n	8001322 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001312:	3b01      	subs	r3, #1
 8001314:	045a      	lsls	r2, r3, #17
 8001316:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001318:	4313      	orrs	r3, r2
 800131a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800131e:	663b      	str	r3, [r7, #96]	; 0x60
 8001320:	e00d      	b.n	800133e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800132a:	f043 0220 	orr.w	r2, r3, #32
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f043 0201 	orr.w	r2, r3, #1
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001342:	2b01      	cmp	r3, #1
 8001344:	d03a      	beq.n	80013bc <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a16      	ldr	r2, [pc, #88]	; (80013a4 <HAL_ADC_Init+0x2ec>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d004      	beq.n	800135a <HAL_ADC_Init+0x2a2>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <HAL_ADC_Init+0x2f0>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d128      	bne.n	80013ac <HAL_ADC_Init+0x2f4>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001362:	d012      	beq.n	800138a <HAL_ADC_Init+0x2d2>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800136c:	d00a      	beq.n	8001384 <HAL_ADC_Init+0x2cc>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001372:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001376:	d002      	beq.n	800137e <HAL_ADC_Init+0x2c6>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137c:	e018      	b.n	80013b0 <HAL_ADC_Init+0x2f8>
 800137e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001382:	e015      	b.n	80013b0 <HAL_ADC_Init+0x2f8>
 8001384:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001388:	e012      	b.n	80013b0 <HAL_ADC_Init+0x2f8>
 800138a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800138e:	e00f      	b.n	80013b0 <HAL_ADC_Init+0x2f8>
 8001390:	20000004 	.word	0x20000004
 8001394:	431bde83 	.word	0x431bde83
 8001398:	50000100 	.word	0x50000100
 800139c:	50000300 	.word	0x50000300
 80013a0:	50000700 	.word	0x50000700
 80013a4:	50000400 	.word	0x50000400
 80013a8:	50000500 	.word	0x50000500
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80013b4:	4313      	orrs	r3, r2
 80013b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013b8:	4313      	orrs	r3, r2
 80013ba:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d114      	bne.n	80013f4 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013d8:	f023 0302 	bic.w	r3, r3, #2
 80013dc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	7e1b      	ldrb	r3, [r3, #24]
 80013e2:	039a      	lsls	r2, r3, #14
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4313      	orrs	r3, r2
 80013ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013f0:	4313      	orrs	r3, r2
 80013f2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <HAL_ADC_Init+0x3bc>)
 80013fc:	4013      	ands	r3, r2
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6812      	ldr	r2, [r2, #0]
 8001402:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001404:	430b      	orrs	r3, r1
 8001406:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d10c      	bne.n	800142a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f023 010f 	bic.w	r1, r3, #15
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	1e5a      	subs	r2, r3, #1
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	631a      	str	r2, [r3, #48]	; 0x30
 8001428:	e007      	b.n	800143a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 020f 	bic.w	r2, r2, #15
 8001438:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	f023 0303 	bic.w	r3, r3, #3
 8001448:	f043 0201 	orr.w	r2, r3, #1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	641a      	str	r2, [r3, #64]	; 0x40
 8001450:	e00a      	b.n	8001468 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f023 0312 	bic.w	r3, r3, #18
 800145a:	f043 0210 	orr.w	r2, r3, #16
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001462:	2301      	movs	r3, #1
 8001464:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001468:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800146c:	4618      	mov	r0, r3
 800146e:	3768      	adds	r7, #104	; 0x68
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	fff0c007 	.word	0xfff0c007

08001478 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001480:	2300      	movs	r3, #0
 8001482:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	2b00      	cmp	r3, #0
 8001490:	f040 80f9 	bne.w	8001686 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800149a:	2b01      	cmp	r3, #1
 800149c:	d101      	bne.n	80014a2 <HAL_ADC_Start+0x2a>
 800149e:	2302      	movs	r3, #2
 80014a0:	e0f4      	b.n	800168c <HAL_ADC_Start+0x214>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2201      	movs	r2, #1
 80014a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f001 f92a 	bl	8002704 <ADC_Enable>
 80014b0:	4603      	mov	r3, r0
 80014b2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f040 80e0 	bne.w	800167c <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014c4:	f023 0301 	bic.w	r3, r3, #1
 80014c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014d8:	d004      	beq.n	80014e4 <HAL_ADC_Start+0x6c>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a6d      	ldr	r2, [pc, #436]	; (8001694 <HAL_ADC_Start+0x21c>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d106      	bne.n	80014f2 <HAL_ADC_Start+0x7a>
 80014e4:	4b6c      	ldr	r3, [pc, #432]	; (8001698 <HAL_ADC_Start+0x220>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 031f 	and.w	r3, r3, #31
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d010      	beq.n	8001512 <HAL_ADC_Start+0x9a>
 80014f0:	e005      	b.n	80014fe <HAL_ADC_Start+0x86>
 80014f2:	4b6a      	ldr	r3, [pc, #424]	; (800169c <HAL_ADC_Start+0x224>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 031f 	and.w	r3, r3, #31
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d009      	beq.n	8001512 <HAL_ADC_Start+0x9a>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001506:	d004      	beq.n	8001512 <HAL_ADC_Start+0x9a>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a64      	ldr	r2, [pc, #400]	; (80016a0 <HAL_ADC_Start+0x228>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d115      	bne.n	800153e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d036      	beq.n	800159a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001534:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800153c:	e02d      	b.n	800159a <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001552:	d004      	beq.n	800155e <HAL_ADC_Start+0xe6>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a4e      	ldr	r2, [pc, #312]	; (8001694 <HAL_ADC_Start+0x21c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d10a      	bne.n	8001574 <HAL_ADC_Start+0xfc>
 800155e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	bf14      	ite	ne
 800156c:	2301      	movne	r3, #1
 800156e:	2300      	moveq	r3, #0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	e008      	b.n	8001586 <HAL_ADC_Start+0x10e>
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <HAL_ADC_Start+0x228>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157c:	2b00      	cmp	r3, #0
 800157e:	bf14      	ite	ne
 8001580:	2301      	movne	r3, #1
 8001582:	2300      	moveq	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d007      	beq.n	800159a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001592:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015a6:	d106      	bne.n	80015b6 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ac:	f023 0206 	bic.w	r2, r3, #6
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	645a      	str	r2, [r3, #68]	; 0x44
 80015b4:	e002      	b.n	80015bc <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	221c      	movs	r2, #28
 80015ca:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015d4:	d004      	beq.n	80015e0 <HAL_ADC_Start+0x168>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a2e      	ldr	r2, [pc, #184]	; (8001694 <HAL_ADC_Start+0x21c>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d106      	bne.n	80015ee <HAL_ADC_Start+0x176>
 80015e0:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <HAL_ADC_Start+0x220>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 031f 	and.w	r3, r3, #31
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d03e      	beq.n	800166a <HAL_ADC_Start+0x1f2>
 80015ec:	e005      	b.n	80015fa <HAL_ADC_Start+0x182>
 80015ee:	4b2b      	ldr	r3, [pc, #172]	; (800169c <HAL_ADC_Start+0x224>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 031f 	and.w	r3, r3, #31
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d037      	beq.n	800166a <HAL_ADC_Start+0x1f2>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001602:	d004      	beq.n	800160e <HAL_ADC_Start+0x196>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a22      	ldr	r2, [pc, #136]	; (8001694 <HAL_ADC_Start+0x21c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d106      	bne.n	800161c <HAL_ADC_Start+0x1a4>
 800160e:	4b22      	ldr	r3, [pc, #136]	; (8001698 <HAL_ADC_Start+0x220>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 031f 	and.w	r3, r3, #31
 8001616:	2b05      	cmp	r3, #5
 8001618:	d027      	beq.n	800166a <HAL_ADC_Start+0x1f2>
 800161a:	e005      	b.n	8001628 <HAL_ADC_Start+0x1b0>
 800161c:	4b1f      	ldr	r3, [pc, #124]	; (800169c <HAL_ADC_Start+0x224>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 031f 	and.w	r3, r3, #31
 8001624:	2b05      	cmp	r3, #5
 8001626:	d020      	beq.n	800166a <HAL_ADC_Start+0x1f2>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001630:	d004      	beq.n	800163c <HAL_ADC_Start+0x1c4>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a17      	ldr	r2, [pc, #92]	; (8001694 <HAL_ADC_Start+0x21c>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d106      	bne.n	800164a <HAL_ADC_Start+0x1d2>
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <HAL_ADC_Start+0x220>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 031f 	and.w	r3, r3, #31
 8001644:	2b09      	cmp	r3, #9
 8001646:	d010      	beq.n	800166a <HAL_ADC_Start+0x1f2>
 8001648:	e005      	b.n	8001656 <HAL_ADC_Start+0x1de>
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <HAL_ADC_Start+0x224>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 031f 	and.w	r3, r3, #31
 8001652:	2b09      	cmp	r3, #9
 8001654:	d009      	beq.n	800166a <HAL_ADC_Start+0x1f2>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800165e:	d004      	beq.n	800166a <HAL_ADC_Start+0x1f2>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <HAL_ADC_Start+0x228>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d10f      	bne.n	800168a <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f042 0204 	orr.w	r2, r2, #4
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	e006      	b.n	800168a <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001684:	e001      	b.n	800168a <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001686:	2302      	movs	r3, #2
 8001688:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800168a:	7bfb      	ldrb	r3, [r7, #15]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	50000100 	.word	0x50000100
 8001698:	50000300 	.word	0x50000300
 800169c:	50000700 	.word	0x50000700
 80016a0:	50000400 	.word	0x50000400

080016a4 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d101      	bne.n	80016be <HAL_ADC_Stop+0x1a>
 80016ba:	2302      	movs	r3, #2
 80016bc:	e023      	b.n	8001706 <HAL_ADC_Stop+0x62>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80016c6:	216c      	movs	r1, #108	; 0x6c
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f001 f8e5 	bl	8002898 <ADC_ConversionStop>
 80016ce:	4603      	mov	r3, r0
 80016d0:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d111      	bne.n	80016fc <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f001 f877 	bl	80027cc <ADC_Disable>
 80016de:	4603      	mov	r3, r0
 80016e0:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d109      	bne.n	80016fc <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016f0:	f023 0301 	bic.w	r3, r3, #1
 80016f4:	f043 0201 	orr.w	r2, r3, #1
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001704:	7bfb      	ldrb	r3, [r7, #15]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	2b08      	cmp	r3, #8
 8001724:	d102      	bne.n	800172c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001726:	2308      	movs	r3, #8
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	e03a      	b.n	80017a2 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001734:	d004      	beq.n	8001740 <HAL_ADC_PollForConversion+0x30>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a72      	ldr	r2, [pc, #456]	; (8001904 <HAL_ADC_PollForConversion+0x1f4>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d101      	bne.n	8001744 <HAL_ADC_PollForConversion+0x34>
 8001740:	4b71      	ldr	r3, [pc, #452]	; (8001908 <HAL_ADC_PollForConversion+0x1f8>)
 8001742:	e000      	b.n	8001746 <HAL_ADC_PollForConversion+0x36>
 8001744:	4b71      	ldr	r3, [pc, #452]	; (800190c <HAL_ADC_PollForConversion+0x1fc>)
 8001746:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 031f 	and.w	r3, r3, #31
 8001750:	2b00      	cmp	r3, #0
 8001752:	d112      	bne.n	800177a <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b01      	cmp	r3, #1
 8001760:	d11d      	bne.n	800179e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f043 0220 	orr.w	r2, r3, #32
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e0bf      	b.n	80018fa <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00b      	beq.n	800179e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f043 0220 	orr.w	r2, r3, #32
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e0ad      	b.n	80018fa <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800179e:	230c      	movs	r3, #12
 80017a0:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017aa:	d004      	beq.n	80017b6 <HAL_ADC_PollForConversion+0xa6>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a54      	ldr	r2, [pc, #336]	; (8001904 <HAL_ADC_PollForConversion+0x1f4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d106      	bne.n	80017c4 <HAL_ADC_PollForConversion+0xb4>
 80017b6:	4b54      	ldr	r3, [pc, #336]	; (8001908 <HAL_ADC_PollForConversion+0x1f8>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 031f 	and.w	r3, r3, #31
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d010      	beq.n	80017e4 <HAL_ADC_PollForConversion+0xd4>
 80017c2:	e005      	b.n	80017d0 <HAL_ADC_PollForConversion+0xc0>
 80017c4:	4b51      	ldr	r3, [pc, #324]	; (800190c <HAL_ADC_PollForConversion+0x1fc>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 031f 	and.w	r3, r3, #31
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d009      	beq.n	80017e4 <HAL_ADC_PollForConversion+0xd4>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017d8:	d004      	beq.n	80017e4 <HAL_ADC_PollForConversion+0xd4>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a4c      	ldr	r2, [pc, #304]	; (8001910 <HAL_ADC_PollForConversion+0x200>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d104      	bne.n	80017ee <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	e00f      	b.n	800180e <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017f6:	d004      	beq.n	8001802 <HAL_ADC_PollForConversion+0xf2>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a41      	ldr	r2, [pc, #260]	; (8001904 <HAL_ADC_PollForConversion+0x1f4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d102      	bne.n	8001808 <HAL_ADC_PollForConversion+0xf8>
 8001802:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001806:	e000      	b.n	800180a <HAL_ADC_PollForConversion+0xfa>
 8001808:	4b41      	ldr	r3, [pc, #260]	; (8001910 <HAL_ADC_PollForConversion+0x200>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800180e:	f7ff fc29 	bl	8001064 <HAL_GetTick>
 8001812:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001814:	e021      	b.n	800185a <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800181c:	d01d      	beq.n	800185a <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d007      	beq.n	8001834 <HAL_ADC_PollForConversion+0x124>
 8001824:	f7ff fc1e 	bl	8001064 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d212      	bcs.n	800185a <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	4013      	ands	r3, r2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10b      	bne.n	800185a <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f043 0204 	orr.w	r2, r3, #4
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e04f      	b.n	80018fa <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	4013      	ands	r3, r2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0d6      	beq.n	8001816 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800187e:	2b00      	cmp	r3, #0
 8001880:	d131      	bne.n	80018e6 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001888:	2b00      	cmp	r3, #0
 800188a:	d12c      	bne.n	80018e6 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b08      	cmp	r3, #8
 8001898:	d125      	bne.n	80018e6 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d112      	bne.n	80018ce <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d112      	bne.n	80018e6 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	f043 0201 	orr.w	r2, r3, #1
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	641a      	str	r2, [r3, #64]	; 0x40
 80018cc:	e00b      	b.n	80018e6 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f043 0220 	orr.w	r2, r3, #32
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f043 0201 	orr.w	r2, r3, #1
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d103      	bne.n	80018f8 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	50000100 	.word	0x50000100
 8001908:	50000300 	.word	0x50000300
 800190c:	50000700 	.word	0x50000700
 8001910:	50000400 	.word	0x50000400

08001914 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001938:	2300      	movs	r3, #0
 800193a:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	2b00      	cmp	r3, #0
 800195c:	d004      	beq.n	8001968 <HAL_ADC_IRQHandler+0x38>
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	d10b      	bne.n	8001980 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 80bc 	beq.w	8001aec <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 80b6 	beq.w	8001aec <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	f003 0310 	and.w	r3, r3, #16
 8001988:	2b00      	cmp	r3, #0
 800198a:	d105      	bne.n	8001998 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019a0:	d004      	beq.n	80019ac <HAL_ADC_IRQHandler+0x7c>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a90      	ldr	r2, [pc, #576]	; (8001be8 <HAL_ADC_IRQHandler+0x2b8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d106      	bne.n	80019ba <HAL_ADC_IRQHandler+0x8a>
 80019ac:	4b8f      	ldr	r3, [pc, #572]	; (8001bec <HAL_ADC_IRQHandler+0x2bc>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 031f 	and.w	r3, r3, #31
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d03e      	beq.n	8001a36 <HAL_ADC_IRQHandler+0x106>
 80019b8:	e005      	b.n	80019c6 <HAL_ADC_IRQHandler+0x96>
 80019ba:	4b8d      	ldr	r3, [pc, #564]	; (8001bf0 <HAL_ADC_IRQHandler+0x2c0>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 031f 	and.w	r3, r3, #31
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d037      	beq.n	8001a36 <HAL_ADC_IRQHandler+0x106>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019ce:	d004      	beq.n	80019da <HAL_ADC_IRQHandler+0xaa>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a84      	ldr	r2, [pc, #528]	; (8001be8 <HAL_ADC_IRQHandler+0x2b8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d106      	bne.n	80019e8 <HAL_ADC_IRQHandler+0xb8>
 80019da:	4b84      	ldr	r3, [pc, #528]	; (8001bec <HAL_ADC_IRQHandler+0x2bc>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 031f 	and.w	r3, r3, #31
 80019e2:	2b05      	cmp	r3, #5
 80019e4:	d027      	beq.n	8001a36 <HAL_ADC_IRQHandler+0x106>
 80019e6:	e005      	b.n	80019f4 <HAL_ADC_IRQHandler+0xc4>
 80019e8:	4b81      	ldr	r3, [pc, #516]	; (8001bf0 <HAL_ADC_IRQHandler+0x2c0>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 031f 	and.w	r3, r3, #31
 80019f0:	2b05      	cmp	r3, #5
 80019f2:	d020      	beq.n	8001a36 <HAL_ADC_IRQHandler+0x106>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019fc:	d004      	beq.n	8001a08 <HAL_ADC_IRQHandler+0xd8>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a79      	ldr	r2, [pc, #484]	; (8001be8 <HAL_ADC_IRQHandler+0x2b8>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d106      	bne.n	8001a16 <HAL_ADC_IRQHandler+0xe6>
 8001a08:	4b78      	ldr	r3, [pc, #480]	; (8001bec <HAL_ADC_IRQHandler+0x2bc>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 031f 	and.w	r3, r3, #31
 8001a10:	2b09      	cmp	r3, #9
 8001a12:	d010      	beq.n	8001a36 <HAL_ADC_IRQHandler+0x106>
 8001a14:	e005      	b.n	8001a22 <HAL_ADC_IRQHandler+0xf2>
 8001a16:	4b76      	ldr	r3, [pc, #472]	; (8001bf0 <HAL_ADC_IRQHandler+0x2c0>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 031f 	and.w	r3, r3, #31
 8001a1e:	2b09      	cmp	r3, #9
 8001a20:	d009      	beq.n	8001a36 <HAL_ADC_IRQHandler+0x106>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a2a:	d004      	beq.n	8001a36 <HAL_ADC_IRQHandler+0x106>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a70      	ldr	r2, [pc, #448]	; (8001bf4 <HAL_ADC_IRQHandler+0x2c4>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d104      	bne.n	8001a40 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	61bb      	str	r3, [r7, #24]
 8001a3e:	e00f      	b.n	8001a60 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a48:	d004      	beq.n	8001a54 <HAL_ADC_IRQHandler+0x124>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a66      	ldr	r2, [pc, #408]	; (8001be8 <HAL_ADC_IRQHandler+0x2b8>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d102      	bne.n	8001a5a <HAL_ADC_IRQHandler+0x12a>
 8001a54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a58:	e000      	b.n	8001a5c <HAL_ADC_IRQHandler+0x12c>
 8001a5a:	4b66      	ldr	r3, [pc, #408]	; (8001bf4 <HAL_ADC_IRQHandler+0x2c4>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d137      	bne.n	8001ade <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d132      	bne.n	8001ade <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d02d      	beq.n	8001ade <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d11a      	bne.n	8001ac6 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 020c 	bic.w	r2, r2, #12
 8001a9e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d112      	bne.n	8001ade <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	f043 0201 	orr.w	r2, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	641a      	str	r2, [r3, #64]	; 0x40
 8001ac4:	e00b      	b.n	8001ade <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f043 0210 	orr.w	r2, r3, #16
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	f043 0201 	orr.w	r2, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff facc 	bl	800107c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	220c      	movs	r2, #12
 8001aea:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	f003 0320 	and.w	r3, r3, #32
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d004      	beq.n	8001b00 <HAL_ADC_IRQHandler+0x1d0>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f003 0320 	and.w	r3, r3, #32
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10b      	bne.n	8001b18 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 8138 	beq.w	8001d7c <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 8132 	beq.w	8001d7c <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b2c:	d004      	beq.n	8001b38 <HAL_ADC_IRQHandler+0x208>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a2d      	ldr	r2, [pc, #180]	; (8001be8 <HAL_ADC_IRQHandler+0x2b8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d106      	bne.n	8001b46 <HAL_ADC_IRQHandler+0x216>
 8001b38:	4b2c      	ldr	r3, [pc, #176]	; (8001bec <HAL_ADC_IRQHandler+0x2bc>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 031f 	and.w	r3, r3, #31
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d03e      	beq.n	8001bc2 <HAL_ADC_IRQHandler+0x292>
 8001b44:	e005      	b.n	8001b52 <HAL_ADC_IRQHandler+0x222>
 8001b46:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <HAL_ADC_IRQHandler+0x2c0>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 031f 	and.w	r3, r3, #31
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d037      	beq.n	8001bc2 <HAL_ADC_IRQHandler+0x292>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b5a:	d004      	beq.n	8001b66 <HAL_ADC_IRQHandler+0x236>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a21      	ldr	r2, [pc, #132]	; (8001be8 <HAL_ADC_IRQHandler+0x2b8>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d106      	bne.n	8001b74 <HAL_ADC_IRQHandler+0x244>
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <HAL_ADC_IRQHandler+0x2bc>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 031f 	and.w	r3, r3, #31
 8001b6e:	2b05      	cmp	r3, #5
 8001b70:	d027      	beq.n	8001bc2 <HAL_ADC_IRQHandler+0x292>
 8001b72:	e005      	b.n	8001b80 <HAL_ADC_IRQHandler+0x250>
 8001b74:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <HAL_ADC_IRQHandler+0x2c0>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 031f 	and.w	r3, r3, #31
 8001b7c:	2b05      	cmp	r3, #5
 8001b7e:	d020      	beq.n	8001bc2 <HAL_ADC_IRQHandler+0x292>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b88:	d004      	beq.n	8001b94 <HAL_ADC_IRQHandler+0x264>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a16      	ldr	r2, [pc, #88]	; (8001be8 <HAL_ADC_IRQHandler+0x2b8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d106      	bne.n	8001ba2 <HAL_ADC_IRQHandler+0x272>
 8001b94:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_ADC_IRQHandler+0x2bc>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 031f 	and.w	r3, r3, #31
 8001b9c:	2b09      	cmp	r3, #9
 8001b9e:	d010      	beq.n	8001bc2 <HAL_ADC_IRQHandler+0x292>
 8001ba0:	e005      	b.n	8001bae <HAL_ADC_IRQHandler+0x27e>
 8001ba2:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <HAL_ADC_IRQHandler+0x2c0>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	2b09      	cmp	r3, #9
 8001bac:	d009      	beq.n	8001bc2 <HAL_ADC_IRQHandler+0x292>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bb6:	d004      	beq.n	8001bc2 <HAL_ADC_IRQHandler+0x292>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	; (8001bf4 <HAL_ADC_IRQHandler+0x2c4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d104      	bne.n	8001bcc <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	61bb      	str	r3, [r7, #24]
 8001bca:	e018      	b.n	8001bfe <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bd4:	d004      	beq.n	8001be0 <HAL_ADC_IRQHandler+0x2b0>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a03      	ldr	r2, [pc, #12]	; (8001be8 <HAL_ADC_IRQHandler+0x2b8>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d10b      	bne.n	8001bf8 <HAL_ADC_IRQHandler+0x2c8>
 8001be0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001be4:	e009      	b.n	8001bfa <HAL_ADC_IRQHandler+0x2ca>
 8001be6:	bf00      	nop
 8001be8:	50000100 	.word	0x50000100
 8001bec:	50000300 	.word	0x50000300
 8001bf0:	50000700 	.word	0x50000700
 8001bf4:	50000400 	.word	0x50000400
 8001bf8:	4b92      	ldr	r3, [pc, #584]	; (8001e44 <HAL_ADC_IRQHandler+0x514>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c04:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f040 80b0 	bne.w	8001d6e <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00d      	beq.n	8001c34 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f040 80a3 	bne.w	8001d6e <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f040 809d 	bne.w	8001d6e <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8097 	beq.w	8001d6e <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c48:	d004      	beq.n	8001c54 <HAL_ADC_IRQHandler+0x324>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a7e      	ldr	r2, [pc, #504]	; (8001e48 <HAL_ADC_IRQHandler+0x518>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d106      	bne.n	8001c62 <HAL_ADC_IRQHandler+0x332>
 8001c54:	4b7d      	ldr	r3, [pc, #500]	; (8001e4c <HAL_ADC_IRQHandler+0x51c>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 031f 	and.w	r3, r3, #31
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d03e      	beq.n	8001cde <HAL_ADC_IRQHandler+0x3ae>
 8001c60:	e005      	b.n	8001c6e <HAL_ADC_IRQHandler+0x33e>
 8001c62:	4b7b      	ldr	r3, [pc, #492]	; (8001e50 <HAL_ADC_IRQHandler+0x520>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 031f 	and.w	r3, r3, #31
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d037      	beq.n	8001cde <HAL_ADC_IRQHandler+0x3ae>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c76:	d004      	beq.n	8001c82 <HAL_ADC_IRQHandler+0x352>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a72      	ldr	r2, [pc, #456]	; (8001e48 <HAL_ADC_IRQHandler+0x518>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d106      	bne.n	8001c90 <HAL_ADC_IRQHandler+0x360>
 8001c82:	4b72      	ldr	r3, [pc, #456]	; (8001e4c <HAL_ADC_IRQHandler+0x51c>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 031f 	and.w	r3, r3, #31
 8001c8a:	2b06      	cmp	r3, #6
 8001c8c:	d027      	beq.n	8001cde <HAL_ADC_IRQHandler+0x3ae>
 8001c8e:	e005      	b.n	8001c9c <HAL_ADC_IRQHandler+0x36c>
 8001c90:	4b6f      	ldr	r3, [pc, #444]	; (8001e50 <HAL_ADC_IRQHandler+0x520>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	2b06      	cmp	r3, #6
 8001c9a:	d020      	beq.n	8001cde <HAL_ADC_IRQHandler+0x3ae>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ca4:	d004      	beq.n	8001cb0 <HAL_ADC_IRQHandler+0x380>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a67      	ldr	r2, [pc, #412]	; (8001e48 <HAL_ADC_IRQHandler+0x518>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d106      	bne.n	8001cbe <HAL_ADC_IRQHandler+0x38e>
 8001cb0:	4b66      	ldr	r3, [pc, #408]	; (8001e4c <HAL_ADC_IRQHandler+0x51c>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 031f 	and.w	r3, r3, #31
 8001cb8:	2b07      	cmp	r3, #7
 8001cba:	d010      	beq.n	8001cde <HAL_ADC_IRQHandler+0x3ae>
 8001cbc:	e005      	b.n	8001cca <HAL_ADC_IRQHandler+0x39a>
 8001cbe:	4b64      	ldr	r3, [pc, #400]	; (8001e50 <HAL_ADC_IRQHandler+0x520>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	2b07      	cmp	r3, #7
 8001cc8:	d009      	beq.n	8001cde <HAL_ADC_IRQHandler+0x3ae>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cd2:	d004      	beq.n	8001cde <HAL_ADC_IRQHandler+0x3ae>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a5a      	ldr	r2, [pc, #360]	; (8001e44 <HAL_ADC_IRQHandler+0x514>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d104      	bne.n	8001ce8 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	e00f      	b.n	8001d08 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cf0:	d004      	beq.n	8001cfc <HAL_ADC_IRQHandler+0x3cc>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a54      	ldr	r2, [pc, #336]	; (8001e48 <HAL_ADC_IRQHandler+0x518>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d102      	bne.n	8001d02 <HAL_ADC_IRQHandler+0x3d2>
 8001cfc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d00:	e000      	b.n	8001d04 <HAL_ADC_IRQHandler+0x3d4>
 8001d02:	4b50      	ldr	r3, [pc, #320]	; (8001e44 <HAL_ADC_IRQHandler+0x514>)
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d12d      	bne.n	8001d6e <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d11a      	bne.n	8001d56 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d2e:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d112      	bne.n	8001d6e <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f043 0201 	orr.w	r2, r3, #1
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	641a      	str	r2, [r3, #64]	; 0x40
 8001d54:	e00b      	b.n	8001d6e <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f043 0210 	orr.w	r2, r3, #16
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f043 0201 	orr.w	r2, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f8c4 	bl	8001efc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2260      	movs	r2, #96	; 0x60
 8001d7a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d011      	beq.n	8001daa <HAL_ADC_IRQHandler+0x47a>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00c      	beq.n	8001daa <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff f977 	bl	8001090 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2280      	movs	r2, #128	; 0x80
 8001da8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d012      	beq.n	8001dda <HAL_ADC_IRQHandler+0x4aa>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00d      	beq.n	8001dda <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f8aa 	bl	8001f24 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dd8:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d012      	beq.n	8001e0a <HAL_ADC_IRQHandler+0x4da>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00d      	beq.n	8001e0a <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f89c 	bl	8001f38 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e08:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	f003 0310 	and.w	r3, r3, #16
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d04f      	beq.n	8001eb4 <HAL_ADC_IRQHandler+0x584>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f003 0310 	and.w	r3, r3, #16
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d04a      	beq.n	8001eb4 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d102      	bne.n	8001e2c <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8001e26:	2301      	movs	r3, #1
 8001e28:	61fb      	str	r3, [r7, #28]
 8001e2a:	e02d      	b.n	8001e88 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e34:	d004      	beq.n	8001e40 <HAL_ADC_IRQHandler+0x510>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a03      	ldr	r2, [pc, #12]	; (8001e48 <HAL_ADC_IRQHandler+0x518>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d109      	bne.n	8001e54 <HAL_ADC_IRQHandler+0x524>
 8001e40:	4b02      	ldr	r3, [pc, #8]	; (8001e4c <HAL_ADC_IRQHandler+0x51c>)
 8001e42:	e008      	b.n	8001e56 <HAL_ADC_IRQHandler+0x526>
 8001e44:	50000400 	.word	0x50000400
 8001e48:	50000100 	.word	0x50000100
 8001e4c:	50000300 	.word	0x50000300
 8001e50:	50000700 	.word	0x50000700
 8001e54:	4b28      	ldr	r3, [pc, #160]	; (8001ef8 <HAL_ADC_IRQHandler+0x5c8>)
 8001e56:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 031f 	and.w	r3, r3, #31
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d109      	bne.n	8001e78 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d10a      	bne.n	8001e88 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001e72:	2301      	movs	r3, #1
 8001e74:	61fb      	str	r3, [r7, #28]
 8001e76:	e007      	b.n	8001e88 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001e84:	2301      	movs	r3, #1
 8001e86:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d10e      	bne.n	8001eac <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	f043 0202 	orr.w	r2, r3, #2
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff f8fc 	bl	80010a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2210      	movs	r2, #16
 8001eb2:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d018      	beq.n	8001ef0 <HAL_ADC_IRQHandler+0x5c0>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d013      	beq.n	8001ef0 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed8:	f043 0208 	orr.w	r2, r3, #8
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ee8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f810 	bl	8001f10 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001ef0:	bf00      	nop
 8001ef2:	3720      	adds	r7, #32
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	50000700 	.word	0x50000700

08001efc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b09b      	sub	sp, #108	; 0x6c
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x22>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e2c8      	b.n	8002500 <HAL_ADC_ConfigChannel+0x5b4>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f040 82ac 	bne.w	80024de <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d81c      	bhi.n	8001fc8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	4413      	add	r3, r2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	231f      	movs	r3, #31
 8001fa4:	4093      	lsls	r3, r2
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	4019      	ands	r1, r3
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4413      	add	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	fa00 f203 	lsl.w	r2, r0, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	631a      	str	r2, [r3, #48]	; 0x30
 8001fc6:	e063      	b.n	8002090 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b09      	cmp	r3, #9
 8001fce:	d81e      	bhi.n	800200e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	4413      	add	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	3b1e      	subs	r3, #30
 8001fe4:	221f      	movs	r2, #31
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	4019      	ands	r1, r3
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	6818      	ldr	r0, [r3, #0]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	3b1e      	subs	r3, #30
 8002000:	fa00 f203 	lsl.w	r2, r0, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	635a      	str	r2, [r3, #52]	; 0x34
 800200c:	e040      	b.n	8002090 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b0e      	cmp	r3, #14
 8002014:	d81e      	bhi.n	8002054 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	4413      	add	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	3b3c      	subs	r3, #60	; 0x3c
 800202a:	221f      	movs	r2, #31
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	4019      	ands	r1, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4413      	add	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	3b3c      	subs	r3, #60	; 0x3c
 8002046:	fa00 f203 	lsl.w	r2, r0, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	639a      	str	r2, [r3, #56]	; 0x38
 8002052:	e01d      	b.n	8002090 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	4413      	add	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	3b5a      	subs	r3, #90	; 0x5a
 8002068:	221f      	movs	r2, #31
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	4019      	ands	r1, r3
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	3b5a      	subs	r3, #90	; 0x5a
 8002084:	fa00 f203 	lsl.w	r2, r0, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	2b00      	cmp	r3, #0
 800209c:	f040 80e5 	bne.w	800226a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b09      	cmp	r3, #9
 80020a6:	d91c      	bls.n	80020e2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6999      	ldr	r1, [r3, #24]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	4613      	mov	r3, r2
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	4413      	add	r3, r2
 80020b8:	3b1e      	subs	r3, #30
 80020ba:	2207      	movs	r2, #7
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	4019      	ands	r1, r3
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	6898      	ldr	r0, [r3, #8]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4413      	add	r3, r2
 80020d2:	3b1e      	subs	r3, #30
 80020d4:	fa00 f203 	lsl.w	r2, r0, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	619a      	str	r2, [r3, #24]
 80020e0:	e019      	b.n	8002116 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6959      	ldr	r1, [r3, #20]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	2207      	movs	r2, #7
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	4019      	ands	r1, r3
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	6898      	ldr	r0, [r3, #8]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4613      	mov	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4413      	add	r3, r2
 800210a:	fa00 f203 	lsl.w	r2, r0, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	695a      	ldr	r2, [r3, #20]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	3b01      	subs	r3, #1
 8002134:	2b03      	cmp	r3, #3
 8002136:	d84f      	bhi.n	80021d8 <HAL_ADC_ConfigChannel+0x28c>
 8002138:	a201      	add	r2, pc, #4	; (adr r2, 8002140 <HAL_ADC_ConfigChannel+0x1f4>)
 800213a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213e:	bf00      	nop
 8002140:	08002151 	.word	0x08002151
 8002144:	08002173 	.word	0x08002173
 8002148:	08002195 	.word	0x08002195
 800214c:	080021b7 	.word	0x080021b7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002156:	4b99      	ldr	r3, [pc, #612]	; (80023bc <HAL_ADC_ConfigChannel+0x470>)
 8002158:	4013      	ands	r3, r2
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	6812      	ldr	r2, [r2, #0]
 800215e:	0691      	lsls	r1, r2, #26
 8002160:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002162:	430a      	orrs	r2, r1
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800216e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002170:	e07b      	b.n	800226a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002178:	4b90      	ldr	r3, [pc, #576]	; (80023bc <HAL_ADC_ConfigChannel+0x470>)
 800217a:	4013      	ands	r3, r2
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	0691      	lsls	r1, r2, #26
 8002182:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002184:	430a      	orrs	r2, r1
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002190:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002192:	e06a      	b.n	800226a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800219a:	4b88      	ldr	r3, [pc, #544]	; (80023bc <HAL_ADC_ConfigChannel+0x470>)
 800219c:	4013      	ands	r3, r2
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	0691      	lsls	r1, r2, #26
 80021a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021a6:	430a      	orrs	r2, r1
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021b2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80021b4:	e059      	b.n	800226a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021bc:	4b7f      	ldr	r3, [pc, #508]	; (80023bc <HAL_ADC_ConfigChannel+0x470>)
 80021be:	4013      	ands	r3, r2
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	0691      	lsls	r1, r2, #26
 80021c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021c8:	430a      	orrs	r2, r1
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021d4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80021d6:	e048      	b.n	800226a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	069b      	lsls	r3, r3, #26
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d107      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021fa:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002202:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	069b      	lsls	r3, r3, #26
 800220c:	429a      	cmp	r2, r3
 800220e:	d107      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800221e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002226:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	069b      	lsls	r3, r3, #26
 8002230:	429a      	cmp	r2, r3
 8002232:	d107      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002242:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800224a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	069b      	lsls	r3, r3, #26
 8002254:	429a      	cmp	r2, r3
 8002256:	d107      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002266:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002268:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	2b01      	cmp	r3, #1
 8002276:	d108      	bne.n	800228a <HAL_ADC_ConfigChannel+0x33e>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b01      	cmp	r3, #1
 8002284:	d101      	bne.n	800228a <HAL_ADC_ConfigChannel+0x33e>
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <HAL_ADC_ConfigChannel+0x340>
 800228a:	2300      	movs	r3, #0
 800228c:	2b00      	cmp	r3, #0
 800228e:	f040 8131 	bne.w	80024f4 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d00f      	beq.n	80022ba <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2201      	movs	r2, #1
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43da      	mvns	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	400a      	ands	r2, r1
 80022b4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80022b8:	e049      	b.n	800234e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2201      	movs	r2, #1
 80022c8:	409a      	lsls	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b09      	cmp	r3, #9
 80022da:	d91c      	bls.n	8002316 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6999      	ldr	r1, [r3, #24]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	4613      	mov	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	4413      	add	r3, r2
 80022ec:	3b1b      	subs	r3, #27
 80022ee:	2207      	movs	r2, #7
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	4019      	ands	r1, r3
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	6898      	ldr	r0, [r3, #8]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4613      	mov	r3, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4413      	add	r3, r2
 8002306:	3b1b      	subs	r3, #27
 8002308:	fa00 f203 	lsl.w	r2, r0, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	619a      	str	r2, [r3, #24]
 8002314:	e01b      	b.n	800234e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6959      	ldr	r1, [r3, #20]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	4613      	mov	r3, r2
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	4413      	add	r3, r2
 8002328:	2207      	movs	r2, #7
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	4019      	ands	r1, r3
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	6898      	ldr	r0, [r3, #8]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	4613      	mov	r3, r2
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4413      	add	r3, r2
 8002342:	fa00 f203 	lsl.w	r2, r0, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002356:	d004      	beq.n	8002362 <HAL_ADC_ConfigChannel+0x416>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a18      	ldr	r2, [pc, #96]	; (80023c0 <HAL_ADC_ConfigChannel+0x474>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d101      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x41a>
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <HAL_ADC_ConfigChannel+0x478>)
 8002364:	e000      	b.n	8002368 <HAL_ADC_ConfigChannel+0x41c>
 8002366:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <HAL_ADC_ConfigChannel+0x47c>)
 8002368:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b10      	cmp	r3, #16
 8002370:	d105      	bne.n	800237e <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800237a:	2b00      	cmp	r3, #0
 800237c:	d015      	beq.n	80023aa <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002382:	2b11      	cmp	r3, #17
 8002384:	d105      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00b      	beq.n	80023aa <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002396:	2b12      	cmp	r3, #18
 8002398:	f040 80ac 	bne.w	80024f4 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800239c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f040 80a5 	bne.w	80024f4 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023b2:	d10b      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x480>
 80023b4:	4b02      	ldr	r3, [pc, #8]	; (80023c0 <HAL_ADC_ConfigChannel+0x474>)
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	e023      	b.n	8002402 <HAL_ADC_ConfigChannel+0x4b6>
 80023ba:	bf00      	nop
 80023bc:	83fff000 	.word	0x83fff000
 80023c0:	50000100 	.word	0x50000100
 80023c4:	50000300 	.word	0x50000300
 80023c8:	50000700 	.word	0x50000700
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a4e      	ldr	r2, [pc, #312]	; (800250c <HAL_ADC_ConfigChannel+0x5c0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d103      	bne.n	80023de <HAL_ADC_ConfigChannel+0x492>
 80023d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	e011      	b.n	8002402 <HAL_ADC_ConfigChannel+0x4b6>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a4b      	ldr	r2, [pc, #300]	; (8002510 <HAL_ADC_ConfigChannel+0x5c4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d102      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x4a2>
 80023e8:	4b4a      	ldr	r3, [pc, #296]	; (8002514 <HAL_ADC_ConfigChannel+0x5c8>)
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	e009      	b.n	8002402 <HAL_ADC_ConfigChannel+0x4b6>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a48      	ldr	r2, [pc, #288]	; (8002514 <HAL_ADC_ConfigChannel+0x5c8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d102      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x4b2>
 80023f8:	4b45      	ldr	r3, [pc, #276]	; (8002510 <HAL_ADC_ConfigChannel+0x5c4>)
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	e001      	b.n	8002402 <HAL_ADC_ConfigChannel+0x4b6>
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	2b01      	cmp	r3, #1
 800240e:	d108      	bne.n	8002422 <HAL_ADC_ConfigChannel+0x4d6>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_ADC_ConfigChannel+0x4d6>
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <HAL_ADC_ConfigChannel+0x4d8>
 8002422:	2300      	movs	r3, #0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d150      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002428:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800242a:	2b00      	cmp	r3, #0
 800242c:	d010      	beq.n	8002450 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	2b01      	cmp	r3, #1
 8002438:	d107      	bne.n	800244a <HAL_ADC_ConfigChannel+0x4fe>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b01      	cmp	r3, #1
 8002444:	d101      	bne.n	800244a <HAL_ADC_ConfigChannel+0x4fe>
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <HAL_ADC_ConfigChannel+0x500>
 800244a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800244c:	2b00      	cmp	r3, #0
 800244e:	d13c      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b10      	cmp	r3, #16
 8002456:	d11d      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x548>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002460:	d118      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800246a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800246c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800246e:	4b2a      	ldr	r3, [pc, #168]	; (8002518 <HAL_ADC_ConfigChannel+0x5cc>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a2a      	ldr	r2, [pc, #168]	; (800251c <HAL_ADC_ConfigChannel+0x5d0>)
 8002474:	fba2 2303 	umull	r2, r3, r2, r3
 8002478:	0c9a      	lsrs	r2, r3, #18
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002484:	e002      	b.n	800248c <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	3b01      	subs	r3, #1
 800248a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f9      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002492:	e02e      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b11      	cmp	r3, #17
 800249a:	d10b      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x568>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024a4:	d106      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80024a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80024ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024b2:	e01e      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b12      	cmp	r3, #18
 80024ba:	d11a      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80024bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024c6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024c8:	e013      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f043 0220 	orr.w	r2, r3, #32
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80024dc:	e00a      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f043 0220 	orr.w	r2, r3, #32
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80024f0:	e000      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024f2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80024fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002500:	4618      	mov	r0, r3
 8002502:	376c      	adds	r7, #108	; 0x6c
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	50000100 	.word	0x50000100
 8002510:	50000400 	.word	0x50000400
 8002514:	50000500 	.word	0x50000500
 8002518:	20000004 	.word	0x20000004
 800251c:	431bde83 	.word	0x431bde83

08002520 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002520:	b480      	push	{r7}
 8002522:	b099      	sub	sp, #100	; 0x64
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002538:	d102      	bne.n	8002540 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800253a:	4b6d      	ldr	r3, [pc, #436]	; (80026f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	e01a      	b.n	8002576 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a6a      	ldr	r2, [pc, #424]	; (80026f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d103      	bne.n	8002552 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800254a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	e011      	b.n	8002576 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a67      	ldr	r2, [pc, #412]	; (80026f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d102      	bne.n	8002562 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800255c:	4b66      	ldr	r3, [pc, #408]	; (80026f8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800255e:	60bb      	str	r3, [r7, #8]
 8002560:	e009      	b.n	8002576 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a64      	ldr	r2, [pc, #400]	; (80026f8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d102      	bne.n	8002572 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800256c:	4b61      	ldr	r3, [pc, #388]	; (80026f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	e001      	b.n	8002576 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e0b0      	b.n	80026e2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800258a:	2302      	movs	r3, #2
 800258c:	e0a9      	b.n	80026e2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f040 808d 	bne.w	80026c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f040 8086 	bne.w	80026c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025bc:	d004      	beq.n	80025c8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a4b      	ldr	r2, [pc, #300]	; (80026f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d101      	bne.n	80025cc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80025c8:	4b4c      	ldr	r3, [pc, #304]	; (80026fc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80025ca:	e000      	b.n	80025ce <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80025cc:	4b4c      	ldr	r3, [pc, #304]	; (8002700 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80025ce:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d040      	beq.n	800265a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80025d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	6859      	ldr	r1, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025ea:	035b      	lsls	r3, r3, #13
 80025ec:	430b      	orrs	r3, r1
 80025ee:	431a      	orrs	r2, r3
 80025f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025f2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d108      	bne.n	8002614 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002610:	2301      	movs	r3, #1
 8002612:	e000      	b.n	8002616 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002614:	2300      	movs	r3, #0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d15c      	bne.n	80026d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d107      	bne.n	8002636 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002636:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002638:	2b00      	cmp	r3, #0
 800263a:	d14b      	bne.n	80026d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800263c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002644:	f023 030f 	bic.w	r3, r3, #15
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	6811      	ldr	r1, [r2, #0]
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	6892      	ldr	r2, [r2, #8]
 8002650:	430a      	orrs	r2, r1
 8002652:	431a      	orrs	r2, r3
 8002654:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002656:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002658:	e03c      	b.n	80026d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800265a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002664:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	2b01      	cmp	r3, #1
 8002672:	d108      	bne.n	8002686 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002686:	2300      	movs	r3, #0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d123      	bne.n	80026d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	2b01      	cmp	r3, #1
 8002696:	d107      	bne.n	80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d101      	bne.n	80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80026a4:	2301      	movs	r3, #1
 80026a6:	e000      	b.n	80026aa <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80026a8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d112      	bne.n	80026d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80026ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80026b6:	f023 030f 	bic.w	r3, r3, #15
 80026ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026bc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80026be:	e009      	b.n	80026d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	f043 0220 	orr.w	r2, r3, #32
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80026d2:	e000      	b.n	80026d6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80026d4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80026de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80026e2:	4618      	mov	r0, r3
 80026e4:	3764      	adds	r7, #100	; 0x64
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	50000100 	.word	0x50000100
 80026f4:	50000400 	.word	0x50000400
 80026f8:	50000500 	.word	0x50000500
 80026fc:	50000300 	.word	0x50000300
 8002700:	50000700 	.word	0x50000700

08002704 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	2b01      	cmp	r3, #1
 800271c:	d108      	bne.n	8002730 <ADC_Enable+0x2c>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <ADC_Enable+0x2c>
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <ADC_Enable+0x2e>
 8002730:	2300      	movs	r3, #0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d143      	bne.n	80027be <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	4b22      	ldr	r3, [pc, #136]	; (80027c8 <ADC_Enable+0xc4>)
 800273e:	4013      	ands	r3, r2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00d      	beq.n	8002760 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	f043 0210 	orr.w	r2, r3, #16
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002754:	f043 0201 	orr.w	r2, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e02f      	b.n	80027c0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002770:	f7fe fc78 	bl	8001064 <HAL_GetTick>
 8002774:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002776:	e01b      	b.n	80027b0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002778:	f7fe fc74 	bl	8001064 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d914      	bls.n	80027b0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b01      	cmp	r3, #1
 8002792:	d00d      	beq.n	80027b0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	f043 0210 	orr.w	r2, r3, #16
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a4:	f043 0201 	orr.w	r2, r3, #1
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e007      	b.n	80027c0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d1dc      	bne.n	8002778 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	8000003f 	.word	0x8000003f

080027cc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d108      	bne.n	80027f8 <ADC_Disable+0x2c>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <ADC_Disable+0x2c>
 80027f4:	2301      	movs	r3, #1
 80027f6:	e000      	b.n	80027fa <ADC_Disable+0x2e>
 80027f8:	2300      	movs	r3, #0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d047      	beq.n	800288e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 030d 	and.w	r3, r3, #13
 8002808:	2b01      	cmp	r3, #1
 800280a:	d10f      	bne.n	800282c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0202 	orr.w	r2, r2, #2
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2203      	movs	r2, #3
 8002822:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002824:	f7fe fc1e 	bl	8001064 <HAL_GetTick>
 8002828:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800282a:	e029      	b.n	8002880 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	f043 0210 	orr.w	r2, r3, #16
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283c:	f043 0201 	orr.w	r2, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e023      	b.n	8002890 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002848:	f7fe fc0c 	bl	8001064 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d914      	bls.n	8002880 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b01      	cmp	r3, #1
 8002862:	d10d      	bne.n	8002880 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	f043 0210 	orr.w	r2, r3, #16
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002874:	f043 0201 	orr.w	r2, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e007      	b.n	8002890 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b01      	cmp	r3, #1
 800288c:	d0dc      	beq.n	8002848 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 030c 	and.w	r3, r3, #12
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 809b 	beq.w	80029f4 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028cc:	d12a      	bne.n	8002924 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d126      	bne.n	8002924 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d122      	bne.n	8002924 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80028de:	230c      	movs	r3, #12
 80028e0:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80028e2:	e014      	b.n	800290e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4a46      	ldr	r2, [pc, #280]	; (8002a00 <ADC_ConversionStop+0x168>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d90d      	bls.n	8002908 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f043 0210 	orr.w	r2, r3, #16
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fc:	f043 0201 	orr.w	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e076      	b.n	80029f6 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	3301      	adds	r3, #1
 800290c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002918:	2b40      	cmp	r3, #64	; 0x40
 800291a:	d1e3      	bne.n	80028e4 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2240      	movs	r2, #64	; 0x40
 8002922:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2b60      	cmp	r3, #96	; 0x60
 8002928:	d015      	beq.n	8002956 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b04      	cmp	r3, #4
 8002936:	d10e      	bne.n	8002956 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002942:	2b00      	cmp	r3, #0
 8002944:	d107      	bne.n	8002956 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 0210 	orr.w	r2, r2, #16
 8002954:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b0c      	cmp	r3, #12
 800295a:	d015      	beq.n	8002988 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b08      	cmp	r3, #8
 8002968:	d10e      	bne.n	8002988 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002974:	2b00      	cmp	r3, #0
 8002976:	d107      	bne.n	8002988 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0220 	orr.w	r2, r2, #32
 8002986:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	2b60      	cmp	r3, #96	; 0x60
 800298c:	d005      	beq.n	800299a <ADC_ConversionStop+0x102>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b6c      	cmp	r3, #108	; 0x6c
 8002992:	d105      	bne.n	80029a0 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002994:	230c      	movs	r3, #12
 8002996:	617b      	str	r3, [r7, #20]
        break;
 8002998:	e005      	b.n	80029a6 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800299a:	2308      	movs	r3, #8
 800299c:	617b      	str	r3, [r7, #20]
        break;
 800299e:	e002      	b.n	80029a6 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80029a0:	2304      	movs	r3, #4
 80029a2:	617b      	str	r3, [r7, #20]
        break;
 80029a4:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80029a6:	f7fe fb5d 	bl	8001064 <HAL_GetTick>
 80029aa:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80029ac:	e01b      	b.n	80029e6 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80029ae:	f7fe fb59 	bl	8001064 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b0b      	cmp	r3, #11
 80029ba:	d914      	bls.n	80029e6 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00d      	beq.n	80029e6 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f043 0210 	orr.w	r2, r3, #16
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	f043 0201 	orr.w	r2, r3, #1
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e007      	b.n	80029f6 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1dc      	bne.n	80029ae <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	000993ff 	.word	0x000993ff

08002a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a14:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <__NVIC_SetPriorityGrouping+0x44>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a20:	4013      	ands	r3, r2
 8002a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a36:	4a04      	ldr	r2, [pc, #16]	; (8002a48 <__NVIC_SetPriorityGrouping+0x44>)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	60d3      	str	r3, [r2, #12]
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a50:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <__NVIC_GetPriorityGrouping+0x18>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	0a1b      	lsrs	r3, r3, #8
 8002a56:	f003 0307 	and.w	r3, r3, #7
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	db0b      	blt.n	8002a92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	f003 021f 	and.w	r2, r3, #31
 8002a80:	4907      	ldr	r1, [pc, #28]	; (8002aa0 <__NVIC_EnableIRQ+0x38>)
 8002a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	2001      	movs	r0, #1
 8002a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	e000e100 	.word	0xe000e100

08002aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	6039      	str	r1, [r7, #0]
 8002aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	db0a      	blt.n	8002ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	490c      	ldr	r1, [pc, #48]	; (8002af0 <__NVIC_SetPriority+0x4c>)
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	0112      	lsls	r2, r2, #4
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002acc:	e00a      	b.n	8002ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	4908      	ldr	r1, [pc, #32]	; (8002af4 <__NVIC_SetPriority+0x50>)
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	3b04      	subs	r3, #4
 8002adc:	0112      	lsls	r2, r2, #4
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	761a      	strb	r2, [r3, #24]
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	e000e100 	.word	0xe000e100
 8002af4:	e000ed00 	.word	0xe000ed00

08002af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b089      	sub	sp, #36	; 0x24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f1c3 0307 	rsb	r3, r3, #7
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	bf28      	it	cs
 8002b16:	2304      	movcs	r3, #4
 8002b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	2b06      	cmp	r3, #6
 8002b20:	d902      	bls.n	8002b28 <NVIC_EncodePriority+0x30>
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3b03      	subs	r3, #3
 8002b26:	e000      	b.n	8002b2a <NVIC_EncodePriority+0x32>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43da      	mvns	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b40:	f04f 31ff 	mov.w	r1, #4294967295
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4a:	43d9      	mvns	r1, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b50:	4313      	orrs	r3, r2
         );
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3724      	adds	r7, #36	; 0x24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
	...

08002b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b70:	d301      	bcc.n	8002b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b72:	2301      	movs	r3, #1
 8002b74:	e00f      	b.n	8002b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b76:	4a0a      	ldr	r2, [pc, #40]	; (8002ba0 <SysTick_Config+0x40>)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b7e:	210f      	movs	r1, #15
 8002b80:	f04f 30ff 	mov.w	r0, #4294967295
 8002b84:	f7ff ff8e 	bl	8002aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <SysTick_Config+0x40>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b8e:	4b04      	ldr	r3, [pc, #16]	; (8002ba0 <SysTick_Config+0x40>)
 8002b90:	2207      	movs	r2, #7
 8002b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	e000e010 	.word	0xe000e010

08002ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff ff29 	bl	8002a04 <__NVIC_SetPriorityGrouping>
}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b086      	sub	sp, #24
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	607a      	str	r2, [r7, #4]
 8002bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bcc:	f7ff ff3e 	bl	8002a4c <__NVIC_GetPriorityGrouping>
 8002bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	68b9      	ldr	r1, [r7, #8]
 8002bd6:	6978      	ldr	r0, [r7, #20]
 8002bd8:	f7ff ff8e 	bl	8002af8 <NVIC_EncodePriority>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002be2:	4611      	mov	r1, r2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ff5d 	bl	8002aa4 <__NVIC_SetPriority>
}
 8002bea:	bf00      	nop
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff ff31 	bl	8002a68 <__NVIC_EnableIRQ>
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff ffa2 	bl	8002b60 <SysTick_Config>
 8002c1c:	4603      	mov	r3, r0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c36:	e154      	b.n	8002ee2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	fa01 f303 	lsl.w	r3, r1, r3
 8002c44:	4013      	ands	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 8146 	beq.w	8002edc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d005      	beq.n	8002c68 <HAL_GPIO_Init+0x40>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0303 	and.w	r3, r3, #3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d130      	bne.n	8002cca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	2203      	movs	r2, #3
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4013      	ands	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	091b      	lsrs	r3, r3, #4
 8002cb4:	f003 0201 	and.w	r2, r3, #1
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d017      	beq.n	8002d06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4013      	ands	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d123      	bne.n	8002d5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	08da      	lsrs	r2, r3, #3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	3208      	adds	r2, #8
 8002d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	220f      	movs	r2, #15
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4013      	ands	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	691a      	ldr	r2, [r3, #16]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	08da      	lsrs	r2, r3, #3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3208      	adds	r2, #8
 8002d54:	6939      	ldr	r1, [r7, #16]
 8002d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	2203      	movs	r2, #3
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 0203 	and.w	r2, r3, #3
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 80a0 	beq.w	8002edc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9c:	4b58      	ldr	r3, [pc, #352]	; (8002f00 <HAL_GPIO_Init+0x2d8>)
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	4a57      	ldr	r2, [pc, #348]	; (8002f00 <HAL_GPIO_Init+0x2d8>)
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	6193      	str	r3, [r2, #24]
 8002da8:	4b55      	ldr	r3, [pc, #340]	; (8002f00 <HAL_GPIO_Init+0x2d8>)
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	60bb      	str	r3, [r7, #8]
 8002db2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002db4:	4a53      	ldr	r2, [pc, #332]	; (8002f04 <HAL_GPIO_Init+0x2dc>)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	089b      	lsrs	r3, r3, #2
 8002dba:	3302      	adds	r3, #2
 8002dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	220f      	movs	r2, #15
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002dde:	d019      	beq.n	8002e14 <HAL_GPIO_Init+0x1ec>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a49      	ldr	r2, [pc, #292]	; (8002f08 <HAL_GPIO_Init+0x2e0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d013      	beq.n	8002e10 <HAL_GPIO_Init+0x1e8>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a48      	ldr	r2, [pc, #288]	; (8002f0c <HAL_GPIO_Init+0x2e4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00d      	beq.n	8002e0c <HAL_GPIO_Init+0x1e4>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a47      	ldr	r2, [pc, #284]	; (8002f10 <HAL_GPIO_Init+0x2e8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d007      	beq.n	8002e08 <HAL_GPIO_Init+0x1e0>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a46      	ldr	r2, [pc, #280]	; (8002f14 <HAL_GPIO_Init+0x2ec>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d101      	bne.n	8002e04 <HAL_GPIO_Init+0x1dc>
 8002e00:	2304      	movs	r3, #4
 8002e02:	e008      	b.n	8002e16 <HAL_GPIO_Init+0x1ee>
 8002e04:	2305      	movs	r3, #5
 8002e06:	e006      	b.n	8002e16 <HAL_GPIO_Init+0x1ee>
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e004      	b.n	8002e16 <HAL_GPIO_Init+0x1ee>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e002      	b.n	8002e16 <HAL_GPIO_Init+0x1ee>
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <HAL_GPIO_Init+0x1ee>
 8002e14:	2300      	movs	r3, #0
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	f002 0203 	and.w	r2, r2, #3
 8002e1c:	0092      	lsls	r2, r2, #2
 8002e1e:	4093      	lsls	r3, r2
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e26:	4937      	ldr	r1, [pc, #220]	; (8002f04 <HAL_GPIO_Init+0x2dc>)
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	089b      	lsrs	r3, r3, #2
 8002e2c:	3302      	adds	r3, #2
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e34:	4b38      	ldr	r3, [pc, #224]	; (8002f18 <HAL_GPIO_Init+0x2f0>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	4013      	ands	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e58:	4a2f      	ldr	r2, [pc, #188]	; (8002f18 <HAL_GPIO_Init+0x2f0>)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e5e:	4b2e      	ldr	r3, [pc, #184]	; (8002f18 <HAL_GPIO_Init+0x2f0>)
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	43db      	mvns	r3, r3
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e82:	4a25      	ldr	r2, [pc, #148]	; (8002f18 <HAL_GPIO_Init+0x2f0>)
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e88:	4b23      	ldr	r3, [pc, #140]	; (8002f18 <HAL_GPIO_Init+0x2f0>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4013      	ands	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002eac:	4a1a      	ldr	r2, [pc, #104]	; (8002f18 <HAL_GPIO_Init+0x2f0>)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eb2:	4b19      	ldr	r3, [pc, #100]	; (8002f18 <HAL_GPIO_Init+0x2f0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ed6:	4a10      	ldr	r2, [pc, #64]	; (8002f18 <HAL_GPIO_Init+0x2f0>)
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f47f aea3 	bne.w	8002c38 <HAL_GPIO_Init+0x10>
  }
}
 8002ef2:	bf00      	nop
 8002ef4:	bf00      	nop
 8002ef6:	371c      	adds	r7, #28
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40010000 	.word	0x40010000
 8002f08:	48000400 	.word	0x48000400
 8002f0c:	48000800 	.word	0x48000800
 8002f10:	48000c00 	.word	0x48000c00
 8002f14:	48001000 	.word	0x48001000
 8002f18:	40010400 	.word	0x40010400

08002f1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	887b      	ldrh	r3, [r7, #2]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
 8002f38:	e001      	b.n	8002f3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	807b      	strh	r3, [r7, #2]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f5c:	787b      	ldrb	r3, [r7, #1]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f62:	887a      	ldrh	r2, [r7, #2]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f68:	e002      	b.n	8002f70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f6a:	887a      	ldrh	r2, [r7, #2]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f8e:	887a      	ldrh	r2, [r7, #2]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4013      	ands	r3, r2
 8002f94:	041a      	lsls	r2, r3, #16
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	43d9      	mvns	r1, r3
 8002f9a:	887b      	ldrh	r3, [r7, #2]
 8002f9c:	400b      	ands	r3, r1
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	619a      	str	r2, [r3, #24]
}
 8002fa4:	bf00      	nop
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002fba:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	88fb      	ldrh	r3, [r7, #6]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d006      	beq.n	8002fd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fc6:	4a05      	ldr	r2, [pc, #20]	; (8002fdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fcc:	88fb      	ldrh	r3, [r7, #6]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fd fa32 	bl	8000438 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40010400 	.word	0x40010400

08002fe0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fe2:	b08b      	sub	sp, #44	; 0x2c
 8002fe4:	af06      	add	r7, sp, #24
 8002fe6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e0c4      	b.n	800317c <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f008 fbfe 	bl	800b808 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2203      	movs	r2, #3
 8003010:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f004 fb24 	bl	8007666 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800301e:	2300      	movs	r3, #0
 8003020:	73fb      	strb	r3, [r7, #15]
 8003022:	e040      	b.n	80030a6 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003024:	7bfb      	ldrb	r3, [r7, #15]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	440b      	add	r3, r1
 8003034:	3301      	adds	r3, #1
 8003036:	2201      	movs	r2, #1
 8003038:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	1c5a      	adds	r2, r3, #1
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	440b      	add	r3, r1
 800304a:	7bfa      	ldrb	r2, [r7, #15]
 800304c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800304e:	7bfb      	ldrb	r3, [r7, #15]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	440b      	add	r3, r1
 800305e:	3303      	adds	r3, #3
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003064:	7bfa      	ldrb	r2, [r7, #15]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	440b      	add	r3, r1
 8003072:	3338      	adds	r3, #56	; 0x38
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003078:	7bfa      	ldrb	r2, [r7, #15]
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	440b      	add	r3, r1
 8003086:	333c      	adds	r3, #60	; 0x3c
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800308c:	7bfa      	ldrb	r2, [r7, #15]
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	440b      	add	r3, r1
 800309a:	3340      	adds	r3, #64	; 0x40
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	3301      	adds	r3, #1
 80030a4:	73fb      	strb	r3, [r7, #15]
 80030a6:	7bfa      	ldrb	r2, [r7, #15]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d3b9      	bcc.n	8003024 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b0:	2300      	movs	r3, #0
 80030b2:	73fb      	strb	r3, [r7, #15]
 80030b4:	e044      	b.n	8003140 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030b6:	7bfa      	ldrb	r2, [r7, #15]
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	440b      	add	r3, r1
 80030c4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030cc:	7bfa      	ldrb	r2, [r7, #15]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	440b      	add	r3, r1
 80030da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030de:	7bfa      	ldrb	r2, [r7, #15]
 80030e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030e2:	7bfa      	ldrb	r2, [r7, #15]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	440b      	add	r3, r1
 80030f0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030f8:	7bfa      	ldrb	r2, [r7, #15]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	440b      	add	r3, r1
 8003106:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800310e:	7bfa      	ldrb	r2, [r7, #15]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	440b      	add	r3, r1
 800311c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003124:	7bfa      	ldrb	r2, [r7, #15]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	440b      	add	r3, r1
 8003132:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	3301      	adds	r3, #1
 800313e:	73fb      	strb	r3, [r7, #15]
 8003140:	7bfa      	ldrb	r2, [r7, #15]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	429a      	cmp	r2, r3
 8003148:	d3b5      	bcc.n	80030b6 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	687e      	ldr	r6, [r7, #4]
 8003152:	466d      	mov	r5, sp
 8003154:	f106 0410 	add.w	r4, r6, #16
 8003158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800315a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800315c:	6823      	ldr	r3, [r4, #0]
 800315e:	602b      	str	r3, [r5, #0]
 8003160:	1d33      	adds	r3, r6, #4
 8003162:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003164:	6838      	ldr	r0, [r7, #0]
 8003166:	f004 fa99 	bl	800769c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003184 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_PCD_Start+0x16>
 8003196:	2302      	movs	r3, #2
 8003198:	e016      	b.n	80031c8 <HAL_PCD_Start+0x44>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f004 fa46 	bl	8007638 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80031ac:	2101      	movs	r1, #1
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f008 fdc8 	bl	800bd44 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f006 fd06 	bl	8009bca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f006 fcff 	bl	8009be0 <USB_ReadInterrupts>
 80031e2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fab2 	bl	8003758 <PCD_EP_ISR_Handler>

    return;
 80031f4:	e0bd      	b.n	8003372 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d013      	beq.n	8003228 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003208:	b29a      	uxth	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003212:	b292      	uxth	r2, r2
 8003214:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f008 fb96 	bl	800b94a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800321e:	2100      	movs	r1, #0
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f8a9 	bl	8003378 <HAL_PCD_SetAddress>

    return;
 8003226:	e0a4      	b.n	8003372 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00c      	beq.n	800324c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800323a:	b29a      	uxth	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003244:	b292      	uxth	r2, r2
 8003246:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800324a:	e092      	b.n	8003372 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00c      	beq.n	8003270 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800325e:	b29a      	uxth	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003268:	b292      	uxth	r2, r2
 800326a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800326e:	e080      	b.n	8003372 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d027      	beq.n	80032ca <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003282:	b29a      	uxth	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0204 	bic.w	r2, r2, #4
 800328c:	b292      	uxth	r2, r2
 800328e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800329a:	b29a      	uxth	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0208 	bic.w	r2, r2, #8
 80032a4:	b292      	uxth	r2, r2
 80032a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f008 fb86 	bl	800b9bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032c2:	b292      	uxth	r2, r2
 80032c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80032c8:	e053      	b.n	8003372 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d027      	beq.n	8003324 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032dc:	b29a      	uxth	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0208 	orr.w	r2, r2, #8
 80032e6:	b292      	uxth	r2, r2
 80032e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032fe:	b292      	uxth	r2, r2
 8003300:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800330c:	b29a      	uxth	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0204 	orr.w	r2, r2, #4
 8003316:	b292      	uxth	r2, r2
 8003318:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f008 fb33 	bl	800b988 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003322:	e026      	b.n	8003372 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00f      	beq.n	800334e <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003336:	b29a      	uxth	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003340:	b292      	uxth	r2, r2
 8003342:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f008 faf1 	bl	800b92e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800334c:	e011      	b.n	8003372 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00c      	beq.n	8003372 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003360:	b29a      	uxth	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800336a:	b292      	uxth	r2, r2
 800336c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003370:	bf00      	nop
  }
}
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <HAL_PCD_SetAddress+0x1a>
 800338e:	2302      	movs	r3, #2
 8003390:	e013      	b.n	80033ba <HAL_PCD_SetAddress+0x42>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	78fa      	ldrb	r2, [r7, #3]
 80033a8:	4611      	mov	r1, r2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f006 fbf9 	bl	8009ba2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b084      	sub	sp, #16
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	4608      	mov	r0, r1
 80033cc:	4611      	mov	r1, r2
 80033ce:	461a      	mov	r2, r3
 80033d0:	4603      	mov	r3, r0
 80033d2:	70fb      	strb	r3, [r7, #3]
 80033d4:	460b      	mov	r3, r1
 80033d6:	803b      	strh	r3, [r7, #0]
 80033d8:	4613      	mov	r3, r2
 80033da:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80033dc:	2300      	movs	r3, #0
 80033de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	da0e      	bge.n	8003406 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	1c5a      	adds	r2, r3, #1
 80033f0:	4613      	mov	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	4413      	add	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2201      	movs	r2, #1
 8003402:	705a      	strb	r2, [r3, #1]
 8003404:	e00e      	b.n	8003424 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003406:	78fb      	ldrb	r3, [r7, #3]
 8003408:	f003 0207 	and.w	r2, r3, #7
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	4413      	add	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003424:	78fb      	ldrb	r3, [r7, #3]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	b2da      	uxtb	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003430:	883a      	ldrh	r2, [r7, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	78ba      	ldrb	r2, [r7, #2]
 800343a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800343c:	78bb      	ldrb	r3, [r7, #2]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d102      	bne.n	8003448 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800344e:	2b01      	cmp	r3, #1
 8003450:	d101      	bne.n	8003456 <HAL_PCD_EP_Open+0x94>
 8003452:	2302      	movs	r3, #2
 8003454:	e00e      	b.n	8003474 <HAL_PCD_EP_Open+0xb2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68f9      	ldr	r1, [r7, #12]
 8003464:	4618      	mov	r0, r3
 8003466:	f004 f93b 	bl	80076e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003472:	7afb      	ldrb	r3, [r7, #11]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003488:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800348c:	2b00      	cmp	r3, #0
 800348e:	da0e      	bge.n	80034ae <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	4413      	add	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2201      	movs	r2, #1
 80034aa:	705a      	strb	r2, [r3, #1]
 80034ac:	e00e      	b.n	80034cc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034ae:	78fb      	ldrb	r3, [r7, #3]
 80034b0:	f003 0207 	and.w	r2, r3, #7
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	4413      	add	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d101      	bne.n	80034e6 <HAL_PCD_EP_Close+0x6a>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e00e      	b.n	8003504 <HAL_PCD_EP_Close+0x88>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68f9      	ldr	r1, [r7, #12]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f004 fcb7 	bl	8007e68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	607a      	str	r2, [r7, #4]
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	460b      	mov	r3, r1
 800351a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800351c:	7afb      	ldrb	r3, [r7, #11]
 800351e:	f003 0207 	and.w	r2, r3, #7
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	4413      	add	r3, r2
 8003532:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2200      	movs	r2, #0
 8003544:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2200      	movs	r2, #0
 800354a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800354c:	7afb      	ldrb	r3, [r7, #11]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	b2da      	uxtb	r2, r3
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6979      	ldr	r1, [r7, #20]
 800355e:	4618      	mov	r0, r3
 8003560:	f004 fe6f 	bl	8008242 <USB_EPStartXfer>

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	460b      	mov	r3, r1
 8003578:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800357a:	78fb      	ldrb	r3, [r7, #3]
 800357c:	f003 0207 	and.w	r2, r3, #7
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	440b      	add	r3, r1
 800358c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003590:	681b      	ldr	r3, [r3, #0]
}
 8003592:	4618      	mov	r0, r3
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b086      	sub	sp, #24
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
 80035aa:	460b      	mov	r3, r1
 80035ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ae:	7afb      	ldrb	r3, [r7, #11]
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	4613      	mov	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	4413      	add	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2200      	movs	r2, #0
 80035e2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	2201      	movs	r2, #1
 80035e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035ea:	7afb      	ldrb	r3, [r7, #11]
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6979      	ldr	r1, [r7, #20]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f004 fe20 	bl	8008242 <USB_EPStartXfer>

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003618:	78fb      	ldrb	r3, [r7, #3]
 800361a:	f003 0207 	and.w	r2, r3, #7
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	429a      	cmp	r2, r3
 8003624:	d901      	bls.n	800362a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e03e      	b.n	80036a8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800362a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800362e:	2b00      	cmp	r3, #0
 8003630:	da0e      	bge.n	8003650 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003632:	78fb      	ldrb	r3, [r7, #3]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	4613      	mov	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	4413      	add	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2201      	movs	r2, #1
 800364c:	705a      	strb	r2, [r3, #1]
 800364e:	e00c      	b.n	800366a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003650:	78fa      	ldrb	r2, [r7, #3]
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	4413      	add	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2201      	movs	r2, #1
 800366e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003670:	78fb      	ldrb	r3, [r7, #3]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	b2da      	uxtb	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003682:	2b01      	cmp	r3, #1
 8003684:	d101      	bne.n	800368a <HAL_PCD_EP_SetStall+0x7e>
 8003686:	2302      	movs	r3, #2
 8003688:	e00e      	b.n	80036a8 <HAL_PCD_EP_SetStall+0x9c>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68f9      	ldr	r1, [r7, #12]
 8003698:	4618      	mov	r0, r3
 800369a:	f006 f983 	bl	80099a4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80036bc:	78fb      	ldrb	r3, [r7, #3]
 80036be:	f003 020f 	and.w	r2, r3, #15
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d901      	bls.n	80036ce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e040      	b.n	8003750 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	da0e      	bge.n	80036f4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036d6:	78fb      	ldrb	r3, [r7, #3]
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	4613      	mov	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	4413      	add	r3, r2
 80036ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2201      	movs	r2, #1
 80036f0:	705a      	strb	r2, [r3, #1]
 80036f2:	e00e      	b.n	8003712 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036f4:	78fb      	ldrb	r3, [r7, #3]
 80036f6:	f003 0207 	and.w	r2, r3, #7
 80036fa:	4613      	mov	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	4413      	add	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	b2da      	uxtb	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800372a:	2b01      	cmp	r3, #1
 800372c:	d101      	bne.n	8003732 <HAL_PCD_EP_ClrStall+0x82>
 800372e:	2302      	movs	r3, #2
 8003730:	e00e      	b.n	8003750 <HAL_PCD_EP_ClrStall+0xa0>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68f9      	ldr	r1, [r7, #12]
 8003740:	4618      	mov	r0, r3
 8003742:	f006 f980 	bl	8009a46 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b096      	sub	sp, #88	; 0x58
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003760:	e3bf      	b.n	8003ee2 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800376a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800376e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003772:	b2db      	uxtb	r3, r3
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800377c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003780:	2b00      	cmp	r3, #0
 8003782:	f040 8179 	bne.w	8003a78 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003786:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800378a:	f003 0310 	and.w	r3, r3, #16
 800378e:	2b00      	cmp	r3, #0
 8003790:	d152      	bne.n	8003838 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	881b      	ldrh	r3, [r3, #0]
 8003798:	b29b      	uxth	r3, r3
 800379a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800379e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a2:	81fb      	strh	r3, [r7, #14]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	89fb      	ldrh	r3, [r7, #14]
 80037aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3328      	adds	r3, #40	; 0x28
 80037ba:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	461a      	mov	r2, r3
 80037c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4413      	add	r3, r2
 80037d0:	3302      	adds	r3, #2
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6812      	ldr	r2, [r2, #0]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80037e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80037e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ea:	695a      	ldr	r2, [r3, #20]
 80037ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	441a      	add	r2, r3
 80037f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037f4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80037f6:	2100      	movs	r1, #0
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f008 f87e 	bl	800b8fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 836b 	beq.w	8003ee2 <PCD_EP_ISR_Handler+0x78a>
 800380c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	2b00      	cmp	r3, #0
 8003812:	f040 8366 	bne.w	8003ee2 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003822:	b2da      	uxtb	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	b292      	uxth	r2, r2
 800382a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003836:	e354      	b.n	8003ee2 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800383e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800384a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800384e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003852:	2b00      	cmp	r3, #0
 8003854:	d034      	beq.n	80038c0 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800385e:	b29b      	uxth	r3, r3
 8003860:	461a      	mov	r2, r3
 8003862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	4413      	add	r3, r2
 800386a:	3306      	adds	r3, #6
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6812      	ldr	r2, [r2, #0]
 8003872:	4413      	add	r3, r2
 8003874:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800387e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003880:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800388c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800388e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003892:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003894:	b29b      	uxth	r3, r3
 8003896:	f006 f9f9 	bl	8009c8c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80038a6:	4013      	ands	r3, r2
 80038a8:	823b      	strh	r3, [r7, #16]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	8a3a      	ldrh	r2, [r7, #16]
 80038b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038b4:	b292      	uxth	r2, r2
 80038b6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f007 fff1 	bl	800b8a0 <HAL_PCD_SetupStageCallback>
 80038be:	e310      	b.n	8003ee2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80038c0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f280 830c 	bge.w	8003ee2 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80038d6:	4013      	ands	r3, r2
 80038d8:	83fb      	strh	r3, [r7, #30]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	8bfa      	ldrh	r2, [r7, #30]
 80038e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038e4:	b292      	uxth	r2, r2
 80038e6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	461a      	mov	r2, r3
 80038f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	4413      	add	r3, r2
 80038fc:	3306      	adds	r3, #6
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	4413      	add	r3, r2
 8003906:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003912:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d019      	beq.n	8003950 <PCD_EP_ISR_Handler+0x1f8>
 800391c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d015      	beq.n	8003950 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6818      	ldr	r0, [r3, #0]
 8003928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800392a:	6959      	ldr	r1, [r3, #20]
 800392c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800392e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003932:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003934:	b29b      	uxth	r3, r3
 8003936:	f006 f9a9 	bl	8009c8c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800393a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800393c:	695a      	ldr	r2, [r3, #20]
 800393e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	441a      	add	r2, r3
 8003944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003946:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003948:	2100      	movs	r1, #0
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f007 ffba 	bl	800b8c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800395a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800395e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003962:	2b00      	cmp	r3, #0
 8003964:	f040 82bd 	bne.w	8003ee2 <PCD_EP_ISR_Handler+0x78a>
 8003968:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800396c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003970:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003974:	f000 82b5 	beq.w	8003ee2 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	61bb      	str	r3, [r7, #24]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003986:	b29b      	uxth	r3, r3
 8003988:	461a      	mov	r2, r3
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	4413      	add	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	b29b      	uxth	r3, r3
 800399e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	801a      	strh	r2, [r3, #0]
 80039a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	2b3e      	cmp	r3, #62	; 0x3e
 80039ae:	d91d      	bls.n	80039ec <PCD_EP_ISR_Handler+0x294>
 80039b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	095b      	lsrs	r3, r3, #5
 80039b6:	647b      	str	r3, [r7, #68]	; 0x44
 80039b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f003 031f 	and.w	r3, r3, #31
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d102      	bne.n	80039ca <PCD_EP_ISR_Handler+0x272>
 80039c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039c6:	3b01      	subs	r3, #1
 80039c8:	647b      	str	r3, [r7, #68]	; 0x44
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	029b      	lsls	r3, r3, #10
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	4313      	orrs	r3, r2
 80039da:	b29b      	uxth	r3, r3
 80039dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	801a      	strh	r2, [r3, #0]
 80039ea:	e026      	b.n	8003a3a <PCD_EP_ISR_Handler+0x2e2>
 80039ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10a      	bne.n	8003a0a <PCD_EP_ISR_Handler+0x2b2>
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	801a      	strh	r2, [r3, #0]
 8003a08:	e017      	b.n	8003a3a <PCD_EP_ISR_Handler+0x2e2>
 8003a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	085b      	lsrs	r3, r3, #1
 8003a10:	647b      	str	r3, [r7, #68]	; 0x44
 8003a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <PCD_EP_ISR_Handler+0x2cc>
 8003a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a20:	3301      	adds	r3, #1
 8003a22:	647b      	str	r3, [r7, #68]	; 0x44
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	881b      	ldrh	r3, [r3, #0]
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	029b      	lsls	r3, r3, #10
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	4313      	orrs	r3, r2
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4a:	827b      	strh	r3, [r7, #18]
 8003a4c:	8a7b      	ldrh	r3, [r7, #18]
 8003a4e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003a52:	827b      	strh	r3, [r7, #18]
 8003a54:	8a7b      	ldrh	r3, [r7, #18]
 8003a56:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a5a:	827b      	strh	r3, [r7, #18]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	8a7b      	ldrh	r3, [r7, #18]
 8003a62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	8013      	strh	r3, [r2, #0]
 8003a76:	e234      	b.n	8003ee2 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003a8c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f280 80fc 	bge.w	8003c8e <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003aac:	4013      	ands	r3, r2
 8003aae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003ac4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ac8:	b292      	uxth	r2, r2
 8003aca:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003acc:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	4413      	add	r3, r2
 8003ae0:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ae4:	7b1b      	ldrb	r3, [r3, #12]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d125      	bne.n	8003b36 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	461a      	mov	r2, r3
 8003af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4413      	add	r3, r2
 8003afe:	3306      	adds	r3, #6
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6812      	ldr	r2, [r2, #0]
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b12:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003b16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 8092 	beq.w	8003c44 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6818      	ldr	r0, [r3, #0]
 8003b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b26:	6959      	ldr	r1, [r3, #20]
 8003b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b2a:	88da      	ldrh	r2, [r3, #6]
 8003b2c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003b30:	f006 f8ac 	bl	8009c8c <USB_ReadPMA>
 8003b34:	e086      	b.n	8003c44 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b38:	78db      	ldrb	r3, [r3, #3]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d10a      	bne.n	8003b54 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003b3e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b42:	461a      	mov	r2, r3
 8003b44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f9d9 	bl	8003efe <HAL_PCD_EP_DB_Receive>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003b52:	e077      	b.n	8003c44 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	441a      	add	r2, r3
 8003b80:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003b84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d024      	beq.n	8003bfc <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	3302      	adds	r3, #2
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6812      	ldr	r2, [r2, #0]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bd4:	881b      	ldrh	r3, [r3, #0]
 8003bd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bda:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003bde:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d02e      	beq.n	8003c44 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6818      	ldr	r0, [r3, #0]
 8003bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bec:	6959      	ldr	r1, [r3, #20]
 8003bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bf0:	891a      	ldrh	r2, [r3, #8]
 8003bf2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003bf6:	f006 f849 	bl	8009c8c <USB_ReadPMA>
 8003bfa:	e023      	b.n	8003c44 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	461a      	mov	r2, r3
 8003c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	4413      	add	r3, r2
 8003c10:	3306      	adds	r3, #6
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6812      	ldr	r2, [r2, #0]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c24:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003c28:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d009      	beq.n	8003c44 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c36:	6959      	ldr	r1, [r3, #20]
 8003c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c3a:	895a      	ldrh	r2, [r3, #10]
 8003c3c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003c40:	f006 f824 	bl	8009c8c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c46:	69da      	ldr	r2, [r3, #28]
 8003c48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003c4c:	441a      	add	r2, r3
 8003c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c50:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c54:	695a      	ldr	r2, [r3, #20]
 8003c56:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003c5a:	441a      	add	r2, r3
 8003c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c5e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <PCD_EP_ISR_Handler+0x51c>
 8003c68:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d206      	bcs.n	8003c82 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	4619      	mov	r1, r3
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f007 fe22 	bl	800b8c4 <HAL_PCD_DataOutStageCallback>
 8003c80:	e005      	b.n	8003c8e <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f004 fada 	bl	8008242 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003c8e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 8123 	beq.w	8003ee2 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8003c9c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	4413      	add	r3, r2
 8003cae:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	441a      	add	r2, r3
 8003cdc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003ce0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ce4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cee:	78db      	ldrb	r3, [r3, #3]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	f040 80a2 	bne.w	8003e3a <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8003cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cfe:	7b1b      	ldrb	r3, [r3, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 8093 	beq.w	8003e2c <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d06:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d046      	beq.n	8003da0 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d14:	785b      	ldrb	r3, [r3, #1]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d126      	bne.n	8003d68 <PCD_EP_ISR_Handler+0x610>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	4413      	add	r3, r2
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
 8003d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	011a      	lsls	r2, r3, #4
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d40:	623b      	str	r3, [r7, #32]
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	801a      	strh	r2, [r3, #0]
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	801a      	strh	r2, [r3, #0]
 8003d66:	e061      	b.n	8003e2c <PCD_EP_ISR_Handler+0x6d4>
 8003d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d6a:	785b      	ldrb	r3, [r3, #1]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d15d      	bne.n	8003e2c <PCD_EP_ISR_Handler+0x6d4>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	461a      	mov	r2, r3
 8003d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d84:	4413      	add	r3, r2
 8003d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	011a      	lsls	r2, r3, #4
 8003d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d90:	4413      	add	r3, r2
 8003d92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d96:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	801a      	strh	r2, [r3, #0]
 8003d9e:	e045      	b.n	8003e2c <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003da8:	785b      	ldrb	r3, [r3, #1]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d126      	bne.n	8003dfc <PCD_EP_ISR_Handler+0x6a4>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	637b      	str	r3, [r7, #52]	; 0x34
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc2:	4413      	add	r3, r2
 8003dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8003dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	011a      	lsls	r2, r3, #4
 8003dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dce:	4413      	add	r3, r2
 8003dd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003dd4:	633b      	str	r3, [r7, #48]	; 0x30
 8003dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de4:	801a      	strh	r2, [r3, #0]
 8003de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df8:	801a      	strh	r2, [r3, #0]
 8003dfa:	e017      	b.n	8003e2c <PCD_EP_ISR_Handler+0x6d4>
 8003dfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dfe:	785b      	ldrb	r3, [r3, #1]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d113      	bne.n	8003e2c <PCD_EP_ISR_Handler+0x6d4>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	461a      	mov	r2, r3
 8003e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e12:	4413      	add	r3, r2
 8003e14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	011a      	lsls	r2, r3, #4
 8003e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e1e:	4413      	add	r3, r2
 8003e20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e24:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e28:	2200      	movs	r2, #0
 8003e2a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	4619      	mov	r1, r3
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f007 fd61 	bl	800b8fa <HAL_PCD_DataInStageCallback>
 8003e38:	e053      	b.n	8003ee2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003e3a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d146      	bne.n	8003ed4 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	461a      	mov	r2, r3
 8003e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	4413      	add	r3, r2
 8003e5a:	3302      	adds	r3, #2
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6812      	ldr	r2, [r2, #0]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e6e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e74:	699a      	ldr	r2, [r3, #24]
 8003e76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d907      	bls.n	8003e8e <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8003e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e80:	699a      	ldr	r2, [r3, #24]
 8003e82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003e86:	1ad2      	subs	r2, r2, r3
 8003e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e8a:	619a      	str	r2, [r3, #24]
 8003e8c:	e002      	b.n	8003e94 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8003e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e90:	2200      	movs	r2, #0
 8003e92:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003e94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d106      	bne.n	8003eaa <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f007 fd29 	bl	800b8fa <HAL_PCD_DataInStageCallback>
 8003ea8:	e01b      	b.n	8003ee2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eac:	695a      	ldr	r2, [r3, #20]
 8003eae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003eb2:	441a      	add	r2, r3
 8003eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eb6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eba:	69da      	ldr	r2, [r3, #28]
 8003ebc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003ec0:	441a      	add	r2, r3
 8003ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ec4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f004 f9b8 	bl	8008242 <USB_EPStartXfer>
 8003ed2:	e006      	b.n	8003ee2 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003ed4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ed8:	461a      	mov	r2, r3
 8003eda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f91b 	bl	8004118 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	b21b      	sxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f6ff ac37 	blt.w	8003762 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3758      	adds	r7, #88	; 0x58
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b088      	sub	sp, #32
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	60f8      	str	r0, [r7, #12]
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f0c:	88fb      	ldrh	r3, [r7, #6]
 8003f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d07e      	beq.n	8004014 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	461a      	mov	r2, r3
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	4413      	add	r3, r2
 8003f2a:	3302      	adds	r3, #2
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	6812      	ldr	r2, [r2, #0]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f3e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	699a      	ldr	r2, [r3, #24]
 8003f44:	8b7b      	ldrh	r3, [r7, #26]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d306      	bcc.n	8003f58 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	699a      	ldr	r2, [r3, #24]
 8003f4e:	8b7b      	ldrh	r3, [r7, #26]
 8003f50:	1ad2      	subs	r2, r2, r3
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	619a      	str	r2, [r3, #24]
 8003f56:	e002      	b.n	8003f5e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d123      	bne.n	8003fae <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f80:	833b      	strh	r3, [r7, #24]
 8003f82:	8b3b      	ldrh	r3, [r7, #24]
 8003f84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f88:	833b      	strh	r3, [r7, #24]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	441a      	add	r2, r3
 8003f98:	8b3b      	ldrh	r3, [r7, #24]
 8003f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003fae:	88fb      	ldrh	r3, [r7, #6]
 8003fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d01f      	beq.n	8003ff8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd2:	82fb      	strh	r3, [r7, #22]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	441a      	add	r2, r3
 8003fe2:	8afb      	ldrh	r3, [r7, #22]
 8003fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ff0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003ff8:	8b7b      	ldrh	r3, [r7, #26]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 8087 	beq.w	800410e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6818      	ldr	r0, [r3, #0]
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	6959      	ldr	r1, [r3, #20]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	891a      	ldrh	r2, [r3, #8]
 800400c:	8b7b      	ldrh	r3, [r7, #26]
 800400e:	f005 fe3d 	bl	8009c8c <USB_ReadPMA>
 8004012:	e07c      	b.n	800410e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800401c:	b29b      	uxth	r3, r3
 800401e:	461a      	mov	r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	4413      	add	r3, r2
 8004028:	3306      	adds	r3, #6
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	4413      	add	r3, r2
 8004032:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800403c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	699a      	ldr	r2, [r3, #24]
 8004042:	8b7b      	ldrh	r3, [r7, #26]
 8004044:	429a      	cmp	r2, r3
 8004046:	d306      	bcc.n	8004056 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	699a      	ldr	r2, [r3, #24]
 800404c:	8b7b      	ldrh	r3, [r7, #26]
 800404e:	1ad2      	subs	r2, r2, r3
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	619a      	str	r2, [r3, #24]
 8004054:	e002      	b.n	800405c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2200      	movs	r2, #0
 800405a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d123      	bne.n	80040ac <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	461a      	mov	r2, r3
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	b29b      	uxth	r3, r3
 8004076:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800407a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407e:	83fb      	strh	r3, [r7, #30]
 8004080:	8bfb      	ldrh	r3, [r7, #30]
 8004082:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004086:	83fb      	strh	r3, [r7, #30]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	461a      	mov	r2, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	441a      	add	r2, r3
 8004096:	8bfb      	ldrh	r3, [r7, #30]
 8004098:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800409c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80040ac:	88fb      	ldrh	r3, [r7, #6]
 80040ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d11f      	bne.n	80040f6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d0:	83bb      	strh	r3, [r7, #28]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	441a      	add	r2, r3
 80040e0:	8bbb      	ldrh	r3, [r7, #28]
 80040e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80040f6:	8b7b      	ldrh	r3, [r7, #26]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d008      	beq.n	800410e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6818      	ldr	r0, [r3, #0]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	6959      	ldr	r1, [r3, #20]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	895a      	ldrh	r2, [r3, #10]
 8004108:	8b7b      	ldrh	r3, [r7, #26]
 800410a:	f005 fdbf 	bl	8009c8c <USB_ReadPMA>
    }
  }

  return count;
 800410e:	8b7b      	ldrh	r3, [r7, #26]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3720      	adds	r7, #32
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b0a4      	sub	sp, #144	; 0x90
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	4613      	mov	r3, r2
 8004124:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004126:	88fb      	ldrh	r3, [r7, #6]
 8004128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 81dd 	beq.w	80044ec <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800413a:	b29b      	uxth	r3, r3
 800413c:	461a      	mov	r2, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	4413      	add	r3, r2
 8004146:	3302      	adds	r3, #2
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	6812      	ldr	r2, [r2, #0]
 800414e:	4413      	add	r3, r2
 8004150:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800415a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	699a      	ldr	r2, [r3, #24]
 8004162:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004166:	429a      	cmp	r2, r3
 8004168:	d907      	bls.n	800417a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	699a      	ldr	r2, [r3, #24]
 800416e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004172:	1ad2      	subs	r2, r2, r3
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	619a      	str	r2, [r3, #24]
 8004178:	e002      	b.n	8004180 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2200      	movs	r2, #0
 800417e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	2b00      	cmp	r3, #0
 8004186:	f040 80b9 	bne.w	80042fc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	785b      	ldrb	r3, [r3, #1]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d126      	bne.n	80041e0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	461a      	mov	r2, r3
 80041a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a6:	4413      	add	r3, r2
 80041a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	011a      	lsls	r2, r3, #4
 80041b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b2:	4413      	add	r3, r2
 80041b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c8:	801a      	strh	r2, [r3, #0]
 80041ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041d8:	b29a      	uxth	r2, r3
 80041da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041dc:	801a      	strh	r2, [r3, #0]
 80041de:	e01a      	b.n	8004216 <HAL_PCD_EP_DB_Transmit+0xfe>
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	785b      	ldrb	r3, [r3, #1]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d116      	bne.n	8004216 <HAL_PCD_EP_DB_Transmit+0xfe>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	637b      	str	r3, [r7, #52]	; 0x34
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	461a      	mov	r2, r3
 80041fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041fc:	4413      	add	r3, r2
 80041fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	011a      	lsls	r2, r3, #4
 8004206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004208:	4413      	add	r3, r2
 800420a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800420e:	633b      	str	r3, [r7, #48]	; 0x30
 8004210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004212:	2200      	movs	r2, #0
 8004214:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	627b      	str	r3, [r7, #36]	; 0x24
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	785b      	ldrb	r3, [r3, #1]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d126      	bne.n	8004272 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	61fb      	str	r3, [r7, #28]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004232:	b29b      	uxth	r3, r3
 8004234:	461a      	mov	r2, r3
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	4413      	add	r3, r2
 800423a:	61fb      	str	r3, [r7, #28]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	011a      	lsls	r2, r3, #4
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	4413      	add	r3, r2
 8004246:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800424a:	61bb      	str	r3, [r7, #24]
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	b29b      	uxth	r3, r3
 8004252:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004256:	b29a      	uxth	r2, r3
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	801a      	strh	r2, [r3, #0]
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	b29b      	uxth	r3, r3
 8004262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800426a:	b29a      	uxth	r2, r3
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	801a      	strh	r2, [r3, #0]
 8004270:	e017      	b.n	80042a2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	785b      	ldrb	r3, [r3, #1]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d113      	bne.n	80042a2 <HAL_PCD_EP_DB_Transmit+0x18a>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004282:	b29b      	uxth	r3, r3
 8004284:	461a      	mov	r2, r3
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	4413      	add	r3, r2
 800428a:	627b      	str	r3, [r7, #36]	; 0x24
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	011a      	lsls	r2, r3, #4
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	4413      	add	r3, r2
 8004296:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800429a:	623b      	str	r3, [r7, #32]
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	2200      	movs	r2, #0
 80042a0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	4619      	mov	r1, r3
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f007 fb26 	bl	800b8fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80042ae:	88fb      	ldrh	r3, [r7, #6]
 80042b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 82fc 	beq.w	80048b2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	461a      	mov	r2, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d4:	82fb      	strh	r3, [r7, #22]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	441a      	add	r2, r3
 80042e4:	8afb      	ldrh	r3, [r7, #22]
 80042e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	8013      	strh	r3, [r2, #0]
 80042fa:	e2da      	b.n	80048b2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80042fc:	88fb      	ldrh	r3, [r7, #6]
 80042fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d021      	beq.n	800434a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	b29b      	uxth	r3, r3
 8004318:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800431c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004320:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	461a      	mov	r2, r3
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	441a      	add	r2, r3
 8004332:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800433a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800433e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004346:	b29b      	uxth	r3, r3
 8004348:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004350:	2b01      	cmp	r3, #1
 8004352:	f040 82ae 	bne.w	80048b2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	695a      	ldr	r2, [r3, #20]
 800435a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800435e:	441a      	add	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	69da      	ldr	r2, [r3, #28]
 8004368:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800436c:	441a      	add	r2, r3
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	6a1a      	ldr	r2, [r3, #32]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	429a      	cmp	r2, r3
 800437c:	d30b      	bcc.n	8004396 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	6a1a      	ldr	r2, [r3, #32]
 800438a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800438e:	1ad2      	subs	r2, r2, r3
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	621a      	str	r2, [r3, #32]
 8004394:	e017      	b.n	80043c6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d108      	bne.n	80043b0 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800439e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80043a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80043ae:	e00a      	b.n	80043c6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2200      	movs	r2, #0
 80043c4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	785b      	ldrb	r3, [r3, #1]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d165      	bne.n	800449a <HAL_PCD_EP_DB_Transmit+0x382>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043dc:	b29b      	uxth	r3, r3
 80043de:	461a      	mov	r2, r3
 80043e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043e2:	4413      	add	r3, r2
 80043e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	011a      	lsls	r2, r3, #4
 80043ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ee:	4413      	add	r3, r2
 80043f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80043f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004400:	b29a      	uxth	r2, r3
 8004402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004404:	801a      	strh	r2, [r3, #0]
 8004406:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800440a:	2b3e      	cmp	r3, #62	; 0x3e
 800440c:	d91d      	bls.n	800444a <HAL_PCD_EP_DB_Transmit+0x332>
 800440e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	64bb      	str	r3, [r7, #72]	; 0x48
 8004416:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800441a:	f003 031f 	and.w	r3, r3, #31
 800441e:	2b00      	cmp	r3, #0
 8004420:	d102      	bne.n	8004428 <HAL_PCD_EP_DB_Transmit+0x310>
 8004422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004424:	3b01      	subs	r3, #1
 8004426:	64bb      	str	r3, [r7, #72]	; 0x48
 8004428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442a:	881b      	ldrh	r3, [r3, #0]
 800442c:	b29a      	uxth	r2, r3
 800442e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004430:	b29b      	uxth	r3, r3
 8004432:	029b      	lsls	r3, r3, #10
 8004434:	b29b      	uxth	r3, r3
 8004436:	4313      	orrs	r3, r2
 8004438:	b29b      	uxth	r3, r3
 800443a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800443e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004442:	b29a      	uxth	r2, r3
 8004444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004446:	801a      	strh	r2, [r3, #0]
 8004448:	e044      	b.n	80044d4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800444a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10a      	bne.n	8004468 <HAL_PCD_EP_DB_Transmit+0x350>
 8004452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	b29b      	uxth	r3, r3
 8004458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800445c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004460:	b29a      	uxth	r2, r3
 8004462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004464:	801a      	strh	r2, [r3, #0]
 8004466:	e035      	b.n	80044d4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004468:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800446c:	085b      	lsrs	r3, r3, #1
 800446e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004470:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	d002      	beq.n	8004482 <HAL_PCD_EP_DB_Transmit+0x36a>
 800447c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800447e:	3301      	adds	r3, #1
 8004480:	64bb      	str	r3, [r7, #72]	; 0x48
 8004482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	b29a      	uxth	r2, r3
 8004488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800448a:	b29b      	uxth	r3, r3
 800448c:	029b      	lsls	r3, r3, #10
 800448e:	b29b      	uxth	r3, r3
 8004490:	4313      	orrs	r3, r2
 8004492:	b29a      	uxth	r2, r3
 8004494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004496:	801a      	strh	r2, [r3, #0]
 8004498:	e01c      	b.n	80044d4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	785b      	ldrb	r3, [r3, #1]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d118      	bne.n	80044d4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	647b      	str	r3, [r7, #68]	; 0x44
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	461a      	mov	r2, r3
 80044b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044b6:	4413      	add	r3, r2
 80044b8:	647b      	str	r3, [r7, #68]	; 0x44
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	011a      	lsls	r2, r3, #4
 80044c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044c2:	4413      	add	r3, r2
 80044c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044c8:	643b      	str	r3, [r7, #64]	; 0x40
 80044ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044d2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6818      	ldr	r0, [r3, #0]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	6959      	ldr	r1, [r3, #20]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	891a      	ldrh	r2, [r3, #8]
 80044e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	f005 fb8b 	bl	8009c00 <USB_WritePMA>
 80044ea:	e1e2      	b.n	80048b2 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	461a      	mov	r2, r3
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	4413      	add	r3, r2
 8004500:	3306      	adds	r3, #6
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	6812      	ldr	r2, [r2, #0]
 8004508:	4413      	add	r3, r2
 800450a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800450e:	881b      	ldrh	r3, [r3, #0]
 8004510:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004514:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	699a      	ldr	r2, [r3, #24]
 800451c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004520:	429a      	cmp	r2, r3
 8004522:	d307      	bcc.n	8004534 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	699a      	ldr	r2, [r3, #24]
 8004528:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800452c:	1ad2      	subs	r2, r2, r3
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	619a      	str	r2, [r3, #24]
 8004532:	e002      	b.n	800453a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2200      	movs	r2, #0
 8004538:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	2b00      	cmp	r3, #0
 8004540:	f040 80c0 	bne.w	80046c4 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	785b      	ldrb	r3, [r3, #1]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d126      	bne.n	800459a <HAL_PCD_EP_DB_Transmit+0x482>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800455a:	b29b      	uxth	r3, r3
 800455c:	461a      	mov	r2, r3
 800455e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004560:	4413      	add	r3, r2
 8004562:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	011a      	lsls	r2, r3, #4
 800456a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800456c:	4413      	add	r3, r2
 800456e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004572:	67bb      	str	r3, [r7, #120]	; 0x78
 8004574:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	b29b      	uxth	r3, r3
 800457a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800457e:	b29a      	uxth	r2, r3
 8004580:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004582:	801a      	strh	r2, [r3, #0]
 8004584:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	b29b      	uxth	r3, r3
 800458a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800458e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004592:	b29a      	uxth	r2, r3
 8004594:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004596:	801a      	strh	r2, [r3, #0]
 8004598:	e01a      	b.n	80045d0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	785b      	ldrb	r3, [r3, #1]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d116      	bne.n	80045d0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	667b      	str	r3, [r7, #100]	; 0x64
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	461a      	mov	r2, r3
 80045b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045b6:	4413      	add	r3, r2
 80045b8:	667b      	str	r3, [r7, #100]	; 0x64
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	011a      	lsls	r2, r3, #4
 80045c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045c2:	4413      	add	r3, r2
 80045c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045c8:	663b      	str	r3, [r7, #96]	; 0x60
 80045ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045cc:	2200      	movs	r2, #0
 80045ce:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	677b      	str	r3, [r7, #116]	; 0x74
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	785b      	ldrb	r3, [r3, #1]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d12b      	bne.n	8004636 <HAL_PCD_EP_DB_Transmit+0x51e>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	461a      	mov	r2, r3
 80045f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045f2:	4413      	add	r3, r2
 80045f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	011a      	lsls	r2, r3, #4
 80045fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045fe:	4413      	add	r3, r2
 8004600:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004604:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004608:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	b29b      	uxth	r3, r3
 8004610:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004614:	b29a      	uxth	r2, r3
 8004616:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800461a:	801a      	strh	r2, [r3, #0]
 800461c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	b29b      	uxth	r3, r3
 8004624:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004628:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800462c:	b29a      	uxth	r2, r3
 800462e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004632:	801a      	strh	r2, [r3, #0]
 8004634:	e017      	b.n	8004666 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	785b      	ldrb	r3, [r3, #1]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d113      	bne.n	8004666 <HAL_PCD_EP_DB_Transmit+0x54e>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004646:	b29b      	uxth	r3, r3
 8004648:	461a      	mov	r2, r3
 800464a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800464c:	4413      	add	r3, r2
 800464e:	677b      	str	r3, [r7, #116]	; 0x74
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	011a      	lsls	r2, r3, #4
 8004656:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004658:	4413      	add	r3, r2
 800465a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800465e:	673b      	str	r3, [r7, #112]	; 0x70
 8004660:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004662:	2200      	movs	r2, #0
 8004664:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	4619      	mov	r1, r3
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f007 f944 	bl	800b8fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004672:	88fb      	ldrh	r3, [r7, #6]
 8004674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004678:	2b00      	cmp	r3, #0
 800467a:	f040 811a 	bne.w	80048b2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	461a      	mov	r2, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	b29b      	uxth	r3, r3
 8004690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004698:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	461a      	mov	r2, r3
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	441a      	add	r2, r3
 80046aa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80046ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046be:	b29b      	uxth	r3, r3
 80046c0:	8013      	strh	r3, [r2, #0]
 80046c2:	e0f6      	b.n	80048b2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80046c4:	88fb      	ldrh	r3, [r7, #6]
 80046c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d121      	bne.n	8004712 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	461a      	mov	r2, r3
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	461a      	mov	r2, r3
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	441a      	add	r2, r3
 80046fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004706:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800470a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800470e:	b29b      	uxth	r3, r3
 8004710:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004718:	2b01      	cmp	r3, #1
 800471a:	f040 80ca 	bne.w	80048b2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	695a      	ldr	r2, [r3, #20]
 8004722:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004726:	441a      	add	r2, r3
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	69da      	ldr	r2, [r3, #28]
 8004730:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004734:	441a      	add	r2, r3
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	6a1a      	ldr	r2, [r3, #32]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	429a      	cmp	r2, r3
 8004744:	d30b      	bcc.n	800475e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	6a1a      	ldr	r2, [r3, #32]
 8004752:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004756:	1ad2      	subs	r2, r2, r3
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	621a      	str	r2, [r3, #32]
 800475c:	e017      	b.n	800478e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d108      	bne.n	8004778 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004766:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800476a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004776:	e00a      	b.n	800478e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2200      	movs	r2, #0
 8004784:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	657b      	str	r3, [r7, #84]	; 0x54
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	785b      	ldrb	r3, [r3, #1]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d165      	bne.n	8004868 <HAL_PCD_EP_DB_Transmit+0x750>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	461a      	mov	r2, r3
 80047ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047b0:	4413      	add	r3, r2
 80047b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	011a      	lsls	r2, r3, #4
 80047ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047bc:	4413      	add	r3, r2
 80047be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80047c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047d2:	801a      	strh	r2, [r3, #0]
 80047d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047d8:	2b3e      	cmp	r3, #62	; 0x3e
 80047da:	d91d      	bls.n	8004818 <HAL_PCD_EP_DB_Transmit+0x700>
 80047dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047e0:	095b      	lsrs	r3, r3, #5
 80047e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80047e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047e8:	f003 031f 	and.w	r3, r3, #31
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d102      	bne.n	80047f6 <HAL_PCD_EP_DB_Transmit+0x6de>
 80047f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047f2:	3b01      	subs	r3, #1
 80047f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80047f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047fe:	b29b      	uxth	r3, r3
 8004800:	029b      	lsls	r3, r3, #10
 8004802:	b29b      	uxth	r3, r3
 8004804:	4313      	orrs	r3, r2
 8004806:	b29b      	uxth	r3, r3
 8004808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800480c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004810:	b29a      	uxth	r2, r3
 8004812:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004814:	801a      	strh	r2, [r3, #0]
 8004816:	e041      	b.n	800489c <HAL_PCD_EP_DB_Transmit+0x784>
 8004818:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10a      	bne.n	8004836 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004820:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	b29b      	uxth	r3, r3
 8004826:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800482a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800482e:	b29a      	uxth	r2, r3
 8004830:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004832:	801a      	strh	r2, [r3, #0]
 8004834:	e032      	b.n	800489c <HAL_PCD_EP_DB_Transmit+0x784>
 8004836:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800483a:	085b      	lsrs	r3, r3, #1
 800483c:	66bb      	str	r3, [r7, #104]	; 0x68
 800483e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <HAL_PCD_EP_DB_Transmit+0x738>
 800484a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800484c:	3301      	adds	r3, #1
 800484e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004850:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	b29a      	uxth	r2, r3
 8004856:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004858:	b29b      	uxth	r3, r3
 800485a:	029b      	lsls	r3, r3, #10
 800485c:	b29b      	uxth	r3, r3
 800485e:	4313      	orrs	r3, r2
 8004860:	b29a      	uxth	r2, r3
 8004862:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004864:	801a      	strh	r2, [r3, #0]
 8004866:	e019      	b.n	800489c <HAL_PCD_EP_DB_Transmit+0x784>
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	785b      	ldrb	r3, [r3, #1]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d115      	bne.n	800489c <HAL_PCD_EP_DB_Transmit+0x784>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004878:	b29b      	uxth	r3, r3
 800487a:	461a      	mov	r2, r3
 800487c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800487e:	4413      	add	r3, r2
 8004880:	657b      	str	r3, [r7, #84]	; 0x54
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	011a      	lsls	r2, r3, #4
 8004888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800488a:	4413      	add	r3, r2
 800488c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004890:	653b      	str	r3, [r7, #80]	; 0x50
 8004892:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004896:	b29a      	uxth	r2, r3
 8004898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800489a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6818      	ldr	r0, [r3, #0]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	6959      	ldr	r1, [r3, #20]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	895a      	ldrh	r2, [r3, #10]
 80048a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	f005 f9a7 	bl	8009c00 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048cc:	82bb      	strh	r3, [r7, #20]
 80048ce:	8abb      	ldrh	r3, [r7, #20]
 80048d0:	f083 0310 	eor.w	r3, r3, #16
 80048d4:	82bb      	strh	r3, [r7, #20]
 80048d6:	8abb      	ldrh	r3, [r7, #20]
 80048d8:	f083 0320 	eor.w	r3, r3, #32
 80048dc:	82bb      	strh	r3, [r7, #20]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	461a      	mov	r2, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	441a      	add	r2, r3
 80048ec:	8abb      	ldrh	r3, [r7, #20]
 80048ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048fe:	b29b      	uxth	r3, r3
 8004900:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3790      	adds	r7, #144	; 0x90
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800490c:	b480      	push	{r7}
 800490e:	b087      	sub	sp, #28
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	607b      	str	r3, [r7, #4]
 8004916:	460b      	mov	r3, r1
 8004918:	817b      	strh	r3, [r7, #10]
 800491a:	4613      	mov	r3, r2
 800491c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800491e:	897b      	ldrh	r3, [r7, #10]
 8004920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00b      	beq.n	8004942 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800492a:	897b      	ldrh	r3, [r7, #10]
 800492c:	f003 0307 	and.w	r3, r3, #7
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	4613      	mov	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4413      	add	r3, r2
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	e009      	b.n	8004956 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004942:	897a      	ldrh	r2, [r7, #10]
 8004944:	4613      	mov	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4413      	add	r3, r2
 8004954:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004956:	893b      	ldrh	r3, [r7, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d107      	bne.n	800496c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	2200      	movs	r2, #0
 8004960:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	b29a      	uxth	r2, r3
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	80da      	strh	r2, [r3, #6]
 800496a:	e00b      	b.n	8004984 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	2201      	movs	r2, #1
 8004970:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	b29a      	uxth	r2, r3
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	0c1b      	lsrs	r3, r3, #16
 800497e:	b29a      	uxth	r2, r3
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
	...

08004994 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800499a:	af00      	add	r7, sp, #0
 800499c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049a4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d102      	bne.n	80049ba <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	f001 b823 	b.w	8005a00 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 817d 	beq.w	8004cca <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80049d0:	4bbc      	ldr	r3, [pc, #752]	; (8004cc4 <HAL_RCC_OscConfig+0x330>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f003 030c 	and.w	r3, r3, #12
 80049d8:	2b04      	cmp	r3, #4
 80049da:	d00c      	beq.n	80049f6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049dc:	4bb9      	ldr	r3, [pc, #740]	; (8004cc4 <HAL_RCC_OscConfig+0x330>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f003 030c 	and.w	r3, r3, #12
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d15c      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x10e>
 80049e8:	4bb6      	ldr	r3, [pc, #728]	; (8004cc4 <HAL_RCC_OscConfig+0x330>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049f4:	d155      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x10e>
 80049f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049fa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049fe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004a02:	fa93 f3a3 	rbit	r3, r3
 8004a06:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a0a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a0e:	fab3 f383 	clz	r3, r3
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	095b      	lsrs	r3, r3, #5
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	f043 0301 	orr.w	r3, r3, #1
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d102      	bne.n	8004a28 <HAL_RCC_OscConfig+0x94>
 8004a22:	4ba8      	ldr	r3, [pc, #672]	; (8004cc4 <HAL_RCC_OscConfig+0x330>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	e015      	b.n	8004a54 <HAL_RCC_OscConfig+0xc0>
 8004a28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a2c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a30:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004a34:	fa93 f3a3 	rbit	r3, r3
 8004a38:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004a3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a40:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004a44:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004a48:	fa93 f3a3 	rbit	r3, r3
 8004a4c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004a50:	4b9c      	ldr	r3, [pc, #624]	; (8004cc4 <HAL_RCC_OscConfig+0x330>)
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a58:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004a5c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004a60:	fa92 f2a2 	rbit	r2, r2
 8004a64:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004a68:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004a6c:	fab2 f282 	clz	r2, r2
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	f042 0220 	orr.w	r2, r2, #32
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	f002 021f 	and.w	r2, r2, #31
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a82:	4013      	ands	r3, r2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 811f 	beq.w	8004cc8 <HAL_RCC_OscConfig+0x334>
 8004a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f040 8116 	bne.w	8004cc8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	f000 bfaf 	b.w	8005a00 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab2:	d106      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x12e>
 8004ab4:	4b83      	ldr	r3, [pc, #524]	; (8004cc4 <HAL_RCC_OscConfig+0x330>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a82      	ldr	r2, [pc, #520]	; (8004cc4 <HAL_RCC_OscConfig+0x330>)
 8004aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004abe:	6013      	str	r3, [r2, #0]
 8004ac0:	e036      	b.n	8004b30 <HAL_RCC_OscConfig+0x19c>
 8004ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ac6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10c      	bne.n	8004aec <HAL_RCC_OscConfig+0x158>
 8004ad2:	4b7c      	ldr	r3, [pc, #496]	; (8004cc4 <HAL_RCC_OscConfig+0x330>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a7b      	ldr	r2, [pc, #492]	; (8004cc4 <HAL_RCC_OscConfig+0x330>)
 8004ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	4b79      	ldr	r3, [pc, #484]	; (8004cc4 <HAL_RCC_OscConfig+0x330>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a78      	ldr	r2, [pc, #480]	; (8004cc4 <HAL_RCC_OscConfig+0x330>)
 8004ae4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	e021      	b.n	8004b30 <HAL_RCC_OscConfig+0x19c>
 8004aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004afc:	d10c      	bne.n	8004b18 <HAL_RCC_OscConfig+0x184>
 8004afe:	4b71      	ldr	r3, [pc, #452]	; (8004cc4 <HAL_RCC_OscConfig+0x330>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a70      	ldr	r2, [pc, #448]	; (8004cc4 <HAL_RCC_OscConfig+0x330>)
 8004b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	4b6e      	ldr	r3, [pc, #440]	; (8004cc4 <HAL_RCC_OscConfig+0x330>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a6d      	ldr	r2, [pc, #436]	; (8004cc4 <HAL_RCC_OscConfig+0x330>)
 8004b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	e00b      	b.n	8004b30 <HAL_RCC_OscConfig+0x19c>
 8004b18:	4b6a      	ldr	r3, [pc, #424]	; (8004cc4 <HAL_RCC_OscConfig+0x330>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a69      	ldr	r2, [pc, #420]	; (8004cc4 <HAL_RCC_OscConfig+0x330>)
 8004b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b22:	6013      	str	r3, [r2, #0]
 8004b24:	4b67      	ldr	r3, [pc, #412]	; (8004cc4 <HAL_RCC_OscConfig+0x330>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a66      	ldr	r2, [pc, #408]	; (8004cc4 <HAL_RCC_OscConfig+0x330>)
 8004b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b2e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b30:	4b64      	ldr	r3, [pc, #400]	; (8004cc4 <HAL_RCC_OscConfig+0x330>)
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	f023 020f 	bic.w	r2, r3, #15
 8004b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	495f      	ldr	r1, [pc, #380]	; (8004cc4 <HAL_RCC_OscConfig+0x330>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d059      	beq.n	8004c0e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5a:	f7fc fa83 	bl	8001064 <HAL_GetTick>
 8004b5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b62:	e00a      	b.n	8004b7a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b64:	f7fc fa7e 	bl	8001064 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b64      	cmp	r3, #100	; 0x64
 8004b72:	d902      	bls.n	8004b7a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	f000 bf43 	b.w	8005a00 <HAL_RCC_OscConfig+0x106c>
 8004b7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b7e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b82:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004b86:	fa93 f3a3 	rbit	r3, r3
 8004b8a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004b8e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b92:	fab3 f383 	clz	r3, r3
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	f043 0301 	orr.w	r3, r3, #1
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d102      	bne.n	8004bac <HAL_RCC_OscConfig+0x218>
 8004ba6:	4b47      	ldr	r3, [pc, #284]	; (8004cc4 <HAL_RCC_OscConfig+0x330>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	e015      	b.n	8004bd8 <HAL_RCC_OscConfig+0x244>
 8004bac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bb0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004bb8:	fa93 f3a3 	rbit	r3, r3
 8004bbc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004bc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bc4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004bc8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004bcc:	fa93 f3a3 	rbit	r3, r3
 8004bd0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004bd4:	4b3b      	ldr	r3, [pc, #236]	; (8004cc4 <HAL_RCC_OscConfig+0x330>)
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004bdc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004be0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004be4:	fa92 f2a2 	rbit	r2, r2
 8004be8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004bec:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004bf0:	fab2 f282 	clz	r2, r2
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	f042 0220 	orr.w	r2, r2, #32
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	f002 021f 	and.w	r2, r2, #31
 8004c00:	2101      	movs	r1, #1
 8004c02:	fa01 f202 	lsl.w	r2, r1, r2
 8004c06:	4013      	ands	r3, r2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0ab      	beq.n	8004b64 <HAL_RCC_OscConfig+0x1d0>
 8004c0c:	e05d      	b.n	8004cca <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c0e:	f7fc fa29 	bl	8001064 <HAL_GetTick>
 8004c12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c16:	e00a      	b.n	8004c2e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c18:	f7fc fa24 	bl	8001064 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b64      	cmp	r3, #100	; 0x64
 8004c26:	d902      	bls.n	8004c2e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	f000 bee9 	b.w	8005a00 <HAL_RCC_OscConfig+0x106c>
 8004c2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c32:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c36:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004c3a:	fa93 f3a3 	rbit	r3, r3
 8004c3e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004c42:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c46:	fab3 f383 	clz	r3, r3
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	095b      	lsrs	r3, r3, #5
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	f043 0301 	orr.w	r3, r3, #1
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d102      	bne.n	8004c60 <HAL_RCC_OscConfig+0x2cc>
 8004c5a:	4b1a      	ldr	r3, [pc, #104]	; (8004cc4 <HAL_RCC_OscConfig+0x330>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	e015      	b.n	8004c8c <HAL_RCC_OscConfig+0x2f8>
 8004c60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c64:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c68:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004c6c:	fa93 f3a3 	rbit	r3, r3
 8004c70:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004c74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c78:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004c7c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004c80:	fa93 f3a3 	rbit	r3, r3
 8004c84:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004c88:	4b0e      	ldr	r3, [pc, #56]	; (8004cc4 <HAL_RCC_OscConfig+0x330>)
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c90:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004c94:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004c98:	fa92 f2a2 	rbit	r2, r2
 8004c9c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004ca0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004ca4:	fab2 f282 	clz	r2, r2
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	f042 0220 	orr.w	r2, r2, #32
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	f002 021f 	and.w	r2, r2, #31
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8004cba:	4013      	ands	r3, r2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1ab      	bne.n	8004c18 <HAL_RCC_OscConfig+0x284>
 8004cc0:	e003      	b.n	8004cca <HAL_RCC_OscConfig+0x336>
 8004cc2:	bf00      	nop
 8004cc4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 817d 	beq.w	8004fda <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004ce0:	4ba6      	ldr	r3, [pc, #664]	; (8004f7c <HAL_RCC_OscConfig+0x5e8>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f003 030c 	and.w	r3, r3, #12
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00b      	beq.n	8004d04 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004cec:	4ba3      	ldr	r3, [pc, #652]	; (8004f7c <HAL_RCC_OscConfig+0x5e8>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f003 030c 	and.w	r3, r3, #12
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d172      	bne.n	8004dde <HAL_RCC_OscConfig+0x44a>
 8004cf8:	4ba0      	ldr	r3, [pc, #640]	; (8004f7c <HAL_RCC_OscConfig+0x5e8>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d16c      	bne.n	8004dde <HAL_RCC_OscConfig+0x44a>
 8004d04:	2302      	movs	r3, #2
 8004d06:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004d0e:	fa93 f3a3 	rbit	r3, r3
 8004d12:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004d16:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d1a:	fab3 f383 	clz	r3, r3
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	095b      	lsrs	r3, r3, #5
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	f043 0301 	orr.w	r3, r3, #1
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d102      	bne.n	8004d34 <HAL_RCC_OscConfig+0x3a0>
 8004d2e:	4b93      	ldr	r3, [pc, #588]	; (8004f7c <HAL_RCC_OscConfig+0x5e8>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	e013      	b.n	8004d5c <HAL_RCC_OscConfig+0x3c8>
 8004d34:	2302      	movs	r3, #2
 8004d36:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004d3e:	fa93 f3a3 	rbit	r3, r3
 8004d42:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004d46:	2302      	movs	r3, #2
 8004d48:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004d4c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004d50:	fa93 f3a3 	rbit	r3, r3
 8004d54:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004d58:	4b88      	ldr	r3, [pc, #544]	; (8004f7c <HAL_RCC_OscConfig+0x5e8>)
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004d62:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004d66:	fa92 f2a2 	rbit	r2, r2
 8004d6a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004d6e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004d72:	fab2 f282 	clz	r2, r2
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	f042 0220 	orr.w	r2, r2, #32
 8004d7c:	b2d2      	uxtb	r2, r2
 8004d7e:	f002 021f 	and.w	r2, r2, #31
 8004d82:	2101      	movs	r1, #1
 8004d84:	fa01 f202 	lsl.w	r2, r1, r2
 8004d88:	4013      	ands	r3, r2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <HAL_RCC_OscConfig+0x410>
 8004d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d002      	beq.n	8004da4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	f000 be2e 	b.w	8005a00 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da4:	4b75      	ldr	r3, [pc, #468]	; (8004f7c <HAL_RCC_OscConfig+0x5e8>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004db0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	21f8      	movs	r1, #248	; 0xf8
 8004dba:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dbe:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004dc2:	fa91 f1a1 	rbit	r1, r1
 8004dc6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004dca:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004dce:	fab1 f181 	clz	r1, r1
 8004dd2:	b2c9      	uxtb	r1, r1
 8004dd4:	408b      	lsls	r3, r1
 8004dd6:	4969      	ldr	r1, [pc, #420]	; (8004f7c <HAL_RCC_OscConfig+0x5e8>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ddc:	e0fd      	b.n	8004fda <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004de2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 8088 	beq.w	8004f00 <HAL_RCC_OscConfig+0x56c>
 8004df0:	2301      	movs	r3, #1
 8004df2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004dfa:	fa93 f3a3 	rbit	r3, r3
 8004dfe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004e02:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e06:	fab3 f383 	clz	r3, r3
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	461a      	mov	r2, r3
 8004e18:	2301      	movs	r3, #1
 8004e1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1c:	f7fc f922 	bl	8001064 <HAL_GetTick>
 8004e20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e24:	e00a      	b.n	8004e3c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e26:	f7fc f91d 	bl	8001064 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d902      	bls.n	8004e3c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	f000 bde2 	b.w	8005a00 <HAL_RCC_OscConfig+0x106c>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e42:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004e46:	fa93 f3a3 	rbit	r3, r3
 8004e4a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004e4e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e52:	fab3 f383 	clz	r3, r3
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	095b      	lsrs	r3, r3, #5
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	f043 0301 	orr.w	r3, r3, #1
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d102      	bne.n	8004e6c <HAL_RCC_OscConfig+0x4d8>
 8004e66:	4b45      	ldr	r3, [pc, #276]	; (8004f7c <HAL_RCC_OscConfig+0x5e8>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	e013      	b.n	8004e94 <HAL_RCC_OscConfig+0x500>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e72:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004e76:	fa93 f3a3 	rbit	r3, r3
 8004e7a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004e7e:	2302      	movs	r3, #2
 8004e80:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004e84:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004e88:	fa93 f3a3 	rbit	r3, r3
 8004e8c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004e90:	4b3a      	ldr	r3, [pc, #232]	; (8004f7c <HAL_RCC_OscConfig+0x5e8>)
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	2202      	movs	r2, #2
 8004e96:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004e9a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004e9e:	fa92 f2a2 	rbit	r2, r2
 8004ea2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004ea6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004eaa:	fab2 f282 	clz	r2, r2
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	f042 0220 	orr.w	r2, r2, #32
 8004eb4:	b2d2      	uxtb	r2, r2
 8004eb6:	f002 021f 	and.w	r2, r2, #31
 8004eba:	2101      	movs	r1, #1
 8004ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0af      	beq.n	8004e26 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec6:	4b2d      	ldr	r3, [pc, #180]	; (8004f7c <HAL_RCC_OscConfig+0x5e8>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ed2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	21f8      	movs	r1, #248	; 0xf8
 8004edc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004ee4:	fa91 f1a1 	rbit	r1, r1
 8004ee8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004eec:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004ef0:	fab1 f181 	clz	r1, r1
 8004ef4:	b2c9      	uxtb	r1, r1
 8004ef6:	408b      	lsls	r3, r1
 8004ef8:	4920      	ldr	r1, [pc, #128]	; (8004f7c <HAL_RCC_OscConfig+0x5e8>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	600b      	str	r3, [r1, #0]
 8004efe:	e06c      	b.n	8004fda <HAL_RCC_OscConfig+0x646>
 8004f00:	2301      	movs	r3, #1
 8004f02:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f06:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f0a:	fa93 f3a3 	rbit	r3, r3
 8004f0e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004f12:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f16:	fab3 f383 	clz	r3, r3
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	461a      	mov	r2, r3
 8004f28:	2300      	movs	r3, #0
 8004f2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2c:	f7fc f89a 	bl	8001064 <HAL_GetTick>
 8004f30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f34:	e00a      	b.n	8004f4c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f36:	f7fc f895 	bl	8001064 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d902      	bls.n	8004f4c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	f000 bd5a 	b.w	8005a00 <HAL_RCC_OscConfig+0x106c>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f52:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004f56:	fa93 f3a3 	rbit	r3, r3
 8004f5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f62:	fab3 f383 	clz	r3, r3
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	095b      	lsrs	r3, r3, #5
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	f043 0301 	orr.w	r3, r3, #1
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d104      	bne.n	8004f80 <HAL_RCC_OscConfig+0x5ec>
 8004f76:	4b01      	ldr	r3, [pc, #4]	; (8004f7c <HAL_RCC_OscConfig+0x5e8>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	e015      	b.n	8004fa8 <HAL_RCC_OscConfig+0x614>
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	2302      	movs	r3, #2
 8004f82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f8a:	fa93 f3a3 	rbit	r3, r3
 8004f8e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004f92:	2302      	movs	r3, #2
 8004f94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f98:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f9c:	fa93 f3a3 	rbit	r3, r3
 8004fa0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004fa4:	4bc8      	ldr	r3, [pc, #800]	; (80052c8 <HAL_RCC_OscConfig+0x934>)
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	2202      	movs	r2, #2
 8004faa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004fae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004fb2:	fa92 f2a2 	rbit	r2, r2
 8004fb6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004fba:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004fbe:	fab2 f282 	clz	r2, r2
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	f042 0220 	orr.w	r2, r2, #32
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	f002 021f 	and.w	r2, r2, #31
 8004fce:	2101      	movs	r1, #1
 8004fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1ad      	bne.n	8004f36 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0308 	and.w	r3, r3, #8
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 8110 	beq.w	8005210 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ff4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d079      	beq.n	80050f4 <HAL_RCC_OscConfig+0x760>
 8005000:	2301      	movs	r3, #1
 8005002:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005006:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800500a:	fa93 f3a3 	rbit	r3, r3
 800500e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005012:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005016:	fab3 f383 	clz	r3, r3
 800501a:	b2db      	uxtb	r3, r3
 800501c:	461a      	mov	r2, r3
 800501e:	4bab      	ldr	r3, [pc, #684]	; (80052cc <HAL_RCC_OscConfig+0x938>)
 8005020:	4413      	add	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	461a      	mov	r2, r3
 8005026:	2301      	movs	r3, #1
 8005028:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800502a:	f7fc f81b 	bl	8001064 <HAL_GetTick>
 800502e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005032:	e00a      	b.n	800504a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005034:	f7fc f816 	bl	8001064 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d902      	bls.n	800504a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	f000 bcdb 	b.w	8005a00 <HAL_RCC_OscConfig+0x106c>
 800504a:	2302      	movs	r3, #2
 800504c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005050:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005054:	fa93 f3a3 	rbit	r3, r3
 8005058:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800505c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005060:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005064:	2202      	movs	r2, #2
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800506c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	fa93 f2a3 	rbit	r2, r3
 8005076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800507a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005084:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005088:	2202      	movs	r2, #2
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	fa93 f2a3 	rbit	r2, r3
 800509a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800509e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050a2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a4:	4b88      	ldr	r3, [pc, #544]	; (80052c8 <HAL_RCC_OscConfig+0x934>)
 80050a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80050b0:	2102      	movs	r1, #2
 80050b2:	6019      	str	r1, [r3, #0]
 80050b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	fa93 f1a3 	rbit	r1, r3
 80050c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80050ca:	6019      	str	r1, [r3, #0]
  return result;
 80050cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050d0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	fab3 f383 	clz	r3, r3
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	f003 031f 	and.w	r3, r3, #31
 80050e6:	2101      	movs	r1, #1
 80050e8:	fa01 f303 	lsl.w	r3, r1, r3
 80050ec:	4013      	ands	r3, r2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d0a0      	beq.n	8005034 <HAL_RCC_OscConfig+0x6a0>
 80050f2:	e08d      	b.n	8005210 <HAL_RCC_OscConfig+0x87c>
 80050f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80050fc:	2201      	movs	r2, #1
 80050fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005104:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	fa93 f2a3 	rbit	r2, r3
 800510e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005112:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005116:	601a      	str	r2, [r3, #0]
  return result;
 8005118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800511c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005120:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005122:	fab3 f383 	clz	r3, r3
 8005126:	b2db      	uxtb	r3, r3
 8005128:	461a      	mov	r2, r3
 800512a:	4b68      	ldr	r3, [pc, #416]	; (80052cc <HAL_RCC_OscConfig+0x938>)
 800512c:	4413      	add	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	461a      	mov	r2, r3
 8005132:	2300      	movs	r3, #0
 8005134:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005136:	f7fb ff95 	bl	8001064 <HAL_GetTick>
 800513a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800513e:	e00a      	b.n	8005156 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005140:	f7fb ff90 	bl	8001064 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b02      	cmp	r3, #2
 800514e:	d902      	bls.n	8005156 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	f000 bc55 	b.w	8005a00 <HAL_RCC_OscConfig+0x106c>
 8005156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800515a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800515e:	2202      	movs	r2, #2
 8005160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005166:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	fa93 f2a3 	rbit	r2, r3
 8005170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005174:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800517e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005182:	2202      	movs	r2, #2
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800518a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	fa93 f2a3 	rbit	r2, r3
 8005194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005198:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051a6:	2202      	movs	r2, #2
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	fa93 f2a3 	rbit	r2, r3
 80051b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80051c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051c2:	4b41      	ldr	r3, [pc, #260]	; (80052c8 <HAL_RCC_OscConfig+0x934>)
 80051c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80051ce:	2102      	movs	r1, #2
 80051d0:	6019      	str	r1, [r3, #0]
 80051d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	fa93 f1a3 	rbit	r1, r3
 80051e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80051e8:	6019      	str	r1, [r3, #0]
  return result;
 80051ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ee:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	fab3 f383 	clz	r3, r3
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	f003 031f 	and.w	r3, r3, #31
 8005204:	2101      	movs	r1, #1
 8005206:	fa01 f303 	lsl.w	r3, r1, r3
 800520a:	4013      	ands	r3, r2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d197      	bne.n	8005140 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005214:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 81a1 	beq.w	8005568 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005226:	2300      	movs	r3, #0
 8005228:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800522c:	4b26      	ldr	r3, [pc, #152]	; (80052c8 <HAL_RCC_OscConfig+0x934>)
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d116      	bne.n	8005266 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005238:	4b23      	ldr	r3, [pc, #140]	; (80052c8 <HAL_RCC_OscConfig+0x934>)
 800523a:	69db      	ldr	r3, [r3, #28]
 800523c:	4a22      	ldr	r2, [pc, #136]	; (80052c8 <HAL_RCC_OscConfig+0x934>)
 800523e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005242:	61d3      	str	r3, [r2, #28]
 8005244:	4b20      	ldr	r3, [pc, #128]	; (80052c8 <HAL_RCC_OscConfig+0x934>)
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800524c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005250:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800525a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800525e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005260:	2301      	movs	r3, #1
 8005262:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005266:	4b1a      	ldr	r3, [pc, #104]	; (80052d0 <HAL_RCC_OscConfig+0x93c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526e:	2b00      	cmp	r3, #0
 8005270:	d11a      	bne.n	80052a8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005272:	4b17      	ldr	r3, [pc, #92]	; (80052d0 <HAL_RCC_OscConfig+0x93c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a16      	ldr	r2, [pc, #88]	; (80052d0 <HAL_RCC_OscConfig+0x93c>)
 8005278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800527c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800527e:	f7fb fef1 	bl	8001064 <HAL_GetTick>
 8005282:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005286:	e009      	b.n	800529c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005288:	f7fb feec 	bl	8001064 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b64      	cmp	r3, #100	; 0x64
 8005296:	d901      	bls.n	800529c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e3b1      	b.n	8005a00 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800529c:	4b0c      	ldr	r3, [pc, #48]	; (80052d0 <HAL_RCC_OscConfig+0x93c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d0ef      	beq.n	8005288 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d10d      	bne.n	80052d4 <HAL_RCC_OscConfig+0x940>
 80052b8:	4b03      	ldr	r3, [pc, #12]	; (80052c8 <HAL_RCC_OscConfig+0x934>)
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	4a02      	ldr	r2, [pc, #8]	; (80052c8 <HAL_RCC_OscConfig+0x934>)
 80052be:	f043 0301 	orr.w	r3, r3, #1
 80052c2:	6213      	str	r3, [r2, #32]
 80052c4:	e03c      	b.n	8005340 <HAL_RCC_OscConfig+0x9ac>
 80052c6:	bf00      	nop
 80052c8:	40021000 	.word	0x40021000
 80052cc:	10908120 	.word	0x10908120
 80052d0:	40007000 	.word	0x40007000
 80052d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10c      	bne.n	80052fe <HAL_RCC_OscConfig+0x96a>
 80052e4:	4bc1      	ldr	r3, [pc, #772]	; (80055ec <HAL_RCC_OscConfig+0xc58>)
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	4ac0      	ldr	r2, [pc, #768]	; (80055ec <HAL_RCC_OscConfig+0xc58>)
 80052ea:	f023 0301 	bic.w	r3, r3, #1
 80052ee:	6213      	str	r3, [r2, #32]
 80052f0:	4bbe      	ldr	r3, [pc, #760]	; (80055ec <HAL_RCC_OscConfig+0xc58>)
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	4abd      	ldr	r2, [pc, #756]	; (80055ec <HAL_RCC_OscConfig+0xc58>)
 80052f6:	f023 0304 	bic.w	r3, r3, #4
 80052fa:	6213      	str	r3, [r2, #32]
 80052fc:	e020      	b.n	8005340 <HAL_RCC_OscConfig+0x9ac>
 80052fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005302:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	2b05      	cmp	r3, #5
 800530c:	d10c      	bne.n	8005328 <HAL_RCC_OscConfig+0x994>
 800530e:	4bb7      	ldr	r3, [pc, #732]	; (80055ec <HAL_RCC_OscConfig+0xc58>)
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	4ab6      	ldr	r2, [pc, #728]	; (80055ec <HAL_RCC_OscConfig+0xc58>)
 8005314:	f043 0304 	orr.w	r3, r3, #4
 8005318:	6213      	str	r3, [r2, #32]
 800531a:	4bb4      	ldr	r3, [pc, #720]	; (80055ec <HAL_RCC_OscConfig+0xc58>)
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	4ab3      	ldr	r2, [pc, #716]	; (80055ec <HAL_RCC_OscConfig+0xc58>)
 8005320:	f043 0301 	orr.w	r3, r3, #1
 8005324:	6213      	str	r3, [r2, #32]
 8005326:	e00b      	b.n	8005340 <HAL_RCC_OscConfig+0x9ac>
 8005328:	4bb0      	ldr	r3, [pc, #704]	; (80055ec <HAL_RCC_OscConfig+0xc58>)
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	4aaf      	ldr	r2, [pc, #700]	; (80055ec <HAL_RCC_OscConfig+0xc58>)
 800532e:	f023 0301 	bic.w	r3, r3, #1
 8005332:	6213      	str	r3, [r2, #32]
 8005334:	4bad      	ldr	r3, [pc, #692]	; (80055ec <HAL_RCC_OscConfig+0xc58>)
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	4aac      	ldr	r2, [pc, #688]	; (80055ec <HAL_RCC_OscConfig+0xc58>)
 800533a:	f023 0304 	bic.w	r3, r3, #4
 800533e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005344:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 8081 	beq.w	8005454 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005352:	f7fb fe87 	bl	8001064 <HAL_GetTick>
 8005356:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800535a:	e00b      	b.n	8005374 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800535c:	f7fb fe82 	bl	8001064 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	f241 3288 	movw	r2, #5000	; 0x1388
 800536c:	4293      	cmp	r3, r2
 800536e:	d901      	bls.n	8005374 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e345      	b.n	8005a00 <HAL_RCC_OscConfig+0x106c>
 8005374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005378:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800537c:	2202      	movs	r2, #2
 800537e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005384:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	fa93 f2a3 	rbit	r2, r3
 800538e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005392:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800539c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80053a0:	2202      	movs	r2, #2
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	fa93 f2a3 	rbit	r2, r3
 80053b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053b6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80053ba:	601a      	str	r2, [r3, #0]
  return result;
 80053bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053c0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80053c4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053c6:	fab3 f383 	clz	r3, r3
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	095b      	lsrs	r3, r3, #5
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	f043 0302 	orr.w	r3, r3, #2
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d102      	bne.n	80053e0 <HAL_RCC_OscConfig+0xa4c>
 80053da:	4b84      	ldr	r3, [pc, #528]	; (80055ec <HAL_RCC_OscConfig+0xc58>)
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	e013      	b.n	8005408 <HAL_RCC_OscConfig+0xa74>
 80053e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80053e8:	2202      	movs	r2, #2
 80053ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053f0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	fa93 f2a3 	rbit	r2, r3
 80053fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053fe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	4b79      	ldr	r3, [pc, #484]	; (80055ec <HAL_RCC_OscConfig+0xc58>)
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800540c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005410:	2102      	movs	r1, #2
 8005412:	6011      	str	r1, [r2, #0]
 8005414:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005418:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800541c:	6812      	ldr	r2, [r2, #0]
 800541e:	fa92 f1a2 	rbit	r1, r2
 8005422:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005426:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800542a:	6011      	str	r1, [r2, #0]
  return result;
 800542c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005430:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005434:	6812      	ldr	r2, [r2, #0]
 8005436:	fab2 f282 	clz	r2, r2
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005440:	b2d2      	uxtb	r2, r2
 8005442:	f002 021f 	and.w	r2, r2, #31
 8005446:	2101      	movs	r1, #1
 8005448:	fa01 f202 	lsl.w	r2, r1, r2
 800544c:	4013      	ands	r3, r2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d084      	beq.n	800535c <HAL_RCC_OscConfig+0x9c8>
 8005452:	e07f      	b.n	8005554 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005454:	f7fb fe06 	bl	8001064 <HAL_GetTick>
 8005458:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800545c:	e00b      	b.n	8005476 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800545e:	f7fb fe01 	bl	8001064 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	f241 3288 	movw	r2, #5000	; 0x1388
 800546e:	4293      	cmp	r3, r2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e2c4      	b.n	8005a00 <HAL_RCC_OscConfig+0x106c>
 8005476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800547a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800547e:	2202      	movs	r2, #2
 8005480:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005486:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	fa93 f2a3 	rbit	r2, r3
 8005490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005494:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800549e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80054a2:	2202      	movs	r2, #2
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054aa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	fa93 f2a3 	rbit	r2, r3
 80054b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054b8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80054bc:	601a      	str	r2, [r3, #0]
  return result;
 80054be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054c2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80054c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054c8:	fab3 f383 	clz	r3, r3
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	095b      	lsrs	r3, r3, #5
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	f043 0302 	orr.w	r3, r3, #2
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d102      	bne.n	80054e2 <HAL_RCC_OscConfig+0xb4e>
 80054dc:	4b43      	ldr	r3, [pc, #268]	; (80055ec <HAL_RCC_OscConfig+0xc58>)
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	e013      	b.n	800550a <HAL_RCC_OscConfig+0xb76>
 80054e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80054ea:	2202      	movs	r2, #2
 80054ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054f2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	fa93 f2a3 	rbit	r2, r3
 80054fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005500:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	4b39      	ldr	r3, [pc, #228]	; (80055ec <HAL_RCC_OscConfig+0xc58>)
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800550e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005512:	2102      	movs	r1, #2
 8005514:	6011      	str	r1, [r2, #0]
 8005516:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800551a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800551e:	6812      	ldr	r2, [r2, #0]
 8005520:	fa92 f1a2 	rbit	r1, r2
 8005524:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005528:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800552c:	6011      	str	r1, [r2, #0]
  return result;
 800552e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005532:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005536:	6812      	ldr	r2, [r2, #0]
 8005538:	fab2 f282 	clz	r2, r2
 800553c:	b2d2      	uxtb	r2, r2
 800553e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005542:	b2d2      	uxtb	r2, r2
 8005544:	f002 021f 	and.w	r2, r2, #31
 8005548:	2101      	movs	r1, #1
 800554a:	fa01 f202 	lsl.w	r2, r1, r2
 800554e:	4013      	ands	r3, r2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d184      	bne.n	800545e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005554:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005558:	2b01      	cmp	r3, #1
 800555a:	d105      	bne.n	8005568 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800555c:	4b23      	ldr	r3, [pc, #140]	; (80055ec <HAL_RCC_OscConfig+0xc58>)
 800555e:	69db      	ldr	r3, [r3, #28]
 8005560:	4a22      	ldr	r2, [pc, #136]	; (80055ec <HAL_RCC_OscConfig+0xc58>)
 8005562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005566:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800556c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 8242 	beq.w	80059fe <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800557a:	4b1c      	ldr	r3, [pc, #112]	; (80055ec <HAL_RCC_OscConfig+0xc58>)
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f003 030c 	and.w	r3, r3, #12
 8005582:	2b08      	cmp	r3, #8
 8005584:	f000 8213 	beq.w	80059ae <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800558c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	2b02      	cmp	r3, #2
 8005596:	f040 8162 	bne.w	800585e <HAL_RCC_OscConfig+0xeca>
 800559a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800559e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80055a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055ac:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	fa93 f2a3 	rbit	r2, r3
 80055b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055ba:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80055be:	601a      	str	r2, [r3, #0]
  return result;
 80055c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80055c8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ca:	fab3 f383 	clz	r3, r3
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80055d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	461a      	mov	r2, r3
 80055dc:	2300      	movs	r3, #0
 80055de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e0:	f7fb fd40 	bl	8001064 <HAL_GetTick>
 80055e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055e8:	e00c      	b.n	8005604 <HAL_RCC_OscConfig+0xc70>
 80055ea:	bf00      	nop
 80055ec:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055f0:	f7fb fd38 	bl	8001064 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d901      	bls.n	8005604 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e1fd      	b.n	8005a00 <HAL_RCC_OscConfig+0x106c>
 8005604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005608:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800560c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005610:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005616:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	fa93 f2a3 	rbit	r2, r3
 8005620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005624:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005628:	601a      	str	r2, [r3, #0]
  return result;
 800562a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800562e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005632:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005634:	fab3 f383 	clz	r3, r3
 8005638:	b2db      	uxtb	r3, r3
 800563a:	095b      	lsrs	r3, r3, #5
 800563c:	b2db      	uxtb	r3, r3
 800563e:	f043 0301 	orr.w	r3, r3, #1
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b01      	cmp	r3, #1
 8005646:	d102      	bne.n	800564e <HAL_RCC_OscConfig+0xcba>
 8005648:	4bb0      	ldr	r3, [pc, #704]	; (800590c <HAL_RCC_OscConfig+0xf78>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	e027      	b.n	800569e <HAL_RCC_OscConfig+0xd0a>
 800564e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005652:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005656:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800565a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005660:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	fa93 f2a3 	rbit	r2, r3
 800566a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800566e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005678:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800567c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005686:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	fa93 f2a3 	rbit	r2, r3
 8005690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005694:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	4b9c      	ldr	r3, [pc, #624]	; (800590c <HAL_RCC_OscConfig+0xf78>)
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056a2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80056a6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80056aa:	6011      	str	r1, [r2, #0]
 80056ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056b0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80056b4:	6812      	ldr	r2, [r2, #0]
 80056b6:	fa92 f1a2 	rbit	r1, r2
 80056ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056be:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80056c2:	6011      	str	r1, [r2, #0]
  return result;
 80056c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056c8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80056cc:	6812      	ldr	r2, [r2, #0]
 80056ce:	fab2 f282 	clz	r2, r2
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	f042 0220 	orr.w	r2, r2, #32
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	f002 021f 	and.w	r2, r2, #31
 80056de:	2101      	movs	r1, #1
 80056e0:	fa01 f202 	lsl.w	r2, r1, r2
 80056e4:	4013      	ands	r3, r2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d182      	bne.n	80055f0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056ea:	4b88      	ldr	r3, [pc, #544]	; (800590c <HAL_RCC_OscConfig+0xf78>)
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80056f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80056fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005702:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	430b      	orrs	r3, r1
 800570c:	497f      	ldr	r1, [pc, #508]	; (800590c <HAL_RCC_OscConfig+0xf78>)
 800570e:	4313      	orrs	r3, r2
 8005710:	604b      	str	r3, [r1, #4]
 8005712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005716:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800571a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800571e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005724:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	fa93 f2a3 	rbit	r2, r3
 800572e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005732:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005736:	601a      	str	r2, [r3, #0]
  return result;
 8005738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800573c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005740:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005742:	fab3 f383 	clz	r3, r3
 8005746:	b2db      	uxtb	r3, r3
 8005748:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800574c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	461a      	mov	r2, r3
 8005754:	2301      	movs	r3, #1
 8005756:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005758:	f7fb fc84 	bl	8001064 <HAL_GetTick>
 800575c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005760:	e009      	b.n	8005776 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005762:	f7fb fc7f 	bl	8001064 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e144      	b.n	8005a00 <HAL_RCC_OscConfig+0x106c>
 8005776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800577a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800577e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005782:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005788:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	fa93 f2a3 	rbit	r2, r3
 8005792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005796:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800579a:	601a      	str	r2, [r3, #0]
  return result;
 800579c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057a0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80057a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057a6:	fab3 f383 	clz	r3, r3
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	095b      	lsrs	r3, r3, #5
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	f043 0301 	orr.w	r3, r3, #1
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d102      	bne.n	80057c0 <HAL_RCC_OscConfig+0xe2c>
 80057ba:	4b54      	ldr	r3, [pc, #336]	; (800590c <HAL_RCC_OscConfig+0xf78>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	e027      	b.n	8005810 <HAL_RCC_OscConfig+0xe7c>
 80057c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057c4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80057c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057d2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	fa93 f2a3 	rbit	r2, r3
 80057dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057e0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ea:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80057ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057f8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	fa93 f2a3 	rbit	r2, r3
 8005802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005806:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	4b3f      	ldr	r3, [pc, #252]	; (800590c <HAL_RCC_OscConfig+0xf78>)
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005814:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005818:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800581c:	6011      	str	r1, [r2, #0]
 800581e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005822:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005826:	6812      	ldr	r2, [r2, #0]
 8005828:	fa92 f1a2 	rbit	r1, r2
 800582c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005830:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005834:	6011      	str	r1, [r2, #0]
  return result;
 8005836:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800583a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800583e:	6812      	ldr	r2, [r2, #0]
 8005840:	fab2 f282 	clz	r2, r2
 8005844:	b2d2      	uxtb	r2, r2
 8005846:	f042 0220 	orr.w	r2, r2, #32
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	f002 021f 	and.w	r2, r2, #31
 8005850:	2101      	movs	r1, #1
 8005852:	fa01 f202 	lsl.w	r2, r1, r2
 8005856:	4013      	ands	r3, r2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d082      	beq.n	8005762 <HAL_RCC_OscConfig+0xdce>
 800585c:	e0cf      	b.n	80059fe <HAL_RCC_OscConfig+0x106a>
 800585e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005862:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005866:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800586a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800586c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005870:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	fa93 f2a3 	rbit	r2, r3
 800587a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800587e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005882:	601a      	str	r2, [r3, #0]
  return result;
 8005884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005888:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800588c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800588e:	fab3 f383 	clz	r3, r3
 8005892:	b2db      	uxtb	r3, r3
 8005894:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005898:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	461a      	mov	r2, r3
 80058a0:	2300      	movs	r3, #0
 80058a2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a4:	f7fb fbde 	bl	8001064 <HAL_GetTick>
 80058a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058ac:	e009      	b.n	80058c2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058ae:	f7fb fbd9 	bl	8001064 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e09e      	b.n	8005a00 <HAL_RCC_OscConfig+0x106c>
 80058c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058c6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80058ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058d4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	fa93 f2a3 	rbit	r2, r3
 80058de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058e2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80058e6:	601a      	str	r2, [r3, #0]
  return result;
 80058e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058ec:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80058f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058f2:	fab3 f383 	clz	r3, r3
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	095b      	lsrs	r3, r3, #5
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	f043 0301 	orr.w	r3, r3, #1
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b01      	cmp	r3, #1
 8005904:	d104      	bne.n	8005910 <HAL_RCC_OscConfig+0xf7c>
 8005906:	4b01      	ldr	r3, [pc, #4]	; (800590c <HAL_RCC_OscConfig+0xf78>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	e029      	b.n	8005960 <HAL_RCC_OscConfig+0xfcc>
 800590c:	40021000 	.word	0x40021000
 8005910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005914:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005918:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800591c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800591e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005922:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	fa93 f2a3 	rbit	r2, r3
 800592c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005930:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800593a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800593e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005948:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	fa93 f2a3 	rbit	r2, r3
 8005952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005956:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	4b2b      	ldr	r3, [pc, #172]	; (8005a0c <HAL_RCC_OscConfig+0x1078>)
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005960:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005964:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005968:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800596c:	6011      	str	r1, [r2, #0]
 800596e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005972:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005976:	6812      	ldr	r2, [r2, #0]
 8005978:	fa92 f1a2 	rbit	r1, r2
 800597c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005980:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005984:	6011      	str	r1, [r2, #0]
  return result;
 8005986:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800598a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800598e:	6812      	ldr	r2, [r2, #0]
 8005990:	fab2 f282 	clz	r2, r2
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	f042 0220 	orr.w	r2, r2, #32
 800599a:	b2d2      	uxtb	r2, r2
 800599c:	f002 021f 	and.w	r2, r2, #31
 80059a0:	2101      	movs	r1, #1
 80059a2:	fa01 f202 	lsl.w	r2, r1, r2
 80059a6:	4013      	ands	r3, r2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d180      	bne.n	80058ae <HAL_RCC_OscConfig+0xf1a>
 80059ac:	e027      	b.n	80059fe <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d101      	bne.n	80059c2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e01e      	b.n	8005a00 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80059c2:	4b12      	ldr	r3, [pc, #72]	; (8005a0c <HAL_RCC_OscConfig+0x1078>)
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80059ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80059ce:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80059d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d10b      	bne.n	80059fa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80059e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80059e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80059ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d001      	beq.n	80059fe <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e000      	b.n	8005a00 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	40021000 	.word	0x40021000

08005a10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b09e      	sub	sp, #120	; 0x78
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e162      	b.n	8005cee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a28:	4b90      	ldr	r3, [pc, #576]	; (8005c6c <HAL_RCC_ClockConfig+0x25c>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0307 	and.w	r3, r3, #7
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d910      	bls.n	8005a58 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a36:	4b8d      	ldr	r3, [pc, #564]	; (8005c6c <HAL_RCC_ClockConfig+0x25c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f023 0207 	bic.w	r2, r3, #7
 8005a3e:	498b      	ldr	r1, [pc, #556]	; (8005c6c <HAL_RCC_ClockConfig+0x25c>)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a46:	4b89      	ldr	r3, [pc, #548]	; (8005c6c <HAL_RCC_ClockConfig+0x25c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0307 	and.w	r3, r3, #7
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d001      	beq.n	8005a58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e14a      	b.n	8005cee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d008      	beq.n	8005a76 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a64:	4b82      	ldr	r3, [pc, #520]	; (8005c70 <HAL_RCC_ClockConfig+0x260>)
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	497f      	ldr	r1, [pc, #508]	; (8005c70 <HAL_RCC_ClockConfig+0x260>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 80dc 	beq.w	8005c3c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d13c      	bne.n	8005b06 <HAL_RCC_ClockConfig+0xf6>
 8005a8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a90:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a94:	fa93 f3a3 	rbit	r3, r3
 8005a98:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a9c:	fab3 f383 	clz	r3, r3
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	095b      	lsrs	r3, r3, #5
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	f043 0301 	orr.w	r3, r3, #1
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d102      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0xa6>
 8005ab0:	4b6f      	ldr	r3, [pc, #444]	; (8005c70 <HAL_RCC_ClockConfig+0x260>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	e00f      	b.n	8005ad6 <HAL_RCC_ClockConfig+0xc6>
 8005ab6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005aba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005abc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005abe:	fa93 f3a3 	rbit	r3, r3
 8005ac2:	667b      	str	r3, [r7, #100]	; 0x64
 8005ac4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ac8:	663b      	str	r3, [r7, #96]	; 0x60
 8005aca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005acc:	fa93 f3a3 	rbit	r3, r3
 8005ad0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ad2:	4b67      	ldr	r3, [pc, #412]	; (8005c70 <HAL_RCC_ClockConfig+0x260>)
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ada:	65ba      	str	r2, [r7, #88]	; 0x58
 8005adc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ade:	fa92 f2a2 	rbit	r2, r2
 8005ae2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005ae4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005ae6:	fab2 f282 	clz	r2, r2
 8005aea:	b2d2      	uxtb	r2, r2
 8005aec:	f042 0220 	orr.w	r2, r2, #32
 8005af0:	b2d2      	uxtb	r2, r2
 8005af2:	f002 021f 	and.w	r2, r2, #31
 8005af6:	2101      	movs	r1, #1
 8005af8:	fa01 f202 	lsl.w	r2, r1, r2
 8005afc:	4013      	ands	r3, r2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d17b      	bne.n	8005bfa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e0f3      	b.n	8005cee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d13c      	bne.n	8005b88 <HAL_RCC_ClockConfig+0x178>
 8005b0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b16:	fa93 f3a3 	rbit	r3, r3
 8005b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b1e:	fab3 f383 	clz	r3, r3
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	095b      	lsrs	r3, r3, #5
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	f043 0301 	orr.w	r3, r3, #1
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d102      	bne.n	8005b38 <HAL_RCC_ClockConfig+0x128>
 8005b32:	4b4f      	ldr	r3, [pc, #316]	; (8005c70 <HAL_RCC_ClockConfig+0x260>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	e00f      	b.n	8005b58 <HAL_RCC_ClockConfig+0x148>
 8005b38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b3c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b40:	fa93 f3a3 	rbit	r3, r3
 8005b44:	647b      	str	r3, [r7, #68]	; 0x44
 8005b46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b4a:	643b      	str	r3, [r7, #64]	; 0x40
 8005b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b4e:	fa93 f3a3 	rbit	r3, r3
 8005b52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b54:	4b46      	ldr	r3, [pc, #280]	; (8005c70 <HAL_RCC_ClockConfig+0x260>)
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b5c:	63ba      	str	r2, [r7, #56]	; 0x38
 8005b5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b60:	fa92 f2a2 	rbit	r2, r2
 8005b64:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005b66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b68:	fab2 f282 	clz	r2, r2
 8005b6c:	b2d2      	uxtb	r2, r2
 8005b6e:	f042 0220 	orr.w	r2, r2, #32
 8005b72:	b2d2      	uxtb	r2, r2
 8005b74:	f002 021f 	and.w	r2, r2, #31
 8005b78:	2101      	movs	r1, #1
 8005b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8005b7e:	4013      	ands	r3, r2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d13a      	bne.n	8005bfa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e0b2      	b.n	8005cee <HAL_RCC_ClockConfig+0x2de>
 8005b88:	2302      	movs	r3, #2
 8005b8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8e:	fa93 f3a3 	rbit	r3, r3
 8005b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b96:	fab3 f383 	clz	r3, r3
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	095b      	lsrs	r3, r3, #5
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	f043 0301 	orr.w	r3, r3, #1
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d102      	bne.n	8005bb0 <HAL_RCC_ClockConfig+0x1a0>
 8005baa:	4b31      	ldr	r3, [pc, #196]	; (8005c70 <HAL_RCC_ClockConfig+0x260>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	e00d      	b.n	8005bcc <HAL_RCC_ClockConfig+0x1bc>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb6:	fa93 f3a3 	rbit	r3, r3
 8005bba:	627b      	str	r3, [r7, #36]	; 0x24
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	623b      	str	r3, [r7, #32]
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	fa93 f3a3 	rbit	r3, r3
 8005bc6:	61fb      	str	r3, [r7, #28]
 8005bc8:	4b29      	ldr	r3, [pc, #164]	; (8005c70 <HAL_RCC_ClockConfig+0x260>)
 8005bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bcc:	2202      	movs	r2, #2
 8005bce:	61ba      	str	r2, [r7, #24]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	fa92 f2a2 	rbit	r2, r2
 8005bd6:	617a      	str	r2, [r7, #20]
  return result;
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	fab2 f282 	clz	r2, r2
 8005bde:	b2d2      	uxtb	r2, r2
 8005be0:	f042 0220 	orr.w	r2, r2, #32
 8005be4:	b2d2      	uxtb	r2, r2
 8005be6:	f002 021f 	and.w	r2, r2, #31
 8005bea:	2101      	movs	r1, #1
 8005bec:	fa01 f202 	lsl.w	r2, r1, r2
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e079      	b.n	8005cee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bfa:	4b1d      	ldr	r3, [pc, #116]	; (8005c70 <HAL_RCC_ClockConfig+0x260>)
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f023 0203 	bic.w	r2, r3, #3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	491a      	ldr	r1, [pc, #104]	; (8005c70 <HAL_RCC_ClockConfig+0x260>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c0c:	f7fb fa2a 	bl	8001064 <HAL_GetTick>
 8005c10:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c12:	e00a      	b.n	8005c2a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c14:	f7fb fa26 	bl	8001064 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e061      	b.n	8005cee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c2a:	4b11      	ldr	r3, [pc, #68]	; (8005c70 <HAL_RCC_ClockConfig+0x260>)
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f003 020c 	and.w	r2, r3, #12
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d1eb      	bne.n	8005c14 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c3c:	4b0b      	ldr	r3, [pc, #44]	; (8005c6c <HAL_RCC_ClockConfig+0x25c>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d214      	bcs.n	8005c74 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c4a:	4b08      	ldr	r3, [pc, #32]	; (8005c6c <HAL_RCC_ClockConfig+0x25c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f023 0207 	bic.w	r2, r3, #7
 8005c52:	4906      	ldr	r1, [pc, #24]	; (8005c6c <HAL_RCC_ClockConfig+0x25c>)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c5a:	4b04      	ldr	r3, [pc, #16]	; (8005c6c <HAL_RCC_ClockConfig+0x25c>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d005      	beq.n	8005c74 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e040      	b.n	8005cee <HAL_RCC_ClockConfig+0x2de>
 8005c6c:	40022000 	.word	0x40022000
 8005c70:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d008      	beq.n	8005c92 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c80:	4b1d      	ldr	r3, [pc, #116]	; (8005cf8 <HAL_RCC_ClockConfig+0x2e8>)
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	491a      	ldr	r1, [pc, #104]	; (8005cf8 <HAL_RCC_ClockConfig+0x2e8>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0308 	and.w	r3, r3, #8
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d009      	beq.n	8005cb2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c9e:	4b16      	ldr	r3, [pc, #88]	; (8005cf8 <HAL_RCC_ClockConfig+0x2e8>)
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	4912      	ldr	r1, [pc, #72]	; (8005cf8 <HAL_RCC_ClockConfig+0x2e8>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005cb2:	f000 f829 	bl	8005d08 <HAL_RCC_GetSysClockFreq>
 8005cb6:	4601      	mov	r1, r0
 8005cb8:	4b0f      	ldr	r3, [pc, #60]	; (8005cf8 <HAL_RCC_ClockConfig+0x2e8>)
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cc0:	22f0      	movs	r2, #240	; 0xf0
 8005cc2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	fa92 f2a2 	rbit	r2, r2
 8005cca:	60fa      	str	r2, [r7, #12]
  return result;
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	fab2 f282 	clz	r2, r2
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	40d3      	lsrs	r3, r2
 8005cd6:	4a09      	ldr	r2, [pc, #36]	; (8005cfc <HAL_RCC_ClockConfig+0x2ec>)
 8005cd8:	5cd3      	ldrb	r3, [r2, r3]
 8005cda:	fa21 f303 	lsr.w	r3, r1, r3
 8005cde:	4a08      	ldr	r2, [pc, #32]	; (8005d00 <HAL_RCC_ClockConfig+0x2f0>)
 8005ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005ce2:	4b08      	ldr	r3, [pc, #32]	; (8005d04 <HAL_RCC_ClockConfig+0x2f4>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fb f978 	bl	8000fdc <HAL_InitTick>
  
  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3778      	adds	r7, #120	; 0x78
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	40021000 	.word	0x40021000
 8005cfc:	0800be6c 	.word	0x0800be6c
 8005d00:	20000004 	.word	0x20000004
 8005d04:	20000008 	.word	0x20000008

08005d08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b08b      	sub	sp, #44	; 0x2c
 8005d0c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	61fb      	str	r3, [r7, #28]
 8005d12:	2300      	movs	r3, #0
 8005d14:	61bb      	str	r3, [r7, #24]
 8005d16:	2300      	movs	r3, #0
 8005d18:	627b      	str	r3, [r7, #36]	; 0x24
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005d22:	4b29      	ldr	r3, [pc, #164]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	f003 030c 	and.w	r3, r3, #12
 8005d2e:	2b04      	cmp	r3, #4
 8005d30:	d002      	beq.n	8005d38 <HAL_RCC_GetSysClockFreq+0x30>
 8005d32:	2b08      	cmp	r3, #8
 8005d34:	d003      	beq.n	8005d3e <HAL_RCC_GetSysClockFreq+0x36>
 8005d36:	e03c      	b.n	8005db2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d38:	4b24      	ldr	r3, [pc, #144]	; (8005dcc <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d3a:	623b      	str	r3, [r7, #32]
      break;
 8005d3c:	e03c      	b.n	8005db8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005d44:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005d48:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	fa92 f2a2 	rbit	r2, r2
 8005d50:	607a      	str	r2, [r7, #4]
  return result;
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	fab2 f282 	clz	r2, r2
 8005d58:	b2d2      	uxtb	r2, r2
 8005d5a:	40d3      	lsrs	r3, r2
 8005d5c:	4a1c      	ldr	r2, [pc, #112]	; (8005dd0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005d5e:	5cd3      	ldrb	r3, [r2, r3]
 8005d60:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005d62:	4b19      	ldr	r3, [pc, #100]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d66:	f003 030f 	and.w	r3, r3, #15
 8005d6a:	220f      	movs	r2, #15
 8005d6c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	fa92 f2a2 	rbit	r2, r2
 8005d74:	60fa      	str	r2, [r7, #12]
  return result;
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	fab2 f282 	clz	r2, r2
 8005d7c:	b2d2      	uxtb	r2, r2
 8005d7e:	40d3      	lsrs	r3, r2
 8005d80:	4a14      	ldr	r2, [pc, #80]	; (8005dd4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005d82:	5cd3      	ldrb	r3, [r2, r3]
 8005d84:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d008      	beq.n	8005da2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005d90:	4a0e      	ldr	r2, [pc, #56]	; (8005dcc <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	fb02 f303 	mul.w	r3, r2, r3
 8005d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005da0:	e004      	b.n	8005dac <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	4a0c      	ldr	r2, [pc, #48]	; (8005dd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005da6:	fb02 f303 	mul.w	r3, r2, r3
 8005daa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	623b      	str	r3, [r7, #32]
      break;
 8005db0:	e002      	b.n	8005db8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005db2:	4b06      	ldr	r3, [pc, #24]	; (8005dcc <HAL_RCC_GetSysClockFreq+0xc4>)
 8005db4:	623b      	str	r3, [r7, #32]
      break;
 8005db6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005db8:	6a3b      	ldr	r3, [r7, #32]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	372c      	adds	r7, #44	; 0x2c
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	40021000 	.word	0x40021000
 8005dcc:	007a1200 	.word	0x007a1200
 8005dd0:	0800be84 	.word	0x0800be84
 8005dd4:	0800be94 	.word	0x0800be94
 8005dd8:	003d0900 	.word	0x003d0900

08005ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005de0:	4b03      	ldr	r3, [pc, #12]	; (8005df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005de2:	681b      	ldr	r3, [r3, #0]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	20000004 	.word	0x20000004

08005df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005dfa:	f7ff ffef 	bl	8005ddc <HAL_RCC_GetHCLKFreq>
 8005dfe:	4601      	mov	r1, r0
 8005e00:	4b0b      	ldr	r3, [pc, #44]	; (8005e30 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005e08:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005e0c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	fa92 f2a2 	rbit	r2, r2
 8005e14:	603a      	str	r2, [r7, #0]
  return result;
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	fab2 f282 	clz	r2, r2
 8005e1c:	b2d2      	uxtb	r2, r2
 8005e1e:	40d3      	lsrs	r3, r2
 8005e20:	4a04      	ldr	r2, [pc, #16]	; (8005e34 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005e22:	5cd3      	ldrb	r3, [r2, r3]
 8005e24:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	40021000 	.word	0x40021000
 8005e34:	0800be7c 	.word	0x0800be7c

08005e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b092      	sub	sp, #72	; 0x48
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e40:	2300      	movs	r3, #0
 8005e42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	f000 80d4 	beq.w	8006004 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e5c:	4b4e      	ldr	r3, [pc, #312]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10e      	bne.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e68:	4b4b      	ldr	r3, [pc, #300]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	4a4a      	ldr	r2, [pc, #296]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e72:	61d3      	str	r3, [r2, #28]
 8005e74:	4b48      	ldr	r3, [pc, #288]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e7c:	60bb      	str	r3, [r7, #8]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e80:	2301      	movs	r3, #1
 8005e82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e86:	4b45      	ldr	r3, [pc, #276]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d118      	bne.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e92:	4b42      	ldr	r3, [pc, #264]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a41      	ldr	r2, [pc, #260]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e9c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e9e:	f7fb f8e1 	bl	8001064 <HAL_GetTick>
 8005ea2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ea4:	e008      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ea6:	f7fb f8dd 	bl	8001064 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b64      	cmp	r3, #100	; 0x64
 8005eb2:	d901      	bls.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e169      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eb8:	4b38      	ldr	r3, [pc, #224]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d0f0      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ec4:	4b34      	ldr	r3, [pc, #208]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f000 8084 	beq.w	8005fde <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ede:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d07c      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ee4:	4b2c      	ldr	r3, [pc, #176]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ef2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef6:	fa93 f3a3 	rbit	r3, r3
 8005efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005efe:	fab3 f383 	clz	r3, r3
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	461a      	mov	r2, r3
 8005f06:	4b26      	ldr	r3, [pc, #152]	; (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f08:	4413      	add	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	2301      	movs	r3, #1
 8005f10:	6013      	str	r3, [r2, #0]
 8005f12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1a:	fa93 f3a3 	rbit	r3, r3
 8005f1e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f22:	fab3 f383 	clz	r3, r3
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	461a      	mov	r2, r3
 8005f2a:	4b1d      	ldr	r3, [pc, #116]	; (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f2c:	4413      	add	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	461a      	mov	r2, r3
 8005f32:	2300      	movs	r3, #0
 8005f34:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005f36:	4a18      	ldr	r2, [pc, #96]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f3a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d04b      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f46:	f7fb f88d 	bl	8001064 <HAL_GetTick>
 8005f4a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f4c:	e00a      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f4e:	f7fb f889 	bl	8001064 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d901      	bls.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e113      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005f64:	2302      	movs	r3, #2
 8005f66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6a:	fa93 f3a3 	rbit	r3, r3
 8005f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f70:	2302      	movs	r3, #2
 8005f72:	623b      	str	r3, [r7, #32]
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	fa93 f3a3 	rbit	r3, r3
 8005f7a:	61fb      	str	r3, [r7, #28]
  return result;
 8005f7c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f7e:	fab3 f383 	clz	r3, r3
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	095b      	lsrs	r3, r3, #5
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	f043 0302 	orr.w	r3, r3, #2
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d108      	bne.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005f92:	4b01      	ldr	r3, [pc, #4]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	e00d      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	40007000 	.word	0x40007000
 8005fa0:	10908100 	.word	0x10908100
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	fa93 f3a3 	rbit	r3, r3
 8005fae:	617b      	str	r3, [r7, #20]
 8005fb0:	4b78      	ldr	r3, [pc, #480]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	613a      	str	r2, [r7, #16]
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	fa92 f2a2 	rbit	r2, r2
 8005fbe:	60fa      	str	r2, [r7, #12]
  return result;
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	fab2 f282 	clz	r2, r2
 8005fc6:	b2d2      	uxtb	r2, r2
 8005fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fcc:	b2d2      	uxtb	r2, r2
 8005fce:	f002 021f 	and.w	r2, r2, #31
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8005fd8:	4013      	ands	r3, r2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d0b7      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005fde:	4b6d      	ldr	r3, [pc, #436]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	496a      	ldr	r1, [pc, #424]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005ff0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d105      	bne.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ff8:	4b66      	ldr	r3, [pc, #408]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	4a65      	ldr	r2, [pc, #404]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ffe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006002:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	d008      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006010:	4b60      	ldr	r3, [pc, #384]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006014:	f023 0203 	bic.w	r2, r3, #3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	495d      	ldr	r1, [pc, #372]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800601e:	4313      	orrs	r3, r2
 8006020:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d008      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800602e:	4b59      	ldr	r3, [pc, #356]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006032:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	4956      	ldr	r1, [pc, #344]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800603c:	4313      	orrs	r3, r2
 800603e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0304 	and.w	r3, r3, #4
 8006048:	2b00      	cmp	r3, #0
 800604a:	d008      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800604c:	4b51      	ldr	r3, [pc, #324]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800604e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006050:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	494e      	ldr	r1, [pc, #312]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800605a:	4313      	orrs	r3, r2
 800605c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0320 	and.w	r3, r3, #32
 8006066:	2b00      	cmp	r3, #0
 8006068:	d008      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800606a:	4b4a      	ldr	r3, [pc, #296]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800606c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606e:	f023 0210 	bic.w	r2, r3, #16
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	4947      	ldr	r1, [pc, #284]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006078:	4313      	orrs	r3, r2
 800607a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d008      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006088:	4b42      	ldr	r3, [pc, #264]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006094:	493f      	ldr	r1, [pc, #252]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006096:	4313      	orrs	r3, r2
 8006098:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d008      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060a6:	4b3b      	ldr	r3, [pc, #236]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060aa:	f023 0220 	bic.w	r2, r3, #32
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	4938      	ldr	r1, [pc, #224]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0308 	and.w	r3, r3, #8
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d008      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80060c4:	4b33      	ldr	r3, [pc, #204]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	4930      	ldr	r1, [pc, #192]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0310 	and.w	r3, r3, #16
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d008      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80060e2:	4b2c      	ldr	r3, [pc, #176]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	4929      	ldr	r1, [pc, #164]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d008      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006100:	4b24      	ldr	r3, [pc, #144]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610c:	4921      	ldr	r1, [pc, #132]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800610e:	4313      	orrs	r3, r2
 8006110:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800611a:	2b00      	cmp	r3, #0
 800611c:	d008      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800611e:	4b1d      	ldr	r3, [pc, #116]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006122:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612a:	491a      	ldr	r1, [pc, #104]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800612c:	4313      	orrs	r3, r2
 800612e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006138:	2b00      	cmp	r3, #0
 800613a:	d008      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800613c:	4b15      	ldr	r3, [pc, #84]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800613e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006140:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006148:	4912      	ldr	r1, [pc, #72]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800614a:	4313      	orrs	r3, r2
 800614c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d008      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800615a:	4b0e      	ldr	r3, [pc, #56]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800615c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006166:	490b      	ldr	r1, [pc, #44]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006168:	4313      	orrs	r3, r2
 800616a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d008      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006178:	4b06      	ldr	r3, [pc, #24]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800617a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006184:	4903      	ldr	r1, [pc, #12]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006186:	4313      	orrs	r3, r2
 8006188:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3748      	adds	r7, #72	; 0x48
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	40021000 	.word	0x40021000

08006198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e049      	b.n	800623e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d106      	bne.n	80061c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7fa fdc4 	bl	8000d4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	3304      	adds	r3, #4
 80061d4:	4619      	mov	r1, r3
 80061d6:	4610      	mov	r0, r2
 80061d8:	f000 fd6a 	bl	8006cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
	...

08006248 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b01      	cmp	r3, #1
 800625a:	d001      	beq.n	8006260 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e04a      	b.n	80062f6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68da      	ldr	r2, [r3, #12]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f042 0201 	orr.w	r2, r2, #1
 8006276:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a21      	ldr	r2, [pc, #132]	; (8006304 <HAL_TIM_Base_Start_IT+0xbc>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d018      	beq.n	80062b4 <HAL_TIM_Base_Start_IT+0x6c>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800628a:	d013      	beq.n	80062b4 <HAL_TIM_Base_Start_IT+0x6c>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a1d      	ldr	r2, [pc, #116]	; (8006308 <HAL_TIM_Base_Start_IT+0xc0>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d00e      	beq.n	80062b4 <HAL_TIM_Base_Start_IT+0x6c>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a1c      	ldr	r2, [pc, #112]	; (800630c <HAL_TIM_Base_Start_IT+0xc4>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d009      	beq.n	80062b4 <HAL_TIM_Base_Start_IT+0x6c>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a1a      	ldr	r2, [pc, #104]	; (8006310 <HAL_TIM_Base_Start_IT+0xc8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d004      	beq.n	80062b4 <HAL_TIM_Base_Start_IT+0x6c>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a19      	ldr	r2, [pc, #100]	; (8006314 <HAL_TIM_Base_Start_IT+0xcc>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d115      	bne.n	80062e0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	689a      	ldr	r2, [r3, #8]
 80062ba:	4b17      	ldr	r3, [pc, #92]	; (8006318 <HAL_TIM_Base_Start_IT+0xd0>)
 80062bc:	4013      	ands	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2b06      	cmp	r3, #6
 80062c4:	d015      	beq.n	80062f2 <HAL_TIM_Base_Start_IT+0xaa>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062cc:	d011      	beq.n	80062f2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f042 0201 	orr.w	r2, r2, #1
 80062dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062de:	e008      	b.n	80062f2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0201 	orr.w	r2, r2, #1
 80062ee:	601a      	str	r2, [r3, #0]
 80062f0:	e000      	b.n	80062f4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	40012c00 	.word	0x40012c00
 8006308:	40000400 	.word	0x40000400
 800630c:	40000800 	.word	0x40000800
 8006310:	40013400 	.word	0x40013400
 8006314:	40014000 	.word	0x40014000
 8006318:	00010007 	.word	0x00010007

0800631c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e049      	b.n	80063c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d106      	bne.n	8006348 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f841 	bl	80063ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	3304      	adds	r3, #4
 8006358:	4619      	mov	r1, r3
 800635a:	4610      	mov	r0, r2
 800635c:	f000 fca8 	bl	8006cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b083      	sub	sp, #12
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063d2:	bf00      	nop
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
	...

080063e0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d109      	bne.n	8006408 <HAL_TIM_PWM_Start_IT+0x28>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	bf14      	ite	ne
 8006400:	2301      	movne	r3, #1
 8006402:	2300      	moveq	r3, #0
 8006404:	b2db      	uxtb	r3, r3
 8006406:	e03c      	b.n	8006482 <HAL_TIM_PWM_Start_IT+0xa2>
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	2b04      	cmp	r3, #4
 800640c:	d109      	bne.n	8006422 <HAL_TIM_PWM_Start_IT+0x42>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b01      	cmp	r3, #1
 8006418:	bf14      	ite	ne
 800641a:	2301      	movne	r3, #1
 800641c:	2300      	moveq	r3, #0
 800641e:	b2db      	uxtb	r3, r3
 8006420:	e02f      	b.n	8006482 <HAL_TIM_PWM_Start_IT+0xa2>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b08      	cmp	r3, #8
 8006426:	d109      	bne.n	800643c <HAL_TIM_PWM_Start_IT+0x5c>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b01      	cmp	r3, #1
 8006432:	bf14      	ite	ne
 8006434:	2301      	movne	r3, #1
 8006436:	2300      	moveq	r3, #0
 8006438:	b2db      	uxtb	r3, r3
 800643a:	e022      	b.n	8006482 <HAL_TIM_PWM_Start_IT+0xa2>
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	2b0c      	cmp	r3, #12
 8006440:	d109      	bne.n	8006456 <HAL_TIM_PWM_Start_IT+0x76>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b01      	cmp	r3, #1
 800644c:	bf14      	ite	ne
 800644e:	2301      	movne	r3, #1
 8006450:	2300      	moveq	r3, #0
 8006452:	b2db      	uxtb	r3, r3
 8006454:	e015      	b.n	8006482 <HAL_TIM_PWM_Start_IT+0xa2>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b10      	cmp	r3, #16
 800645a:	d109      	bne.n	8006470 <HAL_TIM_PWM_Start_IT+0x90>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b01      	cmp	r3, #1
 8006466:	bf14      	ite	ne
 8006468:	2301      	movne	r3, #1
 800646a:	2300      	moveq	r3, #0
 800646c:	b2db      	uxtb	r3, r3
 800646e:	e008      	b.n	8006482 <HAL_TIM_PWM_Start_IT+0xa2>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b01      	cmp	r3, #1
 800647a:	bf14      	ite	ne
 800647c:	2301      	movne	r3, #1
 800647e:	2300      	moveq	r3, #0
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e0e2      	b.n	8006650 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d104      	bne.n	800649a <HAL_TIM_PWM_Start_IT+0xba>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2202      	movs	r2, #2
 8006494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006498:	e023      	b.n	80064e2 <HAL_TIM_PWM_Start_IT+0x102>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b04      	cmp	r3, #4
 800649e:	d104      	bne.n	80064aa <HAL_TIM_PWM_Start_IT+0xca>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064a8:	e01b      	b.n	80064e2 <HAL_TIM_PWM_Start_IT+0x102>
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	2b08      	cmp	r3, #8
 80064ae:	d104      	bne.n	80064ba <HAL_TIM_PWM_Start_IT+0xda>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064b8:	e013      	b.n	80064e2 <HAL_TIM_PWM_Start_IT+0x102>
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2b0c      	cmp	r3, #12
 80064be:	d104      	bne.n	80064ca <HAL_TIM_PWM_Start_IT+0xea>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064c8:	e00b      	b.n	80064e2 <HAL_TIM_PWM_Start_IT+0x102>
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	2b10      	cmp	r3, #16
 80064ce:	d104      	bne.n	80064da <HAL_TIM_PWM_Start_IT+0xfa>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064d8:	e003      	b.n	80064e2 <HAL_TIM_PWM_Start_IT+0x102>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2202      	movs	r2, #2
 80064de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2b0c      	cmp	r3, #12
 80064e6:	d841      	bhi.n	800656c <HAL_TIM_PWM_Start_IT+0x18c>
 80064e8:	a201      	add	r2, pc, #4	; (adr r2, 80064f0 <HAL_TIM_PWM_Start_IT+0x110>)
 80064ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ee:	bf00      	nop
 80064f0:	08006525 	.word	0x08006525
 80064f4:	0800656d 	.word	0x0800656d
 80064f8:	0800656d 	.word	0x0800656d
 80064fc:	0800656d 	.word	0x0800656d
 8006500:	08006537 	.word	0x08006537
 8006504:	0800656d 	.word	0x0800656d
 8006508:	0800656d 	.word	0x0800656d
 800650c:	0800656d 	.word	0x0800656d
 8006510:	08006549 	.word	0x08006549
 8006514:	0800656d 	.word	0x0800656d
 8006518:	0800656d 	.word	0x0800656d
 800651c:	0800656d 	.word	0x0800656d
 8006520:	0800655b 	.word	0x0800655b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68da      	ldr	r2, [r3, #12]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0202 	orr.w	r2, r2, #2
 8006532:	60da      	str	r2, [r3, #12]
      break;
 8006534:	e01d      	b.n	8006572 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68da      	ldr	r2, [r3, #12]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f042 0204 	orr.w	r2, r2, #4
 8006544:	60da      	str	r2, [r3, #12]
      break;
 8006546:	e014      	b.n	8006572 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f042 0208 	orr.w	r2, r2, #8
 8006556:	60da      	str	r2, [r3, #12]
      break;
 8006558:	e00b      	b.n	8006572 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68da      	ldr	r2, [r3, #12]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f042 0210 	orr.w	r2, r2, #16
 8006568:	60da      	str	r2, [r3, #12]
      break;
 800656a:	e002      	b.n	8006572 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	73fb      	strb	r3, [r7, #15]
      break;
 8006570:	bf00      	nop
  }

  if (status == HAL_OK)
 8006572:	7bfb      	ldrb	r3, [r7, #15]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d16a      	bne.n	800664e <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2201      	movs	r2, #1
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	4618      	mov	r0, r3
 8006582:	f000 ff95 	bl	80074b0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a33      	ldr	r2, [pc, #204]	; (8006658 <HAL_TIM_PWM_Start_IT+0x278>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d013      	beq.n	80065b8 <HAL_TIM_PWM_Start_IT+0x1d8>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a31      	ldr	r2, [pc, #196]	; (800665c <HAL_TIM_PWM_Start_IT+0x27c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d00e      	beq.n	80065b8 <HAL_TIM_PWM_Start_IT+0x1d8>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a30      	ldr	r2, [pc, #192]	; (8006660 <HAL_TIM_PWM_Start_IT+0x280>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d009      	beq.n	80065b8 <HAL_TIM_PWM_Start_IT+0x1d8>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a2e      	ldr	r2, [pc, #184]	; (8006664 <HAL_TIM_PWM_Start_IT+0x284>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d004      	beq.n	80065b8 <HAL_TIM_PWM_Start_IT+0x1d8>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a2d      	ldr	r2, [pc, #180]	; (8006668 <HAL_TIM_PWM_Start_IT+0x288>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d101      	bne.n	80065bc <HAL_TIM_PWM_Start_IT+0x1dc>
 80065b8:	2301      	movs	r3, #1
 80065ba:	e000      	b.n	80065be <HAL_TIM_PWM_Start_IT+0x1de>
 80065bc:	2300      	movs	r3, #0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d007      	beq.n	80065d2 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a20      	ldr	r2, [pc, #128]	; (8006658 <HAL_TIM_PWM_Start_IT+0x278>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d018      	beq.n	800660e <HAL_TIM_PWM_Start_IT+0x22e>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e4:	d013      	beq.n	800660e <HAL_TIM_PWM_Start_IT+0x22e>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a20      	ldr	r2, [pc, #128]	; (800666c <HAL_TIM_PWM_Start_IT+0x28c>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d00e      	beq.n	800660e <HAL_TIM_PWM_Start_IT+0x22e>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a1e      	ldr	r2, [pc, #120]	; (8006670 <HAL_TIM_PWM_Start_IT+0x290>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d009      	beq.n	800660e <HAL_TIM_PWM_Start_IT+0x22e>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a17      	ldr	r2, [pc, #92]	; (800665c <HAL_TIM_PWM_Start_IT+0x27c>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d004      	beq.n	800660e <HAL_TIM_PWM_Start_IT+0x22e>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a15      	ldr	r2, [pc, #84]	; (8006660 <HAL_TIM_PWM_Start_IT+0x280>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d115      	bne.n	800663a <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	4b17      	ldr	r3, [pc, #92]	; (8006674 <HAL_TIM_PWM_Start_IT+0x294>)
 8006616:	4013      	ands	r3, r2
 8006618:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	2b06      	cmp	r3, #6
 800661e:	d015      	beq.n	800664c <HAL_TIM_PWM_Start_IT+0x26c>
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006626:	d011      	beq.n	800664c <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f042 0201 	orr.w	r2, r2, #1
 8006636:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006638:	e008      	b.n	800664c <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f042 0201 	orr.w	r2, r2, #1
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	e000      	b.n	800664e <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800664c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800664e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	40012c00 	.word	0x40012c00
 800665c:	40013400 	.word	0x40013400
 8006660:	40014000 	.word	0x40014000
 8006664:	40014400 	.word	0x40014400
 8006668:	40014800 	.word	0x40014800
 800666c:	40000400 	.word	0x40000400
 8006670:	40000800 	.word	0x40000800
 8006674:	00010007 	.word	0x00010007

08006678 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b02      	cmp	r3, #2
 800668c:	d122      	bne.n	80066d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b02      	cmp	r3, #2
 800669a:	d11b      	bne.n	80066d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f06f 0202 	mvn.w	r2, #2
 80066a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	f003 0303 	and.w	r3, r3, #3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d003      	beq.n	80066c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 fae3 	bl	8006c86 <HAL_TIM_IC_CaptureCallback>
 80066c0:	e005      	b.n	80066ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fad5 	bl	8006c72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7f9 fdf5 	bl	80002b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	f003 0304 	and.w	r3, r3, #4
 80066de:	2b04      	cmp	r3, #4
 80066e0:	d122      	bne.n	8006728 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b04      	cmp	r3, #4
 80066ee:	d11b      	bne.n	8006728 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f06f 0204 	mvn.w	r2, #4
 80066f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2202      	movs	r2, #2
 80066fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 fab9 	bl	8006c86 <HAL_TIM_IC_CaptureCallback>
 8006714:	e005      	b.n	8006722 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 faab 	bl	8006c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7f9 fdcb 	bl	80002b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	f003 0308 	and.w	r3, r3, #8
 8006732:	2b08      	cmp	r3, #8
 8006734:	d122      	bne.n	800677c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	f003 0308 	and.w	r3, r3, #8
 8006740:	2b08      	cmp	r3, #8
 8006742:	d11b      	bne.n	800677c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f06f 0208 	mvn.w	r2, #8
 800674c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2204      	movs	r2, #4
 8006752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	69db      	ldr	r3, [r3, #28]
 800675a:	f003 0303 	and.w	r3, r3, #3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fa8f 	bl	8006c86 <HAL_TIM_IC_CaptureCallback>
 8006768:	e005      	b.n	8006776 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fa81 	bl	8006c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f7f9 fda1 	bl	80002b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	f003 0310 	and.w	r3, r3, #16
 8006786:	2b10      	cmp	r3, #16
 8006788:	d122      	bne.n	80067d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	f003 0310 	and.w	r3, r3, #16
 8006794:	2b10      	cmp	r3, #16
 8006796:	d11b      	bne.n	80067d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f06f 0210 	mvn.w	r2, #16
 80067a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2208      	movs	r2, #8
 80067a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fa65 	bl	8006c86 <HAL_TIM_IC_CaptureCallback>
 80067bc:	e005      	b.n	80067ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fa57 	bl	8006c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f7f9 fd77 	bl	80002b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d10e      	bne.n	80067fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d107      	bne.n	80067fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f06f 0201 	mvn.w	r2, #1
 80067f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7f9 fcee 	bl	80001d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006806:	2b80      	cmp	r3, #128	; 0x80
 8006808:	d10e      	bne.n	8006828 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006814:	2b80      	cmp	r3, #128	; 0x80
 8006816:	d107      	bne.n	8006828 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fef4 	bl	8007610 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006836:	d10e      	bne.n	8006856 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006842:	2b80      	cmp	r3, #128	; 0x80
 8006844:	d107      	bne.n	8006856 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800684e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 fee7 	bl	8007624 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006860:	2b40      	cmp	r3, #64	; 0x40
 8006862:	d10e      	bne.n	8006882 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800686e:	2b40      	cmp	r3, #64	; 0x40
 8006870:	d107      	bne.n	8006882 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800687a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fa0c 	bl	8006c9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	f003 0320 	and.w	r3, r3, #32
 800688c:	2b20      	cmp	r3, #32
 800688e:	d10e      	bne.n	80068ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	f003 0320 	and.w	r3, r3, #32
 800689a:	2b20      	cmp	r3, #32
 800689c:	d107      	bne.n	80068ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f06f 0220 	mvn.w	r2, #32
 80068a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fea7 	bl	80075fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068ae:	bf00      	nop
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
	...

080068b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068c4:	2300      	movs	r3, #0
 80068c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d101      	bne.n	80068d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80068d2:	2302      	movs	r3, #2
 80068d4:	e0ff      	b.n	8006ad6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b14      	cmp	r3, #20
 80068e2:	f200 80f0 	bhi.w	8006ac6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80068e6:	a201      	add	r2, pc, #4	; (adr r2, 80068ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80068e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ec:	08006941 	.word	0x08006941
 80068f0:	08006ac7 	.word	0x08006ac7
 80068f4:	08006ac7 	.word	0x08006ac7
 80068f8:	08006ac7 	.word	0x08006ac7
 80068fc:	08006981 	.word	0x08006981
 8006900:	08006ac7 	.word	0x08006ac7
 8006904:	08006ac7 	.word	0x08006ac7
 8006908:	08006ac7 	.word	0x08006ac7
 800690c:	080069c3 	.word	0x080069c3
 8006910:	08006ac7 	.word	0x08006ac7
 8006914:	08006ac7 	.word	0x08006ac7
 8006918:	08006ac7 	.word	0x08006ac7
 800691c:	08006a03 	.word	0x08006a03
 8006920:	08006ac7 	.word	0x08006ac7
 8006924:	08006ac7 	.word	0x08006ac7
 8006928:	08006ac7 	.word	0x08006ac7
 800692c:	08006a45 	.word	0x08006a45
 8006930:	08006ac7 	.word	0x08006ac7
 8006934:	08006ac7 	.word	0x08006ac7
 8006938:	08006ac7 	.word	0x08006ac7
 800693c:	08006a85 	.word	0x08006a85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68b9      	ldr	r1, [r7, #8]
 8006946:	4618      	mov	r0, r3
 8006948:	f000 fa42 	bl	8006dd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	699a      	ldr	r2, [r3, #24]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f042 0208 	orr.w	r2, r2, #8
 800695a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699a      	ldr	r2, [r3, #24]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f022 0204 	bic.w	r2, r2, #4
 800696a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6999      	ldr	r1, [r3, #24]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	691a      	ldr	r2, [r3, #16]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	430a      	orrs	r2, r1
 800697c:	619a      	str	r2, [r3, #24]
      break;
 800697e:	e0a5      	b.n	8006acc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68b9      	ldr	r1, [r7, #8]
 8006986:	4618      	mov	r0, r3
 8006988:	f000 fab2 	bl	8006ef0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	699a      	ldr	r2, [r3, #24]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800699a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	699a      	ldr	r2, [r3, #24]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6999      	ldr	r1, [r3, #24]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	021a      	lsls	r2, r3, #8
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	430a      	orrs	r2, r1
 80069be:	619a      	str	r2, [r3, #24]
      break;
 80069c0:	e084      	b.n	8006acc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68b9      	ldr	r1, [r7, #8]
 80069c8:	4618      	mov	r0, r3
 80069ca:	f000 fb1b 	bl	8007004 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	69da      	ldr	r2, [r3, #28]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f042 0208 	orr.w	r2, r2, #8
 80069dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	69da      	ldr	r2, [r3, #28]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f022 0204 	bic.w	r2, r2, #4
 80069ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	69d9      	ldr	r1, [r3, #28]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	691a      	ldr	r2, [r3, #16]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	430a      	orrs	r2, r1
 80069fe:	61da      	str	r2, [r3, #28]
      break;
 8006a00:	e064      	b.n	8006acc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68b9      	ldr	r1, [r7, #8]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 fb83 	bl	8007114 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	69da      	ldr	r2, [r3, #28]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	69da      	ldr	r2, [r3, #28]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	69d9      	ldr	r1, [r3, #28]
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	021a      	lsls	r2, r3, #8
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	61da      	str	r2, [r3, #28]
      break;
 8006a42:	e043      	b.n	8006acc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68b9      	ldr	r1, [r7, #8]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 fbcc 	bl	80071e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f042 0208 	orr.w	r2, r2, #8
 8006a5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f022 0204 	bic.w	r2, r2, #4
 8006a6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	691a      	ldr	r2, [r3, #16]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a82:	e023      	b.n	8006acc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68b9      	ldr	r1, [r7, #8]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 fc10 	bl	80072b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	021a      	lsls	r2, r3, #8
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006ac4:	e002      	b.n	8006acc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	75fb      	strb	r3, [r7, #23]
      break;
 8006aca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop

08006ae0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006aea:	2300      	movs	r3, #0
 8006aec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d101      	bne.n	8006afc <HAL_TIM_ConfigClockSource+0x1c>
 8006af8:	2302      	movs	r3, #2
 8006afa:	e0b6      	b.n	8006c6a <HAL_TIM_ConfigClockSource+0x18a>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2202      	movs	r2, #2
 8006b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b38:	d03e      	beq.n	8006bb8 <HAL_TIM_ConfigClockSource+0xd8>
 8006b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b3e:	f200 8087 	bhi.w	8006c50 <HAL_TIM_ConfigClockSource+0x170>
 8006b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b46:	f000 8086 	beq.w	8006c56 <HAL_TIM_ConfigClockSource+0x176>
 8006b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b4e:	d87f      	bhi.n	8006c50 <HAL_TIM_ConfigClockSource+0x170>
 8006b50:	2b70      	cmp	r3, #112	; 0x70
 8006b52:	d01a      	beq.n	8006b8a <HAL_TIM_ConfigClockSource+0xaa>
 8006b54:	2b70      	cmp	r3, #112	; 0x70
 8006b56:	d87b      	bhi.n	8006c50 <HAL_TIM_ConfigClockSource+0x170>
 8006b58:	2b60      	cmp	r3, #96	; 0x60
 8006b5a:	d050      	beq.n	8006bfe <HAL_TIM_ConfigClockSource+0x11e>
 8006b5c:	2b60      	cmp	r3, #96	; 0x60
 8006b5e:	d877      	bhi.n	8006c50 <HAL_TIM_ConfigClockSource+0x170>
 8006b60:	2b50      	cmp	r3, #80	; 0x50
 8006b62:	d03c      	beq.n	8006bde <HAL_TIM_ConfigClockSource+0xfe>
 8006b64:	2b50      	cmp	r3, #80	; 0x50
 8006b66:	d873      	bhi.n	8006c50 <HAL_TIM_ConfigClockSource+0x170>
 8006b68:	2b40      	cmp	r3, #64	; 0x40
 8006b6a:	d058      	beq.n	8006c1e <HAL_TIM_ConfigClockSource+0x13e>
 8006b6c:	2b40      	cmp	r3, #64	; 0x40
 8006b6e:	d86f      	bhi.n	8006c50 <HAL_TIM_ConfigClockSource+0x170>
 8006b70:	2b30      	cmp	r3, #48	; 0x30
 8006b72:	d064      	beq.n	8006c3e <HAL_TIM_ConfigClockSource+0x15e>
 8006b74:	2b30      	cmp	r3, #48	; 0x30
 8006b76:	d86b      	bhi.n	8006c50 <HAL_TIM_ConfigClockSource+0x170>
 8006b78:	2b20      	cmp	r3, #32
 8006b7a:	d060      	beq.n	8006c3e <HAL_TIM_ConfigClockSource+0x15e>
 8006b7c:	2b20      	cmp	r3, #32
 8006b7e:	d867      	bhi.n	8006c50 <HAL_TIM_ConfigClockSource+0x170>
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d05c      	beq.n	8006c3e <HAL_TIM_ConfigClockSource+0x15e>
 8006b84:	2b10      	cmp	r3, #16
 8006b86:	d05a      	beq.n	8006c3e <HAL_TIM_ConfigClockSource+0x15e>
 8006b88:	e062      	b.n	8006c50 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b9a:	f000 fc69 	bl	8007470 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006bac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	609a      	str	r2, [r3, #8]
      break;
 8006bb6:	e04f      	b.n	8006c58 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006bc8:	f000 fc52 	bl	8007470 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	689a      	ldr	r2, [r3, #8]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bda:	609a      	str	r2, [r3, #8]
      break;
 8006bdc:	e03c      	b.n	8006c58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bea:	461a      	mov	r2, r3
 8006bec:	f000 fbc6 	bl	800737c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2150      	movs	r1, #80	; 0x50
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 fc1f 	bl	800743a <TIM_ITRx_SetConfig>
      break;
 8006bfc:	e02c      	b.n	8006c58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	f000 fbe5 	bl	80073da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2160      	movs	r1, #96	; 0x60
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 fc0f 	bl	800743a <TIM_ITRx_SetConfig>
      break;
 8006c1c:	e01c      	b.n	8006c58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	f000 fba6 	bl	800737c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2140      	movs	r1, #64	; 0x40
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 fbff 	bl	800743a <TIM_ITRx_SetConfig>
      break;
 8006c3c:	e00c      	b.n	8006c58 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4619      	mov	r1, r3
 8006c48:	4610      	mov	r0, r2
 8006c4a:	f000 fbf6 	bl	800743a <TIM_ITRx_SetConfig>
      break;
 8006c4e:	e003      	b.n	8006c58 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	73fb      	strb	r3, [r7, #15]
      break;
 8006c54:	e000      	b.n	8006c58 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006c56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b083      	sub	sp, #12
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c7a:	bf00      	nop
 8006c7c:	370c      	adds	r7, #12
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr

08006c86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c86:	b480      	push	{r7}
 8006c88:	b083      	sub	sp, #12
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c8e:	bf00      	nop
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ca2:	bf00      	nop
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
	...

08006cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a3c      	ldr	r2, [pc, #240]	; (8006db4 <TIM_Base_SetConfig+0x104>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d00f      	beq.n	8006ce8 <TIM_Base_SetConfig+0x38>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cce:	d00b      	beq.n	8006ce8 <TIM_Base_SetConfig+0x38>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a39      	ldr	r2, [pc, #228]	; (8006db8 <TIM_Base_SetConfig+0x108>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d007      	beq.n	8006ce8 <TIM_Base_SetConfig+0x38>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a38      	ldr	r2, [pc, #224]	; (8006dbc <TIM_Base_SetConfig+0x10c>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d003      	beq.n	8006ce8 <TIM_Base_SetConfig+0x38>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a37      	ldr	r2, [pc, #220]	; (8006dc0 <TIM_Base_SetConfig+0x110>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d108      	bne.n	8006cfa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a2d      	ldr	r2, [pc, #180]	; (8006db4 <TIM_Base_SetConfig+0x104>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d01b      	beq.n	8006d3a <TIM_Base_SetConfig+0x8a>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d08:	d017      	beq.n	8006d3a <TIM_Base_SetConfig+0x8a>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a2a      	ldr	r2, [pc, #168]	; (8006db8 <TIM_Base_SetConfig+0x108>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d013      	beq.n	8006d3a <TIM_Base_SetConfig+0x8a>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a29      	ldr	r2, [pc, #164]	; (8006dbc <TIM_Base_SetConfig+0x10c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d00f      	beq.n	8006d3a <TIM_Base_SetConfig+0x8a>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a28      	ldr	r2, [pc, #160]	; (8006dc0 <TIM_Base_SetConfig+0x110>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d00b      	beq.n	8006d3a <TIM_Base_SetConfig+0x8a>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a27      	ldr	r2, [pc, #156]	; (8006dc4 <TIM_Base_SetConfig+0x114>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d007      	beq.n	8006d3a <TIM_Base_SetConfig+0x8a>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a26      	ldr	r2, [pc, #152]	; (8006dc8 <TIM_Base_SetConfig+0x118>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d003      	beq.n	8006d3a <TIM_Base_SetConfig+0x8a>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a25      	ldr	r2, [pc, #148]	; (8006dcc <TIM_Base_SetConfig+0x11c>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d108      	bne.n	8006d4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	689a      	ldr	r2, [r3, #8]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a10      	ldr	r2, [pc, #64]	; (8006db4 <TIM_Base_SetConfig+0x104>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d00f      	beq.n	8006d98 <TIM_Base_SetConfig+0xe8>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a11      	ldr	r2, [pc, #68]	; (8006dc0 <TIM_Base_SetConfig+0x110>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d00b      	beq.n	8006d98 <TIM_Base_SetConfig+0xe8>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a10      	ldr	r2, [pc, #64]	; (8006dc4 <TIM_Base_SetConfig+0x114>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d007      	beq.n	8006d98 <TIM_Base_SetConfig+0xe8>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a0f      	ldr	r2, [pc, #60]	; (8006dc8 <TIM_Base_SetConfig+0x118>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d003      	beq.n	8006d98 <TIM_Base_SetConfig+0xe8>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a0e      	ldr	r2, [pc, #56]	; (8006dcc <TIM_Base_SetConfig+0x11c>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d103      	bne.n	8006da0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	691a      	ldr	r2, [r3, #16]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	615a      	str	r2, [r3, #20]
}
 8006da6:	bf00      	nop
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	40012c00 	.word	0x40012c00
 8006db8:	40000400 	.word	0x40000400
 8006dbc:	40000800 	.word	0x40000800
 8006dc0:	40013400 	.word	0x40013400
 8006dc4:	40014000 	.word	0x40014000
 8006dc8:	40014400 	.word	0x40014400
 8006dcc:	40014800 	.word	0x40014800

08006dd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b087      	sub	sp, #28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	f023 0201 	bic.w	r2, r3, #1
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f023 0303 	bic.w	r3, r3, #3
 8006e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	f023 0302 	bic.w	r3, r3, #2
 8006e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a2c      	ldr	r2, [pc, #176]	; (8006edc <TIM_OC1_SetConfig+0x10c>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d00f      	beq.n	8006e50 <TIM_OC1_SetConfig+0x80>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a2b      	ldr	r2, [pc, #172]	; (8006ee0 <TIM_OC1_SetConfig+0x110>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00b      	beq.n	8006e50 <TIM_OC1_SetConfig+0x80>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a2a      	ldr	r2, [pc, #168]	; (8006ee4 <TIM_OC1_SetConfig+0x114>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d007      	beq.n	8006e50 <TIM_OC1_SetConfig+0x80>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a29      	ldr	r2, [pc, #164]	; (8006ee8 <TIM_OC1_SetConfig+0x118>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d003      	beq.n	8006e50 <TIM_OC1_SetConfig+0x80>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a28      	ldr	r2, [pc, #160]	; (8006eec <TIM_OC1_SetConfig+0x11c>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d10c      	bne.n	8006e6a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f023 0308 	bic.w	r3, r3, #8
 8006e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f023 0304 	bic.w	r3, r3, #4
 8006e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a1b      	ldr	r2, [pc, #108]	; (8006edc <TIM_OC1_SetConfig+0x10c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d00f      	beq.n	8006e92 <TIM_OC1_SetConfig+0xc2>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a1a      	ldr	r2, [pc, #104]	; (8006ee0 <TIM_OC1_SetConfig+0x110>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d00b      	beq.n	8006e92 <TIM_OC1_SetConfig+0xc2>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a19      	ldr	r2, [pc, #100]	; (8006ee4 <TIM_OC1_SetConfig+0x114>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d007      	beq.n	8006e92 <TIM_OC1_SetConfig+0xc2>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a18      	ldr	r2, [pc, #96]	; (8006ee8 <TIM_OC1_SetConfig+0x118>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d003      	beq.n	8006e92 <TIM_OC1_SetConfig+0xc2>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a17      	ldr	r2, [pc, #92]	; (8006eec <TIM_OC1_SetConfig+0x11c>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d111      	bne.n	8006eb6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	621a      	str	r2, [r3, #32]
}
 8006ed0:	bf00      	nop
 8006ed2:	371c      	adds	r7, #28
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	40012c00 	.word	0x40012c00
 8006ee0:	40013400 	.word	0x40013400
 8006ee4:	40014000 	.word	0x40014000
 8006ee8:	40014400 	.word	0x40014400
 8006eec:	40014800 	.word	0x40014800

08006ef0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b087      	sub	sp, #28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	f023 0210 	bic.w	r2, r3, #16
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	021b      	lsls	r3, r3, #8
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	f023 0320 	bic.w	r3, r3, #32
 8006f3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	011b      	lsls	r3, r3, #4
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a28      	ldr	r2, [pc, #160]	; (8006ff0 <TIM_OC2_SetConfig+0x100>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d003      	beq.n	8006f5c <TIM_OC2_SetConfig+0x6c>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a27      	ldr	r2, [pc, #156]	; (8006ff4 <TIM_OC2_SetConfig+0x104>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d10d      	bne.n	8006f78 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	011b      	lsls	r3, r3, #4
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a1d      	ldr	r2, [pc, #116]	; (8006ff0 <TIM_OC2_SetConfig+0x100>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d00f      	beq.n	8006fa0 <TIM_OC2_SetConfig+0xb0>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a1c      	ldr	r2, [pc, #112]	; (8006ff4 <TIM_OC2_SetConfig+0x104>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d00b      	beq.n	8006fa0 <TIM_OC2_SetConfig+0xb0>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a1b      	ldr	r2, [pc, #108]	; (8006ff8 <TIM_OC2_SetConfig+0x108>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d007      	beq.n	8006fa0 <TIM_OC2_SetConfig+0xb0>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a1a      	ldr	r2, [pc, #104]	; (8006ffc <TIM_OC2_SetConfig+0x10c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d003      	beq.n	8006fa0 <TIM_OC2_SetConfig+0xb0>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a19      	ldr	r2, [pc, #100]	; (8007000 <TIM_OC2_SetConfig+0x110>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d113      	bne.n	8006fc8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fa6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fae:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	621a      	str	r2, [r3, #32]
}
 8006fe2:	bf00      	nop
 8006fe4:	371c      	adds	r7, #28
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	40012c00 	.word	0x40012c00
 8006ff4:	40013400 	.word	0x40013400
 8006ff8:	40014000 	.word	0x40014000
 8006ffc:	40014400 	.word	0x40014400
 8007000:	40014800 	.word	0x40014800

08007004 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007004:	b480      	push	{r7}
 8007006:	b087      	sub	sp, #28
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f023 0303 	bic.w	r3, r3, #3
 800703e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	4313      	orrs	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	021b      	lsls	r3, r3, #8
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	4313      	orrs	r3, r2
 800705c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a27      	ldr	r2, [pc, #156]	; (8007100 <TIM_OC3_SetConfig+0xfc>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d003      	beq.n	800706e <TIM_OC3_SetConfig+0x6a>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a26      	ldr	r2, [pc, #152]	; (8007104 <TIM_OC3_SetConfig+0x100>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d10d      	bne.n	800708a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007074:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	021b      	lsls	r3, r3, #8
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	4313      	orrs	r3, r2
 8007080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007088:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a1c      	ldr	r2, [pc, #112]	; (8007100 <TIM_OC3_SetConfig+0xfc>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d00f      	beq.n	80070b2 <TIM_OC3_SetConfig+0xae>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a1b      	ldr	r2, [pc, #108]	; (8007104 <TIM_OC3_SetConfig+0x100>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d00b      	beq.n	80070b2 <TIM_OC3_SetConfig+0xae>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a1a      	ldr	r2, [pc, #104]	; (8007108 <TIM_OC3_SetConfig+0x104>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d007      	beq.n	80070b2 <TIM_OC3_SetConfig+0xae>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a19      	ldr	r2, [pc, #100]	; (800710c <TIM_OC3_SetConfig+0x108>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d003      	beq.n	80070b2 <TIM_OC3_SetConfig+0xae>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a18      	ldr	r2, [pc, #96]	; (8007110 <TIM_OC3_SetConfig+0x10c>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d113      	bne.n	80070da <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	011b      	lsls	r3, r3, #4
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	011b      	lsls	r3, r3, #4
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	693a      	ldr	r2, [r7, #16]
 80070de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	685a      	ldr	r2, [r3, #4]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	621a      	str	r2, [r3, #32]
}
 80070f4:	bf00      	nop
 80070f6:	371c      	adds	r7, #28
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	40012c00 	.word	0x40012c00
 8007104:	40013400 	.word	0x40013400
 8007108:	40014000 	.word	0x40014000
 800710c:	40014400 	.word	0x40014400
 8007110:	40014800 	.word	0x40014800

08007114 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007114:	b480      	push	{r7}
 8007116:	b087      	sub	sp, #28
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800714e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	021b      	lsls	r3, r3, #8
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	4313      	orrs	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007162:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	031b      	lsls	r3, r3, #12
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	4313      	orrs	r3, r2
 800716e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a18      	ldr	r2, [pc, #96]	; (80071d4 <TIM_OC4_SetConfig+0xc0>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d00f      	beq.n	8007198 <TIM_OC4_SetConfig+0x84>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a17      	ldr	r2, [pc, #92]	; (80071d8 <TIM_OC4_SetConfig+0xc4>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d00b      	beq.n	8007198 <TIM_OC4_SetConfig+0x84>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a16      	ldr	r2, [pc, #88]	; (80071dc <TIM_OC4_SetConfig+0xc8>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d007      	beq.n	8007198 <TIM_OC4_SetConfig+0x84>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a15      	ldr	r2, [pc, #84]	; (80071e0 <TIM_OC4_SetConfig+0xcc>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d003      	beq.n	8007198 <TIM_OC4_SetConfig+0x84>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a14      	ldr	r2, [pc, #80]	; (80071e4 <TIM_OC4_SetConfig+0xd0>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d109      	bne.n	80071ac <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800719e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	695b      	ldr	r3, [r3, #20]
 80071a4:	019b      	lsls	r3, r3, #6
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	621a      	str	r2, [r3, #32]
}
 80071c6:	bf00      	nop
 80071c8:	371c      	adds	r7, #28
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	40012c00 	.word	0x40012c00
 80071d8:	40013400 	.word	0x40013400
 80071dc:	40014000 	.word	0x40014000
 80071e0:	40014400 	.word	0x40014400
 80071e4:	40014800 	.word	0x40014800

080071e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b087      	sub	sp, #28
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800720e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800721a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	4313      	orrs	r3, r2
 8007224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800722c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	041b      	lsls	r3, r3, #16
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	4313      	orrs	r3, r2
 8007238:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a17      	ldr	r2, [pc, #92]	; (800729c <TIM_OC5_SetConfig+0xb4>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d00f      	beq.n	8007262 <TIM_OC5_SetConfig+0x7a>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a16      	ldr	r2, [pc, #88]	; (80072a0 <TIM_OC5_SetConfig+0xb8>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d00b      	beq.n	8007262 <TIM_OC5_SetConfig+0x7a>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a15      	ldr	r2, [pc, #84]	; (80072a4 <TIM_OC5_SetConfig+0xbc>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d007      	beq.n	8007262 <TIM_OC5_SetConfig+0x7a>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a14      	ldr	r2, [pc, #80]	; (80072a8 <TIM_OC5_SetConfig+0xc0>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d003      	beq.n	8007262 <TIM_OC5_SetConfig+0x7a>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a13      	ldr	r2, [pc, #76]	; (80072ac <TIM_OC5_SetConfig+0xc4>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d109      	bne.n	8007276 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007268:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	021b      	lsls	r3, r3, #8
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	4313      	orrs	r3, r2
 8007274:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	621a      	str	r2, [r3, #32]
}
 8007290:	bf00      	nop
 8007292:	371c      	adds	r7, #28
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	40012c00 	.word	0x40012c00
 80072a0:	40013400 	.word	0x40013400
 80072a4:	40014000 	.word	0x40014000
 80072a8:	40014400 	.word	0x40014400
 80072ac:	40014800 	.word	0x40014800

080072b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	021b      	lsls	r3, r3, #8
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	051b      	lsls	r3, r3, #20
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	4313      	orrs	r3, r2
 8007302:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a18      	ldr	r2, [pc, #96]	; (8007368 <TIM_OC6_SetConfig+0xb8>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d00f      	beq.n	800732c <TIM_OC6_SetConfig+0x7c>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a17      	ldr	r2, [pc, #92]	; (800736c <TIM_OC6_SetConfig+0xbc>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d00b      	beq.n	800732c <TIM_OC6_SetConfig+0x7c>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a16      	ldr	r2, [pc, #88]	; (8007370 <TIM_OC6_SetConfig+0xc0>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d007      	beq.n	800732c <TIM_OC6_SetConfig+0x7c>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a15      	ldr	r2, [pc, #84]	; (8007374 <TIM_OC6_SetConfig+0xc4>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d003      	beq.n	800732c <TIM_OC6_SetConfig+0x7c>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a14      	ldr	r2, [pc, #80]	; (8007378 <TIM_OC6_SetConfig+0xc8>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d109      	bne.n	8007340 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007332:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	029b      	lsls	r3, r3, #10
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	4313      	orrs	r3, r2
 800733e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	621a      	str	r2, [r3, #32]
}
 800735a:	bf00      	nop
 800735c:	371c      	adds	r7, #28
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	40012c00 	.word	0x40012c00
 800736c:	40013400 	.word	0x40013400
 8007370:	40014000 	.word	0x40014000
 8007374:	40014400 	.word	0x40014400
 8007378:	40014800 	.word	0x40014800

0800737c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800737c:	b480      	push	{r7}
 800737e:	b087      	sub	sp, #28
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6a1b      	ldr	r3, [r3, #32]
 800738c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	f023 0201 	bic.w	r2, r3, #1
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	011b      	lsls	r3, r3, #4
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f023 030a 	bic.w	r3, r3, #10
 80073b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	4313      	orrs	r3, r2
 80073c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	621a      	str	r2, [r3, #32]
}
 80073ce:	bf00      	nop
 80073d0:	371c      	adds	r7, #28
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073da:	b480      	push	{r7}
 80073dc:	b087      	sub	sp, #28
 80073de:	af00      	add	r7, sp, #0
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	60b9      	str	r1, [r7, #8]
 80073e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	f023 0210 	bic.w	r2, r3, #16
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6a1b      	ldr	r3, [r3, #32]
 80073fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007404:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	031b      	lsls	r3, r3, #12
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	4313      	orrs	r3, r2
 800740e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007416:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	011b      	lsls	r3, r3, #4
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	4313      	orrs	r3, r2
 8007420:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	621a      	str	r2, [r3, #32]
}
 800742e:	bf00      	nop
 8007430:	371c      	adds	r7, #28
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800743a:	b480      	push	{r7}
 800743c:	b085      	sub	sp, #20
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007450:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	4313      	orrs	r3, r2
 8007458:	f043 0307 	orr.w	r3, r3, #7
 800745c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	609a      	str	r2, [r3, #8]
}
 8007464:	bf00      	nop
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007470:	b480      	push	{r7}
 8007472:	b087      	sub	sp, #28
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
 800747c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800748a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	021a      	lsls	r2, r3, #8
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	431a      	orrs	r2, r3
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	4313      	orrs	r3, r2
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	4313      	orrs	r3, r2
 800749c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	609a      	str	r2, [r3, #8]
}
 80074a4:	bf00      	nop
 80074a6:	371c      	adds	r7, #28
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b087      	sub	sp, #28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f003 031f 	and.w	r3, r3, #31
 80074c2:	2201      	movs	r2, #1
 80074c4:	fa02 f303 	lsl.w	r3, r2, r3
 80074c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6a1a      	ldr	r2, [r3, #32]
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	43db      	mvns	r3, r3
 80074d2:	401a      	ands	r2, r3
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6a1a      	ldr	r2, [r3, #32]
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	f003 031f 	and.w	r3, r3, #31
 80074e2:	6879      	ldr	r1, [r7, #4]
 80074e4:	fa01 f303 	lsl.w	r3, r1, r3
 80074e8:	431a      	orrs	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	621a      	str	r2, [r3, #32]
}
 80074ee:	bf00      	nop
 80074f0:	371c      	adds	r7, #28
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
	...

080074fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800750c:	2b01      	cmp	r3, #1
 800750e:	d101      	bne.n	8007514 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007510:	2302      	movs	r3, #2
 8007512:	e063      	b.n	80075dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2202      	movs	r2, #2
 8007520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a2b      	ldr	r2, [pc, #172]	; (80075e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d004      	beq.n	8007548 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a2a      	ldr	r2, [pc, #168]	; (80075ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d108      	bne.n	800755a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800754e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	4313      	orrs	r3, r2
 8007558:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007560:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	4313      	orrs	r3, r2
 800756a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a1b      	ldr	r2, [pc, #108]	; (80075e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d018      	beq.n	80075b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007586:	d013      	beq.n	80075b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a18      	ldr	r2, [pc, #96]	; (80075f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d00e      	beq.n	80075b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a17      	ldr	r2, [pc, #92]	; (80075f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d009      	beq.n	80075b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a12      	ldr	r2, [pc, #72]	; (80075ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d004      	beq.n	80075b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a13      	ldr	r2, [pc, #76]	; (80075f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d10c      	bne.n	80075ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	4313      	orrs	r3, r2
 80075c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3714      	adds	r7, #20
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr
 80075e8:	40012c00 	.word	0x40012c00
 80075ec:	40013400 	.word	0x40013400
 80075f0:	40000400 	.word	0x40000400
 80075f4:	40000800 	.word	0x40000800
 80075f8:	40014000 	.word	0x40014000

080075fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007648:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800764c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	b29a      	uxth	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007666:	b480      	push	{r7}
 8007668:	b085      	sub	sp, #20
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800766e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007672:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800767a:	b29a      	uxth	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	b29b      	uxth	r3, r3
 8007680:	43db      	mvns	r3, r3
 8007682:	b29b      	uxth	r3, r3
 8007684:	4013      	ands	r3, r2
 8007686:	b29a      	uxth	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800769c:	b084      	sub	sp, #16
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	f107 0014 	add.w	r0, r7, #20
 80076aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	b004      	add	sp, #16
 80076dc:	4770      	bx	lr
	...

080076e0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b09d      	sub	sp, #116	; 0x74
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80076ea:	2300      	movs	r3, #0
 80076ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4413      	add	r3, r2
 80076fa:	881b      	ldrh	r3, [r3, #0]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007706:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	78db      	ldrb	r3, [r3, #3]
 800770e:	2b03      	cmp	r3, #3
 8007710:	d81f      	bhi.n	8007752 <USB_ActivateEndpoint+0x72>
 8007712:	a201      	add	r2, pc, #4	; (adr r2, 8007718 <USB_ActivateEndpoint+0x38>)
 8007714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007718:	08007729 	.word	0x08007729
 800771c:	08007745 	.word	0x08007745
 8007720:	0800775b 	.word	0x0800775b
 8007724:	08007737 	.word	0x08007737
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007728:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800772c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007730:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007734:	e012      	b.n	800775c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007736:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800773a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800773e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007742:	e00b      	b.n	800775c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007744:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007748:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800774c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007750:	e004      	b.n	800775c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007758:	e000      	b.n	800775c <USB_ActivateEndpoint+0x7c>
      break;
 800775a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	441a      	add	r2, r3
 8007766:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800776a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800776e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800777a:	b29b      	uxth	r3, r3
 800777c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4413      	add	r3, r2
 8007788:	881b      	ldrh	r3, [r3, #0]
 800778a:	b29b      	uxth	r3, r3
 800778c:	b21b      	sxth	r3, r3
 800778e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007796:	b21a      	sxth	r2, r3
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	b21b      	sxth	r3, r3
 800779e:	4313      	orrs	r3, r2
 80077a0:	b21b      	sxth	r3, r3
 80077a2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	441a      	add	r2, r3
 80077b0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80077b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	7b1b      	ldrb	r3, [r3, #12]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f040 8178 	bne.w	8007ac2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	785b      	ldrb	r3, [r3, #1]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f000 8084 	beq.w	80078e4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	61bb      	str	r3, [r7, #24]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	461a      	mov	r2, r3
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	4413      	add	r3, r2
 80077ee:	61bb      	str	r3, [r7, #24]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	011a      	lsls	r2, r3, #4
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	4413      	add	r3, r2
 80077fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077fe:	617b      	str	r3, [r7, #20]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	88db      	ldrh	r3, [r3, #6]
 8007804:	085b      	lsrs	r3, r3, #1
 8007806:	b29b      	uxth	r3, r3
 8007808:	005b      	lsls	r3, r3, #1
 800780a:	b29a      	uxth	r2, r3
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	4413      	add	r3, r2
 800781a:	881b      	ldrh	r3, [r3, #0]
 800781c:	827b      	strh	r3, [r7, #18]
 800781e:	8a7b      	ldrh	r3, [r7, #18]
 8007820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007824:	2b00      	cmp	r3, #0
 8007826:	d01b      	beq.n	8007860 <USB_ActivateEndpoint+0x180>
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4413      	add	r3, r2
 8007832:	881b      	ldrh	r3, [r3, #0]
 8007834:	b29b      	uxth	r3, r3
 8007836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800783a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800783e:	823b      	strh	r3, [r7, #16]
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	441a      	add	r2, r3
 800784a:	8a3b      	ldrh	r3, [r7, #16]
 800784c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007858:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800785c:	b29b      	uxth	r3, r3
 800785e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	78db      	ldrb	r3, [r3, #3]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d020      	beq.n	80078aa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	4413      	add	r3, r2
 8007872:	881b      	ldrh	r3, [r3, #0]
 8007874:	b29b      	uxth	r3, r3
 8007876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800787a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800787e:	81bb      	strh	r3, [r7, #12]
 8007880:	89bb      	ldrh	r3, [r7, #12]
 8007882:	f083 0320 	eor.w	r3, r3, #32
 8007886:	81bb      	strh	r3, [r7, #12]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	441a      	add	r2, r3
 8007892:	89bb      	ldrh	r3, [r7, #12]
 8007894:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007898:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800789c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	8013      	strh	r3, [r2, #0]
 80078a8:	e2d5      	b.n	8007e56 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	4413      	add	r3, r2
 80078b4:	881b      	ldrh	r3, [r3, #0]
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078c0:	81fb      	strh	r3, [r7, #14]
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	441a      	add	r2, r3
 80078cc:	89fb      	ldrh	r3, [r7, #14]
 80078ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078de:	b29b      	uxth	r3, r3
 80078e0:	8013      	strh	r3, [r2, #0]
 80078e2:	e2b8      	b.n	8007e56 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	633b      	str	r3, [r7, #48]	; 0x30
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	461a      	mov	r2, r3
 80078f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f4:	4413      	add	r3, r2
 80078f6:	633b      	str	r3, [r7, #48]	; 0x30
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	011a      	lsls	r2, r3, #4
 80078fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007900:	4413      	add	r3, r2
 8007902:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007906:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	88db      	ldrh	r3, [r3, #6]
 800790c:	085b      	lsrs	r3, r3, #1
 800790e:	b29b      	uxth	r3, r3
 8007910:	005b      	lsls	r3, r3, #1
 8007912:	b29a      	uxth	r2, r3
 8007914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007916:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	62bb      	str	r3, [r7, #40]	; 0x28
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007922:	b29b      	uxth	r3, r3
 8007924:	461a      	mov	r2, r3
 8007926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007928:	4413      	add	r3, r2
 800792a:	62bb      	str	r3, [r7, #40]	; 0x28
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	011a      	lsls	r2, r3, #4
 8007932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007934:	4413      	add	r3, r2
 8007936:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800793a:	627b      	str	r3, [r7, #36]	; 0x24
 800793c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793e:	881b      	ldrh	r3, [r3, #0]
 8007940:	b29b      	uxth	r3, r3
 8007942:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007946:	b29a      	uxth	r2, r3
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	801a      	strh	r2, [r3, #0]
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	2b3e      	cmp	r3, #62	; 0x3e
 8007952:	d91d      	bls.n	8007990 <USB_ActivateEndpoint+0x2b0>
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	095b      	lsrs	r3, r3, #5
 800795a:	66bb      	str	r3, [r7, #104]	; 0x68
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	f003 031f 	and.w	r3, r3, #31
 8007964:	2b00      	cmp	r3, #0
 8007966:	d102      	bne.n	800796e <USB_ActivateEndpoint+0x28e>
 8007968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800796a:	3b01      	subs	r3, #1
 800796c:	66bb      	str	r3, [r7, #104]	; 0x68
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	b29a      	uxth	r2, r3
 8007974:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007976:	b29b      	uxth	r3, r3
 8007978:	029b      	lsls	r3, r3, #10
 800797a:	b29b      	uxth	r3, r3
 800797c:	4313      	orrs	r3, r2
 800797e:	b29b      	uxth	r3, r3
 8007980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007988:	b29a      	uxth	r2, r3
 800798a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798c:	801a      	strh	r2, [r3, #0]
 800798e:	e026      	b.n	80079de <USB_ActivateEndpoint+0x2fe>
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10a      	bne.n	80079ae <USB_ActivateEndpoint+0x2ce>
 8007998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799a:	881b      	ldrh	r3, [r3, #0]
 800799c:	b29b      	uxth	r3, r3
 800799e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079aa:	801a      	strh	r2, [r3, #0]
 80079ac:	e017      	b.n	80079de <USB_ActivateEndpoint+0x2fe>
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	085b      	lsrs	r3, r3, #1
 80079b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d002      	beq.n	80079c8 <USB_ActivateEndpoint+0x2e8>
 80079c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079c4:	3301      	adds	r3, #1
 80079c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80079c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ca:	881b      	ldrh	r3, [r3, #0]
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	029b      	lsls	r3, r3, #10
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	4313      	orrs	r3, r2
 80079d8:	b29a      	uxth	r2, r3
 80079da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079dc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4413      	add	r3, r2
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80079ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80079ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d01b      	beq.n	8007a2e <USB_ActivateEndpoint+0x34e>
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a0c:	843b      	strh	r3, [r7, #32]
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	441a      	add	r2, r3
 8007a18:	8c3b      	ldrh	r3, [r7, #32]
 8007a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d124      	bne.n	8007a80 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a4c:	83bb      	strh	r3, [r7, #28]
 8007a4e:	8bbb      	ldrh	r3, [r7, #28]
 8007a50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a54:	83bb      	strh	r3, [r7, #28]
 8007a56:	8bbb      	ldrh	r3, [r7, #28]
 8007a58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a5c:	83bb      	strh	r3, [r7, #28]
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	441a      	add	r2, r3
 8007a68:	8bbb      	ldrh	r3, [r7, #28]
 8007a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	8013      	strh	r3, [r2, #0]
 8007a7e:	e1ea      	b.n	8007e56 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	881b      	ldrh	r3, [r3, #0]
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a96:	83fb      	strh	r3, [r7, #30]
 8007a98:	8bfb      	ldrh	r3, [r7, #30]
 8007a9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a9e:	83fb      	strh	r3, [r7, #30]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	441a      	add	r2, r3
 8007aaa:	8bfb      	ldrh	r3, [r7, #30]
 8007aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	8013      	strh	r3, [r2, #0]
 8007ac0:	e1c9      	b.n	8007e56 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	78db      	ldrb	r3, [r3, #3]
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d11e      	bne.n	8007b08 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	881b      	ldrh	r3, [r3, #0]
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ae0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	441a      	add	r2, r3
 8007aee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007afa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	8013      	strh	r3, [r2, #0]
 8007b06:	e01d      	b.n	8007b44 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4413      	add	r3, r2
 8007b12:	881b      	ldrh	r3, [r3, #0]
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b1e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	441a      	add	r2, r3
 8007b2c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007b30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	461a      	mov	r2, r3
 8007b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b54:	4413      	add	r3, r2
 8007b56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	011a      	lsls	r2, r3, #4
 8007b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b60:	4413      	add	r3, r2
 8007b62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b66:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	891b      	ldrh	r3, [r3, #8]
 8007b6c:	085b      	lsrs	r3, r3, #1
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	005b      	lsls	r3, r3, #1
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b76:	801a      	strh	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	657b      	str	r3, [r7, #84]	; 0x54
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	461a      	mov	r2, r3
 8007b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b88:	4413      	add	r3, r2
 8007b8a:	657b      	str	r3, [r7, #84]	; 0x54
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	011a      	lsls	r2, r3, #4
 8007b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b94:	4413      	add	r3, r2
 8007b96:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007b9a:	653b      	str	r3, [r7, #80]	; 0x50
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	895b      	ldrh	r3, [r3, #10]
 8007ba0:	085b      	lsrs	r3, r3, #1
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	005b      	lsls	r3, r3, #1
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007baa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	785b      	ldrb	r3, [r3, #1]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f040 8093 	bne.w	8007cdc <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4413      	add	r3, r2
 8007bc0:	881b      	ldrh	r3, [r3, #0]
 8007bc2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007bc6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d01b      	beq.n	8007c0a <USB_ActivateEndpoint+0x52a>
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4413      	add	r3, r2
 8007bdc:	881b      	ldrh	r3, [r3, #0]
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007be8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	441a      	add	r2, r3
 8007bf4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4413      	add	r3, r2
 8007c14:	881b      	ldrh	r3, [r3, #0]
 8007c16:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007c18:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d01b      	beq.n	8007c5a <USB_ActivateEndpoint+0x57a>
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	4413      	add	r3, r2
 8007c2c:	881b      	ldrh	r3, [r3, #0]
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c38:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	441a      	add	r2, r3
 8007c44:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007c46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	4413      	add	r3, r2
 8007c64:	881b      	ldrh	r3, [r3, #0]
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c70:	873b      	strh	r3, [r7, #56]	; 0x38
 8007c72:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007c74:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007c78:	873b      	strh	r3, [r7, #56]	; 0x38
 8007c7a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007c7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007c80:	873b      	strh	r3, [r7, #56]	; 0x38
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	441a      	add	r2, r3
 8007c8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4413      	add	r3, r2
 8007cac:	881b      	ldrh	r3, [r3, #0]
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cb8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	441a      	add	r2, r3
 8007cc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	8013      	strh	r3, [r2, #0]
 8007cda:	e0bc      	b.n	8007e56 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4413      	add	r3, r2
 8007ce6:	881b      	ldrh	r3, [r3, #0]
 8007ce8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007cec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d01d      	beq.n	8007d34 <USB_ActivateEndpoint+0x654>
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4413      	add	r3, r2
 8007d02:	881b      	ldrh	r3, [r3, #0]
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d0e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	441a      	add	r2, r3
 8007d1c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007d20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	4413      	add	r3, r2
 8007d3e:	881b      	ldrh	r3, [r3, #0]
 8007d40:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007d44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d01d      	beq.n	8007d8c <USB_ActivateEndpoint+0x6ac>
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	4413      	add	r3, r2
 8007d5a:	881b      	ldrh	r3, [r3, #0]
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d66:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	441a      	add	r2, r3
 8007d74:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007d78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	78db      	ldrb	r3, [r3, #3]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d024      	beq.n	8007dde <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	4413      	add	r3, r2
 8007d9e:	881b      	ldrh	r3, [r3, #0]
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007da6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007daa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007dae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007db2:	f083 0320 	eor.w	r3, r3, #32
 8007db6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	441a      	add	r2, r3
 8007dc4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007dc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	8013      	strh	r3, [r2, #0]
 8007ddc:	e01d      	b.n	8007e1a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	4413      	add	r3, r2
 8007de8:	881b      	ldrh	r3, [r3, #0]
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007df0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007df4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	441a      	add	r2, r3
 8007e02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4413      	add	r3, r2
 8007e24:	881b      	ldrh	r3, [r3, #0]
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e30:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	441a      	add	r2, r3
 8007e3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007e56:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3774      	adds	r7, #116	; 0x74
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop

08007e68 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b08d      	sub	sp, #52	; 0x34
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	7b1b      	ldrb	r3, [r3, #12]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f040 808e 	bne.w	8007f98 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	785b      	ldrb	r3, [r3, #1]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d044      	beq.n	8007f0e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4413      	add	r3, r2
 8007e8e:	881b      	ldrh	r3, [r3, #0]
 8007e90:	81bb      	strh	r3, [r7, #12]
 8007e92:	89bb      	ldrh	r3, [r7, #12]
 8007e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d01b      	beq.n	8007ed4 <USB_DeactivateEndpoint+0x6c>
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	4413      	add	r3, r2
 8007ea6:	881b      	ldrh	r3, [r3, #0]
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eb2:	817b      	strh	r3, [r7, #10]
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	441a      	add	r2, r3
 8007ebe:	897b      	ldrh	r3, [r7, #10]
 8007ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ecc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	881b      	ldrh	r3, [r3, #0]
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eea:	813b      	strh	r3, [r7, #8]
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	441a      	add	r2, r3
 8007ef6:	893b      	ldrh	r3, [r7, #8]
 8007ef8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007efc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	8013      	strh	r3, [r2, #0]
 8007f0c:	e192      	b.n	8008234 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	827b      	strh	r3, [r7, #18]
 8007f1c:	8a7b      	ldrh	r3, [r7, #18]
 8007f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d01b      	beq.n	8007f5e <USB_DeactivateEndpoint+0xf6>
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4413      	add	r3, r2
 8007f30:	881b      	ldrh	r3, [r3, #0]
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f3c:	823b      	strh	r3, [r7, #16]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	441a      	add	r2, r3
 8007f48:	8a3b      	ldrh	r3, [r7, #16]
 8007f4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4413      	add	r3, r2
 8007f68:	881b      	ldrh	r3, [r3, #0]
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f74:	81fb      	strh	r3, [r7, #14]
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	441a      	add	r2, r3
 8007f80:	89fb      	ldrh	r3, [r7, #14]
 8007f82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	8013      	strh	r3, [r2, #0]
 8007f96:	e14d      	b.n	8008234 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	785b      	ldrb	r3, [r3, #1]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f040 80a5 	bne.w	80080ec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4413      	add	r3, r2
 8007fac:	881b      	ldrh	r3, [r3, #0]
 8007fae:	843b      	strh	r3, [r7, #32]
 8007fb0:	8c3b      	ldrh	r3, [r7, #32]
 8007fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d01b      	beq.n	8007ff2 <USB_DeactivateEndpoint+0x18a>
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4413      	add	r3, r2
 8007fc4:	881b      	ldrh	r3, [r3, #0]
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fd0:	83fb      	strh	r3, [r7, #30]
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	441a      	add	r2, r3
 8007fdc:	8bfb      	ldrh	r3, [r7, #30]
 8007fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fe6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	4413      	add	r3, r2
 8007ffc:	881b      	ldrh	r3, [r3, #0]
 8007ffe:	83bb      	strh	r3, [r7, #28]
 8008000:	8bbb      	ldrh	r3, [r7, #28]
 8008002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008006:	2b00      	cmp	r3, #0
 8008008:	d01b      	beq.n	8008042 <USB_DeactivateEndpoint+0x1da>
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4413      	add	r3, r2
 8008014:	881b      	ldrh	r3, [r3, #0]
 8008016:	b29b      	uxth	r3, r3
 8008018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800801c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008020:	837b      	strh	r3, [r7, #26]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	441a      	add	r2, r3
 800802c:	8b7b      	ldrh	r3, [r7, #26]
 800802e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800803a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800803e:	b29b      	uxth	r3, r3
 8008040:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	4413      	add	r3, r2
 800804c:	881b      	ldrh	r3, [r3, #0]
 800804e:	b29b      	uxth	r3, r3
 8008050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008058:	833b      	strh	r3, [r7, #24]
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	441a      	add	r2, r3
 8008064:	8b3b      	ldrh	r3, [r7, #24]
 8008066:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800806a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800806e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008072:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008076:	b29b      	uxth	r3, r3
 8008078:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4413      	add	r3, r2
 8008084:	881b      	ldrh	r3, [r3, #0]
 8008086:	b29b      	uxth	r3, r3
 8008088:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800808c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008090:	82fb      	strh	r3, [r7, #22]
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	441a      	add	r2, r3
 800809c:	8afb      	ldrh	r3, [r7, #22]
 800809e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4413      	add	r3, r2
 80080bc:	881b      	ldrh	r3, [r3, #0]
 80080be:	b29b      	uxth	r3, r3
 80080c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080c8:	82bb      	strh	r3, [r7, #20]
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	441a      	add	r2, r3
 80080d4:	8abb      	ldrh	r3, [r7, #20]
 80080d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	8013      	strh	r3, [r2, #0]
 80080ea:	e0a3      	b.n	8008234 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	881b      	ldrh	r3, [r3, #0]
 80080f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80080fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80080fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008100:	2b00      	cmp	r3, #0
 8008102:	d01b      	beq.n	800813c <USB_DeactivateEndpoint+0x2d4>
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	4413      	add	r3, r2
 800810e:	881b      	ldrh	r3, [r3, #0]
 8008110:	b29b      	uxth	r3, r3
 8008112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800811a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	441a      	add	r2, r3
 8008126:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800812c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008130:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008138:	b29b      	uxth	r3, r3
 800813a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	4413      	add	r3, r2
 8008146:	881b      	ldrh	r3, [r3, #0]
 8008148:	857b      	strh	r3, [r7, #42]	; 0x2a
 800814a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800814c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008150:	2b00      	cmp	r3, #0
 8008152:	d01b      	beq.n	800818c <USB_DeactivateEndpoint+0x324>
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4413      	add	r3, r2
 800815e:	881b      	ldrh	r3, [r3, #0]
 8008160:	b29b      	uxth	r3, r3
 8008162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800816a:	853b      	strh	r3, [r7, #40]	; 0x28
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	441a      	add	r2, r3
 8008176:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008178:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800817c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008184:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008188:	b29b      	uxth	r3, r3
 800818a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	4413      	add	r3, r2
 8008196:	881b      	ldrh	r3, [r3, #0]
 8008198:	b29b      	uxth	r3, r3
 800819a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800819e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	441a      	add	r2, r3
 80081ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80081bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	881b      	ldrh	r3, [r3, #0]
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081da:	84bb      	strh	r3, [r7, #36]	; 0x24
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	441a      	add	r2, r3
 80081e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4413      	add	r3, r2
 8008206:	881b      	ldrh	r3, [r3, #0]
 8008208:	b29b      	uxth	r3, r3
 800820a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800820e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008212:	847b      	strh	r3, [r7, #34]	; 0x22
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	441a      	add	r2, r3
 800821e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008220:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008224:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800822c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008230:	b29b      	uxth	r3, r3
 8008232:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3734      	adds	r7, #52	; 0x34
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b0c2      	sub	sp, #264	; 0x108
 8008246:	af00      	add	r7, sp, #0
 8008248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800824c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008250:	6018      	str	r0, [r3, #0]
 8008252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800825a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800825c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	785b      	ldrb	r3, [r3, #1]
 8008268:	2b01      	cmp	r3, #1
 800826a:	f040 86b7 	bne.w	8008fdc <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800826e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	699a      	ldr	r2, [r3, #24]
 800827a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800827e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	429a      	cmp	r2, r3
 8008288:	d908      	bls.n	800829c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800828a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800828e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800829a:	e007      	b.n	80082ac <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800829c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	699b      	ldr	r3, [r3, #24]
 80082a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80082ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	7b1b      	ldrb	r3, [r3, #12]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d13a      	bne.n	8008332 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80082bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	6959      	ldr	r1, [r3, #20]
 80082c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	88da      	ldrh	r2, [r3, #6]
 80082d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082d8:	b29b      	uxth	r3, r3
 80082da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80082de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80082e2:	6800      	ldr	r0, [r0, #0]
 80082e4:	f001 fc8c 	bl	8009c00 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80082e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	613b      	str	r3, [r7, #16]
 80082f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008302:	b29b      	uxth	r3, r3
 8008304:	461a      	mov	r2, r3
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	4413      	add	r3, r2
 800830a:	613b      	str	r3, [r7, #16]
 800830c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	011a      	lsls	r2, r3, #4
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	4413      	add	r3, r2
 800831e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008328:	b29a      	uxth	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	801a      	strh	r2, [r3, #0]
 800832e:	f000 be1f 	b.w	8008f70 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	78db      	ldrb	r3, [r3, #3]
 800833e:	2b02      	cmp	r3, #2
 8008340:	f040 8462 	bne.w	8008c08 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	6a1a      	ldr	r2, [r3, #32]
 8008350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	691b      	ldr	r3, [r3, #16]
 800835c:	429a      	cmp	r2, r3
 800835e:	f240 83df 	bls.w	8008b20 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008366:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	4413      	add	r3, r2
 800837c:	881b      	ldrh	r3, [r3, #0]
 800837e:	b29b      	uxth	r3, r3
 8008380:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008388:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800838c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008390:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800839a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	441a      	add	r2, r3
 80083a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80083aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083b2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80083b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80083be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	6a1a      	ldr	r2, [r3, #32]
 80083ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ce:	1ad2      	subs	r2, r2, r3
 80083d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80083dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4413      	add	r3, r2
 80083f6:	881b      	ldrh	r3, [r3, #0]
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083fe:	2b00      	cmp	r3, #0
 8008400:	f000 81c7 	beq.w	8008792 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008408:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	633b      	str	r3, [r7, #48]	; 0x30
 8008410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008414:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	785b      	ldrb	r3, [r3, #1]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d177      	bne.n	8008510 <USB_EPStartXfer+0x2ce>
 8008420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008424:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	62bb      	str	r3, [r7, #40]	; 0x28
 800842c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008430:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800843a:	b29b      	uxth	r3, r3
 800843c:	461a      	mov	r2, r3
 800843e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008440:	4413      	add	r3, r2
 8008442:	62bb      	str	r3, [r7, #40]	; 0x28
 8008444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008448:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	011a      	lsls	r2, r3, #4
 8008452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008454:	4413      	add	r3, r2
 8008456:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800845a:	627b      	str	r3, [r7, #36]	; 0x24
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845e:	881b      	ldrh	r3, [r3, #0]
 8008460:	b29b      	uxth	r3, r3
 8008462:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008466:	b29a      	uxth	r2, r3
 8008468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846a:	801a      	strh	r2, [r3, #0]
 800846c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008470:	2b3e      	cmp	r3, #62	; 0x3e
 8008472:	d921      	bls.n	80084b8 <USB_EPStartXfer+0x276>
 8008474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008478:	095b      	lsrs	r3, r3, #5
 800847a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800847e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008482:	f003 031f 	and.w	r3, r3, #31
 8008486:	2b00      	cmp	r3, #0
 8008488:	d104      	bne.n	8008494 <USB_EPStartXfer+0x252>
 800848a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800848e:	3b01      	subs	r3, #1
 8008490:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008496:	881b      	ldrh	r3, [r3, #0]
 8008498:	b29a      	uxth	r2, r3
 800849a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800849e:	b29b      	uxth	r3, r3
 80084a0:	029b      	lsls	r3, r3, #10
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	4313      	orrs	r3, r2
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084b0:	b29a      	uxth	r2, r3
 80084b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b4:	801a      	strh	r2, [r3, #0]
 80084b6:	e050      	b.n	800855a <USB_EPStartXfer+0x318>
 80084b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d10a      	bne.n	80084d6 <USB_EPStartXfer+0x294>
 80084c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c2:	881b      	ldrh	r3, [r3, #0]
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d2:	801a      	strh	r2, [r3, #0]
 80084d4:	e041      	b.n	800855a <USB_EPStartXfer+0x318>
 80084d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084da:	085b      	lsrs	r3, r3, #1
 80084dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80084e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084e4:	f003 0301 	and.w	r3, r3, #1
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d004      	beq.n	80084f6 <USB_EPStartXfer+0x2b4>
 80084ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80084f0:	3301      	adds	r3, #1
 80084f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80084f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008500:	b29b      	uxth	r3, r3
 8008502:	029b      	lsls	r3, r3, #10
 8008504:	b29b      	uxth	r3, r3
 8008506:	4313      	orrs	r3, r2
 8008508:	b29a      	uxth	r2, r3
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	801a      	strh	r2, [r3, #0]
 800850e:	e024      	b.n	800855a <USB_EPStartXfer+0x318>
 8008510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	785b      	ldrb	r3, [r3, #1]
 800851c:	2b01      	cmp	r3, #1
 800851e:	d11c      	bne.n	800855a <USB_EPStartXfer+0x318>
 8008520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008524:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800852e:	b29b      	uxth	r3, r3
 8008530:	461a      	mov	r2, r3
 8008532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008534:	4413      	add	r3, r2
 8008536:	633b      	str	r3, [r7, #48]	; 0x30
 8008538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800853c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	011a      	lsls	r2, r3, #4
 8008546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008548:	4413      	add	r3, r2
 800854a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800854e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008554:	b29a      	uxth	r2, r3
 8008556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008558:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800855a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800855e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	895b      	ldrh	r3, [r3, #10]
 8008566:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800856a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800856e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6959      	ldr	r1, [r3, #20]
 8008576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800857a:	b29b      	uxth	r3, r3
 800857c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008580:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008584:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008588:	6800      	ldr	r0, [r0, #0]
 800858a:	f001 fb39 	bl	8009c00 <USB_WritePMA>
            ep->xfer_buff += len;
 800858e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	695a      	ldr	r2, [r3, #20]
 800859a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800859e:	441a      	add	r2, r3
 80085a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80085ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	6a1a      	ldr	r2, [r3, #32]
 80085b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d90f      	bls.n	80085e8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80085c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	6a1a      	ldr	r2, [r3, #32]
 80085d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085d8:	1ad2      	subs	r2, r2, r3
 80085da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	621a      	str	r2, [r3, #32]
 80085e6:	e00e      	b.n	8008606 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80085e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	6a1b      	ldr	r3, [r3, #32]
 80085f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80085f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2200      	movs	r2, #0
 8008604:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800860a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	785b      	ldrb	r3, [r3, #1]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d177      	bne.n	8008706 <USB_EPStartXfer+0x4c4>
 8008616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800861a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	61bb      	str	r3, [r7, #24]
 8008622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008626:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008630:	b29b      	uxth	r3, r3
 8008632:	461a      	mov	r2, r3
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	4413      	add	r3, r2
 8008638:	61bb      	str	r3, [r7, #24]
 800863a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800863e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	011a      	lsls	r2, r3, #4
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	4413      	add	r3, r2
 800864c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008650:	617b      	str	r3, [r7, #20]
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	881b      	ldrh	r3, [r3, #0]
 8008656:	b29b      	uxth	r3, r3
 8008658:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800865c:	b29a      	uxth	r2, r3
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	801a      	strh	r2, [r3, #0]
 8008662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008666:	2b3e      	cmp	r3, #62	; 0x3e
 8008668:	d921      	bls.n	80086ae <USB_EPStartXfer+0x46c>
 800866a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800866e:	095b      	lsrs	r3, r3, #5
 8008670:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008678:	f003 031f 	and.w	r3, r3, #31
 800867c:	2b00      	cmp	r3, #0
 800867e:	d104      	bne.n	800868a <USB_EPStartXfer+0x448>
 8008680:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008684:	3b01      	subs	r3, #1
 8008686:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	b29a      	uxth	r2, r3
 8008690:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008694:	b29b      	uxth	r3, r3
 8008696:	029b      	lsls	r3, r3, #10
 8008698:	b29b      	uxth	r3, r3
 800869a:	4313      	orrs	r3, r2
 800869c:	b29b      	uxth	r3, r3
 800869e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	801a      	strh	r2, [r3, #0]
 80086ac:	e056      	b.n	800875c <USB_EPStartXfer+0x51a>
 80086ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d10a      	bne.n	80086cc <USB_EPStartXfer+0x48a>
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	881b      	ldrh	r3, [r3, #0]
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086c4:	b29a      	uxth	r2, r3
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	801a      	strh	r2, [r3, #0]
 80086ca:	e047      	b.n	800875c <USB_EPStartXfer+0x51a>
 80086cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086d0:	085b      	lsrs	r3, r3, #1
 80086d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80086d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d004      	beq.n	80086ec <USB_EPStartXfer+0x4aa>
 80086e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086e6:	3301      	adds	r3, #1
 80086e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	881b      	ldrh	r3, [r3, #0]
 80086f0:	b29a      	uxth	r2, r3
 80086f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	029b      	lsls	r3, r3, #10
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	4313      	orrs	r3, r2
 80086fe:	b29a      	uxth	r2, r3
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	801a      	strh	r2, [r3, #0]
 8008704:	e02a      	b.n	800875c <USB_EPStartXfer+0x51a>
 8008706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800870a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	785b      	ldrb	r3, [r3, #1]
 8008712:	2b01      	cmp	r3, #1
 8008714:	d122      	bne.n	800875c <USB_EPStartXfer+0x51a>
 8008716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800871a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	623b      	str	r3, [r7, #32]
 8008722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008726:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008730:	b29b      	uxth	r3, r3
 8008732:	461a      	mov	r2, r3
 8008734:	6a3b      	ldr	r3, [r7, #32]
 8008736:	4413      	add	r3, r2
 8008738:	623b      	str	r3, [r7, #32]
 800873a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800873e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	011a      	lsls	r2, r3, #4
 8008748:	6a3b      	ldr	r3, [r7, #32]
 800874a:	4413      	add	r3, r2
 800874c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008750:	61fb      	str	r3, [r7, #28]
 8008752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008756:	b29a      	uxth	r2, r3
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800875c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	891b      	ldrh	r3, [r3, #8]
 8008768:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800876c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	6959      	ldr	r1, [r3, #20]
 8008778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800877c:	b29b      	uxth	r3, r3
 800877e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008782:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008786:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800878a:	6800      	ldr	r0, [r0, #0]
 800878c:	f001 fa38 	bl	8009c00 <USB_WritePMA>
 8008790:	e3ee      	b.n	8008f70 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	785b      	ldrb	r3, [r3, #1]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d177      	bne.n	8008892 <USB_EPStartXfer+0x650>
 80087a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80087ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087bc:	b29b      	uxth	r3, r3
 80087be:	461a      	mov	r2, r3
 80087c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087c2:	4413      	add	r3, r2
 80087c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80087c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	011a      	lsls	r2, r3, #4
 80087d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087d6:	4413      	add	r3, r2
 80087d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80087dc:	647b      	str	r3, [r7, #68]	; 0x44
 80087de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087e0:	881b      	ldrh	r3, [r3, #0]
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087ec:	801a      	strh	r2, [r3, #0]
 80087ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087f2:	2b3e      	cmp	r3, #62	; 0x3e
 80087f4:	d921      	bls.n	800883a <USB_EPStartXfer+0x5f8>
 80087f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087fa:	095b      	lsrs	r3, r3, #5
 80087fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008804:	f003 031f 	and.w	r3, r3, #31
 8008808:	2b00      	cmp	r3, #0
 800880a:	d104      	bne.n	8008816 <USB_EPStartXfer+0x5d4>
 800880c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008810:	3b01      	subs	r3, #1
 8008812:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008818:	881b      	ldrh	r3, [r3, #0]
 800881a:	b29a      	uxth	r2, r3
 800881c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008820:	b29b      	uxth	r3, r3
 8008822:	029b      	lsls	r3, r3, #10
 8008824:	b29b      	uxth	r3, r3
 8008826:	4313      	orrs	r3, r2
 8008828:	b29b      	uxth	r3, r3
 800882a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800882e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008832:	b29a      	uxth	r2, r3
 8008834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008836:	801a      	strh	r2, [r3, #0]
 8008838:	e056      	b.n	80088e8 <USB_EPStartXfer+0x6a6>
 800883a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10a      	bne.n	8008858 <USB_EPStartXfer+0x616>
 8008842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008844:	881b      	ldrh	r3, [r3, #0]
 8008846:	b29b      	uxth	r3, r3
 8008848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800884c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008850:	b29a      	uxth	r2, r3
 8008852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008854:	801a      	strh	r2, [r3, #0]
 8008856:	e047      	b.n	80088e8 <USB_EPStartXfer+0x6a6>
 8008858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800885c:	085b      	lsrs	r3, r3, #1
 800885e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008866:	f003 0301 	and.w	r3, r3, #1
 800886a:	2b00      	cmp	r3, #0
 800886c:	d004      	beq.n	8008878 <USB_EPStartXfer+0x636>
 800886e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008872:	3301      	adds	r3, #1
 8008874:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800887a:	881b      	ldrh	r3, [r3, #0]
 800887c:	b29a      	uxth	r2, r3
 800887e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008882:	b29b      	uxth	r3, r3
 8008884:	029b      	lsls	r3, r3, #10
 8008886:	b29b      	uxth	r3, r3
 8008888:	4313      	orrs	r3, r2
 800888a:	b29a      	uxth	r2, r3
 800888c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800888e:	801a      	strh	r2, [r3, #0]
 8008890:	e02a      	b.n	80088e8 <USB_EPStartXfer+0x6a6>
 8008892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008896:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	785b      	ldrb	r3, [r3, #1]
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d122      	bne.n	80088e8 <USB_EPStartXfer+0x6a6>
 80088a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	653b      	str	r3, [r7, #80]	; 0x50
 80088ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088bc:	b29b      	uxth	r3, r3
 80088be:	461a      	mov	r2, r3
 80088c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088c2:	4413      	add	r3, r2
 80088c4:	653b      	str	r3, [r7, #80]	; 0x50
 80088c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	011a      	lsls	r2, r3, #4
 80088d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088d6:	4413      	add	r3, r2
 80088d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80088dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088e2:	b29a      	uxth	r2, r3
 80088e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80088e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	891b      	ldrh	r3, [r3, #8]
 80088f4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	6959      	ldr	r1, [r3, #20]
 8008904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008908:	b29b      	uxth	r3, r3
 800890a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800890e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008912:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008916:	6800      	ldr	r0, [r0, #0]
 8008918:	f001 f972 	bl	8009c00 <USB_WritePMA>
            ep->xfer_buff += len;
 800891c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	695a      	ldr	r2, [r3, #20]
 8008928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800892c:	441a      	add	r2, r3
 800892e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008932:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800893a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800893e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6a1a      	ldr	r2, [r3, #32]
 8008946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800894a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	429a      	cmp	r2, r3
 8008954:	d90f      	bls.n	8008976 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800895a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	6a1a      	ldr	r2, [r3, #32]
 8008962:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008966:	1ad2      	subs	r2, r2, r3
 8008968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800896c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	621a      	str	r2, [r3, #32]
 8008974:	e00e      	b.n	8008994 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800897a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6a1b      	ldr	r3, [r3, #32]
 8008982:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800898a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2200      	movs	r2, #0
 8008992:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008998:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	643b      	str	r3, [r7, #64]	; 0x40
 80089a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	785b      	ldrb	r3, [r3, #1]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d177      	bne.n	8008aa0 <USB_EPStartXfer+0x85e>
 80089b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80089bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	461a      	mov	r2, r3
 80089ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d0:	4413      	add	r3, r2
 80089d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80089d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	011a      	lsls	r2, r3, #4
 80089e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e4:	4413      	add	r3, r2
 80089e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089ea:	637b      	str	r3, [r7, #52]	; 0x34
 80089ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ee:	881b      	ldrh	r3, [r3, #0]
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089fa:	801a      	strh	r2, [r3, #0]
 80089fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a00:	2b3e      	cmp	r3, #62	; 0x3e
 8008a02:	d921      	bls.n	8008a48 <USB_EPStartXfer+0x806>
 8008a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a08:	095b      	lsrs	r3, r3, #5
 8008a0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a12:	f003 031f 	and.w	r3, r3, #31
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d104      	bne.n	8008a24 <USB_EPStartXfer+0x7e2>
 8008a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a26:	881b      	ldrh	r3, [r3, #0]
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	029b      	lsls	r3, r3, #10
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	4313      	orrs	r3, r2
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a40:	b29a      	uxth	r2, r3
 8008a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a44:	801a      	strh	r2, [r3, #0]
 8008a46:	e050      	b.n	8008aea <USB_EPStartXfer+0x8a8>
 8008a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d10a      	bne.n	8008a66 <USB_EPStartXfer+0x824>
 8008a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a52:	881b      	ldrh	r3, [r3, #0]
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a62:	801a      	strh	r2, [r3, #0]
 8008a64:	e041      	b.n	8008aea <USB_EPStartXfer+0x8a8>
 8008a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a6a:	085b      	lsrs	r3, r3, #1
 8008a6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a74:	f003 0301 	and.w	r3, r3, #1
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d004      	beq.n	8008a86 <USB_EPStartXfer+0x844>
 8008a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a80:	3301      	adds	r3, #1
 8008a82:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a88:	881b      	ldrh	r3, [r3, #0]
 8008a8a:	b29a      	uxth	r2, r3
 8008a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	029b      	lsls	r3, r3, #10
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	4313      	orrs	r3, r2
 8008a98:	b29a      	uxth	r2, r3
 8008a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a9c:	801a      	strh	r2, [r3, #0]
 8008a9e:	e024      	b.n	8008aea <USB_EPStartXfer+0x8a8>
 8008aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	785b      	ldrb	r3, [r3, #1]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d11c      	bne.n	8008aea <USB_EPStartXfer+0x8a8>
 8008ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ab4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ac4:	4413      	add	r3, r2
 8008ac6:	643b      	str	r3, [r7, #64]	; 0x40
 8008ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008acc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	011a      	lsls	r2, r3, #4
 8008ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ad8:	4413      	add	r3, r2
 8008ada:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ae8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008aea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	895b      	ldrh	r3, [r3, #10]
 8008af6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008afe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6959      	ldr	r1, [r3, #20]
 8008b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008b10:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008b14:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008b18:	6800      	ldr	r0, [r0, #0]
 8008b1a:	f001 f871 	bl	8009c00 <USB_WritePMA>
 8008b1e:	e227      	b.n	8008f70 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	6a1b      	ldr	r3, [r3, #32]
 8008b2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	4413      	add	r3, r2
 8008b4a:	881b      	ldrh	r3, [r3, #0]
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b56:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	441a      	add	r2, r3
 8008b74:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008b78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	461a      	mov	r2, r3
 8008baa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bac:	4413      	add	r3, r2
 8008bae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	011a      	lsls	r2, r3, #4
 8008bbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bc0:	4413      	add	r3, r2
 8008bc2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008bc6:	65bb      	str	r3, [r7, #88]	; 0x58
 8008bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bd0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	891b      	ldrh	r3, [r3, #8]
 8008bde:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008be6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	6959      	ldr	r1, [r3, #20]
 8008bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008bf8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008bfc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008c00:	6800      	ldr	r0, [r0, #0]
 8008c02:	f000 fffd 	bl	8009c00 <USB_WritePMA>
 8008c06:	e1b3      	b.n	8008f70 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	6a1a      	ldr	r2, [r3, #32]
 8008c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c18:	1ad2      	subs	r2, r2, r3
 8008c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4413      	add	r3, r2
 8008c40:	881b      	ldrh	r3, [r3, #0]
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f000 80c6 	beq.w	8008dda <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	673b      	str	r3, [r7, #112]	; 0x70
 8008c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	785b      	ldrb	r3, [r3, #1]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d177      	bne.n	8008d5a <USB_EPStartXfer+0xb18>
 8008c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	461a      	mov	r2, r3
 8008c88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c8a:	4413      	add	r3, r2
 8008c8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	011a      	lsls	r2, r3, #4
 8008c9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c9e:	4413      	add	r3, r2
 8008ca0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008ca4:	667b      	str	r3, [r7, #100]	; 0x64
 8008ca6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ca8:	881b      	ldrh	r3, [r3, #0]
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cb4:	801a      	strh	r2, [r3, #0]
 8008cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cba:	2b3e      	cmp	r3, #62	; 0x3e
 8008cbc:	d921      	bls.n	8008d02 <USB_EPStartXfer+0xac0>
 8008cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cc2:	095b      	lsrs	r3, r3, #5
 8008cc4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ccc:	f003 031f 	and.w	r3, r3, #31
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d104      	bne.n	8008cde <USB_EPStartXfer+0xa9c>
 8008cd4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008cde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ce0:	881b      	ldrh	r3, [r3, #0]
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	029b      	lsls	r3, r3, #10
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cfe:	801a      	strh	r2, [r3, #0]
 8008d00:	e050      	b.n	8008da4 <USB_EPStartXfer+0xb62>
 8008d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d10a      	bne.n	8008d20 <USB_EPStartXfer+0xade>
 8008d0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d0c:	881b      	ldrh	r3, [r3, #0]
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d18:	b29a      	uxth	r2, r3
 8008d1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d1c:	801a      	strh	r2, [r3, #0]
 8008d1e:	e041      	b.n	8008da4 <USB_EPStartXfer+0xb62>
 8008d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d24:	085b      	lsrs	r3, r3, #1
 8008d26:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d2e:	f003 0301 	and.w	r3, r3, #1
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d004      	beq.n	8008d40 <USB_EPStartXfer+0xafe>
 8008d36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008d40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d42:	881b      	ldrh	r3, [r3, #0]
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	029b      	lsls	r3, r3, #10
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	4313      	orrs	r3, r2
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d56:	801a      	strh	r2, [r3, #0]
 8008d58:	e024      	b.n	8008da4 <USB_EPStartXfer+0xb62>
 8008d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	785b      	ldrb	r3, [r3, #1]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d11c      	bne.n	8008da4 <USB_EPStartXfer+0xb62>
 8008d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d7e:	4413      	add	r3, r2
 8008d80:	673b      	str	r3, [r7, #112]	; 0x70
 8008d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	011a      	lsls	r2, r3, #4
 8008d90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d92:	4413      	add	r3, r2
 8008d94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008d98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008da2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	895b      	ldrh	r3, [r3, #10]
 8008db0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	6959      	ldr	r1, [r3, #20]
 8008dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008dca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008dce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008dd2:	6800      	ldr	r0, [r0, #0]
 8008dd4:	f000 ff14 	bl	8009c00 <USB_WritePMA>
 8008dd8:	e0ca      	b.n	8008f70 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	785b      	ldrb	r3, [r3, #1]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d177      	bne.n	8008eda <USB_EPStartXfer+0xc98>
 8008dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	461a      	mov	r2, r3
 8008e08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e0a:	4413      	add	r3, r2
 8008e0c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	011a      	lsls	r2, r3, #4
 8008e1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e1e:	4413      	add	r3, r2
 8008e20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e24:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e28:	881b      	ldrh	r3, [r3, #0]
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e34:	801a      	strh	r2, [r3, #0]
 8008e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e3a:	2b3e      	cmp	r3, #62	; 0x3e
 8008e3c:	d921      	bls.n	8008e82 <USB_EPStartXfer+0xc40>
 8008e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e42:	095b      	lsrs	r3, r3, #5
 8008e44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e4c:	f003 031f 	and.w	r3, r3, #31
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d104      	bne.n	8008e5e <USB_EPStartXfer+0xc1c>
 8008e54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008e5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e60:	881b      	ldrh	r3, [r3, #0]
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	029b      	lsls	r3, r3, #10
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e7e:	801a      	strh	r2, [r3, #0]
 8008e80:	e05c      	b.n	8008f3c <USB_EPStartXfer+0xcfa>
 8008e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d10a      	bne.n	8008ea0 <USB_EPStartXfer+0xc5e>
 8008e8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e8c:	881b      	ldrh	r3, [r3, #0]
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e9c:	801a      	strh	r2, [r3, #0]
 8008e9e:	e04d      	b.n	8008f3c <USB_EPStartXfer+0xcfa>
 8008ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ea4:	085b      	lsrs	r3, r3, #1
 8008ea6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eae:	f003 0301 	and.w	r3, r3, #1
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d004      	beq.n	8008ec0 <USB_EPStartXfer+0xc7e>
 8008eb6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008eba:	3301      	adds	r3, #1
 8008ebc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008ec0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ec2:	881b      	ldrh	r3, [r3, #0]
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	029b      	lsls	r3, r3, #10
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ed6:	801a      	strh	r2, [r3, #0]
 8008ed8:	e030      	b.n	8008f3c <USB_EPStartXfer+0xcfa>
 8008eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	785b      	ldrb	r3, [r3, #1]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d128      	bne.n	8008f3c <USB_EPStartXfer+0xcfa>
 8008eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008efc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	461a      	mov	r2, r3
 8008f0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f0e:	4413      	add	r3, r2
 8008f10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	011a      	lsls	r2, r3, #4
 8008f22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f26:	4413      	add	r3, r2
 8008f28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f3a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	891b      	ldrh	r3, [r3, #8]
 8008f48:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	6959      	ldr	r1, [r3, #20]
 8008f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008f62:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008f66:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008f6a:	6800      	ldr	r0, [r0, #0]
 8008f6c:	f000 fe48 	bl	8009c00 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	4413      	add	r3, r2
 8008f8a:	881b      	ldrh	r3, [r3, #0]
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f96:	817b      	strh	r3, [r7, #10]
 8008f98:	897b      	ldrh	r3, [r7, #10]
 8008f9a:	f083 0310 	eor.w	r3, r3, #16
 8008f9e:	817b      	strh	r3, [r7, #10]
 8008fa0:	897b      	ldrh	r3, [r7, #10]
 8008fa2:	f083 0320 	eor.w	r3, r3, #32
 8008fa6:	817b      	strh	r3, [r7, #10]
 8008fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	441a      	add	r2, r3
 8008fc2:	897b      	ldrh	r3, [r7, #10]
 8008fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	8013      	strh	r3, [r2, #0]
 8008fd8:	f000 bcde 	b.w	8009998 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	7b1b      	ldrb	r3, [r3, #12]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f040 80bb 	bne.w	8009164 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	699a      	ldr	r2, [r3, #24]
 8008ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ffe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	691b      	ldr	r3, [r3, #16]
 8009006:	429a      	cmp	r2, r3
 8009008:	d917      	bls.n	800903a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800900a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800900e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800901a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800901e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	699a      	ldr	r2, [r3, #24]
 8009026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800902a:	1ad2      	subs	r2, r2, r3
 800902c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	619a      	str	r2, [r3, #24]
 8009038:	e00e      	b.n	8009058 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800903a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800903e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800904a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800904e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	2200      	movs	r2, #0
 8009056:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800905c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800906a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009074:	b29b      	uxth	r3, r3
 8009076:	461a      	mov	r2, r3
 8009078:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800907c:	4413      	add	r3, r2
 800907e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009086:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	011a      	lsls	r2, r3, #4
 8009090:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009094:	4413      	add	r3, r2
 8009096:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800909a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800909e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090a2:	881b      	ldrh	r3, [r3, #0]
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090aa:	b29a      	uxth	r2, r3
 80090ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090b0:	801a      	strh	r2, [r3, #0]
 80090b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090b6:	2b3e      	cmp	r3, #62	; 0x3e
 80090b8:	d924      	bls.n	8009104 <USB_EPStartXfer+0xec2>
 80090ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090be:	095b      	lsrs	r3, r3, #5
 80090c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80090c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090c8:	f003 031f 	and.w	r3, r3, #31
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d104      	bne.n	80090da <USB_EPStartXfer+0xe98>
 80090d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80090d4:	3b01      	subs	r3, #1
 80090d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80090da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	b29a      	uxth	r2, r3
 80090e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	029b      	lsls	r3, r3, #10
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	4313      	orrs	r3, r2
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090fe:	801a      	strh	r2, [r3, #0]
 8009100:	f000 bc10 	b.w	8009924 <USB_EPStartXfer+0x16e2>
 8009104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009108:	2b00      	cmp	r3, #0
 800910a:	d10c      	bne.n	8009126 <USB_EPStartXfer+0xee4>
 800910c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009110:	881b      	ldrh	r3, [r3, #0]
 8009112:	b29b      	uxth	r3, r3
 8009114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800911c:	b29a      	uxth	r2, r3
 800911e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009122:	801a      	strh	r2, [r3, #0]
 8009124:	e3fe      	b.n	8009924 <USB_EPStartXfer+0x16e2>
 8009126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800912a:	085b      	lsrs	r3, r3, #1
 800912c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009134:	f003 0301 	and.w	r3, r3, #1
 8009138:	2b00      	cmp	r3, #0
 800913a:	d004      	beq.n	8009146 <USB_EPStartXfer+0xf04>
 800913c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009140:	3301      	adds	r3, #1
 8009142:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009146:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800914a:	881b      	ldrh	r3, [r3, #0]
 800914c:	b29a      	uxth	r2, r3
 800914e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009152:	b29b      	uxth	r3, r3
 8009154:	029b      	lsls	r3, r3, #10
 8009156:	b29b      	uxth	r3, r3
 8009158:	4313      	orrs	r3, r2
 800915a:	b29a      	uxth	r2, r3
 800915c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009160:	801a      	strh	r2, [r3, #0]
 8009162:	e3df      	b.n	8009924 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	78db      	ldrb	r3, [r3, #3]
 8009170:	2b02      	cmp	r3, #2
 8009172:	f040 8218 	bne.w	80095a6 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800917a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	785b      	ldrb	r3, [r3, #1]
 8009182:	2b00      	cmp	r3, #0
 8009184:	f040 809d 	bne.w	80092c2 <USB_EPStartXfer+0x1080>
 8009188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800918c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800919a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	461a      	mov	r2, r3
 80091a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091ac:	4413      	add	r3, r2
 80091ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80091b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	011a      	lsls	r2, r3, #4
 80091c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091c4:	4413      	add	r3, r2
 80091c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80091ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80091ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80091d2:	881b      	ldrh	r3, [r3, #0]
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091da:	b29a      	uxth	r2, r3
 80091dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80091e0:	801a      	strh	r2, [r3, #0]
 80091e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	2b3e      	cmp	r3, #62	; 0x3e
 80091f0:	d92b      	bls.n	800924a <USB_EPStartXfer+0x1008>
 80091f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	095b      	lsrs	r3, r3, #5
 8009200:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	f003 031f 	and.w	r3, r3, #31
 8009214:	2b00      	cmp	r3, #0
 8009216:	d104      	bne.n	8009222 <USB_EPStartXfer+0xfe0>
 8009218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800921c:	3b01      	subs	r3, #1
 800921e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009222:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009226:	881b      	ldrh	r3, [r3, #0]
 8009228:	b29a      	uxth	r2, r3
 800922a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800922e:	b29b      	uxth	r3, r3
 8009230:	029b      	lsls	r3, r3, #10
 8009232:	b29b      	uxth	r3, r3
 8009234:	4313      	orrs	r3, r2
 8009236:	b29b      	uxth	r3, r3
 8009238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800923c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009240:	b29a      	uxth	r2, r3
 8009242:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009246:	801a      	strh	r2, [r3, #0]
 8009248:	e070      	b.n	800932c <USB_EPStartXfer+0x10ea>
 800924a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800924e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	691b      	ldr	r3, [r3, #16]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10c      	bne.n	8009274 <USB_EPStartXfer+0x1032>
 800925a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800925e:	881b      	ldrh	r3, [r3, #0]
 8009260:	b29b      	uxth	r3, r3
 8009262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800926a:	b29a      	uxth	r2, r3
 800926c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009270:	801a      	strh	r2, [r3, #0]
 8009272:	e05b      	b.n	800932c <USB_EPStartXfer+0x10ea>
 8009274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	085b      	lsrs	r3, r3, #1
 8009282:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800928a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	f003 0301 	and.w	r3, r3, #1
 8009296:	2b00      	cmp	r3, #0
 8009298:	d004      	beq.n	80092a4 <USB_EPStartXfer+0x1062>
 800929a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800929e:	3301      	adds	r3, #1
 80092a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80092a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80092a8:	881b      	ldrh	r3, [r3, #0]
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	029b      	lsls	r3, r3, #10
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	4313      	orrs	r3, r2
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80092be:	801a      	strh	r2, [r3, #0]
 80092c0:	e034      	b.n	800932c <USB_EPStartXfer+0x10ea>
 80092c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	785b      	ldrb	r3, [r3, #1]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d12c      	bne.n	800932c <USB_EPStartXfer+0x10ea>
 80092d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80092e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	461a      	mov	r2, r3
 80092f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80092f6:	4413      	add	r3, r2
 80092f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80092fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009300:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	011a      	lsls	r2, r3, #4
 800930a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800930e:	4413      	add	r3, r2
 8009310:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009314:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800931c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	b29a      	uxth	r2, r3
 8009326:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800932a:	801a      	strh	r2, [r3, #0]
 800932c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009330:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800933a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800933e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	785b      	ldrb	r3, [r3, #1]
 8009346:	2b00      	cmp	r3, #0
 8009348:	f040 809d 	bne.w	8009486 <USB_EPStartXfer+0x1244>
 800934c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009350:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800935a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800935e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009368:	b29b      	uxth	r3, r3
 800936a:	461a      	mov	r2, r3
 800936c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009370:	4413      	add	r3, r2
 8009372:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800937a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	011a      	lsls	r2, r3, #4
 8009384:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009388:	4413      	add	r3, r2
 800938a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800938e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009392:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009396:	881b      	ldrh	r3, [r3, #0]
 8009398:	b29b      	uxth	r3, r3
 800939a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800939e:	b29a      	uxth	r2, r3
 80093a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093a4:	801a      	strh	r2, [r3, #0]
 80093a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	2b3e      	cmp	r3, #62	; 0x3e
 80093b4:	d92b      	bls.n	800940e <USB_EPStartXfer+0x11cc>
 80093b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	095b      	lsrs	r3, r3, #5
 80093c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80093c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	f003 031f 	and.w	r3, r3, #31
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d104      	bne.n	80093e6 <USB_EPStartXfer+0x11a4>
 80093dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093e0:	3b01      	subs	r3, #1
 80093e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80093e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093ea:	881b      	ldrh	r3, [r3, #0]
 80093ec:	b29a      	uxth	r2, r3
 80093ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	029b      	lsls	r3, r3, #10
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	4313      	orrs	r3, r2
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009404:	b29a      	uxth	r2, r3
 8009406:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800940a:	801a      	strh	r2, [r3, #0]
 800940c:	e069      	b.n	80094e2 <USB_EPStartXfer+0x12a0>
 800940e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10c      	bne.n	8009438 <USB_EPStartXfer+0x11f6>
 800941e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009422:	881b      	ldrh	r3, [r3, #0]
 8009424:	b29b      	uxth	r3, r3
 8009426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800942a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800942e:	b29a      	uxth	r2, r3
 8009430:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009434:	801a      	strh	r2, [r3, #0]
 8009436:	e054      	b.n	80094e2 <USB_EPStartXfer+0x12a0>
 8009438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800943c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	691b      	ldr	r3, [r3, #16]
 8009444:	085b      	lsrs	r3, r3, #1
 8009446:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800944a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800944e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	f003 0301 	and.w	r3, r3, #1
 800945a:	2b00      	cmp	r3, #0
 800945c:	d004      	beq.n	8009468 <USB_EPStartXfer+0x1226>
 800945e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009462:	3301      	adds	r3, #1
 8009464:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009468:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800946c:	881b      	ldrh	r3, [r3, #0]
 800946e:	b29a      	uxth	r2, r3
 8009470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009474:	b29b      	uxth	r3, r3
 8009476:	029b      	lsls	r3, r3, #10
 8009478:	b29b      	uxth	r3, r3
 800947a:	4313      	orrs	r3, r2
 800947c:	b29a      	uxth	r2, r3
 800947e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009482:	801a      	strh	r2, [r3, #0]
 8009484:	e02d      	b.n	80094e2 <USB_EPStartXfer+0x12a0>
 8009486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800948a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	785b      	ldrb	r3, [r3, #1]
 8009492:	2b01      	cmp	r3, #1
 8009494:	d125      	bne.n	80094e2 <USB_EPStartXfer+0x12a0>
 8009496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800949a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	461a      	mov	r2, r3
 80094a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80094ac:	4413      	add	r3, r2
 80094ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80094b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	011a      	lsls	r2, r3, #4
 80094c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80094c4:	4413      	add	r3, r2
 80094c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80094ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80094ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	b29a      	uxth	r2, r3
 80094dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80094e0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80094e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	69db      	ldr	r3, [r3, #28]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f000 8218 	beq.w	8009924 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80094f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	4413      	add	r3, r2
 800950e:	881b      	ldrh	r3, [r3, #0]
 8009510:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009514:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800951c:	2b00      	cmp	r3, #0
 800951e:	d005      	beq.n	800952c <USB_EPStartXfer+0x12ea>
 8009520:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10d      	bne.n	8009548 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800952c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009534:	2b00      	cmp	r3, #0
 8009536:	f040 81f5 	bne.w	8009924 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800953a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800953e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009542:	2b00      	cmp	r3, #0
 8009544:	f040 81ee 	bne.w	8009924 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800954c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4413      	add	r3, r2
 8009562:	881b      	ldrh	r3, [r3, #0]
 8009564:	b29b      	uxth	r3, r3
 8009566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800956a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800956e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009576:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	441a      	add	r2, r3
 800958c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009590:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009594:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800959c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	8013      	strh	r3, [r2, #0]
 80095a4:	e1be      	b.n	8009924 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80095a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	78db      	ldrb	r3, [r3, #3]
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	f040 81b4 	bne.w	8009920 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80095b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	699a      	ldr	r2, [r3, #24]
 80095c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d917      	bls.n	8009604 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80095d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	691b      	ldr	r3, [r3, #16]
 80095e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80095e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	699a      	ldr	r2, [r3, #24]
 80095f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095f4:	1ad2      	subs	r2, r2, r3
 80095f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	619a      	str	r2, [r3, #24]
 8009602:	e00e      	b.n	8009622 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	699b      	ldr	r3, [r3, #24]
 8009610:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009618:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2200      	movs	r2, #0
 8009620:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009626:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	785b      	ldrb	r3, [r3, #1]
 800962e:	2b00      	cmp	r3, #0
 8009630:	f040 8085 	bne.w	800973e <USB_EPStartXfer+0x14fc>
 8009634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009638:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009646:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009650:	b29b      	uxth	r3, r3
 8009652:	461a      	mov	r2, r3
 8009654:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009658:	4413      	add	r3, r2
 800965a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800965e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	011a      	lsls	r2, r3, #4
 800966c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009670:	4413      	add	r3, r2
 8009672:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009676:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800967a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800967e:	881b      	ldrh	r3, [r3, #0]
 8009680:	b29b      	uxth	r3, r3
 8009682:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009686:	b29a      	uxth	r2, r3
 8009688:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800968c:	801a      	strh	r2, [r3, #0]
 800968e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009692:	2b3e      	cmp	r3, #62	; 0x3e
 8009694:	d923      	bls.n	80096de <USB_EPStartXfer+0x149c>
 8009696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800969a:	095b      	lsrs	r3, r3, #5
 800969c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80096a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096a4:	f003 031f 	and.w	r3, r3, #31
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d104      	bne.n	80096b6 <USB_EPStartXfer+0x1474>
 80096ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096b0:	3b01      	subs	r3, #1
 80096b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80096b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096ba:	881b      	ldrh	r3, [r3, #0]
 80096bc:	b29a      	uxth	r2, r3
 80096be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	029b      	lsls	r3, r3, #10
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	4313      	orrs	r3, r2
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096da:	801a      	strh	r2, [r3, #0]
 80096dc:	e060      	b.n	80097a0 <USB_EPStartXfer+0x155e>
 80096de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d10c      	bne.n	8009700 <USB_EPStartXfer+0x14be>
 80096e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096ea:	881b      	ldrh	r3, [r3, #0]
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096f6:	b29a      	uxth	r2, r3
 80096f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096fc:	801a      	strh	r2, [r3, #0]
 80096fe:	e04f      	b.n	80097a0 <USB_EPStartXfer+0x155e>
 8009700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009704:	085b      	lsrs	r3, r3, #1
 8009706:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800970a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800970e:	f003 0301 	and.w	r3, r3, #1
 8009712:	2b00      	cmp	r3, #0
 8009714:	d004      	beq.n	8009720 <USB_EPStartXfer+0x14de>
 8009716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800971a:	3301      	adds	r3, #1
 800971c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009720:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009724:	881b      	ldrh	r3, [r3, #0]
 8009726:	b29a      	uxth	r2, r3
 8009728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800972c:	b29b      	uxth	r3, r3
 800972e:	029b      	lsls	r3, r3, #10
 8009730:	b29b      	uxth	r3, r3
 8009732:	4313      	orrs	r3, r2
 8009734:	b29a      	uxth	r2, r3
 8009736:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800973a:	801a      	strh	r2, [r3, #0]
 800973c:	e030      	b.n	80097a0 <USB_EPStartXfer+0x155e>
 800973e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	785b      	ldrb	r3, [r3, #1]
 800974a:	2b01      	cmp	r3, #1
 800974c:	d128      	bne.n	80097a0 <USB_EPStartXfer+0x155e>
 800974e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009752:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800975c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009760:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800976a:	b29b      	uxth	r3, r3
 800976c:	461a      	mov	r2, r3
 800976e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009772:	4413      	add	r3, r2
 8009774:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800977c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	011a      	lsls	r2, r3, #4
 8009786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800978a:	4413      	add	r3, r2
 800978c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009790:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009798:	b29a      	uxth	r2, r3
 800979a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800979e:	801a      	strh	r2, [r3, #0]
 80097a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80097ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	785b      	ldrb	r3, [r3, #1]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	f040 8085 	bne.w	80098ca <USB_EPStartXfer+0x1688>
 80097c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80097ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097dc:	b29b      	uxth	r3, r3
 80097de:	461a      	mov	r2, r3
 80097e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80097e4:	4413      	add	r3, r2
 80097e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80097ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	011a      	lsls	r2, r3, #4
 80097f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80097fc:	4413      	add	r3, r2
 80097fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009802:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009806:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800980a:	881b      	ldrh	r3, [r3, #0]
 800980c:	b29b      	uxth	r3, r3
 800980e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009812:	b29a      	uxth	r2, r3
 8009814:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009818:	801a      	strh	r2, [r3, #0]
 800981a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800981e:	2b3e      	cmp	r3, #62	; 0x3e
 8009820:	d923      	bls.n	800986a <USB_EPStartXfer+0x1628>
 8009822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009826:	095b      	lsrs	r3, r3, #5
 8009828:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800982c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009830:	f003 031f 	and.w	r3, r3, #31
 8009834:	2b00      	cmp	r3, #0
 8009836:	d104      	bne.n	8009842 <USB_EPStartXfer+0x1600>
 8009838:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800983c:	3b01      	subs	r3, #1
 800983e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009842:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009846:	881b      	ldrh	r3, [r3, #0]
 8009848:	b29a      	uxth	r2, r3
 800984a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800984e:	b29b      	uxth	r3, r3
 8009850:	029b      	lsls	r3, r3, #10
 8009852:	b29b      	uxth	r3, r3
 8009854:	4313      	orrs	r3, r2
 8009856:	b29b      	uxth	r3, r3
 8009858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800985c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009860:	b29a      	uxth	r2, r3
 8009862:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009866:	801a      	strh	r2, [r3, #0]
 8009868:	e05c      	b.n	8009924 <USB_EPStartXfer+0x16e2>
 800986a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800986e:	2b00      	cmp	r3, #0
 8009870:	d10c      	bne.n	800988c <USB_EPStartXfer+0x164a>
 8009872:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009876:	881b      	ldrh	r3, [r3, #0]
 8009878:	b29b      	uxth	r3, r3
 800987a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800987e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009882:	b29a      	uxth	r2, r3
 8009884:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009888:	801a      	strh	r2, [r3, #0]
 800988a:	e04b      	b.n	8009924 <USB_EPStartXfer+0x16e2>
 800988c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009890:	085b      	lsrs	r3, r3, #1
 8009892:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800989a:	f003 0301 	and.w	r3, r3, #1
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d004      	beq.n	80098ac <USB_EPStartXfer+0x166a>
 80098a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098a6:	3301      	adds	r3, #1
 80098a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80098ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80098b0:	881b      	ldrh	r3, [r3, #0]
 80098b2:	b29a      	uxth	r2, r3
 80098b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	029b      	lsls	r3, r3, #10
 80098bc:	b29b      	uxth	r3, r3
 80098be:	4313      	orrs	r3, r2
 80098c0:	b29a      	uxth	r2, r3
 80098c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80098c6:	801a      	strh	r2, [r3, #0]
 80098c8:	e02c      	b.n	8009924 <USB_EPStartXfer+0x16e2>
 80098ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	785b      	ldrb	r3, [r3, #1]
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d124      	bne.n	8009924 <USB_EPStartXfer+0x16e2>
 80098da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	461a      	mov	r2, r3
 80098ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80098f0:	4413      	add	r3, r2
 80098f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80098f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	011a      	lsls	r2, r3, #4
 8009904:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009908:	4413      	add	r3, r2
 800990a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800990e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009916:	b29a      	uxth	r2, r3
 8009918:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800991c:	801a      	strh	r2, [r3, #0]
 800991e:	e001      	b.n	8009924 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	e03a      	b.n	800999a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009928:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009932:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	009b      	lsls	r3, r3, #2
 800993c:	4413      	add	r3, r2
 800993e:	881b      	ldrh	r3, [r3, #0]
 8009940:	b29b      	uxth	r3, r3
 8009942:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800994a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800994e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009952:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009956:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800995a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800995e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009962:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800996a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	441a      	add	r2, r3
 8009980:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800998c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009994:	b29b      	uxth	r3, r3
 8009996:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	785b      	ldrb	r3, [r3, #1]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d020      	beq.n	80099f8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	4413      	add	r3, r2
 80099c0:	881b      	ldrh	r3, [r3, #0]
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099cc:	81bb      	strh	r3, [r7, #12]
 80099ce:	89bb      	ldrh	r3, [r7, #12]
 80099d0:	f083 0310 	eor.w	r3, r3, #16
 80099d4:	81bb      	strh	r3, [r7, #12]
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	441a      	add	r2, r3
 80099e0:	89bb      	ldrh	r3, [r7, #12]
 80099e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	8013      	strh	r3, [r2, #0]
 80099f6:	e01f      	b.n	8009a38 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	4413      	add	r3, r2
 8009a02:	881b      	ldrh	r3, [r3, #0]
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a0e:	81fb      	strh	r3, [r7, #14]
 8009a10:	89fb      	ldrh	r3, [r7, #14]
 8009a12:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009a16:	81fb      	strh	r3, [r7, #14]
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	441a      	add	r2, r3
 8009a22:	89fb      	ldrh	r3, [r7, #14]
 8009a24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3714      	adds	r7, #20
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr

08009a46 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009a46:	b480      	push	{r7}
 8009a48:	b087      	sub	sp, #28
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
 8009a4e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	7b1b      	ldrb	r3, [r3, #12]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	f040 809d 	bne.w	8009b94 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	785b      	ldrb	r3, [r3, #1]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d04c      	beq.n	8009afc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	4413      	add	r3, r2
 8009a6c:	881b      	ldrh	r3, [r3, #0]
 8009a6e:	823b      	strh	r3, [r7, #16]
 8009a70:	8a3b      	ldrh	r3, [r7, #16]
 8009a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d01b      	beq.n	8009ab2 <USB_EPClearStall+0x6c>
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	4413      	add	r3, r2
 8009a84:	881b      	ldrh	r3, [r3, #0]
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a90:	81fb      	strh	r3, [r7, #14]
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	441a      	add	r2, r3
 8009a9c:	89fb      	ldrh	r3, [r7, #14]
 8009a9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009aa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009aaa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	78db      	ldrb	r3, [r3, #3]
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d06c      	beq.n	8009b94 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	4413      	add	r3, r2
 8009ac4:	881b      	ldrh	r3, [r3, #0]
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ad0:	81bb      	strh	r3, [r7, #12]
 8009ad2:	89bb      	ldrh	r3, [r7, #12]
 8009ad4:	f083 0320 	eor.w	r3, r3, #32
 8009ad8:	81bb      	strh	r3, [r7, #12]
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	441a      	add	r2, r3
 8009ae4:	89bb      	ldrh	r3, [r7, #12]
 8009ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	8013      	strh	r3, [r2, #0]
 8009afa:	e04b      	b.n	8009b94 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	4413      	add	r3, r2
 8009b06:	881b      	ldrh	r3, [r3, #0]
 8009b08:	82fb      	strh	r3, [r7, #22]
 8009b0a:	8afb      	ldrh	r3, [r7, #22]
 8009b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d01b      	beq.n	8009b4c <USB_EPClearStall+0x106>
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	4413      	add	r3, r2
 8009b1e:	881b      	ldrh	r3, [r3, #0]
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b2a:	82bb      	strh	r3, [r7, #20]
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	441a      	add	r2, r3
 8009b36:	8abb      	ldrh	r3, [r7, #20]
 8009b38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	4413      	add	r3, r2
 8009b56:	881b      	ldrh	r3, [r3, #0]
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b62:	827b      	strh	r3, [r7, #18]
 8009b64:	8a7b      	ldrh	r3, [r7, #18]
 8009b66:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009b6a:	827b      	strh	r3, [r7, #18]
 8009b6c:	8a7b      	ldrh	r3, [r7, #18]
 8009b6e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009b72:	827b      	strh	r3, [r7, #18]
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	441a      	add	r2, r3
 8009b7e:	8a7b      	ldrh	r3, [r7, #18]
 8009b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009b94:	2300      	movs	r3, #0
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	371c      	adds	r7, #28
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr

08009ba2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009ba2:	b480      	push	{r7}
 8009ba4:	b083      	sub	sp, #12
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
 8009baa:	460b      	mov	r3, r1
 8009bac:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009bae:	78fb      	ldrb	r3, [r7, #3]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d103      	bne.n	8009bbc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2280      	movs	r2, #128	; 0x80
 8009bb8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	370c      	adds	r7, #12
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr

08009bca <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009bca:	b480      	push	{r7}
 8009bcc:	b083      	sub	sp, #12
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009bd2:	2300      	movs	r3, #0
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b085      	sub	sp, #20
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3714      	adds	r7, #20
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr

08009c00 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b08b      	sub	sp, #44	; 0x2c
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	60b9      	str	r1, [r7, #8]
 8009c0a:	4611      	mov	r1, r2
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	460b      	mov	r3, r1
 8009c10:	80fb      	strh	r3, [r7, #6]
 8009c12:	4613      	mov	r3, r2
 8009c14:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009c16:	88bb      	ldrh	r3, [r7, #4]
 8009c18:	3301      	adds	r3, #1
 8009c1a:	085b      	lsrs	r3, r3, #1
 8009c1c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009c26:	88fb      	ldrh	r3, [r7, #6]
 8009c28:	005a      	lsls	r2, r3, #1
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c32:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009c34:	69bb      	ldr	r3, [r7, #24]
 8009c36:	627b      	str	r3, [r7, #36]	; 0x24
 8009c38:	e01e      	b.n	8009c78 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8009c3a:	69fb      	ldr	r3, [r7, #28]
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009c40:	69fb      	ldr	r3, [r7, #28]
 8009c42:	3301      	adds	r3, #1
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	021b      	lsls	r3, r3, #8
 8009c48:	b21a      	sxth	r2, r3
 8009c4a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	b21b      	sxth	r3, r3
 8009c52:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009c54:	6a3b      	ldr	r3, [r7, #32]
 8009c56:	8a7a      	ldrh	r2, [r7, #18]
 8009c58:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009c5a:	6a3b      	ldr	r3, [r7, #32]
 8009c5c:	3302      	adds	r3, #2
 8009c5e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009c60:	6a3b      	ldr	r3, [r7, #32]
 8009c62:	3302      	adds	r3, #2
 8009c64:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c74:	3b01      	subs	r3, #1
 8009c76:	627b      	str	r3, [r7, #36]	; 0x24
 8009c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1dd      	bne.n	8009c3a <USB_WritePMA+0x3a>
  }
}
 8009c7e:	bf00      	nop
 8009c80:	bf00      	nop
 8009c82:	372c      	adds	r7, #44	; 0x2c
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b08b      	sub	sp, #44	; 0x2c
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	4611      	mov	r1, r2
 8009c98:	461a      	mov	r2, r3
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	80fb      	strh	r3, [r7, #6]
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009ca2:	88bb      	ldrh	r3, [r7, #4]
 8009ca4:	085b      	lsrs	r3, r3, #1
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009cb2:	88fb      	ldrh	r3, [r7, #6]
 8009cb4:	005a      	lsls	r2, r3, #1
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	4413      	add	r3, r2
 8009cba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cbe:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8009cc4:	e01b      	b.n	8009cfe <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009cc6:	6a3b      	ldr	r3, [r7, #32]
 8009cc8:	881b      	ldrh	r3, [r3, #0]
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009cce:	6a3b      	ldr	r3, [r7, #32]
 8009cd0:	3302      	adds	r3, #2
 8009cd2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	b2da      	uxtb	r2, r3
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	3301      	adds	r3, #1
 8009ce0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	0a1b      	lsrs	r3, r3, #8
 8009ce6:	b2da      	uxtb	r2, r3
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	3301      	adds	r3, #1
 8009cf0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009cf2:	6a3b      	ldr	r3, [r7, #32]
 8009cf4:	3302      	adds	r3, #2
 8009cf6:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8009cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8009cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d1e0      	bne.n	8009cc6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009d04:	88bb      	ldrh	r3, [r7, #4]
 8009d06:	f003 0301 	and.w	r3, r3, #1
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d007      	beq.n	8009d20 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8009d10:	6a3b      	ldr	r3, [r7, #32]
 8009d12:	881b      	ldrh	r3, [r3, #0]
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	b2da      	uxtb	r2, r3
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	701a      	strb	r2, [r3, #0]
  }
}
 8009d20:	bf00      	nop
 8009d22:	372c      	adds	r7, #44	; 0x2c
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	460b      	mov	r3, r1
 8009d36:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	7c1b      	ldrb	r3, [r3, #16]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d115      	bne.n	8009d70 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009d44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d48:	2202      	movs	r2, #2
 8009d4a:	2181      	movs	r1, #129	; 0x81
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f001 feb8 	bl	800bac2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2201      	movs	r2, #1
 8009d56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009d58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d5c:	2202      	movs	r2, #2
 8009d5e:	2101      	movs	r1, #1
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f001 feae 	bl	800bac2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2201      	movs	r2, #1
 8009d6a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009d6e:	e012      	b.n	8009d96 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009d70:	2340      	movs	r3, #64	; 0x40
 8009d72:	2202      	movs	r2, #2
 8009d74:	2181      	movs	r1, #129	; 0x81
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f001 fea3 	bl	800bac2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009d82:	2340      	movs	r3, #64	; 0x40
 8009d84:	2202      	movs	r2, #2
 8009d86:	2101      	movs	r1, #1
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f001 fe9a 	bl	800bac2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2201      	movs	r2, #1
 8009d92:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009d96:	2308      	movs	r3, #8
 8009d98:	2203      	movs	r2, #3
 8009d9a:	2182      	movs	r1, #130	; 0x82
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f001 fe90 	bl	800bac2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2201      	movs	r2, #1
 8009da6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009da8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009dac:	f001 ffb2 	bl	800bd14 <USBD_static_malloc>
 8009db0:	4602      	mov	r2, r0
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d102      	bne.n	8009dc8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	73fb      	strb	r3, [r7, #15]
 8009dc6:	e026      	b.n	8009e16 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dce:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	2200      	movs	r2, #0
 8009de6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	7c1b      	ldrb	r3, [r3, #16]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d109      	bne.n	8009e06 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009df8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009dfc:	2101      	movs	r1, #1
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f001 ff51 	bl	800bca6 <USBD_LL_PrepareReceive>
 8009e04:	e007      	b.n	8009e16 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e0c:	2340      	movs	r3, #64	; 0x40
 8009e0e:	2101      	movs	r1, #1
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f001 ff48 	bl	800bca6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	460b      	mov	r3, r1
 8009e2a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009e30:	2181      	movs	r1, #129	; 0x81
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f001 fe6b 	bl	800bb0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009e3e:	2101      	movs	r1, #1
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f001 fe64 	bl	800bb0e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009e4e:	2182      	movs	r1, #130	; 0x82
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f001 fe5c 	bl	800bb0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00e      	beq.n	8009e84 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e76:	4618      	mov	r0, r3
 8009e78:	f001 ff5a 	bl	800bd30 <USBD_static_free>
    pdev->pClassData = NULL;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b086      	sub	sp, #24
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
 8009e96:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e9e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d039      	beq.n	8009f2c <USBD_CDC_Setup+0x9e>
 8009eb8:	2b20      	cmp	r3, #32
 8009eba:	d17f      	bne.n	8009fbc <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	88db      	ldrh	r3, [r3, #6]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d029      	beq.n	8009f18 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	b25b      	sxtb	r3, r3
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	da11      	bge.n	8009ef2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	683a      	ldr	r2, [r7, #0]
 8009ed8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009eda:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009edc:	683a      	ldr	r2, [r7, #0]
 8009ede:	88d2      	ldrh	r2, [r2, #6]
 8009ee0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009ee2:	6939      	ldr	r1, [r7, #16]
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	88db      	ldrh	r3, [r3, #6]
 8009ee8:	461a      	mov	r2, r3
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f001 fa13 	bl	800b316 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009ef0:	e06b      	b.n	8009fca <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	785a      	ldrb	r2, [r3, #1]
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	88db      	ldrh	r3, [r3, #6]
 8009f00:	b2da      	uxtb	r2, r3
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009f08:	6939      	ldr	r1, [r7, #16]
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	88db      	ldrh	r3, [r3, #6]
 8009f0e:	461a      	mov	r2, r3
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f001 fa2e 	bl	800b372 <USBD_CtlPrepareRx>
      break;
 8009f16:	e058      	b.n	8009fca <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	683a      	ldr	r2, [r7, #0]
 8009f22:	7850      	ldrb	r0, [r2, #1]
 8009f24:	2200      	movs	r2, #0
 8009f26:	6839      	ldr	r1, [r7, #0]
 8009f28:	4798      	blx	r3
      break;
 8009f2a:	e04e      	b.n	8009fca <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	785b      	ldrb	r3, [r3, #1]
 8009f30:	2b0b      	cmp	r3, #11
 8009f32:	d02e      	beq.n	8009f92 <USBD_CDC_Setup+0x104>
 8009f34:	2b0b      	cmp	r3, #11
 8009f36:	dc38      	bgt.n	8009faa <USBD_CDC_Setup+0x11c>
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <USBD_CDC_Setup+0xb4>
 8009f3c:	2b0a      	cmp	r3, #10
 8009f3e:	d014      	beq.n	8009f6a <USBD_CDC_Setup+0xdc>
 8009f40:	e033      	b.n	8009faa <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f48:	2b03      	cmp	r3, #3
 8009f4a:	d107      	bne.n	8009f5c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009f4c:	f107 030c 	add.w	r3, r7, #12
 8009f50:	2202      	movs	r2, #2
 8009f52:	4619      	mov	r1, r3
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f001 f9de 	bl	800b316 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f5a:	e02e      	b.n	8009fba <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009f5c:	6839      	ldr	r1, [r7, #0]
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f001 f96e 	bl	800b240 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f64:	2302      	movs	r3, #2
 8009f66:	75fb      	strb	r3, [r7, #23]
          break;
 8009f68:	e027      	b.n	8009fba <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f70:	2b03      	cmp	r3, #3
 8009f72:	d107      	bne.n	8009f84 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009f74:	f107 030f 	add.w	r3, r7, #15
 8009f78:	2201      	movs	r2, #1
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f001 f9ca 	bl	800b316 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f82:	e01a      	b.n	8009fba <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009f84:	6839      	ldr	r1, [r7, #0]
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f001 f95a 	bl	800b240 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f8c:	2302      	movs	r3, #2
 8009f8e:	75fb      	strb	r3, [r7, #23]
          break;
 8009f90:	e013      	b.n	8009fba <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f98:	2b03      	cmp	r3, #3
 8009f9a:	d00d      	beq.n	8009fb8 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009f9c:	6839      	ldr	r1, [r7, #0]
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f001 f94e 	bl	800b240 <USBD_CtlError>
            ret = USBD_FAIL;
 8009fa4:	2302      	movs	r3, #2
 8009fa6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009fa8:	e006      	b.n	8009fb8 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009faa:	6839      	ldr	r1, [r7, #0]
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f001 f947 	bl	800b240 <USBD_CtlError>
          ret = USBD_FAIL;
 8009fb2:	2302      	movs	r3, #2
 8009fb4:	75fb      	strb	r3, [r7, #23]
          break;
 8009fb6:	e000      	b.n	8009fba <USBD_CDC_Setup+0x12c>
          break;
 8009fb8:	bf00      	nop
      }
      break;
 8009fba:	e006      	b.n	8009fca <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009fbc:	6839      	ldr	r1, [r7, #0]
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f001 f93e 	bl	800b240 <USBD_CtlError>
      ret = USBD_FAIL;
 8009fc4:	2302      	movs	r3, #2
 8009fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8009fc8:	bf00      	nop
  }

  return ret;
 8009fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3718      	adds	r7, #24
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	460b      	mov	r3, r1
 8009fde:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fe6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fee:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d03a      	beq.n	800a070 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009ffa:	78fa      	ldrb	r2, [r7, #3]
 8009ffc:	6879      	ldr	r1, [r7, #4]
 8009ffe:	4613      	mov	r3, r2
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	4413      	add	r3, r2
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	440b      	add	r3, r1
 800a008:	331c      	adds	r3, #28
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d029      	beq.n	800a064 <USBD_CDC_DataIn+0x90>
 800a010:	78fa      	ldrb	r2, [r7, #3]
 800a012:	6879      	ldr	r1, [r7, #4]
 800a014:	4613      	mov	r3, r2
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	4413      	add	r3, r2
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	440b      	add	r3, r1
 800a01e:	331c      	adds	r3, #28
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	78f9      	ldrb	r1, [r7, #3]
 800a024:	68b8      	ldr	r0, [r7, #8]
 800a026:	460b      	mov	r3, r1
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	440b      	add	r3, r1
 800a02c:	00db      	lsls	r3, r3, #3
 800a02e:	4403      	add	r3, r0
 800a030:	3338      	adds	r3, #56	; 0x38
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	fbb2 f1f3 	udiv	r1, r2, r3
 800a038:	fb01 f303 	mul.w	r3, r1, r3
 800a03c:	1ad3      	subs	r3, r2, r3
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d110      	bne.n	800a064 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a042:	78fa      	ldrb	r2, [r7, #3]
 800a044:	6879      	ldr	r1, [r7, #4]
 800a046:	4613      	mov	r3, r2
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	4413      	add	r3, r2
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	440b      	add	r3, r1
 800a050:	331c      	adds	r3, #28
 800a052:	2200      	movs	r2, #0
 800a054:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a056:	78f9      	ldrb	r1, [r7, #3]
 800a058:	2300      	movs	r3, #0
 800a05a:	2200      	movs	r2, #0
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f001 fdff 	bl	800bc60 <USBD_LL_Transmit>
 800a062:	e003      	b.n	800a06c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2200      	movs	r2, #0
 800a068:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a06c:	2300      	movs	r3, #0
 800a06e:	e000      	b.n	800a072 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a070:	2302      	movs	r3, #2
  }
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b084      	sub	sp, #16
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
 800a082:	460b      	mov	r3, r1
 800a084:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a08c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a08e:	78fb      	ldrb	r3, [r7, #3]
 800a090:	4619      	mov	r1, r3
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f001 fe2a 	bl	800bcec <USBD_LL_GetRxDataSize>
 800a098:	4602      	mov	r2, r0
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00d      	beq.n	800a0c6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0b0:	68db      	ldr	r3, [r3, #12]
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a0be:	4611      	mov	r1, r2
 800a0c0:	4798      	blx	r3

    return USBD_OK;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	e000      	b.n	800a0c8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a0c6:	2302      	movs	r3, #2
  }
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3710      	adds	r7, #16
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0de:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d015      	beq.n	800a116 <USBD_CDC_EP0_RxReady+0x46>
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a0f0:	2bff      	cmp	r3, #255	; 0xff
 800a0f2:	d010      	beq.n	800a116 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a102:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a104:	68fa      	ldr	r2, [r7, #12]
 800a106:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a10a:	b292      	uxth	r2, r2
 800a10c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	22ff      	movs	r2, #255	; 0xff
 800a112:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a116:	2300      	movs	r3, #0
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3710      	adds	r7, #16
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2243      	movs	r2, #67	; 0x43
 800a12c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a12e:	4b03      	ldr	r3, [pc, #12]	; (800a13c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a130:	4618      	mov	r0, r3
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr
 800a13c:	20000098 	.word	0x20000098

0800a140 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2243      	movs	r2, #67	; 0x43
 800a14c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a14e:	4b03      	ldr	r3, [pc, #12]	; (800a15c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a150:	4618      	mov	r0, r3
 800a152:	370c      	adds	r7, #12
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr
 800a15c:	20000054 	.word	0x20000054

0800a160 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2243      	movs	r2, #67	; 0x43
 800a16c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a16e:	4b03      	ldr	r3, [pc, #12]	; (800a17c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a170:	4618      	mov	r0, r3
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr
 800a17c:	200000dc 	.word	0x200000dc

0800a180 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	220a      	movs	r2, #10
 800a18c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a18e:	4b03      	ldr	r3, [pc, #12]	; (800a19c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a190:	4618      	mov	r0, r3
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr
 800a19c:	20000010 	.word	0x20000010

0800a1a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a1aa:	2302      	movs	r3, #2
 800a1ac:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d005      	beq.n	800a1c0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	683a      	ldr	r2, [r7, #0]
 800a1b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3714      	adds	r7, #20
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr

0800a1ce <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a1ce:	b480      	push	{r7}
 800a1d0:	b087      	sub	sp, #28
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	60f8      	str	r0, [r7, #12]
 800a1d6:	60b9      	str	r1, [r7, #8]
 800a1d8:	4613      	mov	r3, r2
 800a1da:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1e2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	68ba      	ldr	r2, [r7, #8]
 800a1e8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a1ec:	88fa      	ldrh	r2, [r7, #6]
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	371c      	adds	r7, #28
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr

0800a202 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a202:	b480      	push	{r7}
 800a204:	b085      	sub	sp, #20
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
 800a20a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a212:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	683a      	ldr	r2, [r7, #0]
 800a218:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3714      	adds	r7, #20
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr

0800a22a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b084      	sub	sp, #16
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a238:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a240:	2b00      	cmp	r3, #0
 800a242:	d01c      	beq.n	800a27e <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d115      	bne.n	800a27a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2201      	movs	r2, #1
 800a252:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	2181      	movs	r1, #129	; 0x81
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f001 fcf5 	bl	800bc60 <USBD_LL_Transmit>

      return USBD_OK;
 800a276:	2300      	movs	r3, #0
 800a278:	e002      	b.n	800a280 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a27a:	2301      	movs	r3, #1
 800a27c:	e000      	b.n	800a280 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a27e:	2302      	movs	r3, #2
  }
}
 800a280:	4618      	mov	r0, r3
 800a282:	3710      	adds	r7, #16
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a296:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d017      	beq.n	800a2d2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	7c1b      	ldrb	r3, [r3, #16]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d109      	bne.n	800a2be <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a2b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2b4:	2101      	movs	r1, #1
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f001 fcf5 	bl	800bca6 <USBD_LL_PrepareReceive>
 800a2bc:	e007      	b.n	800a2ce <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a2c4:	2340      	movs	r3, #64	; 0x40
 800a2c6:	2101      	movs	r1, #1
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f001 fcec 	bl	800bca6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	e000      	b.n	800a2d4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a2d2:	2302      	movs	r3, #2
  }
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	4613      	mov	r3, r2
 800a2e8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d101      	bne.n	800a2f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a2f0:	2302      	movs	r3, #2
 800a2f2:	e01a      	b.n	800a32a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d003      	beq.n	800a306 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2200      	movs	r2, #0
 800a302:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d003      	beq.n	800a314 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	68ba      	ldr	r2, [r7, #8]
 800a310:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	79fa      	ldrb	r2, [r7, #7]
 800a320:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a322:	68f8      	ldr	r0, [r7, #12]
 800a324:	f001 fb58 	bl	800b9d8 <USBD_LL_Init>

  return USBD_OK;
 800a328:	2300      	movs	r3, #0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3710      	adds	r7, #16
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a332:	b480      	push	{r7}
 800a334:	b085      	sub	sp, #20
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
 800a33a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a33c:	2300      	movs	r3, #0
 800a33e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d006      	beq.n	800a354 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	683a      	ldr	r2, [r7, #0]
 800a34a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a34e:	2300      	movs	r3, #0
 800a350:	73fb      	strb	r3, [r7, #15]
 800a352:	e001      	b.n	800a358 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a354:	2302      	movs	r3, #2
 800a356:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a358:	7bfb      	ldrb	r3, [r7, #15]
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3714      	adds	r7, #20
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr

0800a366 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b082      	sub	sp, #8
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f001 fb8c 	bl	800ba8c <USBD_LL_Start>

  return USBD_OK;
 800a374:	2300      	movs	r3, #0
}
 800a376:	4618      	mov	r0, r3
 800a378:	3708      	adds	r7, #8
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a37e:	b480      	push	{r7}
 800a380:	b083      	sub	sp, #12
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a386:	2300      	movs	r3, #0
}
 800a388:	4618      	mov	r0, r3
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	460b      	mov	r3, r1
 800a39e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a3a0:	2302      	movs	r3, #2
 800a3a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00c      	beq.n	800a3c8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	78fa      	ldrb	r2, [r7, #3]
 800a3b8:	4611      	mov	r1, r2
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	4798      	blx	r3
 800a3be:	4603      	mov	r3, r0
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d101      	bne.n	800a3c8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a3c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3710      	adds	r7, #16
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b082      	sub	sp, #8
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
 800a3da:	460b      	mov	r3, r1
 800a3dc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	78fa      	ldrb	r2, [r7, #3]
 800a3e8:	4611      	mov	r1, r2
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	4798      	blx	r3

  return USBD_OK;
 800a3ee:	2300      	movs	r3, #0
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3708      	adds	r7, #8
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a408:	6839      	ldr	r1, [r7, #0]
 800a40a:	4618      	mov	r0, r3
 800a40c:	f000 fedb 	bl	800b1c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2201      	movs	r2, #1
 800a414:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a41e:	461a      	mov	r2, r3
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a42c:	f003 031f 	and.w	r3, r3, #31
 800a430:	2b02      	cmp	r3, #2
 800a432:	d016      	beq.n	800a462 <USBD_LL_SetupStage+0x6a>
 800a434:	2b02      	cmp	r3, #2
 800a436:	d81c      	bhi.n	800a472 <USBD_LL_SetupStage+0x7a>
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d002      	beq.n	800a442 <USBD_LL_SetupStage+0x4a>
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d008      	beq.n	800a452 <USBD_LL_SetupStage+0x5a>
 800a440:	e017      	b.n	800a472 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a448:	4619      	mov	r1, r3
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 f9ce 	bl	800a7ec <USBD_StdDevReq>
      break;
 800a450:	e01a      	b.n	800a488 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a458:	4619      	mov	r1, r3
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 fa30 	bl	800a8c0 <USBD_StdItfReq>
      break;
 800a460:	e012      	b.n	800a488 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a468:	4619      	mov	r1, r3
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f000 fa70 	bl	800a950 <USBD_StdEPReq>
      break;
 800a470:	e00a      	b.n	800a488 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a478:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	4619      	mov	r1, r3
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f001 fb63 	bl	800bb4c <USBD_LL_StallEP>
      break;
 800a486:	bf00      	nop
  }

  return USBD_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3708      	adds	r7, #8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a492:	b580      	push	{r7, lr}
 800a494:	b086      	sub	sp, #24
 800a496:	af00      	add	r7, sp, #0
 800a498:	60f8      	str	r0, [r7, #12]
 800a49a:	460b      	mov	r3, r1
 800a49c:	607a      	str	r2, [r7, #4]
 800a49e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a4a0:	7afb      	ldrb	r3, [r7, #11]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d14b      	bne.n	800a53e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a4ac:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a4b4:	2b03      	cmp	r3, #3
 800a4b6:	d134      	bne.n	800a522 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	68da      	ldr	r2, [r3, #12]
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d919      	bls.n	800a4f8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	68da      	ldr	r2, [r3, #12]
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	691b      	ldr	r3, [r3, #16]
 800a4cc:	1ad2      	subs	r2, r2, r3
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	68da      	ldr	r2, [r3, #12]
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d203      	bcs.n	800a4e6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	e002      	b.n	800a4ec <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	6879      	ldr	r1, [r7, #4]
 800a4f0:	68f8      	ldr	r0, [r7, #12]
 800a4f2:	f000 ff5c 	bl	800b3ae <USBD_CtlContinueRx>
 800a4f6:	e038      	b.n	800a56a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4fe:	691b      	ldr	r3, [r3, #16]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d00a      	beq.n	800a51a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a50a:	2b03      	cmp	r3, #3
 800a50c:	d105      	bne.n	800a51a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a514:	691b      	ldr	r3, [r3, #16]
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f000 ff59 	bl	800b3d2 <USBD_CtlSendStatus>
 800a520:	e023      	b.n	800a56a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a528:	2b05      	cmp	r3, #5
 800a52a:	d11e      	bne.n	800a56a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2200      	movs	r2, #0
 800a530:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a534:	2100      	movs	r1, #0
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f001 fb08 	bl	800bb4c <USBD_LL_StallEP>
 800a53c:	e015      	b.n	800a56a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a544:	699b      	ldr	r3, [r3, #24]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d00d      	beq.n	800a566 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a550:	2b03      	cmp	r3, #3
 800a552:	d108      	bne.n	800a566 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a55a:	699b      	ldr	r3, [r3, #24]
 800a55c:	7afa      	ldrb	r2, [r7, #11]
 800a55e:	4611      	mov	r1, r2
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	4798      	blx	r3
 800a564:	e001      	b.n	800a56a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a566:	2302      	movs	r3, #2
 800a568:	e000      	b.n	800a56c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a56a:	2300      	movs	r3, #0
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3718      	adds	r7, #24
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b086      	sub	sp, #24
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	460b      	mov	r3, r1
 800a57e:	607a      	str	r2, [r7, #4]
 800a580:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a582:	7afb      	ldrb	r3, [r7, #11]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d17f      	bne.n	800a688 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	3314      	adds	r3, #20
 800a58c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a594:	2b02      	cmp	r3, #2
 800a596:	d15c      	bne.n	800a652 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	68da      	ldr	r2, [r3, #12]
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	691b      	ldr	r3, [r3, #16]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d915      	bls.n	800a5d0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	68da      	ldr	r2, [r3, #12]
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	691b      	ldr	r3, [r3, #16]
 800a5ac:	1ad2      	subs	r2, r2, r3
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	6879      	ldr	r1, [r7, #4]
 800a5bc:	68f8      	ldr	r0, [r7, #12]
 800a5be:	f000 fec6 	bl	800b34e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	2100      	movs	r1, #0
 800a5c8:	68f8      	ldr	r0, [r7, #12]
 800a5ca:	f001 fb6c 	bl	800bca6 <USBD_LL_PrepareReceive>
 800a5ce:	e04e      	b.n	800a66e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	697a      	ldr	r2, [r7, #20]
 800a5d6:	6912      	ldr	r2, [r2, #16]
 800a5d8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5dc:	fb01 f202 	mul.w	r2, r1, r2
 800a5e0:	1a9b      	subs	r3, r3, r2
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d11c      	bne.n	800a620 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	689a      	ldr	r2, [r3, #8]
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d316      	bcc.n	800a620 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	689a      	ldr	r2, [r3, #8]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d20f      	bcs.n	800a620 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a600:	2200      	movs	r2, #0
 800a602:	2100      	movs	r1, #0
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	f000 fea2 	bl	800b34e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a612:	2300      	movs	r3, #0
 800a614:	2200      	movs	r2, #0
 800a616:	2100      	movs	r1, #0
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	f001 fb44 	bl	800bca6 <USBD_LL_PrepareReceive>
 800a61e:	e026      	b.n	800a66e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d00a      	beq.n	800a642 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a632:	2b03      	cmp	r3, #3
 800a634:	d105      	bne.n	800a642 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	68f8      	ldr	r0, [r7, #12]
 800a640:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a642:	2180      	movs	r1, #128	; 0x80
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	f001 fa81 	bl	800bb4c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a64a:	68f8      	ldr	r0, [r7, #12]
 800a64c:	f000 fed4 	bl	800b3f8 <USBD_CtlReceiveStatus>
 800a650:	e00d      	b.n	800a66e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a658:	2b04      	cmp	r3, #4
 800a65a:	d004      	beq.n	800a666 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a662:	2b00      	cmp	r3, #0
 800a664:	d103      	bne.n	800a66e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a666:	2180      	movs	r1, #128	; 0x80
 800a668:	68f8      	ldr	r0, [r7, #12]
 800a66a:	f001 fa6f 	bl	800bb4c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a674:	2b01      	cmp	r3, #1
 800a676:	d11d      	bne.n	800a6b4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a678:	68f8      	ldr	r0, [r7, #12]
 800a67a:	f7ff fe80 	bl	800a37e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2200      	movs	r2, #0
 800a682:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a686:	e015      	b.n	800a6b4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a68e:	695b      	ldr	r3, [r3, #20]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d00d      	beq.n	800a6b0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a69a:	2b03      	cmp	r3, #3
 800a69c:	d108      	bne.n	800a6b0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6a4:	695b      	ldr	r3, [r3, #20]
 800a6a6:	7afa      	ldrb	r2, [r7, #11]
 800a6a8:	4611      	mov	r1, r2
 800a6aa:	68f8      	ldr	r0, [r7, #12]
 800a6ac:	4798      	blx	r3
 800a6ae:	e001      	b.n	800a6b4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a6b0:	2302      	movs	r3, #2
 800a6b2:	e000      	b.n	800a6b6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a6b4:	2300      	movs	r3, #0
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3718      	adds	r7, #24
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}

0800a6be <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	b082      	sub	sp, #8
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a6c6:	2340      	movs	r3, #64	; 0x40
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	2100      	movs	r1, #0
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f001 f9f8 	bl	800bac2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2240      	movs	r2, #64	; 0x40
 800a6de:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a6e2:	2340      	movs	r3, #64	; 0x40
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	2180      	movs	r1, #128	; 0x80
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f001 f9ea 	bl	800bac2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2240      	movs	r2, #64	; 0x40
 800a6f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d009      	beq.n	800a736 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	6852      	ldr	r2, [r2, #4]
 800a72e:	b2d2      	uxtb	r2, r2
 800a730:	4611      	mov	r1, r2
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	4798      	blx	r3
  }

  return USBD_OK;
 800a736:	2300      	movs	r3, #0
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3708      	adds	r7, #8
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a740:	b480      	push	{r7}
 800a742:	b083      	sub	sp, #12
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	460b      	mov	r3, r1
 800a74a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	78fa      	ldrb	r2, [r7, #3]
 800a750:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a752:	2300      	movs	r3, #0
}
 800a754:	4618      	mov	r0, r3
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2204      	movs	r2, #4
 800a778:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a77c:	2300      	movs	r3, #0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	370c      	adds	r7, #12
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr

0800a78a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a78a:	b480      	push	{r7}
 800a78c:	b083      	sub	sp, #12
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a798:	2b04      	cmp	r3, #4
 800a79a:	d105      	bne.n	800a7a8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	370c      	adds	r7, #12
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr

0800a7b6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b082      	sub	sp, #8
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7c4:	2b03      	cmp	r3, #3
 800a7c6:	d10b      	bne.n	800a7e0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7ce:	69db      	ldr	r3, [r3, #28]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d005      	beq.n	800a7e0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7da:	69db      	ldr	r3, [r3, #28]
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3708      	adds	r7, #8
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
	...

0800a7ec <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a802:	2b40      	cmp	r3, #64	; 0x40
 800a804:	d005      	beq.n	800a812 <USBD_StdDevReq+0x26>
 800a806:	2b40      	cmp	r3, #64	; 0x40
 800a808:	d84f      	bhi.n	800a8aa <USBD_StdDevReq+0xbe>
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d009      	beq.n	800a822 <USBD_StdDevReq+0x36>
 800a80e:	2b20      	cmp	r3, #32
 800a810:	d14b      	bne.n	800a8aa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a818:	689b      	ldr	r3, [r3, #8]
 800a81a:	6839      	ldr	r1, [r7, #0]
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	4798      	blx	r3
      break;
 800a820:	e048      	b.n	800a8b4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	785b      	ldrb	r3, [r3, #1]
 800a826:	2b09      	cmp	r3, #9
 800a828:	d839      	bhi.n	800a89e <USBD_StdDevReq+0xb2>
 800a82a:	a201      	add	r2, pc, #4	; (adr r2, 800a830 <USBD_StdDevReq+0x44>)
 800a82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a830:	0800a881 	.word	0x0800a881
 800a834:	0800a895 	.word	0x0800a895
 800a838:	0800a89f 	.word	0x0800a89f
 800a83c:	0800a88b 	.word	0x0800a88b
 800a840:	0800a89f 	.word	0x0800a89f
 800a844:	0800a863 	.word	0x0800a863
 800a848:	0800a859 	.word	0x0800a859
 800a84c:	0800a89f 	.word	0x0800a89f
 800a850:	0800a877 	.word	0x0800a877
 800a854:	0800a86d 	.word	0x0800a86d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a858:	6839      	ldr	r1, [r7, #0]
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 f9dc 	bl	800ac18 <USBD_GetDescriptor>
          break;
 800a860:	e022      	b.n	800a8a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a862:	6839      	ldr	r1, [r7, #0]
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 fb3f 	bl	800aee8 <USBD_SetAddress>
          break;
 800a86a:	e01d      	b.n	800a8a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a86c:	6839      	ldr	r1, [r7, #0]
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 fb7e 	bl	800af70 <USBD_SetConfig>
          break;
 800a874:	e018      	b.n	800a8a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a876:	6839      	ldr	r1, [r7, #0]
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 fc07 	bl	800b08c <USBD_GetConfig>
          break;
 800a87e:	e013      	b.n	800a8a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a880:	6839      	ldr	r1, [r7, #0]
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 fc37 	bl	800b0f6 <USBD_GetStatus>
          break;
 800a888:	e00e      	b.n	800a8a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a88a:	6839      	ldr	r1, [r7, #0]
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 fc65 	bl	800b15c <USBD_SetFeature>
          break;
 800a892:	e009      	b.n	800a8a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a894:	6839      	ldr	r1, [r7, #0]
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fc74 	bl	800b184 <USBD_ClrFeature>
          break;
 800a89c:	e004      	b.n	800a8a8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a89e:	6839      	ldr	r1, [r7, #0]
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 fccd 	bl	800b240 <USBD_CtlError>
          break;
 800a8a6:	bf00      	nop
      }
      break;
 800a8a8:	e004      	b.n	800a8b4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a8aa:	6839      	ldr	r1, [r7, #0]
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 fcc7 	bl	800b240 <USBD_CtlError>
      break;
 800a8b2:	bf00      	nop
  }

  return ret;
 800a8b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop

0800a8c0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8d6:	2b40      	cmp	r3, #64	; 0x40
 800a8d8:	d005      	beq.n	800a8e6 <USBD_StdItfReq+0x26>
 800a8da:	2b40      	cmp	r3, #64	; 0x40
 800a8dc:	d82e      	bhi.n	800a93c <USBD_StdItfReq+0x7c>
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d001      	beq.n	800a8e6 <USBD_StdItfReq+0x26>
 800a8e2:	2b20      	cmp	r3, #32
 800a8e4:	d12a      	bne.n	800a93c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8ec:	3b01      	subs	r3, #1
 800a8ee:	2b02      	cmp	r3, #2
 800a8f0:	d81d      	bhi.n	800a92e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	889b      	ldrh	r3, [r3, #4]
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d813      	bhi.n	800a924 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	6839      	ldr	r1, [r7, #0]
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	4798      	blx	r3
 800a90a:	4603      	mov	r3, r0
 800a90c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	88db      	ldrh	r3, [r3, #6]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d110      	bne.n	800a938 <USBD_StdItfReq+0x78>
 800a916:	7bfb      	ldrb	r3, [r7, #15]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d10d      	bne.n	800a938 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 fd58 	bl	800b3d2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a922:	e009      	b.n	800a938 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a924:	6839      	ldr	r1, [r7, #0]
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 fc8a 	bl	800b240 <USBD_CtlError>
          break;
 800a92c:	e004      	b.n	800a938 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a92e:	6839      	ldr	r1, [r7, #0]
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 fc85 	bl	800b240 <USBD_CtlError>
          break;
 800a936:	e000      	b.n	800a93a <USBD_StdItfReq+0x7a>
          break;
 800a938:	bf00      	nop
      }
      break;
 800a93a:	e004      	b.n	800a946 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a93c:	6839      	ldr	r1, [r7, #0]
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 fc7e 	bl	800b240 <USBD_CtlError>
      break;
 800a944:	bf00      	nop
  }

  return USBD_OK;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3710      	adds	r7, #16
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a95a:	2300      	movs	r3, #0
 800a95c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	889b      	ldrh	r3, [r3, #4]
 800a962:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a96c:	2b40      	cmp	r3, #64	; 0x40
 800a96e:	d007      	beq.n	800a980 <USBD_StdEPReq+0x30>
 800a970:	2b40      	cmp	r3, #64	; 0x40
 800a972:	f200 8146 	bhi.w	800ac02 <USBD_StdEPReq+0x2b2>
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00a      	beq.n	800a990 <USBD_StdEPReq+0x40>
 800a97a:	2b20      	cmp	r3, #32
 800a97c:	f040 8141 	bne.w	800ac02 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	6839      	ldr	r1, [r7, #0]
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	4798      	blx	r3
      break;
 800a98e:	e13d      	b.n	800ac0c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a998:	2b20      	cmp	r3, #32
 800a99a:	d10a      	bne.n	800a9b2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	6839      	ldr	r1, [r7, #0]
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	4798      	blx	r3
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a9ae:	7bfb      	ldrb	r3, [r7, #15]
 800a9b0:	e12d      	b.n	800ac0e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	785b      	ldrb	r3, [r3, #1]
 800a9b6:	2b03      	cmp	r3, #3
 800a9b8:	d007      	beq.n	800a9ca <USBD_StdEPReq+0x7a>
 800a9ba:	2b03      	cmp	r3, #3
 800a9bc:	f300 811b 	bgt.w	800abf6 <USBD_StdEPReq+0x2a6>
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d072      	beq.n	800aaaa <USBD_StdEPReq+0x15a>
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d03a      	beq.n	800aa3e <USBD_StdEPReq+0xee>
 800a9c8:	e115      	b.n	800abf6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9d0:	2b02      	cmp	r3, #2
 800a9d2:	d002      	beq.n	800a9da <USBD_StdEPReq+0x8a>
 800a9d4:	2b03      	cmp	r3, #3
 800a9d6:	d015      	beq.n	800aa04 <USBD_StdEPReq+0xb4>
 800a9d8:	e02b      	b.n	800aa32 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9da:	7bbb      	ldrb	r3, [r7, #14]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d00c      	beq.n	800a9fa <USBD_StdEPReq+0xaa>
 800a9e0:	7bbb      	ldrb	r3, [r7, #14]
 800a9e2:	2b80      	cmp	r3, #128	; 0x80
 800a9e4:	d009      	beq.n	800a9fa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a9e6:	7bbb      	ldrb	r3, [r7, #14]
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f001 f8ae 	bl	800bb4c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a9f0:	2180      	movs	r1, #128	; 0x80
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f001 f8aa 	bl	800bb4c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9f8:	e020      	b.n	800aa3c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a9fa:	6839      	ldr	r1, [r7, #0]
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 fc1f 	bl	800b240 <USBD_CtlError>
              break;
 800aa02:	e01b      	b.n	800aa3c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	885b      	ldrh	r3, [r3, #2]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d10e      	bne.n	800aa2a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800aa0c:	7bbb      	ldrb	r3, [r7, #14]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d00b      	beq.n	800aa2a <USBD_StdEPReq+0xda>
 800aa12:	7bbb      	ldrb	r3, [r7, #14]
 800aa14:	2b80      	cmp	r3, #128	; 0x80
 800aa16:	d008      	beq.n	800aa2a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	88db      	ldrh	r3, [r3, #6]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d104      	bne.n	800aa2a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800aa20:	7bbb      	ldrb	r3, [r7, #14]
 800aa22:	4619      	mov	r1, r3
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f001 f891 	bl	800bb4c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 fcd1 	bl	800b3d2 <USBD_CtlSendStatus>

              break;
 800aa30:	e004      	b.n	800aa3c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800aa32:	6839      	ldr	r1, [r7, #0]
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f000 fc03 	bl	800b240 <USBD_CtlError>
              break;
 800aa3a:	bf00      	nop
          }
          break;
 800aa3c:	e0e0      	b.n	800ac00 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa44:	2b02      	cmp	r3, #2
 800aa46:	d002      	beq.n	800aa4e <USBD_StdEPReq+0xfe>
 800aa48:	2b03      	cmp	r3, #3
 800aa4a:	d015      	beq.n	800aa78 <USBD_StdEPReq+0x128>
 800aa4c:	e026      	b.n	800aa9c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa4e:	7bbb      	ldrb	r3, [r7, #14]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d00c      	beq.n	800aa6e <USBD_StdEPReq+0x11e>
 800aa54:	7bbb      	ldrb	r3, [r7, #14]
 800aa56:	2b80      	cmp	r3, #128	; 0x80
 800aa58:	d009      	beq.n	800aa6e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800aa5a:	7bbb      	ldrb	r3, [r7, #14]
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f001 f874 	bl	800bb4c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800aa64:	2180      	movs	r1, #128	; 0x80
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f001 f870 	bl	800bb4c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa6c:	e01c      	b.n	800aaa8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800aa6e:	6839      	ldr	r1, [r7, #0]
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f000 fbe5 	bl	800b240 <USBD_CtlError>
              break;
 800aa76:	e017      	b.n	800aaa8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	885b      	ldrh	r3, [r3, #2]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d112      	bne.n	800aaa6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aa80:	7bbb      	ldrb	r3, [r7, #14]
 800aa82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d004      	beq.n	800aa94 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800aa8a:	7bbb      	ldrb	r3, [r7, #14]
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f001 f87b 	bl	800bb8a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 fc9c 	bl	800b3d2 <USBD_CtlSendStatus>
              }
              break;
 800aa9a:	e004      	b.n	800aaa6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800aa9c:	6839      	ldr	r1, [r7, #0]
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 fbce 	bl	800b240 <USBD_CtlError>
              break;
 800aaa4:	e000      	b.n	800aaa8 <USBD_StdEPReq+0x158>
              break;
 800aaa6:	bf00      	nop
          }
          break;
 800aaa8:	e0aa      	b.n	800ac00 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aab0:	2b02      	cmp	r3, #2
 800aab2:	d002      	beq.n	800aaba <USBD_StdEPReq+0x16a>
 800aab4:	2b03      	cmp	r3, #3
 800aab6:	d032      	beq.n	800ab1e <USBD_StdEPReq+0x1ce>
 800aab8:	e097      	b.n	800abea <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aaba:	7bbb      	ldrb	r3, [r7, #14]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d007      	beq.n	800aad0 <USBD_StdEPReq+0x180>
 800aac0:	7bbb      	ldrb	r3, [r7, #14]
 800aac2:	2b80      	cmp	r3, #128	; 0x80
 800aac4:	d004      	beq.n	800aad0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800aac6:	6839      	ldr	r1, [r7, #0]
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 fbb9 	bl	800b240 <USBD_CtlError>
                break;
 800aace:	e091      	b.n	800abf4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aad0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	da0b      	bge.n	800aaf0 <USBD_StdEPReq+0x1a0>
 800aad8:	7bbb      	ldrb	r3, [r7, #14]
 800aada:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aade:	4613      	mov	r3, r2
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	4413      	add	r3, r2
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	3310      	adds	r3, #16
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	4413      	add	r3, r2
 800aaec:	3304      	adds	r3, #4
 800aaee:	e00b      	b.n	800ab08 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aaf0:	7bbb      	ldrb	r3, [r7, #14]
 800aaf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aaf6:	4613      	mov	r3, r2
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	4413      	add	r3, r2
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	4413      	add	r3, r2
 800ab06:	3304      	adds	r3, #4
 800ab08:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	2202      	movs	r2, #2
 800ab14:	4619      	mov	r1, r3
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 fbfd 	bl	800b316 <USBD_CtlSendData>
              break;
 800ab1c:	e06a      	b.n	800abf4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ab1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	da11      	bge.n	800ab4a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ab26:	7bbb      	ldrb	r3, [r7, #14]
 800ab28:	f003 020f 	and.w	r2, r3, #15
 800ab2c:	6879      	ldr	r1, [r7, #4]
 800ab2e:	4613      	mov	r3, r2
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	4413      	add	r3, r2
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	440b      	add	r3, r1
 800ab38:	3318      	adds	r3, #24
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d117      	bne.n	800ab70 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ab40:	6839      	ldr	r1, [r7, #0]
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 fb7c 	bl	800b240 <USBD_CtlError>
                  break;
 800ab48:	e054      	b.n	800abf4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ab4a:	7bbb      	ldrb	r3, [r7, #14]
 800ab4c:	f003 020f 	and.w	r2, r3, #15
 800ab50:	6879      	ldr	r1, [r7, #4]
 800ab52:	4613      	mov	r3, r2
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	4413      	add	r3, r2
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	440b      	add	r3, r1
 800ab5c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d104      	bne.n	800ab70 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ab66:	6839      	ldr	r1, [r7, #0]
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 fb69 	bl	800b240 <USBD_CtlError>
                  break;
 800ab6e:	e041      	b.n	800abf4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	da0b      	bge.n	800ab90 <USBD_StdEPReq+0x240>
 800ab78:	7bbb      	ldrb	r3, [r7, #14]
 800ab7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab7e:	4613      	mov	r3, r2
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	4413      	add	r3, r2
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	3310      	adds	r3, #16
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	3304      	adds	r3, #4
 800ab8e:	e00b      	b.n	800aba8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab90:	7bbb      	ldrb	r3, [r7, #14]
 800ab92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab96:	4613      	mov	r3, r2
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	4413      	add	r3, r2
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	4413      	add	r3, r2
 800aba6:	3304      	adds	r3, #4
 800aba8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800abaa:	7bbb      	ldrb	r3, [r7, #14]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d002      	beq.n	800abb6 <USBD_StdEPReq+0x266>
 800abb0:	7bbb      	ldrb	r3, [r7, #14]
 800abb2:	2b80      	cmp	r3, #128	; 0x80
 800abb4:	d103      	bne.n	800abbe <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	2200      	movs	r2, #0
 800abba:	601a      	str	r2, [r3, #0]
 800abbc:	e00e      	b.n	800abdc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800abbe:	7bbb      	ldrb	r3, [r7, #14]
 800abc0:	4619      	mov	r1, r3
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f001 f800 	bl	800bbc8 <USBD_LL_IsStallEP>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d003      	beq.n	800abd6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	2201      	movs	r2, #1
 800abd2:	601a      	str	r2, [r3, #0]
 800abd4:	e002      	b.n	800abdc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	2200      	movs	r2, #0
 800abda:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	2202      	movs	r2, #2
 800abe0:	4619      	mov	r1, r3
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 fb97 	bl	800b316 <USBD_CtlSendData>
              break;
 800abe8:	e004      	b.n	800abf4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800abea:	6839      	ldr	r1, [r7, #0]
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f000 fb27 	bl	800b240 <USBD_CtlError>
              break;
 800abf2:	bf00      	nop
          }
          break;
 800abf4:	e004      	b.n	800ac00 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800abf6:	6839      	ldr	r1, [r7, #0]
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 fb21 	bl	800b240 <USBD_CtlError>
          break;
 800abfe:	bf00      	nop
      }
      break;
 800ac00:	e004      	b.n	800ac0c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800ac02:	6839      	ldr	r1, [r7, #0]
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f000 fb1b 	bl	800b240 <USBD_CtlError>
      break;
 800ac0a:	bf00      	nop
  }

  return ret;
 800ac0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3710      	adds	r7, #16
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
	...

0800ac18 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ac22:	2300      	movs	r3, #0
 800ac24:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ac26:	2300      	movs	r3, #0
 800ac28:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	885b      	ldrh	r3, [r3, #2]
 800ac32:	0a1b      	lsrs	r3, r3, #8
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	3b01      	subs	r3, #1
 800ac38:	2b06      	cmp	r3, #6
 800ac3a:	f200 8128 	bhi.w	800ae8e <USBD_GetDescriptor+0x276>
 800ac3e:	a201      	add	r2, pc, #4	; (adr r2, 800ac44 <USBD_GetDescriptor+0x2c>)
 800ac40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac44:	0800ac61 	.word	0x0800ac61
 800ac48:	0800ac79 	.word	0x0800ac79
 800ac4c:	0800acb9 	.word	0x0800acb9
 800ac50:	0800ae8f 	.word	0x0800ae8f
 800ac54:	0800ae8f 	.word	0x0800ae8f
 800ac58:	0800ae2f 	.word	0x0800ae2f
 800ac5c:	0800ae5b 	.word	0x0800ae5b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	687a      	ldr	r2, [r7, #4]
 800ac6a:	7c12      	ldrb	r2, [r2, #16]
 800ac6c:	f107 0108 	add.w	r1, r7, #8
 800ac70:	4610      	mov	r0, r2
 800ac72:	4798      	blx	r3
 800ac74:	60f8      	str	r0, [r7, #12]
      break;
 800ac76:	e112      	b.n	800ae9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	7c1b      	ldrb	r3, [r3, #16]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d10d      	bne.n	800ac9c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac88:	f107 0208 	add.w	r2, r7, #8
 800ac8c:	4610      	mov	r0, r2
 800ac8e:	4798      	blx	r3
 800ac90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	3301      	adds	r3, #1
 800ac96:	2202      	movs	r2, #2
 800ac98:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ac9a:	e100      	b.n	800ae9e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca4:	f107 0208 	add.w	r2, r7, #8
 800aca8:	4610      	mov	r0, r2
 800acaa:	4798      	blx	r3
 800acac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	3301      	adds	r3, #1
 800acb2:	2202      	movs	r2, #2
 800acb4:	701a      	strb	r2, [r3, #0]
      break;
 800acb6:	e0f2      	b.n	800ae9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	885b      	ldrh	r3, [r3, #2]
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	2b05      	cmp	r3, #5
 800acc0:	f200 80ac 	bhi.w	800ae1c <USBD_GetDescriptor+0x204>
 800acc4:	a201      	add	r2, pc, #4	; (adr r2, 800accc <USBD_GetDescriptor+0xb4>)
 800acc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acca:	bf00      	nop
 800accc:	0800ace5 	.word	0x0800ace5
 800acd0:	0800ad19 	.word	0x0800ad19
 800acd4:	0800ad4d 	.word	0x0800ad4d
 800acd8:	0800ad81 	.word	0x0800ad81
 800acdc:	0800adb5 	.word	0x0800adb5
 800ace0:	0800ade9 	.word	0x0800ade9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d00b      	beq.n	800ad08 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	7c12      	ldrb	r2, [r2, #16]
 800acfc:	f107 0108 	add.w	r1, r7, #8
 800ad00:	4610      	mov	r0, r2
 800ad02:	4798      	blx	r3
 800ad04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad06:	e091      	b.n	800ae2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad08:	6839      	ldr	r1, [r7, #0]
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 fa98 	bl	800b240 <USBD_CtlError>
            err++;
 800ad10:	7afb      	ldrb	r3, [r7, #11]
 800ad12:	3301      	adds	r3, #1
 800ad14:	72fb      	strb	r3, [r7, #11]
          break;
 800ad16:	e089      	b.n	800ae2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d00b      	beq.n	800ad3c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	7c12      	ldrb	r2, [r2, #16]
 800ad30:	f107 0108 	add.w	r1, r7, #8
 800ad34:	4610      	mov	r0, r2
 800ad36:	4798      	blx	r3
 800ad38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad3a:	e077      	b.n	800ae2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad3c:	6839      	ldr	r1, [r7, #0]
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 fa7e 	bl	800b240 <USBD_CtlError>
            err++;
 800ad44:	7afb      	ldrb	r3, [r7, #11]
 800ad46:	3301      	adds	r3, #1
 800ad48:	72fb      	strb	r3, [r7, #11]
          break;
 800ad4a:	e06f      	b.n	800ae2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad52:	68db      	ldr	r3, [r3, #12]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00b      	beq.n	800ad70 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad5e:	68db      	ldr	r3, [r3, #12]
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	7c12      	ldrb	r2, [r2, #16]
 800ad64:	f107 0108 	add.w	r1, r7, #8
 800ad68:	4610      	mov	r0, r2
 800ad6a:	4798      	blx	r3
 800ad6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad6e:	e05d      	b.n	800ae2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad70:	6839      	ldr	r1, [r7, #0]
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 fa64 	bl	800b240 <USBD_CtlError>
            err++;
 800ad78:	7afb      	ldrb	r3, [r7, #11]
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad7e:	e055      	b.n	800ae2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad86:	691b      	ldr	r3, [r3, #16]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d00b      	beq.n	800ada4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad92:	691b      	ldr	r3, [r3, #16]
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	7c12      	ldrb	r2, [r2, #16]
 800ad98:	f107 0108 	add.w	r1, r7, #8
 800ad9c:	4610      	mov	r0, r2
 800ad9e:	4798      	blx	r3
 800ada0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ada2:	e043      	b.n	800ae2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ada4:	6839      	ldr	r1, [r7, #0]
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 fa4a 	bl	800b240 <USBD_CtlError>
            err++;
 800adac:	7afb      	ldrb	r3, [r7, #11]
 800adae:	3301      	adds	r3, #1
 800adb0:	72fb      	strb	r3, [r7, #11]
          break;
 800adb2:	e03b      	b.n	800ae2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800adba:	695b      	ldr	r3, [r3, #20]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d00b      	beq.n	800add8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800adc6:	695b      	ldr	r3, [r3, #20]
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	7c12      	ldrb	r2, [r2, #16]
 800adcc:	f107 0108 	add.w	r1, r7, #8
 800add0:	4610      	mov	r0, r2
 800add2:	4798      	blx	r3
 800add4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800add6:	e029      	b.n	800ae2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800add8:	6839      	ldr	r1, [r7, #0]
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 fa30 	bl	800b240 <USBD_CtlError>
            err++;
 800ade0:	7afb      	ldrb	r3, [r7, #11]
 800ade2:	3301      	adds	r3, #1
 800ade4:	72fb      	strb	r3, [r7, #11]
          break;
 800ade6:	e021      	b.n	800ae2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800adee:	699b      	ldr	r3, [r3, #24]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d00b      	beq.n	800ae0c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800adfa:	699b      	ldr	r3, [r3, #24]
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	7c12      	ldrb	r2, [r2, #16]
 800ae00:	f107 0108 	add.w	r1, r7, #8
 800ae04:	4610      	mov	r0, r2
 800ae06:	4798      	blx	r3
 800ae08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae0a:	e00f      	b.n	800ae2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae0c:	6839      	ldr	r1, [r7, #0]
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 fa16 	bl	800b240 <USBD_CtlError>
            err++;
 800ae14:	7afb      	ldrb	r3, [r7, #11]
 800ae16:	3301      	adds	r3, #1
 800ae18:	72fb      	strb	r3, [r7, #11]
          break;
 800ae1a:	e007      	b.n	800ae2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ae1c:	6839      	ldr	r1, [r7, #0]
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f000 fa0e 	bl	800b240 <USBD_CtlError>
          err++;
 800ae24:	7afb      	ldrb	r3, [r7, #11]
 800ae26:	3301      	adds	r3, #1
 800ae28:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800ae2a:	e038      	b.n	800ae9e <USBD_GetDescriptor+0x286>
 800ae2c:	e037      	b.n	800ae9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	7c1b      	ldrb	r3, [r3, #16]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d109      	bne.n	800ae4a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae3e:	f107 0208 	add.w	r2, r7, #8
 800ae42:	4610      	mov	r0, r2
 800ae44:	4798      	blx	r3
 800ae46:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae48:	e029      	b.n	800ae9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ae4a:	6839      	ldr	r1, [r7, #0]
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 f9f7 	bl	800b240 <USBD_CtlError>
        err++;
 800ae52:	7afb      	ldrb	r3, [r7, #11]
 800ae54:	3301      	adds	r3, #1
 800ae56:	72fb      	strb	r3, [r7, #11]
      break;
 800ae58:	e021      	b.n	800ae9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	7c1b      	ldrb	r3, [r3, #16]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d10d      	bne.n	800ae7e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae6a:	f107 0208 	add.w	r2, r7, #8
 800ae6e:	4610      	mov	r0, r2
 800ae70:	4798      	blx	r3
 800ae72:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	3301      	adds	r3, #1
 800ae78:	2207      	movs	r2, #7
 800ae7a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae7c:	e00f      	b.n	800ae9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ae7e:	6839      	ldr	r1, [r7, #0]
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 f9dd 	bl	800b240 <USBD_CtlError>
        err++;
 800ae86:	7afb      	ldrb	r3, [r7, #11]
 800ae88:	3301      	adds	r3, #1
 800ae8a:	72fb      	strb	r3, [r7, #11]
      break;
 800ae8c:	e007      	b.n	800ae9e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ae8e:	6839      	ldr	r1, [r7, #0]
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 f9d5 	bl	800b240 <USBD_CtlError>
      err++;
 800ae96:	7afb      	ldrb	r3, [r7, #11]
 800ae98:	3301      	adds	r3, #1
 800ae9a:	72fb      	strb	r3, [r7, #11]
      break;
 800ae9c:	bf00      	nop
  }

  if (err != 0U)
 800ae9e:	7afb      	ldrb	r3, [r7, #11]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d11c      	bne.n	800aede <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800aea4:	893b      	ldrh	r3, [r7, #8]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d011      	beq.n	800aece <USBD_GetDescriptor+0x2b6>
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	88db      	ldrh	r3, [r3, #6]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d00d      	beq.n	800aece <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	88da      	ldrh	r2, [r3, #6]
 800aeb6:	893b      	ldrh	r3, [r7, #8]
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	bf28      	it	cs
 800aebc:	4613      	movcs	r3, r2
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aec2:	893b      	ldrh	r3, [r7, #8]
 800aec4:	461a      	mov	r2, r3
 800aec6:	68f9      	ldr	r1, [r7, #12]
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 fa24 	bl	800b316 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	88db      	ldrh	r3, [r3, #6]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d104      	bne.n	800aee0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fa7b 	bl	800b3d2 <USBD_CtlSendStatus>
 800aedc:	e000      	b.n	800aee0 <USBD_GetDescriptor+0x2c8>
    return;
 800aede:	bf00      	nop
    }
  }
}
 800aee0:	3710      	adds	r7, #16
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
 800aee6:	bf00      	nop

0800aee8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	889b      	ldrh	r3, [r3, #4]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d130      	bne.n	800af5c <USBD_SetAddress+0x74>
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	88db      	ldrh	r3, [r3, #6]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d12c      	bne.n	800af5c <USBD_SetAddress+0x74>
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	885b      	ldrh	r3, [r3, #2]
 800af06:	2b7f      	cmp	r3, #127	; 0x7f
 800af08:	d828      	bhi.n	800af5c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	885b      	ldrh	r3, [r3, #2]
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af14:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af1c:	2b03      	cmp	r3, #3
 800af1e:	d104      	bne.n	800af2a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800af20:	6839      	ldr	r1, [r7, #0]
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 f98c 	bl	800b240 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af28:	e01d      	b.n	800af66 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	7bfa      	ldrb	r2, [r7, #15]
 800af2e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800af32:	7bfb      	ldrb	r3, [r7, #15]
 800af34:	4619      	mov	r1, r3
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 fe73 	bl	800bc22 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 fa48 	bl	800b3d2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800af42:	7bfb      	ldrb	r3, [r7, #15]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d004      	beq.n	800af52 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2202      	movs	r2, #2
 800af4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af50:	e009      	b.n	800af66 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2201      	movs	r2, #1
 800af56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af5a:	e004      	b.n	800af66 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af5c:	6839      	ldr	r1, [r7, #0]
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 f96e 	bl	800b240 <USBD_CtlError>
  }
}
 800af64:	bf00      	nop
 800af66:	bf00      	nop
 800af68:	3710      	adds	r7, #16
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
	...

0800af70 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	885b      	ldrh	r3, [r3, #2]
 800af7e:	b2da      	uxtb	r2, r3
 800af80:	4b41      	ldr	r3, [pc, #260]	; (800b088 <USBD_SetConfig+0x118>)
 800af82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af84:	4b40      	ldr	r3, [pc, #256]	; (800b088 <USBD_SetConfig+0x118>)
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d904      	bls.n	800af96 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800af8c:	6839      	ldr	r1, [r7, #0]
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 f956 	bl	800b240 <USBD_CtlError>
 800af94:	e075      	b.n	800b082 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af9c:	2b02      	cmp	r3, #2
 800af9e:	d002      	beq.n	800afa6 <USBD_SetConfig+0x36>
 800afa0:	2b03      	cmp	r3, #3
 800afa2:	d023      	beq.n	800afec <USBD_SetConfig+0x7c>
 800afa4:	e062      	b.n	800b06c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800afa6:	4b38      	ldr	r3, [pc, #224]	; (800b088 <USBD_SetConfig+0x118>)
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d01a      	beq.n	800afe4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800afae:	4b36      	ldr	r3, [pc, #216]	; (800b088 <USBD_SetConfig+0x118>)
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	461a      	mov	r2, r3
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2203      	movs	r2, #3
 800afbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800afc0:	4b31      	ldr	r3, [pc, #196]	; (800b088 <USBD_SetConfig+0x118>)
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	4619      	mov	r1, r3
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f7ff f9e4 	bl	800a394 <USBD_SetClassConfig>
 800afcc:	4603      	mov	r3, r0
 800afce:	2b02      	cmp	r3, #2
 800afd0:	d104      	bne.n	800afdc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800afd2:	6839      	ldr	r1, [r7, #0]
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 f933 	bl	800b240 <USBD_CtlError>
            return;
 800afda:	e052      	b.n	800b082 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 f9f8 	bl	800b3d2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800afe2:	e04e      	b.n	800b082 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 f9f4 	bl	800b3d2 <USBD_CtlSendStatus>
        break;
 800afea:	e04a      	b.n	800b082 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800afec:	4b26      	ldr	r3, [pc, #152]	; (800b088 <USBD_SetConfig+0x118>)
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d112      	bne.n	800b01a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2202      	movs	r2, #2
 800aff8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800affc:	4b22      	ldr	r3, [pc, #136]	; (800b088 <USBD_SetConfig+0x118>)
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	461a      	mov	r2, r3
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b006:	4b20      	ldr	r3, [pc, #128]	; (800b088 <USBD_SetConfig+0x118>)
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	4619      	mov	r1, r3
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f7ff f9e0 	bl	800a3d2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 f9dd 	bl	800b3d2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b018:	e033      	b.n	800b082 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b01a:	4b1b      	ldr	r3, [pc, #108]	; (800b088 <USBD_SetConfig+0x118>)
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	461a      	mov	r2, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	429a      	cmp	r2, r3
 800b026:	d01d      	beq.n	800b064 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	4619      	mov	r1, r3
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f7ff f9ce 	bl	800a3d2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b036:	4b14      	ldr	r3, [pc, #80]	; (800b088 <USBD_SetConfig+0x118>)
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	461a      	mov	r2, r3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b040:	4b11      	ldr	r3, [pc, #68]	; (800b088 <USBD_SetConfig+0x118>)
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	4619      	mov	r1, r3
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f7ff f9a4 	bl	800a394 <USBD_SetClassConfig>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d104      	bne.n	800b05c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b052:	6839      	ldr	r1, [r7, #0]
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 f8f3 	bl	800b240 <USBD_CtlError>
            return;
 800b05a:	e012      	b.n	800b082 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 f9b8 	bl	800b3d2 <USBD_CtlSendStatus>
        break;
 800b062:	e00e      	b.n	800b082 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f000 f9b4 	bl	800b3d2 <USBD_CtlSendStatus>
        break;
 800b06a:	e00a      	b.n	800b082 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b06c:	6839      	ldr	r1, [r7, #0]
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 f8e6 	bl	800b240 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b074:	4b04      	ldr	r3, [pc, #16]	; (800b088 <USBD_SetConfig+0x118>)
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	4619      	mov	r1, r3
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f7ff f9a9 	bl	800a3d2 <USBD_ClrClassConfig>
        break;
 800b080:	bf00      	nop
    }
  }
}
 800b082:	3708      	adds	r7, #8
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}
 800b088:	20000350 	.word	0x20000350

0800b08c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	88db      	ldrh	r3, [r3, #6]
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d004      	beq.n	800b0a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b09e:	6839      	ldr	r1, [r7, #0]
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 f8cd 	bl	800b240 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b0a6:	e022      	b.n	800b0ee <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0ae:	2b02      	cmp	r3, #2
 800b0b0:	dc02      	bgt.n	800b0b8 <USBD_GetConfig+0x2c>
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	dc03      	bgt.n	800b0be <USBD_GetConfig+0x32>
 800b0b6:	e015      	b.n	800b0e4 <USBD_GetConfig+0x58>
 800b0b8:	2b03      	cmp	r3, #3
 800b0ba:	d00b      	beq.n	800b0d4 <USBD_GetConfig+0x48>
 800b0bc:	e012      	b.n	800b0e4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	3308      	adds	r3, #8
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 f922 	bl	800b316 <USBD_CtlSendData>
        break;
 800b0d2:	e00c      	b.n	800b0ee <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	3304      	adds	r3, #4
 800b0d8:	2201      	movs	r2, #1
 800b0da:	4619      	mov	r1, r3
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 f91a 	bl	800b316 <USBD_CtlSendData>
        break;
 800b0e2:	e004      	b.n	800b0ee <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b0e4:	6839      	ldr	r1, [r7, #0]
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 f8aa 	bl	800b240 <USBD_CtlError>
        break;
 800b0ec:	bf00      	nop
}
 800b0ee:	bf00      	nop
 800b0f0:	3708      	adds	r7, #8
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b082      	sub	sp, #8
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b106:	3b01      	subs	r3, #1
 800b108:	2b02      	cmp	r3, #2
 800b10a:	d81e      	bhi.n	800b14a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	88db      	ldrh	r3, [r3, #6]
 800b110:	2b02      	cmp	r3, #2
 800b112:	d004      	beq.n	800b11e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b114:	6839      	ldr	r1, [r7, #0]
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 f892 	bl	800b240 <USBD_CtlError>
        break;
 800b11c:	e01a      	b.n	800b154 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2201      	movs	r2, #1
 800b122:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d005      	beq.n	800b13a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	f043 0202 	orr.w	r2, r3, #2
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	330c      	adds	r3, #12
 800b13e:	2202      	movs	r2, #2
 800b140:	4619      	mov	r1, r3
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f000 f8e7 	bl	800b316 <USBD_CtlSendData>
      break;
 800b148:	e004      	b.n	800b154 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b14a:	6839      	ldr	r1, [r7, #0]
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f000 f877 	bl	800b240 <USBD_CtlError>
      break;
 800b152:	bf00      	nop
  }
}
 800b154:	bf00      	nop
 800b156:	3708      	adds	r7, #8
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	885b      	ldrh	r3, [r3, #2]
 800b16a:	2b01      	cmp	r3, #1
 800b16c:	d106      	bne.n	800b17c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2201      	movs	r2, #1
 800b172:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 f92b 	bl	800b3d2 <USBD_CtlSendStatus>
  }
}
 800b17c:	bf00      	nop
 800b17e:	3708      	adds	r7, #8
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b194:	3b01      	subs	r3, #1
 800b196:	2b02      	cmp	r3, #2
 800b198:	d80b      	bhi.n	800b1b2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	885b      	ldrh	r3, [r3, #2]
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d10c      	bne.n	800b1bc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 f911 	bl	800b3d2 <USBD_CtlSendStatus>
      }
      break;
 800b1b0:	e004      	b.n	800b1bc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b1b2:	6839      	ldr	r1, [r7, #0]
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 f843 	bl	800b240 <USBD_CtlError>
      break;
 800b1ba:	e000      	b.n	800b1be <USBD_ClrFeature+0x3a>
      break;
 800b1bc:	bf00      	nop
  }
}
 800b1be:	bf00      	nop
 800b1c0:	3708      	adds	r7, #8
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b1c6:	b480      	push	{r7}
 800b1c8:	b083      	sub	sp, #12
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
 800b1ce:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	781a      	ldrb	r2, [r3, #0]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	785a      	ldrb	r2, [r3, #1]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	3302      	adds	r3, #2
 800b1e4:	781b      	ldrb	r3, [r3, #0]
 800b1e6:	b29a      	uxth	r2, r3
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	3303      	adds	r3, #3
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	021b      	lsls	r3, r3, #8
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	4413      	add	r3, r2
 800b1f6:	b29a      	uxth	r2, r3
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	3304      	adds	r3, #4
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	b29a      	uxth	r2, r3
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	3305      	adds	r3, #5
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	021b      	lsls	r3, r3, #8
 800b20e:	b29b      	uxth	r3, r3
 800b210:	4413      	add	r3, r2
 800b212:	b29a      	uxth	r2, r3
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	3306      	adds	r3, #6
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	b29a      	uxth	r2, r3
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	3307      	adds	r3, #7
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	b29b      	uxth	r3, r3
 800b228:	021b      	lsls	r3, r3, #8
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	4413      	add	r3, r2
 800b22e:	b29a      	uxth	r2, r3
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	80da      	strh	r2, [r3, #6]

}
 800b234:	bf00      	nop
 800b236:	370c      	adds	r7, #12
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b24a:	2180      	movs	r1, #128	; 0x80
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f000 fc7d 	bl	800bb4c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b252:	2100      	movs	r1, #0
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 fc79 	bl	800bb4c <USBD_LL_StallEP>
}
 800b25a:	bf00      	nop
 800b25c:	3708      	adds	r7, #8
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}

0800b262 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b262:	b580      	push	{r7, lr}
 800b264:	b086      	sub	sp, #24
 800b266:	af00      	add	r7, sp, #0
 800b268:	60f8      	str	r0, [r7, #12]
 800b26a:	60b9      	str	r1, [r7, #8]
 800b26c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b26e:	2300      	movs	r3, #0
 800b270:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d032      	beq.n	800b2de <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b278:	68f8      	ldr	r0, [r7, #12]
 800b27a:	f000 f834 	bl	800b2e6 <USBD_GetLen>
 800b27e:	4603      	mov	r3, r0
 800b280:	3301      	adds	r3, #1
 800b282:	b29b      	uxth	r3, r3
 800b284:	005b      	lsls	r3, r3, #1
 800b286:	b29a      	uxth	r2, r3
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b28c:	7dfb      	ldrb	r3, [r7, #23]
 800b28e:	1c5a      	adds	r2, r3, #1
 800b290:	75fa      	strb	r2, [r7, #23]
 800b292:	461a      	mov	r2, r3
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	4413      	add	r3, r2
 800b298:	687a      	ldr	r2, [r7, #4]
 800b29a:	7812      	ldrb	r2, [r2, #0]
 800b29c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b29e:	7dfb      	ldrb	r3, [r7, #23]
 800b2a0:	1c5a      	adds	r2, r3, #1
 800b2a2:	75fa      	strb	r2, [r7, #23]
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	2203      	movs	r2, #3
 800b2ac:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b2ae:	e012      	b.n	800b2d6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	1c5a      	adds	r2, r3, #1
 800b2b4:	60fa      	str	r2, [r7, #12]
 800b2b6:	7dfa      	ldrb	r2, [r7, #23]
 800b2b8:	1c51      	adds	r1, r2, #1
 800b2ba:	75f9      	strb	r1, [r7, #23]
 800b2bc:	4611      	mov	r1, r2
 800b2be:	68ba      	ldr	r2, [r7, #8]
 800b2c0:	440a      	add	r2, r1
 800b2c2:	781b      	ldrb	r3, [r3, #0]
 800b2c4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b2c6:	7dfb      	ldrb	r3, [r7, #23]
 800b2c8:	1c5a      	adds	r2, r3, #1
 800b2ca:	75fa      	strb	r2, [r7, #23]
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d1e8      	bne.n	800b2b0 <USBD_GetString+0x4e>
    }
  }
}
 800b2de:	bf00      	nop
 800b2e0:	3718      	adds	r7, #24
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b2e6:	b480      	push	{r7}
 800b2e8:	b085      	sub	sp, #20
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b2f2:	e005      	b.n	800b300 <USBD_GetLen+0x1a>
  {
    len++;
 800b2f4:	7bfb      	ldrb	r3, [r7, #15]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d1f5      	bne.n	800b2f4 <USBD_GetLen+0xe>
  }

  return len;
 800b308:	7bfb      	ldrb	r3, [r7, #15]
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3714      	adds	r7, #20
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr

0800b316 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b316:	b580      	push	{r7, lr}
 800b318:	b084      	sub	sp, #16
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	60f8      	str	r0, [r7, #12]
 800b31e:	60b9      	str	r1, [r7, #8]
 800b320:	4613      	mov	r3, r2
 800b322:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2202      	movs	r2, #2
 800b328:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b32c:	88fa      	ldrh	r2, [r7, #6]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b332:	88fa      	ldrh	r2, [r7, #6]
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b338:	88fb      	ldrh	r3, [r7, #6]
 800b33a:	68ba      	ldr	r2, [r7, #8]
 800b33c:	2100      	movs	r1, #0
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	f000 fc8e 	bl	800bc60 <USBD_LL_Transmit>

  return USBD_OK;
 800b344:	2300      	movs	r3, #0
}
 800b346:	4618      	mov	r0, r3
 800b348:	3710      	adds	r7, #16
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}

0800b34e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b34e:	b580      	push	{r7, lr}
 800b350:	b084      	sub	sp, #16
 800b352:	af00      	add	r7, sp, #0
 800b354:	60f8      	str	r0, [r7, #12]
 800b356:	60b9      	str	r1, [r7, #8]
 800b358:	4613      	mov	r3, r2
 800b35a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b35c:	88fb      	ldrh	r3, [r7, #6]
 800b35e:	68ba      	ldr	r2, [r7, #8]
 800b360:	2100      	movs	r1, #0
 800b362:	68f8      	ldr	r0, [r7, #12]
 800b364:	f000 fc7c 	bl	800bc60 <USBD_LL_Transmit>

  return USBD_OK;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b084      	sub	sp, #16
 800b376:	af00      	add	r7, sp, #0
 800b378:	60f8      	str	r0, [r7, #12]
 800b37a:	60b9      	str	r1, [r7, #8]
 800b37c:	4613      	mov	r3, r2
 800b37e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2203      	movs	r2, #3
 800b384:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b388:	88fa      	ldrh	r2, [r7, #6]
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b390:	88fa      	ldrh	r2, [r7, #6]
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b398:	88fb      	ldrh	r3, [r7, #6]
 800b39a:	68ba      	ldr	r2, [r7, #8]
 800b39c:	2100      	movs	r1, #0
 800b39e:	68f8      	ldr	r0, [r7, #12]
 800b3a0:	f000 fc81 	bl	800bca6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3a4:	2300      	movs	r3, #0
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3710      	adds	r7, #16
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}

0800b3ae <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b3ae:	b580      	push	{r7, lr}
 800b3b0:	b084      	sub	sp, #16
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	60f8      	str	r0, [r7, #12]
 800b3b6:	60b9      	str	r1, [r7, #8]
 800b3b8:	4613      	mov	r3, r2
 800b3ba:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3bc:	88fb      	ldrh	r3, [r7, #6]
 800b3be:	68ba      	ldr	r2, [r7, #8]
 800b3c0:	2100      	movs	r1, #0
 800b3c2:	68f8      	ldr	r0, [r7, #12]
 800b3c4:	f000 fc6f 	bl	800bca6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3c8:	2300      	movs	r3, #0
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3710      	adds	r7, #16
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}

0800b3d2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b3d2:	b580      	push	{r7, lr}
 800b3d4:	b082      	sub	sp, #8
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2204      	movs	r2, #4
 800b3de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	2100      	movs	r1, #0
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 fc39 	bl	800bc60 <USBD_LL_Transmit>

  return USBD_OK;
 800b3ee:	2300      	movs	r3, #0
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3708      	adds	r7, #8
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2205      	movs	r2, #5
 800b404:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b408:	2300      	movs	r3, #0
 800b40a:	2200      	movs	r2, #0
 800b40c:	2100      	movs	r1, #0
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 fc49 	bl	800bca6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b414:	2300      	movs	r3, #0
}
 800b416:	4618      	mov	r0, r3
 800b418:	3708      	adds	r7, #8
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
	...

0800b420 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b424:	2200      	movs	r2, #0
 800b426:	4912      	ldr	r1, [pc, #72]	; (800b470 <MX_USB_DEVICE_Init+0x50>)
 800b428:	4812      	ldr	r0, [pc, #72]	; (800b474 <MX_USB_DEVICE_Init+0x54>)
 800b42a:	f7fe ff57 	bl	800a2dc <USBD_Init>
 800b42e:	4603      	mov	r3, r0
 800b430:	2b00      	cmp	r3, #0
 800b432:	d001      	beq.n	800b438 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b434:	f7f5 fbee 	bl	8000c14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b438:	490f      	ldr	r1, [pc, #60]	; (800b478 <MX_USB_DEVICE_Init+0x58>)
 800b43a:	480e      	ldr	r0, [pc, #56]	; (800b474 <MX_USB_DEVICE_Init+0x54>)
 800b43c:	f7fe ff79 	bl	800a332 <USBD_RegisterClass>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d001      	beq.n	800b44a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b446:	f7f5 fbe5 	bl	8000c14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b44a:	490c      	ldr	r1, [pc, #48]	; (800b47c <MX_USB_DEVICE_Init+0x5c>)
 800b44c:	4809      	ldr	r0, [pc, #36]	; (800b474 <MX_USB_DEVICE_Init+0x54>)
 800b44e:	f7fe fea7 	bl	800a1a0 <USBD_CDC_RegisterInterface>
 800b452:	4603      	mov	r3, r0
 800b454:	2b00      	cmp	r3, #0
 800b456:	d001      	beq.n	800b45c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b458:	f7f5 fbdc 	bl	8000c14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b45c:	4805      	ldr	r0, [pc, #20]	; (800b474 <MX_USB_DEVICE_Init+0x54>)
 800b45e:	f7fe ff82 	bl	800a366 <USBD_Start>
 800b462:	4603      	mov	r3, r0
 800b464:	2b00      	cmp	r3, #0
 800b466:	d001      	beq.n	800b46c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b468:	f7f5 fbd4 	bl	8000c14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b46c:	bf00      	nop
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	20000130 	.word	0x20000130
 800b474:	20000354 	.word	0x20000354
 800b478:	2000001c 	.word	0x2000001c
 800b47c:	20000120 	.word	0x20000120

0800b480 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b484:	2200      	movs	r2, #0
 800b486:	4905      	ldr	r1, [pc, #20]	; (800b49c <CDC_Init_FS+0x1c>)
 800b488:	4805      	ldr	r0, [pc, #20]	; (800b4a0 <CDC_Init_FS+0x20>)
 800b48a:	f7fe fea0 	bl	800a1ce <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b48e:	4905      	ldr	r1, [pc, #20]	; (800b4a4 <CDC_Init_FS+0x24>)
 800b490:	4803      	ldr	r0, [pc, #12]	; (800b4a0 <CDC_Init_FS+0x20>)
 800b492:	f7fe feb6 	bl	800a202 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b496:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b498:	4618      	mov	r0, r3
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	20000a18 	.word	0x20000a18
 800b4a0:	20000354 	.word	0x20000354
 800b4a4:	20000618 	.word	0x20000618

0800b4a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b4ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr

0800b4b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b083      	sub	sp, #12
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	4603      	mov	r3, r0
 800b4c0:	6039      	str	r1, [r7, #0]
 800b4c2:	71fb      	strb	r3, [r7, #7]
 800b4c4:	4613      	mov	r3, r2
 800b4c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b4c8:	79fb      	ldrb	r3, [r7, #7]
 800b4ca:	2b23      	cmp	r3, #35	; 0x23
 800b4cc:	d84a      	bhi.n	800b564 <CDC_Control_FS+0xac>
 800b4ce:	a201      	add	r2, pc, #4	; (adr r2, 800b4d4 <CDC_Control_FS+0x1c>)
 800b4d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d4:	0800b565 	.word	0x0800b565
 800b4d8:	0800b565 	.word	0x0800b565
 800b4dc:	0800b565 	.word	0x0800b565
 800b4e0:	0800b565 	.word	0x0800b565
 800b4e4:	0800b565 	.word	0x0800b565
 800b4e8:	0800b565 	.word	0x0800b565
 800b4ec:	0800b565 	.word	0x0800b565
 800b4f0:	0800b565 	.word	0x0800b565
 800b4f4:	0800b565 	.word	0x0800b565
 800b4f8:	0800b565 	.word	0x0800b565
 800b4fc:	0800b565 	.word	0x0800b565
 800b500:	0800b565 	.word	0x0800b565
 800b504:	0800b565 	.word	0x0800b565
 800b508:	0800b565 	.word	0x0800b565
 800b50c:	0800b565 	.word	0x0800b565
 800b510:	0800b565 	.word	0x0800b565
 800b514:	0800b565 	.word	0x0800b565
 800b518:	0800b565 	.word	0x0800b565
 800b51c:	0800b565 	.word	0x0800b565
 800b520:	0800b565 	.word	0x0800b565
 800b524:	0800b565 	.word	0x0800b565
 800b528:	0800b565 	.word	0x0800b565
 800b52c:	0800b565 	.word	0x0800b565
 800b530:	0800b565 	.word	0x0800b565
 800b534:	0800b565 	.word	0x0800b565
 800b538:	0800b565 	.word	0x0800b565
 800b53c:	0800b565 	.word	0x0800b565
 800b540:	0800b565 	.word	0x0800b565
 800b544:	0800b565 	.word	0x0800b565
 800b548:	0800b565 	.word	0x0800b565
 800b54c:	0800b565 	.word	0x0800b565
 800b550:	0800b565 	.word	0x0800b565
 800b554:	0800b565 	.word	0x0800b565
 800b558:	0800b565 	.word	0x0800b565
 800b55c:	0800b565 	.word	0x0800b565
 800b560:	0800b565 	.word	0x0800b565
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b564:	bf00      	nop
  }

  return (USBD_OK);
 800b566:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b568:	4618      	mov	r0, r3
 800b56a:	370c      	adds	r7, #12
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b57e:	6879      	ldr	r1, [r7, #4]
 800b580:	4805      	ldr	r0, [pc, #20]	; (800b598 <CDC_Receive_FS+0x24>)
 800b582:	f7fe fe3e 	bl	800a202 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b586:	4804      	ldr	r0, [pc, #16]	; (800b598 <CDC_Receive_FS+0x24>)
 800b588:	f7fe fe7e 	bl	800a288 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b58c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3708      	adds	r7, #8
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	20000354 	.word	0x20000354

0800b59c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b5ac:	4b0d      	ldr	r3, [pc, #52]	; (800b5e4 <CDC_Transmit_FS+0x48>)
 800b5ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d001      	beq.n	800b5c2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b5be:	2301      	movs	r3, #1
 800b5c0:	e00b      	b.n	800b5da <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b5c2:	887b      	ldrh	r3, [r7, #2]
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	6879      	ldr	r1, [r7, #4]
 800b5c8:	4806      	ldr	r0, [pc, #24]	; (800b5e4 <CDC_Transmit_FS+0x48>)
 800b5ca:	f7fe fe00 	bl	800a1ce <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b5ce:	4805      	ldr	r0, [pc, #20]	; (800b5e4 <CDC_Transmit_FS+0x48>)
 800b5d0:	f7fe fe2b 	bl	800a22a <USBD_CDC_TransmitPacket>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b5d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3710      	adds	r7, #16
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	20000354 	.word	0x20000354

0800b5e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	6039      	str	r1, [r7, #0]
 800b5f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	2212      	movs	r2, #18
 800b5f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b5fa:	4b03      	ldr	r3, [pc, #12]	; (800b608 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	370c      	adds	r7, #12
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr
 800b608:	2000014c 	.word	0x2000014c

0800b60c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
 800b612:	4603      	mov	r3, r0
 800b614:	6039      	str	r1, [r7, #0]
 800b616:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	2204      	movs	r2, #4
 800b61c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b61e:	4b03      	ldr	r3, [pc, #12]	; (800b62c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b620:	4618      	mov	r0, r3
 800b622:	370c      	adds	r7, #12
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr
 800b62c:	20000160 	.word	0x20000160

0800b630 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	4603      	mov	r3, r0
 800b638:	6039      	str	r1, [r7, #0]
 800b63a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b63c:	79fb      	ldrb	r3, [r7, #7]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d105      	bne.n	800b64e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b642:	683a      	ldr	r2, [r7, #0]
 800b644:	4907      	ldr	r1, [pc, #28]	; (800b664 <USBD_FS_ProductStrDescriptor+0x34>)
 800b646:	4808      	ldr	r0, [pc, #32]	; (800b668 <USBD_FS_ProductStrDescriptor+0x38>)
 800b648:	f7ff fe0b 	bl	800b262 <USBD_GetString>
 800b64c:	e004      	b.n	800b658 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b64e:	683a      	ldr	r2, [r7, #0]
 800b650:	4904      	ldr	r1, [pc, #16]	; (800b664 <USBD_FS_ProductStrDescriptor+0x34>)
 800b652:	4805      	ldr	r0, [pc, #20]	; (800b668 <USBD_FS_ProductStrDescriptor+0x38>)
 800b654:	f7ff fe05 	bl	800b262 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b658:	4b02      	ldr	r3, [pc, #8]	; (800b664 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3708      	adds	r7, #8
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	20000e18 	.word	0x20000e18
 800b668:	0800be24 	.word	0x0800be24

0800b66c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	4603      	mov	r3, r0
 800b674:	6039      	str	r1, [r7, #0]
 800b676:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b678:	683a      	ldr	r2, [r7, #0]
 800b67a:	4904      	ldr	r1, [pc, #16]	; (800b68c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b67c:	4804      	ldr	r0, [pc, #16]	; (800b690 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b67e:	f7ff fdf0 	bl	800b262 <USBD_GetString>
  return USBD_StrDesc;
 800b682:	4b02      	ldr	r3, [pc, #8]	; (800b68c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b684:	4618      	mov	r0, r3
 800b686:	3708      	adds	r7, #8
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}
 800b68c:	20000e18 	.word	0x20000e18
 800b690:	0800be3c 	.word	0x0800be3c

0800b694 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	4603      	mov	r3, r0
 800b69c:	6039      	str	r1, [r7, #0]
 800b69e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	221a      	movs	r2, #26
 800b6a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b6a6:	f000 f843 	bl	800b730 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b6aa:	4b02      	ldr	r3, [pc, #8]	; (800b6b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3708      	adds	r7, #8
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	20000164 	.word	0x20000164

0800b6b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	4603      	mov	r3, r0
 800b6c0:	6039      	str	r1, [r7, #0]
 800b6c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b6c4:	79fb      	ldrb	r3, [r7, #7]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d105      	bne.n	800b6d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b6ca:	683a      	ldr	r2, [r7, #0]
 800b6cc:	4907      	ldr	r1, [pc, #28]	; (800b6ec <USBD_FS_ConfigStrDescriptor+0x34>)
 800b6ce:	4808      	ldr	r0, [pc, #32]	; (800b6f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b6d0:	f7ff fdc7 	bl	800b262 <USBD_GetString>
 800b6d4:	e004      	b.n	800b6e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b6d6:	683a      	ldr	r2, [r7, #0]
 800b6d8:	4904      	ldr	r1, [pc, #16]	; (800b6ec <USBD_FS_ConfigStrDescriptor+0x34>)
 800b6da:	4805      	ldr	r0, [pc, #20]	; (800b6f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b6dc:	f7ff fdc1 	bl	800b262 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6e0:	4b02      	ldr	r3, [pc, #8]	; (800b6ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3708      	adds	r7, #8
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	20000e18 	.word	0x20000e18
 800b6f0:	0800be50 	.word	0x0800be50

0800b6f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	6039      	str	r1, [r7, #0]
 800b6fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b700:	79fb      	ldrb	r3, [r7, #7]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d105      	bne.n	800b712 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b706:	683a      	ldr	r2, [r7, #0]
 800b708:	4907      	ldr	r1, [pc, #28]	; (800b728 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b70a:	4808      	ldr	r0, [pc, #32]	; (800b72c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b70c:	f7ff fda9 	bl	800b262 <USBD_GetString>
 800b710:	e004      	b.n	800b71c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b712:	683a      	ldr	r2, [r7, #0]
 800b714:	4904      	ldr	r1, [pc, #16]	; (800b728 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b716:	4805      	ldr	r0, [pc, #20]	; (800b72c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b718:	f7ff fda3 	bl	800b262 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b71c:	4b02      	ldr	r3, [pc, #8]	; (800b728 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3708      	adds	r7, #8
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	20000e18 	.word	0x20000e18
 800b72c:	0800be5c 	.word	0x0800be5c

0800b730 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b736:	4b0f      	ldr	r3, [pc, #60]	; (800b774 <Get_SerialNum+0x44>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b73c:	4b0e      	ldr	r3, [pc, #56]	; (800b778 <Get_SerialNum+0x48>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b742:	4b0e      	ldr	r3, [pc, #56]	; (800b77c <Get_SerialNum+0x4c>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b748:	68fa      	ldr	r2, [r7, #12]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	4413      	add	r3, r2
 800b74e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d009      	beq.n	800b76a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b756:	2208      	movs	r2, #8
 800b758:	4909      	ldr	r1, [pc, #36]	; (800b780 <Get_SerialNum+0x50>)
 800b75a:	68f8      	ldr	r0, [r7, #12]
 800b75c:	f000 f814 	bl	800b788 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b760:	2204      	movs	r2, #4
 800b762:	4908      	ldr	r1, [pc, #32]	; (800b784 <Get_SerialNum+0x54>)
 800b764:	68b8      	ldr	r0, [r7, #8]
 800b766:	f000 f80f 	bl	800b788 <IntToUnicode>
  }
}
 800b76a:	bf00      	nop
 800b76c:	3710      	adds	r7, #16
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	1ffff7ac 	.word	0x1ffff7ac
 800b778:	1ffff7b0 	.word	0x1ffff7b0
 800b77c:	1ffff7b4 	.word	0x1ffff7b4
 800b780:	20000166 	.word	0x20000166
 800b784:	20000176 	.word	0x20000176

0800b788 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b788:	b480      	push	{r7}
 800b78a:	b087      	sub	sp, #28
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	4613      	mov	r3, r2
 800b794:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b796:	2300      	movs	r3, #0
 800b798:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b79a:	2300      	movs	r3, #0
 800b79c:	75fb      	strb	r3, [r7, #23]
 800b79e:	e027      	b.n	800b7f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	0f1b      	lsrs	r3, r3, #28
 800b7a4:	2b09      	cmp	r3, #9
 800b7a6:	d80b      	bhi.n	800b7c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	0f1b      	lsrs	r3, r3, #28
 800b7ac:	b2da      	uxtb	r2, r3
 800b7ae:	7dfb      	ldrb	r3, [r7, #23]
 800b7b0:	005b      	lsls	r3, r3, #1
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	440b      	add	r3, r1
 800b7b8:	3230      	adds	r2, #48	; 0x30
 800b7ba:	b2d2      	uxtb	r2, r2
 800b7bc:	701a      	strb	r2, [r3, #0]
 800b7be:	e00a      	b.n	800b7d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	0f1b      	lsrs	r3, r3, #28
 800b7c4:	b2da      	uxtb	r2, r3
 800b7c6:	7dfb      	ldrb	r3, [r7, #23]
 800b7c8:	005b      	lsls	r3, r3, #1
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	440b      	add	r3, r1
 800b7d0:	3237      	adds	r2, #55	; 0x37
 800b7d2:	b2d2      	uxtb	r2, r2
 800b7d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	011b      	lsls	r3, r3, #4
 800b7da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b7dc:	7dfb      	ldrb	r3, [r7, #23]
 800b7de:	005b      	lsls	r3, r3, #1
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	68ba      	ldr	r2, [r7, #8]
 800b7e4:	4413      	add	r3, r2
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b7ea:	7dfb      	ldrb	r3, [r7, #23]
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	75fb      	strb	r3, [r7, #23]
 800b7f0:	7dfa      	ldrb	r2, [r7, #23]
 800b7f2:	79fb      	ldrb	r3, [r7, #7]
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d3d3      	bcc.n	800b7a0 <IntToUnicode+0x18>
  }
}
 800b7f8:	bf00      	nop
 800b7fa:	bf00      	nop
 800b7fc:	371c      	adds	r7, #28
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr
	...

0800b808 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b08a      	sub	sp, #40	; 0x28
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b810:	f107 0314 	add.w	r3, r7, #20
 800b814:	2200      	movs	r2, #0
 800b816:	601a      	str	r2, [r3, #0]
 800b818:	605a      	str	r2, [r3, #4]
 800b81a:	609a      	str	r2, [r3, #8]
 800b81c:	60da      	str	r2, [r3, #12]
 800b81e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4a1c      	ldr	r2, [pc, #112]	; (800b898 <HAL_PCD_MspInit+0x90>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d131      	bne.n	800b88e <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b82a:	4b1c      	ldr	r3, [pc, #112]	; (800b89c <HAL_PCD_MspInit+0x94>)
 800b82c:	695b      	ldr	r3, [r3, #20]
 800b82e:	4a1b      	ldr	r2, [pc, #108]	; (800b89c <HAL_PCD_MspInit+0x94>)
 800b830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b834:	6153      	str	r3, [r2, #20]
 800b836:	4b19      	ldr	r3, [pc, #100]	; (800b89c <HAL_PCD_MspInit+0x94>)
 800b838:	695b      	ldr	r3, [r3, #20]
 800b83a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b83e:	613b      	str	r3, [r7, #16]
 800b840:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800b842:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b848:	2302      	movs	r3, #2
 800b84a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b84c:	2300      	movs	r3, #0
 800b84e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b850:	2303      	movs	r3, #3
 800b852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800b854:	230e      	movs	r3, #14
 800b856:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b858:	f107 0314 	add.w	r3, r7, #20
 800b85c:	4619      	mov	r1, r3
 800b85e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b862:	f7f7 f9e1 	bl	8002c28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b866:	4b0d      	ldr	r3, [pc, #52]	; (800b89c <HAL_PCD_MspInit+0x94>)
 800b868:	69db      	ldr	r3, [r3, #28]
 800b86a:	4a0c      	ldr	r2, [pc, #48]	; (800b89c <HAL_PCD_MspInit+0x94>)
 800b86c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b870:	61d3      	str	r3, [r2, #28]
 800b872:	4b0a      	ldr	r3, [pc, #40]	; (800b89c <HAL_PCD_MspInit+0x94>)
 800b874:	69db      	ldr	r3, [r3, #28]
 800b876:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b87a:	60fb      	str	r3, [r7, #12]
 800b87c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800b87e:	2200      	movs	r2, #0
 800b880:	2100      	movs	r1, #0
 800b882:	2014      	movs	r0, #20
 800b884:	f7f7 f999 	bl	8002bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800b888:	2014      	movs	r0, #20
 800b88a:	f7f7 f9b2 	bl	8002bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b88e:	bf00      	nop
 800b890:	3728      	adds	r7, #40	; 0x28
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	40005c00 	.word	0x40005c00
 800b89c:	40021000 	.word	0x40021000

0800b8a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	4610      	mov	r0, r2
 800b8b8:	f7fe fd9e 	bl	800a3f8 <USBD_LL_SetupStage>
}
 800b8bc:	bf00      	nop
 800b8be:	3708      	adds	r7, #8
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b8d6:	78fa      	ldrb	r2, [r7, #3]
 800b8d8:	6879      	ldr	r1, [r7, #4]
 800b8da:	4613      	mov	r3, r2
 800b8dc:	009b      	lsls	r3, r3, #2
 800b8de:	4413      	add	r3, r2
 800b8e0:	00db      	lsls	r3, r3, #3
 800b8e2:	440b      	add	r3, r1
 800b8e4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b8e8:	681a      	ldr	r2, [r3, #0]
 800b8ea:	78fb      	ldrb	r3, [r7, #3]
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	f7fe fdd0 	bl	800a492 <USBD_LL_DataOutStage>
}
 800b8f2:	bf00      	nop
 800b8f4:	3708      	adds	r7, #8
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}

0800b8fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8fa:	b580      	push	{r7, lr}
 800b8fc:	b082      	sub	sp, #8
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
 800b902:	460b      	mov	r3, r1
 800b904:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b90c:	78fa      	ldrb	r2, [r7, #3]
 800b90e:	6879      	ldr	r1, [r7, #4]
 800b910:	4613      	mov	r3, r2
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	4413      	add	r3, r2
 800b916:	00db      	lsls	r3, r3, #3
 800b918:	440b      	add	r3, r1
 800b91a:	333c      	adds	r3, #60	; 0x3c
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	78fb      	ldrb	r3, [r7, #3]
 800b920:	4619      	mov	r1, r3
 800b922:	f7fe fe27 	bl	800a574 <USBD_LL_DataInStage>
}
 800b926:	bf00      	nop
 800b928:	3708      	adds	r7, #8
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b082      	sub	sp, #8
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7fe ff3a 	bl	800a7b6 <USBD_LL_SOF>
}
 800b942:	bf00      	nop
 800b944:	3708      	adds	r7, #8
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}

0800b94a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b084      	sub	sp, #16
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b952:	2301      	movs	r3, #1
 800b954:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	689b      	ldr	r3, [r3, #8]
 800b95a:	2b02      	cmp	r3, #2
 800b95c:	d001      	beq.n	800b962 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b95e:	f7f5 f959 	bl	8000c14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b968:	7bfa      	ldrb	r2, [r7, #15]
 800b96a:	4611      	mov	r1, r2
 800b96c:	4618      	mov	r0, r3
 800b96e:	f7fe fee7 	bl	800a740 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b978:	4618      	mov	r0, r3
 800b97a:	f7fe fea0 	bl	800a6be <USBD_LL_Reset>
}
 800b97e:	bf00      	nop
 800b980:	3710      	adds	r7, #16
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
	...

0800b988 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b996:	4618      	mov	r0, r3
 800b998:	f7fe fee2 	bl	800a760 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	699b      	ldr	r3, [r3, #24]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d005      	beq.n	800b9b0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b9a4:	4b04      	ldr	r3, [pc, #16]	; (800b9b8 <HAL_PCD_SuspendCallback+0x30>)
 800b9a6:	691b      	ldr	r3, [r3, #16]
 800b9a8:	4a03      	ldr	r2, [pc, #12]	; (800b9b8 <HAL_PCD_SuspendCallback+0x30>)
 800b9aa:	f043 0306 	orr.w	r3, r3, #6
 800b9ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b9b0:	bf00      	nop
 800b9b2:	3708      	adds	r7, #8
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	e000ed00 	.word	0xe000ed00

0800b9bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b082      	sub	sp, #8
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f7fe fedd 	bl	800a78a <USBD_LL_Resume>
}
 800b9d0:	bf00      	nop
 800b9d2:	3708      	adds	r7, #8
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b082      	sub	sp, #8
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b9e0:	4a28      	ldr	r2, [pc, #160]	; (800ba84 <USBD_LL_Init+0xac>)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	4a26      	ldr	r2, [pc, #152]	; (800ba84 <USBD_LL_Init+0xac>)
 800b9ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b9f0:	4b24      	ldr	r3, [pc, #144]	; (800ba84 <USBD_LL_Init+0xac>)
 800b9f2:	4a25      	ldr	r2, [pc, #148]	; (800ba88 <USBD_LL_Init+0xb0>)
 800b9f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b9f6:	4b23      	ldr	r3, [pc, #140]	; (800ba84 <USBD_LL_Init+0xac>)
 800b9f8:	2208      	movs	r2, #8
 800b9fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b9fc:	4b21      	ldr	r3, [pc, #132]	; (800ba84 <USBD_LL_Init+0xac>)
 800b9fe:	2202      	movs	r2, #2
 800ba00:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ba02:	4b20      	ldr	r3, [pc, #128]	; (800ba84 <USBD_LL_Init+0xac>)
 800ba04:	2202      	movs	r2, #2
 800ba06:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ba08:	4b1e      	ldr	r3, [pc, #120]	; (800ba84 <USBD_LL_Init+0xac>)
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ba0e:	4b1d      	ldr	r3, [pc, #116]	; (800ba84 <USBD_LL_Init+0xac>)
 800ba10:	2200      	movs	r2, #0
 800ba12:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ba14:	481b      	ldr	r0, [pc, #108]	; (800ba84 <USBD_LL_Init+0xac>)
 800ba16:	f7f7 fae3 	bl	8002fe0 <HAL_PCD_Init>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d001      	beq.n	800ba24 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ba20:	f7f5 f8f8 	bl	8000c14 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ba2a:	2318      	movs	r3, #24
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	2100      	movs	r1, #0
 800ba30:	f7f8 ff6c 	bl	800490c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ba3a:	2358      	movs	r3, #88	; 0x58
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	2180      	movs	r1, #128	; 0x80
 800ba40:	f7f8 ff64 	bl	800490c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ba4a:	23c0      	movs	r3, #192	; 0xc0
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	2181      	movs	r1, #129	; 0x81
 800ba50:	f7f8 ff5c 	bl	800490c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ba5a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ba5e:	2200      	movs	r2, #0
 800ba60:	2101      	movs	r1, #1
 800ba62:	f7f8 ff53 	bl	800490c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ba6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba70:	2200      	movs	r2, #0
 800ba72:	2182      	movs	r1, #130	; 0x82
 800ba74:	f7f8 ff4a 	bl	800490c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ba78:	2300      	movs	r3, #0
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3708      	adds	r7, #8
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	bf00      	nop
 800ba84:	20001018 	.word	0x20001018
 800ba88:	40005c00 	.word	0x40005c00

0800ba8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b084      	sub	sp, #16
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba94:	2300      	movs	r3, #0
 800ba96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7f7 fb6e 	bl	8003184 <HAL_PCD_Start>
 800baa8:	4603      	mov	r3, r0
 800baaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baac:	7bfb      	ldrb	r3, [r7, #15]
 800baae:	4618      	mov	r0, r3
 800bab0:	f000 f954 	bl	800bd5c <USBD_Get_USB_Status>
 800bab4:	4603      	mov	r3, r0
 800bab6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bab8:	7bbb      	ldrb	r3, [r7, #14]
}
 800baba:	4618      	mov	r0, r3
 800babc:	3710      	adds	r7, #16
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}

0800bac2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bac2:	b580      	push	{r7, lr}
 800bac4:	b084      	sub	sp, #16
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]
 800baca:	4608      	mov	r0, r1
 800bacc:	4611      	mov	r1, r2
 800bace:	461a      	mov	r2, r3
 800bad0:	4603      	mov	r3, r0
 800bad2:	70fb      	strb	r3, [r7, #3]
 800bad4:	460b      	mov	r3, r1
 800bad6:	70bb      	strb	r3, [r7, #2]
 800bad8:	4613      	mov	r3, r2
 800bada:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800badc:	2300      	movs	r3, #0
 800bade:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bae0:	2300      	movs	r3, #0
 800bae2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800baea:	78bb      	ldrb	r3, [r7, #2]
 800baec:	883a      	ldrh	r2, [r7, #0]
 800baee:	78f9      	ldrb	r1, [r7, #3]
 800baf0:	f7f7 fc67 	bl	80033c2 <HAL_PCD_EP_Open>
 800baf4:	4603      	mov	r3, r0
 800baf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baf8:	7bfb      	ldrb	r3, [r7, #15]
 800bafa:	4618      	mov	r0, r3
 800bafc:	f000 f92e 	bl	800bd5c <USBD_Get_USB_Status>
 800bb00:	4603      	mov	r3, r0
 800bb02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb04:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3710      	adds	r7, #16
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}

0800bb0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b084      	sub	sp, #16
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
 800bb16:	460b      	mov	r3, r1
 800bb18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb28:	78fa      	ldrb	r2, [r7, #3]
 800bb2a:	4611      	mov	r1, r2
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7f7 fca5 	bl	800347c <HAL_PCD_EP_Close>
 800bb32:	4603      	mov	r3, r0
 800bb34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb36:	7bfb      	ldrb	r3, [r7, #15]
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f000 f90f 	bl	800bd5c <USBD_Get_USB_Status>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb42:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3710      	adds	r7, #16
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	460b      	mov	r3, r1
 800bb56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb66:	78fa      	ldrb	r2, [r7, #3]
 800bb68:	4611      	mov	r1, r2
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7f7 fd4e 	bl	800360c <HAL_PCD_EP_SetStall>
 800bb70:	4603      	mov	r3, r0
 800bb72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb74:	7bfb      	ldrb	r3, [r7, #15]
 800bb76:	4618      	mov	r0, r3
 800bb78:	f000 f8f0 	bl	800bd5c <USBD_Get_USB_Status>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb80:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3710      	adds	r7, #16
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b084      	sub	sp, #16
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
 800bb92:	460b      	mov	r3, r1
 800bb94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb96:	2300      	movs	r3, #0
 800bb98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bba4:	78fa      	ldrb	r2, [r7, #3]
 800bba6:	4611      	mov	r1, r2
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f7f7 fd81 	bl	80036b0 <HAL_PCD_EP_ClrStall>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbb2:	7bfb      	ldrb	r3, [r7, #15]
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f000 f8d1 	bl	800bd5c <USBD_Get_USB_Status>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbbe:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3710      	adds	r7, #16
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b085      	sub	sp, #20
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bbdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	da0c      	bge.n	800bbfe <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bbe4:	78fb      	ldrb	r3, [r7, #3]
 800bbe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbea:	68f9      	ldr	r1, [r7, #12]
 800bbec:	1c5a      	adds	r2, r3, #1
 800bbee:	4613      	mov	r3, r2
 800bbf0:	009b      	lsls	r3, r3, #2
 800bbf2:	4413      	add	r3, r2
 800bbf4:	00db      	lsls	r3, r3, #3
 800bbf6:	440b      	add	r3, r1
 800bbf8:	3302      	adds	r3, #2
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	e00b      	b.n	800bc16 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bbfe:	78fb      	ldrb	r3, [r7, #3]
 800bc00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc04:	68f9      	ldr	r1, [r7, #12]
 800bc06:	4613      	mov	r3, r2
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	4413      	add	r3, r2
 800bc0c:	00db      	lsls	r3, r3, #3
 800bc0e:	440b      	add	r3, r1
 800bc10:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bc14:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3714      	adds	r7, #20
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr

0800bc22 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bc22:	b580      	push	{r7, lr}
 800bc24:	b084      	sub	sp, #16
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc32:	2300      	movs	r3, #0
 800bc34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc3c:	78fa      	ldrb	r2, [r7, #3]
 800bc3e:	4611      	mov	r1, r2
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7f7 fb99 	bl	8003378 <HAL_PCD_SetAddress>
 800bc46:	4603      	mov	r3, r0
 800bc48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc4a:	7bfb      	ldrb	r3, [r7, #15]
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f000 f885 	bl	800bd5c <USBD_Get_USB_Status>
 800bc52:	4603      	mov	r3, r0
 800bc54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc56:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3710      	adds	r7, #16
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b086      	sub	sp, #24
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	607a      	str	r2, [r7, #4]
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	72fb      	strb	r3, [r7, #11]
 800bc70:	4613      	mov	r3, r2
 800bc72:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc74:	2300      	movs	r3, #0
 800bc76:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bc82:	893b      	ldrh	r3, [r7, #8]
 800bc84:	7af9      	ldrb	r1, [r7, #11]
 800bc86:	687a      	ldr	r2, [r7, #4]
 800bc88:	f7f7 fc89 	bl	800359e <HAL_PCD_EP_Transmit>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc90:	7dfb      	ldrb	r3, [r7, #23]
 800bc92:	4618      	mov	r0, r3
 800bc94:	f000 f862 	bl	800bd5c <USBD_Get_USB_Status>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bc9c:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3718      	adds	r7, #24
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}

0800bca6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b086      	sub	sp, #24
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	60f8      	str	r0, [r7, #12]
 800bcae:	607a      	str	r2, [r7, #4]
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	72fb      	strb	r3, [r7, #11]
 800bcb6:	4613      	mov	r3, r2
 800bcb8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bcc8:	893b      	ldrh	r3, [r7, #8]
 800bcca:	7af9      	ldrb	r1, [r7, #11]
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	f7f7 fc1d 	bl	800350c <HAL_PCD_EP_Receive>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcd6:	7dfb      	ldrb	r3, [r7, #23]
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f000 f83f 	bl	800bd5c <USBD_Get_USB_Status>
 800bcde:	4603      	mov	r3, r0
 800bce0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bce2:	7dbb      	ldrb	r3, [r7, #22]
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3718      	adds	r7, #24
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcfe:	78fa      	ldrb	r2, [r7, #3]
 800bd00:	4611      	mov	r1, r2
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7f7 fc33 	bl	800356e <HAL_PCD_EP_GetRxCount>
 800bd08:	4603      	mov	r3, r0
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3708      	adds	r7, #8
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
	...

0800bd14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bd1c:	4b03      	ldr	r3, [pc, #12]	; (800bd2c <USBD_static_malloc+0x18>)
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	370c      	adds	r7, #12
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr
 800bd2a:	bf00      	nop
 800bd2c:	20001304 	.word	0x20001304

0800bd30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]

}
 800bd38:	bf00      	nop
 800bd3a:	370c      	adds	r7, #12
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr

0800bd44 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd44:	b480      	push	{r7}
 800bd46:	b083      	sub	sp, #12
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	460b      	mov	r3, r1
 800bd4e:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800bd50:	bf00      	nop
 800bd52:	370c      	adds	r7, #12
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr

0800bd5c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b085      	sub	sp, #20
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	4603      	mov	r3, r0
 800bd64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd66:	2300      	movs	r3, #0
 800bd68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bd6a:	79fb      	ldrb	r3, [r7, #7]
 800bd6c:	2b03      	cmp	r3, #3
 800bd6e:	d817      	bhi.n	800bda0 <USBD_Get_USB_Status+0x44>
 800bd70:	a201      	add	r2, pc, #4	; (adr r2, 800bd78 <USBD_Get_USB_Status+0x1c>)
 800bd72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd76:	bf00      	nop
 800bd78:	0800bd89 	.word	0x0800bd89
 800bd7c:	0800bd8f 	.word	0x0800bd8f
 800bd80:	0800bd95 	.word	0x0800bd95
 800bd84:	0800bd9b 	.word	0x0800bd9b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd8c:	e00b      	b.n	800bda6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd8e:	2302      	movs	r3, #2
 800bd90:	73fb      	strb	r3, [r7, #15]
    break;
 800bd92:	e008      	b.n	800bda6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd94:	2301      	movs	r3, #1
 800bd96:	73fb      	strb	r3, [r7, #15]
    break;
 800bd98:	e005      	b.n	800bda6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd9a:	2302      	movs	r3, #2
 800bd9c:	73fb      	strb	r3, [r7, #15]
    break;
 800bd9e:	e002      	b.n	800bda6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bda0:	2302      	movs	r3, #2
 800bda2:	73fb      	strb	r3, [r7, #15]
    break;
 800bda4:	bf00      	nop
  }
  return usb_status;
 800bda6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3714      	adds	r7, #20
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr

0800bdb4 <memset>:
 800bdb4:	4402      	add	r2, r0
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d100      	bne.n	800bdbe <memset+0xa>
 800bdbc:	4770      	bx	lr
 800bdbe:	f803 1b01 	strb.w	r1, [r3], #1
 800bdc2:	e7f9      	b.n	800bdb8 <memset+0x4>

0800bdc4 <__libc_init_array>:
 800bdc4:	b570      	push	{r4, r5, r6, lr}
 800bdc6:	4d0d      	ldr	r5, [pc, #52]	; (800bdfc <__libc_init_array+0x38>)
 800bdc8:	4c0d      	ldr	r4, [pc, #52]	; (800be00 <__libc_init_array+0x3c>)
 800bdca:	1b64      	subs	r4, r4, r5
 800bdcc:	10a4      	asrs	r4, r4, #2
 800bdce:	2600      	movs	r6, #0
 800bdd0:	42a6      	cmp	r6, r4
 800bdd2:	d109      	bne.n	800bde8 <__libc_init_array+0x24>
 800bdd4:	4d0b      	ldr	r5, [pc, #44]	; (800be04 <__libc_init_array+0x40>)
 800bdd6:	4c0c      	ldr	r4, [pc, #48]	; (800be08 <__libc_init_array+0x44>)
 800bdd8:	f000 f818 	bl	800be0c <_init>
 800bddc:	1b64      	subs	r4, r4, r5
 800bdde:	10a4      	asrs	r4, r4, #2
 800bde0:	2600      	movs	r6, #0
 800bde2:	42a6      	cmp	r6, r4
 800bde4:	d105      	bne.n	800bdf2 <__libc_init_array+0x2e>
 800bde6:	bd70      	pop	{r4, r5, r6, pc}
 800bde8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdec:	4798      	blx	r3
 800bdee:	3601      	adds	r6, #1
 800bdf0:	e7ee      	b.n	800bdd0 <__libc_init_array+0xc>
 800bdf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdf6:	4798      	blx	r3
 800bdf8:	3601      	adds	r6, #1
 800bdfa:	e7f2      	b.n	800bde2 <__libc_init_array+0x1e>
 800bdfc:	0800bea4 	.word	0x0800bea4
 800be00:	0800bea4 	.word	0x0800bea4
 800be04:	0800bea4 	.word	0x0800bea4
 800be08:	0800bea8 	.word	0x0800bea8

0800be0c <_init>:
 800be0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be0e:	bf00      	nop
 800be10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be12:	bc08      	pop	{r3}
 800be14:	469e      	mov	lr, r3
 800be16:	4770      	bx	lr

0800be18 <_fini>:
 800be18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be1a:	bf00      	nop
 800be1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be1e:	bc08      	pop	{r3}
 800be20:	469e      	mov	lr, r3
 800be22:	4770      	bx	lr
