
VMS semestralka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009db4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08009f3c  08009f3c  00019f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fb4  08009fb4  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08009fb4  08009fb4  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009fb4  08009fb4  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fb4  08009fb4  00019fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fb8  08009fb8  00019fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08009fbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002017c  2**0
                  CONTENTS
 10 .bss          000012e0  2000017c  2000017c  0002017c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000145c  2000145c  0002017c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013fea  00000000  00000000  000201ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000033d2  00000000  00000000  000341d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001148  00000000  00000000  000375b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d31  00000000  00000000  000386f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020eef  00000000  00000000  00039429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017efc  00000000  00000000  0005a318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bf884  00000000  00000000  00072214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004750  00000000  00000000  00131a98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  001361e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000017c 	.word	0x2000017c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009f24 	.word	0x08009f24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000180 	.word	0x20000180
 80001c4:	08009f24 	.word	0x08009f24

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fb8c 	bl	80008e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f80c 	bl	80001ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f9c8 	bl	8000568 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001d8:	f000 f86c 	bl	80002b4 <MX_ADC1_Init>
  MX_ADC3_Init();
 80001dc:	f000 f8da 	bl	8000394 <MX_ADC3_Init>
  MX_TIM17_Init();
 80001e0:	f000 f948 	bl	8000474 <MX_TIM17_Init>
  MX_USB_DEVICE_Init();
 80001e4:	f009 f9ce 	bl	8009584 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e8:	e7fe      	b.n	80001e8 <main+0x20>
	...

080001ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b09e      	sub	sp, #120	; 0x78
 80001f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80001f6:	2228      	movs	r2, #40	; 0x28
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f009 fe66 	bl	8009ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000200:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
 8000208:	605a      	str	r2, [r3, #4]
 800020a:	609a      	str	r2, [r3, #8]
 800020c:	60da      	str	r2, [r3, #12]
 800020e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000210:	463b      	mov	r3, r7
 8000212:	223c      	movs	r2, #60	; 0x3c
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f009 fe58 	bl	8009ecc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800021c:	2301      	movs	r3, #1
 800021e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000220:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000224:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022a:	2301      	movs	r3, #1
 800022c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022e:	2302      	movs	r3, #2
 8000230:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000236:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000238:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800023c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000242:	4618      	mov	r0, r3
 8000244:	f003 f956 	bl	80034f4 <HAL_RCC_OscConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800024e:	f000 f9f1 	bl	8000634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000252:	230f      	movs	r3, #15
 8000254:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000256:	2302      	movs	r3, #2
 8000258:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800025e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000262:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000268:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800026c:	2101      	movs	r1, #1
 800026e:	4618      	mov	r0, r3
 8000270:	f004 f97e 	bl	8004570 <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800027a:	f000 f9db 	bl	8000634 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC12
 800027e:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <SystemClock_Config+0xc4>)
 8000280:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000282:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000286:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000288:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800028c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800028e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000292:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000294:	463b      	mov	r3, r7
 8000296:	4618      	mov	r0, r3
 8000298:	f004 fb50 	bl	800493c <HAL_RCCEx_PeriphCLKConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80002a2:	f000 f9c7 	bl	8000634 <Error_Handler>
  }
}
 80002a6:	bf00      	nop
 80002a8:	3778      	adds	r7, #120	; 0x78
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	00020180 	.word	0x00020180

080002b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b08a      	sub	sp, #40	; 0x28
 80002b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002ba:	f107 031c 	add.w	r3, r7, #28
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	605a      	str	r2, [r3, #4]
 80002ce:	609a      	str	r2, [r3, #8]
 80002d0:	60da      	str	r2, [r3, #12]
 80002d2:	611a      	str	r2, [r3, #16]
 80002d4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002d6:	4b2e      	ldr	r3, [pc, #184]	; (8000390 <MX_ADC1_Init+0xdc>)
 80002d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002de:	4b2c      	ldr	r3, [pc, #176]	; (8000390 <MX_ADC1_Init+0xdc>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002e4:	4b2a      	ldr	r3, [pc, #168]	; (8000390 <MX_ADC1_Init+0xdc>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002ea:	4b29      	ldr	r3, [pc, #164]	; (8000390 <MX_ADC1_Init+0xdc>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002f0:	4b27      	ldr	r3, [pc, #156]	; (8000390 <MX_ADC1_Init+0xdc>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002f6:	4b26      	ldr	r3, [pc, #152]	; (8000390 <MX_ADC1_Init+0xdc>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002fe:	4b24      	ldr	r3, [pc, #144]	; (8000390 <MX_ADC1_Init+0xdc>)
 8000300:	2200      	movs	r2, #0
 8000302:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000304:	4b22      	ldr	r3, [pc, #136]	; (8000390 <MX_ADC1_Init+0xdc>)
 8000306:	2201      	movs	r2, #1
 8000308:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800030a:	4b21      	ldr	r3, [pc, #132]	; (8000390 <MX_ADC1_Init+0xdc>)
 800030c:	2200      	movs	r2, #0
 800030e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000310:	4b1f      	ldr	r3, [pc, #124]	; (8000390 <MX_ADC1_Init+0xdc>)
 8000312:	2201      	movs	r2, #1
 8000314:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000316:	4b1e      	ldr	r3, [pc, #120]	; (8000390 <MX_ADC1_Init+0xdc>)
 8000318:	2200      	movs	r2, #0
 800031a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800031e:	4b1c      	ldr	r3, [pc, #112]	; (8000390 <MX_ADC1_Init+0xdc>)
 8000320:	2204      	movs	r2, #4
 8000322:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000324:	4b1a      	ldr	r3, [pc, #104]	; (8000390 <MX_ADC1_Init+0xdc>)
 8000326:	2200      	movs	r2, #0
 8000328:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800032a:	4b19      	ldr	r3, [pc, #100]	; (8000390 <MX_ADC1_Init+0xdc>)
 800032c:	2200      	movs	r2, #0
 800032e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000330:	4817      	ldr	r0, [pc, #92]	; (8000390 <MX_ADC1_Init+0xdc>)
 8000332:	f000 fb3f 	bl	80009b4 <HAL_ADC_Init>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800033c:	f000 f97a 	bl	8000634 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000340:	2300      	movs	r3, #0
 8000342:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000344:	f107 031c 	add.w	r3, r7, #28
 8000348:	4619      	mov	r1, r3
 800034a:	4811      	ldr	r0, [pc, #68]	; (8000390 <MX_ADC1_Init+0xdc>)
 800034c:	f000 fffc 	bl	8001348 <HAL_ADCEx_MultiModeConfigChannel>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000356:	f000 f96d 	bl	8000634 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800035a:	2302      	movs	r3, #2
 800035c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800035e:	2301      	movs	r3, #1
 8000360:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000362:	2300      	movs	r3, #0
 8000364:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000366:	2300      	movs	r3, #0
 8000368:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800036a:	2300      	movs	r3, #0
 800036c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800036e:	2300      	movs	r3, #0
 8000370:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	4619      	mov	r1, r3
 8000376:	4806      	ldr	r0, [pc, #24]	; (8000390 <MX_ADC1_Init+0xdc>)
 8000378:	f000 fcfc 	bl	8000d74 <HAL_ADC_ConfigChannel>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000382:	f000 f957 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000386:	bf00      	nop
 8000388:	3728      	adds	r7, #40	; 0x28
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	20000198 	.word	0x20000198

08000394 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b08a      	sub	sp, #40	; 0x28
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800039a:	f107 031c 	add.w	r3, r7, #28
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
 80003b2:	611a      	str	r2, [r3, #16]
 80003b4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80003b6:	4b2d      	ldr	r3, [pc, #180]	; (800046c <MX_ADC3_Init+0xd8>)
 80003b8:	4a2d      	ldr	r2, [pc, #180]	; (8000470 <MX_ADC3_Init+0xdc>)
 80003ba:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003bc:	4b2b      	ldr	r3, [pc, #172]	; (800046c <MX_ADC3_Init+0xd8>)
 80003be:	2200      	movs	r2, #0
 80003c0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80003c2:	4b2a      	ldr	r3, [pc, #168]	; (800046c <MX_ADC3_Init+0xd8>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003c8:	4b28      	ldr	r3, [pc, #160]	; (800046c <MX_ADC3_Init+0xd8>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80003ce:	4b27      	ldr	r3, [pc, #156]	; (800046c <MX_ADC3_Init+0xd8>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80003d4:	4b25      	ldr	r3, [pc, #148]	; (800046c <MX_ADC3_Init+0xd8>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003dc:	4b23      	ldr	r3, [pc, #140]	; (800046c <MX_ADC3_Init+0xd8>)
 80003de:	2200      	movs	r2, #0
 80003e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003e2:	4b22      	ldr	r3, [pc, #136]	; (800046c <MX_ADC3_Init+0xd8>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003e8:	4b20      	ldr	r3, [pc, #128]	; (800046c <MX_ADC3_Init+0xd8>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80003ee:	4b1f      	ldr	r3, [pc, #124]	; (800046c <MX_ADC3_Init+0xd8>)
 80003f0:	2201      	movs	r2, #1
 80003f2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80003f4:	4b1d      	ldr	r3, [pc, #116]	; (800046c <MX_ADC3_Init+0xd8>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003fc:	4b1b      	ldr	r3, [pc, #108]	; (800046c <MX_ADC3_Init+0xd8>)
 80003fe:	2204      	movs	r2, #4
 8000400:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000402:	4b1a      	ldr	r3, [pc, #104]	; (800046c <MX_ADC3_Init+0xd8>)
 8000404:	2200      	movs	r2, #0
 8000406:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000408:	4b18      	ldr	r3, [pc, #96]	; (800046c <MX_ADC3_Init+0xd8>)
 800040a:	2200      	movs	r2, #0
 800040c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800040e:	4817      	ldr	r0, [pc, #92]	; (800046c <MX_ADC3_Init+0xd8>)
 8000410:	f000 fad0 	bl	80009b4 <HAL_ADC_Init>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 800041a:	f000 f90b 	bl	8000634 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800041e:	2300      	movs	r3, #0
 8000420:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000422:	f107 031c 	add.w	r3, r7, #28
 8000426:	4619      	mov	r1, r3
 8000428:	4810      	ldr	r0, [pc, #64]	; (800046c <MX_ADC3_Init+0xd8>)
 800042a:	f000 ff8d 	bl	8001348 <HAL_ADCEx_MultiModeConfigChannel>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8000434:	f000 f8fe 	bl	8000634 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000438:	2301      	movs	r3, #1
 800043a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800043c:	2301      	movs	r3, #1
 800043e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000440:	2300      	movs	r3, #0
 8000442:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000444:	2300      	movs	r3, #0
 8000446:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000448:	2300      	movs	r3, #0
 800044a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800044c:	2300      	movs	r3, #0
 800044e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	4619      	mov	r1, r3
 8000454:	4805      	ldr	r0, [pc, #20]	; (800046c <MX_ADC3_Init+0xd8>)
 8000456:	f000 fc8d 	bl	8000d74 <HAL_ADC_ConfigChannel>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000460:	f000 f8e8 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000464:	bf00      	nop
 8000466:	3728      	adds	r7, #40	; 0x28
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	200001e8 	.word	0x200001e8
 8000470:	50000400 	.word	0x50000400

08000474 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b092      	sub	sp, #72	; 0x48
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800047a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
 8000488:	611a      	str	r2, [r3, #16]
 800048a:	615a      	str	r2, [r3, #20]
 800048c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800048e:	463b      	mov	r3, r7
 8000490:	222c      	movs	r2, #44	; 0x2c
 8000492:	2100      	movs	r1, #0
 8000494:	4618      	mov	r0, r3
 8000496:	f009 fd19 	bl	8009ecc <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800049a:	4b31      	ldr	r3, [pc, #196]	; (8000560 <MX_TIM17_Init+0xec>)
 800049c:	4a31      	ldr	r2, [pc, #196]	; (8000564 <MX_TIM17_Init+0xf0>)
 800049e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1000;
 80004a0:	4b2f      	ldr	r3, [pc, #188]	; (8000560 <MX_TIM17_Init+0xec>)
 80004a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004a6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004a8:	4b2d      	ldr	r3, [pc, #180]	; (8000560 <MX_TIM17_Init+0xec>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 48;
 80004ae:	4b2c      	ldr	r3, [pc, #176]	; (8000560 <MX_TIM17_Init+0xec>)
 80004b0:	2230      	movs	r2, #48	; 0x30
 80004b2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004b4:	4b2a      	ldr	r3, [pc, #168]	; (8000560 <MX_TIM17_Init+0xec>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80004ba:	4b29      	ldr	r3, [pc, #164]	; (8000560 <MX_TIM17_Init+0xec>)
 80004bc:	2200      	movs	r2, #0
 80004be:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004c0:	4b27      	ldr	r3, [pc, #156]	; (8000560 <MX_TIM17_Init+0xec>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80004c6:	4826      	ldr	r0, [pc, #152]	; (8000560 <MX_TIM17_Init+0xec>)
 80004c8:	f004 fbe8 	bl	8004c9c <HAL_TIM_Base_Init>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80004d2:	f000 f8af 	bl	8000634 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80004d6:	4822      	ldr	r0, [pc, #136]	; (8000560 <MX_TIM17_Init+0xec>)
 80004d8:	f004 fc37 	bl	8004d4a <HAL_TIM_PWM_Init>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80004e2:	f000 f8a7 	bl	8000634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004e6:	2360      	movs	r3, #96	; 0x60
 80004e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004ee:	2300      	movs	r3, #0
 80004f0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004f2:	2300      	movs	r3, #0
 80004f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004f6:	2300      	movs	r3, #0
 80004f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004fa:	2300      	movs	r3, #0
 80004fc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004fe:	2300      	movs	r3, #0
 8000500:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000502:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000506:	2200      	movs	r2, #0
 8000508:	4619      	mov	r1, r3
 800050a:	4815      	ldr	r0, [pc, #84]	; (8000560 <MX_TIM17_Init+0xec>)
 800050c:	f004 fc7e 	bl	8004e0c <HAL_TIM_PWM_ConfigChannel>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000516:	f000 f88d 	bl	8000634 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800051a:	2300      	movs	r3, #0
 800051c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800051e:	2300      	movs	r3, #0
 8000520:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000522:	2300      	movs	r3, #0
 8000524:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800052a:	2300      	movs	r3, #0
 800052c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800052e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000532:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000538:	2300      	movs	r3, #0
 800053a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800053c:	463b      	mov	r3, r7
 800053e:	4619      	mov	r1, r3
 8000540:	4807      	ldr	r0, [pc, #28]	; (8000560 <MX_TIM17_Init+0xec>)
 8000542:	f005 f8dd 	bl	8005700 <HAL_TIMEx_ConfigBreakDeadTime>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 800054c:	f000 f872 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000550:	4803      	ldr	r0, [pc, #12]	; (8000560 <MX_TIM17_Init+0xec>)
 8000552:	f000 f923 	bl	800079c <HAL_TIM_MspPostInit>

}
 8000556:	bf00      	nop
 8000558:	3748      	adds	r7, #72	; 0x48
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000238 	.word	0x20000238
 8000564:	40014800 	.word	0x40014800

08000568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800057e:	4b2b      	ldr	r3, [pc, #172]	; (800062c <MX_GPIO_Init+0xc4>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	4a2a      	ldr	r2, [pc, #168]	; (800062c <MX_GPIO_Init+0xc4>)
 8000584:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000588:	6153      	str	r3, [r2, #20]
 800058a:	4b28      	ldr	r3, [pc, #160]	; (800062c <MX_GPIO_Init+0xc4>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	4b25      	ldr	r3, [pc, #148]	; (800062c <MX_GPIO_Init+0xc4>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	4a24      	ldr	r2, [pc, #144]	; (800062c <MX_GPIO_Init+0xc4>)
 800059c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a0:	6153      	str	r3, [r2, #20]
 80005a2:	4b22      	ldr	r3, [pc, #136]	; (800062c <MX_GPIO_Init+0xc4>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ae:	4b1f      	ldr	r3, [pc, #124]	; (800062c <MX_GPIO_Init+0xc4>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	4a1e      	ldr	r2, [pc, #120]	; (800062c <MX_GPIO_Init+0xc4>)
 80005b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005b8:	6153      	str	r3, [r2, #20]
 80005ba:	4b1c      	ldr	r3, [pc, #112]	; (800062c <MX_GPIO_Init+0xc4>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005c6:	4b19      	ldr	r3, [pc, #100]	; (800062c <MX_GPIO_Init+0xc4>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	4a18      	ldr	r2, [pc, #96]	; (800062c <MX_GPIO_Init+0xc4>)
 80005cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005d0:	6153      	str	r3, [r2, #20]
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <MX_GPIO_Init+0xc4>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80005e4:	4812      	ldr	r0, [pc, #72]	; (8000630 <MX_GPIO_Init+0xc8>)
 80005e6:	f001 fa93 	bl	8001b10 <HAL_GPIO_WritePin>
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ea:	2301      	movs	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	4619      	mov	r1, r3
 80005fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000600:	f001 f90c 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD7_Pin
                           LD9_Pin LD10_Pin LD8_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 8000604:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000608:	617b      	str	r3, [r7, #20]
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060a:	2301      	movs	r3, #1
 800060c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000612:	2300      	movs	r3, #0
 8000614:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <MX_GPIO_Init+0xc8>)
 800061e:	f001 f8fd 	bl	800181c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000622:	bf00      	nop
 8000624:	3728      	adds	r7, #40	; 0x28
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40021000 	.word	0x40021000
 8000630:	48001000 	.word	0x48001000

08000634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000638:	b672      	cpsid	i
}
 800063a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800063c:	e7fe      	b.n	800063c <Error_Handler+0x8>
	...

08000640 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <HAL_MspInit+0x44>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	4a0e      	ldr	r2, [pc, #56]	; (8000684 <HAL_MspInit+0x44>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6193      	str	r3, [r2, #24]
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <HAL_MspInit+0x44>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <HAL_MspInit+0x44>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	4a08      	ldr	r2, [pc, #32]	; (8000684 <HAL_MspInit+0x44>)
 8000664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000668:	61d3      	str	r3, [r2, #28]
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_MspInit+0x44>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000676:	2007      	movs	r0, #7
 8000678:	f001 f88e 	bl	8001798 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40021000 	.word	0x40021000

08000688 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08c      	sub	sp, #48	; 0x30
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006a8:	d125      	bne.n	80006f6 <HAL_ADC_MspInit+0x6e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006aa:	4b29      	ldr	r3, [pc, #164]	; (8000750 <HAL_ADC_MspInit+0xc8>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	4a28      	ldr	r2, [pc, #160]	; (8000750 <HAL_ADC_MspInit+0xc8>)
 80006b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b4:	6153      	str	r3, [r2, #20]
 80006b6:	4b26      	ldr	r3, [pc, #152]	; (8000750 <HAL_ADC_MspInit+0xc8>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006be:	61bb      	str	r3, [r7, #24]
 80006c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	4b23      	ldr	r3, [pc, #140]	; (8000750 <HAL_ADC_MspInit+0xc8>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	4a22      	ldr	r2, [pc, #136]	; (8000750 <HAL_ADC_MspInit+0xc8>)
 80006c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006cc:	6153      	str	r3, [r2, #20]
 80006ce:	4b20      	ldr	r3, [pc, #128]	; (8000750 <HAL_ADC_MspInit+0xc8>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006da:	2302      	movs	r3, #2
 80006dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006de:	2303      	movs	r3, #3
 80006e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	4619      	mov	r1, r3
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f0:	f001 f894 	bl	800181c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80006f4:	e028      	b.n	8000748 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a16      	ldr	r2, [pc, #88]	; (8000754 <HAL_ADC_MspInit+0xcc>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d123      	bne.n	8000748 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000700:	4b13      	ldr	r3, [pc, #76]	; (8000750 <HAL_ADC_MspInit+0xc8>)
 8000702:	695b      	ldr	r3, [r3, #20]
 8000704:	4a12      	ldr	r2, [pc, #72]	; (8000750 <HAL_ADC_MspInit+0xc8>)
 8000706:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800070a:	6153      	str	r3, [r2, #20]
 800070c:	4b10      	ldr	r3, [pc, #64]	; (8000750 <HAL_ADC_MspInit+0xc8>)
 800070e:	695b      	ldr	r3, [r3, #20]
 8000710:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000718:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <HAL_ADC_MspInit+0xc8>)
 800071a:	695b      	ldr	r3, [r3, #20]
 800071c:	4a0c      	ldr	r2, [pc, #48]	; (8000750 <HAL_ADC_MspInit+0xc8>)
 800071e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000722:	6153      	str	r3, [r2, #20]
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <HAL_ADC_MspInit+0xc8>)
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000730:	2302      	movs	r3, #2
 8000732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000734:	2303      	movs	r3, #3
 8000736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	4619      	mov	r1, r3
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <HAL_ADC_MspInit+0xd0>)
 8000744:	f001 f86a 	bl	800181c <HAL_GPIO_Init>
}
 8000748:	bf00      	nop
 800074a:	3730      	adds	r7, #48	; 0x30
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40021000 	.word	0x40021000
 8000754:	50000400 	.word	0x50000400
 8000758:	48000400 	.word	0x48000400

0800075c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <HAL_TIM_Base_MspInit+0x38>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d10b      	bne.n	8000786 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <HAL_TIM_Base_MspInit+0x3c>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	4a09      	ldr	r2, [pc, #36]	; (8000798 <HAL_TIM_Base_MspInit+0x3c>)
 8000774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000778:	6193      	str	r3, [r2, #24]
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <HAL_TIM_Base_MspInit+0x3c>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000786:	bf00      	nop
 8000788:	3714      	adds	r7, #20
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40014800 	.word	0x40014800
 8000798:	40021000 	.word	0x40021000

0800079c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a11      	ldr	r2, [pc, #68]	; (8000800 <HAL_TIM_MspPostInit+0x64>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d11c      	bne.n	80007f8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <HAL_TIM_MspPostInit+0x68>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	4a10      	ldr	r2, [pc, #64]	; (8000804 <HAL_TIM_MspPostInit+0x68>)
 80007c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c8:	6153      	str	r3, [r2, #20]
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <HAL_TIM_MspPostInit+0x68>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007d6:	2380      	movs	r3, #128	; 0x80
 80007d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80007e6:	2301      	movs	r3, #1
 80007e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	4619      	mov	r1, r3
 80007f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f4:	f001 f812 	bl	800181c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80007f8:	bf00      	nop
 80007fa:	3720      	adds	r7, #32
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40014800 	.word	0x40014800
 8000804:	40021000 	.word	0x40021000

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800080c:	e7fe      	b.n	800080c <NMI_Handler+0x4>

0800080e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <HardFault_Handler+0x4>

08000814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <MemManage_Handler+0x4>

0800081a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <UsageFault_Handler+0x4>

08000826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000854:	f000 f88e 	bl	8000974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000860:	4802      	ldr	r0, [pc, #8]	; (800086c <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000862:	f001 fa65 	bl	8001d30 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000f50 	.word	0x20000f50

08000870 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <SystemInit+0x20>)
 8000876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800087a:	4a05      	ldr	r2, [pc, #20]	; (8000890 <SystemInit+0x20>)
 800087c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000880:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000894:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008cc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000898:	f7ff ffea 	bl	8000870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800089e:	490d      	ldr	r1, [pc, #52]	; (80008d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008a0:	4a0d      	ldr	r2, [pc, #52]	; (80008d8 <LoopForever+0xe>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a4:	e002      	b.n	80008ac <LoopCopyDataInit>

080008a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008aa:	3304      	adds	r3, #4

080008ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b0:	d3f9      	bcc.n	80008a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b2:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80008b4:	4c0a      	ldr	r4, [pc, #40]	; (80008e0 <LoopForever+0x16>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b8:	e001      	b.n	80008be <LoopFillZerobss>

080008ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008bc:	3204      	adds	r2, #4

080008be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c0:	d3fb      	bcc.n	80008ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008c2:	f009 fb0b 	bl	8009edc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008c6:	f7ff fc7f 	bl	80001c8 <main>

080008ca <LoopForever>:

LoopForever:
    b LoopForever
 80008ca:	e7fe      	b.n	80008ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008cc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80008d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d4:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80008d8:	08009fbc 	.word	0x08009fbc
  ldr r2, =_sbss
 80008dc:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80008e0:	2000145c 	.word	0x2000145c

080008e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC1_2_IRQHandler>
	...

080008e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <HAL_Init+0x28>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a07      	ldr	r2, [pc, #28]	; (8000910 <HAL_Init+0x28>)
 80008f2:	f043 0310 	orr.w	r3, r3, #16
 80008f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f8:	2003      	movs	r0, #3
 80008fa:	f000 ff4d 	bl	8001798 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008fe:	2000      	movs	r0, #0
 8000900:	f000 f808 	bl	8000914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000904:	f7ff fe9c 	bl	8000640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40022000 	.word	0x40022000

08000914 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <HAL_InitTick+0x54>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <HAL_InitTick+0x58>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	4619      	mov	r1, r3
 8000926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092a:	fbb3 f3f1 	udiv	r3, r3, r1
 800092e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000932:	4618      	mov	r0, r3
 8000934:	f000 ff65 	bl	8001802 <HAL_SYSTICK_Config>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	e00e      	b.n	8000960 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2b0f      	cmp	r3, #15
 8000946:	d80a      	bhi.n	800095e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000948:	2200      	movs	r2, #0
 800094a:	6879      	ldr	r1, [r7, #4]
 800094c:	f04f 30ff 	mov.w	r0, #4294967295
 8000950:	f000 ff2d 	bl	80017ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000954:	4a06      	ldr	r2, [pc, #24]	; (8000970 <HAL_InitTick+0x5c>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800095a:	2300      	movs	r3, #0
 800095c:	e000      	b.n	8000960 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
}
 8000960:	4618      	mov	r0, r3
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000000 	.word	0x20000000
 800096c:	20000008 	.word	0x20000008
 8000970:	20000004 	.word	0x20000004

08000974 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_IncTick+0x20>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_IncTick+0x24>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4413      	add	r3, r2
 8000984:	4a04      	ldr	r2, [pc, #16]	; (8000998 <HAL_IncTick+0x24>)
 8000986:	6013      	str	r3, [r2, #0]
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000008 	.word	0x20000008
 8000998:	20000284 	.word	0x20000284

0800099c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return uwTick;  
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <HAL_GetTick+0x14>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	20000284 	.word	0x20000284

080009b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b09a      	sub	sp, #104	; 0x68
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009bc:	2300      	movs	r3, #0
 80009be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80009c2:	2300      	movs	r3, #0
 80009c4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d101      	bne.n	80009d4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80009d0:	2301      	movs	r3, #1
 80009d2:	e1c9      	b.n	8000d68 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	691b      	ldr	r3, [r3, #16]
 80009d8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	f003 0310 	and.w	r3, r3, #16
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d176      	bne.n	8000ad4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d152      	bne.n	8000a94 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2200      	movs	r2, #0
 80009f8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2200      	movs	r2, #0
 80009fe:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2200      	movs	r2, #0
 8000a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f7ff fe3d 	bl	8000688 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d13b      	bne.n	8000a94 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f000 fd85 	bl	800152c <ADC_Disable>
 8000a22:	4603      	mov	r3, r0
 8000a24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	f003 0310 	and.w	r3, r3, #16
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d12f      	bne.n	8000a94 <HAL_ADC_Init+0xe0>
 8000a34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d12b      	bne.n	8000a94 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a40:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a44:	f023 0302 	bic.w	r3, r3, #2
 8000a48:	f043 0202 	orr.w	r2, r3, #2
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	689a      	ldr	r2, [r3, #8]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a5e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	689a      	ldr	r2, [r3, #8]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a6e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a70:	4b86      	ldr	r3, [pc, #536]	; (8000c8c <HAL_ADC_Init+0x2d8>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a86      	ldr	r2, [pc, #536]	; (8000c90 <HAL_ADC_Init+0x2dc>)
 8000a76:	fba2 2303 	umull	r2, r3, r2, r3
 8000a7a:	0c9a      	lsrs	r2, r3, #18
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	4413      	add	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a86:	e002      	b.n	8000a8e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d1f9      	bne.n	8000a88 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d007      	beq.n	8000ab2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ab0:	d110      	bne.n	8000ad4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f023 0312 	bic.w	r3, r3, #18
 8000aba:	f043 0210 	orr.w	r2, r3, #16
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	f043 0201 	orr.w	r2, r3, #1
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	f003 0310 	and.w	r3, r3, #16
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	f040 8136 	bne.w	8000d4e <HAL_ADC_Init+0x39a>
 8000ae2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 8131 	bne.w	8000d4e <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 8129 	bne.w	8000d4e <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000b04:	f043 0202 	orr.w	r2, r3, #2
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b14:	d004      	beq.n	8000b20 <HAL_ADC_Init+0x16c>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a5e      	ldr	r2, [pc, #376]	; (8000c94 <HAL_ADC_Init+0x2e0>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d101      	bne.n	8000b24 <HAL_ADC_Init+0x170>
 8000b20:	4b5d      	ldr	r3, [pc, #372]	; (8000c98 <HAL_ADC_Init+0x2e4>)
 8000b22:	e000      	b.n	8000b26 <HAL_ADC_Init+0x172>
 8000b24:	4b5d      	ldr	r3, [pc, #372]	; (8000c9c <HAL_ADC_Init+0x2e8>)
 8000b26:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b30:	d102      	bne.n	8000b38 <HAL_ADC_Init+0x184>
 8000b32:	4b58      	ldr	r3, [pc, #352]	; (8000c94 <HAL_ADC_Init+0x2e0>)
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	e01a      	b.n	8000b6e <HAL_ADC_Init+0x1ba>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a55      	ldr	r2, [pc, #340]	; (8000c94 <HAL_ADC_Init+0x2e0>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d103      	bne.n	8000b4a <HAL_ADC_Init+0x196>
 8000b42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	e011      	b.n	8000b6e <HAL_ADC_Init+0x1ba>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a54      	ldr	r2, [pc, #336]	; (8000ca0 <HAL_ADC_Init+0x2ec>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d102      	bne.n	8000b5a <HAL_ADC_Init+0x1a6>
 8000b54:	4b53      	ldr	r3, [pc, #332]	; (8000ca4 <HAL_ADC_Init+0x2f0>)
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	e009      	b.n	8000b6e <HAL_ADC_Init+0x1ba>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a51      	ldr	r2, [pc, #324]	; (8000ca4 <HAL_ADC_Init+0x2f0>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d102      	bne.n	8000b6a <HAL_ADC_Init+0x1b6>
 8000b64:	4b4e      	ldr	r3, [pc, #312]	; (8000ca0 <HAL_ADC_Init+0x2ec>)
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	e001      	b.n	8000b6e <HAL_ADC_Init+0x1ba>
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	f003 0303 	and.w	r3, r3, #3
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d108      	bne.n	8000b8e <HAL_ADC_Init+0x1da>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d101      	bne.n	8000b8e <HAL_ADC_Init+0x1da>
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e000      	b.n	8000b90 <HAL_ADC_Init+0x1dc>
 8000b8e:	2300      	movs	r3, #0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d11c      	bne.n	8000bce <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b94:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d010      	beq.n	8000bbc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	f003 0303 	and.w	r3, r3, #3
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d107      	bne.n	8000bb6 <HAL_ADC_Init+0x202>
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d101      	bne.n	8000bb6 <HAL_ADC_Init+0x202>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e000      	b.n	8000bb8 <HAL_ADC_Init+0x204>
 8000bb6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d108      	bne.n	8000bce <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	431a      	orrs	r2, r3
 8000bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bcc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	7e5b      	ldrb	r3, [r3, #25]
 8000bd2:	035b      	lsls	r3, r3, #13
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000bd8:	2a01      	cmp	r2, #1
 8000bda:	d002      	beq.n	8000be2 <HAL_ADC_Init+0x22e>
 8000bdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000be0:	e000      	b.n	8000be4 <HAL_ADC_Init+0x230>
 8000be2:	2200      	movs	r2, #0
 8000be4:	431a      	orrs	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	431a      	orrs	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d11b      	bne.n	8000c3a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	7e5b      	ldrb	r3, [r3, #25]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d109      	bne.n	8000c1e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	045a      	lsls	r2, r3, #17
 8000c12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c14:	4313      	orrs	r3, r2
 8000c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c1a:	663b      	str	r3, [r7, #96]	; 0x60
 8000c1c:	e00d      	b.n	8000c3a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000c26:	f043 0220 	orr.w	r2, r3, #32
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	f043 0201 	orr.w	r2, r3, #1
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d03a      	beq.n	8000cb8 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a16      	ldr	r2, [pc, #88]	; (8000ca0 <HAL_ADC_Init+0x2ec>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d004      	beq.n	8000c56 <HAL_ADC_Init+0x2a2>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a14      	ldr	r2, [pc, #80]	; (8000ca4 <HAL_ADC_Init+0x2f0>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d128      	bne.n	8000ca8 <HAL_ADC_Init+0x2f4>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000c5e:	d012      	beq.n	8000c86 <HAL_ADC_Init+0x2d2>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c68:	d00a      	beq.n	8000c80 <HAL_ADC_Init+0x2cc>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000c72:	d002      	beq.n	8000c7a <HAL_ADC_Init+0x2c6>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c78:	e018      	b.n	8000cac <HAL_ADC_Init+0x2f8>
 8000c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c7e:	e015      	b.n	8000cac <HAL_ADC_Init+0x2f8>
 8000c80:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000c84:	e012      	b.n	8000cac <HAL_ADC_Init+0x2f8>
 8000c86:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000c8a:	e00f      	b.n	8000cac <HAL_ADC_Init+0x2f8>
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	431bde83 	.word	0x431bde83
 8000c94:	50000100 	.word	0x50000100
 8000c98:	50000300 	.word	0x50000300
 8000c9c:	50000700 	.word	0x50000700
 8000ca0:	50000400 	.word	0x50000400
 8000ca4:	50000500 	.word	0x50000500
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	f003 030c 	and.w	r3, r3, #12
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d114      	bne.n	8000cf0 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	6812      	ldr	r2, [r2, #0]
 8000cd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000cd4:	f023 0302 	bic.w	r3, r3, #2
 8000cd8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	7e1b      	ldrb	r3, [r3, #24]
 8000cde:	039a      	lsls	r2, r3, #14
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000cec:	4313      	orrs	r3, r2
 8000cee:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	68da      	ldr	r2, [r3, #12]
 8000cf6:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <HAL_ADC_Init+0x3bc>)
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	6812      	ldr	r2, [r2, #0]
 8000cfe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000d00:	430b      	orrs	r3, r1
 8000d02:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	691b      	ldr	r3, [r3, #16]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d10c      	bne.n	8000d26 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f023 010f 	bic.w	r1, r3, #15
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	1e5a      	subs	r2, r3, #1
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	430a      	orrs	r2, r1
 8000d22:	631a      	str	r2, [r3, #48]	; 0x30
 8000d24:	e007      	b.n	8000d36 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f022 020f 	bic.w	r2, r2, #15
 8000d34:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	f023 0303 	bic.w	r3, r3, #3
 8000d44:	f043 0201 	orr.w	r2, r3, #1
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	641a      	str	r2, [r3, #64]	; 0x40
 8000d4c:	e00a      	b.n	8000d64 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f023 0312 	bic.w	r3, r3, #18
 8000d56:	f043 0210 	orr.w	r2, r3, #16
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000d5e:	2301      	movs	r3, #1
 8000d60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000d64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3768      	adds	r7, #104	; 0x68
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	fff0c007 	.word	0xfff0c007

08000d74 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b09b      	sub	sp, #108	; 0x6c
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d101      	bne.n	8000d96 <HAL_ADC_ConfigChannel+0x22>
 8000d92:	2302      	movs	r3, #2
 8000d94:	e2c8      	b.n	8001328 <HAL_ADC_ConfigChannel+0x5b4>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f003 0304 	and.w	r3, r3, #4
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f040 82ac 	bne.w	8001306 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	d81c      	bhi.n	8000df0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685a      	ldr	r2, [r3, #4]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	4413      	add	r3, r2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	461a      	mov	r2, r3
 8000dca:	231f      	movs	r3, #31
 8000dcc:	4093      	lsls	r3, r2
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	4019      	ands	r1, r3
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	6818      	ldr	r0, [r3, #0]
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	4413      	add	r3, r2
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	fa00 f203 	lsl.w	r2, r0, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	430a      	orrs	r2, r1
 8000dec:	631a      	str	r2, [r3, #48]	; 0x30
 8000dee:	e063      	b.n	8000eb8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2b09      	cmp	r3, #9
 8000df6:	d81e      	bhi.n	8000e36 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	4613      	mov	r3, r2
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	4413      	add	r3, r2
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	3b1e      	subs	r3, #30
 8000e0c:	221f      	movs	r2, #31
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	4019      	ands	r1, r3
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	6818      	ldr	r0, [r3, #0]
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685a      	ldr	r2, [r3, #4]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	4413      	add	r3, r2
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	3b1e      	subs	r3, #30
 8000e28:	fa00 f203 	lsl.w	r2, r0, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	430a      	orrs	r2, r1
 8000e32:	635a      	str	r2, [r3, #52]	; 0x34
 8000e34:	e040      	b.n	8000eb8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b0e      	cmp	r3, #14
 8000e3c:	d81e      	bhi.n	8000e7c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685a      	ldr	r2, [r3, #4]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	4413      	add	r3, r2
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	3b3c      	subs	r3, #60	; 0x3c
 8000e52:	221f      	movs	r2, #31
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	4019      	ands	r1, r3
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	6818      	ldr	r0, [r3, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	4613      	mov	r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	4413      	add	r3, r2
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	3b3c      	subs	r3, #60	; 0x3c
 8000e6e:	fa00 f203 	lsl.w	r2, r0, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	430a      	orrs	r2, r1
 8000e78:	639a      	str	r2, [r3, #56]	; 0x38
 8000e7a:	e01d      	b.n	8000eb8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685a      	ldr	r2, [r3, #4]
 8000e86:	4613      	mov	r3, r2
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	4413      	add	r3, r2
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	3b5a      	subs	r3, #90	; 0x5a
 8000e90:	221f      	movs	r2, #31
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	4019      	ands	r1, r3
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	6818      	ldr	r0, [r3, #0]
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685a      	ldr	r2, [r3, #4]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	4413      	add	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	3b5a      	subs	r3, #90	; 0x5a
 8000eac:	fa00 f203 	lsl.w	r2, r0, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	f003 030c 	and.w	r3, r3, #12
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f040 80e5 	bne.w	8001092 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b09      	cmp	r3, #9
 8000ece:	d91c      	bls.n	8000f0a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	6999      	ldr	r1, [r3, #24]
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	4613      	mov	r3, r2
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	4413      	add	r3, r2
 8000ee0:	3b1e      	subs	r3, #30
 8000ee2:	2207      	movs	r2, #7
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	4019      	ands	r1, r3
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	6898      	ldr	r0, [r3, #8]
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	4413      	add	r3, r2
 8000efa:	3b1e      	subs	r3, #30
 8000efc:	fa00 f203 	lsl.w	r2, r0, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	430a      	orrs	r2, r1
 8000f06:	619a      	str	r2, [r3, #24]
 8000f08:	e019      	b.n	8000f3e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6959      	ldr	r1, [r3, #20]
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4613      	mov	r3, r2
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	4413      	add	r3, r2
 8000f1a:	2207      	movs	r2, #7
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	4019      	ands	r1, r3
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	6898      	ldr	r0, [r3, #8]
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	4413      	add	r3, r2
 8000f32:	fa00 f203 	lsl.w	r2, r0, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	695a      	ldr	r2, [r3, #20]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	08db      	lsrs	r3, r3, #3
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	691b      	ldr	r3, [r3, #16]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	d84f      	bhi.n	8001000 <HAL_ADC_ConfigChannel+0x28c>
 8000f60:	a201      	add	r2, pc, #4	; (adr r2, 8000f68 <HAL_ADC_ConfigChannel+0x1f4>)
 8000f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f66:	bf00      	nop
 8000f68:	08000f79 	.word	0x08000f79
 8000f6c:	08000f9b 	.word	0x08000f9b
 8000f70:	08000fbd 	.word	0x08000fbd
 8000f74:	08000fdf 	.word	0x08000fdf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f7e:	4b99      	ldr	r3, [pc, #612]	; (80011e4 <HAL_ADC_ConfigChannel+0x470>)
 8000f80:	4013      	ands	r3, r2
 8000f82:	683a      	ldr	r2, [r7, #0]
 8000f84:	6812      	ldr	r2, [r2, #0]
 8000f86:	0691      	lsls	r1, r2, #26
 8000f88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000f96:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000f98:	e07b      	b.n	8001092 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000fa0:	4b90      	ldr	r3, [pc, #576]	; (80011e4 <HAL_ADC_ConfigChannel+0x470>)
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	6812      	ldr	r2, [r2, #0]
 8000fa8:	0691      	lsls	r1, r2, #26
 8000faa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000fac:	430a      	orrs	r2, r1
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000fb8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000fba:	e06a      	b.n	8001092 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000fc2:	4b88      	ldr	r3, [pc, #544]	; (80011e4 <HAL_ADC_ConfigChannel+0x470>)
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	6812      	ldr	r2, [r2, #0]
 8000fca:	0691      	lsls	r1, r2, #26
 8000fcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000fda:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000fdc:	e059      	b.n	8001092 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000fe4:	4b7f      	ldr	r3, [pc, #508]	; (80011e4 <HAL_ADC_ConfigChannel+0x470>)
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	683a      	ldr	r2, [r7, #0]
 8000fea:	6812      	ldr	r2, [r2, #0]
 8000fec:	0691      	lsls	r1, r2, #26
 8000fee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000ffc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000ffe:	e048      	b.n	8001092 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001006:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	069b      	lsls	r3, r3, #26
 8001010:	429a      	cmp	r2, r3
 8001012:	d107      	bne.n	8001024 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001022:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800102a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	069b      	lsls	r3, r3, #26
 8001034:	429a      	cmp	r2, r3
 8001036:	d107      	bne.n	8001048 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001046:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800104e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	069b      	lsls	r3, r3, #26
 8001058:	429a      	cmp	r2, r3
 800105a:	d107      	bne.n	800106c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800106a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001072:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	069b      	lsls	r3, r3, #26
 800107c:	429a      	cmp	r2, r3
 800107e:	d107      	bne.n	8001090 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800108e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001090:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	2b01      	cmp	r3, #1
 800109e:	d108      	bne.n	80010b2 <HAL_ADC_ConfigChannel+0x33e>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d101      	bne.n	80010b2 <HAL_ADC_ConfigChannel+0x33e>
 80010ae:	2301      	movs	r3, #1
 80010b0:	e000      	b.n	80010b4 <HAL_ADC_ConfigChannel+0x340>
 80010b2:	2300      	movs	r3, #0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f040 8131 	bne.w	800131c <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d00f      	beq.n	80010e2 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2201      	movs	r2, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43da      	mvns	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	400a      	ands	r2, r1
 80010dc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80010e0:	e049      	b.n	8001176 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2201      	movs	r2, #1
 80010f0:	409a      	lsls	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	430a      	orrs	r2, r1
 80010f8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b09      	cmp	r3, #9
 8001102:	d91c      	bls.n	800113e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6999      	ldr	r1, [r3, #24]
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4613      	mov	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4413      	add	r3, r2
 8001114:	3b1b      	subs	r3, #27
 8001116:	2207      	movs	r2, #7
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	4019      	ands	r1, r3
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	6898      	ldr	r0, [r3, #8]
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4613      	mov	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	3b1b      	subs	r3, #27
 8001130:	fa00 f203 	lsl.w	r2, r0, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	430a      	orrs	r2, r1
 800113a:	619a      	str	r2, [r3, #24]
 800113c:	e01b      	b.n	8001176 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	6959      	ldr	r1, [r3, #20]
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	1c5a      	adds	r2, r3, #1
 800114a:	4613      	mov	r3, r2
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4413      	add	r3, r2
 8001150:	2207      	movs	r2, #7
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	4019      	ands	r1, r3
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	6898      	ldr	r0, [r3, #8]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	4613      	mov	r3, r2
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	4413      	add	r3, r2
 800116a:	fa00 f203 	lsl.w	r2, r0, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	430a      	orrs	r2, r1
 8001174:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800117e:	d004      	beq.n	800118a <HAL_ADC_ConfigChannel+0x416>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a18      	ldr	r2, [pc, #96]	; (80011e8 <HAL_ADC_ConfigChannel+0x474>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d101      	bne.n	800118e <HAL_ADC_ConfigChannel+0x41a>
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <HAL_ADC_ConfigChannel+0x478>)
 800118c:	e000      	b.n	8001190 <HAL_ADC_ConfigChannel+0x41c>
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <HAL_ADC_ConfigChannel+0x47c>)
 8001190:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b10      	cmp	r3, #16
 8001198:	d105      	bne.n	80011a6 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800119a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d015      	beq.n	80011d2 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80011aa:	2b11      	cmp	r3, #17
 80011ac:	d105      	bne.n	80011ba <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80011ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00b      	beq.n	80011d2 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80011be:	2b12      	cmp	r3, #18
 80011c0:	f040 80ac 	bne.w	800131c <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80011c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f040 80a5 	bne.w	800131c <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011da:	d10b      	bne.n	80011f4 <HAL_ADC_ConfigChannel+0x480>
 80011dc:	4b02      	ldr	r3, [pc, #8]	; (80011e8 <HAL_ADC_ConfigChannel+0x474>)
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	e023      	b.n	800122a <HAL_ADC_ConfigChannel+0x4b6>
 80011e2:	bf00      	nop
 80011e4:	83fff000 	.word	0x83fff000
 80011e8:	50000100 	.word	0x50000100
 80011ec:	50000300 	.word	0x50000300
 80011f0:	50000700 	.word	0x50000700
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a4e      	ldr	r2, [pc, #312]	; (8001334 <HAL_ADC_ConfigChannel+0x5c0>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d103      	bne.n	8001206 <HAL_ADC_ConfigChannel+0x492>
 80011fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	e011      	b.n	800122a <HAL_ADC_ConfigChannel+0x4b6>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a4b      	ldr	r2, [pc, #300]	; (8001338 <HAL_ADC_ConfigChannel+0x5c4>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d102      	bne.n	8001216 <HAL_ADC_ConfigChannel+0x4a2>
 8001210:	4b4a      	ldr	r3, [pc, #296]	; (800133c <HAL_ADC_ConfigChannel+0x5c8>)
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	e009      	b.n	800122a <HAL_ADC_ConfigChannel+0x4b6>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a48      	ldr	r2, [pc, #288]	; (800133c <HAL_ADC_ConfigChannel+0x5c8>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d102      	bne.n	8001226 <HAL_ADC_ConfigChannel+0x4b2>
 8001220:	4b45      	ldr	r3, [pc, #276]	; (8001338 <HAL_ADC_ConfigChannel+0x5c4>)
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	e001      	b.n	800122a <HAL_ADC_ConfigChannel+0x4b6>
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b01      	cmp	r3, #1
 8001236:	d108      	bne.n	800124a <HAL_ADC_ConfigChannel+0x4d6>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b01      	cmp	r3, #1
 8001244:	d101      	bne.n	800124a <HAL_ADC_ConfigChannel+0x4d6>
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <HAL_ADC_ConfigChannel+0x4d8>
 800124a:	2300      	movs	r3, #0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d150      	bne.n	80012f2 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001250:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001252:	2b00      	cmp	r3, #0
 8001254:	d010      	beq.n	8001278 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 0303 	and.w	r3, r3, #3
 800125e:	2b01      	cmp	r3, #1
 8001260:	d107      	bne.n	8001272 <HAL_ADC_ConfigChannel+0x4fe>
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b01      	cmp	r3, #1
 800126c:	d101      	bne.n	8001272 <HAL_ADC_ConfigChannel+0x4fe>
 800126e:	2301      	movs	r3, #1
 8001270:	e000      	b.n	8001274 <HAL_ADC_ConfigChannel+0x500>
 8001272:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001274:	2b00      	cmp	r3, #0
 8001276:	d13c      	bne.n	80012f2 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b10      	cmp	r3, #16
 800127e:	d11d      	bne.n	80012bc <HAL_ADC_ConfigChannel+0x548>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001288:	d118      	bne.n	80012bc <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800128a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001294:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001296:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <HAL_ADC_ConfigChannel+0x5cc>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a2a      	ldr	r2, [pc, #168]	; (8001344 <HAL_ADC_ConfigChannel+0x5d0>)
 800129c:	fba2 2303 	umull	r2, r3, r2, r3
 80012a0:	0c9a      	lsrs	r2, r3, #18
 80012a2:	4613      	mov	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012ac:	e002      	b.n	80012b4 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f9      	bne.n	80012ae <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80012ba:	e02e      	b.n	800131a <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b11      	cmp	r3, #17
 80012c2:	d10b      	bne.n	80012dc <HAL_ADC_ConfigChannel+0x568>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012cc:	d106      	bne.n	80012dc <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80012ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80012d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012d8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80012da:	e01e      	b.n	800131a <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b12      	cmp	r3, #18
 80012e2:	d11a      	bne.n	800131a <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80012e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80012ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012ee:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80012f0:	e013      	b.n	800131a <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f043 0220 	orr.w	r2, r3, #32
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001304:	e00a      	b.n	800131c <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f043 0220 	orr.w	r2, r3, #32
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001318:	e000      	b.n	800131c <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800131a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001324:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001328:	4618      	mov	r0, r3
 800132a:	376c      	adds	r7, #108	; 0x6c
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	50000100 	.word	0x50000100
 8001338:	50000400 	.word	0x50000400
 800133c:	50000500 	.word	0x50000500
 8001340:	20000000 	.word	0x20000000
 8001344:	431bde83 	.word	0x431bde83

08001348 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001348:	b480      	push	{r7}
 800134a:	b099      	sub	sp, #100	; 0x64
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001360:	d102      	bne.n	8001368 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001362:	4b6d      	ldr	r3, [pc, #436]	; (8001518 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	e01a      	b.n	800139e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a6a      	ldr	r2, [pc, #424]	; (8001518 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d103      	bne.n	800137a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001372:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	e011      	b.n	800139e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a67      	ldr	r2, [pc, #412]	; (800151c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d102      	bne.n	800138a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001384:	4b66      	ldr	r3, [pc, #408]	; (8001520 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	e009      	b.n	800139e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a64      	ldr	r2, [pc, #400]	; (8001520 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d102      	bne.n	800139a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001394:	4b61      	ldr	r3, [pc, #388]	; (800151c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	e001      	b.n	800139e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e0b0      	b.n	800150a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d101      	bne.n	80013b6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e0a9      	b.n	800150a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f040 808d 	bne.w	80014e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f040 8086 	bne.w	80014e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013e4:	d004      	beq.n	80013f0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a4b      	ldr	r2, [pc, #300]	; (8001518 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d101      	bne.n	80013f4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80013f0:	4b4c      	ldr	r3, [pc, #304]	; (8001524 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80013f2:	e000      	b.n	80013f6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80013f4:	4b4c      	ldr	r3, [pc, #304]	; (8001528 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80013f6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d040      	beq.n	8001482 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001400:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	6859      	ldr	r1, [r3, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001412:	035b      	lsls	r3, r3, #13
 8001414:	430b      	orrs	r3, r1
 8001416:	431a      	orrs	r2, r3
 8001418:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800141a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	2b01      	cmp	r3, #1
 8001428:	d108      	bne.n	800143c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b01      	cmp	r3, #1
 8001436:	d101      	bne.n	800143c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001438:	2301      	movs	r3, #1
 800143a:	e000      	b.n	800143e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800143c:	2300      	movs	r3, #0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d15c      	bne.n	80014fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	2b01      	cmp	r3, #1
 800144c:	d107      	bne.n	800145e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b01      	cmp	r3, #1
 8001458:	d101      	bne.n	800145e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800145a:	2301      	movs	r3, #1
 800145c:	e000      	b.n	8001460 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800145e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001460:	2b00      	cmp	r3, #0
 8001462:	d14b      	bne.n	80014fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001464:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800146c:	f023 030f 	bic.w	r3, r3, #15
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	6811      	ldr	r1, [r2, #0]
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	6892      	ldr	r2, [r2, #8]
 8001478:	430a      	orrs	r2, r1
 800147a:	431a      	orrs	r2, r3
 800147c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800147e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001480:	e03c      	b.n	80014fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001482:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800148a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800148c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b01      	cmp	r3, #1
 800149a:	d108      	bne.n	80014ae <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d101      	bne.n	80014ae <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80014ae:	2300      	movs	r3, #0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d123      	bne.n	80014fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d107      	bne.n	80014d0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d101      	bne.n	80014d0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80014cc:	2301      	movs	r3, #1
 80014ce:	e000      	b.n	80014d2 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80014d0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d112      	bne.n	80014fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80014d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80014de:	f023 030f 	bic.w	r3, r3, #15
 80014e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80014e4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80014e6:	e009      	b.n	80014fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	f043 0220 	orr.w	r2, r3, #32
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80014fa:	e000      	b.n	80014fe <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80014fc:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001506:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800150a:	4618      	mov	r0, r3
 800150c:	3764      	adds	r7, #100	; 0x64
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	50000100 	.word	0x50000100
 800151c:	50000400 	.word	0x50000400
 8001520:	50000500 	.word	0x50000500
 8001524:	50000300 	.word	0x50000300
 8001528:	50000700 	.word	0x50000700

0800152c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	2b01      	cmp	r3, #1
 8001544:	d108      	bne.n	8001558 <ADC_Disable+0x2c>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b01      	cmp	r3, #1
 8001552:	d101      	bne.n	8001558 <ADC_Disable+0x2c>
 8001554:	2301      	movs	r3, #1
 8001556:	e000      	b.n	800155a <ADC_Disable+0x2e>
 8001558:	2300      	movs	r3, #0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d047      	beq.n	80015ee <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 030d 	and.w	r3, r3, #13
 8001568:	2b01      	cmp	r3, #1
 800156a:	d10f      	bne.n	800158c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 0202 	orr.w	r2, r2, #2
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2203      	movs	r2, #3
 8001582:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001584:	f7ff fa0a 	bl	800099c <HAL_GetTick>
 8001588:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800158a:	e029      	b.n	80015e0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	f043 0210 	orr.w	r2, r3, #16
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159c:	f043 0201 	orr.w	r2, r3, #1
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e023      	b.n	80015f0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80015a8:	f7ff f9f8 	bl	800099c <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d914      	bls.n	80015e0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d10d      	bne.n	80015e0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	f043 0210 	orr.w	r2, r3, #16
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d4:	f043 0201 	orr.w	r2, r3, #1
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e007      	b.n	80015f0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d0dc      	beq.n	80015a8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <__NVIC_SetPriorityGrouping+0x44>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001614:	4013      	ands	r3, r2
 8001616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162a:	4a04      	ldr	r2, [pc, #16]	; (800163c <__NVIC_SetPriorityGrouping+0x44>)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	60d3      	str	r3, [r2, #12]
}
 8001630:	bf00      	nop
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <__NVIC_GetPriorityGrouping+0x18>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	0a1b      	lsrs	r3, r3, #8
 800164a:	f003 0307 	and.w	r3, r3, #7
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	2b00      	cmp	r3, #0
 800166c:	db0b      	blt.n	8001686 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	f003 021f 	and.w	r2, r3, #31
 8001674:	4907      	ldr	r1, [pc, #28]	; (8001694 <__NVIC_EnableIRQ+0x38>)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	095b      	lsrs	r3, r3, #5
 800167c:	2001      	movs	r0, #1
 800167e:	fa00 f202 	lsl.w	r2, r0, r2
 8001682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000e100 	.word	0xe000e100

08001698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	6039      	str	r1, [r7, #0]
 80016a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	db0a      	blt.n	80016c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	490c      	ldr	r1, [pc, #48]	; (80016e4 <__NVIC_SetPriority+0x4c>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	0112      	lsls	r2, r2, #4
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	440b      	add	r3, r1
 80016bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c0:	e00a      	b.n	80016d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	4908      	ldr	r1, [pc, #32]	; (80016e8 <__NVIC_SetPriority+0x50>)
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	3b04      	subs	r3, #4
 80016d0:	0112      	lsls	r2, r2, #4
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	440b      	add	r3, r1
 80016d6:	761a      	strb	r2, [r3, #24]
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000e100 	.word	0xe000e100
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b089      	sub	sp, #36	; 0x24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f1c3 0307 	rsb	r3, r3, #7
 8001706:	2b04      	cmp	r3, #4
 8001708:	bf28      	it	cs
 800170a:	2304      	movcs	r3, #4
 800170c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3304      	adds	r3, #4
 8001712:	2b06      	cmp	r3, #6
 8001714:	d902      	bls.n	800171c <NVIC_EncodePriority+0x30>
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3b03      	subs	r3, #3
 800171a:	e000      	b.n	800171e <NVIC_EncodePriority+0x32>
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	f04f 32ff 	mov.w	r2, #4294967295
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43da      	mvns	r2, r3
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	401a      	ands	r2, r3
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001734:	f04f 31ff 	mov.w	r1, #4294967295
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	fa01 f303 	lsl.w	r3, r1, r3
 800173e:	43d9      	mvns	r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001744:	4313      	orrs	r3, r2
         );
}
 8001746:	4618      	mov	r0, r3
 8001748:	3724      	adds	r7, #36	; 0x24
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
	...

08001754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3b01      	subs	r3, #1
 8001760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001764:	d301      	bcc.n	800176a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001766:	2301      	movs	r3, #1
 8001768:	e00f      	b.n	800178a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <SysTick_Config+0x40>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3b01      	subs	r3, #1
 8001770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001772:	210f      	movs	r1, #15
 8001774:	f04f 30ff 	mov.w	r0, #4294967295
 8001778:	f7ff ff8e 	bl	8001698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <SysTick_Config+0x40>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001782:	4b04      	ldr	r3, [pc, #16]	; (8001794 <SysTick_Config+0x40>)
 8001784:	2207      	movs	r2, #7
 8001786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	e000e010 	.word	0xe000e010

08001798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff ff29 	bl	80015f8 <__NVIC_SetPriorityGrouping>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b086      	sub	sp, #24
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
 80017ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c0:	f7ff ff3e 	bl	8001640 <__NVIC_GetPriorityGrouping>
 80017c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	68b9      	ldr	r1, [r7, #8]
 80017ca:	6978      	ldr	r0, [r7, #20]
 80017cc:	f7ff ff8e 	bl	80016ec <NVIC_EncodePriority>
 80017d0:	4602      	mov	r2, r0
 80017d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff5d 	bl	8001698 <__NVIC_SetPriority>
}
 80017de:	bf00      	nop
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	4603      	mov	r3, r0
 80017ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff31 	bl	800165c <__NVIC_EnableIRQ>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff ffa2 	bl	8001754 <SysTick_Config>
 8001810:	4603      	mov	r3, r0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800181c:	b480      	push	{r7}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800182a:	e154      	b.n	8001ad6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	2101      	movs	r1, #1
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	4013      	ands	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 8146 	beq.w	8001ad0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	2b01      	cmp	r3, #1
 800184e:	d005      	beq.n	800185c <HAL_GPIO_Init+0x40>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d130      	bne.n	80018be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2203      	movs	r2, #3
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001892:	2201      	movs	r2, #1
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	091b      	lsrs	r3, r3, #4
 80018a8:	f003 0201 	and.w	r2, r3, #1
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d017      	beq.n	80018fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	2203      	movs	r2, #3
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d123      	bne.n	800194e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	08da      	lsrs	r2, r3, #3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3208      	adds	r2, #8
 800190e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001912:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	220f      	movs	r2, #15
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	691a      	ldr	r2, [r3, #16]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	08da      	lsrs	r2, r3, #3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3208      	adds	r2, #8
 8001948:	6939      	ldr	r1, [r7, #16]
 800194a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	2203      	movs	r2, #3
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 0203 	and.w	r2, r3, #3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800198a:	2b00      	cmp	r3, #0
 800198c:	f000 80a0 	beq.w	8001ad0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001990:	4b58      	ldr	r3, [pc, #352]	; (8001af4 <HAL_GPIO_Init+0x2d8>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	4a57      	ldr	r2, [pc, #348]	; (8001af4 <HAL_GPIO_Init+0x2d8>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6193      	str	r3, [r2, #24]
 800199c:	4b55      	ldr	r3, [pc, #340]	; (8001af4 <HAL_GPIO_Init+0x2d8>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019a8:	4a53      	ldr	r2, [pc, #332]	; (8001af8 <HAL_GPIO_Init+0x2dc>)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	089b      	lsrs	r3, r3, #2
 80019ae:	3302      	adds	r3, #2
 80019b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	220f      	movs	r2, #15
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019d2:	d019      	beq.n	8001a08 <HAL_GPIO_Init+0x1ec>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a49      	ldr	r2, [pc, #292]	; (8001afc <HAL_GPIO_Init+0x2e0>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d013      	beq.n	8001a04 <HAL_GPIO_Init+0x1e8>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a48      	ldr	r2, [pc, #288]	; (8001b00 <HAL_GPIO_Init+0x2e4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d00d      	beq.n	8001a00 <HAL_GPIO_Init+0x1e4>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a47      	ldr	r2, [pc, #284]	; (8001b04 <HAL_GPIO_Init+0x2e8>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d007      	beq.n	80019fc <HAL_GPIO_Init+0x1e0>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a46      	ldr	r2, [pc, #280]	; (8001b08 <HAL_GPIO_Init+0x2ec>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d101      	bne.n	80019f8 <HAL_GPIO_Init+0x1dc>
 80019f4:	2304      	movs	r3, #4
 80019f6:	e008      	b.n	8001a0a <HAL_GPIO_Init+0x1ee>
 80019f8:	2305      	movs	r3, #5
 80019fa:	e006      	b.n	8001a0a <HAL_GPIO_Init+0x1ee>
 80019fc:	2303      	movs	r3, #3
 80019fe:	e004      	b.n	8001a0a <HAL_GPIO_Init+0x1ee>
 8001a00:	2302      	movs	r3, #2
 8001a02:	e002      	b.n	8001a0a <HAL_GPIO_Init+0x1ee>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <HAL_GPIO_Init+0x1ee>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	f002 0203 	and.w	r2, r2, #3
 8001a10:	0092      	lsls	r2, r2, #2
 8001a12:	4093      	lsls	r3, r2
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a1a:	4937      	ldr	r1, [pc, #220]	; (8001af8 <HAL_GPIO_Init+0x2dc>)
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	089b      	lsrs	r3, r3, #2
 8001a20:	3302      	adds	r3, #2
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a28:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <HAL_GPIO_Init+0x2f0>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a4c:	4a2f      	ldr	r2, [pc, #188]	; (8001b0c <HAL_GPIO_Init+0x2f0>)
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a52:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <HAL_GPIO_Init+0x2f0>)
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a76:	4a25      	ldr	r2, [pc, #148]	; (8001b0c <HAL_GPIO_Init+0x2f0>)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a7c:	4b23      	ldr	r3, [pc, #140]	; (8001b0c <HAL_GPIO_Init+0x2f0>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001aa0:	4a1a      	ldr	r2, [pc, #104]	; (8001b0c <HAL_GPIO_Init+0x2f0>)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aa6:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <HAL_GPIO_Init+0x2f0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001aca:	4a10      	ldr	r2, [pc, #64]	; (8001b0c <HAL_GPIO_Init+0x2f0>)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f47f aea3 	bne.w	800182c <HAL_GPIO_Init+0x10>
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	bf00      	nop
 8001aea:	371c      	adds	r7, #28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40010000 	.word	0x40010000
 8001afc:	48000400 	.word	0x48000400
 8001b00:	48000800 	.word	0x48000800
 8001b04:	48000c00 	.word	0x48000c00
 8001b08:	48001000 	.word	0x48001000
 8001b0c:	40010400 	.word	0x40010400

08001b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	807b      	strh	r3, [r7, #2]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b20:	787b      	ldrb	r3, [r7, #1]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b26:	887a      	ldrh	r2, [r7, #2]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b2c:	e002      	b.n	8001b34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b2e:	887a      	ldrh	r2, [r7, #2]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b42:	b08b      	sub	sp, #44	; 0x2c
 8001b44:	af06      	add	r7, sp, #24
 8001b46:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e0c4      	b.n	8001cdc <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d106      	bne.n	8001b6c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f007 feda 	bl	8009920 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2203      	movs	r2, #3
 8001b70:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f003 fe56 	bl	800582a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b7e:	2300      	movs	r3, #0
 8001b80:	73fb      	strb	r3, [r7, #15]
 8001b82:	e040      	b.n	8001c06 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	440b      	add	r3, r1
 8001b94:	3301      	adds	r3, #1
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	440b      	add	r3, r1
 8001baa:	7bfa      	ldrb	r2, [r7, #15]
 8001bac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
 8001bb0:	6879      	ldr	r1, [r7, #4]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	440b      	add	r3, r1
 8001bbe:	3303      	adds	r3, #3
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bc4:	7bfa      	ldrb	r2, [r7, #15]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	440b      	add	r3, r1
 8001bd2:	3338      	adds	r3, #56	; 0x38
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bd8:	7bfa      	ldrb	r2, [r7, #15]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	440b      	add	r3, r1
 8001be6:	333c      	adds	r3, #60	; 0x3c
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bec:	7bfa      	ldrb	r2, [r7, #15]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	440b      	add	r3, r1
 8001bfa:	3340      	adds	r3, #64	; 0x40
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	3301      	adds	r3, #1
 8001c04:	73fb      	strb	r3, [r7, #15]
 8001c06:	7bfa      	ldrb	r2, [r7, #15]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d3b9      	bcc.n	8001b84 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c10:	2300      	movs	r3, #0
 8001c12:	73fb      	strb	r3, [r7, #15]
 8001c14:	e044      	b.n	8001ca0 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c16:	7bfa      	ldrb	r2, [r7, #15]
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	440b      	add	r3, r1
 8001c24:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c2c:	7bfa      	ldrb	r2, [r7, #15]
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	440b      	add	r3, r1
 8001c3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c3e:	7bfa      	ldrb	r2, [r7, #15]
 8001c40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c42:	7bfa      	ldrb	r2, [r7, #15]
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	440b      	add	r3, r1
 8001c50:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c54:	2200      	movs	r2, #0
 8001c56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c58:	7bfa      	ldrb	r2, [r7, #15]
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	440b      	add	r3, r1
 8001c66:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c6e:	7bfa      	ldrb	r2, [r7, #15]
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c84:	7bfa      	ldrb	r2, [r7, #15]
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	440b      	add	r3, r1
 8001c92:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
 8001ca0:	7bfa      	ldrb	r2, [r7, #15]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d3b5      	bcc.n	8001c16 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	687e      	ldr	r6, [r7, #4]
 8001cb2:	466d      	mov	r5, sp
 8001cb4:	f106 0410 	add.w	r4, r6, #16
 8001cb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cbc:	6823      	ldr	r3, [r4, #0]
 8001cbe:	602b      	str	r3, [r5, #0]
 8001cc0:	1d33      	adds	r3, r6, #4
 8001cc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cc4:	6838      	ldr	r0, [r7, #0]
 8001cc6:	f003 fdcb 	bl	8005860 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ce4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d101      	bne.n	8001cfa <HAL_PCD_Start+0x16>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e016      	b.n	8001d28 <HAL_PCD_Start+0x44>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f003 fd78 	bl	80057fc <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f008 f8a4 	bl	8009e5c <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f006 f838 	bl	8007d8e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f006 f831 	bl	8007da4 <USB_ReadInterrupts>
 8001d42:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 fab2 	bl	80022b8 <PCD_EP_ISR_Handler>

    return;
 8001d54:	e0bd      	b.n	8001ed2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d013      	beq.n	8001d88 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d72:	b292      	uxth	r2, r2
 8001d74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f007 fe72 	bl	8009a62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d7e:	2100      	movs	r1, #0
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f8a9 	bl	8001ed8 <HAL_PCD_SetAddress>

    return;
 8001d86:	e0a4      	b.n	8001ed2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00c      	beq.n	8001dac <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001da4:	b292      	uxth	r2, r2
 8001da6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001daa:	e092      	b.n	8001ed2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00c      	beq.n	8001dd0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dc8:	b292      	uxth	r2, r2
 8001dca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001dce:	e080      	b.n	8001ed2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d027      	beq.n	8001e2a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0204 	bic.w	r2, r2, #4
 8001dec:	b292      	uxth	r2, r2
 8001dee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0208 	bic.w	r2, r2, #8
 8001e04:	b292      	uxth	r2, r2
 8001e06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f007 fe62 	bl	8009ad4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e22:	b292      	uxth	r2, r2
 8001e24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e28:	e053      	b.n	8001ed2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d027      	beq.n	8001e84 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0208 	orr.w	r2, r2, #8
 8001e46:	b292      	uxth	r2, r2
 8001e48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e5e:	b292      	uxth	r2, r2
 8001e60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0204 	orr.w	r2, r2, #4
 8001e76:	b292      	uxth	r2, r2
 8001e78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f007 fe0f 	bl	8009aa0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001e82:	e026      	b.n	8001ed2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00f      	beq.n	8001eae <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ea0:	b292      	uxth	r2, r2
 8001ea2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f007 fdcd 	bl	8009a46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001eac:	e011      	b.n	8001ed2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00c      	beq.n	8001ed2 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eca:	b292      	uxth	r2, r2
 8001ecc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001ed0:	bf00      	nop
  }
}
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d101      	bne.n	8001ef2 <HAL_PCD_SetAddress+0x1a>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e013      	b.n	8001f1a <HAL_PCD_SetAddress+0x42>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	78fa      	ldrb	r2, [r7, #3]
 8001efe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	78fa      	ldrb	r2, [r7, #3]
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f005 ff2b 	bl	8007d66 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b084      	sub	sp, #16
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	4608      	mov	r0, r1
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4603      	mov	r3, r0
 8001f32:	70fb      	strb	r3, [r7, #3]
 8001f34:	460b      	mov	r3, r1
 8001f36:	803b      	strh	r3, [r7, #0]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	da0e      	bge.n	8001f66 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2201      	movs	r2, #1
 8001f62:	705a      	strb	r2, [r3, #1]
 8001f64:	e00e      	b.n	8001f84 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	f003 0207 	and.w	r2, r3, #7
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f90:	883a      	ldrh	r2, [r7, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	78ba      	ldrb	r2, [r7, #2]
 8001f9a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f9c:	78bb      	ldrb	r3, [r7, #2]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d102      	bne.n	8001fa8 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <HAL_PCD_EP_Open+0x94>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e00e      	b.n	8001fd4 <HAL_PCD_EP_Open+0xb2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68f9      	ldr	r1, [r7, #12]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f003 fc6d 	bl	80058a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001fd2:	7afb      	ldrb	r3, [r7, #11]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fe8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	da0e      	bge.n	800200e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ff0:	78fb      	ldrb	r3, [r7, #3]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	4413      	add	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2201      	movs	r2, #1
 800200a:	705a      	strb	r2, [r3, #1]
 800200c:	e00e      	b.n	800202c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800200e:	78fb      	ldrb	r3, [r7, #3]
 8002010:	f003 0207 	and.w	r2, r3, #7
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	4413      	add	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	b2da      	uxtb	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800203e:	2b01      	cmp	r3, #1
 8002040:	d101      	bne.n	8002046 <HAL_PCD_EP_Close+0x6a>
 8002042:	2302      	movs	r3, #2
 8002044:	e00e      	b.n	8002064 <HAL_PCD_EP_Close+0x88>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68f9      	ldr	r1, [r7, #12]
 8002054:	4618      	mov	r0, r3
 8002056:	f003 ffe9 	bl	800602c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	460b      	mov	r3, r1
 800207a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800207c:	7afb      	ldrb	r3, [r7, #11]
 800207e:	f003 0207 	and.w	r2, r3, #7
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	4413      	add	r3, r2
 8002092:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	2200      	movs	r2, #0
 80020a4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2200      	movs	r2, #0
 80020aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020ac:	7afb      	ldrb	r3, [r7, #11]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6979      	ldr	r1, [r7, #20]
 80020be:	4618      	mov	r0, r3
 80020c0:	f004 f9a1 	bl	8006406 <USB_EPStartXfer>

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	460b      	mov	r3, r1
 80020d8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020da:	78fb      	ldrb	r3, [r7, #3]
 80020dc:	f003 0207 	and.w	r2, r3, #7
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	440b      	add	r3, r1
 80020ec:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80020f0:	681b      	ldr	r3, [r3, #0]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b086      	sub	sp, #24
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	603b      	str	r3, [r7, #0]
 800210a:	460b      	mov	r3, r1
 800210c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800210e:	7afb      	ldrb	r3, [r7, #11]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4413      	add	r3, r2
 8002122:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2200      	movs	r2, #0
 8002142:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2201      	movs	r2, #1
 8002148:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800214a:	7afb      	ldrb	r3, [r7, #11]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	b2da      	uxtb	r2, r3
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6979      	ldr	r1, [r7, #20]
 800215c:	4618      	mov	r0, r3
 800215e:	f004 f952 	bl	8006406 <USB_EPStartXfer>

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	f003 0207 	and.w	r2, r3, #7
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	429a      	cmp	r2, r3
 8002184:	d901      	bls.n	800218a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e03e      	b.n	8002208 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800218a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800218e:	2b00      	cmp	r3, #0
 8002190:	da0e      	bge.n	80021b0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002192:	78fb      	ldrb	r3, [r7, #3]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2201      	movs	r2, #1
 80021ac:	705a      	strb	r2, [r3, #1]
 80021ae:	e00c      	b.n	80021ca <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021b0:	78fa      	ldrb	r2, [r7, #3]
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2201      	movs	r2, #1
 80021ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_PCD_EP_SetStall+0x7e>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e00e      	b.n	8002208 <HAL_PCD_EP_SetStall+0x9c>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68f9      	ldr	r1, [r7, #12]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f005 fcb5 	bl	8007b68 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	f003 020f 	and.w	r2, r3, #15
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	429a      	cmp	r2, r3
 8002228:	d901      	bls.n	800222e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e040      	b.n	80022b0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800222e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002232:	2b00      	cmp	r3, #0
 8002234:	da0e      	bge.n	8002254 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002236:	78fb      	ldrb	r3, [r7, #3]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2201      	movs	r2, #1
 8002250:	705a      	strb	r2, [r3, #1]
 8002252:	e00e      	b.n	8002272 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	f003 0207 	and.w	r2, r3, #7
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	4413      	add	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	b2da      	uxtb	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800228a:	2b01      	cmp	r3, #1
 800228c:	d101      	bne.n	8002292 <HAL_PCD_EP_ClrStall+0x82>
 800228e:	2302      	movs	r3, #2
 8002290:	e00e      	b.n	80022b0 <HAL_PCD_EP_ClrStall+0xa0>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68f9      	ldr	r1, [r7, #12]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f005 fcb2 	bl	8007c0a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b096      	sub	sp, #88	; 0x58
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022c0:	e3bf      	b.n	8002a42 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80022ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	f003 030f 	and.w	r3, r3, #15
 80022d8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80022dc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f040 8179 	bne.w	80025d8 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80022e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022ea:	f003 0310 	and.w	r3, r3, #16
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d152      	bne.n	8002398 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80022fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002302:	81fb      	strh	r3, [r7, #14]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	89fb      	ldrh	r3, [r7, #14]
 800230a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800230e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002312:	b29b      	uxth	r3, r3
 8002314:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3328      	adds	r3, #40	; 0x28
 800231a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002324:	b29b      	uxth	r3, r3
 8002326:	461a      	mov	r2, r3
 8002328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4413      	add	r3, r2
 8002330:	3302      	adds	r3, #2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	4413      	add	r3, r2
 800233a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002346:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800234a:	695a      	ldr	r2, [r3, #20]
 800234c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	441a      	add	r2, r3
 8002352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002354:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002356:	2100      	movs	r1, #0
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f007 fb5a 	bl	8009a12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 836b 	beq.w	8002a42 <PCD_EP_ISR_Handler+0x78a>
 800236c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	2b00      	cmp	r3, #0
 8002372:	f040 8366 	bne.w	8002a42 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800237c:	b2db      	uxtb	r3, r3
 800237e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002382:	b2da      	uxtb	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	b292      	uxth	r2, r2
 800238a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002396:	e354      	b.n	8002a42 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800239e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80023aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80023ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d034      	beq.n	8002420 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023be:	b29b      	uxth	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4413      	add	r3, r2
 80023ca:	3306      	adds	r3, #6
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6812      	ldr	r2, [r2, #0]
 80023d2:	4413      	add	r3, r2
 80023d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023e0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6818      	ldr	r0, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80023ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ee:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80023f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023f2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	f005 fd2b 	bl	8007e50 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	b29a      	uxth	r2, r3
 8002402:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002406:	4013      	ands	r3, r2
 8002408:	823b      	strh	r3, [r7, #16]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	8a3a      	ldrh	r2, [r7, #16]
 8002410:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002414:	b292      	uxth	r2, r2
 8002416:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f007 facd 	bl	80099b8 <HAL_PCD_SetupStageCallback>
 800241e:	e310      	b.n	8002a42 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002420:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002424:	2b00      	cmp	r3, #0
 8002426:	f280 830c 	bge.w	8002a42 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	b29a      	uxth	r2, r3
 8002432:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002436:	4013      	ands	r3, r2
 8002438:	83fb      	strh	r3, [r7, #30]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	8bfa      	ldrh	r2, [r7, #30]
 8002440:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002444:	b292      	uxth	r2, r2
 8002446:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002450:	b29b      	uxth	r3, r3
 8002452:	461a      	mov	r2, r3
 8002454:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4413      	add	r3, r2
 800245c:	3306      	adds	r3, #6
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	4413      	add	r3, r2
 8002466:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002472:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d019      	beq.n	80024b0 <PCD_EP_ISR_Handler+0x1f8>
 800247c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d015      	beq.n	80024b0 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6818      	ldr	r0, [r3, #0]
 8002488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800248a:	6959      	ldr	r1, [r3, #20]
 800248c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800248e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002492:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002494:	b29b      	uxth	r3, r3
 8002496:	f005 fcdb 	bl	8007e50 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800249a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800249c:	695a      	ldr	r2, [r3, #20]
 800249e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	441a      	add	r2, r3
 80024a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024a6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80024a8:	2100      	movs	r1, #0
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f007 fa96 	bl	80099dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80024ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80024be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f040 82bd 	bne.w	8002a42 <PCD_EP_ISR_Handler+0x78a>
 80024c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80024cc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80024d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80024d4:	f000 82b5 	beq.w	8002a42 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	61bb      	str	r3, [r7, #24]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	4413      	add	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002502:	b29a      	uxth	r2, r3
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	801a      	strh	r2, [r3, #0]
 8002508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	2b3e      	cmp	r3, #62	; 0x3e
 800250e:	d91d      	bls.n	800254c <PCD_EP_ISR_Handler+0x294>
 8002510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	095b      	lsrs	r3, r3, #5
 8002516:	647b      	str	r3, [r7, #68]	; 0x44
 8002518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	2b00      	cmp	r3, #0
 8002522:	d102      	bne.n	800252a <PCD_EP_ISR_Handler+0x272>
 8002524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002526:	3b01      	subs	r3, #1
 8002528:	647b      	str	r3, [r7, #68]	; 0x44
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	b29a      	uxth	r2, r3
 8002530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002532:	b29b      	uxth	r3, r3
 8002534:	029b      	lsls	r3, r3, #10
 8002536:	b29b      	uxth	r3, r3
 8002538:	4313      	orrs	r3, r2
 800253a:	b29b      	uxth	r3, r3
 800253c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002544:	b29a      	uxth	r2, r3
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	801a      	strh	r2, [r3, #0]
 800254a:	e026      	b.n	800259a <PCD_EP_ISR_Handler+0x2e2>
 800254c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10a      	bne.n	800256a <PCD_EP_ISR_Handler+0x2b2>
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	b29b      	uxth	r3, r3
 800255a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800255e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002562:	b29a      	uxth	r2, r3
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	801a      	strh	r2, [r3, #0]
 8002568:	e017      	b.n	800259a <PCD_EP_ISR_Handler+0x2e2>
 800256a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	085b      	lsrs	r3, r3, #1
 8002570:	647b      	str	r3, [r7, #68]	; 0x44
 8002572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d002      	beq.n	8002584 <PCD_EP_ISR_Handler+0x2cc>
 800257e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002580:	3301      	adds	r3, #1
 8002582:	647b      	str	r3, [r7, #68]	; 0x44
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	b29a      	uxth	r2, r3
 800258a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800258c:	b29b      	uxth	r3, r3
 800258e:	029b      	lsls	r3, r3, #10
 8002590:	b29b      	uxth	r3, r3
 8002592:	4313      	orrs	r3, r2
 8002594:	b29a      	uxth	r2, r3
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025aa:	827b      	strh	r3, [r7, #18]
 80025ac:	8a7b      	ldrh	r3, [r7, #18]
 80025ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80025b2:	827b      	strh	r3, [r7, #18]
 80025b4:	8a7b      	ldrh	r3, [r7, #18]
 80025b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025ba:	827b      	strh	r3, [r7, #18]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	8a7b      	ldrh	r3, [r7, #18]
 80025c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	8013      	strh	r3, [r2, #0]
 80025d6:	e234      	b.n	8002a42 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	461a      	mov	r2, r3
 80025de:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025ec:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f280 80fc 	bge.w	80027ee <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	b29a      	uxth	r2, r3
 8002608:	f640 738f 	movw	r3, #3983	; 0xf8f
 800260c:	4013      	ands	r3, r2
 800260e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002624:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002628:	b292      	uxth	r2, r2
 800262a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800262c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002630:	4613      	mov	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	4413      	add	r3, r2
 8002640:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002644:	7b1b      	ldrb	r3, [r3, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d125      	bne.n	8002696 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002652:	b29b      	uxth	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4413      	add	r3, r2
 800265e:	3306      	adds	r3, #6
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6812      	ldr	r2, [r2, #0]
 8002666:	4413      	add	r3, r2
 8002668:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002672:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002676:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 8092 	beq.w	80027a4 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6818      	ldr	r0, [r3, #0]
 8002684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002686:	6959      	ldr	r1, [r3, #20]
 8002688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800268a:	88da      	ldrh	r2, [r3, #6]
 800268c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002690:	f005 fbde 	bl	8007e50 <USB_ReadPMA>
 8002694:	e086      	b.n	80027a4 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002698:	78db      	ldrb	r3, [r3, #3]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d10a      	bne.n	80026b4 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800269e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80026a2:	461a      	mov	r2, r3
 80026a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f9d9 	bl	8002a5e <HAL_PCD_EP_DB_Receive>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80026b2:	e077      	b.n	80027a4 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	461a      	mov	r2, r3
 80026ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ce:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	441a      	add	r2, r3
 80026e0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80026e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	b29b      	uxth	r3, r3
 800270a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d024      	beq.n	800275c <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800271a:	b29b      	uxth	r3, r3
 800271c:	461a      	mov	r2, r3
 800271e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4413      	add	r3, r2
 8002726:	3302      	adds	r3, #2
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	4413      	add	r3, r2
 8002730:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800273a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800273e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002742:	2b00      	cmp	r3, #0
 8002744:	d02e      	beq.n	80027a4 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6818      	ldr	r0, [r3, #0]
 800274a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800274c:	6959      	ldr	r1, [r3, #20]
 800274e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002750:	891a      	ldrh	r2, [r3, #8]
 8002752:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002756:	f005 fb7b 	bl	8007e50 <USB_ReadPMA>
 800275a:	e023      	b.n	80027a4 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002764:	b29b      	uxth	r3, r3
 8002766:	461a      	mov	r2, r3
 8002768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4413      	add	r3, r2
 8002770:	3306      	adds	r3, #6
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	4413      	add	r3, r2
 800277a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002784:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002788:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800278c:	2b00      	cmp	r3, #0
 800278e:	d009      	beq.n	80027a4 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6818      	ldr	r0, [r3, #0]
 8002794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002796:	6959      	ldr	r1, [r3, #20]
 8002798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800279a:	895a      	ldrh	r2, [r3, #10]
 800279c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027a0:	f005 fb56 	bl	8007e50 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80027a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a6:	69da      	ldr	r2, [r3, #28]
 80027a8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027ac:	441a      	add	r2, r3
 80027ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80027b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b4:	695a      	ldr	r2, [r3, #20]
 80027b6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027ba:	441a      	add	r2, r3
 80027bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027be:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80027c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <PCD_EP_ISR_Handler+0x51c>
 80027c8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80027cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d206      	bcs.n	80027e2 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80027d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	4619      	mov	r1, r3
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f007 f8fe 	bl	80099dc <HAL_PCD_DataOutStageCallback>
 80027e0:	e005      	b.n	80027ee <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027e8:	4618      	mov	r0, r3
 80027ea:	f003 fe0c 	bl	8006406 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80027ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80027f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 8123 	beq.w	8002a42 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 80027fc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	461a      	mov	r2, r3
 8002816:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	b29b      	uxth	r3, r3
 8002822:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800282a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	441a      	add	r2, r3
 800283c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002848:	b29b      	uxth	r3, r3
 800284a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800284c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800284e:	78db      	ldrb	r3, [r3, #3]
 8002850:	2b01      	cmp	r3, #1
 8002852:	f040 80a2 	bne.w	800299a <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8002856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002858:	2200      	movs	r2, #0
 800285a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800285c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800285e:	7b1b      	ldrb	r3, [r3, #12]
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 8093 	beq.w	800298c <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002866:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800286a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286e:	2b00      	cmp	r3, #0
 8002870:	d046      	beq.n	8002900 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002874:	785b      	ldrb	r3, [r3, #1]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d126      	bne.n	80028c8 <PCD_EP_ISR_Handler+0x610>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002888:	b29b      	uxth	r3, r3
 800288a:	461a      	mov	r2, r3
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	4413      	add	r3, r2
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
 8002892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	011a      	lsls	r2, r3, #4
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	4413      	add	r3, r2
 800289c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028a0:	623b      	str	r3, [r7, #32]
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	801a      	strh	r2, [r3, #0]
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	801a      	strh	r2, [r3, #0]
 80028c6:	e061      	b.n	800298c <PCD_EP_ISR_Handler+0x6d4>
 80028c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ca:	785b      	ldrb	r3, [r3, #1]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d15d      	bne.n	800298c <PCD_EP_ISR_Handler+0x6d4>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028de:	b29b      	uxth	r3, r3
 80028e0:	461a      	mov	r2, r3
 80028e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e4:	4413      	add	r3, r2
 80028e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	011a      	lsls	r2, r3, #4
 80028ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f0:	4413      	add	r3, r2
 80028f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fa:	2200      	movs	r2, #0
 80028fc:	801a      	strh	r2, [r3, #0]
 80028fe:	e045      	b.n	800298c <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002908:	785b      	ldrb	r3, [r3, #1]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d126      	bne.n	800295c <PCD_EP_ISR_Handler+0x6a4>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	637b      	str	r3, [r7, #52]	; 0x34
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800291c:	b29b      	uxth	r3, r3
 800291e:	461a      	mov	r2, r3
 8002920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002922:	4413      	add	r3, r2
 8002924:	637b      	str	r3, [r7, #52]	; 0x34
 8002926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	011a      	lsls	r2, r3, #4
 800292c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292e:	4413      	add	r3, r2
 8002930:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002934:	633b      	str	r3, [r7, #48]	; 0x30
 8002936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	b29b      	uxth	r3, r3
 800293c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002940:	b29a      	uxth	r2, r3
 8002942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002944:	801a      	strh	r2, [r3, #0]
 8002946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002948:	881b      	ldrh	r3, [r3, #0]
 800294a:	b29b      	uxth	r3, r3
 800294c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002954:	b29a      	uxth	r2, r3
 8002956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002958:	801a      	strh	r2, [r3, #0]
 800295a:	e017      	b.n	800298c <PCD_EP_ISR_Handler+0x6d4>
 800295c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800295e:	785b      	ldrb	r3, [r3, #1]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d113      	bne.n	800298c <PCD_EP_ISR_Handler+0x6d4>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800296c:	b29b      	uxth	r3, r3
 800296e:	461a      	mov	r2, r3
 8002970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002972:	4413      	add	r3, r2
 8002974:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	011a      	lsls	r2, r3, #4
 800297c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800297e:	4413      	add	r3, r2
 8002980:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002984:	63bb      	str	r3, [r7, #56]	; 0x38
 8002986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002988:	2200      	movs	r2, #0
 800298a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800298c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	4619      	mov	r1, r3
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f007 f83d 	bl	8009a12 <HAL_PCD_DataInStageCallback>
 8002998:	e053      	b.n	8002a42 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800299a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800299e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d146      	bne.n	8002a34 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	461a      	mov	r2, r3
 80029b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	4413      	add	r3, r2
 80029ba:	3302      	adds	r3, #2
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6812      	ldr	r2, [r2, #0]
 80029c2:	4413      	add	r3, r2
 80029c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80029d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d4:	699a      	ldr	r2, [r3, #24]
 80029d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80029da:	429a      	cmp	r2, r3
 80029dc:	d907      	bls.n	80029ee <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80029de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80029e6:	1ad2      	subs	r2, r2, r3
 80029e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ea:	619a      	str	r2, [r3, #24]
 80029ec:	e002      	b.n	80029f4 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80029ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f0:	2200      	movs	r2, #0
 80029f2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80029f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d106      	bne.n	8002a0a <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	4619      	mov	r1, r3
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f007 f805 	bl	8009a12 <HAL_PCD_DataInStageCallback>
 8002a08:	e01b      	b.n	8002a42 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a12:	441a      	add	r2, r3
 8002a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a16:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a1a:	69da      	ldr	r2, [r3, #28]
 8002a1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a20:	441a      	add	r2, r3
 8002a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a24:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f003 fcea 	bl	8006406 <USB_EPStartXfer>
 8002a32:	e006      	b.n	8002a42 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002a34:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a38:	461a      	mov	r2, r3
 8002a3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 f91b 	bl	8002c78 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	b21b      	sxth	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f6ff ac37 	blt.w	80022c2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3758      	adds	r7, #88	; 0x58
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b088      	sub	sp, #32
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a6c:	88fb      	ldrh	r3, [r7, #6]
 8002a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d07e      	beq.n	8002b74 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	461a      	mov	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4413      	add	r3, r2
 8002a8a:	3302      	adds	r3, #2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	6812      	ldr	r2, [r2, #0]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a9e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	699a      	ldr	r2, [r3, #24]
 8002aa4:	8b7b      	ldrh	r3, [r7, #26]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d306      	bcc.n	8002ab8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	699a      	ldr	r2, [r3, #24]
 8002aae:	8b7b      	ldrh	r3, [r7, #26]
 8002ab0:	1ad2      	subs	r2, r2, r3
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	619a      	str	r2, [r3, #24]
 8002ab6:	e002      	b.n	8002abe <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2200      	movs	r2, #0
 8002abc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d123      	bne.n	8002b0e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	461a      	mov	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae0:	833b      	strh	r3, [r7, #24]
 8002ae2:	8b3b      	ldrh	r3, [r7, #24]
 8002ae4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ae8:	833b      	strh	r3, [r7, #24]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	441a      	add	r2, r3
 8002af8:	8b3b      	ldrh	r3, [r7, #24]
 8002afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d01f      	beq.n	8002b58 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b32:	82fb      	strh	r3, [r7, #22]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	441a      	add	r2, r3
 8002b42:	8afb      	ldrh	r3, [r7, #22]
 8002b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b58:	8b7b      	ldrh	r3, [r7, #26]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 8087 	beq.w	8002c6e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6818      	ldr	r0, [r3, #0]
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	6959      	ldr	r1, [r3, #20]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	891a      	ldrh	r2, [r3, #8]
 8002b6c:	8b7b      	ldrh	r3, [r7, #26]
 8002b6e:	f005 f96f 	bl	8007e50 <USB_ReadPMA>
 8002b72:	e07c      	b.n	8002c6e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	461a      	mov	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	4413      	add	r3, r2
 8002b88:	3306      	adds	r3, #6
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	6812      	ldr	r2, [r2, #0]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b9c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	699a      	ldr	r2, [r3, #24]
 8002ba2:	8b7b      	ldrh	r3, [r7, #26]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d306      	bcc.n	8002bb6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	699a      	ldr	r2, [r3, #24]
 8002bac:	8b7b      	ldrh	r3, [r7, #26]
 8002bae:	1ad2      	subs	r2, r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	619a      	str	r2, [r3, #24]
 8002bb4:	e002      	b.n	8002bbc <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d123      	bne.n	8002c0c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bde:	83fb      	strh	r3, [r7, #30]
 8002be0:	8bfb      	ldrh	r3, [r7, #30]
 8002be2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002be6:	83fb      	strh	r3, [r7, #30]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	441a      	add	r2, r3
 8002bf6:	8bfb      	ldrh	r3, [r7, #30]
 8002bf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d11f      	bne.n	8002c56 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c30:	83bb      	strh	r3, [r7, #28]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	441a      	add	r2, r3
 8002c40:	8bbb      	ldrh	r3, [r7, #28]
 8002c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c56:	8b7b      	ldrh	r3, [r7, #26]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6818      	ldr	r0, [r3, #0]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	6959      	ldr	r1, [r3, #20]
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	895a      	ldrh	r2, [r3, #10]
 8002c68:	8b7b      	ldrh	r3, [r7, #26]
 8002c6a:	f005 f8f1 	bl	8007e50 <USB_ReadPMA>
    }
  }

  return count;
 8002c6e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3720      	adds	r7, #32
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b0a4      	sub	sp, #144	; 0x90
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	4613      	mov	r3, r2
 8002c84:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 81dd 	beq.w	800304c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3302      	adds	r3, #2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	6812      	ldr	r2, [r2, #0]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cba:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	699a      	ldr	r2, [r3, #24]
 8002cc2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d907      	bls.n	8002cda <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002cd2:	1ad2      	subs	r2, r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	619a      	str	r2, [r3, #24]
 8002cd8:	e002      	b.n	8002ce0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f040 80b9 	bne.w	8002e5c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	785b      	ldrb	r3, [r3, #1]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d126      	bne.n	8002d40 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	461a      	mov	r2, r3
 8002d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d06:	4413      	add	r3, r2
 8002d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	011a      	lsls	r2, r3, #4
 8002d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d12:	4413      	add	r3, r2
 8002d14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d28:	801a      	strh	r2, [r3, #0]
 8002d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3c:	801a      	strh	r2, [r3, #0]
 8002d3e:	e01a      	b.n	8002d76 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	785b      	ldrb	r3, [r3, #1]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d116      	bne.n	8002d76 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5c:	4413      	add	r3, r2
 8002d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	011a      	lsls	r2, r3, #4
 8002d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d68:	4413      	add	r3, r2
 8002d6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d6e:	633b      	str	r3, [r7, #48]	; 0x30
 8002d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d72:	2200      	movs	r2, #0
 8002d74:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	785b      	ldrb	r3, [r3, #1]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d126      	bne.n	8002dd2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	61fb      	str	r3, [r7, #28]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	4413      	add	r3, r2
 8002d9a:	61fb      	str	r3, [r7, #28]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	011a      	lsls	r2, r3, #4
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	4413      	add	r3, r2
 8002da6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002daa:	61bb      	str	r3, [r7, #24]
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	881b      	ldrh	r3, [r3, #0]
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	801a      	strh	r2, [r3, #0]
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	801a      	strh	r2, [r3, #0]
 8002dd0:	e017      	b.n	8002e02 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	785b      	ldrb	r3, [r3, #1]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d113      	bne.n	8002e02 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	4413      	add	r3, r2
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	011a      	lsls	r2, r3, #4
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	4413      	add	r3, r2
 8002df6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dfa:	623b      	str	r3, [r7, #32]
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	4619      	mov	r1, r3
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f006 fe02 	bl	8009a12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e0e:	88fb      	ldrh	r3, [r7, #6]
 8002e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 82fc 	beq.w	8003412 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e34:	82fb      	strh	r3, [r7, #22]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	441a      	add	r2, r3
 8002e44:	8afb      	ldrh	r3, [r7, #22]
 8002e46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	8013      	strh	r3, [r2, #0]
 8002e5a:	e2da      	b.n	8003412 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e5c:	88fb      	ldrh	r3, [r7, #6]
 8002e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d021      	beq.n	8002eaa <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e80:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	441a      	add	r2, r3
 8002e92:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002e96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	f040 82ae 	bne.w	8003412 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	695a      	ldr	r2, [r3, #20]
 8002eba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ebe:	441a      	add	r2, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	69da      	ldr	r2, [r3, #28]
 8002ec8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ecc:	441a      	add	r2, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	6a1a      	ldr	r2, [r3, #32]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d30b      	bcc.n	8002ef6 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	6a1a      	ldr	r2, [r3, #32]
 8002eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002eee:	1ad2      	subs	r2, r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	621a      	str	r2, [r3, #32]
 8002ef4:	e017      	b.n	8002f26 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d108      	bne.n	8002f10 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002efe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f0e:	e00a      	b.n	8002f26 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2200      	movs	r2, #0
 8002f24:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	785b      	ldrb	r3, [r3, #1]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d165      	bne.n	8002ffa <HAL_PCD_EP_DB_Transmit+0x382>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f42:	4413      	add	r3, r2
 8002f44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	011a      	lsls	r2, r3, #4
 8002f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f4e:	4413      	add	r3, r2
 8002f50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f54:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f64:	801a      	strh	r2, [r3, #0]
 8002f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f6a:	2b3e      	cmp	r3, #62	; 0x3e
 8002f6c:	d91d      	bls.n	8002faa <HAL_PCD_EP_DB_Transmit+0x332>
 8002f6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f72:	095b      	lsrs	r3, r3, #5
 8002f74:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f7a:	f003 031f 	and.w	r3, r3, #31
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d102      	bne.n	8002f88 <HAL_PCD_EP_DB_Transmit+0x310>
 8002f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f84:	3b01      	subs	r3, #1
 8002f86:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	029b      	lsls	r3, r3, #10
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	4313      	orrs	r3, r2
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa6:	801a      	strh	r2, [r3, #0]
 8002fa8:	e044      	b.n	8003034 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10a      	bne.n	8002fc8 <HAL_PCD_EP_DB_Transmit+0x350>
 8002fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc4:	801a      	strh	r2, [r3, #0]
 8002fc6:	e035      	b.n	8003034 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002fc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fcc:	085b      	lsrs	r3, r3, #1
 8002fce:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fde:	3301      	adds	r3, #1
 8002fe0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	029b      	lsls	r3, r3, #10
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff6:	801a      	strh	r2, [r3, #0]
 8002ff8:	e01c      	b.n	8003034 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	785b      	ldrb	r3, [r3, #1]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d118      	bne.n	8003034 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	647b      	str	r3, [r7, #68]	; 0x44
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003010:	b29b      	uxth	r3, r3
 8003012:	461a      	mov	r2, r3
 8003014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003016:	4413      	add	r3, r2
 8003018:	647b      	str	r3, [r7, #68]	; 0x44
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	011a      	lsls	r2, r3, #4
 8003020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003022:	4413      	add	r3, r2
 8003024:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003028:	643b      	str	r3, [r7, #64]	; 0x40
 800302a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800302e:	b29a      	uxth	r2, r3
 8003030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003032:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6818      	ldr	r0, [r3, #0]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	6959      	ldr	r1, [r3, #20]
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	891a      	ldrh	r2, [r3, #8]
 8003040:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003044:	b29b      	uxth	r3, r3
 8003046:	f004 febd 	bl	8007dc4 <USB_WritePMA>
 800304a:	e1e2      	b.n	8003412 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003054:	b29b      	uxth	r3, r3
 8003056:	461a      	mov	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	4413      	add	r3, r2
 8003060:	3306      	adds	r3, #6
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	4413      	add	r3, r2
 800306a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003074:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	699a      	ldr	r2, [r3, #24]
 800307c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003080:	429a      	cmp	r2, r3
 8003082:	d307      	bcc.n	8003094 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	699a      	ldr	r2, [r3, #24]
 8003088:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800308c:	1ad2      	subs	r2, r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	619a      	str	r2, [r3, #24]
 8003092:	e002      	b.n	800309a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2200      	movs	r2, #0
 8003098:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f040 80c0 	bne.w	8003224 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	785b      	ldrb	r3, [r3, #1]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d126      	bne.n	80030fa <HAL_PCD_EP_DB_Transmit+0x482>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	461a      	mov	r2, r3
 80030be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030c0:	4413      	add	r3, r2
 80030c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	011a      	lsls	r2, r3, #4
 80030ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030cc:	4413      	add	r3, r2
 80030ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80030d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030de:	b29a      	uxth	r2, r3
 80030e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030e2:	801a      	strh	r2, [r3, #0]
 80030e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030f6:	801a      	strh	r2, [r3, #0]
 80030f8:	e01a      	b.n	8003130 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	785b      	ldrb	r3, [r3, #1]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d116      	bne.n	8003130 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	667b      	str	r3, [r7, #100]	; 0x64
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003110:	b29b      	uxth	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003116:	4413      	add	r3, r2
 8003118:	667b      	str	r3, [r7, #100]	; 0x64
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	011a      	lsls	r2, r3, #4
 8003120:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003122:	4413      	add	r3, r2
 8003124:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003128:	663b      	str	r3, [r7, #96]	; 0x60
 800312a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800312c:	2200      	movs	r2, #0
 800312e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	677b      	str	r3, [r7, #116]	; 0x74
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	785b      	ldrb	r3, [r3, #1]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d12b      	bne.n	8003196 <HAL_PCD_EP_DB_Transmit+0x51e>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800314c:	b29b      	uxth	r3, r3
 800314e:	461a      	mov	r2, r3
 8003150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003152:	4413      	add	r3, r2
 8003154:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	011a      	lsls	r2, r3, #4
 800315c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800315e:	4413      	add	r3, r2
 8003160:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003164:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003168:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	b29b      	uxth	r3, r3
 8003170:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003174:	b29a      	uxth	r2, r3
 8003176:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800317a:	801a      	strh	r2, [r3, #0]
 800317c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	b29b      	uxth	r3, r3
 8003184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800318c:	b29a      	uxth	r2, r3
 800318e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003192:	801a      	strh	r2, [r3, #0]
 8003194:	e017      	b.n	80031c6 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	785b      	ldrb	r3, [r3, #1]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d113      	bne.n	80031c6 <HAL_PCD_EP_DB_Transmit+0x54e>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031ac:	4413      	add	r3, r2
 80031ae:	677b      	str	r3, [r7, #116]	; 0x74
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	011a      	lsls	r2, r3, #4
 80031b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031b8:	4413      	add	r3, r2
 80031ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031be:	673b      	str	r3, [r7, #112]	; 0x70
 80031c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031c2:	2200      	movs	r2, #0
 80031c4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	4619      	mov	r1, r3
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f006 fc20 	bl	8009a12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f040 811a 	bne.w	8003412 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	461a      	mov	r2, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	441a      	add	r2, r3
 800320a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800320e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003216:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800321a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800321e:	b29b      	uxth	r3, r3
 8003220:	8013      	strh	r3, [r2, #0]
 8003222:	e0f6      	b.n	8003412 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003224:	88fb      	ldrh	r3, [r7, #6]
 8003226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d121      	bne.n	8003272 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	461a      	mov	r2, r3
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	b29b      	uxth	r3, r3
 8003240:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003248:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	441a      	add	r2, r3
 800325a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800325e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003266:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800326a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800326e:	b29b      	uxth	r3, r3
 8003270:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003278:	2b01      	cmp	r3, #1
 800327a:	f040 80ca 	bne.w	8003412 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	695a      	ldr	r2, [r3, #20]
 8003282:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003286:	441a      	add	r2, r3
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	69da      	ldr	r2, [r3, #28]
 8003290:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003294:	441a      	add	r2, r3
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	6a1a      	ldr	r2, [r3, #32]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d30b      	bcc.n	80032be <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	6a1a      	ldr	r2, [r3, #32]
 80032b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032b6:	1ad2      	subs	r2, r2, r3
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	621a      	str	r2, [r3, #32]
 80032bc:	e017      	b.n	80032ee <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d108      	bne.n	80032d8 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80032c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80032d6:	e00a      	b.n	80032ee <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2200      	movs	r2, #0
 80032e4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	657b      	str	r3, [r7, #84]	; 0x54
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	785b      	ldrb	r3, [r3, #1]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d165      	bne.n	80033c8 <HAL_PCD_EP_DB_Transmit+0x750>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800330a:	b29b      	uxth	r3, r3
 800330c:	461a      	mov	r2, r3
 800330e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003310:	4413      	add	r3, r2
 8003312:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	011a      	lsls	r2, r3, #4
 800331a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800331c:	4413      	add	r3, r2
 800331e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003322:	65bb      	str	r3, [r7, #88]	; 0x58
 8003324:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	b29b      	uxth	r3, r3
 800332a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800332e:	b29a      	uxth	r2, r3
 8003330:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003332:	801a      	strh	r2, [r3, #0]
 8003334:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003338:	2b3e      	cmp	r3, #62	; 0x3e
 800333a:	d91d      	bls.n	8003378 <HAL_PCD_EP_DB_Transmit+0x700>
 800333c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003340:	095b      	lsrs	r3, r3, #5
 8003342:	66bb      	str	r3, [r7, #104]	; 0x68
 8003344:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	2b00      	cmp	r3, #0
 800334e:	d102      	bne.n	8003356 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003350:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003352:	3b01      	subs	r3, #1
 8003354:	66bb      	str	r3, [r7, #104]	; 0x68
 8003356:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	b29a      	uxth	r2, r3
 800335c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800335e:	b29b      	uxth	r3, r3
 8003360:	029b      	lsls	r3, r3, #10
 8003362:	b29b      	uxth	r3, r3
 8003364:	4313      	orrs	r3, r2
 8003366:	b29b      	uxth	r3, r3
 8003368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800336c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003370:	b29a      	uxth	r2, r3
 8003372:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003374:	801a      	strh	r2, [r3, #0]
 8003376:	e041      	b.n	80033fc <HAL_PCD_EP_DB_Transmit+0x784>
 8003378:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10a      	bne.n	8003396 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003380:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	b29b      	uxth	r3, r3
 8003386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800338a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800338e:	b29a      	uxth	r2, r3
 8003390:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003392:	801a      	strh	r2, [r3, #0]
 8003394:	e032      	b.n	80033fc <HAL_PCD_EP_DB_Transmit+0x784>
 8003396:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800339a:	085b      	lsrs	r3, r3, #1
 800339c:	66bb      	str	r3, [r7, #104]	; 0x68
 800339e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <HAL_PCD_EP_DB_Transmit+0x738>
 80033aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033ac:	3301      	adds	r3, #1
 80033ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80033b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	029b      	lsls	r3, r3, #10
 80033bc:	b29b      	uxth	r3, r3
 80033be:	4313      	orrs	r3, r2
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033c4:	801a      	strh	r2, [r3, #0]
 80033c6:	e019      	b.n	80033fc <HAL_PCD_EP_DB_Transmit+0x784>
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	785b      	ldrb	r3, [r3, #1]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d115      	bne.n	80033fc <HAL_PCD_EP_DB_Transmit+0x784>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033d8:	b29b      	uxth	r3, r3
 80033da:	461a      	mov	r2, r3
 80033dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033de:	4413      	add	r3, r2
 80033e0:	657b      	str	r3, [r7, #84]	; 0x54
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	011a      	lsls	r2, r3, #4
 80033e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ea:	4413      	add	r3, r2
 80033ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80033f0:	653b      	str	r3, [r7, #80]	; 0x50
 80033f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033fa:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	6959      	ldr	r1, [r3, #20]
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	895a      	ldrh	r2, [r3, #10]
 8003408:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800340c:	b29b      	uxth	r3, r3
 800340e:	f004 fcd9 	bl	8007dc4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	b29b      	uxth	r3, r3
 8003424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800342c:	82bb      	strh	r3, [r7, #20]
 800342e:	8abb      	ldrh	r3, [r7, #20]
 8003430:	f083 0310 	eor.w	r3, r3, #16
 8003434:	82bb      	strh	r3, [r7, #20]
 8003436:	8abb      	ldrh	r3, [r7, #20]
 8003438:	f083 0320 	eor.w	r3, r3, #32
 800343c:	82bb      	strh	r3, [r7, #20]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	441a      	add	r2, r3
 800344c:	8abb      	ldrh	r3, [r7, #20]
 800344e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800345a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800345e:	b29b      	uxth	r3, r3
 8003460:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3790      	adds	r7, #144	; 0x90
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	607b      	str	r3, [r7, #4]
 8003476:	460b      	mov	r3, r1
 8003478:	817b      	strh	r3, [r7, #10]
 800347a:	4613      	mov	r3, r2
 800347c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800347e:	897b      	ldrh	r3, [r7, #10]
 8003480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003484:	b29b      	uxth	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00b      	beq.n	80034a2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800348a:	897b      	ldrh	r3, [r7, #10]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	4613      	mov	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	4413      	add	r3, r2
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	e009      	b.n	80034b6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034a2:	897a      	ldrh	r2, [r7, #10]
 80034a4:	4613      	mov	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	4413      	add	r3, r2
 80034b4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80034b6:	893b      	ldrh	r3, [r7, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d107      	bne.n	80034cc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2200      	movs	r2, #0
 80034c0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	80da      	strh	r2, [r3, #6]
 80034ca:	e00b      	b.n	80034e4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	2201      	movs	r2, #1
 80034d0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	0c1b      	lsrs	r3, r3, #16
 80034de:	b29a      	uxth	r2, r3
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	371c      	adds	r7, #28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
	...

080034f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003500:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003504:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d102      	bne.n	800351a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	f001 b823 	b.w	8004560 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800351a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 817d 	beq.w	800382a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003530:	4bbc      	ldr	r3, [pc, #752]	; (8003824 <HAL_RCC_OscConfig+0x330>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 030c 	and.w	r3, r3, #12
 8003538:	2b04      	cmp	r3, #4
 800353a:	d00c      	beq.n	8003556 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800353c:	4bb9      	ldr	r3, [pc, #740]	; (8003824 <HAL_RCC_OscConfig+0x330>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 030c 	and.w	r3, r3, #12
 8003544:	2b08      	cmp	r3, #8
 8003546:	d15c      	bne.n	8003602 <HAL_RCC_OscConfig+0x10e>
 8003548:	4bb6      	ldr	r3, [pc, #728]	; (8003824 <HAL_RCC_OscConfig+0x330>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003554:	d155      	bne.n	8003602 <HAL_RCC_OscConfig+0x10e>
 8003556:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800355a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003562:	fa93 f3a3 	rbit	r3, r3
 8003566:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800356a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800356e:	fab3 f383 	clz	r3, r3
 8003572:	b2db      	uxtb	r3, r3
 8003574:	095b      	lsrs	r3, r3, #5
 8003576:	b2db      	uxtb	r3, r3
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b01      	cmp	r3, #1
 8003580:	d102      	bne.n	8003588 <HAL_RCC_OscConfig+0x94>
 8003582:	4ba8      	ldr	r3, [pc, #672]	; (8003824 <HAL_RCC_OscConfig+0x330>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	e015      	b.n	80035b4 <HAL_RCC_OscConfig+0xc0>
 8003588:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800358c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003590:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003594:	fa93 f3a3 	rbit	r3, r3
 8003598:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800359c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035a0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80035a4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80035a8:	fa93 f3a3 	rbit	r3, r3
 80035ac:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80035b0:	4b9c      	ldr	r3, [pc, #624]	; (8003824 <HAL_RCC_OscConfig+0x330>)
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035b8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80035bc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80035c0:	fa92 f2a2 	rbit	r2, r2
 80035c4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80035c8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80035cc:	fab2 f282 	clz	r2, r2
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	f042 0220 	orr.w	r2, r2, #32
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	f002 021f 	and.w	r2, r2, #31
 80035dc:	2101      	movs	r1, #1
 80035de:	fa01 f202 	lsl.w	r2, r1, r2
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 811f 	beq.w	8003828 <HAL_RCC_OscConfig+0x334>
 80035ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f040 8116 	bne.w	8003828 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	f000 bfaf 	b.w	8004560 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003606:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003612:	d106      	bne.n	8003622 <HAL_RCC_OscConfig+0x12e>
 8003614:	4b83      	ldr	r3, [pc, #524]	; (8003824 <HAL_RCC_OscConfig+0x330>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a82      	ldr	r2, [pc, #520]	; (8003824 <HAL_RCC_OscConfig+0x330>)
 800361a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	e036      	b.n	8003690 <HAL_RCC_OscConfig+0x19c>
 8003622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003626:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10c      	bne.n	800364c <HAL_RCC_OscConfig+0x158>
 8003632:	4b7c      	ldr	r3, [pc, #496]	; (8003824 <HAL_RCC_OscConfig+0x330>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a7b      	ldr	r2, [pc, #492]	; (8003824 <HAL_RCC_OscConfig+0x330>)
 8003638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	4b79      	ldr	r3, [pc, #484]	; (8003824 <HAL_RCC_OscConfig+0x330>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a78      	ldr	r2, [pc, #480]	; (8003824 <HAL_RCC_OscConfig+0x330>)
 8003644:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	e021      	b.n	8003690 <HAL_RCC_OscConfig+0x19c>
 800364c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003650:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800365c:	d10c      	bne.n	8003678 <HAL_RCC_OscConfig+0x184>
 800365e:	4b71      	ldr	r3, [pc, #452]	; (8003824 <HAL_RCC_OscConfig+0x330>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a70      	ldr	r2, [pc, #448]	; (8003824 <HAL_RCC_OscConfig+0x330>)
 8003664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	4b6e      	ldr	r3, [pc, #440]	; (8003824 <HAL_RCC_OscConfig+0x330>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a6d      	ldr	r2, [pc, #436]	; (8003824 <HAL_RCC_OscConfig+0x330>)
 8003670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	e00b      	b.n	8003690 <HAL_RCC_OscConfig+0x19c>
 8003678:	4b6a      	ldr	r3, [pc, #424]	; (8003824 <HAL_RCC_OscConfig+0x330>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a69      	ldr	r2, [pc, #420]	; (8003824 <HAL_RCC_OscConfig+0x330>)
 800367e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003682:	6013      	str	r3, [r2, #0]
 8003684:	4b67      	ldr	r3, [pc, #412]	; (8003824 <HAL_RCC_OscConfig+0x330>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a66      	ldr	r2, [pc, #408]	; (8003824 <HAL_RCC_OscConfig+0x330>)
 800368a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800368e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003690:	4b64      	ldr	r3, [pc, #400]	; (8003824 <HAL_RCC_OscConfig+0x330>)
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	f023 020f 	bic.w	r2, r3, #15
 8003698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	495f      	ldr	r1, [pc, #380]	; (8003824 <HAL_RCC_OscConfig+0x330>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d059      	beq.n	800376e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ba:	f7fd f96f 	bl	800099c <HAL_GetTick>
 80036be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c2:	e00a      	b.n	80036da <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036c4:	f7fd f96a 	bl	800099c <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b64      	cmp	r3, #100	; 0x64
 80036d2:	d902      	bls.n	80036da <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	f000 bf43 	b.w	8004560 <HAL_RCC_OscConfig+0x106c>
 80036da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036de:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80036e6:	fa93 f3a3 	rbit	r3, r3
 80036ea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80036ee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f2:	fab3 f383 	clz	r3, r3
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	095b      	lsrs	r3, r3, #5
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b01      	cmp	r3, #1
 8003704:	d102      	bne.n	800370c <HAL_RCC_OscConfig+0x218>
 8003706:	4b47      	ldr	r3, [pc, #284]	; (8003824 <HAL_RCC_OscConfig+0x330>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	e015      	b.n	8003738 <HAL_RCC_OscConfig+0x244>
 800370c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003710:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003714:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003718:	fa93 f3a3 	rbit	r3, r3
 800371c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003720:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003724:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003728:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800372c:	fa93 f3a3 	rbit	r3, r3
 8003730:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003734:	4b3b      	ldr	r3, [pc, #236]	; (8003824 <HAL_RCC_OscConfig+0x330>)
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800373c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003740:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003744:	fa92 f2a2 	rbit	r2, r2
 8003748:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800374c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003750:	fab2 f282 	clz	r2, r2
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	f042 0220 	orr.w	r2, r2, #32
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	f002 021f 	and.w	r2, r2, #31
 8003760:	2101      	movs	r1, #1
 8003762:	fa01 f202 	lsl.w	r2, r1, r2
 8003766:	4013      	ands	r3, r2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0ab      	beq.n	80036c4 <HAL_RCC_OscConfig+0x1d0>
 800376c:	e05d      	b.n	800382a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376e:	f7fd f915 	bl	800099c <HAL_GetTick>
 8003772:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003776:	e00a      	b.n	800378e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003778:	f7fd f910 	bl	800099c <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b64      	cmp	r3, #100	; 0x64
 8003786:	d902      	bls.n	800378e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	f000 bee9 	b.w	8004560 <HAL_RCC_OscConfig+0x106c>
 800378e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003792:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003796:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800379a:	fa93 f3a3 	rbit	r3, r3
 800379e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80037a2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037a6:	fab3 f383 	clz	r3, r3
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	095b      	lsrs	r3, r3, #5
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	f043 0301 	orr.w	r3, r3, #1
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d102      	bne.n	80037c0 <HAL_RCC_OscConfig+0x2cc>
 80037ba:	4b1a      	ldr	r3, [pc, #104]	; (8003824 <HAL_RCC_OscConfig+0x330>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	e015      	b.n	80037ec <HAL_RCC_OscConfig+0x2f8>
 80037c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037c4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80037cc:	fa93 f3a3 	rbit	r3, r3
 80037d0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80037d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037d8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80037dc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80037e0:	fa93 f3a3 	rbit	r3, r3
 80037e4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80037e8:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <HAL_RCC_OscConfig+0x330>)
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037f0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80037f4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80037f8:	fa92 f2a2 	rbit	r2, r2
 80037fc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003800:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003804:	fab2 f282 	clz	r2, r2
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	f042 0220 	orr.w	r2, r2, #32
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	f002 021f 	and.w	r2, r2, #31
 8003814:	2101      	movs	r1, #1
 8003816:	fa01 f202 	lsl.w	r2, r1, r2
 800381a:	4013      	ands	r3, r2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1ab      	bne.n	8003778 <HAL_RCC_OscConfig+0x284>
 8003820:	e003      	b.n	800382a <HAL_RCC_OscConfig+0x336>
 8003822:	bf00      	nop
 8003824:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800382a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800382e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 817d 	beq.w	8003b3a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003840:	4ba6      	ldr	r3, [pc, #664]	; (8003adc <HAL_RCC_OscConfig+0x5e8>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 030c 	and.w	r3, r3, #12
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00b      	beq.n	8003864 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800384c:	4ba3      	ldr	r3, [pc, #652]	; (8003adc <HAL_RCC_OscConfig+0x5e8>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 030c 	and.w	r3, r3, #12
 8003854:	2b08      	cmp	r3, #8
 8003856:	d172      	bne.n	800393e <HAL_RCC_OscConfig+0x44a>
 8003858:	4ba0      	ldr	r3, [pc, #640]	; (8003adc <HAL_RCC_OscConfig+0x5e8>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d16c      	bne.n	800393e <HAL_RCC_OscConfig+0x44a>
 8003864:	2302      	movs	r3, #2
 8003866:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800386e:	fa93 f3a3 	rbit	r3, r3
 8003872:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003876:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800387a:	fab3 f383 	clz	r3, r3
 800387e:	b2db      	uxtb	r3, r3
 8003880:	095b      	lsrs	r3, r3, #5
 8003882:	b2db      	uxtb	r3, r3
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b01      	cmp	r3, #1
 800388c:	d102      	bne.n	8003894 <HAL_RCC_OscConfig+0x3a0>
 800388e:	4b93      	ldr	r3, [pc, #588]	; (8003adc <HAL_RCC_OscConfig+0x5e8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	e013      	b.n	80038bc <HAL_RCC_OscConfig+0x3c8>
 8003894:	2302      	movs	r3, #2
 8003896:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800389e:	fa93 f3a3 	rbit	r3, r3
 80038a2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80038a6:	2302      	movs	r3, #2
 80038a8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80038ac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80038b0:	fa93 f3a3 	rbit	r3, r3
 80038b4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80038b8:	4b88      	ldr	r3, [pc, #544]	; (8003adc <HAL_RCC_OscConfig+0x5e8>)
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	2202      	movs	r2, #2
 80038be:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80038c2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80038c6:	fa92 f2a2 	rbit	r2, r2
 80038ca:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80038ce:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80038d2:	fab2 f282 	clz	r2, r2
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	f042 0220 	orr.w	r2, r2, #32
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	f002 021f 	and.w	r2, r2, #31
 80038e2:	2101      	movs	r1, #1
 80038e4:	fa01 f202 	lsl.w	r2, r1, r2
 80038e8:	4013      	ands	r3, r2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <HAL_RCC_OscConfig+0x410>
 80038ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d002      	beq.n	8003904 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	f000 be2e 	b.w	8004560 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003904:	4b75      	ldr	r3, [pc, #468]	; (8003adc <HAL_RCC_OscConfig+0x5e8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800390c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003910:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	21f8      	movs	r1, #248	; 0xf8
 800391a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003922:	fa91 f1a1 	rbit	r1, r1
 8003926:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800392a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800392e:	fab1 f181 	clz	r1, r1
 8003932:	b2c9      	uxtb	r1, r1
 8003934:	408b      	lsls	r3, r1
 8003936:	4969      	ldr	r1, [pc, #420]	; (8003adc <HAL_RCC_OscConfig+0x5e8>)
 8003938:	4313      	orrs	r3, r2
 800393a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800393c:	e0fd      	b.n	8003b3a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800393e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003942:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 8088 	beq.w	8003a60 <HAL_RCC_OscConfig+0x56c>
 8003950:	2301      	movs	r3, #1
 8003952:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003956:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800395a:	fa93 f3a3 	rbit	r3, r3
 800395e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003962:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003966:	fab3 f383 	clz	r3, r3
 800396a:	b2db      	uxtb	r3, r3
 800396c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003970:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	461a      	mov	r2, r3
 8003978:	2301      	movs	r3, #1
 800397a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397c:	f7fd f80e 	bl	800099c <HAL_GetTick>
 8003980:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003984:	e00a      	b.n	800399c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003986:	f7fd f809 	bl	800099c <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d902      	bls.n	800399c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	f000 bde2 	b.w	8004560 <HAL_RCC_OscConfig+0x106c>
 800399c:	2302      	movs	r3, #2
 800399e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80039a6:	fa93 f3a3 	rbit	r3, r3
 80039aa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80039ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b2:	fab3 f383 	clz	r3, r3
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	095b      	lsrs	r3, r3, #5
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d102      	bne.n	80039cc <HAL_RCC_OscConfig+0x4d8>
 80039c6:	4b45      	ldr	r3, [pc, #276]	; (8003adc <HAL_RCC_OscConfig+0x5e8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	e013      	b.n	80039f4 <HAL_RCC_OscConfig+0x500>
 80039cc:	2302      	movs	r3, #2
 80039ce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80039d6:	fa93 f3a3 	rbit	r3, r3
 80039da:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80039de:	2302      	movs	r3, #2
 80039e0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80039e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80039e8:	fa93 f3a3 	rbit	r3, r3
 80039ec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80039f0:	4b3a      	ldr	r3, [pc, #232]	; (8003adc <HAL_RCC_OscConfig+0x5e8>)
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	2202      	movs	r2, #2
 80039f6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80039fa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80039fe:	fa92 f2a2 	rbit	r2, r2
 8003a02:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003a06:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003a0a:	fab2 f282 	clz	r2, r2
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	f042 0220 	orr.w	r2, r2, #32
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	f002 021f 	and.w	r2, r2, #31
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a20:	4013      	ands	r3, r2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0af      	beq.n	8003986 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a26:	4b2d      	ldr	r3, [pc, #180]	; (8003adc <HAL_RCC_OscConfig+0x5e8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	21f8      	movs	r1, #248	; 0xf8
 8003a3c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a40:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003a44:	fa91 f1a1 	rbit	r1, r1
 8003a48:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003a4c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003a50:	fab1 f181 	clz	r1, r1
 8003a54:	b2c9      	uxtb	r1, r1
 8003a56:	408b      	lsls	r3, r1
 8003a58:	4920      	ldr	r1, [pc, #128]	; (8003adc <HAL_RCC_OscConfig+0x5e8>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	600b      	str	r3, [r1, #0]
 8003a5e:	e06c      	b.n	8003b3a <HAL_RCC_OscConfig+0x646>
 8003a60:	2301      	movs	r3, #1
 8003a62:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a66:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003a6a:	fa93 f3a3 	rbit	r3, r3
 8003a6e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003a72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a76:	fab3 f383 	clz	r3, r3
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	461a      	mov	r2, r3
 8003a88:	2300      	movs	r3, #0
 8003a8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8c:	f7fc ff86 	bl	800099c <HAL_GetTick>
 8003a90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a94:	e00a      	b.n	8003aac <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a96:	f7fc ff81 	bl	800099c <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d902      	bls.n	8003aac <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	f000 bd5a 	b.w	8004560 <HAL_RCC_OscConfig+0x106c>
 8003aac:	2302      	movs	r3, #2
 8003aae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003ab6:	fa93 f3a3 	rbit	r3, r3
 8003aba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ac2:	fab3 f383 	clz	r3, r3
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	095b      	lsrs	r3, r3, #5
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d104      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x5ec>
 8003ad6:	4b01      	ldr	r3, [pc, #4]	; (8003adc <HAL_RCC_OscConfig+0x5e8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	e015      	b.n	8003b08 <HAL_RCC_OscConfig+0x614>
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003aea:	fa93 f3a3 	rbit	r3, r3
 8003aee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003af2:	2302      	movs	r3, #2
 8003af4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003af8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003afc:	fa93 f3a3 	rbit	r3, r3
 8003b00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003b04:	4bc8      	ldr	r3, [pc, #800]	; (8003e28 <HAL_RCC_OscConfig+0x934>)
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	2202      	movs	r2, #2
 8003b0a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003b0e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003b12:	fa92 f2a2 	rbit	r2, r2
 8003b16:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003b1a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003b1e:	fab2 f282 	clz	r2, r2
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	f042 0220 	orr.w	r2, r2, #32
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	f002 021f 	and.w	r2, r2, #31
 8003b2e:	2101      	movs	r1, #1
 8003b30:	fa01 f202 	lsl.w	r2, r1, r2
 8003b34:	4013      	ands	r3, r2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1ad      	bne.n	8003a96 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 8110 	beq.w	8003d70 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d079      	beq.n	8003c54 <HAL_RCC_OscConfig+0x760>
 8003b60:	2301      	movs	r3, #1
 8003b62:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b66:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003b6a:	fa93 f3a3 	rbit	r3, r3
 8003b6e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b76:	fab3 f383 	clz	r3, r3
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4bab      	ldr	r3, [pc, #684]	; (8003e2c <HAL_RCC_OscConfig+0x938>)
 8003b80:	4413      	add	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	461a      	mov	r2, r3
 8003b86:	2301      	movs	r3, #1
 8003b88:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b8a:	f7fc ff07 	bl	800099c <HAL_GetTick>
 8003b8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b92:	e00a      	b.n	8003baa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b94:	f7fc ff02 	bl	800099c <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d902      	bls.n	8003baa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	f000 bcdb 	b.w	8004560 <HAL_RCC_OscConfig+0x106c>
 8003baa:	2302      	movs	r3, #2
 8003bac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003bb4:	fa93 f3a3 	rbit	r3, r3
 8003bb8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bcc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	fa93 f2a3 	rbit	r2, r3
 8003bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003be8:	2202      	movs	r2, #2
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	fa93 f2a3 	rbit	r2, r3
 8003bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bfe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003c02:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c04:	4b88      	ldr	r3, [pc, #544]	; (8003e28 <HAL_RCC_OscConfig+0x934>)
 8003c06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003c10:	2102      	movs	r1, #2
 8003c12:	6019      	str	r1, [r3, #0]
 8003c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c18:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	fa93 f1a3 	rbit	r1, r3
 8003c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c26:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003c2a:	6019      	str	r1, [r3, #0]
  return result;
 8003c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c30:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	fab3 f383 	clz	r3, r3
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	f003 031f 	and.w	r3, r3, #31
 8003c46:	2101      	movs	r1, #1
 8003c48:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0a0      	beq.n	8003b94 <HAL_RCC_OscConfig+0x6a0>
 8003c52:	e08d      	b.n	8003d70 <HAL_RCC_OscConfig+0x87c>
 8003c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c58:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c64:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	fa93 f2a3 	rbit	r2, r3
 8003c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c72:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003c76:	601a      	str	r2, [r3, #0]
  return result;
 8003c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c7c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003c80:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c82:	fab3 f383 	clz	r3, r3
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4b68      	ldr	r3, [pc, #416]	; (8003e2c <HAL_RCC_OscConfig+0x938>)
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	461a      	mov	r2, r3
 8003c92:	2300      	movs	r3, #0
 8003c94:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c96:	f7fc fe81 	bl	800099c <HAL_GetTick>
 8003c9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c9e:	e00a      	b.n	8003cb6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ca0:	f7fc fe7c 	bl	800099c <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d902      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	f000 bc55 	b.w	8004560 <HAL_RCC_OscConfig+0x106c>
 8003cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	fa93 f2a3 	rbit	r2, r3
 8003cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cde:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	fa93 f2a3 	rbit	r2, r3
 8003cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d06:	2202      	movs	r2, #2
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	fa93 f2a3 	rbit	r2, r3
 8003d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d1c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003d20:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d22:	4b41      	ldr	r3, [pc, #260]	; (8003e28 <HAL_RCC_OscConfig+0x934>)
 8003d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d2a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003d2e:	2102      	movs	r1, #2
 8003d30:	6019      	str	r1, [r3, #0]
 8003d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d36:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	fa93 f1a3 	rbit	r1, r3
 8003d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d44:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003d48:	6019      	str	r1, [r3, #0]
  return result;
 8003d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d4e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	fab3 f383 	clz	r3, r3
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	f003 031f 	and.w	r3, r3, #31
 8003d64:	2101      	movs	r1, #1
 8003d66:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d197      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 81a1 	beq.w	80040c8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d86:	2300      	movs	r3, #0
 8003d88:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d8c:	4b26      	ldr	r3, [pc, #152]	; (8003e28 <HAL_RCC_OscConfig+0x934>)
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d116      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d98:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <HAL_RCC_OscConfig+0x934>)
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	4a22      	ldr	r2, [pc, #136]	; (8003e28 <HAL_RCC_OscConfig+0x934>)
 8003d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da2:	61d3      	str	r3, [r2, #28]
 8003da4:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <HAL_RCC_OscConfig+0x934>)
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dba:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003dbe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc6:	4b1a      	ldr	r3, [pc, #104]	; (8003e30 <HAL_RCC_OscConfig+0x93c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d11a      	bne.n	8003e08 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dd2:	4b17      	ldr	r3, [pc, #92]	; (8003e30 <HAL_RCC_OscConfig+0x93c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a16      	ldr	r2, [pc, #88]	; (8003e30 <HAL_RCC_OscConfig+0x93c>)
 8003dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ddc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dde:	f7fc fddd 	bl	800099c <HAL_GetTick>
 8003de2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de6:	e009      	b.n	8003dfc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de8:	f7fc fdd8 	bl	800099c <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b64      	cmp	r3, #100	; 0x64
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e3b1      	b.n	8004560 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfc:	4b0c      	ldr	r3, [pc, #48]	; (8003e30 <HAL_RCC_OscConfig+0x93c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0ef      	beq.n	8003de8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d10d      	bne.n	8003e34 <HAL_RCC_OscConfig+0x940>
 8003e18:	4b03      	ldr	r3, [pc, #12]	; (8003e28 <HAL_RCC_OscConfig+0x934>)
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	4a02      	ldr	r2, [pc, #8]	; (8003e28 <HAL_RCC_OscConfig+0x934>)
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	6213      	str	r3, [r2, #32]
 8003e24:	e03c      	b.n	8003ea0 <HAL_RCC_OscConfig+0x9ac>
 8003e26:	bf00      	nop
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	10908120 	.word	0x10908120
 8003e30:	40007000 	.word	0x40007000
 8003e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10c      	bne.n	8003e5e <HAL_RCC_OscConfig+0x96a>
 8003e44:	4bc1      	ldr	r3, [pc, #772]	; (800414c <HAL_RCC_OscConfig+0xc58>)
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	4ac0      	ldr	r2, [pc, #768]	; (800414c <HAL_RCC_OscConfig+0xc58>)
 8003e4a:	f023 0301 	bic.w	r3, r3, #1
 8003e4e:	6213      	str	r3, [r2, #32]
 8003e50:	4bbe      	ldr	r3, [pc, #760]	; (800414c <HAL_RCC_OscConfig+0xc58>)
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	4abd      	ldr	r2, [pc, #756]	; (800414c <HAL_RCC_OscConfig+0xc58>)
 8003e56:	f023 0304 	bic.w	r3, r3, #4
 8003e5a:	6213      	str	r3, [r2, #32]
 8003e5c:	e020      	b.n	8003ea0 <HAL_RCC_OscConfig+0x9ac>
 8003e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	2b05      	cmp	r3, #5
 8003e6c:	d10c      	bne.n	8003e88 <HAL_RCC_OscConfig+0x994>
 8003e6e:	4bb7      	ldr	r3, [pc, #732]	; (800414c <HAL_RCC_OscConfig+0xc58>)
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	4ab6      	ldr	r2, [pc, #728]	; (800414c <HAL_RCC_OscConfig+0xc58>)
 8003e74:	f043 0304 	orr.w	r3, r3, #4
 8003e78:	6213      	str	r3, [r2, #32]
 8003e7a:	4bb4      	ldr	r3, [pc, #720]	; (800414c <HAL_RCC_OscConfig+0xc58>)
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	4ab3      	ldr	r2, [pc, #716]	; (800414c <HAL_RCC_OscConfig+0xc58>)
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	6213      	str	r3, [r2, #32]
 8003e86:	e00b      	b.n	8003ea0 <HAL_RCC_OscConfig+0x9ac>
 8003e88:	4bb0      	ldr	r3, [pc, #704]	; (800414c <HAL_RCC_OscConfig+0xc58>)
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	4aaf      	ldr	r2, [pc, #700]	; (800414c <HAL_RCC_OscConfig+0xc58>)
 8003e8e:	f023 0301 	bic.w	r3, r3, #1
 8003e92:	6213      	str	r3, [r2, #32]
 8003e94:	4bad      	ldr	r3, [pc, #692]	; (800414c <HAL_RCC_OscConfig+0xc58>)
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	4aac      	ldr	r2, [pc, #688]	; (800414c <HAL_RCC_OscConfig+0xc58>)
 8003e9a:	f023 0304 	bic.w	r3, r3, #4
 8003e9e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 8081 	beq.w	8003fb4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eb2:	f7fc fd73 	bl	800099c <HAL_GetTick>
 8003eb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eba:	e00b      	b.n	8003ed4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ebc:	f7fc fd6e 	bl	800099c <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e345      	b.n	8004560 <HAL_RCC_OscConfig+0x106c>
 8003ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003edc:	2202      	movs	r2, #2
 8003ede:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	fa93 f2a3 	rbit	r2, r3
 8003eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003efc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003f00:	2202      	movs	r2, #2
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f08:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	fa93 f2a3 	rbit	r2, r3
 8003f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f16:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003f1a:	601a      	str	r2, [r3, #0]
  return result;
 8003f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f20:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003f24:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f26:	fab3 f383 	clz	r3, r3
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	095b      	lsrs	r3, r3, #5
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	f043 0302 	orr.w	r3, r3, #2
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d102      	bne.n	8003f40 <HAL_RCC_OscConfig+0xa4c>
 8003f3a:	4b84      	ldr	r3, [pc, #528]	; (800414c <HAL_RCC_OscConfig+0xc58>)
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	e013      	b.n	8003f68 <HAL_RCC_OscConfig+0xa74>
 8003f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f44:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003f48:	2202      	movs	r2, #2
 8003f4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f50:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	fa93 f2a3 	rbit	r2, r3
 8003f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f5e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	4b79      	ldr	r3, [pc, #484]	; (800414c <HAL_RCC_OscConfig+0xc58>)
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f6c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003f70:	2102      	movs	r1, #2
 8003f72:	6011      	str	r1, [r2, #0]
 8003f74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f78:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003f7c:	6812      	ldr	r2, [r2, #0]
 8003f7e:	fa92 f1a2 	rbit	r1, r2
 8003f82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f86:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003f8a:	6011      	str	r1, [r2, #0]
  return result;
 8003f8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f90:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003f94:	6812      	ldr	r2, [r2, #0]
 8003f96:	fab2 f282 	clz	r2, r2
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	f002 021f 	and.w	r2, r2, #31
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8003fac:	4013      	ands	r3, r2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d084      	beq.n	8003ebc <HAL_RCC_OscConfig+0x9c8>
 8003fb2:	e07f      	b.n	80040b4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb4:	f7fc fcf2 	bl	800099c <HAL_GetTick>
 8003fb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fbc:	e00b      	b.n	8003fd6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fbe:	f7fc fced 	bl	800099c <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e2c4      	b.n	8004560 <HAL_RCC_OscConfig+0x106c>
 8003fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fda:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003fde:	2202      	movs	r2, #2
 8003fe0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	fa93 f2a3 	rbit	r2, r3
 8003ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ffe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004002:	2202      	movs	r2, #2
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800400a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	fa93 f2a3 	rbit	r2, r3
 8004014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004018:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800401c:	601a      	str	r2, [r3, #0]
  return result;
 800401e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004022:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004026:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004028:	fab3 f383 	clz	r3, r3
 800402c:	b2db      	uxtb	r3, r3
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	b2db      	uxtb	r3, r3
 8004032:	f043 0302 	orr.w	r3, r3, #2
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d102      	bne.n	8004042 <HAL_RCC_OscConfig+0xb4e>
 800403c:	4b43      	ldr	r3, [pc, #268]	; (800414c <HAL_RCC_OscConfig+0xc58>)
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	e013      	b.n	800406a <HAL_RCC_OscConfig+0xb76>
 8004042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004046:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800404a:	2202      	movs	r2, #2
 800404c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004052:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	fa93 f2a3 	rbit	r2, r3
 800405c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004060:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	4b39      	ldr	r3, [pc, #228]	; (800414c <HAL_RCC_OscConfig+0xc58>)
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800406e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004072:	2102      	movs	r1, #2
 8004074:	6011      	str	r1, [r2, #0]
 8004076:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800407a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800407e:	6812      	ldr	r2, [r2, #0]
 8004080:	fa92 f1a2 	rbit	r1, r2
 8004084:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004088:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800408c:	6011      	str	r1, [r2, #0]
  return result;
 800408e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004092:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004096:	6812      	ldr	r2, [r2, #0]
 8004098:	fab2 f282 	clz	r2, r2
 800409c:	b2d2      	uxtb	r2, r2
 800409e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	f002 021f 	and.w	r2, r2, #31
 80040a8:	2101      	movs	r1, #1
 80040aa:	fa01 f202 	lsl.w	r2, r1, r2
 80040ae:	4013      	ands	r3, r2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d184      	bne.n	8003fbe <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040b4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d105      	bne.n	80040c8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040bc:	4b23      	ldr	r3, [pc, #140]	; (800414c <HAL_RCC_OscConfig+0xc58>)
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	4a22      	ldr	r2, [pc, #136]	; (800414c <HAL_RCC_OscConfig+0xc58>)
 80040c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040c6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 8242 	beq.w	800455e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040da:	4b1c      	ldr	r3, [pc, #112]	; (800414c <HAL_RCC_OscConfig+0xc58>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f003 030c 	and.w	r3, r3, #12
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	f000 8213 	beq.w	800450e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	f040 8162 	bne.w	80043be <HAL_RCC_OscConfig+0xeca>
 80040fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040fe:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004102:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004106:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800410c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	fa93 f2a3 	rbit	r2, r3
 8004116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800411a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800411e:	601a      	str	r2, [r3, #0]
  return result;
 8004120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004124:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004128:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412a:	fab3 f383 	clz	r3, r3
 800412e:	b2db      	uxtb	r3, r3
 8004130:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004134:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	461a      	mov	r2, r3
 800413c:	2300      	movs	r3, #0
 800413e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004140:	f7fc fc2c 	bl	800099c <HAL_GetTick>
 8004144:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004148:	e00c      	b.n	8004164 <HAL_RCC_OscConfig+0xc70>
 800414a:	bf00      	nop
 800414c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004150:	f7fc fc24 	bl	800099c <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e1fd      	b.n	8004560 <HAL_RCC_OscConfig+0x106c>
 8004164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004168:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800416c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004170:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004176:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	fa93 f2a3 	rbit	r2, r3
 8004180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004184:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004188:	601a      	str	r2, [r3, #0]
  return result;
 800418a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800418e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004192:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004194:	fab3 f383 	clz	r3, r3
 8004198:	b2db      	uxtb	r3, r3
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	b2db      	uxtb	r3, r3
 800419e:	f043 0301 	orr.w	r3, r3, #1
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d102      	bne.n	80041ae <HAL_RCC_OscConfig+0xcba>
 80041a8:	4bb0      	ldr	r3, [pc, #704]	; (800446c <HAL_RCC_OscConfig+0xf78>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	e027      	b.n	80041fe <HAL_RCC_OscConfig+0xd0a>
 80041ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80041b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	fa93 f2a3 	rbit	r2, r3
 80041ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ce:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041d8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80041dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	fa93 f2a3 	rbit	r2, r3
 80041f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	4b9c      	ldr	r3, [pc, #624]	; (800446c <HAL_RCC_OscConfig+0xf78>)
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004202:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004206:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800420a:	6011      	str	r1, [r2, #0]
 800420c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004210:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004214:	6812      	ldr	r2, [r2, #0]
 8004216:	fa92 f1a2 	rbit	r1, r2
 800421a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800421e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004222:	6011      	str	r1, [r2, #0]
  return result;
 8004224:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004228:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	fab2 f282 	clz	r2, r2
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	f042 0220 	orr.w	r2, r2, #32
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	f002 021f 	and.w	r2, r2, #31
 800423e:	2101      	movs	r1, #1
 8004240:	fa01 f202 	lsl.w	r2, r1, r2
 8004244:	4013      	ands	r3, r2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d182      	bne.n	8004150 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800424a:	4b88      	ldr	r3, [pc, #544]	; (800446c <HAL_RCC_OscConfig+0xf78>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004256:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800425e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004262:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	430b      	orrs	r3, r1
 800426c:	497f      	ldr	r1, [pc, #508]	; (800446c <HAL_RCC_OscConfig+0xf78>)
 800426e:	4313      	orrs	r3, r2
 8004270:	604b      	str	r3, [r1, #4]
 8004272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004276:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800427a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800427e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004284:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	fa93 f2a3 	rbit	r2, r3
 800428e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004292:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004296:	601a      	str	r2, [r3, #0]
  return result;
 8004298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800429c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80042a0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042a2:	fab3 f383 	clz	r3, r3
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80042ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	461a      	mov	r2, r3
 80042b4:	2301      	movs	r3, #1
 80042b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b8:	f7fc fb70 	bl	800099c <HAL_GetTick>
 80042bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042c0:	e009      	b.n	80042d6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042c2:	f7fc fb6b 	bl	800099c <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e144      	b.n	8004560 <HAL_RCC_OscConfig+0x106c>
 80042d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042da:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80042de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	fa93 f2a3 	rbit	r2, r3
 80042f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80042fa:	601a      	str	r2, [r3, #0]
  return result;
 80042fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004300:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004304:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004306:	fab3 f383 	clz	r3, r3
 800430a:	b2db      	uxtb	r3, r3
 800430c:	095b      	lsrs	r3, r3, #5
 800430e:	b2db      	uxtb	r3, r3
 8004310:	f043 0301 	orr.w	r3, r3, #1
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b01      	cmp	r3, #1
 8004318:	d102      	bne.n	8004320 <HAL_RCC_OscConfig+0xe2c>
 800431a:	4b54      	ldr	r3, [pc, #336]	; (800446c <HAL_RCC_OscConfig+0xf78>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	e027      	b.n	8004370 <HAL_RCC_OscConfig+0xe7c>
 8004320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004324:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004328:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800432c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004332:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	fa93 f2a3 	rbit	r2, r3
 800433c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004340:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800434a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800434e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004358:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	fa93 f2a3 	rbit	r2, r3
 8004362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004366:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	4b3f      	ldr	r3, [pc, #252]	; (800446c <HAL_RCC_OscConfig+0xf78>)
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004374:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004378:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800437c:	6011      	str	r1, [r2, #0]
 800437e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004382:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	fa92 f1a2 	rbit	r1, r2
 800438c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004390:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004394:	6011      	str	r1, [r2, #0]
  return result;
 8004396:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800439a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800439e:	6812      	ldr	r2, [r2, #0]
 80043a0:	fab2 f282 	clz	r2, r2
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	f042 0220 	orr.w	r2, r2, #32
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	f002 021f 	and.w	r2, r2, #31
 80043b0:	2101      	movs	r1, #1
 80043b2:	fa01 f202 	lsl.w	r2, r1, r2
 80043b6:	4013      	ands	r3, r2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d082      	beq.n	80042c2 <HAL_RCC_OscConfig+0xdce>
 80043bc:	e0cf      	b.n	800455e <HAL_RCC_OscConfig+0x106a>
 80043be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80043c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	fa93 f2a3 	rbit	r2, r3
 80043da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043de:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80043e2:	601a      	str	r2, [r3, #0]
  return result;
 80043e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80043ec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ee:	fab3 f383 	clz	r3, r3
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80043f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	461a      	mov	r2, r3
 8004400:	2300      	movs	r3, #0
 8004402:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004404:	f7fc faca 	bl	800099c <HAL_GetTick>
 8004408:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800440c:	e009      	b.n	8004422 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800440e:	f7fc fac5 	bl	800099c <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e09e      	b.n	8004560 <HAL_RCC_OscConfig+0x106c>
 8004422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004426:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800442a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800442e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004434:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	fa93 f2a3 	rbit	r2, r3
 800443e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004442:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004446:	601a      	str	r2, [r3, #0]
  return result;
 8004448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800444c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004450:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004452:	fab3 f383 	clz	r3, r3
 8004456:	b2db      	uxtb	r3, r3
 8004458:	095b      	lsrs	r3, r3, #5
 800445a:	b2db      	uxtb	r3, r3
 800445c:	f043 0301 	orr.w	r3, r3, #1
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b01      	cmp	r3, #1
 8004464:	d104      	bne.n	8004470 <HAL_RCC_OscConfig+0xf7c>
 8004466:	4b01      	ldr	r3, [pc, #4]	; (800446c <HAL_RCC_OscConfig+0xf78>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	e029      	b.n	80044c0 <HAL_RCC_OscConfig+0xfcc>
 800446c:	40021000 	.word	0x40021000
 8004470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004474:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004478:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800447c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004482:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	fa93 f2a3 	rbit	r2, r3
 800448c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004490:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800449a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800449e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044a8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	fa93 f2a3 	rbit	r2, r3
 80044b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	4b2b      	ldr	r3, [pc, #172]	; (800456c <HAL_RCC_OscConfig+0x1078>)
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044c4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80044c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80044cc:	6011      	str	r1, [r2, #0]
 80044ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044d2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80044d6:	6812      	ldr	r2, [r2, #0]
 80044d8:	fa92 f1a2 	rbit	r1, r2
 80044dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044e0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80044e4:	6011      	str	r1, [r2, #0]
  return result;
 80044e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044ea:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80044ee:	6812      	ldr	r2, [r2, #0]
 80044f0:	fab2 f282 	clz	r2, r2
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	f042 0220 	orr.w	r2, r2, #32
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	f002 021f 	and.w	r2, r2, #31
 8004500:	2101      	movs	r1, #1
 8004502:	fa01 f202 	lsl.w	r2, r1, r2
 8004506:	4013      	ands	r3, r2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d180      	bne.n	800440e <HAL_RCC_OscConfig+0xf1a>
 800450c:	e027      	b.n	800455e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800450e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004512:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d101      	bne.n	8004522 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e01e      	b.n	8004560 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004522:	4b12      	ldr	r3, [pc, #72]	; (800456c <HAL_RCC_OscConfig+0x1078>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800452a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800452e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004536:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	429a      	cmp	r2, r3
 8004540:	d10b      	bne.n	800455a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004542:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004546:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800454a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800454e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004556:	429a      	cmp	r2, r3
 8004558:	d001      	beq.n	800455e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e000      	b.n	8004560 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40021000 	.word	0x40021000

08004570 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b09e      	sub	sp, #120	; 0x78
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800457a:	2300      	movs	r3, #0
 800457c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e162      	b.n	800484e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004588:	4b90      	ldr	r3, [pc, #576]	; (80047cc <HAL_RCC_ClockConfig+0x25c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	429a      	cmp	r2, r3
 8004594:	d910      	bls.n	80045b8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004596:	4b8d      	ldr	r3, [pc, #564]	; (80047cc <HAL_RCC_ClockConfig+0x25c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f023 0207 	bic.w	r2, r3, #7
 800459e:	498b      	ldr	r1, [pc, #556]	; (80047cc <HAL_RCC_ClockConfig+0x25c>)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a6:	4b89      	ldr	r3, [pc, #548]	; (80047cc <HAL_RCC_ClockConfig+0x25c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d001      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e14a      	b.n	800484e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d008      	beq.n	80045d6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045c4:	4b82      	ldr	r3, [pc, #520]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	497f      	ldr	r1, [pc, #508]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 80dc 	beq.w	800479c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d13c      	bne.n	8004666 <HAL_RCC_ClockConfig+0xf6>
 80045ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045f0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045f4:	fa93 f3a3 	rbit	r3, r3
 80045f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80045fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fc:	fab3 f383 	clz	r3, r3
 8004600:	b2db      	uxtb	r3, r3
 8004602:	095b      	lsrs	r3, r3, #5
 8004604:	b2db      	uxtb	r3, r3
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b01      	cmp	r3, #1
 800460e:	d102      	bne.n	8004616 <HAL_RCC_ClockConfig+0xa6>
 8004610:	4b6f      	ldr	r3, [pc, #444]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	e00f      	b.n	8004636 <HAL_RCC_ClockConfig+0xc6>
 8004616:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800461a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800461e:	fa93 f3a3 	rbit	r3, r3
 8004622:	667b      	str	r3, [r7, #100]	; 0x64
 8004624:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004628:	663b      	str	r3, [r7, #96]	; 0x60
 800462a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800462c:	fa93 f3a3 	rbit	r3, r3
 8004630:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004632:	4b67      	ldr	r3, [pc, #412]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800463a:	65ba      	str	r2, [r7, #88]	; 0x58
 800463c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800463e:	fa92 f2a2 	rbit	r2, r2
 8004642:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004644:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004646:	fab2 f282 	clz	r2, r2
 800464a:	b2d2      	uxtb	r2, r2
 800464c:	f042 0220 	orr.w	r2, r2, #32
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	f002 021f 	and.w	r2, r2, #31
 8004656:	2101      	movs	r1, #1
 8004658:	fa01 f202 	lsl.w	r2, r1, r2
 800465c:	4013      	ands	r3, r2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d17b      	bne.n	800475a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e0f3      	b.n	800484e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d13c      	bne.n	80046e8 <HAL_RCC_ClockConfig+0x178>
 800466e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004672:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004676:	fa93 f3a3 	rbit	r3, r3
 800467a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800467c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467e:	fab3 f383 	clz	r3, r3
 8004682:	b2db      	uxtb	r3, r3
 8004684:	095b      	lsrs	r3, r3, #5
 8004686:	b2db      	uxtb	r3, r3
 8004688:	f043 0301 	orr.w	r3, r3, #1
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b01      	cmp	r3, #1
 8004690:	d102      	bne.n	8004698 <HAL_RCC_ClockConfig+0x128>
 8004692:	4b4f      	ldr	r3, [pc, #316]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	e00f      	b.n	80046b8 <HAL_RCC_ClockConfig+0x148>
 8004698:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800469c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046a0:	fa93 f3a3 	rbit	r3, r3
 80046a4:	647b      	str	r3, [r7, #68]	; 0x44
 80046a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046aa:	643b      	str	r3, [r7, #64]	; 0x40
 80046ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ae:	fa93 f3a3 	rbit	r3, r3
 80046b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046b4:	4b46      	ldr	r3, [pc, #280]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046bc:	63ba      	str	r2, [r7, #56]	; 0x38
 80046be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046c0:	fa92 f2a2 	rbit	r2, r2
 80046c4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80046c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046c8:	fab2 f282 	clz	r2, r2
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	f042 0220 	orr.w	r2, r2, #32
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	f002 021f 	and.w	r2, r2, #31
 80046d8:	2101      	movs	r1, #1
 80046da:	fa01 f202 	lsl.w	r2, r1, r2
 80046de:	4013      	ands	r3, r2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d13a      	bne.n	800475a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0b2      	b.n	800484e <HAL_RCC_ClockConfig+0x2de>
 80046e8:	2302      	movs	r3, #2
 80046ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ee:	fa93 f3a3 	rbit	r3, r3
 80046f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80046f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f6:	fab3 f383 	clz	r3, r3
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	095b      	lsrs	r3, r3, #5
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	f043 0301 	orr.w	r3, r3, #1
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b01      	cmp	r3, #1
 8004708:	d102      	bne.n	8004710 <HAL_RCC_ClockConfig+0x1a0>
 800470a:	4b31      	ldr	r3, [pc, #196]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	e00d      	b.n	800472c <HAL_RCC_ClockConfig+0x1bc>
 8004710:	2302      	movs	r3, #2
 8004712:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004716:	fa93 f3a3 	rbit	r3, r3
 800471a:	627b      	str	r3, [r7, #36]	; 0x24
 800471c:	2302      	movs	r3, #2
 800471e:	623b      	str	r3, [r7, #32]
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	fa93 f3a3 	rbit	r3, r3
 8004726:	61fb      	str	r3, [r7, #28]
 8004728:	4b29      	ldr	r3, [pc, #164]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	2202      	movs	r2, #2
 800472e:	61ba      	str	r2, [r7, #24]
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	fa92 f2a2 	rbit	r2, r2
 8004736:	617a      	str	r2, [r7, #20]
  return result;
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	fab2 f282 	clz	r2, r2
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	f042 0220 	orr.w	r2, r2, #32
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	f002 021f 	and.w	r2, r2, #31
 800474a:	2101      	movs	r1, #1
 800474c:	fa01 f202 	lsl.w	r2, r1, r2
 8004750:	4013      	ands	r3, r2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e079      	b.n	800484e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800475a:	4b1d      	ldr	r3, [pc, #116]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f023 0203 	bic.w	r2, r3, #3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	491a      	ldr	r1, [pc, #104]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 8004768:	4313      	orrs	r3, r2
 800476a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800476c:	f7fc f916 	bl	800099c <HAL_GetTick>
 8004770:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004772:	e00a      	b.n	800478a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004774:	f7fc f912 	bl	800099c <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004782:	4293      	cmp	r3, r2
 8004784:	d901      	bls.n	800478a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e061      	b.n	800484e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800478a:	4b11      	ldr	r3, [pc, #68]	; (80047d0 <HAL_RCC_ClockConfig+0x260>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f003 020c 	and.w	r2, r3, #12
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	429a      	cmp	r2, r3
 800479a:	d1eb      	bne.n	8004774 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800479c:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <HAL_RCC_ClockConfig+0x25c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d214      	bcs.n	80047d4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047aa:	4b08      	ldr	r3, [pc, #32]	; (80047cc <HAL_RCC_ClockConfig+0x25c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f023 0207 	bic.w	r2, r3, #7
 80047b2:	4906      	ldr	r1, [pc, #24]	; (80047cc <HAL_RCC_ClockConfig+0x25c>)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ba:	4b04      	ldr	r3, [pc, #16]	; (80047cc <HAL_RCC_ClockConfig+0x25c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d005      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e040      	b.n	800484e <HAL_RCC_ClockConfig+0x2de>
 80047cc:	40022000 	.word	0x40022000
 80047d0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d008      	beq.n	80047f2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047e0:	4b1d      	ldr	r3, [pc, #116]	; (8004858 <HAL_RCC_ClockConfig+0x2e8>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	491a      	ldr	r1, [pc, #104]	; (8004858 <HAL_RCC_ClockConfig+0x2e8>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d009      	beq.n	8004812 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047fe:	4b16      	ldr	r3, [pc, #88]	; (8004858 <HAL_RCC_ClockConfig+0x2e8>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	4912      	ldr	r1, [pc, #72]	; (8004858 <HAL_RCC_ClockConfig+0x2e8>)
 800480e:	4313      	orrs	r3, r2
 8004810:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004812:	f000 f829 	bl	8004868 <HAL_RCC_GetSysClockFreq>
 8004816:	4601      	mov	r1, r0
 8004818:	4b0f      	ldr	r3, [pc, #60]	; (8004858 <HAL_RCC_ClockConfig+0x2e8>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004820:	22f0      	movs	r2, #240	; 0xf0
 8004822:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	fa92 f2a2 	rbit	r2, r2
 800482a:	60fa      	str	r2, [r7, #12]
  return result;
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	fab2 f282 	clz	r2, r2
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	40d3      	lsrs	r3, r2
 8004836:	4a09      	ldr	r2, [pc, #36]	; (800485c <HAL_RCC_ClockConfig+0x2ec>)
 8004838:	5cd3      	ldrb	r3, [r2, r3]
 800483a:	fa21 f303 	lsr.w	r3, r1, r3
 800483e:	4a08      	ldr	r2, [pc, #32]	; (8004860 <HAL_RCC_ClockConfig+0x2f0>)
 8004840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004842:	4b08      	ldr	r3, [pc, #32]	; (8004864 <HAL_RCC_ClockConfig+0x2f4>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4618      	mov	r0, r3
 8004848:	f7fc f864 	bl	8000914 <HAL_InitTick>
  
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3778      	adds	r7, #120	; 0x78
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	40021000 	.word	0x40021000
 800485c:	08009f84 	.word	0x08009f84
 8004860:	20000000 	.word	0x20000000
 8004864:	20000004 	.word	0x20000004

08004868 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004868:	b480      	push	{r7}
 800486a:	b08b      	sub	sp, #44	; 0x2c
 800486c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	61fb      	str	r3, [r7, #28]
 8004872:	2300      	movs	r3, #0
 8004874:	61bb      	str	r3, [r7, #24]
 8004876:	2300      	movs	r3, #0
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
 800487a:	2300      	movs	r3, #0
 800487c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004882:	4b29      	ldr	r3, [pc, #164]	; (8004928 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f003 030c 	and.w	r3, r3, #12
 800488e:	2b04      	cmp	r3, #4
 8004890:	d002      	beq.n	8004898 <HAL_RCC_GetSysClockFreq+0x30>
 8004892:	2b08      	cmp	r3, #8
 8004894:	d003      	beq.n	800489e <HAL_RCC_GetSysClockFreq+0x36>
 8004896:	e03c      	b.n	8004912 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004898:	4b24      	ldr	r3, [pc, #144]	; (800492c <HAL_RCC_GetSysClockFreq+0xc4>)
 800489a:	623b      	str	r3, [r7, #32]
      break;
 800489c:	e03c      	b.n	8004918 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80048a4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80048a8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	fa92 f2a2 	rbit	r2, r2
 80048b0:	607a      	str	r2, [r7, #4]
  return result;
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	fab2 f282 	clz	r2, r2
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	40d3      	lsrs	r3, r2
 80048bc:	4a1c      	ldr	r2, [pc, #112]	; (8004930 <HAL_RCC_GetSysClockFreq+0xc8>)
 80048be:	5cd3      	ldrb	r3, [r2, r3]
 80048c0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80048c2:	4b19      	ldr	r3, [pc, #100]	; (8004928 <HAL_RCC_GetSysClockFreq+0xc0>)
 80048c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	220f      	movs	r2, #15
 80048cc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	fa92 f2a2 	rbit	r2, r2
 80048d4:	60fa      	str	r2, [r7, #12]
  return result;
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	fab2 f282 	clz	r2, r2
 80048dc:	b2d2      	uxtb	r2, r2
 80048de:	40d3      	lsrs	r3, r2
 80048e0:	4a14      	ldr	r2, [pc, #80]	; (8004934 <HAL_RCC_GetSysClockFreq+0xcc>)
 80048e2:	5cd3      	ldrb	r3, [r2, r3]
 80048e4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d008      	beq.n	8004902 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80048f0:	4a0e      	ldr	r2, [pc, #56]	; (800492c <HAL_RCC_GetSysClockFreq+0xc4>)
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	fb02 f303 	mul.w	r3, r2, r3
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004900:	e004      	b.n	800490c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	4a0c      	ldr	r2, [pc, #48]	; (8004938 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004906:	fb02 f303 	mul.w	r3, r2, r3
 800490a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	623b      	str	r3, [r7, #32]
      break;
 8004910:	e002      	b.n	8004918 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004912:	4b06      	ldr	r3, [pc, #24]	; (800492c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004914:	623b      	str	r3, [r7, #32]
      break;
 8004916:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004918:	6a3b      	ldr	r3, [r7, #32]
}
 800491a:	4618      	mov	r0, r3
 800491c:	372c      	adds	r7, #44	; 0x2c
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40021000 	.word	0x40021000
 800492c:	007a1200 	.word	0x007a1200
 8004930:	08009f94 	.word	0x08009f94
 8004934:	08009fa4 	.word	0x08009fa4
 8004938:	003d0900 	.word	0x003d0900

0800493c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b092      	sub	sp, #72	; 0x48
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800494c:	2300      	movs	r3, #0
 800494e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 80d4 	beq.w	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004960:	4b4e      	ldr	r3, [pc, #312]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10e      	bne.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800496c:	4b4b      	ldr	r3, [pc, #300]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	4a4a      	ldr	r2, [pc, #296]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004976:	61d3      	str	r3, [r2, #28]
 8004978:	4b48      	ldr	r3, [pc, #288]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004980:	60bb      	str	r3, [r7, #8]
 8004982:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004984:	2301      	movs	r3, #1
 8004986:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800498a:	4b45      	ldr	r3, [pc, #276]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004992:	2b00      	cmp	r3, #0
 8004994:	d118      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004996:	4b42      	ldr	r3, [pc, #264]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a41      	ldr	r2, [pc, #260]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800499c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049a2:	f7fb fffb 	bl	800099c <HAL_GetTick>
 80049a6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a8:	e008      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049aa:	f7fb fff7 	bl	800099c <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b64      	cmp	r3, #100	; 0x64
 80049b6:	d901      	bls.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e169      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049bc:	4b38      	ldr	r3, [pc, #224]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0f0      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049c8:	4b34      	ldr	r3, [pc, #208]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 8084 	beq.w	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d07c      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049e8:	4b2c      	ldr	r3, [pc, #176]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fa:	fa93 f3a3 	rbit	r3, r3
 80049fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a02:	fab3 f383 	clz	r3, r3
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	461a      	mov	r2, r3
 8004a0a:	4b26      	ldr	r3, [pc, #152]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a0c:	4413      	add	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	461a      	mov	r2, r3
 8004a12:	2301      	movs	r3, #1
 8004a14:	6013      	str	r3, [r2, #0]
 8004a16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1e:	fa93 f3a3 	rbit	r3, r3
 8004a22:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a26:	fab3 f383 	clz	r3, r3
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	4b1d      	ldr	r3, [pc, #116]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a30:	4413      	add	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	461a      	mov	r2, r3
 8004a36:	2300      	movs	r3, #0
 8004a38:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a3a:	4a18      	ldr	r2, [pc, #96]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a3e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d04b      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4a:	f7fb ffa7 	bl	800099c <HAL_GetTick>
 8004a4e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a50:	e00a      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a52:	f7fb ffa3 	bl	800099c <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e113      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	fa93 f3a3 	rbit	r3, r3
 8004a72:	627b      	str	r3, [r7, #36]	; 0x24
 8004a74:	2302      	movs	r3, #2
 8004a76:	623b      	str	r3, [r7, #32]
 8004a78:	6a3b      	ldr	r3, [r7, #32]
 8004a7a:	fa93 f3a3 	rbit	r3, r3
 8004a7e:	61fb      	str	r3, [r7, #28]
  return result;
 8004a80:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a82:	fab3 f383 	clz	r3, r3
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	095b      	lsrs	r3, r3, #5
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	f043 0302 	orr.w	r3, r3, #2
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d108      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004a96:	4b01      	ldr	r3, [pc, #4]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	e00d      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	40007000 	.word	0x40007000
 8004aa4:	10908100 	.word	0x10908100
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	fa93 f3a3 	rbit	r3, r3
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	4b78      	ldr	r3, [pc, #480]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	2202      	movs	r2, #2
 8004aba:	613a      	str	r2, [r7, #16]
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	fa92 f2a2 	rbit	r2, r2
 8004ac2:	60fa      	str	r2, [r7, #12]
  return result;
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	fab2 f282 	clz	r2, r2
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	f002 021f 	and.w	r2, r2, #31
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8004adc:	4013      	ands	r3, r2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0b7      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004ae2:	4b6d      	ldr	r3, [pc, #436]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	496a      	ldr	r1, [pc, #424]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004af4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d105      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004afc:	4b66      	ldr	r3, [pc, #408]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	4a65      	ldr	r2, [pc, #404]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b06:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d008      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b14:	4b60      	ldr	r3, [pc, #384]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b18:	f023 0203 	bic.w	r2, r3, #3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	495d      	ldr	r1, [pc, #372]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d008      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b32:	4b59      	ldr	r3, [pc, #356]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	4956      	ldr	r1, [pc, #344]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d008      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b50:	4b51      	ldr	r3, [pc, #324]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	494e      	ldr	r1, [pc, #312]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0320 	and.w	r3, r3, #32
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d008      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b6e:	4b4a      	ldr	r3, [pc, #296]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b72:	f023 0210 	bic.w	r2, r3, #16
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	4947      	ldr	r1, [pc, #284]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d008      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004b8c:	4b42      	ldr	r3, [pc, #264]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b98:	493f      	ldr	r1, [pc, #252]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d008      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004baa:	4b3b      	ldr	r3, [pc, #236]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bae:	f023 0220 	bic.w	r2, r3, #32
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	4938      	ldr	r1, [pc, #224]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0308 	and.w	r3, r3, #8
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d008      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004bc8:	4b33      	ldr	r3, [pc, #204]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	4930      	ldr	r1, [pc, #192]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0310 	and.w	r3, r3, #16
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d008      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004be6:	4b2c      	ldr	r3, [pc, #176]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	4929      	ldr	r1, [pc, #164]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d008      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c04:	4b24      	ldr	r3, [pc, #144]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c10:	4921      	ldr	r1, [pc, #132]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d008      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c22:	4b1d      	ldr	r3, [pc, #116]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c26:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	491a      	ldr	r1, [pc, #104]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d008      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004c40:	4b15      	ldr	r3, [pc, #84]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4c:	4912      	ldr	r1, [pc, #72]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d008      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004c5e:	4b0e      	ldr	r3, [pc, #56]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6a:	490b      	ldr	r1, [pc, #44]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d008      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004c7c:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c80:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c88:	4903      	ldr	r1, [pc, #12]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3748      	adds	r7, #72	; 0x48
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	40021000 	.word	0x40021000

08004c9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e049      	b.n	8004d42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d106      	bne.n	8004cc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7fb fd4a 	bl	800075c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3304      	adds	r3, #4
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4610      	mov	r0, r2
 8004cdc:	f000 f9aa 	bl	8005034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b082      	sub	sp, #8
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e049      	b.n	8004df0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d106      	bne.n	8004d76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f841 	bl	8004df8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2202      	movs	r2, #2
 8004d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	3304      	adds	r3, #4
 8004d86:	4619      	mov	r1, r3
 8004d88:	4610      	mov	r0, r2
 8004d8a:	f000 f953 	bl	8005034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d101      	bne.n	8004e2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e26:	2302      	movs	r3, #2
 8004e28:	e0ff      	b.n	800502a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b14      	cmp	r3, #20
 8004e36:	f200 80f0 	bhi.w	800501a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e3a:	a201      	add	r2, pc, #4	; (adr r2, 8004e40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e40:	08004e95 	.word	0x08004e95
 8004e44:	0800501b 	.word	0x0800501b
 8004e48:	0800501b 	.word	0x0800501b
 8004e4c:	0800501b 	.word	0x0800501b
 8004e50:	08004ed5 	.word	0x08004ed5
 8004e54:	0800501b 	.word	0x0800501b
 8004e58:	0800501b 	.word	0x0800501b
 8004e5c:	0800501b 	.word	0x0800501b
 8004e60:	08004f17 	.word	0x08004f17
 8004e64:	0800501b 	.word	0x0800501b
 8004e68:	0800501b 	.word	0x0800501b
 8004e6c:	0800501b 	.word	0x0800501b
 8004e70:	08004f57 	.word	0x08004f57
 8004e74:	0800501b 	.word	0x0800501b
 8004e78:	0800501b 	.word	0x0800501b
 8004e7c:	0800501b 	.word	0x0800501b
 8004e80:	08004f99 	.word	0x08004f99
 8004e84:	0800501b 	.word	0x0800501b
 8004e88:	0800501b 	.word	0x0800501b
 8004e8c:	0800501b 	.word	0x0800501b
 8004e90:	08004fd9 	.word	0x08004fd9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68b9      	ldr	r1, [r7, #8]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 f95a 	bl	8005154 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699a      	ldr	r2, [r3, #24]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0208 	orr.w	r2, r2, #8
 8004eae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699a      	ldr	r2, [r3, #24]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 0204 	bic.w	r2, r2, #4
 8004ebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6999      	ldr	r1, [r3, #24]
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	691a      	ldr	r2, [r3, #16]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	619a      	str	r2, [r3, #24]
      break;
 8004ed2:	e0a5      	b.n	8005020 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68b9      	ldr	r1, [r7, #8]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 f9ca 	bl	8005274 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	699a      	ldr	r2, [r3, #24]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6999      	ldr	r1, [r3, #24]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	021a      	lsls	r2, r3, #8
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	619a      	str	r2, [r3, #24]
      break;
 8004f14:	e084      	b.n	8005020 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68b9      	ldr	r1, [r7, #8]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 fa33 	bl	8005388 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69da      	ldr	r2, [r3, #28]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f042 0208 	orr.w	r2, r2, #8
 8004f30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69da      	ldr	r2, [r3, #28]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 0204 	bic.w	r2, r2, #4
 8004f40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69d9      	ldr	r1, [r3, #28]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	691a      	ldr	r2, [r3, #16]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	61da      	str	r2, [r3, #28]
      break;
 8004f54:	e064      	b.n	8005020 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68b9      	ldr	r1, [r7, #8]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 fa9b 	bl	8005498 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69da      	ldr	r2, [r3, #28]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69da      	ldr	r2, [r3, #28]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69d9      	ldr	r1, [r3, #28]
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	021a      	lsls	r2, r3, #8
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	61da      	str	r2, [r3, #28]
      break;
 8004f96:	e043      	b.n	8005020 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68b9      	ldr	r1, [r7, #8]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 fae4 	bl	800556c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0208 	orr.w	r2, r2, #8
 8004fb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0204 	bic.w	r2, r2, #4
 8004fc2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	691a      	ldr	r2, [r3, #16]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004fd6:	e023      	b.n	8005020 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68b9      	ldr	r1, [r7, #8]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fb28 	bl	8005634 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ff2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005002:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	021a      	lsls	r2, r3, #8
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	430a      	orrs	r2, r1
 8005016:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005018:	e002      	b.n	8005020 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	75fb      	strb	r3, [r7, #23]
      break;
 800501e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005028:	7dfb      	ldrb	r3, [r7, #23]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop

08005034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a3c      	ldr	r2, [pc, #240]	; (8005138 <TIM_Base_SetConfig+0x104>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00f      	beq.n	800506c <TIM_Base_SetConfig+0x38>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005052:	d00b      	beq.n	800506c <TIM_Base_SetConfig+0x38>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a39      	ldr	r2, [pc, #228]	; (800513c <TIM_Base_SetConfig+0x108>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d007      	beq.n	800506c <TIM_Base_SetConfig+0x38>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a38      	ldr	r2, [pc, #224]	; (8005140 <TIM_Base_SetConfig+0x10c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d003      	beq.n	800506c <TIM_Base_SetConfig+0x38>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a37      	ldr	r2, [pc, #220]	; (8005144 <TIM_Base_SetConfig+0x110>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d108      	bne.n	800507e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a2d      	ldr	r2, [pc, #180]	; (8005138 <TIM_Base_SetConfig+0x104>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d01b      	beq.n	80050be <TIM_Base_SetConfig+0x8a>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508c:	d017      	beq.n	80050be <TIM_Base_SetConfig+0x8a>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a2a      	ldr	r2, [pc, #168]	; (800513c <TIM_Base_SetConfig+0x108>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d013      	beq.n	80050be <TIM_Base_SetConfig+0x8a>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a29      	ldr	r2, [pc, #164]	; (8005140 <TIM_Base_SetConfig+0x10c>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00f      	beq.n	80050be <TIM_Base_SetConfig+0x8a>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a28      	ldr	r2, [pc, #160]	; (8005144 <TIM_Base_SetConfig+0x110>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00b      	beq.n	80050be <TIM_Base_SetConfig+0x8a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a27      	ldr	r2, [pc, #156]	; (8005148 <TIM_Base_SetConfig+0x114>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d007      	beq.n	80050be <TIM_Base_SetConfig+0x8a>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a26      	ldr	r2, [pc, #152]	; (800514c <TIM_Base_SetConfig+0x118>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d003      	beq.n	80050be <TIM_Base_SetConfig+0x8a>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a25      	ldr	r2, [pc, #148]	; (8005150 <TIM_Base_SetConfig+0x11c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d108      	bne.n	80050d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	4313      	orrs	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a10      	ldr	r2, [pc, #64]	; (8005138 <TIM_Base_SetConfig+0x104>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d00f      	beq.n	800511c <TIM_Base_SetConfig+0xe8>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a11      	ldr	r2, [pc, #68]	; (8005144 <TIM_Base_SetConfig+0x110>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d00b      	beq.n	800511c <TIM_Base_SetConfig+0xe8>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a10      	ldr	r2, [pc, #64]	; (8005148 <TIM_Base_SetConfig+0x114>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d007      	beq.n	800511c <TIM_Base_SetConfig+0xe8>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a0f      	ldr	r2, [pc, #60]	; (800514c <TIM_Base_SetConfig+0x118>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d003      	beq.n	800511c <TIM_Base_SetConfig+0xe8>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a0e      	ldr	r2, [pc, #56]	; (8005150 <TIM_Base_SetConfig+0x11c>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d103      	bne.n	8005124 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	691a      	ldr	r2, [r3, #16]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	615a      	str	r2, [r3, #20]
}
 800512a:	bf00      	nop
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40012c00 	.word	0x40012c00
 800513c:	40000400 	.word	0x40000400
 8005140:	40000800 	.word	0x40000800
 8005144:	40013400 	.word	0x40013400
 8005148:	40014000 	.word	0x40014000
 800514c:	40014400 	.word	0x40014400
 8005150:	40014800 	.word	0x40014800

08005154 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	f023 0201 	bic.w	r2, r3, #1
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f023 0303 	bic.w	r3, r3, #3
 800518e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f023 0302 	bic.w	r3, r3, #2
 80051a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a2c      	ldr	r2, [pc, #176]	; (8005260 <TIM_OC1_SetConfig+0x10c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d00f      	beq.n	80051d4 <TIM_OC1_SetConfig+0x80>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a2b      	ldr	r2, [pc, #172]	; (8005264 <TIM_OC1_SetConfig+0x110>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d00b      	beq.n	80051d4 <TIM_OC1_SetConfig+0x80>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a2a      	ldr	r2, [pc, #168]	; (8005268 <TIM_OC1_SetConfig+0x114>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d007      	beq.n	80051d4 <TIM_OC1_SetConfig+0x80>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a29      	ldr	r2, [pc, #164]	; (800526c <TIM_OC1_SetConfig+0x118>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d003      	beq.n	80051d4 <TIM_OC1_SetConfig+0x80>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a28      	ldr	r2, [pc, #160]	; (8005270 <TIM_OC1_SetConfig+0x11c>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d10c      	bne.n	80051ee <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f023 0308 	bic.w	r3, r3, #8
 80051da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f023 0304 	bic.w	r3, r3, #4
 80051ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a1b      	ldr	r2, [pc, #108]	; (8005260 <TIM_OC1_SetConfig+0x10c>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d00f      	beq.n	8005216 <TIM_OC1_SetConfig+0xc2>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a1a      	ldr	r2, [pc, #104]	; (8005264 <TIM_OC1_SetConfig+0x110>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00b      	beq.n	8005216 <TIM_OC1_SetConfig+0xc2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a19      	ldr	r2, [pc, #100]	; (8005268 <TIM_OC1_SetConfig+0x114>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d007      	beq.n	8005216 <TIM_OC1_SetConfig+0xc2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a18      	ldr	r2, [pc, #96]	; (800526c <TIM_OC1_SetConfig+0x118>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d003      	beq.n	8005216 <TIM_OC1_SetConfig+0xc2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a17      	ldr	r2, [pc, #92]	; (8005270 <TIM_OC1_SetConfig+0x11c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d111      	bne.n	800523a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800521c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	4313      	orrs	r3, r2
 800522e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4313      	orrs	r3, r2
 8005238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	621a      	str	r2, [r3, #32]
}
 8005254:	bf00      	nop
 8005256:	371c      	adds	r7, #28
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	40012c00 	.word	0x40012c00
 8005264:	40013400 	.word	0x40013400
 8005268:	40014000 	.word	0x40014000
 800526c:	40014400 	.word	0x40014400
 8005270:	40014800 	.word	0x40014800

08005274 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	f023 0210 	bic.w	r2, r3, #16
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	021b      	lsls	r3, r3, #8
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f023 0320 	bic.w	r3, r3, #32
 80052c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	011b      	lsls	r3, r3, #4
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a28      	ldr	r2, [pc, #160]	; (8005374 <TIM_OC2_SetConfig+0x100>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d003      	beq.n	80052e0 <TIM_OC2_SetConfig+0x6c>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a27      	ldr	r2, [pc, #156]	; (8005378 <TIM_OC2_SetConfig+0x104>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d10d      	bne.n	80052fc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a1d      	ldr	r2, [pc, #116]	; (8005374 <TIM_OC2_SetConfig+0x100>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d00f      	beq.n	8005324 <TIM_OC2_SetConfig+0xb0>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a1c      	ldr	r2, [pc, #112]	; (8005378 <TIM_OC2_SetConfig+0x104>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d00b      	beq.n	8005324 <TIM_OC2_SetConfig+0xb0>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a1b      	ldr	r2, [pc, #108]	; (800537c <TIM_OC2_SetConfig+0x108>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d007      	beq.n	8005324 <TIM_OC2_SetConfig+0xb0>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a1a      	ldr	r2, [pc, #104]	; (8005380 <TIM_OC2_SetConfig+0x10c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d003      	beq.n	8005324 <TIM_OC2_SetConfig+0xb0>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a19      	ldr	r2, [pc, #100]	; (8005384 <TIM_OC2_SetConfig+0x110>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d113      	bne.n	800534c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800532a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005332:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	4313      	orrs	r3, r2
 800533e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4313      	orrs	r3, r2
 800534a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	621a      	str	r2, [r3, #32]
}
 8005366:	bf00      	nop
 8005368:	371c      	adds	r7, #28
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40012c00 	.word	0x40012c00
 8005378:	40013400 	.word	0x40013400
 800537c:	40014000 	.word	0x40014000
 8005380:	40014400 	.word	0x40014400
 8005384:	40014800 	.word	0x40014800

08005388 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f023 0303 	bic.w	r3, r3, #3
 80053c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	021b      	lsls	r3, r3, #8
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	4313      	orrs	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a27      	ldr	r2, [pc, #156]	; (8005484 <TIM_OC3_SetConfig+0xfc>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d003      	beq.n	80053f2 <TIM_OC3_SetConfig+0x6a>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a26      	ldr	r2, [pc, #152]	; (8005488 <TIM_OC3_SetConfig+0x100>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d10d      	bne.n	800540e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	021b      	lsls	r3, r3, #8
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	4313      	orrs	r3, r2
 8005404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800540c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a1c      	ldr	r2, [pc, #112]	; (8005484 <TIM_OC3_SetConfig+0xfc>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00f      	beq.n	8005436 <TIM_OC3_SetConfig+0xae>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a1b      	ldr	r2, [pc, #108]	; (8005488 <TIM_OC3_SetConfig+0x100>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d00b      	beq.n	8005436 <TIM_OC3_SetConfig+0xae>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a1a      	ldr	r2, [pc, #104]	; (800548c <TIM_OC3_SetConfig+0x104>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d007      	beq.n	8005436 <TIM_OC3_SetConfig+0xae>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a19      	ldr	r2, [pc, #100]	; (8005490 <TIM_OC3_SetConfig+0x108>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d003      	beq.n	8005436 <TIM_OC3_SetConfig+0xae>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a18      	ldr	r2, [pc, #96]	; (8005494 <TIM_OC3_SetConfig+0x10c>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d113      	bne.n	800545e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800543c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005444:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	011b      	lsls	r3, r3, #4
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	4313      	orrs	r3, r2
 800545c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	621a      	str	r2, [r3, #32]
}
 8005478:	bf00      	nop
 800547a:	371c      	adds	r7, #28
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	40012c00 	.word	0x40012c00
 8005488:	40013400 	.word	0x40013400
 800548c:	40014000 	.word	0x40014000
 8005490:	40014400 	.word	0x40014400
 8005494:	40014800 	.word	0x40014800

08005498 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	021b      	lsls	r3, r3, #8
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	4313      	orrs	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	031b      	lsls	r3, r3, #12
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a18      	ldr	r2, [pc, #96]	; (8005558 <TIM_OC4_SetConfig+0xc0>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d00f      	beq.n	800551c <TIM_OC4_SetConfig+0x84>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a17      	ldr	r2, [pc, #92]	; (800555c <TIM_OC4_SetConfig+0xc4>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d00b      	beq.n	800551c <TIM_OC4_SetConfig+0x84>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a16      	ldr	r2, [pc, #88]	; (8005560 <TIM_OC4_SetConfig+0xc8>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d007      	beq.n	800551c <TIM_OC4_SetConfig+0x84>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a15      	ldr	r2, [pc, #84]	; (8005564 <TIM_OC4_SetConfig+0xcc>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d003      	beq.n	800551c <TIM_OC4_SetConfig+0x84>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a14      	ldr	r2, [pc, #80]	; (8005568 <TIM_OC4_SetConfig+0xd0>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d109      	bne.n	8005530 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005522:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	019b      	lsls	r3, r3, #6
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	4313      	orrs	r3, r2
 800552e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	621a      	str	r2, [r3, #32]
}
 800554a:	bf00      	nop
 800554c:	371c      	adds	r7, #28
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	40012c00 	.word	0x40012c00
 800555c:	40013400 	.word	0x40013400
 8005560:	40014000 	.word	0x40014000
 8005564:	40014400 	.word	0x40014400
 8005568:	40014800 	.word	0x40014800

0800556c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800556c:	b480      	push	{r7}
 800556e:	b087      	sub	sp, #28
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800559a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800559e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80055b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	041b      	lsls	r3, r3, #16
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a17      	ldr	r2, [pc, #92]	; (8005620 <TIM_OC5_SetConfig+0xb4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d00f      	beq.n	80055e6 <TIM_OC5_SetConfig+0x7a>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a16      	ldr	r2, [pc, #88]	; (8005624 <TIM_OC5_SetConfig+0xb8>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00b      	beq.n	80055e6 <TIM_OC5_SetConfig+0x7a>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a15      	ldr	r2, [pc, #84]	; (8005628 <TIM_OC5_SetConfig+0xbc>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d007      	beq.n	80055e6 <TIM_OC5_SetConfig+0x7a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a14      	ldr	r2, [pc, #80]	; (800562c <TIM_OC5_SetConfig+0xc0>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d003      	beq.n	80055e6 <TIM_OC5_SetConfig+0x7a>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a13      	ldr	r2, [pc, #76]	; (8005630 <TIM_OC5_SetConfig+0xc4>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d109      	bne.n	80055fa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	021b      	lsls	r3, r3, #8
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	621a      	str	r2, [r3, #32]
}
 8005614:	bf00      	nop
 8005616:	371c      	adds	r7, #28
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	40012c00 	.word	0x40012c00
 8005624:	40013400 	.word	0x40013400
 8005628:	40014000 	.word	0x40014000
 800562c:	40014400 	.word	0x40014400
 8005630:	40014800 	.word	0x40014800

08005634 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005634:	b480      	push	{r7}
 8005636:	b087      	sub	sp, #28
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	021b      	lsls	r3, r3, #8
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4313      	orrs	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800567a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	051b      	lsls	r3, r3, #20
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	4313      	orrs	r3, r2
 8005686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a18      	ldr	r2, [pc, #96]	; (80056ec <TIM_OC6_SetConfig+0xb8>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d00f      	beq.n	80056b0 <TIM_OC6_SetConfig+0x7c>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a17      	ldr	r2, [pc, #92]	; (80056f0 <TIM_OC6_SetConfig+0xbc>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d00b      	beq.n	80056b0 <TIM_OC6_SetConfig+0x7c>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a16      	ldr	r2, [pc, #88]	; (80056f4 <TIM_OC6_SetConfig+0xc0>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d007      	beq.n	80056b0 <TIM_OC6_SetConfig+0x7c>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a15      	ldr	r2, [pc, #84]	; (80056f8 <TIM_OC6_SetConfig+0xc4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d003      	beq.n	80056b0 <TIM_OC6_SetConfig+0x7c>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a14      	ldr	r2, [pc, #80]	; (80056fc <TIM_OC6_SetConfig+0xc8>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d109      	bne.n	80056c4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	029b      	lsls	r3, r3, #10
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	621a      	str	r2, [r3, #32]
}
 80056de:	bf00      	nop
 80056e0:	371c      	adds	r7, #28
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	40012c00 	.word	0x40012c00
 80056f0:	40013400 	.word	0x40013400
 80056f4:	40014000 	.word	0x40014000
 80056f8:	40014400 	.word	0x40014400
 80056fc:	40014800 	.word	0x40014800

08005700 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800570a:	2300      	movs	r3, #0
 800570c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005718:	2302      	movs	r3, #2
 800571a:	e065      	b.n	80057e8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	4313      	orrs	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4313      	orrs	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	041b      	lsls	r3, r3, #16
 8005792:	4313      	orrs	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a16      	ldr	r2, [pc, #88]	; (80057f4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d004      	beq.n	80057aa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a14      	ldr	r2, [pc, #80]	; (80057f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d115      	bne.n	80057d6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	051b      	lsls	r3, r3, #20
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	69db      	ldr	r3, [r3, #28]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	40012c00 	.word	0x40012c00
 80057f8:	40013400 	.word	0x40013400

080057fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800580c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005810:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	b29a      	uxth	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800582a:	b480      	push	{r7}
 800582c:	b085      	sub	sp, #20
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005832:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005836:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	b29b      	uxth	r3, r3
 8005844:	43db      	mvns	r3, r3
 8005846:	b29b      	uxth	r3, r3
 8005848:	4013      	ands	r3, r2
 800584a:	b29a      	uxth	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005860:	b084      	sub	sp, #16
 8005862:	b480      	push	{r7}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	f107 0014 	add.w	r0, r7, #20
 800586e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	b004      	add	sp, #16
 80058a0:	4770      	bx	lr
	...

080058a4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b09d      	sub	sp, #116	; 0x74
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	881b      	ldrh	r3, [r3, #0]
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80058c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ca:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	78db      	ldrb	r3, [r3, #3]
 80058d2:	2b03      	cmp	r3, #3
 80058d4:	d81f      	bhi.n	8005916 <USB_ActivateEndpoint+0x72>
 80058d6:	a201      	add	r2, pc, #4	; (adr r2, 80058dc <USB_ActivateEndpoint+0x38>)
 80058d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058dc:	080058ed 	.word	0x080058ed
 80058e0:	08005909 	.word	0x08005909
 80058e4:	0800591f 	.word	0x0800591f
 80058e8:	080058fb 	.word	0x080058fb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80058ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80058f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058f4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80058f8:	e012      	b.n	8005920 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80058fa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80058fe:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005902:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005906:	e00b      	b.n	8005920 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005908:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800590c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005910:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005914:	e004      	b.n	8005920 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800591c:	e000      	b.n	8005920 <USB_ActivateEndpoint+0x7c>
      break;
 800591e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	441a      	add	r2, r3
 800592a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800592e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800593a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800593e:	b29b      	uxth	r3, r3
 8005940:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	b29b      	uxth	r3, r3
 8005950:	b21b      	sxth	r3, r3
 8005952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595a:	b21a      	sxth	r2, r3
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	b21b      	sxth	r3, r3
 8005962:	4313      	orrs	r3, r2
 8005964:	b21b      	sxth	r3, r3
 8005966:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	441a      	add	r2, r3
 8005974:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005978:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800597c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005988:	b29b      	uxth	r3, r3
 800598a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	7b1b      	ldrb	r3, [r3, #12]
 8005990:	2b00      	cmp	r3, #0
 8005992:	f040 8178 	bne.w	8005c86 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	785b      	ldrb	r3, [r3, #1]
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 8084 	beq.w	8005aa8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	61bb      	str	r3, [r7, #24]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	461a      	mov	r2, r3
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	4413      	add	r3, r2
 80059b2:	61bb      	str	r3, [r7, #24]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	011a      	lsls	r2, r3, #4
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	88db      	ldrh	r3, [r3, #6]
 80059c8:	085b      	lsrs	r3, r3, #1
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	827b      	strh	r3, [r7, #18]
 80059e2:	8a7b      	ldrh	r3, [r7, #18]
 80059e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d01b      	beq.n	8005a24 <USB_ActivateEndpoint+0x180>
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a02:	823b      	strh	r3, [r7, #16]
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	441a      	add	r2, r3
 8005a0e:	8a3b      	ldrh	r3, [r7, #16]
 8005a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	78db      	ldrb	r3, [r3, #3]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d020      	beq.n	8005a6e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a42:	81bb      	strh	r3, [r7, #12]
 8005a44:	89bb      	ldrh	r3, [r7, #12]
 8005a46:	f083 0320 	eor.w	r3, r3, #32
 8005a4a:	81bb      	strh	r3, [r7, #12]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	441a      	add	r2, r3
 8005a56:	89bb      	ldrh	r3, [r7, #12]
 8005a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	8013      	strh	r3, [r2, #0]
 8005a6c:	e2d5      	b.n	800601a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4413      	add	r3, r2
 8005a78:	881b      	ldrh	r3, [r3, #0]
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a84:	81fb      	strh	r3, [r7, #14]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	441a      	add	r2, r3
 8005a90:	89fb      	ldrh	r3, [r7, #14]
 8005a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	8013      	strh	r3, [r2, #0]
 8005aa6:	e2b8      	b.n	800601a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	633b      	str	r3, [r7, #48]	; 0x30
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab8:	4413      	add	r3, r2
 8005aba:	633b      	str	r3, [r7, #48]	; 0x30
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	011a      	lsls	r2, r3, #4
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	88db      	ldrh	r3, [r3, #6]
 8005ad0:	085b      	lsrs	r3, r3, #1
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ada:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	461a      	mov	r2, r3
 8005aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aec:	4413      	add	r3, r2
 8005aee:	62bb      	str	r3, [r7, #40]	; 0x28
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	011a      	lsls	r2, r3, #4
 8005af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af8:	4413      	add	r3, r2
 8005afa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005afe:	627b      	str	r3, [r7, #36]	; 0x24
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0e:	801a      	strh	r2, [r3, #0]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	2b3e      	cmp	r3, #62	; 0x3e
 8005b16:	d91d      	bls.n	8005b54 <USB_ActivateEndpoint+0x2b0>
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	095b      	lsrs	r3, r3, #5
 8005b1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	f003 031f 	and.w	r3, r3, #31
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d102      	bne.n	8005b32 <USB_ActivateEndpoint+0x28e>
 8005b2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	029b      	lsls	r3, r3, #10
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	4313      	orrs	r3, r2
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	801a      	strh	r2, [r3, #0]
 8005b52:	e026      	b.n	8005ba2 <USB_ActivateEndpoint+0x2fe>
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10a      	bne.n	8005b72 <USB_ActivateEndpoint+0x2ce>
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	801a      	strh	r2, [r3, #0]
 8005b70:	e017      	b.n	8005ba2 <USB_ActivateEndpoint+0x2fe>
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	085b      	lsrs	r3, r3, #1
 8005b78:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d002      	beq.n	8005b8c <USB_ActivateEndpoint+0x2e8>
 8005b86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b88:	3301      	adds	r3, #1
 8005b8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	029b      	lsls	r3, r3, #10
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	847b      	strh	r3, [r7, #34]	; 0x22
 8005bb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d01b      	beq.n	8005bf2 <USB_ActivateEndpoint+0x34e>
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd0:	843b      	strh	r3, [r7, #32]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	441a      	add	r2, r3
 8005bdc:	8c3b      	ldrh	r3, [r7, #32]
 8005bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005be6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d124      	bne.n	8005c44 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4413      	add	r3, r2
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c10:	83bb      	strh	r3, [r7, #28]
 8005c12:	8bbb      	ldrh	r3, [r7, #28]
 8005c14:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c18:	83bb      	strh	r3, [r7, #28]
 8005c1a:	8bbb      	ldrh	r3, [r7, #28]
 8005c1c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c20:	83bb      	strh	r3, [r7, #28]
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	441a      	add	r2, r3
 8005c2c:	8bbb      	ldrh	r3, [r7, #28]
 8005c2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	8013      	strh	r3, [r2, #0]
 8005c42:	e1ea      	b.n	800601a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5a:	83fb      	strh	r3, [r7, #30]
 8005c5c:	8bfb      	ldrh	r3, [r7, #30]
 8005c5e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c62:	83fb      	strh	r3, [r7, #30]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	441a      	add	r2, r3
 8005c6e:	8bfb      	ldrh	r3, [r7, #30]
 8005c70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	8013      	strh	r3, [r2, #0]
 8005c84:	e1c9      	b.n	800601a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	78db      	ldrb	r3, [r3, #3]
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d11e      	bne.n	8005ccc <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	441a      	add	r2, r3
 8005cb2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cbe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	8013      	strh	r3, [r2, #0]
 8005cca:	e01d      	b.n	8005d08 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	441a      	add	r2, r3
 8005cf0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	461a      	mov	r2, r3
 8005d16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d18:	4413      	add	r3, r2
 8005d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	011a      	lsls	r2, r3, #4
 8005d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	891b      	ldrh	r3, [r3, #8]
 8005d30:	085b      	lsrs	r3, r3, #1
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d3a:	801a      	strh	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	657b      	str	r3, [r7, #84]	; 0x54
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	461a      	mov	r2, r3
 8005d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d4c:	4413      	add	r3, r2
 8005d4e:	657b      	str	r3, [r7, #84]	; 0x54
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	011a      	lsls	r2, r3, #4
 8005d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005d5e:	653b      	str	r3, [r7, #80]	; 0x50
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	895b      	ldrh	r3, [r3, #10]
 8005d64:	085b      	lsrs	r3, r3, #1
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d6e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	785b      	ldrb	r3, [r3, #1]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f040 8093 	bne.w	8005ea0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005d8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d01b      	beq.n	8005dce <USB_ActivateEndpoint+0x52a>
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dac:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	441a      	add	r2, r3
 8005db8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	881b      	ldrh	r3, [r3, #0]
 8005dda:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005ddc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d01b      	beq.n	8005e1e <USB_ActivateEndpoint+0x57a>
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4413      	add	r3, r2
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dfc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	441a      	add	r2, r3
 8005e08:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	881b      	ldrh	r3, [r3, #0]
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e34:	873b      	strh	r3, [r7, #56]	; 0x38
 8005e36:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e38:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e3c:	873b      	strh	r3, [r7, #56]	; 0x38
 8005e3e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e40:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e44:	873b      	strh	r3, [r7, #56]	; 0x38
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	441a      	add	r2, r3
 8005e50:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e7c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	441a      	add	r2, r3
 8005e88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	8013      	strh	r3, [r2, #0]
 8005e9e:	e0bc      	b.n	800601a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005eb0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d01d      	beq.n	8005ef8 <USB_ActivateEndpoint+0x654>
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	441a      	add	r2, r3
 8005ee0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005ee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005f08:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d01d      	beq.n	8005f50 <USB_ActivateEndpoint+0x6ac>
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	441a      	add	r2, r3
 8005f38:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	78db      	ldrb	r3, [r3, #3]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d024      	beq.n	8005fa2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	881b      	ldrh	r3, [r3, #0]
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f6e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005f72:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005f76:	f083 0320 	eor.w	r3, r3, #32
 8005f7a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	441a      	add	r2, r3
 8005f88:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005f8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	8013      	strh	r3, [r2, #0]
 8005fa0:	e01d      	b.n	8005fde <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fb8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	441a      	add	r2, r3
 8005fc6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	441a      	add	r2, r3
 8006002:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800600a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800600e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006016:	b29b      	uxth	r3, r3
 8006018:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800601a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800601e:	4618      	mov	r0, r3
 8006020:	3774      	adds	r7, #116	; 0x74
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop

0800602c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800602c:	b480      	push	{r7}
 800602e:	b08d      	sub	sp, #52	; 0x34
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	7b1b      	ldrb	r3, [r3, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	f040 808e 	bne.w	800615c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	785b      	ldrb	r3, [r3, #1]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d044      	beq.n	80060d2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	81bb      	strh	r3, [r7, #12]
 8006056:	89bb      	ldrh	r3, [r7, #12]
 8006058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605c:	2b00      	cmp	r3, #0
 800605e:	d01b      	beq.n	8006098 <USB_DeactivateEndpoint+0x6c>
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	b29b      	uxth	r3, r3
 800606e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006076:	817b      	strh	r3, [r7, #10]
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	441a      	add	r2, r3
 8006082:	897b      	ldrh	r3, [r7, #10]
 8006084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800608c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006090:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006094:	b29b      	uxth	r3, r3
 8006096:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ae:	813b      	strh	r3, [r7, #8]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	441a      	add	r2, r3
 80060ba:	893b      	ldrh	r3, [r7, #8]
 80060bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	8013      	strh	r3, [r2, #0]
 80060d0:	e192      	b.n	80063f8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	827b      	strh	r3, [r7, #18]
 80060e0:	8a7b      	ldrh	r3, [r7, #18]
 80060e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d01b      	beq.n	8006122 <USB_DeactivateEndpoint+0xf6>
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006100:	823b      	strh	r3, [r7, #16]
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	441a      	add	r2, r3
 800610c:	8a3b      	ldrh	r3, [r7, #16]
 800610e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006116:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800611a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800611e:	b29b      	uxth	r3, r3
 8006120:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4413      	add	r3, r2
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	b29b      	uxth	r3, r3
 8006130:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006138:	81fb      	strh	r3, [r7, #14]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	441a      	add	r2, r3
 8006144:	89fb      	ldrh	r3, [r7, #14]
 8006146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800614a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800614e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006156:	b29b      	uxth	r3, r3
 8006158:	8013      	strh	r3, [r2, #0]
 800615a:	e14d      	b.n	80063f8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	785b      	ldrb	r3, [r3, #1]
 8006160:	2b00      	cmp	r3, #0
 8006162:	f040 80a5 	bne.w	80062b0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	843b      	strh	r3, [r7, #32]
 8006174:	8c3b      	ldrh	r3, [r7, #32]
 8006176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d01b      	beq.n	80061b6 <USB_DeactivateEndpoint+0x18a>
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	b29b      	uxth	r3, r3
 800618c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006194:	83fb      	strh	r3, [r7, #30]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	441a      	add	r2, r3
 80061a0:	8bfb      	ldrh	r3, [r7, #30]
 80061a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	83bb      	strh	r3, [r7, #28]
 80061c4:	8bbb      	ldrh	r3, [r7, #28]
 80061c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d01b      	beq.n	8006206 <USB_DeactivateEndpoint+0x1da>
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	b29b      	uxth	r3, r3
 80061dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e4:	837b      	strh	r3, [r7, #26]
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	441a      	add	r2, r3
 80061f0:	8b7b      	ldrh	r3, [r7, #26]
 80061f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006202:	b29b      	uxth	r3, r3
 8006204:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	b29b      	uxth	r3, r3
 8006214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621c:	833b      	strh	r3, [r7, #24]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	441a      	add	r2, r3
 8006228:	8b3b      	ldrh	r3, [r7, #24]
 800622a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800622e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006236:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800623a:	b29b      	uxth	r3, r3
 800623c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	b29b      	uxth	r3, r3
 800624c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006254:	82fb      	strh	r3, [r7, #22]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	441a      	add	r2, r3
 8006260:	8afb      	ldrh	r3, [r7, #22]
 8006262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800626a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800626e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006272:	b29b      	uxth	r3, r3
 8006274:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	b29b      	uxth	r3, r3
 8006284:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800628c:	82bb      	strh	r3, [r7, #20]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	441a      	add	r2, r3
 8006298:	8abb      	ldrh	r3, [r7, #20]
 800629a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800629e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	8013      	strh	r3, [r2, #0]
 80062ae:	e0a3      	b.n	80063f8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80062be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80062c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d01b      	beq.n	8006300 <USB_DeactivateEndpoint+0x2d4>
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062de:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	441a      	add	r2, r3
 80062ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80062ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800630e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006314:	2b00      	cmp	r3, #0
 8006316:	d01b      	beq.n	8006350 <USB_DeactivateEndpoint+0x324>
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	881b      	ldrh	r3, [r3, #0]
 8006324:	b29b      	uxth	r3, r3
 8006326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800632a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	441a      	add	r2, r3
 800633a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800633c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006348:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800634c:	b29b      	uxth	r3, r3
 800634e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	b29b      	uxth	r3, r3
 800635e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006366:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	441a      	add	r2, r3
 8006372:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800637c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006384:	b29b      	uxth	r3, r3
 8006386:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	b29b      	uxth	r3, r3
 8006396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800639a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800639e:	84bb      	strh	r3, [r7, #36]	; 0x24
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	441a      	add	r2, r3
 80063aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063bc:	b29b      	uxth	r3, r3
 80063be:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	881b      	ldrh	r3, [r3, #0]
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d6:	847b      	strh	r3, [r7, #34]	; 0x22
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	441a      	add	r2, r3
 80063e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80063e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3734      	adds	r7, #52	; 0x34
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b0c2      	sub	sp, #264	; 0x108
 800640a:	af00      	add	r7, sp, #0
 800640c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006410:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006414:	6018      	str	r0, [r3, #0]
 8006416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800641a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800641e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	785b      	ldrb	r3, [r3, #1]
 800642c:	2b01      	cmp	r3, #1
 800642e:	f040 86b7 	bne.w	80071a0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	699a      	ldr	r2, [r3, #24]
 800643e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	429a      	cmp	r2, r3
 800644c:	d908      	bls.n	8006460 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800644e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800645e:	e007      	b.n	8006470 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	7b1b      	ldrb	r3, [r3, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d13a      	bne.n	80064f6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6959      	ldr	r1, [r3, #20]
 800648c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	88da      	ldrh	r2, [r3, #6]
 8006498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800649c:	b29b      	uxth	r3, r3
 800649e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80064a2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80064a6:	6800      	ldr	r0, [r0, #0]
 80064a8:	f001 fc8c 	bl	8007dc4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80064ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	613b      	str	r3, [r7, #16]
 80064b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	461a      	mov	r2, r3
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	4413      	add	r3, r2
 80064ce:	613b      	str	r3, [r7, #16]
 80064d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	011a      	lsls	r2, r3, #4
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	4413      	add	r3, r2
 80064e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064e6:	60fb      	str	r3, [r7, #12]
 80064e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	801a      	strh	r2, [r3, #0]
 80064f2:	f000 be1f 	b.w	8007134 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80064f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	78db      	ldrb	r3, [r3, #3]
 8006502:	2b02      	cmp	r3, #2
 8006504:	f040 8462 	bne.w	8006dcc <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800650c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6a1a      	ldr	r2, [r3, #32]
 8006514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	429a      	cmp	r2, r3
 8006522:	f240 83df 	bls.w	8006ce4 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800652a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	b29b      	uxth	r3, r3
 8006544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800654c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006554:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800655e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	441a      	add	r2, r3
 800656a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800656e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006572:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006576:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800657a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800657e:	b29b      	uxth	r3, r3
 8006580:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6a1a      	ldr	r2, [r3, #32]
 800658e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006592:	1ad2      	subs	r2, r2, r3
 8006594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80065a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4413      	add	r3, r2
 80065ba:	881b      	ldrh	r3, [r3, #0]
 80065bc:	b29b      	uxth	r3, r3
 80065be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f000 81c7 	beq.w	8006956 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80065c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	633b      	str	r3, [r7, #48]	; 0x30
 80065d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	785b      	ldrb	r3, [r3, #1]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d177      	bne.n	80066d4 <USB_EPStartXfer+0x2ce>
 80065e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80065f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065fe:	b29b      	uxth	r3, r3
 8006600:	461a      	mov	r2, r3
 8006602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006604:	4413      	add	r3, r2
 8006606:	62bb      	str	r3, [r7, #40]	; 0x28
 8006608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800660c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	011a      	lsls	r2, r3, #4
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	4413      	add	r3, r2
 800661a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800661e:	627b      	str	r3, [r7, #36]	; 0x24
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	881b      	ldrh	r3, [r3, #0]
 8006624:	b29b      	uxth	r3, r3
 8006626:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800662a:	b29a      	uxth	r2, r3
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	801a      	strh	r2, [r3, #0]
 8006630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006634:	2b3e      	cmp	r3, #62	; 0x3e
 8006636:	d921      	bls.n	800667c <USB_EPStartXfer+0x276>
 8006638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800663c:	095b      	lsrs	r3, r3, #5
 800663e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006646:	f003 031f 	and.w	r3, r3, #31
 800664a:	2b00      	cmp	r3, #0
 800664c:	d104      	bne.n	8006658 <USB_EPStartXfer+0x252>
 800664e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006652:	3b01      	subs	r3, #1
 8006654:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	b29a      	uxth	r2, r3
 800665e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006662:	b29b      	uxth	r3, r3
 8006664:	029b      	lsls	r3, r3, #10
 8006666:	b29b      	uxth	r3, r3
 8006668:	4313      	orrs	r3, r2
 800666a:	b29b      	uxth	r3, r3
 800666c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006674:	b29a      	uxth	r2, r3
 8006676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006678:	801a      	strh	r2, [r3, #0]
 800667a:	e050      	b.n	800671e <USB_EPStartXfer+0x318>
 800667c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10a      	bne.n	800669a <USB_EPStartXfer+0x294>
 8006684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	b29b      	uxth	r3, r3
 800668a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800668e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006692:	b29a      	uxth	r2, r3
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	801a      	strh	r2, [r3, #0]
 8006698:	e041      	b.n	800671e <USB_EPStartXfer+0x318>
 800669a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800669e:	085b      	lsrs	r3, r3, #1
 80066a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80066a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a8:	f003 0301 	and.w	r3, r3, #1
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d004      	beq.n	80066ba <USB_EPStartXfer+0x2b4>
 80066b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80066b4:	3301      	adds	r3, #1
 80066b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	881b      	ldrh	r3, [r3, #0]
 80066be:	b29a      	uxth	r2, r3
 80066c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	029b      	lsls	r3, r3, #10
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	4313      	orrs	r3, r2
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d0:	801a      	strh	r2, [r3, #0]
 80066d2:	e024      	b.n	800671e <USB_EPStartXfer+0x318>
 80066d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	785b      	ldrb	r3, [r3, #1]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d11c      	bne.n	800671e <USB_EPStartXfer+0x318>
 80066e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	461a      	mov	r2, r3
 80066f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f8:	4413      	add	r3, r2
 80066fa:	633b      	str	r3, [r7, #48]	; 0x30
 80066fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	011a      	lsls	r2, r3, #4
 800670a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670c:	4413      	add	r3, r2
 800670e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006712:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006718:	b29a      	uxth	r2, r3
 800671a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800671e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	895b      	ldrh	r3, [r3, #10]
 800672a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800672e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6959      	ldr	r1, [r3, #20]
 800673a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800673e:	b29b      	uxth	r3, r3
 8006740:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006744:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006748:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800674c:	6800      	ldr	r0, [r0, #0]
 800674e:	f001 fb39 	bl	8007dc4 <USB_WritePMA>
            ep->xfer_buff += len;
 8006752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	695a      	ldr	r2, [r3, #20]
 800675e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006762:	441a      	add	r2, r3
 8006764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006774:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	6a1a      	ldr	r2, [r3, #32]
 800677c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	429a      	cmp	r2, r3
 800678a:	d90f      	bls.n	80067ac <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800678c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	6a1a      	ldr	r2, [r3, #32]
 8006798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800679c:	1ad2      	subs	r2, r2, r3
 800679e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	621a      	str	r2, [r3, #32]
 80067aa:	e00e      	b.n	80067ca <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80067ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80067bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2200      	movs	r2, #0
 80067c8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80067ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	785b      	ldrb	r3, [r3, #1]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d177      	bne.n	80068ca <USB_EPStartXfer+0x4c4>
 80067da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	61bb      	str	r3, [r7, #24]
 80067e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	461a      	mov	r2, r3
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	4413      	add	r3, r2
 80067fc:	61bb      	str	r3, [r7, #24]
 80067fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	011a      	lsls	r2, r3, #4
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	4413      	add	r3, r2
 8006810:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006814:	617b      	str	r3, [r7, #20]
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	b29b      	uxth	r3, r3
 800681c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006820:	b29a      	uxth	r2, r3
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	801a      	strh	r2, [r3, #0]
 8006826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800682a:	2b3e      	cmp	r3, #62	; 0x3e
 800682c:	d921      	bls.n	8006872 <USB_EPStartXfer+0x46c>
 800682e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006832:	095b      	lsrs	r3, r3, #5
 8006834:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006838:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800683c:	f003 031f 	and.w	r3, r3, #31
 8006840:	2b00      	cmp	r3, #0
 8006842:	d104      	bne.n	800684e <USB_EPStartXfer+0x448>
 8006844:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006848:	3b01      	subs	r3, #1
 800684a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	b29a      	uxth	r2, r3
 8006854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006858:	b29b      	uxth	r3, r3
 800685a:	029b      	lsls	r3, r3, #10
 800685c:	b29b      	uxth	r3, r3
 800685e:	4313      	orrs	r3, r2
 8006860:	b29b      	uxth	r3, r3
 8006862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800686a:	b29a      	uxth	r2, r3
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	801a      	strh	r2, [r3, #0]
 8006870:	e056      	b.n	8006920 <USB_EPStartXfer+0x51a>
 8006872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10a      	bne.n	8006890 <USB_EPStartXfer+0x48a>
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	b29b      	uxth	r3, r3
 8006880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006888:	b29a      	uxth	r2, r3
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	801a      	strh	r2, [r3, #0]
 800688e:	e047      	b.n	8006920 <USB_EPStartXfer+0x51a>
 8006890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006894:	085b      	lsrs	r3, r3, #1
 8006896:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800689a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d004      	beq.n	80068b0 <USB_EPStartXfer+0x4aa>
 80068a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068aa:	3301      	adds	r3, #1
 80068ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	881b      	ldrh	r3, [r3, #0]
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	029b      	lsls	r3, r3, #10
 80068be:	b29b      	uxth	r3, r3
 80068c0:	4313      	orrs	r3, r2
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	801a      	strh	r2, [r3, #0]
 80068c8:	e02a      	b.n	8006920 <USB_EPStartXfer+0x51a>
 80068ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	785b      	ldrb	r3, [r3, #1]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d122      	bne.n	8006920 <USB_EPStartXfer+0x51a>
 80068da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	623b      	str	r3, [r7, #32]
 80068e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	461a      	mov	r2, r3
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	4413      	add	r3, r2
 80068fc:	623b      	str	r3, [r7, #32]
 80068fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	011a      	lsls	r2, r3, #4
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	4413      	add	r3, r2
 8006910:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006914:	61fb      	str	r3, [r7, #28]
 8006916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800691a:	b29a      	uxth	r2, r3
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	891b      	ldrh	r3, [r3, #8]
 800692c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	6959      	ldr	r1, [r3, #20]
 800693c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006940:	b29b      	uxth	r3, r3
 8006942:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006946:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800694a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800694e:	6800      	ldr	r0, [r0, #0]
 8006950:	f001 fa38 	bl	8007dc4 <USB_WritePMA>
 8006954:	e3ee      	b.n	8007134 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800695a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	785b      	ldrb	r3, [r3, #1]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d177      	bne.n	8006a56 <USB_EPStartXfer+0x650>
 8006966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800696a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	64bb      	str	r3, [r7, #72]	; 0x48
 8006972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006976:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006980:	b29b      	uxth	r3, r3
 8006982:	461a      	mov	r2, r3
 8006984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006986:	4413      	add	r3, r2
 8006988:	64bb      	str	r3, [r7, #72]	; 0x48
 800698a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800698e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	011a      	lsls	r2, r3, #4
 8006998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800699a:	4413      	add	r3, r2
 800699c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069a0:	647b      	str	r3, [r7, #68]	; 0x44
 80069a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069b0:	801a      	strh	r2, [r3, #0]
 80069b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b6:	2b3e      	cmp	r3, #62	; 0x3e
 80069b8:	d921      	bls.n	80069fe <USB_EPStartXfer+0x5f8>
 80069ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069be:	095b      	lsrs	r3, r3, #5
 80069c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80069c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069c8:	f003 031f 	and.w	r3, r3, #31
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d104      	bne.n	80069da <USB_EPStartXfer+0x5d4>
 80069d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069d4:	3b01      	subs	r3, #1
 80069d6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80069da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	b29a      	uxth	r2, r3
 80069e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	029b      	lsls	r3, r3, #10
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	4313      	orrs	r3, r2
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069fa:	801a      	strh	r2, [r3, #0]
 80069fc:	e056      	b.n	8006aac <USB_EPStartXfer+0x6a6>
 80069fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10a      	bne.n	8006a1c <USB_EPStartXfer+0x616>
 8006a06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a08:	881b      	ldrh	r3, [r3, #0]
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a18:	801a      	strh	r2, [r3, #0]
 8006a1a:	e047      	b.n	8006aac <USB_EPStartXfer+0x6a6>
 8006a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a20:	085b      	lsrs	r3, r3, #1
 8006a22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d004      	beq.n	8006a3c <USB_EPStartXfer+0x636>
 8006a32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a36:	3301      	adds	r3, #1
 8006a38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	029b      	lsls	r3, r3, #10
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a52:	801a      	strh	r2, [r3, #0]
 8006a54:	e02a      	b.n	8006aac <USB_EPStartXfer+0x6a6>
 8006a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	785b      	ldrb	r3, [r3, #1]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d122      	bne.n	8006aac <USB_EPStartXfer+0x6a6>
 8006a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	653b      	str	r3, [r7, #80]	; 0x50
 8006a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	461a      	mov	r2, r3
 8006a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a86:	4413      	add	r3, r2
 8006a88:	653b      	str	r3, [r7, #80]	; 0x50
 8006a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	011a      	lsls	r2, r3, #4
 8006a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aaa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	891b      	ldrh	r3, [r3, #8]
 8006ab8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	6959      	ldr	r1, [r3, #20]
 8006ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006ad2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006ad6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006ada:	6800      	ldr	r0, [r0, #0]
 8006adc:	f001 f972 	bl	8007dc4 <USB_WritePMA>
            ep->xfer_buff += len;
 8006ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	695a      	ldr	r2, [r3, #20]
 8006aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006af0:	441a      	add	r2, r3
 8006af2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6a1a      	ldr	r2, [r3, #32]
 8006b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d90f      	bls.n	8006b3a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6a1a      	ldr	r2, [r3, #32]
 8006b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b2a:	1ad2      	subs	r2, r2, r3
 8006b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	621a      	str	r2, [r3, #32]
 8006b38:	e00e      	b.n	8006b58 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2200      	movs	r2, #0
 8006b56:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	643b      	str	r3, [r7, #64]	; 0x40
 8006b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	785b      	ldrb	r3, [r3, #1]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d177      	bne.n	8006c64 <USB_EPStartXfer+0x85e>
 8006b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	461a      	mov	r2, r3
 8006b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b94:	4413      	add	r3, r2
 8006b96:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	011a      	lsls	r2, r3, #4
 8006ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba8:	4413      	add	r3, r2
 8006baa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bae:	637b      	str	r3, [r7, #52]	; 0x34
 8006bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bbe:	801a      	strh	r2, [r3, #0]
 8006bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bc4:	2b3e      	cmp	r3, #62	; 0x3e
 8006bc6:	d921      	bls.n	8006c0c <USB_EPStartXfer+0x806>
 8006bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bcc:	095b      	lsrs	r3, r3, #5
 8006bce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd6:	f003 031f 	and.w	r3, r3, #31
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d104      	bne.n	8006be8 <USB_EPStartXfer+0x7e2>
 8006bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006be2:	3b01      	subs	r3, #1
 8006be4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	029b      	lsls	r3, r3, #10
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c08:	801a      	strh	r2, [r3, #0]
 8006c0a:	e050      	b.n	8006cae <USB_EPStartXfer+0x8a8>
 8006c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10a      	bne.n	8006c2a <USB_EPStartXfer+0x824>
 8006c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c16:	881b      	ldrh	r3, [r3, #0]
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c26:	801a      	strh	r2, [r3, #0]
 8006c28:	e041      	b.n	8006cae <USB_EPStartXfer+0x8a8>
 8006c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c2e:	085b      	lsrs	r3, r3, #1
 8006c30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c38:	f003 0301 	and.w	r3, r3, #1
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d004      	beq.n	8006c4a <USB_EPStartXfer+0x844>
 8006c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c44:	3301      	adds	r3, #1
 8006c46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c4c:	881b      	ldrh	r3, [r3, #0]
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	029b      	lsls	r3, r3, #10
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c60:	801a      	strh	r2, [r3, #0]
 8006c62:	e024      	b.n	8006cae <USB_EPStartXfer+0x8a8>
 8006c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	785b      	ldrb	r3, [r3, #1]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d11c      	bne.n	8006cae <USB_EPStartXfer+0x8a8>
 8006c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	461a      	mov	r2, r3
 8006c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c88:	4413      	add	r3, r2
 8006c8a:	643b      	str	r3, [r7, #64]	; 0x40
 8006c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	011a      	lsls	r2, r3, #4
 8006c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	895b      	ldrh	r3, [r3, #10]
 8006cba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6959      	ldr	r1, [r3, #20]
 8006cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006cd4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006cd8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006cdc:	6800      	ldr	r0, [r0, #0]
 8006cde:	f001 f871 	bl	8007dc4 <USB_WritePMA>
 8006ce2:	e227      	b.n	8007134 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	6a1b      	ldr	r3, [r3, #32]
 8006cf0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	4413      	add	r3, r2
 8006d0e:	881b      	ldrh	r3, [r3, #0]
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d1a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	441a      	add	r2, r3
 8006d38:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006d3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d70:	4413      	add	r3, r2
 8006d72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	011a      	lsls	r2, r3, #4
 8006d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d84:	4413      	add	r3, r2
 8006d86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d94:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	891b      	ldrh	r3, [r3, #8]
 8006da2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006daa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6959      	ldr	r1, [r3, #20]
 8006db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006dbc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006dc0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006dc4:	6800      	ldr	r0, [r0, #0]
 8006dc6:	f000 fffd 	bl	8007dc4 <USB_WritePMA>
 8006dca:	e1b3      	b.n	8007134 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	6a1a      	ldr	r2, [r3, #32]
 8006dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ddc:	1ad2      	subs	r2, r2, r3
 8006dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f000 80c6 	beq.w	8006f9e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	673b      	str	r3, [r7, #112]	; 0x70
 8006e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	785b      	ldrb	r3, [r3, #1]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d177      	bne.n	8006f1e <USB_EPStartXfer+0xb18>
 8006e2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e4e:	4413      	add	r3, r2
 8006e50:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	011a      	lsls	r2, r3, #4
 8006e60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e62:	4413      	add	r3, r2
 8006e64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e68:	667b      	str	r3, [r7, #100]	; 0x64
 8006e6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e78:	801a      	strh	r2, [r3, #0]
 8006e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e7e:	2b3e      	cmp	r3, #62	; 0x3e
 8006e80:	d921      	bls.n	8006ec6 <USB_EPStartXfer+0xac0>
 8006e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e86:	095b      	lsrs	r3, r3, #5
 8006e88:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e90:	f003 031f 	and.w	r3, r3, #31
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d104      	bne.n	8006ea2 <USB_EPStartXfer+0xa9c>
 8006e98:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ea2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	029b      	lsls	r3, r3, #10
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ec2:	801a      	strh	r2, [r3, #0]
 8006ec4:	e050      	b.n	8006f68 <USB_EPStartXfer+0xb62>
 8006ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10a      	bne.n	8006ee4 <USB_EPStartXfer+0xade>
 8006ece:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ee0:	801a      	strh	r2, [r3, #0]
 8006ee2:	e041      	b.n	8006f68 <USB_EPStartXfer+0xb62>
 8006ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ee8:	085b      	lsrs	r3, r3, #1
 8006eea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d004      	beq.n	8006f04 <USB_EPStartXfer+0xafe>
 8006efa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006efe:	3301      	adds	r3, #1
 8006f00:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	029b      	lsls	r3, r3, #10
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	4313      	orrs	r3, r2
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f1a:	801a      	strh	r2, [r3, #0]
 8006f1c:	e024      	b.n	8006f68 <USB_EPStartXfer+0xb62>
 8006f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	785b      	ldrb	r3, [r3, #1]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d11c      	bne.n	8006f68 <USB_EPStartXfer+0xb62>
 8006f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	461a      	mov	r2, r3
 8006f40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f42:	4413      	add	r3, r2
 8006f44:	673b      	str	r3, [r7, #112]	; 0x70
 8006f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	011a      	lsls	r2, r3, #4
 8006f54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f56:	4413      	add	r3, r2
 8006f58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f66:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	895b      	ldrh	r3, [r3, #10]
 8006f74:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6959      	ldr	r1, [r3, #20]
 8006f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f8e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006f92:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006f96:	6800      	ldr	r0, [r0, #0]
 8006f98:	f000 ff14 	bl	8007dc4 <USB_WritePMA>
 8006f9c:	e0ca      	b.n	8007134 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	785b      	ldrb	r3, [r3, #1]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d177      	bne.n	800709e <USB_EPStartXfer+0xc98>
 8006fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	461a      	mov	r2, r3
 8006fcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006fce:	4413      	add	r3, r2
 8006fd0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	011a      	lsls	r2, r3, #4
 8006fe0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006fe8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fec:	881b      	ldrh	r3, [r3, #0]
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ff8:	801a      	strh	r2, [r3, #0]
 8006ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ffe:	2b3e      	cmp	r3, #62	; 0x3e
 8007000:	d921      	bls.n	8007046 <USB_EPStartXfer+0xc40>
 8007002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007006:	095b      	lsrs	r3, r3, #5
 8007008:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800700c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007010:	f003 031f 	and.w	r3, r3, #31
 8007014:	2b00      	cmp	r3, #0
 8007016:	d104      	bne.n	8007022 <USB_EPStartXfer+0xc1c>
 8007018:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800701c:	3b01      	subs	r3, #1
 800701e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007022:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	b29a      	uxth	r2, r3
 8007028:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800702c:	b29b      	uxth	r3, r3
 800702e:	029b      	lsls	r3, r3, #10
 8007030:	b29b      	uxth	r3, r3
 8007032:	4313      	orrs	r3, r2
 8007034:	b29b      	uxth	r3, r3
 8007036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800703a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800703e:	b29a      	uxth	r2, r3
 8007040:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007042:	801a      	strh	r2, [r3, #0]
 8007044:	e05c      	b.n	8007100 <USB_EPStartXfer+0xcfa>
 8007046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10a      	bne.n	8007064 <USB_EPStartXfer+0xc5e>
 800704e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	b29b      	uxth	r3, r3
 8007054:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007058:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800705c:	b29a      	uxth	r2, r3
 800705e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007060:	801a      	strh	r2, [r3, #0]
 8007062:	e04d      	b.n	8007100 <USB_EPStartXfer+0xcfa>
 8007064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007068:	085b      	lsrs	r3, r3, #1
 800706a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800706e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	2b00      	cmp	r3, #0
 8007078:	d004      	beq.n	8007084 <USB_EPStartXfer+0xc7e>
 800707a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800707e:	3301      	adds	r3, #1
 8007080:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007084:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	b29a      	uxth	r2, r3
 800708a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800708e:	b29b      	uxth	r3, r3
 8007090:	029b      	lsls	r3, r3, #10
 8007092:	b29b      	uxth	r3, r3
 8007094:	4313      	orrs	r3, r2
 8007096:	b29a      	uxth	r2, r3
 8007098:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800709a:	801a      	strh	r2, [r3, #0]
 800709c:	e030      	b.n	8007100 <USB_EPStartXfer+0xcfa>
 800709e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	785b      	ldrb	r3, [r3, #1]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d128      	bne.n	8007100 <USB_EPStartXfer+0xcfa>
 80070ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80070bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	461a      	mov	r2, r3
 80070ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070d2:	4413      	add	r3, r2
 80070d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80070d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	011a      	lsls	r2, r3, #4
 80070e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070ea:	4413      	add	r3, r2
 80070ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80070fe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	891b      	ldrh	r3, [r3, #8]
 800710c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6959      	ldr	r1, [r3, #20]
 800711c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007120:	b29b      	uxth	r3, r3
 8007122:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007126:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800712a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800712e:	6800      	ldr	r0, [r0, #0]
 8007130:	f000 fe48 	bl	8007dc4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007138:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	4413      	add	r3, r2
 800714e:	881b      	ldrh	r3, [r3, #0]
 8007150:	b29b      	uxth	r3, r3
 8007152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800715a:	817b      	strh	r3, [r7, #10]
 800715c:	897b      	ldrh	r3, [r7, #10]
 800715e:	f083 0310 	eor.w	r3, r3, #16
 8007162:	817b      	strh	r3, [r7, #10]
 8007164:	897b      	ldrh	r3, [r7, #10]
 8007166:	f083 0320 	eor.w	r3, r3, #32
 800716a:	817b      	strh	r3, [r7, #10]
 800716c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007170:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800717a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	441a      	add	r2, r3
 8007186:	897b      	ldrh	r3, [r7, #10]
 8007188:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800718c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007198:	b29b      	uxth	r3, r3
 800719a:	8013      	strh	r3, [r2, #0]
 800719c:	f000 bcde 	b.w	8007b5c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80071a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	7b1b      	ldrb	r3, [r3, #12]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f040 80bb 	bne.w	8007328 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80071b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	699a      	ldr	r2, [r3, #24]
 80071be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d917      	bls.n	80071fe <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80071ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80071de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	699a      	ldr	r2, [r3, #24]
 80071ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ee:	1ad2      	subs	r2, r2, r3
 80071f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	619a      	str	r2, [r3, #24]
 80071fc:	e00e      	b.n	800721c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80071fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007202:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800720e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2200      	movs	r2, #0
 800721a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800721c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007220:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800722a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800722e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007238:	b29b      	uxth	r3, r3
 800723a:	461a      	mov	r2, r3
 800723c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007240:	4413      	add	r3, r2
 8007242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800724a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	011a      	lsls	r2, r3, #4
 8007254:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007258:	4413      	add	r3, r2
 800725a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800725e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007262:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007266:	881b      	ldrh	r3, [r3, #0]
 8007268:	b29b      	uxth	r3, r3
 800726a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800726e:	b29a      	uxth	r2, r3
 8007270:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007274:	801a      	strh	r2, [r3, #0]
 8007276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800727a:	2b3e      	cmp	r3, #62	; 0x3e
 800727c:	d924      	bls.n	80072c8 <USB_EPStartXfer+0xec2>
 800727e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007282:	095b      	lsrs	r3, r3, #5
 8007284:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800728c:	f003 031f 	and.w	r3, r3, #31
 8007290:	2b00      	cmp	r3, #0
 8007292:	d104      	bne.n	800729e <USB_EPStartXfer+0xe98>
 8007294:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007298:	3b01      	subs	r3, #1
 800729a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800729e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072a2:	881b      	ldrh	r3, [r3, #0]
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	029b      	lsls	r3, r3, #10
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	4313      	orrs	r3, r2
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072bc:	b29a      	uxth	r2, r3
 80072be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072c2:	801a      	strh	r2, [r3, #0]
 80072c4:	f000 bc10 	b.w	8007ae8 <USB_EPStartXfer+0x16e2>
 80072c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10c      	bne.n	80072ea <USB_EPStartXfer+0xee4>
 80072d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072e6:	801a      	strh	r2, [r3, #0]
 80072e8:	e3fe      	b.n	8007ae8 <USB_EPStartXfer+0x16e2>
 80072ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ee:	085b      	lsrs	r3, r3, #1
 80072f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80072f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072f8:	f003 0301 	and.w	r3, r3, #1
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d004      	beq.n	800730a <USB_EPStartXfer+0xf04>
 8007300:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007304:	3301      	adds	r3, #1
 8007306:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800730a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	b29a      	uxth	r2, r3
 8007312:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007316:	b29b      	uxth	r3, r3
 8007318:	029b      	lsls	r3, r3, #10
 800731a:	b29b      	uxth	r3, r3
 800731c:	4313      	orrs	r3, r2
 800731e:	b29a      	uxth	r2, r3
 8007320:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007324:	801a      	strh	r2, [r3, #0]
 8007326:	e3df      	b.n	8007ae8 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800732c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	78db      	ldrb	r3, [r3, #3]
 8007334:	2b02      	cmp	r3, #2
 8007336:	f040 8218 	bne.w	800776a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800733a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800733e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	785b      	ldrb	r3, [r3, #1]
 8007346:	2b00      	cmp	r3, #0
 8007348:	f040 809d 	bne.w	8007486 <USB_EPStartXfer+0x1080>
 800734c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007350:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800735a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800735e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007368:	b29b      	uxth	r3, r3
 800736a:	461a      	mov	r2, r3
 800736c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007370:	4413      	add	r3, r2
 8007372:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800737a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	011a      	lsls	r2, r3, #4
 8007384:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007388:	4413      	add	r3, r2
 800738a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800738e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007392:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	b29b      	uxth	r3, r3
 800739a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800739e:	b29a      	uxth	r2, r3
 80073a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80073a4:	801a      	strh	r2, [r3, #0]
 80073a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	2b3e      	cmp	r3, #62	; 0x3e
 80073b4:	d92b      	bls.n	800740e <USB_EPStartXfer+0x1008>
 80073b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	095b      	lsrs	r3, r3, #5
 80073c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	f003 031f 	and.w	r3, r3, #31
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d104      	bne.n	80073e6 <USB_EPStartXfer+0xfe0>
 80073dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e0:	3b01      	subs	r3, #1
 80073e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80073ea:	881b      	ldrh	r3, [r3, #0]
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	029b      	lsls	r3, r3, #10
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	4313      	orrs	r3, r2
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007404:	b29a      	uxth	r2, r3
 8007406:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800740a:	801a      	strh	r2, [r3, #0]
 800740c:	e070      	b.n	80074f0 <USB_EPStartXfer+0x10ea>
 800740e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10c      	bne.n	8007438 <USB_EPStartXfer+0x1032>
 800741e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007422:	881b      	ldrh	r3, [r3, #0]
 8007424:	b29b      	uxth	r3, r3
 8007426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800742a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800742e:	b29a      	uxth	r2, r3
 8007430:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007434:	801a      	strh	r2, [r3, #0]
 8007436:	e05b      	b.n	80074f0 <USB_EPStartXfer+0x10ea>
 8007438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800743c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	085b      	lsrs	r3, r3, #1
 8007446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800744a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800744e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b00      	cmp	r3, #0
 800745c:	d004      	beq.n	8007468 <USB_EPStartXfer+0x1062>
 800745e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007462:	3301      	adds	r3, #1
 8007464:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007468:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800746c:	881b      	ldrh	r3, [r3, #0]
 800746e:	b29a      	uxth	r2, r3
 8007470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007474:	b29b      	uxth	r3, r3
 8007476:	029b      	lsls	r3, r3, #10
 8007478:	b29b      	uxth	r3, r3
 800747a:	4313      	orrs	r3, r2
 800747c:	b29a      	uxth	r2, r3
 800747e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007482:	801a      	strh	r2, [r3, #0]
 8007484:	e034      	b.n	80074f0 <USB_EPStartXfer+0x10ea>
 8007486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800748a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	785b      	ldrb	r3, [r3, #1]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d12c      	bne.n	80074f0 <USB_EPStartXfer+0x10ea>
 8007496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800749a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	461a      	mov	r2, r3
 80074b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80074ba:	4413      	add	r3, r2
 80074bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	011a      	lsls	r2, r3, #4
 80074ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80074d2:	4413      	add	r3, r2
 80074d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80074ee:	801a      	strh	r2, [r3, #0]
 80074f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80074fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	785b      	ldrb	r3, [r3, #1]
 800750a:	2b00      	cmp	r3, #0
 800750c:	f040 809d 	bne.w	800764a <USB_EPStartXfer+0x1244>
 8007510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007514:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800751e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007522:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800752c:	b29b      	uxth	r3, r3
 800752e:	461a      	mov	r2, r3
 8007530:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007534:	4413      	add	r3, r2
 8007536:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800753a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800753e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	011a      	lsls	r2, r3, #4
 8007548:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800754c:	4413      	add	r3, r2
 800754e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007552:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007556:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800755a:	881b      	ldrh	r3, [r3, #0]
 800755c:	b29b      	uxth	r3, r3
 800755e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007562:	b29a      	uxth	r2, r3
 8007564:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007568:	801a      	strh	r2, [r3, #0]
 800756a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800756e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	2b3e      	cmp	r3, #62	; 0x3e
 8007578:	d92b      	bls.n	80075d2 <USB_EPStartXfer+0x11cc>
 800757a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800757e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	095b      	lsrs	r3, r3, #5
 8007588:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800758c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	f003 031f 	and.w	r3, r3, #31
 800759c:	2b00      	cmp	r3, #0
 800759e:	d104      	bne.n	80075aa <USB_EPStartXfer+0x11a4>
 80075a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075a4:	3b01      	subs	r3, #1
 80075a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075ae:	881b      	ldrh	r3, [r3, #0]
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	029b      	lsls	r3, r3, #10
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	4313      	orrs	r3, r2
 80075be:	b29b      	uxth	r3, r3
 80075c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075ce:	801a      	strh	r2, [r3, #0]
 80075d0:	e069      	b.n	80076a6 <USB_EPStartXfer+0x12a0>
 80075d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10c      	bne.n	80075fc <USB_EPStartXfer+0x11f6>
 80075e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075e6:	881b      	ldrh	r3, [r3, #0]
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075f8:	801a      	strh	r2, [r3, #0]
 80075fa:	e054      	b.n	80076a6 <USB_EPStartXfer+0x12a0>
 80075fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	085b      	lsrs	r3, r3, #1
 800760a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800760e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	f003 0301 	and.w	r3, r3, #1
 800761e:	2b00      	cmp	r3, #0
 8007620:	d004      	beq.n	800762c <USB_EPStartXfer+0x1226>
 8007622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007626:	3301      	adds	r3, #1
 8007628:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800762c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007630:	881b      	ldrh	r3, [r3, #0]
 8007632:	b29a      	uxth	r2, r3
 8007634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007638:	b29b      	uxth	r3, r3
 800763a:	029b      	lsls	r3, r3, #10
 800763c:	b29b      	uxth	r3, r3
 800763e:	4313      	orrs	r3, r2
 8007640:	b29a      	uxth	r2, r3
 8007642:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007646:	801a      	strh	r2, [r3, #0]
 8007648:	e02d      	b.n	80076a6 <USB_EPStartXfer+0x12a0>
 800764a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800764e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	785b      	ldrb	r3, [r3, #1]
 8007656:	2b01      	cmp	r3, #1
 8007658:	d125      	bne.n	80076a6 <USB_EPStartXfer+0x12a0>
 800765a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800765e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007668:	b29b      	uxth	r3, r3
 800766a:	461a      	mov	r2, r3
 800766c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007670:	4413      	add	r3, r2
 8007672:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800767a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	011a      	lsls	r2, r3, #4
 8007684:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007688:	4413      	add	r3, r2
 800768a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800768e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	b29a      	uxth	r2, r3
 80076a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80076a4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80076a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f000 8218 	beq.w	8007ae8 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80076b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	881b      	ldrh	r3, [r3, #0]
 80076d4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80076d8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80076dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d005      	beq.n	80076f0 <USB_EPStartXfer+0x12ea>
 80076e4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80076e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d10d      	bne.n	800770c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80076f0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80076f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f040 81f5 	bne.w	8007ae8 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80076fe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007706:	2b00      	cmp	r3, #0
 8007708:	f040 81ee 	bne.w	8007ae8 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800770c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007710:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800771a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	b29b      	uxth	r3, r3
 800772a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800772e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007732:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800773a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	441a      	add	r2, r3
 8007750:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007754:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007758:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800775c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007760:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007764:	b29b      	uxth	r3, r3
 8007766:	8013      	strh	r3, [r2, #0]
 8007768:	e1be      	b.n	8007ae8 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800776a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800776e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	78db      	ldrb	r3, [r3, #3]
 8007776:	2b01      	cmp	r3, #1
 8007778:	f040 81b4 	bne.w	8007ae4 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800777c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	699a      	ldr	r2, [r3, #24]
 8007788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800778c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	429a      	cmp	r2, r3
 8007796:	d917      	bls.n	80077c8 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800779c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80077a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	699a      	ldr	r2, [r3, #24]
 80077b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077b8:	1ad2      	subs	r2, r2, r3
 80077ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	619a      	str	r2, [r3, #24]
 80077c6:	e00e      	b.n	80077e6 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80077c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	699b      	ldr	r3, [r3, #24]
 80077d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80077d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2200      	movs	r2, #0
 80077e4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80077e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	785b      	ldrb	r3, [r3, #1]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f040 8085 	bne.w	8007902 <USB_EPStartXfer+0x14fc>
 80077f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800780a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007814:	b29b      	uxth	r3, r3
 8007816:	461a      	mov	r2, r3
 8007818:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800781c:	4413      	add	r3, r2
 800781e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	011a      	lsls	r2, r3, #4
 8007830:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007834:	4413      	add	r3, r2
 8007836:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800783a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800783e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007842:	881b      	ldrh	r3, [r3, #0]
 8007844:	b29b      	uxth	r3, r3
 8007846:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800784a:	b29a      	uxth	r2, r3
 800784c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007850:	801a      	strh	r2, [r3, #0]
 8007852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007856:	2b3e      	cmp	r3, #62	; 0x3e
 8007858:	d923      	bls.n	80078a2 <USB_EPStartXfer+0x149c>
 800785a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800785e:	095b      	lsrs	r3, r3, #5
 8007860:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007868:	f003 031f 	and.w	r3, r3, #31
 800786c:	2b00      	cmp	r3, #0
 800786e:	d104      	bne.n	800787a <USB_EPStartXfer+0x1474>
 8007870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007874:	3b01      	subs	r3, #1
 8007876:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800787a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800787e:	881b      	ldrh	r3, [r3, #0]
 8007880:	b29a      	uxth	r2, r3
 8007882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007886:	b29b      	uxth	r3, r3
 8007888:	029b      	lsls	r3, r3, #10
 800788a:	b29b      	uxth	r3, r3
 800788c:	4313      	orrs	r3, r2
 800788e:	b29b      	uxth	r3, r3
 8007890:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007894:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007898:	b29a      	uxth	r2, r3
 800789a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800789e:	801a      	strh	r2, [r3, #0]
 80078a0:	e060      	b.n	8007964 <USB_EPStartXfer+0x155e>
 80078a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10c      	bne.n	80078c4 <USB_EPStartXfer+0x14be>
 80078aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078ae:	881b      	ldrh	r3, [r3, #0]
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078c0:	801a      	strh	r2, [r3, #0]
 80078c2:	e04f      	b.n	8007964 <USB_EPStartXfer+0x155e>
 80078c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078c8:	085b      	lsrs	r3, r3, #1
 80078ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80078ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d004      	beq.n	80078e4 <USB_EPStartXfer+0x14de>
 80078da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078de:	3301      	adds	r3, #1
 80078e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80078e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078e8:	881b      	ldrh	r3, [r3, #0]
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	029b      	lsls	r3, r3, #10
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	4313      	orrs	r3, r2
 80078f8:	b29a      	uxth	r2, r3
 80078fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078fe:	801a      	strh	r2, [r3, #0]
 8007900:	e030      	b.n	8007964 <USB_EPStartXfer+0x155e>
 8007902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007906:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	785b      	ldrb	r3, [r3, #1]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d128      	bne.n	8007964 <USB_EPStartXfer+0x155e>
 8007912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007916:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007924:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800792e:	b29b      	uxth	r3, r3
 8007930:	461a      	mov	r2, r3
 8007932:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007936:	4413      	add	r3, r2
 8007938:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800793c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	011a      	lsls	r2, r3, #4
 800794a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800794e:	4413      	add	r3, r2
 8007950:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007954:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800795c:	b29a      	uxth	r2, r3
 800795e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007962:	801a      	strh	r2, [r3, #0]
 8007964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007968:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	785b      	ldrb	r3, [r3, #1]
 800797e:	2b00      	cmp	r3, #0
 8007980:	f040 8085 	bne.w	8007a8e <USB_EPStartXfer+0x1688>
 8007984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007988:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007996:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	461a      	mov	r2, r3
 80079a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80079a8:	4413      	add	r3, r2
 80079aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80079ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	011a      	lsls	r2, r3, #4
 80079bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80079c0:	4413      	add	r3, r2
 80079c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079ce:	881b      	ldrh	r3, [r3, #0]
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079dc:	801a      	strh	r2, [r3, #0]
 80079de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079e2:	2b3e      	cmp	r3, #62	; 0x3e
 80079e4:	d923      	bls.n	8007a2e <USB_EPStartXfer+0x1628>
 80079e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ea:	095b      	lsrs	r3, r3, #5
 80079ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079f4:	f003 031f 	and.w	r3, r3, #31
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d104      	bne.n	8007a06 <USB_EPStartXfer+0x1600>
 80079fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a00:	3b01      	subs	r3, #1
 8007a02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a0a:	881b      	ldrh	r3, [r3, #0]
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	029b      	lsls	r3, r3, #10
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a2a:	801a      	strh	r2, [r3, #0]
 8007a2c:	e05c      	b.n	8007ae8 <USB_EPStartXfer+0x16e2>
 8007a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10c      	bne.n	8007a50 <USB_EPStartXfer+0x164a>
 8007a36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a3a:	881b      	ldrh	r3, [r3, #0]
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a4c:	801a      	strh	r2, [r3, #0]
 8007a4e:	e04b      	b.n	8007ae8 <USB_EPStartXfer+0x16e2>
 8007a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a54:	085b      	lsrs	r3, r3, #1
 8007a56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a5e:	f003 0301 	and.w	r3, r3, #1
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d004      	beq.n	8007a70 <USB_EPStartXfer+0x166a>
 8007a66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a74:	881b      	ldrh	r3, [r3, #0]
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	029b      	lsls	r3, r3, #10
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	4313      	orrs	r3, r2
 8007a84:	b29a      	uxth	r2, r3
 8007a86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a8a:	801a      	strh	r2, [r3, #0]
 8007a8c:	e02c      	b.n	8007ae8 <USB_EPStartXfer+0x16e2>
 8007a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	785b      	ldrb	r3, [r3, #1]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d124      	bne.n	8007ae8 <USB_EPStartXfer+0x16e2>
 8007a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	461a      	mov	r2, r3
 8007ab0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007aba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007abe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	011a      	lsls	r2, r3, #4
 8007ac8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007acc:	4413      	add	r3, r2
 8007ace:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ad2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007ae0:	801a      	strh	r2, [r3, #0]
 8007ae2:	e001      	b.n	8007ae8 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e03a      	b.n	8007b5e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007af6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	4413      	add	r3, r2
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b0e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007b12:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007b16:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b1a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007b1e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007b22:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b26:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	441a      	add	r2, r3
 8007b44:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007b48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	785b      	ldrb	r3, [r3, #1]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d020      	beq.n	8007bbc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4413      	add	r3, r2
 8007b84:	881b      	ldrh	r3, [r3, #0]
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b90:	81bb      	strh	r3, [r7, #12]
 8007b92:	89bb      	ldrh	r3, [r7, #12]
 8007b94:	f083 0310 	eor.w	r3, r3, #16
 8007b98:	81bb      	strh	r3, [r7, #12]
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	441a      	add	r2, r3
 8007ba4:	89bb      	ldrh	r3, [r7, #12]
 8007ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	8013      	strh	r3, [r2, #0]
 8007bba:	e01f      	b.n	8007bfc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	881b      	ldrh	r3, [r3, #0]
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bd2:	81fb      	strh	r3, [r7, #14]
 8007bd4:	89fb      	ldrh	r3, [r7, #14]
 8007bd6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007bda:	81fb      	strh	r3, [r7, #14]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	441a      	add	r2, r3
 8007be6:	89fb      	ldrh	r3, [r7, #14]
 8007be8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3714      	adds	r7, #20
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b087      	sub	sp, #28
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	7b1b      	ldrb	r3, [r3, #12]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f040 809d 	bne.w	8007d58 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	785b      	ldrb	r3, [r3, #1]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d04c      	beq.n	8007cc0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	4413      	add	r3, r2
 8007c30:	881b      	ldrh	r3, [r3, #0]
 8007c32:	823b      	strh	r3, [r7, #16]
 8007c34:	8a3b      	ldrh	r3, [r7, #16]
 8007c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d01b      	beq.n	8007c76 <USB_EPClearStall+0x6c>
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	4413      	add	r3, r2
 8007c48:	881b      	ldrh	r3, [r3, #0]
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c54:	81fb      	strh	r3, [r7, #14]
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	441a      	add	r2, r3
 8007c60:	89fb      	ldrh	r3, [r7, #14]
 8007c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	78db      	ldrb	r3, [r3, #3]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d06c      	beq.n	8007d58 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	4413      	add	r3, r2
 8007c88:	881b      	ldrh	r3, [r3, #0]
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c94:	81bb      	strh	r3, [r7, #12]
 8007c96:	89bb      	ldrh	r3, [r7, #12]
 8007c98:	f083 0320 	eor.w	r3, r3, #32
 8007c9c:	81bb      	strh	r3, [r7, #12]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	441a      	add	r2, r3
 8007ca8:	89bb      	ldrh	r3, [r7, #12]
 8007caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	8013      	strh	r3, [r2, #0]
 8007cbe:	e04b      	b.n	8007d58 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	4413      	add	r3, r2
 8007cca:	881b      	ldrh	r3, [r3, #0]
 8007ccc:	82fb      	strh	r3, [r7, #22]
 8007cce:	8afb      	ldrh	r3, [r7, #22]
 8007cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d01b      	beq.n	8007d10 <USB_EPClearStall+0x106>
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4413      	add	r3, r2
 8007ce2:	881b      	ldrh	r3, [r3, #0]
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cee:	82bb      	strh	r3, [r7, #20]
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	441a      	add	r2, r3
 8007cfa:	8abb      	ldrh	r3, [r7, #20]
 8007cfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	881b      	ldrh	r3, [r3, #0]
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d26:	827b      	strh	r3, [r7, #18]
 8007d28:	8a7b      	ldrh	r3, [r7, #18]
 8007d2a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007d2e:	827b      	strh	r3, [r7, #18]
 8007d30:	8a7b      	ldrh	r3, [r7, #18]
 8007d32:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007d36:	827b      	strh	r3, [r7, #18]
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	441a      	add	r2, r3
 8007d42:	8a7b      	ldrh	r3, [r7, #18]
 8007d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	371c      	adds	r7, #28
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b083      	sub	sp, #12
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	460b      	mov	r3, r1
 8007d70:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007d72:	78fb      	ldrb	r3, [r7, #3]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d103      	bne.n	8007d80 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2280      	movs	r2, #128	; 0x80
 8007d7c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b083      	sub	sp, #12
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007db6:	68fb      	ldr	r3, [r7, #12]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3714      	adds	r7, #20
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b08b      	sub	sp, #44	; 0x2c
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	4611      	mov	r1, r2
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	80fb      	strh	r3, [r7, #6]
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007dda:	88bb      	ldrh	r3, [r7, #4]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	085b      	lsrs	r3, r3, #1
 8007de0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007dea:	88fb      	ldrh	r3, [r7, #6]
 8007dec:	005a      	lsls	r2, r3, #1
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	4413      	add	r3, r2
 8007df2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007df6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8007dfc:	e01e      	b.n	8007e3c <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	3301      	adds	r3, #1
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	021b      	lsls	r3, r3, #8
 8007e0c:	b21a      	sxth	r2, r3
 8007e0e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	b21b      	sxth	r3, r3
 8007e16:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007e18:	6a3b      	ldr	r3, [r7, #32]
 8007e1a:	8a7a      	ldrh	r2, [r7, #18]
 8007e1c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007e1e:	6a3b      	ldr	r3, [r7, #32]
 8007e20:	3302      	adds	r3, #2
 8007e22:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007e24:	6a3b      	ldr	r3, [r7, #32]
 8007e26:	3302      	adds	r3, #2
 8007e28:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	3301      	adds	r3, #1
 8007e34:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1dd      	bne.n	8007dfe <USB_WritePMA+0x3a>
  }
}
 8007e42:	bf00      	nop
 8007e44:	bf00      	nop
 8007e46:	372c      	adds	r7, #44	; 0x2c
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b08b      	sub	sp, #44	; 0x2c
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	4611      	mov	r1, r2
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	460b      	mov	r3, r1
 8007e60:	80fb      	strh	r3, [r7, #6]
 8007e62:	4613      	mov	r3, r2
 8007e64:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007e66:	88bb      	ldrh	r3, [r7, #4]
 8007e68:	085b      	lsrs	r3, r3, #1
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e76:	88fb      	ldrh	r3, [r7, #6]
 8007e78:	005a      	lsls	r2, r3, #1
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e82:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	627b      	str	r3, [r7, #36]	; 0x24
 8007e88:	e01b      	b.n	8007ec2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007e8a:	6a3b      	ldr	r3, [r7, #32]
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007e92:	6a3b      	ldr	r3, [r7, #32]
 8007e94:	3302      	adds	r3, #2
 8007e96:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	0a1b      	lsrs	r3, r3, #8
 8007eaa:	b2da      	uxtb	r2, r3
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007eb6:	6a3b      	ldr	r3, [r7, #32]
 8007eb8:	3302      	adds	r3, #2
 8007eba:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1e0      	bne.n	8007e8a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007ec8:	88bb      	ldrh	r3, [r7, #4]
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d007      	beq.n	8007ee4 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007ed4:	6a3b      	ldr	r3, [r7, #32]
 8007ed6:	881b      	ldrh	r3, [r3, #0]
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	b2da      	uxtb	r2, r3
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	701a      	strb	r2, [r3, #0]
  }
}
 8007ee4:	bf00      	nop
 8007ee6:	372c      	adds	r7, #44	; 0x2c
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007efc:	2300      	movs	r3, #0
 8007efe:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	7c1b      	ldrb	r3, [r3, #16]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d115      	bne.n	8007f34 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f0c:	2202      	movs	r2, #2
 8007f0e:	2181      	movs	r1, #129	; 0x81
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f001 fe62 	bl	8009bda <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f20:	2202      	movs	r2, #2
 8007f22:	2101      	movs	r1, #1
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f001 fe58 	bl	8009bda <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007f32:	e012      	b.n	8007f5a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f34:	2340      	movs	r3, #64	; 0x40
 8007f36:	2202      	movs	r2, #2
 8007f38:	2181      	movs	r1, #129	; 0x81
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f001 fe4d 	bl	8009bda <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f46:	2340      	movs	r3, #64	; 0x40
 8007f48:	2202      	movs	r2, #2
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f001 fe44 	bl	8009bda <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007f5a:	2308      	movs	r3, #8
 8007f5c:	2203      	movs	r2, #3
 8007f5e:	2182      	movs	r1, #130	; 0x82
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f001 fe3a 	bl	8009bda <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007f6c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007f70:	f001 ff5c 	bl	8009e2c <USBD_static_malloc>
 8007f74:	4602      	mov	r2, r0
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d102      	bne.n	8007f8c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007f86:	2301      	movs	r3, #1
 8007f88:	73fb      	strb	r3, [r7, #15]
 8007f8a:	e026      	b.n	8007fda <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f92:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	7c1b      	ldrb	r3, [r3, #16]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d109      	bne.n	8007fca <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fc0:	2101      	movs	r1, #1
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f001 fefb 	bl	8009dbe <USBD_LL_PrepareReceive>
 8007fc8:	e007      	b.n	8007fda <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fd0:	2340      	movs	r3, #64	; 0x40
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f001 fef2 	bl	8009dbe <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	460b      	mov	r3, r1
 8007fee:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007ff4:	2181      	movs	r1, #129	; 0x81
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f001 fe15 	bl	8009c26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008002:	2101      	movs	r1, #1
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f001 fe0e 	bl	8009c26 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008012:	2182      	movs	r1, #130	; 0x82
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f001 fe06 	bl	8009c26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00e      	beq.n	8008048 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800803a:	4618      	mov	r0, r3
 800803c:	f001 ff04 	bl	8009e48 <USBD_static_free>
    pdev->pClassData = NULL;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008048:	7bfb      	ldrb	r3, [r7, #15]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b086      	sub	sp, #24
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
 800805a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008062:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008064:	2300      	movs	r3, #0
 8008066:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008068:	2300      	movs	r3, #0
 800806a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800806c:	2300      	movs	r3, #0
 800806e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008078:	2b00      	cmp	r3, #0
 800807a:	d039      	beq.n	80080f0 <USBD_CDC_Setup+0x9e>
 800807c:	2b20      	cmp	r3, #32
 800807e:	d17f      	bne.n	8008180 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	88db      	ldrh	r3, [r3, #6]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d029      	beq.n	80080dc <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	b25b      	sxtb	r3, r3
 800808e:	2b00      	cmp	r3, #0
 8008090:	da11      	bge.n	80080b6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	683a      	ldr	r2, [r7, #0]
 800809c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800809e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080a0:	683a      	ldr	r2, [r7, #0]
 80080a2:	88d2      	ldrh	r2, [r2, #6]
 80080a4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80080a6:	6939      	ldr	r1, [r7, #16]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	88db      	ldrh	r3, [r3, #6]
 80080ac:	461a      	mov	r2, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f001 f9e3 	bl	800947a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80080b4:	e06b      	b.n	800818e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	785a      	ldrb	r2, [r3, #1]
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	88db      	ldrh	r3, [r3, #6]
 80080c4:	b2da      	uxtb	r2, r3
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80080cc:	6939      	ldr	r1, [r7, #16]
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	88db      	ldrh	r3, [r3, #6]
 80080d2:	461a      	mov	r2, r3
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f001 f9fe 	bl	80094d6 <USBD_CtlPrepareRx>
      break;
 80080da:	e058      	b.n	800818e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	683a      	ldr	r2, [r7, #0]
 80080e6:	7850      	ldrb	r0, [r2, #1]
 80080e8:	2200      	movs	r2, #0
 80080ea:	6839      	ldr	r1, [r7, #0]
 80080ec:	4798      	blx	r3
      break;
 80080ee:	e04e      	b.n	800818e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	785b      	ldrb	r3, [r3, #1]
 80080f4:	2b0b      	cmp	r3, #11
 80080f6:	d02e      	beq.n	8008156 <USBD_CDC_Setup+0x104>
 80080f8:	2b0b      	cmp	r3, #11
 80080fa:	dc38      	bgt.n	800816e <USBD_CDC_Setup+0x11c>
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d002      	beq.n	8008106 <USBD_CDC_Setup+0xb4>
 8008100:	2b0a      	cmp	r3, #10
 8008102:	d014      	beq.n	800812e <USBD_CDC_Setup+0xdc>
 8008104:	e033      	b.n	800816e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800810c:	2b03      	cmp	r3, #3
 800810e:	d107      	bne.n	8008120 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008110:	f107 030c 	add.w	r3, r7, #12
 8008114:	2202      	movs	r2, #2
 8008116:	4619      	mov	r1, r3
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f001 f9ae 	bl	800947a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800811e:	e02e      	b.n	800817e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008120:	6839      	ldr	r1, [r7, #0]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f001 f93e 	bl	80093a4 <USBD_CtlError>
            ret = USBD_FAIL;
 8008128:	2302      	movs	r3, #2
 800812a:	75fb      	strb	r3, [r7, #23]
          break;
 800812c:	e027      	b.n	800817e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008134:	2b03      	cmp	r3, #3
 8008136:	d107      	bne.n	8008148 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008138:	f107 030f 	add.w	r3, r7, #15
 800813c:	2201      	movs	r2, #1
 800813e:	4619      	mov	r1, r3
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f001 f99a 	bl	800947a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008146:	e01a      	b.n	800817e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008148:	6839      	ldr	r1, [r7, #0]
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f001 f92a 	bl	80093a4 <USBD_CtlError>
            ret = USBD_FAIL;
 8008150:	2302      	movs	r3, #2
 8008152:	75fb      	strb	r3, [r7, #23]
          break;
 8008154:	e013      	b.n	800817e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800815c:	2b03      	cmp	r3, #3
 800815e:	d00d      	beq.n	800817c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008160:	6839      	ldr	r1, [r7, #0]
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f001 f91e 	bl	80093a4 <USBD_CtlError>
            ret = USBD_FAIL;
 8008168:	2302      	movs	r3, #2
 800816a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800816c:	e006      	b.n	800817c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f001 f917 	bl	80093a4 <USBD_CtlError>
          ret = USBD_FAIL;
 8008176:	2302      	movs	r3, #2
 8008178:	75fb      	strb	r3, [r7, #23]
          break;
 800817a:	e000      	b.n	800817e <USBD_CDC_Setup+0x12c>
          break;
 800817c:	bf00      	nop
      }
      break;
 800817e:	e006      	b.n	800818e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008180:	6839      	ldr	r1, [r7, #0]
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f001 f90e 	bl	80093a4 <USBD_CtlError>
      ret = USBD_FAIL;
 8008188:	2302      	movs	r3, #2
 800818a:	75fb      	strb	r3, [r7, #23]
      break;
 800818c:	bf00      	nop
  }

  return ret;
 800818e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008190:	4618      	mov	r0, r3
 8008192:	3718      	adds	r7, #24
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	460b      	mov	r3, r1
 80081a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081aa:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081b2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d03a      	beq.n	8008234 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80081be:	78fa      	ldrb	r2, [r7, #3]
 80081c0:	6879      	ldr	r1, [r7, #4]
 80081c2:	4613      	mov	r3, r2
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	4413      	add	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	440b      	add	r3, r1
 80081cc:	331c      	adds	r3, #28
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d029      	beq.n	8008228 <USBD_CDC_DataIn+0x90>
 80081d4:	78fa      	ldrb	r2, [r7, #3]
 80081d6:	6879      	ldr	r1, [r7, #4]
 80081d8:	4613      	mov	r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	4413      	add	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	440b      	add	r3, r1
 80081e2:	331c      	adds	r3, #28
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	78f9      	ldrb	r1, [r7, #3]
 80081e8:	68b8      	ldr	r0, [r7, #8]
 80081ea:	460b      	mov	r3, r1
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	440b      	add	r3, r1
 80081f0:	00db      	lsls	r3, r3, #3
 80081f2:	4403      	add	r3, r0
 80081f4:	3338      	adds	r3, #56	; 0x38
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80081fc:	fb01 f303 	mul.w	r3, r1, r3
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	2b00      	cmp	r3, #0
 8008204:	d110      	bne.n	8008228 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008206:	78fa      	ldrb	r2, [r7, #3]
 8008208:	6879      	ldr	r1, [r7, #4]
 800820a:	4613      	mov	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	4413      	add	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	440b      	add	r3, r1
 8008214:	331c      	adds	r3, #28
 8008216:	2200      	movs	r2, #0
 8008218:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800821a:	78f9      	ldrb	r1, [r7, #3]
 800821c:	2300      	movs	r3, #0
 800821e:	2200      	movs	r2, #0
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f001 fda9 	bl	8009d78 <USBD_LL_Transmit>
 8008226:	e003      	b.n	8008230 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2200      	movs	r2, #0
 800822c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008230:	2300      	movs	r3, #0
 8008232:	e000      	b.n	8008236 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008234:	2302      	movs	r3, #2
  }
}
 8008236:	4618      	mov	r0, r3
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b084      	sub	sp, #16
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	460b      	mov	r3, r1
 8008248:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008250:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008252:	78fb      	ldrb	r3, [r7, #3]
 8008254:	4619      	mov	r1, r3
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f001 fdd4 	bl	8009e04 <USBD_LL_GetRxDataSize>
 800825c:	4602      	mov	r2, r0
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00d      	beq.n	800828a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008282:	4611      	mov	r1, r2
 8008284:	4798      	blx	r3

    return USBD_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	e000      	b.n	800828c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800828a:	2302      	movs	r3, #2
  }
}
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082a2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d015      	beq.n	80082da <USBD_CDC_EP0_RxReady+0x46>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80082b4:	2bff      	cmp	r3, #255	; 0xff
 80082b6:	d010      	beq.n	80082da <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80082c6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80082ce:	b292      	uxth	r2, r2
 80082d0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	22ff      	movs	r2, #255	; 0xff
 80082d6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3710      	adds	r7, #16
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2243      	movs	r2, #67	; 0x43
 80082f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80082f2:	4b03      	ldr	r3, [pc, #12]	; (8008300 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr
 8008300:	20000094 	.word	0x20000094

08008304 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2243      	movs	r2, #67	; 0x43
 8008310:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008312:	4b03      	ldr	r3, [pc, #12]	; (8008320 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008314:	4618      	mov	r0, r3
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr
 8008320:	20000050 	.word	0x20000050

08008324 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2243      	movs	r2, #67	; 0x43
 8008330:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008332:	4b03      	ldr	r3, [pc, #12]	; (8008340 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008334:	4618      	mov	r0, r3
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr
 8008340:	200000d8 	.word	0x200000d8

08008344 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	220a      	movs	r2, #10
 8008350:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008352:	4b03      	ldr	r3, [pc, #12]	; (8008360 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008354:	4618      	mov	r0, r3
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr
 8008360:	2000000c 	.word	0x2000000c

08008364 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800836e:	2302      	movs	r3, #2
 8008370:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d005      	beq.n	8008384 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	683a      	ldr	r2, [r7, #0]
 800837c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008380:	2300      	movs	r3, #0
 8008382:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008384:	7bfb      	ldrb	r3, [r7, #15]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3714      	adds	r7, #20
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008392:	b480      	push	{r7}
 8008394:	b087      	sub	sp, #28
 8008396:	af00      	add	r7, sp, #0
 8008398:	60f8      	str	r0, [r7, #12]
 800839a:	60b9      	str	r1, [r7, #8]
 800839c:	4613      	mov	r3, r2
 800839e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80083b0:	88fa      	ldrh	r2, [r7, #6]
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	371c      	adds	r7, #28
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr

080083c6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80083c6:	b480      	push	{r7}
 80083c8:	b085      	sub	sp, #20
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
 80083ce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	683a      	ldr	r2, [r7, #0]
 80083dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3714      	adds	r7, #20
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr

080083ee <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b084      	sub	sp, #16
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083fc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008404:	2b00      	cmp	r3, #0
 8008406:	d017      	beq.n	8008438 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	7c1b      	ldrb	r3, [r3, #16]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d109      	bne.n	8008424 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008416:	f44f 7300 	mov.w	r3, #512	; 0x200
 800841a:	2101      	movs	r1, #1
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f001 fcce 	bl	8009dbe <USBD_LL_PrepareReceive>
 8008422:	e007      	b.n	8008434 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800842a:	2340      	movs	r3, #64	; 0x40
 800842c:	2101      	movs	r1, #1
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f001 fcc5 	bl	8009dbe <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008434:	2300      	movs	r3, #0
 8008436:	e000      	b.n	800843a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008438:	2302      	movs	r3, #2
  }
}
 800843a:	4618      	mov	r0, r3
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b084      	sub	sp, #16
 8008446:	af00      	add	r7, sp, #0
 8008448:	60f8      	str	r0, [r7, #12]
 800844a:	60b9      	str	r1, [r7, #8]
 800844c:	4613      	mov	r3, r2
 800844e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d101      	bne.n	800845a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008456:	2302      	movs	r3, #2
 8008458:	e01a      	b.n	8008490 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008460:	2b00      	cmp	r3, #0
 8008462:	d003      	beq.n	800846c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d003      	beq.n	800847a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	68ba      	ldr	r2, [r7, #8]
 8008476:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2201      	movs	r2, #1
 800847e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	79fa      	ldrb	r2, [r7, #7]
 8008486:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f001 fb31 	bl	8009af0 <USBD_LL_Init>

  return USBD_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d006      	beq.n	80084ba <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80084b4:	2300      	movs	r3, #0
 80084b6:	73fb      	strb	r3, [r7, #15]
 80084b8:	e001      	b.n	80084be <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80084ba:	2302      	movs	r3, #2
 80084bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80084be:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f001 fb65 	bl	8009ba4 <USBD_LL_Start>

  return USBD_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b084      	sub	sp, #16
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
 8008502:	460b      	mov	r3, r1
 8008504:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008506:	2302      	movs	r3, #2
 8008508:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00c      	beq.n	800852e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	78fa      	ldrb	r2, [r7, #3]
 800851e:	4611      	mov	r1, r2
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	4798      	blx	r3
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d101      	bne.n	800852e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800852a:	2300      	movs	r3, #0
 800852c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800852e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008530:	4618      	mov	r0, r3
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	460b      	mov	r3, r1
 8008542:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	78fa      	ldrb	r2, [r7, #3]
 800854e:	4611      	mov	r1, r2
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	4798      	blx	r3

  return USBD_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b082      	sub	sp, #8
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
 8008566:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	4618      	mov	r0, r3
 8008572:	f000 feda 	bl	800932a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008584:	461a      	mov	r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008592:	f003 031f 	and.w	r3, r3, #31
 8008596:	2b02      	cmp	r3, #2
 8008598:	d016      	beq.n	80085c8 <USBD_LL_SetupStage+0x6a>
 800859a:	2b02      	cmp	r3, #2
 800859c:	d81c      	bhi.n	80085d8 <USBD_LL_SetupStage+0x7a>
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d002      	beq.n	80085a8 <USBD_LL_SetupStage+0x4a>
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d008      	beq.n	80085b8 <USBD_LL_SetupStage+0x5a>
 80085a6:	e017      	b.n	80085d8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80085ae:	4619      	mov	r1, r3
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f9cd 	bl	8008950 <USBD_StdDevReq>
      break;
 80085b6:	e01a      	b.n	80085ee <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80085be:	4619      	mov	r1, r3
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 fa2f 	bl	8008a24 <USBD_StdItfReq>
      break;
 80085c6:	e012      	b.n	80085ee <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80085ce:	4619      	mov	r1, r3
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 fa6f 	bl	8008ab4 <USBD_StdEPReq>
      break;
 80085d6:	e00a      	b.n	80085ee <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80085de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	4619      	mov	r1, r3
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f001 fb3c 	bl	8009c64 <USBD_LL_StallEP>
      break;
 80085ec:	bf00      	nop
  }

  return USBD_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3708      	adds	r7, #8
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	460b      	mov	r3, r1
 8008602:	607a      	str	r2, [r7, #4]
 8008604:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008606:	7afb      	ldrb	r3, [r7, #11]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d14b      	bne.n	80086a4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008612:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800861a:	2b03      	cmp	r3, #3
 800861c:	d134      	bne.n	8008688 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	68da      	ldr	r2, [r3, #12]
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	429a      	cmp	r2, r3
 8008628:	d919      	bls.n	800865e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	68da      	ldr	r2, [r3, #12]
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	1ad2      	subs	r2, r2, r3
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	68da      	ldr	r2, [r3, #12]
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008640:	429a      	cmp	r2, r3
 8008642:	d203      	bcs.n	800864c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008648:	b29b      	uxth	r3, r3
 800864a:	e002      	b.n	8008652 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008650:	b29b      	uxth	r3, r3
 8008652:	461a      	mov	r2, r3
 8008654:	6879      	ldr	r1, [r7, #4]
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f000 ff5b 	bl	8009512 <USBD_CtlContinueRx>
 800865c:	e038      	b.n	80086d0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00a      	beq.n	8008680 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008670:	2b03      	cmp	r3, #3
 8008672:	d105      	bne.n	8008680 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f000 ff58 	bl	8009536 <USBD_CtlSendStatus>
 8008686:	e023      	b.n	80086d0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800868e:	2b05      	cmp	r3, #5
 8008690:	d11e      	bne.n	80086d0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2200      	movs	r2, #0
 8008696:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800869a:	2100      	movs	r1, #0
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f001 fae1 	bl	8009c64 <USBD_LL_StallEP>
 80086a2:	e015      	b.n	80086d0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086aa:	699b      	ldr	r3, [r3, #24]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00d      	beq.n	80086cc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80086b6:	2b03      	cmp	r3, #3
 80086b8:	d108      	bne.n	80086cc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	7afa      	ldrb	r2, [r7, #11]
 80086c4:	4611      	mov	r1, r2
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	4798      	blx	r3
 80086ca:	e001      	b.n	80086d0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80086cc:	2302      	movs	r3, #2
 80086ce:	e000      	b.n	80086d2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3718      	adds	r7, #24
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b086      	sub	sp, #24
 80086de:	af00      	add	r7, sp, #0
 80086e0:	60f8      	str	r0, [r7, #12]
 80086e2:	460b      	mov	r3, r1
 80086e4:	607a      	str	r2, [r7, #4]
 80086e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80086e8:	7afb      	ldrb	r3, [r7, #11]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d17f      	bne.n	80087ee <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	3314      	adds	r3, #20
 80086f2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d15c      	bne.n	80087b8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	68da      	ldr	r2, [r3, #12]
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	429a      	cmp	r2, r3
 8008708:	d915      	bls.n	8008736 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	68da      	ldr	r2, [r3, #12]
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	1ad2      	subs	r2, r2, r3
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	b29b      	uxth	r3, r3
 800871e:	461a      	mov	r2, r3
 8008720:	6879      	ldr	r1, [r7, #4]
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f000 fec5 	bl	80094b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008728:	2300      	movs	r3, #0
 800872a:	2200      	movs	r2, #0
 800872c:	2100      	movs	r1, #0
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f001 fb45 	bl	8009dbe <USBD_LL_PrepareReceive>
 8008734:	e04e      	b.n	80087d4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	697a      	ldr	r2, [r7, #20]
 800873c:	6912      	ldr	r2, [r2, #16]
 800873e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008742:	fb01 f202 	mul.w	r2, r1, r2
 8008746:	1a9b      	subs	r3, r3, r2
 8008748:	2b00      	cmp	r3, #0
 800874a:	d11c      	bne.n	8008786 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	689a      	ldr	r2, [r3, #8]
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008754:	429a      	cmp	r2, r3
 8008756:	d316      	bcc.n	8008786 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	689a      	ldr	r2, [r3, #8]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008762:	429a      	cmp	r2, r3
 8008764:	d20f      	bcs.n	8008786 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008766:	2200      	movs	r2, #0
 8008768:	2100      	movs	r1, #0
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f000 fea1 	bl	80094b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008778:	2300      	movs	r3, #0
 800877a:	2200      	movs	r2, #0
 800877c:	2100      	movs	r1, #0
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	f001 fb1d 	bl	8009dbe <USBD_LL_PrepareReceive>
 8008784:	e026      	b.n	80087d4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00a      	beq.n	80087a8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008798:	2b03      	cmp	r3, #3
 800879a:	d105      	bne.n	80087a8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80087a8:	2180      	movs	r1, #128	; 0x80
 80087aa:	68f8      	ldr	r0, [r7, #12]
 80087ac:	f001 fa5a 	bl	8009c64 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f000 fed3 	bl	800955c <USBD_CtlReceiveStatus>
 80087b6:	e00d      	b.n	80087d4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087be:	2b04      	cmp	r3, #4
 80087c0:	d004      	beq.n	80087cc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d103      	bne.n	80087d4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80087cc:	2180      	movs	r1, #128	; 0x80
 80087ce:	68f8      	ldr	r0, [r7, #12]
 80087d0:	f001 fa48 	bl	8009c64 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d11d      	bne.n	800881a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f7ff fe80 	bl	80084e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80087ec:	e015      	b.n	800881a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00d      	beq.n	8008816 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008800:	2b03      	cmp	r3, #3
 8008802:	d108      	bne.n	8008816 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800880a:	695b      	ldr	r3, [r3, #20]
 800880c:	7afa      	ldrb	r2, [r7, #11]
 800880e:	4611      	mov	r1, r2
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	4798      	blx	r3
 8008814:	e001      	b.n	800881a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008816:	2302      	movs	r3, #2
 8008818:	e000      	b.n	800881c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3718      	adds	r7, #24
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800882c:	2340      	movs	r3, #64	; 0x40
 800882e:	2200      	movs	r2, #0
 8008830:	2100      	movs	r1, #0
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f001 f9d1 	bl	8009bda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2240      	movs	r2, #64	; 0x40
 8008844:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008848:	2340      	movs	r3, #64	; 0x40
 800884a:	2200      	movs	r2, #0
 800884c:	2180      	movs	r1, #128	; 0x80
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f001 f9c3 	bl	8009bda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2240      	movs	r2, #64	; 0x40
 800885e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008884:	2b00      	cmp	r3, #0
 8008886:	d009      	beq.n	800889c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	6852      	ldr	r2, [r2, #4]
 8008894:	b2d2      	uxtb	r2, r2
 8008896:	4611      	mov	r1, r2
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	4798      	blx	r3
  }

  return USBD_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80088a6:	b480      	push	{r7}
 80088a8:	b083      	sub	sp, #12
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	460b      	mov	r3, r1
 80088b0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	78fa      	ldrb	r2, [r7, #3]
 80088b6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	370c      	adds	r7, #12
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr

080088c6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80088c6:	b480      	push	{r7}
 80088c8:	b083      	sub	sp, #12
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2204      	movs	r2, #4
 80088de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088fe:	2b04      	cmp	r3, #4
 8008900:	d105      	bne.n	800890e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800892a:	2b03      	cmp	r3, #3
 800892c:	d10b      	bne.n	8008946 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008934:	69db      	ldr	r3, [r3, #28]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d005      	beq.n	8008946 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008940:	69db      	ldr	r3, [r3, #28]
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800895a:	2300      	movs	r3, #0
 800895c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008966:	2b40      	cmp	r3, #64	; 0x40
 8008968:	d005      	beq.n	8008976 <USBD_StdDevReq+0x26>
 800896a:	2b40      	cmp	r3, #64	; 0x40
 800896c:	d84f      	bhi.n	8008a0e <USBD_StdDevReq+0xbe>
 800896e:	2b00      	cmp	r3, #0
 8008970:	d009      	beq.n	8008986 <USBD_StdDevReq+0x36>
 8008972:	2b20      	cmp	r3, #32
 8008974:	d14b      	bne.n	8008a0e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	6839      	ldr	r1, [r7, #0]
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	4798      	blx	r3
      break;
 8008984:	e048      	b.n	8008a18 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	785b      	ldrb	r3, [r3, #1]
 800898a:	2b09      	cmp	r3, #9
 800898c:	d839      	bhi.n	8008a02 <USBD_StdDevReq+0xb2>
 800898e:	a201      	add	r2, pc, #4	; (adr r2, 8008994 <USBD_StdDevReq+0x44>)
 8008990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008994:	080089e5 	.word	0x080089e5
 8008998:	080089f9 	.word	0x080089f9
 800899c:	08008a03 	.word	0x08008a03
 80089a0:	080089ef 	.word	0x080089ef
 80089a4:	08008a03 	.word	0x08008a03
 80089a8:	080089c7 	.word	0x080089c7
 80089ac:	080089bd 	.word	0x080089bd
 80089b0:	08008a03 	.word	0x08008a03
 80089b4:	080089db 	.word	0x080089db
 80089b8:	080089d1 	.word	0x080089d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80089bc:	6839      	ldr	r1, [r7, #0]
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 f9dc 	bl	8008d7c <USBD_GetDescriptor>
          break;
 80089c4:	e022      	b.n	8008a0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80089c6:	6839      	ldr	r1, [r7, #0]
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fb3f 	bl	800904c <USBD_SetAddress>
          break;
 80089ce:	e01d      	b.n	8008a0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fb7e 	bl	80090d4 <USBD_SetConfig>
          break;
 80089d8:	e018      	b.n	8008a0c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80089da:	6839      	ldr	r1, [r7, #0]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fc07 	bl	80091f0 <USBD_GetConfig>
          break;
 80089e2:	e013      	b.n	8008a0c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80089e4:	6839      	ldr	r1, [r7, #0]
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 fc37 	bl	800925a <USBD_GetStatus>
          break;
 80089ec:	e00e      	b.n	8008a0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 fc65 	bl	80092c0 <USBD_SetFeature>
          break;
 80089f6:	e009      	b.n	8008a0c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80089f8:	6839      	ldr	r1, [r7, #0]
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fc74 	bl	80092e8 <USBD_ClrFeature>
          break;
 8008a00:	e004      	b.n	8008a0c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008a02:	6839      	ldr	r1, [r7, #0]
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 fccd 	bl	80093a4 <USBD_CtlError>
          break;
 8008a0a:	bf00      	nop
      }
      break;
 8008a0c:	e004      	b.n	8008a18 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008a0e:	6839      	ldr	r1, [r7, #0]
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fcc7 	bl	80093a4 <USBD_CtlError>
      break;
 8008a16:	bf00      	nop
  }

  return ret;
 8008a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop

08008a24 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a3a:	2b40      	cmp	r3, #64	; 0x40
 8008a3c:	d005      	beq.n	8008a4a <USBD_StdItfReq+0x26>
 8008a3e:	2b40      	cmp	r3, #64	; 0x40
 8008a40:	d82e      	bhi.n	8008aa0 <USBD_StdItfReq+0x7c>
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d001      	beq.n	8008a4a <USBD_StdItfReq+0x26>
 8008a46:	2b20      	cmp	r3, #32
 8008a48:	d12a      	bne.n	8008aa0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a50:	3b01      	subs	r3, #1
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d81d      	bhi.n	8008a92 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	889b      	ldrh	r3, [r3, #4]
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d813      	bhi.n	8008a88 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	4798      	blx	r3
 8008a6e:	4603      	mov	r3, r0
 8008a70:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	88db      	ldrh	r3, [r3, #6]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d110      	bne.n	8008a9c <USBD_StdItfReq+0x78>
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d10d      	bne.n	8008a9c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fd58 	bl	8009536 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a86:	e009      	b.n	8008a9c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008a88:	6839      	ldr	r1, [r7, #0]
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fc8a 	bl	80093a4 <USBD_CtlError>
          break;
 8008a90:	e004      	b.n	8008a9c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fc85 	bl	80093a4 <USBD_CtlError>
          break;
 8008a9a:	e000      	b.n	8008a9e <USBD_StdItfReq+0x7a>
          break;
 8008a9c:	bf00      	nop
      }
      break;
 8008a9e:	e004      	b.n	8008aaa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fc7e 	bl	80093a4 <USBD_CtlError>
      break;
 8008aa8:	bf00      	nop
  }

  return USBD_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3710      	adds	r7, #16
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	889b      	ldrh	r3, [r3, #4]
 8008ac6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ad0:	2b40      	cmp	r3, #64	; 0x40
 8008ad2:	d007      	beq.n	8008ae4 <USBD_StdEPReq+0x30>
 8008ad4:	2b40      	cmp	r3, #64	; 0x40
 8008ad6:	f200 8146 	bhi.w	8008d66 <USBD_StdEPReq+0x2b2>
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00a      	beq.n	8008af4 <USBD_StdEPReq+0x40>
 8008ade:	2b20      	cmp	r3, #32
 8008ae0:	f040 8141 	bne.w	8008d66 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	6839      	ldr	r1, [r7, #0]
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	4798      	blx	r3
      break;
 8008af2:	e13d      	b.n	8008d70 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008afc:	2b20      	cmp	r3, #32
 8008afe:	d10a      	bne.n	8008b16 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	6839      	ldr	r1, [r7, #0]
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	4798      	blx	r3
 8008b0e:	4603      	mov	r3, r0
 8008b10:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
 8008b14:	e12d      	b.n	8008d72 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	785b      	ldrb	r3, [r3, #1]
 8008b1a:	2b03      	cmp	r3, #3
 8008b1c:	d007      	beq.n	8008b2e <USBD_StdEPReq+0x7a>
 8008b1e:	2b03      	cmp	r3, #3
 8008b20:	f300 811b 	bgt.w	8008d5a <USBD_StdEPReq+0x2a6>
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d072      	beq.n	8008c0e <USBD_StdEPReq+0x15a>
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d03a      	beq.n	8008ba2 <USBD_StdEPReq+0xee>
 8008b2c:	e115      	b.n	8008d5a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	d002      	beq.n	8008b3e <USBD_StdEPReq+0x8a>
 8008b38:	2b03      	cmp	r3, #3
 8008b3a:	d015      	beq.n	8008b68 <USBD_StdEPReq+0xb4>
 8008b3c:	e02b      	b.n	8008b96 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b3e:	7bbb      	ldrb	r3, [r7, #14]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00c      	beq.n	8008b5e <USBD_StdEPReq+0xaa>
 8008b44:	7bbb      	ldrb	r3, [r7, #14]
 8008b46:	2b80      	cmp	r3, #128	; 0x80
 8008b48:	d009      	beq.n	8008b5e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008b4a:	7bbb      	ldrb	r3, [r7, #14]
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f001 f888 	bl	8009c64 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008b54:	2180      	movs	r1, #128	; 0x80
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f001 f884 	bl	8009c64 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b5c:	e020      	b.n	8008ba0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fc1f 	bl	80093a4 <USBD_CtlError>
              break;
 8008b66:	e01b      	b.n	8008ba0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	885b      	ldrh	r3, [r3, #2]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d10e      	bne.n	8008b8e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008b70:	7bbb      	ldrb	r3, [r7, #14]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d00b      	beq.n	8008b8e <USBD_StdEPReq+0xda>
 8008b76:	7bbb      	ldrb	r3, [r7, #14]
 8008b78:	2b80      	cmp	r3, #128	; 0x80
 8008b7a:	d008      	beq.n	8008b8e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	88db      	ldrh	r3, [r3, #6]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d104      	bne.n	8008b8e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008b84:	7bbb      	ldrb	r3, [r7, #14]
 8008b86:	4619      	mov	r1, r3
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f001 f86b 	bl	8009c64 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fcd1 	bl	8009536 <USBD_CtlSendStatus>

              break;
 8008b94:	e004      	b.n	8008ba0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008b96:	6839      	ldr	r1, [r7, #0]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fc03 	bl	80093a4 <USBD_CtlError>
              break;
 8008b9e:	bf00      	nop
          }
          break;
 8008ba0:	e0e0      	b.n	8008d64 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d002      	beq.n	8008bb2 <USBD_StdEPReq+0xfe>
 8008bac:	2b03      	cmp	r3, #3
 8008bae:	d015      	beq.n	8008bdc <USBD_StdEPReq+0x128>
 8008bb0:	e026      	b.n	8008c00 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bb2:	7bbb      	ldrb	r3, [r7, #14]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d00c      	beq.n	8008bd2 <USBD_StdEPReq+0x11e>
 8008bb8:	7bbb      	ldrb	r3, [r7, #14]
 8008bba:	2b80      	cmp	r3, #128	; 0x80
 8008bbc:	d009      	beq.n	8008bd2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008bbe:	7bbb      	ldrb	r3, [r7, #14]
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f001 f84e 	bl	8009c64 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008bc8:	2180      	movs	r1, #128	; 0x80
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f001 f84a 	bl	8009c64 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bd0:	e01c      	b.n	8008c0c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008bd2:	6839      	ldr	r1, [r7, #0]
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 fbe5 	bl	80093a4 <USBD_CtlError>
              break;
 8008bda:	e017      	b.n	8008c0c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	885b      	ldrh	r3, [r3, #2]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d112      	bne.n	8008c0a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008be4:	7bbb      	ldrb	r3, [r7, #14]
 8008be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d004      	beq.n	8008bf8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008bee:	7bbb      	ldrb	r3, [r7, #14]
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f001 f855 	bl	8009ca2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 fc9c 	bl	8009536 <USBD_CtlSendStatus>
              }
              break;
 8008bfe:	e004      	b.n	8008c0a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fbce 	bl	80093a4 <USBD_CtlError>
              break;
 8008c08:	e000      	b.n	8008c0c <USBD_StdEPReq+0x158>
              break;
 8008c0a:	bf00      	nop
          }
          break;
 8008c0c:	e0aa      	b.n	8008d64 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d002      	beq.n	8008c1e <USBD_StdEPReq+0x16a>
 8008c18:	2b03      	cmp	r3, #3
 8008c1a:	d032      	beq.n	8008c82 <USBD_StdEPReq+0x1ce>
 8008c1c:	e097      	b.n	8008d4e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c1e:	7bbb      	ldrb	r3, [r7, #14]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d007      	beq.n	8008c34 <USBD_StdEPReq+0x180>
 8008c24:	7bbb      	ldrb	r3, [r7, #14]
 8008c26:	2b80      	cmp	r3, #128	; 0x80
 8008c28:	d004      	beq.n	8008c34 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008c2a:	6839      	ldr	r1, [r7, #0]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 fbb9 	bl	80093a4 <USBD_CtlError>
                break;
 8008c32:	e091      	b.n	8008d58 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	da0b      	bge.n	8008c54 <USBD_StdEPReq+0x1a0>
 8008c3c:	7bbb      	ldrb	r3, [r7, #14]
 8008c3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c42:	4613      	mov	r3, r2
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	4413      	add	r3, r2
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	3310      	adds	r3, #16
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	4413      	add	r3, r2
 8008c50:	3304      	adds	r3, #4
 8008c52:	e00b      	b.n	8008c6c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c54:	7bbb      	ldrb	r3, [r7, #14]
 8008c56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	4413      	add	r3, r2
 8008c6a:	3304      	adds	r3, #4
 8008c6c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	2200      	movs	r2, #0
 8008c72:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	2202      	movs	r2, #2
 8008c78:	4619      	mov	r1, r3
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fbfd 	bl	800947a <USBD_CtlSendData>
              break;
 8008c80:	e06a      	b.n	8008d58 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008c82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	da11      	bge.n	8008cae <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c8a:	7bbb      	ldrb	r3, [r7, #14]
 8008c8c:	f003 020f 	and.w	r2, r3, #15
 8008c90:	6879      	ldr	r1, [r7, #4]
 8008c92:	4613      	mov	r3, r2
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	4413      	add	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	440b      	add	r3, r1
 8008c9c:	3318      	adds	r3, #24
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d117      	bne.n	8008cd4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008ca4:	6839      	ldr	r1, [r7, #0]
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 fb7c 	bl	80093a4 <USBD_CtlError>
                  break;
 8008cac:	e054      	b.n	8008d58 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008cae:	7bbb      	ldrb	r3, [r7, #14]
 8008cb0:	f003 020f 	and.w	r2, r3, #15
 8008cb4:	6879      	ldr	r1, [r7, #4]
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	4413      	add	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	440b      	add	r3, r1
 8008cc0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d104      	bne.n	8008cd4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008cca:	6839      	ldr	r1, [r7, #0]
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 fb69 	bl	80093a4 <USBD_CtlError>
                  break;
 8008cd2:	e041      	b.n	8008d58 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	da0b      	bge.n	8008cf4 <USBD_StdEPReq+0x240>
 8008cdc:	7bbb      	ldrb	r3, [r7, #14]
 8008cde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	4413      	add	r3, r2
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	3310      	adds	r3, #16
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	4413      	add	r3, r2
 8008cf0:	3304      	adds	r3, #4
 8008cf2:	e00b      	b.n	8008d0c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
 8008cf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cfa:	4613      	mov	r3, r2
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	4413      	add	r3, r2
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	4413      	add	r3, r2
 8008d0a:	3304      	adds	r3, #4
 8008d0c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d0e:	7bbb      	ldrb	r3, [r7, #14]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d002      	beq.n	8008d1a <USBD_StdEPReq+0x266>
 8008d14:	7bbb      	ldrb	r3, [r7, #14]
 8008d16:	2b80      	cmp	r3, #128	; 0x80
 8008d18:	d103      	bne.n	8008d22 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	601a      	str	r2, [r3, #0]
 8008d20:	e00e      	b.n	8008d40 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
 8008d24:	4619      	mov	r1, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 ffda 	bl	8009ce0 <USBD_LL_IsStallEP>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d003      	beq.n	8008d3a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	2201      	movs	r2, #1
 8008d36:	601a      	str	r2, [r3, #0]
 8008d38:	e002      	b.n	8008d40 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	2202      	movs	r2, #2
 8008d44:	4619      	mov	r1, r3
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fb97 	bl	800947a <USBD_CtlSendData>
              break;
 8008d4c:	e004      	b.n	8008d58 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008d4e:	6839      	ldr	r1, [r7, #0]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 fb27 	bl	80093a4 <USBD_CtlError>
              break;
 8008d56:	bf00      	nop
          }
          break;
 8008d58:	e004      	b.n	8008d64 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008d5a:	6839      	ldr	r1, [r7, #0]
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fb21 	bl	80093a4 <USBD_CtlError>
          break;
 8008d62:	bf00      	nop
      }
      break;
 8008d64:	e004      	b.n	8008d70 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 fb1b 	bl	80093a4 <USBD_CtlError>
      break;
 8008d6e:	bf00      	nop
  }

  return ret;
 8008d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
	...

08008d7c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d86:	2300      	movs	r3, #0
 8008d88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	885b      	ldrh	r3, [r3, #2]
 8008d96:	0a1b      	lsrs	r3, r3, #8
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	2b06      	cmp	r3, #6
 8008d9e:	f200 8128 	bhi.w	8008ff2 <USBD_GetDescriptor+0x276>
 8008da2:	a201      	add	r2, pc, #4	; (adr r2, 8008da8 <USBD_GetDescriptor+0x2c>)
 8008da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da8:	08008dc5 	.word	0x08008dc5
 8008dac:	08008ddd 	.word	0x08008ddd
 8008db0:	08008e1d 	.word	0x08008e1d
 8008db4:	08008ff3 	.word	0x08008ff3
 8008db8:	08008ff3 	.word	0x08008ff3
 8008dbc:	08008f93 	.word	0x08008f93
 8008dc0:	08008fbf 	.word	0x08008fbf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	7c12      	ldrb	r2, [r2, #16]
 8008dd0:	f107 0108 	add.w	r1, r7, #8
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	4798      	blx	r3
 8008dd8:	60f8      	str	r0, [r7, #12]
      break;
 8008dda:	e112      	b.n	8009002 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	7c1b      	ldrb	r3, [r3, #16]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10d      	bne.n	8008e00 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dec:	f107 0208 	add.w	r2, r7, #8
 8008df0:	4610      	mov	r0, r2
 8008df2:	4798      	blx	r3
 8008df4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008dfe:	e100      	b.n	8009002 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e08:	f107 0208 	add.w	r2, r7, #8
 8008e0c:	4610      	mov	r0, r2
 8008e0e:	4798      	blx	r3
 8008e10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	3301      	adds	r3, #1
 8008e16:	2202      	movs	r2, #2
 8008e18:	701a      	strb	r2, [r3, #0]
      break;
 8008e1a:	e0f2      	b.n	8009002 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	885b      	ldrh	r3, [r3, #2]
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b05      	cmp	r3, #5
 8008e24:	f200 80ac 	bhi.w	8008f80 <USBD_GetDescriptor+0x204>
 8008e28:	a201      	add	r2, pc, #4	; (adr r2, 8008e30 <USBD_GetDescriptor+0xb4>)
 8008e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e2e:	bf00      	nop
 8008e30:	08008e49 	.word	0x08008e49
 8008e34:	08008e7d 	.word	0x08008e7d
 8008e38:	08008eb1 	.word	0x08008eb1
 8008e3c:	08008ee5 	.word	0x08008ee5
 8008e40:	08008f19 	.word	0x08008f19
 8008e44:	08008f4d 	.word	0x08008f4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00b      	beq.n	8008e6c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	7c12      	ldrb	r2, [r2, #16]
 8008e60:	f107 0108 	add.w	r1, r7, #8
 8008e64:	4610      	mov	r0, r2
 8008e66:	4798      	blx	r3
 8008e68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e6a:	e091      	b.n	8008f90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e6c:	6839      	ldr	r1, [r7, #0]
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fa98 	bl	80093a4 <USBD_CtlError>
            err++;
 8008e74:	7afb      	ldrb	r3, [r7, #11]
 8008e76:	3301      	adds	r3, #1
 8008e78:	72fb      	strb	r3, [r7, #11]
          break;
 8008e7a:	e089      	b.n	8008f90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00b      	beq.n	8008ea0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	7c12      	ldrb	r2, [r2, #16]
 8008e94:	f107 0108 	add.w	r1, r7, #8
 8008e98:	4610      	mov	r0, r2
 8008e9a:	4798      	blx	r3
 8008e9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e9e:	e077      	b.n	8008f90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ea0:	6839      	ldr	r1, [r7, #0]
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 fa7e 	bl	80093a4 <USBD_CtlError>
            err++;
 8008ea8:	7afb      	ldrb	r3, [r7, #11]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	72fb      	strb	r3, [r7, #11]
          break;
 8008eae:	e06f      	b.n	8008f90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00b      	beq.n	8008ed4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	7c12      	ldrb	r2, [r2, #16]
 8008ec8:	f107 0108 	add.w	r1, r7, #8
 8008ecc:	4610      	mov	r0, r2
 8008ece:	4798      	blx	r3
 8008ed0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ed2:	e05d      	b.n	8008f90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ed4:	6839      	ldr	r1, [r7, #0]
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fa64 	bl	80093a4 <USBD_CtlError>
            err++;
 8008edc:	7afb      	ldrb	r3, [r7, #11]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ee2:	e055      	b.n	8008f90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00b      	beq.n	8008f08 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	7c12      	ldrb	r2, [r2, #16]
 8008efc:	f107 0108 	add.w	r1, r7, #8
 8008f00:	4610      	mov	r0, r2
 8008f02:	4798      	blx	r3
 8008f04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f06:	e043      	b.n	8008f90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f08:	6839      	ldr	r1, [r7, #0]
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fa4a 	bl	80093a4 <USBD_CtlError>
            err++;
 8008f10:	7afb      	ldrb	r3, [r7, #11]
 8008f12:	3301      	adds	r3, #1
 8008f14:	72fb      	strb	r3, [r7, #11]
          break;
 8008f16:	e03b      	b.n	8008f90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f1e:	695b      	ldr	r3, [r3, #20]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00b      	beq.n	8008f3c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f2a:	695b      	ldr	r3, [r3, #20]
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	7c12      	ldrb	r2, [r2, #16]
 8008f30:	f107 0108 	add.w	r1, r7, #8
 8008f34:	4610      	mov	r0, r2
 8008f36:	4798      	blx	r3
 8008f38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f3a:	e029      	b.n	8008f90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fa30 	bl	80093a4 <USBD_CtlError>
            err++;
 8008f44:	7afb      	ldrb	r3, [r7, #11]
 8008f46:	3301      	adds	r3, #1
 8008f48:	72fb      	strb	r3, [r7, #11]
          break;
 8008f4a:	e021      	b.n	8008f90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00b      	beq.n	8008f70 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	7c12      	ldrb	r2, [r2, #16]
 8008f64:	f107 0108 	add.w	r1, r7, #8
 8008f68:	4610      	mov	r0, r2
 8008f6a:	4798      	blx	r3
 8008f6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f6e:	e00f      	b.n	8008f90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f70:	6839      	ldr	r1, [r7, #0]
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fa16 	bl	80093a4 <USBD_CtlError>
            err++;
 8008f78:	7afb      	ldrb	r3, [r7, #11]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f7e:	e007      	b.n	8008f90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008f80:	6839      	ldr	r1, [r7, #0]
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fa0e 	bl	80093a4 <USBD_CtlError>
          err++;
 8008f88:	7afb      	ldrb	r3, [r7, #11]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008f8e:	e038      	b.n	8009002 <USBD_GetDescriptor+0x286>
 8008f90:	e037      	b.n	8009002 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	7c1b      	ldrb	r3, [r3, #16]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d109      	bne.n	8008fae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa2:	f107 0208 	add.w	r2, r7, #8
 8008fa6:	4610      	mov	r0, r2
 8008fa8:	4798      	blx	r3
 8008faa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fac:	e029      	b.n	8009002 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008fae:	6839      	ldr	r1, [r7, #0]
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 f9f7 	bl	80093a4 <USBD_CtlError>
        err++;
 8008fb6:	7afb      	ldrb	r3, [r7, #11]
 8008fb8:	3301      	adds	r3, #1
 8008fba:	72fb      	strb	r3, [r7, #11]
      break;
 8008fbc:	e021      	b.n	8009002 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	7c1b      	ldrb	r3, [r3, #16]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d10d      	bne.n	8008fe2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fce:	f107 0208 	add.w	r2, r7, #8
 8008fd2:	4610      	mov	r0, r2
 8008fd4:	4798      	blx	r3
 8008fd6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	2207      	movs	r2, #7
 8008fde:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fe0:	e00f      	b.n	8009002 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008fe2:	6839      	ldr	r1, [r7, #0]
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f9dd 	bl	80093a4 <USBD_CtlError>
        err++;
 8008fea:	7afb      	ldrb	r3, [r7, #11]
 8008fec:	3301      	adds	r3, #1
 8008fee:	72fb      	strb	r3, [r7, #11]
      break;
 8008ff0:	e007      	b.n	8009002 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008ff2:	6839      	ldr	r1, [r7, #0]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 f9d5 	bl	80093a4 <USBD_CtlError>
      err++;
 8008ffa:	7afb      	ldrb	r3, [r7, #11]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	72fb      	strb	r3, [r7, #11]
      break;
 8009000:	bf00      	nop
  }

  if (err != 0U)
 8009002:	7afb      	ldrb	r3, [r7, #11]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d11c      	bne.n	8009042 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009008:	893b      	ldrh	r3, [r7, #8]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d011      	beq.n	8009032 <USBD_GetDescriptor+0x2b6>
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	88db      	ldrh	r3, [r3, #6]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00d      	beq.n	8009032 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	88da      	ldrh	r2, [r3, #6]
 800901a:	893b      	ldrh	r3, [r7, #8]
 800901c:	4293      	cmp	r3, r2
 800901e:	bf28      	it	cs
 8009020:	4613      	movcs	r3, r2
 8009022:	b29b      	uxth	r3, r3
 8009024:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009026:	893b      	ldrh	r3, [r7, #8]
 8009028:	461a      	mov	r2, r3
 800902a:	68f9      	ldr	r1, [r7, #12]
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 fa24 	bl	800947a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	88db      	ldrh	r3, [r3, #6]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d104      	bne.n	8009044 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fa7b 	bl	8009536 <USBD_CtlSendStatus>
 8009040:	e000      	b.n	8009044 <USBD_GetDescriptor+0x2c8>
    return;
 8009042:	bf00      	nop
    }
  }
}
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop

0800904c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	889b      	ldrh	r3, [r3, #4]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d130      	bne.n	80090c0 <USBD_SetAddress+0x74>
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	88db      	ldrh	r3, [r3, #6]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d12c      	bne.n	80090c0 <USBD_SetAddress+0x74>
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	885b      	ldrh	r3, [r3, #2]
 800906a:	2b7f      	cmp	r3, #127	; 0x7f
 800906c:	d828      	bhi.n	80090c0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	885b      	ldrh	r3, [r3, #2]
 8009072:	b2db      	uxtb	r3, r3
 8009074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009078:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009080:	2b03      	cmp	r3, #3
 8009082:	d104      	bne.n	800908e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009084:	6839      	ldr	r1, [r7, #0]
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 f98c 	bl	80093a4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800908c:	e01d      	b.n	80090ca <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	7bfa      	ldrb	r2, [r7, #15]
 8009092:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009096:	7bfb      	ldrb	r3, [r7, #15]
 8009098:	4619      	mov	r1, r3
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 fe4d 	bl	8009d3a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fa48 	bl	8009536 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80090a6:	7bfb      	ldrb	r3, [r7, #15]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d004      	beq.n	80090b6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2202      	movs	r2, #2
 80090b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090b4:	e009      	b.n	80090ca <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2201      	movs	r2, #1
 80090ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090be:	e004      	b.n	80090ca <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80090c0:	6839      	ldr	r1, [r7, #0]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f96e 	bl	80093a4 <USBD_CtlError>
  }
}
 80090c8:	bf00      	nop
 80090ca:	bf00      	nop
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
	...

080090d4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	885b      	ldrh	r3, [r3, #2]
 80090e2:	b2da      	uxtb	r2, r3
 80090e4:	4b41      	ldr	r3, [pc, #260]	; (80091ec <USBD_SetConfig+0x118>)
 80090e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090e8:	4b40      	ldr	r3, [pc, #256]	; (80091ec <USBD_SetConfig+0x118>)
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d904      	bls.n	80090fa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f956 	bl	80093a4 <USBD_CtlError>
 80090f8:	e075      	b.n	80091e6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009100:	2b02      	cmp	r3, #2
 8009102:	d002      	beq.n	800910a <USBD_SetConfig+0x36>
 8009104:	2b03      	cmp	r3, #3
 8009106:	d023      	beq.n	8009150 <USBD_SetConfig+0x7c>
 8009108:	e062      	b.n	80091d0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800910a:	4b38      	ldr	r3, [pc, #224]	; (80091ec <USBD_SetConfig+0x118>)
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d01a      	beq.n	8009148 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009112:	4b36      	ldr	r3, [pc, #216]	; (80091ec <USBD_SetConfig+0x118>)
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	461a      	mov	r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2203      	movs	r2, #3
 8009120:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009124:	4b31      	ldr	r3, [pc, #196]	; (80091ec <USBD_SetConfig+0x118>)
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	4619      	mov	r1, r3
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f7ff f9e5 	bl	80084fa <USBD_SetClassConfig>
 8009130:	4603      	mov	r3, r0
 8009132:	2b02      	cmp	r3, #2
 8009134:	d104      	bne.n	8009140 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009136:	6839      	ldr	r1, [r7, #0]
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 f933 	bl	80093a4 <USBD_CtlError>
            return;
 800913e:	e052      	b.n	80091e6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 f9f8 	bl	8009536 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009146:	e04e      	b.n	80091e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f9f4 	bl	8009536 <USBD_CtlSendStatus>
        break;
 800914e:	e04a      	b.n	80091e6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009150:	4b26      	ldr	r3, [pc, #152]	; (80091ec <USBD_SetConfig+0x118>)
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d112      	bne.n	800917e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2202      	movs	r2, #2
 800915c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009160:	4b22      	ldr	r3, [pc, #136]	; (80091ec <USBD_SetConfig+0x118>)
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	461a      	mov	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800916a:	4b20      	ldr	r3, [pc, #128]	; (80091ec <USBD_SetConfig+0x118>)
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	4619      	mov	r1, r3
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f7ff f9e1 	bl	8008538 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f9dd 	bl	8009536 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800917c:	e033      	b.n	80091e6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800917e:	4b1b      	ldr	r3, [pc, #108]	; (80091ec <USBD_SetConfig+0x118>)
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	461a      	mov	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	429a      	cmp	r2, r3
 800918a:	d01d      	beq.n	80091c8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	b2db      	uxtb	r3, r3
 8009192:	4619      	mov	r1, r3
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f7ff f9cf 	bl	8008538 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800919a:	4b14      	ldr	r3, [pc, #80]	; (80091ec <USBD_SetConfig+0x118>)
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	461a      	mov	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80091a4:	4b11      	ldr	r3, [pc, #68]	; (80091ec <USBD_SetConfig+0x118>)
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	4619      	mov	r1, r3
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f7ff f9a5 	bl	80084fa <USBD_SetClassConfig>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d104      	bne.n	80091c0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80091b6:	6839      	ldr	r1, [r7, #0]
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 f8f3 	bl	80093a4 <USBD_CtlError>
            return;
 80091be:	e012      	b.n	80091e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 f9b8 	bl	8009536 <USBD_CtlSendStatus>
        break;
 80091c6:	e00e      	b.n	80091e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 f9b4 	bl	8009536 <USBD_CtlSendStatus>
        break;
 80091ce:	e00a      	b.n	80091e6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80091d0:	6839      	ldr	r1, [r7, #0]
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f8e6 	bl	80093a4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80091d8:	4b04      	ldr	r3, [pc, #16]	; (80091ec <USBD_SetConfig+0x118>)
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	4619      	mov	r1, r3
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f7ff f9aa 	bl	8008538 <USBD_ClrClassConfig>
        break;
 80091e4:	bf00      	nop
    }
  }
}
 80091e6:	3708      	adds	r7, #8
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	20000288 	.word	0x20000288

080091f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	88db      	ldrh	r3, [r3, #6]
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d004      	beq.n	800920c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009202:	6839      	ldr	r1, [r7, #0]
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 f8cd 	bl	80093a4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800920a:	e022      	b.n	8009252 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009212:	2b02      	cmp	r3, #2
 8009214:	dc02      	bgt.n	800921c <USBD_GetConfig+0x2c>
 8009216:	2b00      	cmp	r3, #0
 8009218:	dc03      	bgt.n	8009222 <USBD_GetConfig+0x32>
 800921a:	e015      	b.n	8009248 <USBD_GetConfig+0x58>
 800921c:	2b03      	cmp	r3, #3
 800921e:	d00b      	beq.n	8009238 <USBD_GetConfig+0x48>
 8009220:	e012      	b.n	8009248 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	3308      	adds	r3, #8
 800922c:	2201      	movs	r2, #1
 800922e:	4619      	mov	r1, r3
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 f922 	bl	800947a <USBD_CtlSendData>
        break;
 8009236:	e00c      	b.n	8009252 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	3304      	adds	r3, #4
 800923c:	2201      	movs	r2, #1
 800923e:	4619      	mov	r1, r3
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 f91a 	bl	800947a <USBD_CtlSendData>
        break;
 8009246:	e004      	b.n	8009252 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009248:	6839      	ldr	r1, [r7, #0]
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 f8aa 	bl	80093a4 <USBD_CtlError>
        break;
 8009250:	bf00      	nop
}
 8009252:	bf00      	nop
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b082      	sub	sp, #8
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
 8009262:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800926a:	3b01      	subs	r3, #1
 800926c:	2b02      	cmp	r3, #2
 800926e:	d81e      	bhi.n	80092ae <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	88db      	ldrh	r3, [r3, #6]
 8009274:	2b02      	cmp	r3, #2
 8009276:	d004      	beq.n	8009282 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f892 	bl	80093a4 <USBD_CtlError>
        break;
 8009280:	e01a      	b.n	80092b8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2201      	movs	r2, #1
 8009286:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800928e:	2b00      	cmp	r3, #0
 8009290:	d005      	beq.n	800929e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	f043 0202 	orr.w	r2, r3, #2
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	330c      	adds	r3, #12
 80092a2:	2202      	movs	r2, #2
 80092a4:	4619      	mov	r1, r3
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 f8e7 	bl	800947a <USBD_CtlSendData>
      break;
 80092ac:	e004      	b.n	80092b8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 f877 	bl	80093a4 <USBD_CtlError>
      break;
 80092b6:	bf00      	nop
  }
}
 80092b8:	bf00      	nop
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	885b      	ldrh	r3, [r3, #2]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d106      	bne.n	80092e0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f92b 	bl	8009536 <USBD_CtlSendStatus>
  }
}
 80092e0:	bf00      	nop
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092f8:	3b01      	subs	r3, #1
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d80b      	bhi.n	8009316 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	885b      	ldrh	r3, [r3, #2]
 8009302:	2b01      	cmp	r3, #1
 8009304:	d10c      	bne.n	8009320 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 f911 	bl	8009536 <USBD_CtlSendStatus>
      }
      break;
 8009314:	e004      	b.n	8009320 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009316:	6839      	ldr	r1, [r7, #0]
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 f843 	bl	80093a4 <USBD_CtlError>
      break;
 800931e:	e000      	b.n	8009322 <USBD_ClrFeature+0x3a>
      break;
 8009320:	bf00      	nop
  }
}
 8009322:	bf00      	nop
 8009324:	3708      	adds	r7, #8
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800932a:	b480      	push	{r7}
 800932c:	b083      	sub	sp, #12
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
 8009332:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	781a      	ldrb	r2, [r3, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	785a      	ldrb	r2, [r3, #1]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	3302      	adds	r3, #2
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	b29a      	uxth	r2, r3
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	3303      	adds	r3, #3
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	b29b      	uxth	r3, r3
 8009354:	021b      	lsls	r3, r3, #8
 8009356:	b29b      	uxth	r3, r3
 8009358:	4413      	add	r3, r2
 800935a:	b29a      	uxth	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	3304      	adds	r3, #4
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	b29a      	uxth	r2, r3
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	3305      	adds	r3, #5
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	b29b      	uxth	r3, r3
 8009370:	021b      	lsls	r3, r3, #8
 8009372:	b29b      	uxth	r3, r3
 8009374:	4413      	add	r3, r2
 8009376:	b29a      	uxth	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	3306      	adds	r3, #6
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	b29a      	uxth	r2, r3
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	3307      	adds	r3, #7
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	b29b      	uxth	r3, r3
 800938c:	021b      	lsls	r3, r3, #8
 800938e:	b29b      	uxth	r3, r3
 8009390:	4413      	add	r3, r2
 8009392:	b29a      	uxth	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	80da      	strh	r2, [r3, #6]

}
 8009398:	bf00      	nop
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80093ae:	2180      	movs	r1, #128	; 0x80
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 fc57 	bl	8009c64 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80093b6:	2100      	movs	r1, #0
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 fc53 	bl	8009c64 <USBD_LL_StallEP>
}
 80093be:	bf00      	nop
 80093c0:	3708      	adds	r7, #8
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80093c6:	b580      	push	{r7, lr}
 80093c8:	b086      	sub	sp, #24
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	60f8      	str	r0, [r7, #12]
 80093ce:	60b9      	str	r1, [r7, #8]
 80093d0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80093d2:	2300      	movs	r3, #0
 80093d4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d032      	beq.n	8009442 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	f000 f834 	bl	800944a <USBD_GetLen>
 80093e2:	4603      	mov	r3, r0
 80093e4:	3301      	adds	r3, #1
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	005b      	lsls	r3, r3, #1
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80093f0:	7dfb      	ldrb	r3, [r7, #23]
 80093f2:	1c5a      	adds	r2, r3, #1
 80093f4:	75fa      	strb	r2, [r7, #23]
 80093f6:	461a      	mov	r2, r3
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	4413      	add	r3, r2
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	7812      	ldrb	r2, [r2, #0]
 8009400:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009402:	7dfb      	ldrb	r3, [r7, #23]
 8009404:	1c5a      	adds	r2, r3, #1
 8009406:	75fa      	strb	r2, [r7, #23]
 8009408:	461a      	mov	r2, r3
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	4413      	add	r3, r2
 800940e:	2203      	movs	r2, #3
 8009410:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009412:	e012      	b.n	800943a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	1c5a      	adds	r2, r3, #1
 8009418:	60fa      	str	r2, [r7, #12]
 800941a:	7dfa      	ldrb	r2, [r7, #23]
 800941c:	1c51      	adds	r1, r2, #1
 800941e:	75f9      	strb	r1, [r7, #23]
 8009420:	4611      	mov	r1, r2
 8009422:	68ba      	ldr	r2, [r7, #8]
 8009424:	440a      	add	r2, r1
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800942a:	7dfb      	ldrb	r3, [r7, #23]
 800942c:	1c5a      	adds	r2, r3, #1
 800942e:	75fa      	strb	r2, [r7, #23]
 8009430:	461a      	mov	r2, r3
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	4413      	add	r3, r2
 8009436:	2200      	movs	r2, #0
 8009438:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1e8      	bne.n	8009414 <USBD_GetString+0x4e>
    }
  }
}
 8009442:	bf00      	nop
 8009444:	3718      	adds	r7, #24
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800944a:	b480      	push	{r7}
 800944c:	b085      	sub	sp, #20
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009452:	2300      	movs	r3, #0
 8009454:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009456:	e005      	b.n	8009464 <USBD_GetLen+0x1a>
  {
    len++;
 8009458:	7bfb      	ldrb	r3, [r7, #15]
 800945a:	3301      	adds	r3, #1
 800945c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	3301      	adds	r3, #1
 8009462:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d1f5      	bne.n	8009458 <USBD_GetLen+0xe>
  }

  return len;
 800946c:	7bfb      	ldrb	r3, [r7, #15]
}
 800946e:	4618      	mov	r0, r3
 8009470:	3714      	adds	r7, #20
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr

0800947a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b084      	sub	sp, #16
 800947e:	af00      	add	r7, sp, #0
 8009480:	60f8      	str	r0, [r7, #12]
 8009482:	60b9      	str	r1, [r7, #8]
 8009484:	4613      	mov	r3, r2
 8009486:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2202      	movs	r2, #2
 800948c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009490:	88fa      	ldrh	r2, [r7, #6]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009496:	88fa      	ldrh	r2, [r7, #6]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800949c:	88fb      	ldrh	r3, [r7, #6]
 800949e:	68ba      	ldr	r2, [r7, #8]
 80094a0:	2100      	movs	r1, #0
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f000 fc68 	bl	8009d78 <USBD_LL_Transmit>

  return USBD_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b084      	sub	sp, #16
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	60f8      	str	r0, [r7, #12]
 80094ba:	60b9      	str	r1, [r7, #8]
 80094bc:	4613      	mov	r3, r2
 80094be:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094c0:	88fb      	ldrh	r3, [r7, #6]
 80094c2:	68ba      	ldr	r2, [r7, #8]
 80094c4:	2100      	movs	r1, #0
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f000 fc56 	bl	8009d78 <USBD_LL_Transmit>

  return USBD_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b084      	sub	sp, #16
 80094da:	af00      	add	r7, sp, #0
 80094dc:	60f8      	str	r0, [r7, #12]
 80094de:	60b9      	str	r1, [r7, #8]
 80094e0:	4613      	mov	r3, r2
 80094e2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2203      	movs	r2, #3
 80094e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80094ec:	88fa      	ldrh	r2, [r7, #6]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80094f4:	88fa      	ldrh	r2, [r7, #6]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094fc:	88fb      	ldrh	r3, [r7, #6]
 80094fe:	68ba      	ldr	r2, [r7, #8]
 8009500:	2100      	movs	r1, #0
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f000 fc5b 	bl	8009dbe <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b084      	sub	sp, #16
 8009516:	af00      	add	r7, sp, #0
 8009518:	60f8      	str	r0, [r7, #12]
 800951a:	60b9      	str	r1, [r7, #8]
 800951c:	4613      	mov	r3, r2
 800951e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009520:	88fb      	ldrh	r3, [r7, #6]
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	2100      	movs	r1, #0
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f000 fc49 	bl	8009dbe <USBD_LL_PrepareReceive>

  return USBD_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b082      	sub	sp, #8
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2204      	movs	r2, #4
 8009542:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009546:	2300      	movs	r3, #0
 8009548:	2200      	movs	r2, #0
 800954a:	2100      	movs	r1, #0
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 fc13 	bl	8009d78 <USBD_LL_Transmit>

  return USBD_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2205      	movs	r2, #5
 8009568:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800956c:	2300      	movs	r3, #0
 800956e:	2200      	movs	r2, #0
 8009570:	2100      	movs	r1, #0
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fc23 	bl	8009dbe <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	4618      	mov	r0, r3
 800957c:	3708      	adds	r7, #8
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
	...

08009584 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009588:	2200      	movs	r2, #0
 800958a:	4912      	ldr	r1, [pc, #72]	; (80095d4 <MX_USB_DEVICE_Init+0x50>)
 800958c:	4812      	ldr	r0, [pc, #72]	; (80095d8 <MX_USB_DEVICE_Init+0x54>)
 800958e:	f7fe ff58 	bl	8008442 <USBD_Init>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d001      	beq.n	800959c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009598:	f7f7 f84c 	bl	8000634 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800959c:	490f      	ldr	r1, [pc, #60]	; (80095dc <MX_USB_DEVICE_Init+0x58>)
 800959e:	480e      	ldr	r0, [pc, #56]	; (80095d8 <MX_USB_DEVICE_Init+0x54>)
 80095a0:	f7fe ff7a 	bl	8008498 <USBD_RegisterClass>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80095aa:	f7f7 f843 	bl	8000634 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80095ae:	490c      	ldr	r1, [pc, #48]	; (80095e0 <MX_USB_DEVICE_Init+0x5c>)
 80095b0:	4809      	ldr	r0, [pc, #36]	; (80095d8 <MX_USB_DEVICE_Init+0x54>)
 80095b2:	f7fe fed7 	bl	8008364 <USBD_CDC_RegisterInterface>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d001      	beq.n	80095c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80095bc:	f7f7 f83a 	bl	8000634 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80095c0:	4805      	ldr	r0, [pc, #20]	; (80095d8 <MX_USB_DEVICE_Init+0x54>)
 80095c2:	f7fe ff83 	bl	80084cc <USBD_Start>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d001      	beq.n	80095d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80095cc:	f7f7 f832 	bl	8000634 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80095d0:	bf00      	nop
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	2000012c 	.word	0x2000012c
 80095d8:	2000028c 	.word	0x2000028c
 80095dc:	20000018 	.word	0x20000018
 80095e0:	2000011c 	.word	0x2000011c

080095e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80095e8:	2200      	movs	r2, #0
 80095ea:	4905      	ldr	r1, [pc, #20]	; (8009600 <CDC_Init_FS+0x1c>)
 80095ec:	4805      	ldr	r0, [pc, #20]	; (8009604 <CDC_Init_FS+0x20>)
 80095ee:	f7fe fed0 	bl	8008392 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80095f2:	4905      	ldr	r1, [pc, #20]	; (8009608 <CDC_Init_FS+0x24>)
 80095f4:	4803      	ldr	r0, [pc, #12]	; (8009604 <CDC_Init_FS+0x20>)
 80095f6:	f7fe fee6 	bl	80083c6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80095fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	20000950 	.word	0x20000950
 8009604:	2000028c 	.word	0x2000028c
 8009608:	20000550 	.word	0x20000550

0800960c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800960c:	b480      	push	{r7}
 800960e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009610:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009612:	4618      	mov	r0, r3
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	4603      	mov	r3, r0
 8009624:	6039      	str	r1, [r7, #0]
 8009626:	71fb      	strb	r3, [r7, #7]
 8009628:	4613      	mov	r3, r2
 800962a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800962c:	79fb      	ldrb	r3, [r7, #7]
 800962e:	2b23      	cmp	r3, #35	; 0x23
 8009630:	d84a      	bhi.n	80096c8 <CDC_Control_FS+0xac>
 8009632:	a201      	add	r2, pc, #4	; (adr r2, 8009638 <CDC_Control_FS+0x1c>)
 8009634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009638:	080096c9 	.word	0x080096c9
 800963c:	080096c9 	.word	0x080096c9
 8009640:	080096c9 	.word	0x080096c9
 8009644:	080096c9 	.word	0x080096c9
 8009648:	080096c9 	.word	0x080096c9
 800964c:	080096c9 	.word	0x080096c9
 8009650:	080096c9 	.word	0x080096c9
 8009654:	080096c9 	.word	0x080096c9
 8009658:	080096c9 	.word	0x080096c9
 800965c:	080096c9 	.word	0x080096c9
 8009660:	080096c9 	.word	0x080096c9
 8009664:	080096c9 	.word	0x080096c9
 8009668:	080096c9 	.word	0x080096c9
 800966c:	080096c9 	.word	0x080096c9
 8009670:	080096c9 	.word	0x080096c9
 8009674:	080096c9 	.word	0x080096c9
 8009678:	080096c9 	.word	0x080096c9
 800967c:	080096c9 	.word	0x080096c9
 8009680:	080096c9 	.word	0x080096c9
 8009684:	080096c9 	.word	0x080096c9
 8009688:	080096c9 	.word	0x080096c9
 800968c:	080096c9 	.word	0x080096c9
 8009690:	080096c9 	.word	0x080096c9
 8009694:	080096c9 	.word	0x080096c9
 8009698:	080096c9 	.word	0x080096c9
 800969c:	080096c9 	.word	0x080096c9
 80096a0:	080096c9 	.word	0x080096c9
 80096a4:	080096c9 	.word	0x080096c9
 80096a8:	080096c9 	.word	0x080096c9
 80096ac:	080096c9 	.word	0x080096c9
 80096b0:	080096c9 	.word	0x080096c9
 80096b4:	080096c9 	.word	0x080096c9
 80096b8:	080096c9 	.word	0x080096c9
 80096bc:	080096c9 	.word	0x080096c9
 80096c0:	080096c9 	.word	0x080096c9
 80096c4:	080096c9 	.word	0x080096c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80096c8:	bf00      	nop
  }

  return (USBD_OK);
 80096ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80096e2:	6879      	ldr	r1, [r7, #4]
 80096e4:	4805      	ldr	r0, [pc, #20]	; (80096fc <CDC_Receive_FS+0x24>)
 80096e6:	f7fe fe6e 	bl	80083c6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80096ea:	4804      	ldr	r0, [pc, #16]	; (80096fc <CDC_Receive_FS+0x24>)
 80096ec:	f7fe fe7f 	bl	80083ee <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80096f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3708      	adds	r7, #8
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	2000028c 	.word	0x2000028c

08009700 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	4603      	mov	r3, r0
 8009708:	6039      	str	r1, [r7, #0]
 800970a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	2212      	movs	r2, #18
 8009710:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009712:	4b03      	ldr	r3, [pc, #12]	; (8009720 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009714:	4618      	mov	r0, r3
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr
 8009720:	20000148 	.word	0x20000148

08009724 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	4603      	mov	r3, r0
 800972c:	6039      	str	r1, [r7, #0]
 800972e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	2204      	movs	r2, #4
 8009734:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009736:	4b03      	ldr	r3, [pc, #12]	; (8009744 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009738:	4618      	mov	r0, r3
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr
 8009744:	2000015c 	.word	0x2000015c

08009748 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	4603      	mov	r3, r0
 8009750:	6039      	str	r1, [r7, #0]
 8009752:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009754:	79fb      	ldrb	r3, [r7, #7]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d105      	bne.n	8009766 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800975a:	683a      	ldr	r2, [r7, #0]
 800975c:	4907      	ldr	r1, [pc, #28]	; (800977c <USBD_FS_ProductStrDescriptor+0x34>)
 800975e:	4808      	ldr	r0, [pc, #32]	; (8009780 <USBD_FS_ProductStrDescriptor+0x38>)
 8009760:	f7ff fe31 	bl	80093c6 <USBD_GetString>
 8009764:	e004      	b.n	8009770 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009766:	683a      	ldr	r2, [r7, #0]
 8009768:	4904      	ldr	r1, [pc, #16]	; (800977c <USBD_FS_ProductStrDescriptor+0x34>)
 800976a:	4805      	ldr	r0, [pc, #20]	; (8009780 <USBD_FS_ProductStrDescriptor+0x38>)
 800976c:	f7ff fe2b 	bl	80093c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009770:	4b02      	ldr	r3, [pc, #8]	; (800977c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009772:	4618      	mov	r0, r3
 8009774:	3708      	adds	r7, #8
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	20000d50 	.word	0x20000d50
 8009780:	08009f3c 	.word	0x08009f3c

08009784 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	4603      	mov	r3, r0
 800978c:	6039      	str	r1, [r7, #0]
 800978e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009790:	683a      	ldr	r2, [r7, #0]
 8009792:	4904      	ldr	r1, [pc, #16]	; (80097a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009794:	4804      	ldr	r0, [pc, #16]	; (80097a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009796:	f7ff fe16 	bl	80093c6 <USBD_GetString>
  return USBD_StrDesc;
 800979a:	4b02      	ldr	r3, [pc, #8]	; (80097a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800979c:	4618      	mov	r0, r3
 800979e:	3708      	adds	r7, #8
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	20000d50 	.word	0x20000d50
 80097a8:	08009f54 	.word	0x08009f54

080097ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	4603      	mov	r3, r0
 80097b4:	6039      	str	r1, [r7, #0]
 80097b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	221a      	movs	r2, #26
 80097bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80097be:	f000 f843 	bl	8009848 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80097c2:	4b02      	ldr	r3, [pc, #8]	; (80097cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	20000160 	.word	0x20000160

080097d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b082      	sub	sp, #8
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	4603      	mov	r3, r0
 80097d8:	6039      	str	r1, [r7, #0]
 80097da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80097dc:	79fb      	ldrb	r3, [r7, #7]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d105      	bne.n	80097ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097e2:	683a      	ldr	r2, [r7, #0]
 80097e4:	4907      	ldr	r1, [pc, #28]	; (8009804 <USBD_FS_ConfigStrDescriptor+0x34>)
 80097e6:	4808      	ldr	r0, [pc, #32]	; (8009808 <USBD_FS_ConfigStrDescriptor+0x38>)
 80097e8:	f7ff fded 	bl	80093c6 <USBD_GetString>
 80097ec:	e004      	b.n	80097f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097ee:	683a      	ldr	r2, [r7, #0]
 80097f0:	4904      	ldr	r1, [pc, #16]	; (8009804 <USBD_FS_ConfigStrDescriptor+0x34>)
 80097f2:	4805      	ldr	r0, [pc, #20]	; (8009808 <USBD_FS_ConfigStrDescriptor+0x38>)
 80097f4:	f7ff fde7 	bl	80093c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097f8:	4b02      	ldr	r3, [pc, #8]	; (8009804 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3708      	adds	r7, #8
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	20000d50 	.word	0x20000d50
 8009808:	08009f68 	.word	0x08009f68

0800980c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	4603      	mov	r3, r0
 8009814:	6039      	str	r1, [r7, #0]
 8009816:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009818:	79fb      	ldrb	r3, [r7, #7]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d105      	bne.n	800982a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	4907      	ldr	r1, [pc, #28]	; (8009840 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009822:	4808      	ldr	r0, [pc, #32]	; (8009844 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009824:	f7ff fdcf 	bl	80093c6 <USBD_GetString>
 8009828:	e004      	b.n	8009834 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800982a:	683a      	ldr	r2, [r7, #0]
 800982c:	4904      	ldr	r1, [pc, #16]	; (8009840 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800982e:	4805      	ldr	r0, [pc, #20]	; (8009844 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009830:	f7ff fdc9 	bl	80093c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009834:	4b02      	ldr	r3, [pc, #8]	; (8009840 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009836:	4618      	mov	r0, r3
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	20000d50 	.word	0x20000d50
 8009844:	08009f74 	.word	0x08009f74

08009848 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800984e:	4b0f      	ldr	r3, [pc, #60]	; (800988c <Get_SerialNum+0x44>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009854:	4b0e      	ldr	r3, [pc, #56]	; (8009890 <Get_SerialNum+0x48>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800985a:	4b0e      	ldr	r3, [pc, #56]	; (8009894 <Get_SerialNum+0x4c>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009860:	68fa      	ldr	r2, [r7, #12]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	4413      	add	r3, r2
 8009866:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d009      	beq.n	8009882 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800986e:	2208      	movs	r2, #8
 8009870:	4909      	ldr	r1, [pc, #36]	; (8009898 <Get_SerialNum+0x50>)
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f000 f814 	bl	80098a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009878:	2204      	movs	r2, #4
 800987a:	4908      	ldr	r1, [pc, #32]	; (800989c <Get_SerialNum+0x54>)
 800987c:	68b8      	ldr	r0, [r7, #8]
 800987e:	f000 f80f 	bl	80098a0 <IntToUnicode>
  }
}
 8009882:	bf00      	nop
 8009884:	3710      	adds	r7, #16
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	1ffff7ac 	.word	0x1ffff7ac
 8009890:	1ffff7b0 	.word	0x1ffff7b0
 8009894:	1ffff7b4 	.word	0x1ffff7b4
 8009898:	20000162 	.word	0x20000162
 800989c:	20000172 	.word	0x20000172

080098a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b087      	sub	sp, #28
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	4613      	mov	r3, r2
 80098ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80098ae:	2300      	movs	r3, #0
 80098b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80098b2:	2300      	movs	r3, #0
 80098b4:	75fb      	strb	r3, [r7, #23]
 80098b6:	e027      	b.n	8009908 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	0f1b      	lsrs	r3, r3, #28
 80098bc:	2b09      	cmp	r3, #9
 80098be:	d80b      	bhi.n	80098d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	0f1b      	lsrs	r3, r3, #28
 80098c4:	b2da      	uxtb	r2, r3
 80098c6:	7dfb      	ldrb	r3, [r7, #23]
 80098c8:	005b      	lsls	r3, r3, #1
 80098ca:	4619      	mov	r1, r3
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	440b      	add	r3, r1
 80098d0:	3230      	adds	r2, #48	; 0x30
 80098d2:	b2d2      	uxtb	r2, r2
 80098d4:	701a      	strb	r2, [r3, #0]
 80098d6:	e00a      	b.n	80098ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	0f1b      	lsrs	r3, r3, #28
 80098dc:	b2da      	uxtb	r2, r3
 80098de:	7dfb      	ldrb	r3, [r7, #23]
 80098e0:	005b      	lsls	r3, r3, #1
 80098e2:	4619      	mov	r1, r3
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	440b      	add	r3, r1
 80098e8:	3237      	adds	r2, #55	; 0x37
 80098ea:	b2d2      	uxtb	r2, r2
 80098ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	011b      	lsls	r3, r3, #4
 80098f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80098f4:	7dfb      	ldrb	r3, [r7, #23]
 80098f6:	005b      	lsls	r3, r3, #1
 80098f8:	3301      	adds	r3, #1
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	4413      	add	r3, r2
 80098fe:	2200      	movs	r2, #0
 8009900:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009902:	7dfb      	ldrb	r3, [r7, #23]
 8009904:	3301      	adds	r3, #1
 8009906:	75fb      	strb	r3, [r7, #23]
 8009908:	7dfa      	ldrb	r2, [r7, #23]
 800990a:	79fb      	ldrb	r3, [r7, #7]
 800990c:	429a      	cmp	r2, r3
 800990e:	d3d3      	bcc.n	80098b8 <IntToUnicode+0x18>
  }
}
 8009910:	bf00      	nop
 8009912:	bf00      	nop
 8009914:	371c      	adds	r7, #28
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
	...

08009920 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b08a      	sub	sp, #40	; 0x28
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009928:	f107 0314 	add.w	r3, r7, #20
 800992c:	2200      	movs	r2, #0
 800992e:	601a      	str	r2, [r3, #0]
 8009930:	605a      	str	r2, [r3, #4]
 8009932:	609a      	str	r2, [r3, #8]
 8009934:	60da      	str	r2, [r3, #12]
 8009936:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a1c      	ldr	r2, [pc, #112]	; (80099b0 <HAL_PCD_MspInit+0x90>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d131      	bne.n	80099a6 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009942:	4b1c      	ldr	r3, [pc, #112]	; (80099b4 <HAL_PCD_MspInit+0x94>)
 8009944:	695b      	ldr	r3, [r3, #20]
 8009946:	4a1b      	ldr	r2, [pc, #108]	; (80099b4 <HAL_PCD_MspInit+0x94>)
 8009948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800994c:	6153      	str	r3, [r2, #20]
 800994e:	4b19      	ldr	r3, [pc, #100]	; (80099b4 <HAL_PCD_MspInit+0x94>)
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009956:	613b      	str	r3, [r7, #16]
 8009958:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800995a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800995e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009960:	2302      	movs	r3, #2
 8009962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009964:	2300      	movs	r3, #0
 8009966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009968:	2303      	movs	r3, #3
 800996a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800996c:	230e      	movs	r3, #14
 800996e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009970:	f107 0314 	add.w	r3, r7, #20
 8009974:	4619      	mov	r1, r3
 8009976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800997a:	f7f7 ff4f 	bl	800181c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800997e:	4b0d      	ldr	r3, [pc, #52]	; (80099b4 <HAL_PCD_MspInit+0x94>)
 8009980:	69db      	ldr	r3, [r3, #28]
 8009982:	4a0c      	ldr	r2, [pc, #48]	; (80099b4 <HAL_PCD_MspInit+0x94>)
 8009984:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009988:	61d3      	str	r3, [r2, #28]
 800998a:	4b0a      	ldr	r3, [pc, #40]	; (80099b4 <HAL_PCD_MspInit+0x94>)
 800998c:	69db      	ldr	r3, [r3, #28]
 800998e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009992:	60fb      	str	r3, [r7, #12]
 8009994:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8009996:	2200      	movs	r2, #0
 8009998:	2100      	movs	r1, #0
 800999a:	2014      	movs	r0, #20
 800999c:	f7f7 ff07 	bl	80017ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80099a0:	2014      	movs	r0, #20
 80099a2:	f7f7 ff20 	bl	80017e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80099a6:	bf00      	nop
 80099a8:	3728      	adds	r7, #40	; 0x28
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	40005c00 	.word	0x40005c00
 80099b4:	40021000 	.word	0x40021000

080099b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80099cc:	4619      	mov	r1, r3
 80099ce:	4610      	mov	r0, r2
 80099d0:	f7fe fdc5 	bl	800855e <USBD_LL_SetupStage>
}
 80099d4:	bf00      	nop
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	460b      	mov	r3, r1
 80099e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80099ee:	78fa      	ldrb	r2, [r7, #3]
 80099f0:	6879      	ldr	r1, [r7, #4]
 80099f2:	4613      	mov	r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	4413      	add	r3, r2
 80099f8:	00db      	lsls	r3, r3, #3
 80099fa:	440b      	add	r3, r1
 80099fc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	78fb      	ldrb	r3, [r7, #3]
 8009a04:	4619      	mov	r1, r3
 8009a06:	f7fe fdf7 	bl	80085f8 <USBD_LL_DataOutStage>
}
 8009a0a:	bf00      	nop
 8009a0c:	3708      	adds	r7, #8
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b082      	sub	sp, #8
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009a24:	78fa      	ldrb	r2, [r7, #3]
 8009a26:	6879      	ldr	r1, [r7, #4]
 8009a28:	4613      	mov	r3, r2
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	4413      	add	r3, r2
 8009a2e:	00db      	lsls	r3, r3, #3
 8009a30:	440b      	add	r3, r1
 8009a32:	333c      	adds	r3, #60	; 0x3c
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	78fb      	ldrb	r3, [r7, #3]
 8009a38:	4619      	mov	r1, r3
 8009a3a:	f7fe fe4e 	bl	80086da <USBD_LL_DataInStage>
}
 8009a3e:	bf00      	nop
 8009a40:	3708      	adds	r7, #8
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b082      	sub	sp, #8
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7fe ff61 	bl	800891c <USBD_LL_SOF>
}
 8009a5a:	bf00      	nop
 8009a5c:	3708      	adds	r7, #8
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b084      	sub	sp, #16
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d001      	beq.n	8009a7a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009a76:	f7f6 fddd 	bl	8000634 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009a80:	7bfa      	ldrb	r2, [r7, #15]
 8009a82:	4611      	mov	r1, r2
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7fe ff0e 	bl	80088a6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7fe fec7 	bl	8008824 <USBD_LL_Reset>
}
 8009a96:	bf00      	nop
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
	...

08009aa0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7fe ff09 	bl	80088c6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	699b      	ldr	r3, [r3, #24]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d005      	beq.n	8009ac8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009abc:	4b04      	ldr	r3, [pc, #16]	; (8009ad0 <HAL_PCD_SuspendCallback+0x30>)
 8009abe:	691b      	ldr	r3, [r3, #16]
 8009ac0:	4a03      	ldr	r2, [pc, #12]	; (8009ad0 <HAL_PCD_SuspendCallback+0x30>)
 8009ac2:	f043 0306 	orr.w	r3, r3, #6
 8009ac6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009ac8:	bf00      	nop
 8009aca:	3708      	adds	r7, #8
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	e000ed00 	.word	0xe000ed00

08009ad4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7fe ff04 	bl	80088f0 <USBD_LL_Resume>
}
 8009ae8:	bf00      	nop
 8009aea:	3708      	adds	r7, #8
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009af8:	4a28      	ldr	r2, [pc, #160]	; (8009b9c <USBD_LL_Init+0xac>)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	4a26      	ldr	r2, [pc, #152]	; (8009b9c <USBD_LL_Init+0xac>)
 8009b04:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009b08:	4b24      	ldr	r3, [pc, #144]	; (8009b9c <USBD_LL_Init+0xac>)
 8009b0a:	4a25      	ldr	r2, [pc, #148]	; (8009ba0 <USBD_LL_Init+0xb0>)
 8009b0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009b0e:	4b23      	ldr	r3, [pc, #140]	; (8009b9c <USBD_LL_Init+0xac>)
 8009b10:	2208      	movs	r2, #8
 8009b12:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009b14:	4b21      	ldr	r3, [pc, #132]	; (8009b9c <USBD_LL_Init+0xac>)
 8009b16:	2202      	movs	r2, #2
 8009b18:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009b1a:	4b20      	ldr	r3, [pc, #128]	; (8009b9c <USBD_LL_Init+0xac>)
 8009b1c:	2202      	movs	r2, #2
 8009b1e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009b20:	4b1e      	ldr	r3, [pc, #120]	; (8009b9c <USBD_LL_Init+0xac>)
 8009b22:	2200      	movs	r2, #0
 8009b24:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009b26:	4b1d      	ldr	r3, [pc, #116]	; (8009b9c <USBD_LL_Init+0xac>)
 8009b28:	2200      	movs	r2, #0
 8009b2a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009b2c:	481b      	ldr	r0, [pc, #108]	; (8009b9c <USBD_LL_Init+0xac>)
 8009b2e:	f7f8 f807 	bl	8001b40 <HAL_PCD_Init>
 8009b32:	4603      	mov	r3, r0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d001      	beq.n	8009b3c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009b38:	f7f6 fd7c 	bl	8000634 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b42:	2318      	movs	r3, #24
 8009b44:	2200      	movs	r2, #0
 8009b46:	2100      	movs	r1, #0
 8009b48:	f7f9 fc90 	bl	800346c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b52:	2358      	movs	r3, #88	; 0x58
 8009b54:	2200      	movs	r2, #0
 8009b56:	2180      	movs	r1, #128	; 0x80
 8009b58:	f7f9 fc88 	bl	800346c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b62:	23c0      	movs	r3, #192	; 0xc0
 8009b64:	2200      	movs	r2, #0
 8009b66:	2181      	movs	r1, #129	; 0x81
 8009b68:	f7f9 fc80 	bl	800346c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b72:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009b76:	2200      	movs	r2, #0
 8009b78:	2101      	movs	r1, #1
 8009b7a:	f7f9 fc77 	bl	800346c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b88:	2200      	movs	r2, #0
 8009b8a:	2182      	movs	r1, #130	; 0x82
 8009b8c:	f7f9 fc6e 	bl	800346c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009b90:	2300      	movs	r3, #0
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	20000f50 	.word	0x20000f50
 8009ba0:	40005c00 	.word	0x40005c00

08009ba4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bac:	2300      	movs	r3, #0
 8009bae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7f8 f892 	bl	8001ce4 <HAL_PCD_Start>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bc4:	7bfb      	ldrb	r3, [r7, #15]
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f000 f954 	bl	8009e74 <USBD_Get_USB_Status>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b084      	sub	sp, #16
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
 8009be2:	4608      	mov	r0, r1
 8009be4:	4611      	mov	r1, r2
 8009be6:	461a      	mov	r2, r3
 8009be8:	4603      	mov	r3, r0
 8009bea:	70fb      	strb	r3, [r7, #3]
 8009bec:	460b      	mov	r3, r1
 8009bee:	70bb      	strb	r3, [r7, #2]
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c02:	78bb      	ldrb	r3, [r7, #2]
 8009c04:	883a      	ldrh	r2, [r7, #0]
 8009c06:	78f9      	ldrb	r1, [r7, #3]
 8009c08:	f7f8 f98b 	bl	8001f22 <HAL_PCD_EP_Open>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c10:	7bfb      	ldrb	r3, [r7, #15]
 8009c12:	4618      	mov	r0, r3
 8009c14:	f000 f92e 	bl	8009e74 <USBD_Get_USB_Status>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b084      	sub	sp, #16
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
 8009c2e:	460b      	mov	r3, r1
 8009c30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c32:	2300      	movs	r3, #0
 8009c34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c36:	2300      	movs	r3, #0
 8009c38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c40:	78fa      	ldrb	r2, [r7, #3]
 8009c42:	4611      	mov	r1, r2
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7f8 f9c9 	bl	8001fdc <HAL_PCD_EP_Close>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c4e:	7bfb      	ldrb	r3, [r7, #15]
 8009c50:	4618      	mov	r0, r3
 8009c52:	f000 f90f 	bl	8009e74 <USBD_Get_USB_Status>
 8009c56:	4603      	mov	r3, r0
 8009c58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3710      	adds	r7, #16
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c70:	2300      	movs	r3, #0
 8009c72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c74:	2300      	movs	r3, #0
 8009c76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c7e:	78fa      	ldrb	r2, [r7, #3]
 8009c80:	4611      	mov	r1, r2
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7f8 fa72 	bl	800216c <HAL_PCD_EP_SetStall>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c8c:	7bfb      	ldrb	r3, [r7, #15]
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f000 f8f0 	bl	8009e74 <USBD_Get_USB_Status>
 8009c94:	4603      	mov	r3, r0
 8009c96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c98:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3710      	adds	r7, #16
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	b084      	sub	sp, #16
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]
 8009caa:	460b      	mov	r3, r1
 8009cac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cbc:	78fa      	ldrb	r2, [r7, #3]
 8009cbe:	4611      	mov	r1, r2
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7f8 faa5 	bl	8002210 <HAL_PCD_EP_ClrStall>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cca:	7bfb      	ldrb	r3, [r7, #15]
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f000 f8d1 	bl	8009e74 <USBD_Get_USB_Status>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3710      	adds	r7, #16
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	460b      	mov	r3, r1
 8009cea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cf2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009cf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	da0c      	bge.n	8009d16 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009cfc:	78fb      	ldrb	r3, [r7, #3]
 8009cfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d02:	68f9      	ldr	r1, [r7, #12]
 8009d04:	1c5a      	adds	r2, r3, #1
 8009d06:	4613      	mov	r3, r2
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	4413      	add	r3, r2
 8009d0c:	00db      	lsls	r3, r3, #3
 8009d0e:	440b      	add	r3, r1
 8009d10:	3302      	adds	r3, #2
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	e00b      	b.n	8009d2e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009d16:	78fb      	ldrb	r3, [r7, #3]
 8009d18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d1c:	68f9      	ldr	r1, [r7, #12]
 8009d1e:	4613      	mov	r3, r2
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	4413      	add	r3, r2
 8009d24:	00db      	lsls	r3, r3, #3
 8009d26:	440b      	add	r3, r1
 8009d28:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009d2c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3714      	adds	r7, #20
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr

08009d3a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b084      	sub	sp, #16
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	460b      	mov	r3, r1
 8009d44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d46:	2300      	movs	r3, #0
 8009d48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d54:	78fa      	ldrb	r2, [r7, #3]
 8009d56:	4611      	mov	r1, r2
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7f8 f8bd 	bl	8001ed8 <HAL_PCD_SetAddress>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d62:	7bfb      	ldrb	r3, [r7, #15]
 8009d64:	4618      	mov	r0, r3
 8009d66:	f000 f885 	bl	8009e74 <USBD_Get_USB_Status>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3710      	adds	r7, #16
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b086      	sub	sp, #24
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	607a      	str	r2, [r7, #4]
 8009d82:	461a      	mov	r2, r3
 8009d84:	460b      	mov	r3, r1
 8009d86:	72fb      	strb	r3, [r7, #11]
 8009d88:	4613      	mov	r3, r2
 8009d8a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d90:	2300      	movs	r3, #0
 8009d92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d9a:	893b      	ldrh	r3, [r7, #8]
 8009d9c:	7af9      	ldrb	r1, [r7, #11]
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	f7f8 f9ad 	bl	80020fe <HAL_PCD_EP_Transmit>
 8009da4:	4603      	mov	r3, r0
 8009da6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009da8:	7dfb      	ldrb	r3, [r7, #23]
 8009daa:	4618      	mov	r0, r3
 8009dac:	f000 f862 	bl	8009e74 <USBD_Get_USB_Status>
 8009db0:	4603      	mov	r3, r0
 8009db2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009db4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3718      	adds	r7, #24
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b086      	sub	sp, #24
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	60f8      	str	r0, [r7, #12]
 8009dc6:	607a      	str	r2, [r7, #4]
 8009dc8:	461a      	mov	r2, r3
 8009dca:	460b      	mov	r3, r1
 8009dcc:	72fb      	strb	r3, [r7, #11]
 8009dce:	4613      	mov	r3, r2
 8009dd0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009de0:	893b      	ldrh	r3, [r7, #8]
 8009de2:	7af9      	ldrb	r1, [r7, #11]
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	f7f8 f941 	bl	800206c <HAL_PCD_EP_Receive>
 8009dea:	4603      	mov	r3, r0
 8009dec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dee:	7dfb      	ldrb	r3, [r7, #23]
 8009df0:	4618      	mov	r0, r3
 8009df2:	f000 f83f 	bl	8009e74 <USBD_Get_USB_Status>
 8009df6:	4603      	mov	r3, r0
 8009df8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009dfa:	7dbb      	ldrb	r3, [r7, #22]
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3718      	adds	r7, #24
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e16:	78fa      	ldrb	r2, [r7, #3]
 8009e18:	4611      	mov	r1, r2
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7f8 f957 	bl	80020ce <HAL_PCD_EP_GetRxCount>
 8009e20:	4603      	mov	r3, r0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3708      	adds	r7, #8
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
	...

08009e2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009e34:	4b03      	ldr	r3, [pc, #12]	; (8009e44 <USBD_static_malloc+0x18>)
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	370c      	adds	r7, #12
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr
 8009e42:	bf00      	nop
 8009e44:	2000123c 	.word	0x2000123c

08009e48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]

}
 8009e50:	bf00      	nop
 8009e52:	370c      	adds	r7, #12
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr

08009e5c <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	460b      	mov	r3, r1
 8009e66:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009e68:	bf00      	nop
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e82:	79fb      	ldrb	r3, [r7, #7]
 8009e84:	2b03      	cmp	r3, #3
 8009e86:	d817      	bhi.n	8009eb8 <USBD_Get_USB_Status+0x44>
 8009e88:	a201      	add	r2, pc, #4	; (adr r2, 8009e90 <USBD_Get_USB_Status+0x1c>)
 8009e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8e:	bf00      	nop
 8009e90:	08009ea1 	.word	0x08009ea1
 8009e94:	08009ea7 	.word	0x08009ea7
 8009e98:	08009ead 	.word	0x08009ead
 8009e9c:	08009eb3 	.word	0x08009eb3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ea4:	e00b      	b.n	8009ebe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ea6:	2302      	movs	r3, #2
 8009ea8:	73fb      	strb	r3, [r7, #15]
    break;
 8009eaa:	e008      	b.n	8009ebe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009eac:	2301      	movs	r3, #1
 8009eae:	73fb      	strb	r3, [r7, #15]
    break;
 8009eb0:	e005      	b.n	8009ebe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009eb2:	2302      	movs	r3, #2
 8009eb4:	73fb      	strb	r3, [r7, #15]
    break;
 8009eb6:	e002      	b.n	8009ebe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009eb8:	2302      	movs	r3, #2
 8009eba:	73fb      	strb	r3, [r7, #15]
    break;
 8009ebc:	bf00      	nop
  }
  return usb_status;
 8009ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3714      	adds	r7, #20
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <memset>:
 8009ecc:	4402      	add	r2, r0
 8009ece:	4603      	mov	r3, r0
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d100      	bne.n	8009ed6 <memset+0xa>
 8009ed4:	4770      	bx	lr
 8009ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8009eda:	e7f9      	b.n	8009ed0 <memset+0x4>

08009edc <__libc_init_array>:
 8009edc:	b570      	push	{r4, r5, r6, lr}
 8009ede:	4d0d      	ldr	r5, [pc, #52]	; (8009f14 <__libc_init_array+0x38>)
 8009ee0:	4c0d      	ldr	r4, [pc, #52]	; (8009f18 <__libc_init_array+0x3c>)
 8009ee2:	1b64      	subs	r4, r4, r5
 8009ee4:	10a4      	asrs	r4, r4, #2
 8009ee6:	2600      	movs	r6, #0
 8009ee8:	42a6      	cmp	r6, r4
 8009eea:	d109      	bne.n	8009f00 <__libc_init_array+0x24>
 8009eec:	4d0b      	ldr	r5, [pc, #44]	; (8009f1c <__libc_init_array+0x40>)
 8009eee:	4c0c      	ldr	r4, [pc, #48]	; (8009f20 <__libc_init_array+0x44>)
 8009ef0:	f000 f818 	bl	8009f24 <_init>
 8009ef4:	1b64      	subs	r4, r4, r5
 8009ef6:	10a4      	asrs	r4, r4, #2
 8009ef8:	2600      	movs	r6, #0
 8009efa:	42a6      	cmp	r6, r4
 8009efc:	d105      	bne.n	8009f0a <__libc_init_array+0x2e>
 8009efe:	bd70      	pop	{r4, r5, r6, pc}
 8009f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f04:	4798      	blx	r3
 8009f06:	3601      	adds	r6, #1
 8009f08:	e7ee      	b.n	8009ee8 <__libc_init_array+0xc>
 8009f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f0e:	4798      	blx	r3
 8009f10:	3601      	adds	r6, #1
 8009f12:	e7f2      	b.n	8009efa <__libc_init_array+0x1e>
 8009f14:	08009fb4 	.word	0x08009fb4
 8009f18:	08009fb4 	.word	0x08009fb4
 8009f1c:	08009fb4 	.word	0x08009fb4
 8009f20:	08009fb8 	.word	0x08009fb8

08009f24 <_init>:
 8009f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f26:	bf00      	nop
 8009f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f2a:	bc08      	pop	{r3}
 8009f2c:	469e      	mov	lr, r3
 8009f2e:	4770      	bx	lr

08009f30 <_fini>:
 8009f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f32:	bf00      	nop
 8009f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f36:	bc08      	pop	{r3}
 8009f38:	469e      	mov	lr, r3
 8009f3a:	4770      	bx	lr
